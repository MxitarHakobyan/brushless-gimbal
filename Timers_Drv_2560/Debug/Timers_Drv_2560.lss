
Timers_Drv_2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  0000031e  00000392  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002e8  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000151  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034d  00000000  00000000  000008ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00000bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c5  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000136  00000000  00000000  00000fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001103  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	8f c0       	rjmp	.+286    	; 0x194 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	1f c1       	rjmp	.+574    	; 0x2cc <__vector_35>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	8d c0       	rjmp	.+282    	; 0x1b4 <__vector_38>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e1       	ldi	r30, 0x1E	; 30
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 30       	cpi	r26, 0x02	; 2
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	26 d0       	rcall	.+76     	; 0x16c <main>
 120:	fc c0       	rjmp	.+504    	; 0x31a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z12setup_timer3v>:
#include <avr/interrupt.h>

void setup_timer3(void)
{
	//64 pres, 250.000 hz 0.000004s
	sbi (TCCR3B, CS30);
 124:	e1 e9       	ldi	r30, 0x91	; 145
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	80 83       	st	Z, r24
	sbi (TCCR3B, CS31);	
 12e:	80 81       	ld	r24, Z
 130:	82 60       	ori	r24, 0x02	; 2
 132:	80 83       	st	Z, r24
	//sbi (TCCR3B, CS32);
	
	//sbi (TCCR3A, COM3A1);
	//sbi (TCCR3A, COM3B1);
	//sbi (TCCR3A, COM3C1);
	sbi (TCCR3A, WGM30);//8bit
 134:	e0 e9       	ldi	r30, 0x90	; 144
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	81 60       	ori	r24, 0x01	; 1
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <_Z9init_gpiov>:
	DDRD|=(1<<PD7);//enable 1 DIGITAL 7
	DDRB|=(1<<PB0);//enable 2 DIGITAL 8
	DDRD|=(1<<PD2);//enable 3 DIGITAL 2
	*/
	//DDRB|=(1<<PB5);//LED13
	sbi(DDRB,4);//digital 10
 140:	24 9a       	sbi	0x04, 4	; 4
	sbi(DDRB,5);//digital 11
 142:	25 9a       	sbi	0x04, 5	; 4
	sbi(DDRB,6);//digital 12
 144:	26 9a       	sbi	0x04, 6	; 4
	sbi(DDRH,4);//digital 7
 146:	e1 e0       	ldi	r30, 0x01	; 1
 148:	f1 e0       	ldi	r31, 0x01	; 1
 14a:	80 81       	ld	r24, Z
 14c:	80 61       	ori	r24, 0x10	; 16
 14e:	80 83       	st	Z, r24
	sbi(DDRH,5);//digital 8
 150:	80 81       	ld	r24, Z
 152:	80 62       	ori	r24, 0x20	; 32
 154:	80 83       	st	Z, r24
	sbi(DDRH,6);//digital 9
 156:	80 81       	ld	r24, Z
 158:	80 64       	ori	r24, 0x40	; 64
 15a:	80 83       	st	Z, r24
 15c:	08 95       	ret

0000015e <_Z23Enable_timer3_interruptv>:
}


void Enable_timer3_interrupt()
{
	sbi (TIMSK3, TOIE3);
 15e:	e1 e7       	ldi	r30, 0x71	; 113
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	81 60       	ori	r24, 0x01	; 1
 166:	80 83       	st	Z, r24
	sei();
 168:	78 94       	sei
 16a:	08 95       	ret

0000016c <main>:
};
uint8_t state_counter=0;
uint8_t phase_state=1;//global state 1,2,3,4,5,6
int main(void)
{	
	Enable_timer3_interrupt();
 16c:	f8 df       	rcall	.-16     	; 0x15e <_Z23Enable_timer3_interruptv>
	init_gpio();
 16e:	e8 df       	rcall	.-48     	; 0x140 <_Z9init_gpiov>
	OCR3A=127;
 170:	8f e7       	ldi	r24, 0x7F	; 127
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 178:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
	OCR3B=127;
 17c:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
 180:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
	OCR3C=127;   
 184:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
 188:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
	//GTCCR = 0;//release all timers
	//TCNT1=0;
	setup_timer3();
 18c:	cb df       	rcall	.-106    	; 0x124 <_Z12setup_timer3v>
	DDRB|=(1<<7);
 18e:	27 9a       	sbi	0x04, 7	; 4
	DDRG|=(1<<5);
 190:	9d 9a       	sbi	0x13, 5	; 19
	76,73,70,67,64,62,59,56,54,51,49,46,44,42,39,37,35,33,31,29,27,25,23,21,20,18,16,15,14,12,11,10,9,7,6,5,5,4,3,2,2,1,1,1,0,0,0,0,0,0,0,1,1,1,2,2,3,4,5,5,6,7,9,10,11,12,14,15,16,18,20,21,23,25,27,29,31,
	33,35,37,39,42,44,46,49,51,54,56,59,62,64,67,70,73,76,78,81,84,87,90,93,96,99,102,105,108,111,115,118,121,124
};
uint8_t state_counter=0;
uint8_t phase_state=1;//global state 1,2,3,4,5,6
int main(void)
 192:	ff cf       	rjmp	.-2      	; 0x192 <main+0x26>

00000194 <__vector_29>:
				PWM_update();

}

ISR(ADC_vect)//ADC interrupt routine
{
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	8f 93       	push	r24
	uint8_t lowByte=ADCL;
 1a0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	uint16_t value=ADCH<<2 | lowByte >> 6;
 1a4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <__vector_38>:

ISR (USART1_TX_vect)//USART interrupt routine
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
	
}
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <_Z10PWM_updatev>:
	//PWM6->HS_W=5	pin OC0B
	
	//if(++state_counter>5)
	//{
	//	state_counter=0;
		switch(phase_state)
 1c8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 1cc:	83 30       	cpi	r24, 0x03	; 3
 1ce:	a1 f1       	breq	.+104    	; 0x238 <_Z10PWM_updatev+0x70>
 1d0:	28 f4       	brcc	.+10     	; 0x1dc <_Z10PWM_updatev+0x14>
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	59 f0       	breq	.+22     	; 0x1ec <_Z10PWM_updatev+0x24>
 1d6:	82 30       	cpi	r24, 0x02	; 2
 1d8:	e1 f0       	breq	.+56     	; 0x212 <_Z10PWM_updatev+0x4a>
 1da:	08 95       	ret
 1dc:	85 30       	cpi	r24, 0x05	; 5
 1de:	09 f4       	brne	.+2      	; 0x1e2 <_Z10PWM_updatev+0x1a>
 1e0:	51 c0       	rjmp	.+162    	; 0x284 <_Z10PWM_updatev+0xbc>
 1e2:	e8 f1       	brcs	.+122    	; 0x25e <_Z10PWM_updatev+0x96>
 1e4:	86 30       	cpi	r24, 0x06	; 6
 1e6:	09 f4       	brne	.+2      	; 0x1ea <_Z10PWM_updatev+0x22>
 1e8:	60 c0       	rjmp	.+192    	; 0x2aa <_Z10PWM_updatev+0xe2>
 1ea:	08 95       	ret
		{
			case 1:
				//110
				//HS_U_LOW;
				HS_V_HIGH;
 1ec:	2d 9a       	sbi	0x05, 5	; 5
				HS_W_LOW;
 1ee:	2e 98       	cbi	0x05, 6	; 5
				
				LS_U_LOW;
 1f0:	e2 e0       	ldi	r30, 0x02	; 2
 1f2:	f1 e0       	ldi	r31, 0x01	; 1
 1f4:	80 81       	ld	r24, Z
 1f6:	8f 7e       	andi	r24, 0xEF	; 239
 1f8:	80 83       	st	Z, r24
				LS_V_HIGH;
 1fa:	80 81       	ld	r24, Z
 1fc:	80 62       	ori	r24, 0x20	; 32
 1fe:	80 83       	st	Z, r24
				LS_W_HIGH;
 200:	80 81       	ld	r24, Z
 202:	80 64       	ori	r24, 0x40	; 64
 204:	80 83       	st	Z, r24
				//currentStepA++;
				//currentStepB++;
				//currentStepC++;
				phase_state++;
 206:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 20a:	8f 5f       	subi	r24, 0xFF	; 255
 20c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			break;
 210:	08 95       	ret

			case 2:
				//100
				//HS_U=sin_Drv[currentStepA];
				HS_U_HIGH;
 212:	2c 9a       	sbi	0x05, 4	; 5
				//HS_V_LOW;
				HS_W_LOW;
 214:	2e 98       	cbi	0x05, 6	; 5
				LS_U_HIGH;
 216:	e2 e0       	ldi	r30, 0x02	; 2
 218:	f1 e0       	ldi	r31, 0x01	; 1
 21a:	80 81       	ld	r24, Z
 21c:	80 61       	ori	r24, 0x10	; 16
 21e:	80 83       	st	Z, r24
				LS_V_LOW;
 220:	80 81       	ld	r24, Z
 222:	8f 7d       	andi	r24, 0xDF	; 223
 224:	80 83       	st	Z, r24
				LS_W_HIGH;
 226:	80 81       	ld	r24, Z
 228:	80 64       	ori	r24, 0x40	; 64
 22a:	80 83       	st	Z, r24
				phase_state++;
 22c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 230:	8f 5f       	subi	r24, 0xFF	; 255
 232:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
				//currentStepA++;
				//currentStepB++;
				//currentStepC++;
			break;
 236:	08 95       	ret

			case 3:
				//101
				//HS_U=sin_Drv[currentStepA];
				HS_U_HIGH;
 238:	2c 9a       	sbi	0x05, 4	; 5
				HS_V_LOW;
 23a:	2d 98       	cbi	0x05, 5	; 5
				//HS_W_LOW;
				LS_U_HIGH;
 23c:	e2 e0       	ldi	r30, 0x02	; 2
 23e:	f1 e0       	ldi	r31, 0x01	; 1
 240:	80 81       	ld	r24, Z
 242:	80 61       	ori	r24, 0x10	; 16
 244:	80 83       	st	Z, r24
				LS_V_HIGH;
 246:	80 81       	ld	r24, Z
 248:	80 62       	ori	r24, 0x20	; 32
 24a:	80 83       	st	Z, r24
				LS_W_LOW;
 24c:	80 81       	ld	r24, Z
 24e:	8f 7b       	andi	r24, 0xBF	; 191
 250:	80 83       	st	Z, r24
				//currentStepA++;
				//currentStepB++;
				//currentStepC++;
				phase_state++;
 252:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 256:	8f 5f       	subi	r24, 0xFF	; 255
 258:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			break;
 25c:	08 95       	ret

			case 4:
				//001
				//HS_U_LOW;
				HS_V_LOW;
 25e:	2d 98       	cbi	0x05, 5	; 5
				HS_W_HIGH;
 260:	2e 9a       	sbi	0x05, 6	; 5
				LS_U_LOW;
 262:	e2 e0       	ldi	r30, 0x02	; 2
 264:	f1 e0       	ldi	r31, 0x01	; 1
 266:	80 81       	ld	r24, Z
 268:	8f 7e       	andi	r24, 0xEF	; 239
 26a:	80 83       	st	Z, r24
				LS_V_HIGH;
 26c:	80 81       	ld	r24, Z
 26e:	80 62       	ori	r24, 0x20	; 32
 270:	80 83       	st	Z, r24
				LS_W_HIGH;
 272:	80 81       	ld	r24, Z
 274:	80 64       	ori	r24, 0x40	; 64
 276:	80 83       	st	Z, r24
				phase_state++;
 278:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 27c:	8f 5f       	subi	r24, 0xFF	; 255
 27e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
				//currentStepA++;
				//currentStepB++;
				//currentStepC++;
			break;
 282:	08 95       	ret

			case 5:
				//011
				HS_U_LOW;
 284:	2c 98       	cbi	0x05, 4	; 5
				//HS_V_LOW;
				HS_W_HIGH;
 286:	2e 9a       	sbi	0x05, 6	; 5
				LS_U_HIGH;
 288:	e2 e0       	ldi	r30, 0x02	; 2
 28a:	f1 e0       	ldi	r31, 0x01	; 1
 28c:	80 81       	ld	r24, Z
 28e:	80 61       	ori	r24, 0x10	; 16
 290:	80 83       	st	Z, r24
				LS_V_LOW;
 292:	80 81       	ld	r24, Z
 294:	8f 7d       	andi	r24, 0xDF	; 223
 296:	80 83       	st	Z, r24
				LS_W_HIGH;
 298:	80 81       	ld	r24, Z
 29a:	80 64       	ori	r24, 0x40	; 64
 29c:	80 83       	st	Z, r24
				//currentStepA++;
				//currentStepB++;
				//currentStepC++;
				phase_state++;
 29e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
 2a4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			break;
 2a8:	08 95       	ret

			case 6:
				//010
				HS_U_LOW;
 2aa:	2c 98       	cbi	0x05, 4	; 5
				HS_V_HIGH;
 2ac:	2d 9a       	sbi	0x05, 5	; 5
				//HS_W_LOW
				LS_U_HIGH;
 2ae:	e2 e0       	ldi	r30, 0x02	; 2
 2b0:	f1 e0       	ldi	r31, 0x01	; 1
 2b2:	80 81       	ld	r24, Z
 2b4:	80 61       	ori	r24, 0x10	; 16
 2b6:	80 83       	st	Z, r24
				LS_V_HIGH;
 2b8:	80 81       	ld	r24, Z
 2ba:	80 62       	ori	r24, 0x20	; 32
 2bc:	80 83       	st	Z, r24
				LS_W_LOW;
 2be:	80 81       	ld	r24, Z
 2c0:	8f 7b       	andi	r24, 0xBF	; 191
 2c2:	80 83       	st	Z, r24
				phase_state=1;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 2ca:	08 95       	ret

000002cc <__vector_35>:
	    //PORTB^=(1<<6);   
    }
}

ISR(TIMER3_OVF_vect)//Timer interrupt routine
{
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	0b b6       	in	r0, 0x3b	; 59
 2d8:	0f 92       	push	r0
 2da:	2f 93       	push	r18
 2dc:	3f 93       	push	r19
 2de:	4f 93       	push	r20
 2e0:	5f 93       	push	r21
 2e2:	6f 93       	push	r22
 2e4:	7f 93       	push	r23
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
 2ea:	af 93       	push	r26
 2ec:	bf 93       	push	r27
 2ee:	ef 93       	push	r30
 2f0:	ff 93       	push	r31
				PWM_update();
 2f2:	6a df       	rcall	.-300    	; 0x1c8 <_Z10PWM_updatev>

}
 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	bf 91       	pop	r27
 2fa:	af 91       	pop	r26
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	7f 91       	pop	r23
 302:	6f 91       	pop	r22
 304:	5f 91       	pop	r21
 306:	4f 91       	pop	r20
 308:	3f 91       	pop	r19
 30a:	2f 91       	pop	r18
 30c:	0f 90       	pop	r0
 30e:	0b be       	out	0x3b, r0	; 59
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <_exit>:
 31a:	f8 94       	cli

0000031c <__stop_program>:
 31c:	ff cf       	rjmp	.-2      	; 0x31c <__stop_program>
