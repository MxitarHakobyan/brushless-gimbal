
Timers_Drv_2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000374  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000374  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800202  00800202  0000040a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000564  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002ff  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000057d  00000000  00000000  00000da7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00001324  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cd  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f0  00000000  00000000  0000188d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00001a7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a1 c0       	rjmp	.+322    	; 0x1b0 <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	a7 c0       	rjmp	.+334    	; 0x1c4 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3f c1       	rjmp	.+638    	; 0x30c <__vector_35>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e7       	ldi	r30, 0x74	; 116
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 30       	cpi	r26, 0x04	; 4
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	23 d0       	rcall	.+70     	; 0x166 <main>
 120:	27 c1       	rjmp	.+590    	; 0x370 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z8ADC_Initv>:
	
	//start the first conversion
	//enable the global interrupts
	
	//ADMUX  =(1<<ADLAR);//adlar is direction bit for ADCL , ADCH distribution 
	ADMUX |= (1<<REFS0);
 124:	ec e7       	ldi	r30, 0x7C	; 124
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);//control and status register
 12e:	8f ec       	ldi	r24, 0xCF	; 207
 130:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	//ADSC is ADC start register maybe after sei() ????
	ADCSRB = (1<<ADTS0) | (1<<ADTS1);//Timer/Counter0 Compare Match A
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xFE;
 13a:	8e ef       	ldi	r24, 0xFE	; 254
 13c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xFF;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
 146:	08 95       	ret

00000148 <_Z9init_gpiov>:
	DDRD|=(1<<PD7);//enable 1 DIGITAL 7
	DDRB|=(1<<PB0);//enable 2 DIGITAL 8
	DDRD|=(1<<PD2);//enable 3 DIGITAL 2
	*/
	//DDRB|=(1<<PB5);//LED13
	sbi(DDRB,4);//digital 10
 148:	24 9a       	sbi	0x04, 4	; 4
	sbi(DDRB,5);//digital 11
 14a:	25 9a       	sbi	0x04, 5	; 4
	sbi(DDRB,6);//digital 12
 14c:	26 9a       	sbi	0x04, 6	; 4
	sbi(DDRH,4);//digital 7
 14e:	e1 e0       	ldi	r30, 0x01	; 1
 150:	f1 e0       	ldi	r31, 0x01	; 1
 152:	80 81       	ld	r24, Z
 154:	80 61       	ori	r24, 0x10	; 16
 156:	80 83       	st	Z, r24
	sbi(DDRH,5);//digital 8
 158:	80 81       	ld	r24, Z
 15a:	80 62       	ori	r24, 0x20	; 32
 15c:	80 83       	st	Z, r24
	sbi(DDRH,6);//digital 9
 15e:	80 81       	ld	r24, Z
 160:	80 64       	ori	r24, 0x40	; 64
 162:	80 83       	st	Z, r24
 164:	08 95       	ret

00000166 <main>:
}


int main(void)
{	
	ADC_Init();
 166:	de df       	rcall	.-68     	; 0x124 <_Z8ADC_Initv>
	USART_Init(MY_UBRR);
 168:	87 e6       	ldi	r24, 0x67	; 103
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	f6 d0       	rcall	.+492    	; 0x35a <_Z10USART_Initj>
//	Enable_timer3_interrupt();
	init_gpio();
 16e:	ec df       	rcall	.-40     	; 0x148 <_Z9init_gpiov>
	OCR3A=127;
 170:	8f e7       	ldi	r24, 0x7F	; 127
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 178:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
	OCR3B=127;
 17c:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
 180:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
	OCR3C=127;   
 184:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
 188:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
	//GTCCR = 0;//release all timers
	//TCNT1=0;
//	setup_timer3();
	DDRB|=(1<<7);
 18c:	27 9a       	sbi	0x04, 7	; 4
	DDRG|=(1<<5);
 18e:	9d 9a       	sbi	0x13, 5	; 19
	//UDR0=0;
	sei();
 190:	78 94       	sei
		
		//PORTB^=(1<<5);
	    //PORTB^=(1<<6); 
		//UDR0=0x01;  
	//    ADMUX|=(1<<MUX0);
		ADCSRA |= (1<<ADSC);
 192:	ea e7       	ldi	r30, 0x7A	; 122
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	80 64       	ori	r24, 0x40	; 64
 19a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	2f ef       	ldi	r18, 0xFF	; 255
 19e:	81 ee       	ldi	r24, 0xE1	; 225
 1a0:	94 e0       	ldi	r25, 0x04	; 4
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <main+0x3c>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <main+0x46>
 1ac:	00 00       	nop
 1ae:	f3 cf       	rjmp	.-26     	; 0x196 <main+0x30>

000001b0 <__vector_27>:
		
    }
}

ISR (USART0_TX_vect)//USART interrupt routine
{
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
		
}
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <__vector_29>:
{
	PWM_update();
}

ISR(ADC_vect)//ADC interrupt routine
{
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	0b b6       	in	r0, 0x3b	; 59
 1d0:	0f 92       	push	r0
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	ef 93       	push	r30
 1d8:	ff 93       	push	r31
	value=ADC;
 1da:	e8 e7       	ldi	r30, 0x78	; 120
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	91 81       	ldd	r25, Z+1	; 0x01
 1e2:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 1e6:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
	UDR0=ADC;
 1ea:	80 81       	ld	r24, Z
 1ec:	91 81       	ldd	r25, Z+1	; 0x01
 1ee:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
}
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	0f 90       	pop	r0
 1fc:	0b be       	out	0x3b, r0	; 59
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <_Z10PWM_updatev>:
	//PWM6->HS_W=5	pin OC0B
	
	//if(++state_counter>5)
	//{
	//	state_counter=0;
		switch(phase_state)
 208:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 20c:	83 30       	cpi	r24, 0x03	; 3
 20e:	a1 f1       	breq	.+104    	; 0x278 <_Z10PWM_updatev+0x70>
 210:	28 f4       	brcc	.+10     	; 0x21c <_Z10PWM_updatev+0x14>
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	59 f0       	breq	.+22     	; 0x22c <_Z10PWM_updatev+0x24>
 216:	82 30       	cpi	r24, 0x02	; 2
 218:	e1 f0       	breq	.+56     	; 0x252 <_Z10PWM_updatev+0x4a>
 21a:	08 95       	ret
 21c:	85 30       	cpi	r24, 0x05	; 5
 21e:	09 f4       	brne	.+2      	; 0x222 <_Z10PWM_updatev+0x1a>
 220:	51 c0       	rjmp	.+162    	; 0x2c4 <_Z10PWM_updatev+0xbc>
 222:	e8 f1       	brcs	.+122    	; 0x29e <_Z10PWM_updatev+0x96>
 224:	86 30       	cpi	r24, 0x06	; 6
 226:	09 f4       	brne	.+2      	; 0x22a <_Z10PWM_updatev+0x22>
 228:	60 c0       	rjmp	.+192    	; 0x2ea <_Z10PWM_updatev+0xe2>
 22a:	08 95       	ret
		{
			case 1:
				//110
				//HS_U_LOW;
				HS_V_HIGH;
 22c:	2d 9a       	sbi	0x05, 5	; 5
				HS_W_LOW;
 22e:	2e 98       	cbi	0x05, 6	; 5
				
				LS_U_LOW;
 230:	e2 e0       	ldi	r30, 0x02	; 2
 232:	f1 e0       	ldi	r31, 0x01	; 1
 234:	80 81       	ld	r24, Z
 236:	8f 7e       	andi	r24, 0xEF	; 239
 238:	80 83       	st	Z, r24
				LS_V_HIGH;
 23a:	80 81       	ld	r24, Z
 23c:	80 62       	ori	r24, 0x20	; 32
 23e:	80 83       	st	Z, r24
				LS_W_HIGH;
 240:	80 81       	ld	r24, Z
 242:	80 64       	ori	r24, 0x40	; 64
 244:	80 83       	st	Z, r24
				//currentStepA++;
				//currentStepB++;
				//currentStepC++;
				phase_state++;
 246:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 24a:	8f 5f       	subi	r24, 0xFF	; 255
 24c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			break;
 250:	08 95       	ret

			case 2:
				//100
				//HS_U=sin_Drv[currentStepA];
				HS_U_HIGH;
 252:	2c 9a       	sbi	0x05, 4	; 5
				//HS_V_LOW;
				HS_W_LOW;
 254:	2e 98       	cbi	0x05, 6	; 5
				LS_U_HIGH;
 256:	e2 e0       	ldi	r30, 0x02	; 2
 258:	f1 e0       	ldi	r31, 0x01	; 1
 25a:	80 81       	ld	r24, Z
 25c:	80 61       	ori	r24, 0x10	; 16
 25e:	80 83       	st	Z, r24
				LS_V_LOW;
 260:	80 81       	ld	r24, Z
 262:	8f 7d       	andi	r24, 0xDF	; 223
 264:	80 83       	st	Z, r24
				LS_W_HIGH;
 266:	80 81       	ld	r24, Z
 268:	80 64       	ori	r24, 0x40	; 64
 26a:	80 83       	st	Z, r24
				phase_state++;
 26c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 270:	8f 5f       	subi	r24, 0xFF	; 255
 272:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
				//currentStepA++;
				//currentStepB++;
				//currentStepC++;
			break;
 276:	08 95       	ret

			case 3:
				//101
				//HS_U=sin_Drv[currentStepA];
				HS_U_HIGH;
 278:	2c 9a       	sbi	0x05, 4	; 5
				HS_V_LOW;
 27a:	2d 98       	cbi	0x05, 5	; 5
				//HS_W_LOW;
				LS_U_HIGH;
 27c:	e2 e0       	ldi	r30, 0x02	; 2
 27e:	f1 e0       	ldi	r31, 0x01	; 1
 280:	80 81       	ld	r24, Z
 282:	80 61       	ori	r24, 0x10	; 16
 284:	80 83       	st	Z, r24
				LS_V_HIGH;
 286:	80 81       	ld	r24, Z
 288:	80 62       	ori	r24, 0x20	; 32
 28a:	80 83       	st	Z, r24
				LS_W_LOW;
 28c:	80 81       	ld	r24, Z
 28e:	8f 7b       	andi	r24, 0xBF	; 191
 290:	80 83       	st	Z, r24
				//currentStepA++;
				//currentStepB++;
				//currentStepC++;
				phase_state++;
 292:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 296:	8f 5f       	subi	r24, 0xFF	; 255
 298:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			break;
 29c:	08 95       	ret

			case 4:
				//001
				//HS_U_LOW;
				HS_V_LOW;
 29e:	2d 98       	cbi	0x05, 5	; 5
				HS_W_HIGH;
 2a0:	2e 9a       	sbi	0x05, 6	; 5
				LS_U_LOW;
 2a2:	e2 e0       	ldi	r30, 0x02	; 2
 2a4:	f1 e0       	ldi	r31, 0x01	; 1
 2a6:	80 81       	ld	r24, Z
 2a8:	8f 7e       	andi	r24, 0xEF	; 239
 2aa:	80 83       	st	Z, r24
				LS_V_HIGH;
 2ac:	80 81       	ld	r24, Z
 2ae:	80 62       	ori	r24, 0x20	; 32
 2b0:	80 83       	st	Z, r24
				LS_W_HIGH;
 2b2:	80 81       	ld	r24, Z
 2b4:	80 64       	ori	r24, 0x40	; 64
 2b6:	80 83       	st	Z, r24
				phase_state++;
 2b8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 2bc:	8f 5f       	subi	r24, 0xFF	; 255
 2be:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
				//currentStepA++;
				//currentStepB++;
				//currentStepC++;
			break;
 2c2:	08 95       	ret

			case 5:
				//011
				HS_U_LOW;
 2c4:	2c 98       	cbi	0x05, 4	; 5
				//HS_V_LOW;
				HS_W_HIGH;
 2c6:	2e 9a       	sbi	0x05, 6	; 5
				LS_U_HIGH;
 2c8:	e2 e0       	ldi	r30, 0x02	; 2
 2ca:	f1 e0       	ldi	r31, 0x01	; 1
 2cc:	80 81       	ld	r24, Z
 2ce:	80 61       	ori	r24, 0x10	; 16
 2d0:	80 83       	st	Z, r24
				LS_V_LOW;
 2d2:	80 81       	ld	r24, Z
 2d4:	8f 7d       	andi	r24, 0xDF	; 223
 2d6:	80 83       	st	Z, r24
				LS_W_HIGH;
 2d8:	80 81       	ld	r24, Z
 2da:	80 64       	ori	r24, 0x40	; 64
 2dc:	80 83       	st	Z, r24
				//currentStepA++;
				//currentStepB++;
				//currentStepC++;
				phase_state++;
 2de:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 2e2:	8f 5f       	subi	r24, 0xFF	; 255
 2e4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			break;
 2e8:	08 95       	ret

			case 6:
				//010
				HS_U_LOW;
 2ea:	2c 98       	cbi	0x05, 4	; 5
				HS_V_HIGH;
 2ec:	2d 9a       	sbi	0x05, 5	; 5
				//HS_W_LOW
				LS_U_HIGH;
 2ee:	e2 e0       	ldi	r30, 0x02	; 2
 2f0:	f1 e0       	ldi	r31, 0x01	; 1
 2f2:	80 81       	ld	r24, Z
 2f4:	80 61       	ori	r24, 0x10	; 16
 2f6:	80 83       	st	Z, r24
				LS_V_HIGH;
 2f8:	80 81       	ld	r24, Z
 2fa:	80 62       	ori	r24, 0x20	; 32
 2fc:	80 83       	st	Z, r24
				LS_W_LOW;
 2fe:	80 81       	ld	r24, Z
 300:	8f 7b       	andi	r24, 0xBF	; 191
 302:	80 83       	st	Z, r24
				phase_state=1;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 30a:	08 95       	ret

0000030c <__vector_35>:
{
		
}

ISR(TIMER3_OVF_vect)//Timer interrupt routine
{
 30c:	1f 92       	push	r1
 30e:	0f 92       	push	r0
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	0f 92       	push	r0
 314:	11 24       	eor	r1, r1
 316:	0b b6       	in	r0, 0x3b	; 59
 318:	0f 92       	push	r0
 31a:	2f 93       	push	r18
 31c:	3f 93       	push	r19
 31e:	4f 93       	push	r20
 320:	5f 93       	push	r21
 322:	6f 93       	push	r22
 324:	7f 93       	push	r23
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
 32a:	af 93       	push	r26
 32c:	bf 93       	push	r27
 32e:	ef 93       	push	r30
 330:	ff 93       	push	r31
	PWM_update();
 332:	6a df       	rcall	.-300    	; 0x208 <_Z10PWM_updatev>
}
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	bf 91       	pop	r27
 33a:	af 91       	pop	r26
 33c:	9f 91       	pop	r25
 33e:	8f 91       	pop	r24
 340:	7f 91       	pop	r23
 342:	6f 91       	pop	r22
 344:	5f 91       	pop	r21
 346:	4f 91       	pop	r20
 348:	3f 91       	pop	r19
 34a:	2f 91       	pop	r18
 34c:	0f 90       	pop	r0
 34e:	0b be       	out	0x3b, r0	; 59
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <_Z10USART_Initj>:
#include <avr/io.h>
#include <stdio.h>
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 35a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;
 35e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	UCSR0B = (1<<TXEN0) | (1<<TXCIE0);
 362:	88 e4       	ldi	r24, 0x48	; 72
 364:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);//2 stop bit 8 bit
 368:	8e e0       	ldi	r24, 0x0E	; 14
 36a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 36e:	08 95       	ret

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>
