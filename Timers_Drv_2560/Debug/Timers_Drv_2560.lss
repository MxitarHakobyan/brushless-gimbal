
Timers_Drv_2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000006d2  00000766  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800208  00800208  0000076e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000076e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009bd  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000425  00000000  00000000  0000128d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000066f  00000000  00000000  000016b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  00001d24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041a  00000000  00000000  00001f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000570  00000000  00000000  00002346  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000028b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	3f c1       	rjmp	.+638    	; 0x2c4 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	53 c1       	rjmp	.+678    	; 0x31c <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ed       	ldi	r30, 0xD2	; 210
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e0       	ldi	r26, 0x08	; 8
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 31       	cpi	r26, 0x16	; 22
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	b5 d0       	rcall	.+362    	; 0x28a <main>
 120:	d6 c2       	rjmp	.+1452   	; 0x6ce <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z8ADC_Initv>:
	
	//start the first conversion
	//enable the global interrupts
	
	//ADMUX  =(1<<ADLAR);//adlar is direction bit for ADCL , ADCH distribution 
	ADMUX |= (1<<REFS0);
 124:	ec e7       	ldi	r30, 0x7C	; 124
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
	//sbi(ADMUX,MUX4);
	//ADMUX |= (1<<MUX4);
	ADCSRA = (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);//control and status register
 12e:	8f ec       	ldi	r24, 0xCF	; 207
 130:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	//ADSC is ADC start register maybe after sei() ????
	ADCSRB = (1<<ADTS0) | (1<<ADTS1);//Timer/Counter0 Compare Match A
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
 13a:	08 95       	ret

0000013c <_Z9init_gpiov>:
			break;
			case 6:
			phase_state--;
			break;
		}
		reverse++;
 13c:	24 9a       	sbi	0x04, 4	; 4
 13e:	25 9a       	sbi	0x04, 5	; 4
 140:	26 9a       	sbi	0x04, 6	; 4
 142:	e1 e0       	ldi	r30, 0x01	; 1
 144:	f1 e0       	ldi	r31, 0x01	; 1
 146:	80 81       	ld	r24, Z
 148:	80 61       	ori	r24, 0x10	; 16
 14a:	80 83       	st	Z, r24
 14c:	80 81       	ld	r24, Z
 14e:	80 62       	ori	r24, 0x20	; 32
 150:	80 83       	st	Z, r24
 152:	80 81       	ld	r24, Z
 154:	80 64       	ori	r24, 0x40	; 64
 156:	80 83       	st	Z, r24
 158:	08 95       	ret

0000015a <_Z18SWITCH_PHASE_STATERh>:
	}
}

void SWITCH_PHASE_STATE(uint8_t &phase_state)
{
 15a:	fc 01       	movw	r30, r24
	switch(phase_state)
 15c:	90 81       	ld	r25, Z
 15e:	93 30       	cpi	r25, 0x03	; 3
 160:	91 f0       	breq	.+36     	; 0x186 <_Z18SWITCH_PHASE_STATERh+0x2c>
 162:	28 f4       	brcc	.+10     	; 0x16e <_Z18SWITCH_PHASE_STATERh+0x14>
 164:	91 30       	cpi	r25, 0x01	; 1
 166:	49 f0       	breq	.+18     	; 0x17a <_Z18SWITCH_PHASE_STATERh+0x20>
 168:	92 30       	cpi	r25, 0x02	; 2
 16a:	51 f0       	breq	.+20     	; 0x180 <_Z18SWITCH_PHASE_STATERh+0x26>
 16c:	08 95       	ret
 16e:	95 30       	cpi	r25, 0x05	; 5
 170:	81 f0       	breq	.+32     	; 0x192 <_Z18SWITCH_PHASE_STATERh+0x38>
 172:	60 f0       	brcs	.+24     	; 0x18c <_Z18SWITCH_PHASE_STATERh+0x32>
 174:	96 30       	cpi	r25, 0x06	; 6
 176:	81 f0       	breq	.+32     	; 0x198 <_Z18SWITCH_PHASE_STATERh+0x3e>
 178:	08 95       	ret
	{
		case 1:
		phase_state++;
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	80 83       	st	Z, r24
		break;
 17e:	08 95       	ret
		case 2:
		phase_state++;
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	80 83       	st	Z, r24
		break;
 184:	08 95       	ret
		case 3:
		phase_state++;
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	80 83       	st	Z, r24
		break;
 18a:	08 95       	ret
		case 4:
		phase_state++;
 18c:	85 e0       	ldi	r24, 0x05	; 5
 18e:	80 83       	st	Z, r24
		break;
 190:	08 95       	ret
		case 5:
		phase_state++;
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	80 83       	st	Z, r24
		break;
 196:	08 95       	ret
		case 6:
		phase_state=1;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	80 83       	st	Z, r24
 19c:	08 95       	ret

0000019e <_Z10PWM_updateRh>:

}

void PWM_update(uint8_t &phase_state)
{
	switch(phase_state)
 19e:	fc 01       	movw	r30, r24
 1a0:	80 81       	ld	r24, Z
 1a2:	83 30       	cpi	r24, 0x03	; 3
 1a4:	49 f1       	breq	.+82     	; 0x1f8 <_Z10PWM_updateRh+0x5a>
 1a6:	28 f4       	brcc	.+10     	; 0x1b2 <_Z10PWM_updateRh+0x14>
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	51 f0       	breq	.+20     	; 0x1c0 <_Z10PWM_updateRh+0x22>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	b1 f0       	breq	.+44     	; 0x1dc <_Z10PWM_updateRh+0x3e>
 1b0:	08 95       	ret
 1b2:	85 30       	cpi	r24, 0x05	; 5
 1b4:	e9 f1       	breq	.+122    	; 0x230 <_Z10PWM_updateRh+0x92>
 1b6:	70 f1       	brcs	.+92     	; 0x214 <_Z10PWM_updateRh+0x76>
 1b8:	86 30       	cpi	r24, 0x06	; 6
 1ba:	09 f4       	brne	.+2      	; 0x1be <_Z10PWM_updateRh+0x20>
 1bc:	47 c0       	rjmp	.+142    	; 0x24c <_Z10PWM_updateRh+0xae>
 1be:	08 95       	ret
	{
		case 1:
		//110
		//HS_U_LOW;
		HS_V_HIGH;
 1c0:	2d 9a       	sbi	0x05, 5	; 5
		HS_W_LOW;
 1c2:	2e 98       	cbi	0x05, 6	; 5
		
		LS_U_LOW;
 1c4:	e2 e0       	ldi	r30, 0x02	; 2
 1c6:	f1 e0       	ldi	r31, 0x01	; 1
 1c8:	80 81       	ld	r24, Z
 1ca:	8f 7e       	andi	r24, 0xEF	; 239
 1cc:	80 83       	st	Z, r24
		LS_V_HIGH;
 1ce:	80 81       	ld	r24, Z
 1d0:	80 62       	ori	r24, 0x20	; 32
 1d2:	80 83       	st	Z, r24
		LS_W_HIGH;
 1d4:	80 81       	ld	r24, Z
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	80 83       	st	Z, r24

		break;
 1da:	08 95       	ret

		case 2:
		//100
		HS_U_HIGH;
 1dc:	2c 9a       	sbi	0x05, 4	; 5
		//HS_V_LOW;
		HS_W_LOW;
 1de:	2e 98       	cbi	0x05, 6	; 5
		LS_U_HIGH;
 1e0:	e2 e0       	ldi	r30, 0x02	; 2
 1e2:	f1 e0       	ldi	r31, 0x01	; 1
 1e4:	80 81       	ld	r24, Z
 1e6:	80 61       	ori	r24, 0x10	; 16
 1e8:	80 83       	st	Z, r24
		LS_V_LOW;
 1ea:	80 81       	ld	r24, Z
 1ec:	8f 7d       	andi	r24, 0xDF	; 223
 1ee:	80 83       	st	Z, r24
		LS_W_HIGH;
 1f0:	80 81       	ld	r24, Z
 1f2:	80 64       	ori	r24, 0x40	; 64
 1f4:	80 83       	st	Z, r24

		break;
 1f6:	08 95       	ret

		case 3:
		//101
		HS_U_HIGH;
 1f8:	2c 9a       	sbi	0x05, 4	; 5
		HS_V_LOW;
 1fa:	2d 98       	cbi	0x05, 5	; 5
		//HS_W_LOW;
		LS_U_HIGH;
 1fc:	e2 e0       	ldi	r30, 0x02	; 2
 1fe:	f1 e0       	ldi	r31, 0x01	; 1
 200:	80 81       	ld	r24, Z
 202:	80 61       	ori	r24, 0x10	; 16
 204:	80 83       	st	Z, r24
		LS_V_HIGH;
 206:	80 81       	ld	r24, Z
 208:	80 62       	ori	r24, 0x20	; 32
 20a:	80 83       	st	Z, r24
		LS_W_LOW;
 20c:	80 81       	ld	r24, Z
 20e:	8f 7b       	andi	r24, 0xBF	; 191
 210:	80 83       	st	Z, r24

		break;
 212:	08 95       	ret

		case 4:
		//001
		//HS_U_LOW;
		HS_V_LOW;
 214:	2d 98       	cbi	0x05, 5	; 5
		HS_W_HIGH;
 216:	2e 9a       	sbi	0x05, 6	; 5
		LS_U_LOW;
 218:	e2 e0       	ldi	r30, 0x02	; 2
 21a:	f1 e0       	ldi	r31, 0x01	; 1
 21c:	80 81       	ld	r24, Z
 21e:	8f 7e       	andi	r24, 0xEF	; 239
 220:	80 83       	st	Z, r24
		LS_V_HIGH;
 222:	80 81       	ld	r24, Z
 224:	80 62       	ori	r24, 0x20	; 32
 226:	80 83       	st	Z, r24
		LS_W_HIGH;
 228:	80 81       	ld	r24, Z
 22a:	80 64       	ori	r24, 0x40	; 64
 22c:	80 83       	st	Z, r24

		break;
 22e:	08 95       	ret

		case 5:
		//011
		HS_U_LOW;
 230:	2c 98       	cbi	0x05, 4	; 5
		//HS_V_LOW;
		HS_W_HIGH;
 232:	2e 9a       	sbi	0x05, 6	; 5
		LS_U_HIGH;
 234:	e2 e0       	ldi	r30, 0x02	; 2
 236:	f1 e0       	ldi	r31, 0x01	; 1
 238:	80 81       	ld	r24, Z
 23a:	80 61       	ori	r24, 0x10	; 16
 23c:	80 83       	st	Z, r24
		LS_V_LOW;
 23e:	80 81       	ld	r24, Z
 240:	8f 7d       	andi	r24, 0xDF	; 223
 242:	80 83       	st	Z, r24
		LS_W_HIGH;
 244:	80 81       	ld	r24, Z
 246:	80 64       	ori	r24, 0x40	; 64
 248:	80 83       	st	Z, r24

		break;
 24a:	08 95       	ret

		case 6:
		//010
		HS_U_LOW;
 24c:	2c 98       	cbi	0x05, 4	; 5
		HS_V_HIGH;
 24e:	2d 9a       	sbi	0x05, 5	; 5
		//HS_W_LOW
		LS_U_HIGH;
 250:	e2 e0       	ldi	r30, 0x02	; 2
 252:	f1 e0       	ldi	r31, 0x01	; 1
 254:	80 81       	ld	r24, Z
 256:	80 61       	ori	r24, 0x10	; 16
 258:	80 83       	st	Z, r24
		LS_V_HIGH;
 25a:	80 81       	ld	r24, Z
 25c:	80 62       	ori	r24, 0x20	; 32
 25e:	80 83       	st	Z, r24
		LS_W_LOW;
 260:	80 81       	ld	r24, Z
 262:	8f 7b       	andi	r24, 0xBF	; 191
 264:	80 83       	st	Z, r24
 266:	08 95       	ret

00000268 <_ZL12uart_putcharcP6__file>:

static int uart_putchar(char c, FILE *stream);


static int uart_putchar(char c, FILE *stream)
{
 268:	cf 93       	push	r28
 26a:	c8 2f       	mov	r28, r24

	if (c == '\n')
 26c:	8a 30       	cpi	r24, 0x0A	; 10
 26e:	11 f4       	brne	.+4      	; 0x274 <_ZL12uart_putcharcP6__file+0xc>
	uart_putchar('\r', stream);
 270:	8d e0       	ldi	r24, 0x0D	; 13
 272:	fa df       	rcall	.-12     	; 0x268 <_ZL12uart_putcharcP6__file>
	while ( !( UCSR0A & (1<<UDRE0)) )
 274:	e0 ec       	ldi	r30, 0xC0	; 192
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	90 81       	ld	r25, Z
 27a:	95 ff       	sbrs	r25, 5
 27c:	fd cf       	rjmp	.-6      	; 0x278 <_ZL12uart_putcharcP6__file+0x10>
	;
	/* Put data into buffer, sends the data */
	UDR0 = c;
 27e:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	return 0;
}
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <main>:
uint8_t ADC_set_max=0;
uint16_t ADC_max=0;

int main(void)
{	
	uart_str = fdevopen(uart_putchar, NULL);
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	84 e3       	ldi	r24, 0x34	; 52
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	85 d0       	rcall	.+266    	; 0x39e <fdevopen>
 294:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <uart_str+0x1>
 298:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <uart_str>
	OCR1A=50;
 29c:	82 e3       	ldi	r24, 0x32	; 50
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 2a4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
//Counter top value. Freq = 16 MHz/prescaler/(OCR0A + 1)
	ADC_Init();
 2a8:	3d df       	rcall	.-390    	; 0x124 <_Z8ADC_Initv>
	USART_Init(MY_UBRR);
 2aa:	87 e6       	ldi	r24, 0x67	; 103
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	6c d0       	rcall	.+216    	; 0x388 <_Z10USART_Initj>
	//setup_timer3();
	setup_timer0();
 2b0:	5c d0       	rcall	.+184    	; 0x36a <_Z12setup_timer0v>
	//Enable_timer3_interrupt();
	Enable_timer0_compare_interrupt();
 2b2:	64 d0       	rcall	.+200    	; 0x37c <_Z31Enable_timer0_compare_interruptv>
	init_gpio();
 2b4:	43 df       	rcall	.-378    	; 0x13c <_Z9init_gpiov>
	//GTCCR = 0;//release all timers
	sei();
 2b6:	78 94       	sei
	sbi(ADCSRA,ADSC);
 2b8:	ea e7       	ldi	r30, 0x7A	; 122
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	80 64       	ori	r24, 0x40	; 64
 2c0:	80 83       	st	Z, r24
uint8_t reverse=0;
uint8_t com=0;
uint8_t ADC_set_max=0;
uint16_t ADC_max=0;

int main(void)
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <main+0x38>

000002c4 <__vector_17>:
}



ISR(TIMER1_COMPA_vect)
{
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	0b b6       	in	r0, 0x3b	; 59
 2d0:	0f 92       	push	r0
 2d2:	2f 93       	push	r18
 2d4:	3f 93       	push	r19
 2d6:	4f 93       	push	r20
 2d8:	5f 93       	push	r21
 2da:	6f 93       	push	r22
 2dc:	7f 93       	push	r23
 2de:	8f 93       	push	r24
 2e0:	9f 93       	push	r25
 2e2:	af 93       	push	r26
 2e4:	bf 93       	push	r27
 2e6:	ef 93       	push	r30
 2e8:	ff 93       	push	r31

	PWM_update(phase_state);
 2ea:	86 e0       	ldi	r24, 0x06	; 6
 2ec:	92 e0       	ldi	r25, 0x02	; 2
 2ee:	57 df       	rcall	.-338    	; 0x19e <_Z10PWM_updateRh>
	SWITCH_PHASE_STATE(phase_state);
 2f0:	86 e0       	ldi	r24, 0x06	; 6
 2f2:	92 e0       	ldi	r25, 0x02	; 2
 2f4:	32 df       	rcall	.-412    	; 0x15a <_Z18SWITCH_PHASE_STATERh>

}
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	bf 91       	pop	r27
 2fc:	af 91       	pop	r26
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	7f 91       	pop	r23
 304:	6f 91       	pop	r22
 306:	5f 91       	pop	r21
 308:	4f 91       	pop	r20
 30a:	3f 91       	pop	r19
 30c:	2f 91       	pop	r18
 30e:	0f 90       	pop	r0
 310:	0b be       	out	0x3b, r0	; 59
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <__vector_29>:


ISR(ADC_vect)//ADC interrupt routine
{
 31c:	1f 92       	push	r1
 31e:	0f 92       	push	r0
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	0f 92       	push	r0
 324:	11 24       	eor	r1, r1
 326:	0b b6       	in	r0, 0x3b	; 59
 328:	0f 92       	push	r0
 32a:	8f 93       	push	r24
 32c:	9f 93       	push	r25
 32e:	ef 93       	push	r30
 330:	ff 93       	push	r31
		ADC_value=ADC;
 332:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 336:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 33a:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__data_end+0x1>
 33e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		//print16(ADC_value);
		OCR1A=ADC_value;
 342:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 346:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
		sbi(ADCSRA,ADSC);
 34a:	ea e7       	ldi	r30, 0x7A	; 122
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	80 64       	ori	r24, 0x40	; 64
 352:	80 83       	st	Z, r24
}
 354:	ff 91       	pop	r31
 356:	ef 91       	pop	r30
 358:	9f 91       	pop	r25
 35a:	8f 91       	pop	r24
 35c:	0f 90       	pop	r0
 35e:	0b be       	out	0x3b, r0	; 59
 360:	0f 90       	pop	r0
 362:	0f be       	out	0x3f, r0	; 63
 364:	0f 90       	pop	r0
 366:	1f 90       	pop	r1
 368:	18 95       	reti

0000036a <_Z12setup_timer0v>:
{
	//64 pres, 250.000 hz 0.000004s
	
	//sbi (TCCR1B, CS10);
	//sbi (TCCR1B, CS11);
    sbi (TCCR1B, CS12);
 36a:	e1 e8       	ldi	r30, 0x81	; 129
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	84 60       	ori	r24, 0x04	; 4
 372:	80 83       	st	Z, r24
    sbi (TCCR1B, WGM12);//OCR4A compare interrupt
 374:	80 81       	ld	r24, Z
 376:	88 60       	ori	r24, 0x08	; 8
 378:	80 83       	st	Z, r24
 37a:	08 95       	ret

0000037c <_Z31Enable_timer0_compare_interruptv>:
}

void Enable_timer0_compare_interrupt()
{
	sbi (TIMSK1, OCIE1A);
 37c:	ef e6       	ldi	r30, 0x6F	; 111
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	82 60       	ori	r24, 0x02	; 2
 384:	80 83       	st	Z, r24
 386:	08 95       	ret

00000388 <_Z10USART_Initj>:
#include <avr/io.h>
#include <stdio.h>
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 388:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;
 38c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	UCSR0B = (1<<TXEN0);// | (1<<TXCIE0);
 390:	88 e0       	ldi	r24, 0x08	; 8
 392:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);//2 stop bit 8 bit
 396:	8e e0       	ldi	r24, 0x0E	; 14
 398:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 39c:	08 95       	ret

0000039e <fdevopen>:
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	00 97       	sbiw	r24, 0x00	; 0
 3a8:	31 f4       	brne	.+12     	; 0x3b6 <fdevopen+0x18>
 3aa:	61 15       	cp	r22, r1
 3ac:	71 05       	cpc	r23, r1
 3ae:	19 f4       	brne	.+6      	; 0x3b6 <fdevopen+0x18>
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	39 c0       	rjmp	.+114    	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
 3b6:	8b 01       	movw	r16, r22
 3b8:	ec 01       	movw	r28, r24
 3ba:	6e e0       	ldi	r22, 0x0E	; 14
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	37 d0       	rcall	.+110    	; 0x432 <calloc>
 3c4:	fc 01       	movw	r30, r24
 3c6:	89 2b       	or	r24, r25
 3c8:	99 f3       	breq	.-26     	; 0x3b0 <fdevopen+0x12>
 3ca:	80 e8       	ldi	r24, 0x80	; 128
 3cc:	83 83       	std	Z+3, r24	; 0x03
 3ce:	01 15       	cp	r16, r1
 3d0:	11 05       	cpc	r17, r1
 3d2:	71 f0       	breq	.+28     	; 0x3f0 <fdevopen+0x52>
 3d4:	13 87       	std	Z+11, r17	; 0x0b
 3d6:	02 87       	std	Z+10, r16	; 0x0a
 3d8:	81 e8       	ldi	r24, 0x81	; 129
 3da:	83 83       	std	Z+3, r24	; 0x03
 3dc:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__iob>
 3e0:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__iob+0x1>
 3e4:	89 2b       	or	r24, r25
 3e6:	21 f4       	brne	.+8      	; 0x3f0 <fdevopen+0x52>
 3e8:	f0 93 0d 02 	sts	0x020D, r31	; 0x80020d <__iob+0x1>
 3ec:	e0 93 0c 02 	sts	0x020C, r30	; 0x80020c <__iob>
 3f0:	20 97       	sbiw	r28, 0x00	; 0
 3f2:	c9 f0       	breq	.+50     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
 3f4:	d1 87       	std	Z+9, r29	; 0x09
 3f6:	c0 87       	std	Z+8, r28	; 0x08
 3f8:	83 81       	ldd	r24, Z+3	; 0x03
 3fa:	82 60       	ori	r24, 0x02	; 2
 3fc:	83 83       	std	Z+3, r24	; 0x03
 3fe:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <__iob+0x2>
 402:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <__iob+0x3>
 406:	89 2b       	or	r24, r25
 408:	71 f4       	brne	.+28     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
 40a:	f0 93 0f 02 	sts	0x020F, r31	; 0x80020f <__iob+0x3>
 40e:	e0 93 0e 02 	sts	0x020E, r30	; 0x80020e <__iob+0x2>
 412:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__iob+0x4>
 416:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__iob+0x5>
 41a:	89 2b       	or	r24, r25
 41c:	21 f4       	brne	.+8      	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
 41e:	f0 93 11 02 	sts	0x0211, r31	; 0x800211 <__iob+0x5>
 422:	e0 93 10 02 	sts	0x0210, r30	; 0x800210 <__iob+0x4>
 426:	cf 01       	movw	r24, r30
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	1f 91       	pop	r17
 42e:	0f 91       	pop	r16
 430:	08 95       	ret

00000432 <calloc>:
 432:	0f 93       	push	r16
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	86 9f       	mul	r24, r22
 43c:	80 01       	movw	r16, r0
 43e:	87 9f       	mul	r24, r23
 440:	10 0d       	add	r17, r0
 442:	96 9f       	mul	r25, r22
 444:	10 0d       	add	r17, r0
 446:	11 24       	eor	r1, r1
 448:	c8 01       	movw	r24, r16
 44a:	0d d0       	rcall	.+26     	; 0x466 <malloc>
 44c:	ec 01       	movw	r28, r24
 44e:	00 97       	sbiw	r24, 0x00	; 0
 450:	21 f0       	breq	.+8      	; 0x45a <calloc+0x28>
 452:	a8 01       	movw	r20, r16
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	33 d1       	rcall	.+614    	; 0x6c0 <memset>
 45a:	ce 01       	movw	r24, r28
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
 464:	08 95       	ret

00000466 <malloc>:
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	82 30       	cpi	r24, 0x02	; 2
 46c:	91 05       	cpc	r25, r1
 46e:	10 f4       	brcc	.+4      	; 0x474 <malloc+0xe>
 470:	82 e0       	ldi	r24, 0x02	; 2
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <__flp>
 478:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <__flp+0x1>
 47c:	20 e0       	ldi	r18, 0x00	; 0
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	c0 e0       	ldi	r28, 0x00	; 0
 482:	d0 e0       	ldi	r29, 0x00	; 0
 484:	30 97       	sbiw	r30, 0x00	; 0
 486:	11 f1       	breq	.+68     	; 0x4cc <malloc+0x66>
 488:	40 81       	ld	r20, Z
 48a:	51 81       	ldd	r21, Z+1	; 0x01
 48c:	48 17       	cp	r20, r24
 48e:	59 07       	cpc	r21, r25
 490:	c0 f0       	brcs	.+48     	; 0x4c2 <malloc+0x5c>
 492:	48 17       	cp	r20, r24
 494:	59 07       	cpc	r21, r25
 496:	61 f4       	brne	.+24     	; 0x4b0 <malloc+0x4a>
 498:	82 81       	ldd	r24, Z+2	; 0x02
 49a:	93 81       	ldd	r25, Z+3	; 0x03
 49c:	20 97       	sbiw	r28, 0x00	; 0
 49e:	19 f0       	breq	.+6      	; 0x4a6 <malloc+0x40>
 4a0:	9b 83       	std	Y+3, r25	; 0x03
 4a2:	8a 83       	std	Y+2, r24	; 0x02
 4a4:	2b c0       	rjmp	.+86     	; 0x4fc <malloc+0x96>
 4a6:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__flp+0x1>
 4aa:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__flp>
 4ae:	26 c0       	rjmp	.+76     	; 0x4fc <malloc+0x96>
 4b0:	21 15       	cp	r18, r1
 4b2:	31 05       	cpc	r19, r1
 4b4:	19 f0       	breq	.+6      	; 0x4bc <malloc+0x56>
 4b6:	42 17       	cp	r20, r18
 4b8:	53 07       	cpc	r21, r19
 4ba:	18 f4       	brcc	.+6      	; 0x4c2 <malloc+0x5c>
 4bc:	9a 01       	movw	r18, r20
 4be:	be 01       	movw	r22, r28
 4c0:	df 01       	movw	r26, r30
 4c2:	ef 01       	movw	r28, r30
 4c4:	02 80       	ldd	r0, Z+2	; 0x02
 4c6:	f3 81       	ldd	r31, Z+3	; 0x03
 4c8:	e0 2d       	mov	r30, r0
 4ca:	dc cf       	rjmp	.-72     	; 0x484 <malloc+0x1e>
 4cc:	21 15       	cp	r18, r1
 4ce:	31 05       	cpc	r19, r1
 4d0:	09 f1       	breq	.+66     	; 0x514 <malloc+0xae>
 4d2:	28 1b       	sub	r18, r24
 4d4:	39 0b       	sbc	r19, r25
 4d6:	24 30       	cpi	r18, 0x04	; 4
 4d8:	31 05       	cpc	r19, r1
 4da:	90 f4       	brcc	.+36     	; 0x500 <malloc+0x9a>
 4dc:	12 96       	adiw	r26, 0x02	; 2
 4de:	8d 91       	ld	r24, X+
 4e0:	9c 91       	ld	r25, X
 4e2:	13 97       	sbiw	r26, 0x03	; 3
 4e4:	61 15       	cp	r22, r1
 4e6:	71 05       	cpc	r23, r1
 4e8:	21 f0       	breq	.+8      	; 0x4f2 <malloc+0x8c>
 4ea:	fb 01       	movw	r30, r22
 4ec:	93 83       	std	Z+3, r25	; 0x03
 4ee:	82 83       	std	Z+2, r24	; 0x02
 4f0:	04 c0       	rjmp	.+8      	; 0x4fa <malloc+0x94>
 4f2:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__flp+0x1>
 4f6:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__flp>
 4fa:	fd 01       	movw	r30, r26
 4fc:	32 96       	adiw	r30, 0x02	; 2
 4fe:	44 c0       	rjmp	.+136    	; 0x588 <malloc+0x122>
 500:	fd 01       	movw	r30, r26
 502:	e2 0f       	add	r30, r18
 504:	f3 1f       	adc	r31, r19
 506:	81 93       	st	Z+, r24
 508:	91 93       	st	Z+, r25
 50a:	22 50       	subi	r18, 0x02	; 2
 50c:	31 09       	sbc	r19, r1
 50e:	2d 93       	st	X+, r18
 510:	3c 93       	st	X, r19
 512:	3a c0       	rjmp	.+116    	; 0x588 <malloc+0x122>
 514:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__brkval>
 518:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__brkval+0x1>
 51c:	23 2b       	or	r18, r19
 51e:	41 f4       	brne	.+16     	; 0x530 <malloc+0xca>
 520:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 524:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 528:	30 93 13 02 	sts	0x0213, r19	; 0x800213 <__brkval+0x1>
 52c:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <__brkval>
 530:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 534:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 538:	21 15       	cp	r18, r1
 53a:	31 05       	cpc	r19, r1
 53c:	41 f4       	brne	.+16     	; 0x54e <malloc+0xe8>
 53e:	2d b7       	in	r18, 0x3d	; 61
 540:	3e b7       	in	r19, 0x3e	; 62
 542:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 546:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 54a:	24 1b       	sub	r18, r20
 54c:	35 0b       	sbc	r19, r21
 54e:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <__brkval>
 552:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <__brkval+0x1>
 556:	e2 17       	cp	r30, r18
 558:	f3 07       	cpc	r31, r19
 55a:	a0 f4       	brcc	.+40     	; 0x584 <malloc+0x11e>
 55c:	2e 1b       	sub	r18, r30
 55e:	3f 0b       	sbc	r19, r31
 560:	28 17       	cp	r18, r24
 562:	39 07       	cpc	r19, r25
 564:	78 f0       	brcs	.+30     	; 0x584 <malloc+0x11e>
 566:	ac 01       	movw	r20, r24
 568:	4e 5f       	subi	r20, 0xFE	; 254
 56a:	5f 4f       	sbci	r21, 0xFF	; 255
 56c:	24 17       	cp	r18, r20
 56e:	35 07       	cpc	r19, r21
 570:	48 f0       	brcs	.+18     	; 0x584 <malloc+0x11e>
 572:	4e 0f       	add	r20, r30
 574:	5f 1f       	adc	r21, r31
 576:	50 93 13 02 	sts	0x0213, r21	; 0x800213 <__brkval+0x1>
 57a:	40 93 12 02 	sts	0x0212, r20	; 0x800212 <__brkval>
 57e:	81 93       	st	Z+, r24
 580:	91 93       	st	Z+, r25
 582:	02 c0       	rjmp	.+4      	; 0x588 <malloc+0x122>
 584:	e0 e0       	ldi	r30, 0x00	; 0
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	cf 01       	movw	r24, r30
 58a:	df 91       	pop	r29
 58c:	cf 91       	pop	r28
 58e:	08 95       	ret

00000590 <free>:
 590:	0f 93       	push	r16
 592:	1f 93       	push	r17
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	00 97       	sbiw	r24, 0x00	; 0
 59a:	09 f4       	brne	.+2      	; 0x59e <free+0xe>
 59c:	8c c0       	rjmp	.+280    	; 0x6b6 <free+0x126>
 59e:	fc 01       	movw	r30, r24
 5a0:	32 97       	sbiw	r30, 0x02	; 2
 5a2:	13 82       	std	Z+3, r1	; 0x03
 5a4:	12 82       	std	Z+2, r1	; 0x02
 5a6:	00 91 14 02 	lds	r16, 0x0214	; 0x800214 <__flp>
 5aa:	10 91 15 02 	lds	r17, 0x0215	; 0x800215 <__flp+0x1>
 5ae:	01 15       	cp	r16, r1
 5b0:	11 05       	cpc	r17, r1
 5b2:	81 f4       	brne	.+32     	; 0x5d4 <free+0x44>
 5b4:	20 81       	ld	r18, Z
 5b6:	31 81       	ldd	r19, Z+1	; 0x01
 5b8:	82 0f       	add	r24, r18
 5ba:	93 1f       	adc	r25, r19
 5bc:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__brkval>
 5c0:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__brkval+0x1>
 5c4:	28 17       	cp	r18, r24
 5c6:	39 07       	cpc	r19, r25
 5c8:	79 f5       	brne	.+94     	; 0x628 <free+0x98>
 5ca:	f0 93 13 02 	sts	0x0213, r31	; 0x800213 <__brkval+0x1>
 5ce:	e0 93 12 02 	sts	0x0212, r30	; 0x800212 <__brkval>
 5d2:	71 c0       	rjmp	.+226    	; 0x6b6 <free+0x126>
 5d4:	d8 01       	movw	r26, r16
 5d6:	40 e0       	ldi	r20, 0x00	; 0
 5d8:	50 e0       	ldi	r21, 0x00	; 0
 5da:	ae 17       	cp	r26, r30
 5dc:	bf 07       	cpc	r27, r31
 5de:	50 f4       	brcc	.+20     	; 0x5f4 <free+0x64>
 5e0:	12 96       	adiw	r26, 0x02	; 2
 5e2:	2d 91       	ld	r18, X+
 5e4:	3c 91       	ld	r19, X
 5e6:	13 97       	sbiw	r26, 0x03	; 3
 5e8:	ad 01       	movw	r20, r26
 5ea:	21 15       	cp	r18, r1
 5ec:	31 05       	cpc	r19, r1
 5ee:	09 f1       	breq	.+66     	; 0x632 <free+0xa2>
 5f0:	d9 01       	movw	r26, r18
 5f2:	f3 cf       	rjmp	.-26     	; 0x5da <free+0x4a>
 5f4:	9d 01       	movw	r18, r26
 5f6:	da 01       	movw	r26, r20
 5f8:	33 83       	std	Z+3, r19	; 0x03
 5fa:	22 83       	std	Z+2, r18	; 0x02
 5fc:	60 81       	ld	r22, Z
 5fe:	71 81       	ldd	r23, Z+1	; 0x01
 600:	86 0f       	add	r24, r22
 602:	97 1f       	adc	r25, r23
 604:	82 17       	cp	r24, r18
 606:	93 07       	cpc	r25, r19
 608:	69 f4       	brne	.+26     	; 0x624 <free+0x94>
 60a:	ec 01       	movw	r28, r24
 60c:	28 81       	ld	r18, Y
 60e:	39 81       	ldd	r19, Y+1	; 0x01
 610:	26 0f       	add	r18, r22
 612:	37 1f       	adc	r19, r23
 614:	2e 5f       	subi	r18, 0xFE	; 254
 616:	3f 4f       	sbci	r19, 0xFF	; 255
 618:	31 83       	std	Z+1, r19	; 0x01
 61a:	20 83       	st	Z, r18
 61c:	8a 81       	ldd	r24, Y+2	; 0x02
 61e:	9b 81       	ldd	r25, Y+3	; 0x03
 620:	93 83       	std	Z+3, r25	; 0x03
 622:	82 83       	std	Z+2, r24	; 0x02
 624:	45 2b       	or	r20, r21
 626:	29 f4       	brne	.+10     	; 0x632 <free+0xa2>
 628:	f0 93 15 02 	sts	0x0215, r31	; 0x800215 <__flp+0x1>
 62c:	e0 93 14 02 	sts	0x0214, r30	; 0x800214 <__flp>
 630:	42 c0       	rjmp	.+132    	; 0x6b6 <free+0x126>
 632:	13 96       	adiw	r26, 0x03	; 3
 634:	fc 93       	st	X, r31
 636:	ee 93       	st	-X, r30
 638:	12 97       	sbiw	r26, 0x02	; 2
 63a:	ed 01       	movw	r28, r26
 63c:	49 91       	ld	r20, Y+
 63e:	59 91       	ld	r21, Y+
 640:	9e 01       	movw	r18, r28
 642:	24 0f       	add	r18, r20
 644:	35 1f       	adc	r19, r21
 646:	e2 17       	cp	r30, r18
 648:	f3 07       	cpc	r31, r19
 64a:	71 f4       	brne	.+28     	; 0x668 <free+0xd8>
 64c:	80 81       	ld	r24, Z
 64e:	91 81       	ldd	r25, Z+1	; 0x01
 650:	84 0f       	add	r24, r20
 652:	95 1f       	adc	r25, r21
 654:	02 96       	adiw	r24, 0x02	; 2
 656:	11 96       	adiw	r26, 0x01	; 1
 658:	9c 93       	st	X, r25
 65a:	8e 93       	st	-X, r24
 65c:	82 81       	ldd	r24, Z+2	; 0x02
 65e:	93 81       	ldd	r25, Z+3	; 0x03
 660:	13 96       	adiw	r26, 0x03	; 3
 662:	9c 93       	st	X, r25
 664:	8e 93       	st	-X, r24
 666:	12 97       	sbiw	r26, 0x02	; 2
 668:	e0 e0       	ldi	r30, 0x00	; 0
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	d8 01       	movw	r26, r16
 66e:	12 96       	adiw	r26, 0x02	; 2
 670:	8d 91       	ld	r24, X+
 672:	9c 91       	ld	r25, X
 674:	13 97       	sbiw	r26, 0x03	; 3
 676:	00 97       	sbiw	r24, 0x00	; 0
 678:	19 f0       	breq	.+6      	; 0x680 <free+0xf0>
 67a:	f8 01       	movw	r30, r16
 67c:	8c 01       	movw	r16, r24
 67e:	f6 cf       	rjmp	.-20     	; 0x66c <free+0xdc>
 680:	8d 91       	ld	r24, X+
 682:	9c 91       	ld	r25, X
 684:	98 01       	movw	r18, r16
 686:	2e 5f       	subi	r18, 0xFE	; 254
 688:	3f 4f       	sbci	r19, 0xFF	; 255
 68a:	82 0f       	add	r24, r18
 68c:	93 1f       	adc	r25, r19
 68e:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__brkval>
 692:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__brkval+0x1>
 696:	28 17       	cp	r18, r24
 698:	39 07       	cpc	r19, r25
 69a:	69 f4       	brne	.+26     	; 0x6b6 <free+0x126>
 69c:	30 97       	sbiw	r30, 0x00	; 0
 69e:	29 f4       	brne	.+10     	; 0x6aa <free+0x11a>
 6a0:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <__flp+0x1>
 6a4:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__flp>
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <free+0x11e>
 6aa:	13 82       	std	Z+3, r1	; 0x03
 6ac:	12 82       	std	Z+2, r1	; 0x02
 6ae:	10 93 13 02 	sts	0x0213, r17	; 0x800213 <__brkval+0x1>
 6b2:	00 93 12 02 	sts	0x0212, r16	; 0x800212 <__brkval>
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	1f 91       	pop	r17
 6bc:	0f 91       	pop	r16
 6be:	08 95       	ret

000006c0 <memset>:
 6c0:	dc 01       	movw	r26, r24
 6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <memset+0x6>
 6c4:	6d 93       	st	X+, r22
 6c6:	41 50       	subi	r20, 0x01	; 1
 6c8:	50 40       	sbci	r21, 0x00	; 0
 6ca:	e0 f7       	brcc	.-8      	; 0x6c4 <memset+0x4>
 6cc:	08 95       	ret

000006ce <_exit>:
 6ce:	f8 94       	cli

000006d0 <__stop_program>:
 6d0:	ff cf       	rjmp	.-2      	; 0x6d0 <__stop_program>
