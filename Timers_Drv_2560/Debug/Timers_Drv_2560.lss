
Timers_Drv_2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000003d6  0000046a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800202  00800202  0000046c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000054f  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002c0  00000000  00000000  00000aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053a  00000000  00000000  00000dab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  000012e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000360  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000269  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00001a29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	ef c0       	rjmp	.+478    	; 0x254 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	69 c1       	rjmp	.+722    	; 0x360 <__vector_35>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 ed       	ldi	r30, 0xD6	; 214
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 30       	cpi	r26, 0x03	; 3
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	91 d0       	rcall	.+290    	; 0x242 <main>
 120:	58 c1       	rjmp	.+688    	; 0x3d2 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z8ADC_Initv>:
	
	//start the first conversion
	//enable the global interrupts
	
	//ADMUX  =(1<<ADLAR);//adlar is direction bit for ADCL , ADCH distribution 
	ADMUX |= (1<<REFS0);
 124:	ec e7       	ldi	r30, 0x7C	; 124
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
	//ADMUX |= (1<<MUX4);
	ADCSRA = (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);//control and status register
 12e:	8f ec       	ldi	r24, 0xCF	; 207
 130:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	//ADSC is ADC start register maybe after sei() ????
	ADCSRB = (1<<ADTS0) | (1<<ADTS1);//Timer/Counter0 Compare Match A
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xFE;
 13a:	8e ef       	ldi	r24, 0xFE	; 254
 13c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xFF;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
 146:	08 95       	ret

00000148 <_Z12setup_timer3v>:
#include <avr/interrupt.h>

void setup_timer3(void)
{
	//64 pres, 250.000 hz 0.000004s
	sbi (TCCR3B, CS30);
 148:	e1 e9       	ldi	r30, 0x91	; 145
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	80 83       	st	Z, r24
	sbi (TCCR3B, CS31);	
 152:	80 81       	ld	r24, Z
 154:	82 60       	ori	r24, 0x02	; 2
 156:	80 83       	st	Z, r24
	//sbi (TCCR3B, CS32);
	
	//sbi (TCCR3A, COM3A1);
	//sbi (TCCR3A, COM3B1);
	//sbi (TCCR3A, COM3C1);
	sbi (TCCR3A, WGM30);//8bit
 158:	e0 e9       	ldi	r30, 0x90	; 144
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	81 60       	ori	r24, 0x01	; 1
 160:	80 83       	st	Z, r24
 162:	08 95       	ret

00000164 <_Z23Enable_timer3_interruptv>:
	
}

void Enable_timer3_interrupt()
{
	sbi (TIMSK3, TOIE3);
 164:	e1 e7       	ldi	r30, 0x71	; 113
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	81 60       	ori	r24, 0x01	; 1
 16c:	80 83       	st	Z, r24
 16e:	08 95       	ret

00000170 <_Z9init_gpiov>:
	DDRD|=(1<<PD7);//enable 1 DIGITAL 7
	DDRB|=(1<<PB0);//enable 2 DIGITAL 8
	DDRD|=(1<<PD2);//enable 3 DIGITAL 2
	*/
	//DDRB|=(1<<PB5);//LED13
	sbi(DDRB,4);//digital 10
 170:	24 9a       	sbi	0x04, 4	; 4
	sbi(DDRB,5);//digital 11
 172:	25 9a       	sbi	0x04, 5	; 4
	sbi(DDRB,6);//digital 12
 174:	26 9a       	sbi	0x04, 6	; 4
	sbi(DDRH,4);//digital 7
 176:	e1 e0       	ldi	r30, 0x01	; 1
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	80 81       	ld	r24, Z
 17c:	80 61       	ori	r24, 0x10	; 16
 17e:	80 83       	st	Z, r24
	sbi(DDRH,5);//digital 8
 180:	80 81       	ld	r24, Z
 182:	80 62       	ori	r24, 0x20	; 32
 184:	80 83       	st	Z, r24
	sbi(DDRH,6);//digital 9
 186:	80 81       	ld	r24, Z
 188:	80 64       	ori	r24, 0x40	; 64
 18a:	80 83       	st	Z, r24
 18c:	08 95       	ret

0000018e <_Z7REVERSERhS_>:
}

void REVERSE(uint8_t &reverse,uint8_t &phase_state)
{
 18e:	fc 01       	movw	r30, r24
	if (reverse>127)
 190:	80 81       	ld	r24, Z
 192:	88 23       	and	r24, r24
 194:	5c f5       	brge	.+86     	; 0x1ec <_Z7REVERSERhS_+0x5e>
	{
		switch(phase_state)
 196:	db 01       	movw	r26, r22
 198:	8c 91       	ld	r24, X
 19a:	83 30       	cpi	r24, 0x03	; 3
 19c:	a1 f0       	breq	.+40     	; 0x1c6 <_Z7REVERSERhS_+0x38>
 19e:	28 f4       	brcc	.+10     	; 0x1aa <_Z7REVERSERhS_+0x1c>
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	49 f0       	breq	.+18     	; 0x1b6 <_Z7REVERSERhS_+0x28>
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	59 f0       	breq	.+22     	; 0x1be <_Z7REVERSERhS_+0x30>
 1a8:	1d c0       	rjmp	.+58     	; 0x1e4 <_Z7REVERSERhS_+0x56>
 1aa:	85 30       	cpi	r24, 0x05	; 5
 1ac:	a1 f0       	breq	.+40     	; 0x1d6 <_Z7REVERSERhS_+0x48>
 1ae:	78 f0       	brcs	.+30     	; 0x1ce <_Z7REVERSERhS_+0x40>
 1b0:	86 30       	cpi	r24, 0x06	; 6
 1b2:	a9 f0       	breq	.+42     	; 0x1de <_Z7REVERSERhS_+0x50>
 1b4:	17 c0       	rjmp	.+46     	; 0x1e4 <_Z7REVERSERhS_+0x56>
		{
			case 1:
			phase_state++;
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	db 01       	movw	r26, r22
 1ba:	8c 93       	st	X, r24
			break;
 1bc:	13 c0       	rjmp	.+38     	; 0x1e4 <_Z7REVERSERhS_+0x56>
			case 2:
			phase_state++;
 1be:	83 e0       	ldi	r24, 0x03	; 3
 1c0:	db 01       	movw	r26, r22
 1c2:	8c 93       	st	X, r24
			break;
 1c4:	0f c0       	rjmp	.+30     	; 0x1e4 <_Z7REVERSERhS_+0x56>
			case 3:
			phase_state++;
 1c6:	84 e0       	ldi	r24, 0x04	; 4
 1c8:	db 01       	movw	r26, r22
 1ca:	8c 93       	st	X, r24
			break;
 1cc:	0b c0       	rjmp	.+22     	; 0x1e4 <_Z7REVERSERhS_+0x56>
			case 4:
			phase_state++;
 1ce:	85 e0       	ldi	r24, 0x05	; 5
 1d0:	db 01       	movw	r26, r22
 1d2:	8c 93       	st	X, r24
			break;
 1d4:	07 c0       	rjmp	.+14     	; 0x1e4 <_Z7REVERSERhS_+0x56>
			case 5:
			phase_state++;
 1d6:	86 e0       	ldi	r24, 0x06	; 6
 1d8:	db 01       	movw	r26, r22
 1da:	8c 93       	st	X, r24
			break;
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <_Z7REVERSERhS_+0x56>
			case 6:
			phase_state=1;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	db 01       	movw	r26, r22
 1e2:	8c 93       	st	X, r24
			break;
		}
		reverse++;
 1e4:	80 81       	ld	r24, Z
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	80 83       	st	Z, r24
 1ea:	08 95       	ret
	}
	else
	{
		switch(phase_state)
 1ec:	db 01       	movw	r26, r22
 1ee:	8c 91       	ld	r24, X
 1f0:	83 30       	cpi	r24, 0x03	; 3
 1f2:	a1 f0       	breq	.+40     	; 0x21c <_Z7REVERSERhS_+0x8e>
 1f4:	28 f4       	brcc	.+10     	; 0x200 <_Z7REVERSERhS_+0x72>
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	49 f0       	breq	.+18     	; 0x20c <_Z7REVERSERhS_+0x7e>
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	59 f0       	breq	.+22     	; 0x214 <_Z7REVERSERhS_+0x86>
 1fe:	1d c0       	rjmp	.+58     	; 0x23a <_Z7REVERSERhS_+0xac>
 200:	85 30       	cpi	r24, 0x05	; 5
 202:	a1 f0       	breq	.+40     	; 0x22c <_Z7REVERSERhS_+0x9e>
 204:	78 f0       	brcs	.+30     	; 0x224 <_Z7REVERSERhS_+0x96>
 206:	86 30       	cpi	r24, 0x06	; 6
 208:	a9 f0       	breq	.+42     	; 0x234 <_Z7REVERSERhS_+0xa6>
 20a:	17 c0       	rjmp	.+46     	; 0x23a <_Z7REVERSERhS_+0xac>
		{
			case 1:
			phase_state=6;
 20c:	86 e0       	ldi	r24, 0x06	; 6
 20e:	db 01       	movw	r26, r22
 210:	8c 93       	st	X, r24
			break;
 212:	13 c0       	rjmp	.+38     	; 0x23a <_Z7REVERSERhS_+0xac>
			case 2:
			phase_state--;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	db 01       	movw	r26, r22
 218:	8c 93       	st	X, r24
			break;
 21a:	0f c0       	rjmp	.+30     	; 0x23a <_Z7REVERSERhS_+0xac>
			case 3:
			phase_state--;
 21c:	82 e0       	ldi	r24, 0x02	; 2
 21e:	db 01       	movw	r26, r22
 220:	8c 93       	st	X, r24
			break;
 222:	0b c0       	rjmp	.+22     	; 0x23a <_Z7REVERSERhS_+0xac>
			case 4:
			phase_state--;
 224:	83 e0       	ldi	r24, 0x03	; 3
 226:	db 01       	movw	r26, r22
 228:	8c 93       	st	X, r24
			break;
 22a:	07 c0       	rjmp	.+14     	; 0x23a <_Z7REVERSERhS_+0xac>
			case 5:
			phase_state--;
 22c:	84 e0       	ldi	r24, 0x04	; 4
 22e:	db 01       	movw	r26, r22
 230:	8c 93       	st	X, r24
			break;
 232:	03 c0       	rjmp	.+6      	; 0x23a <_Z7REVERSERhS_+0xac>
			case 6:
			phase_state--;
 234:	85 e0       	ldi	r24, 0x05	; 5
 236:	db 01       	movw	r26, r22
 238:	8c 93       	st	X, r24
			break;
		}
		reverse++;
 23a:	80 81       	ld	r24, Z
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	80 83       	st	Z, r24
 240:	08 95       	ret

00000242 <main>:
uint8_t reverse=0;
int main(void)
{	
	
	
	ADC_Init();
 242:	70 df       	rcall	.-288    	; 0x124 <_Z8ADC_Initv>
	USART_Init(MY_UBRR);
 244:	87 e6       	ldi	r24, 0x67	; 103
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	b9 d0       	rcall	.+370    	; 0x3bc <_Z10USART_Initj>
	setup_timer3();
 24a:	7e df       	rcall	.-260    	; 0x148 <_Z12setup_timer3v>
	Enable_timer3_interrupt();
 24c:	8b df       	rcall	.-234    	; 0x164 <_Z23Enable_timer3_interruptv>
	init_gpio();
 24e:	90 df       	rcall	.-224    	; 0x170 <_Z9init_gpiov>
	//GTCCR = 0;//release all timers
	sei();
 250:	78 94       	sei

uint8_t state_counter=0;

uint8_t phase_state=1;//global state 1,2,3,4,5,6
uint8_t reverse=0;
int main(void)
 252:	ff cf       	rjmp	.-2      	; 0x252 <main+0x10>

00000254 <__vector_29>:
	PWM_update(phase_state);
	REVERSE(reverse,phase_state);
}

ISR(ADC_vect)//ADC interrupt routine
{
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	0b b6       	in	r0, 0x3b	; 59
 260:	0f 92       	push	r0
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	ef 93       	push	r30
 268:	ff 93       	push	r31
		ADCSRA |= (1<<ADSC);//start ADC conversion 
 26a:	ea e7       	ldi	r30, 0x7A	; 122
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	80 64       	ori	r24, 0x40	; 64
 272:	80 83       	st	Z, r24
		UDR0=ADC;
 274:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 278:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 27c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		//_delay_ms(100);
}
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	9f 91       	pop	r25
 286:	8f 91       	pop	r24
 288:	0f 90       	pop	r0
 28a:	0b be       	out	0x3b, r0	; 59
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <_Z10PWM_updateRh>:

void PWM_update(uint8_t &phase_state)
{
		switch(phase_state)
 296:	fc 01       	movw	r30, r24
 298:	80 81       	ld	r24, Z
 29a:	83 30       	cpi	r24, 0x03	; 3
 29c:	49 f1       	breq	.+82     	; 0x2f0 <_Z10PWM_updateRh+0x5a>
 29e:	28 f4       	brcc	.+10     	; 0x2aa <_Z10PWM_updateRh+0x14>
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	51 f0       	breq	.+20     	; 0x2b8 <_Z10PWM_updateRh+0x22>
 2a4:	82 30       	cpi	r24, 0x02	; 2
 2a6:	b1 f0       	breq	.+44     	; 0x2d4 <_Z10PWM_updateRh+0x3e>
 2a8:	08 95       	ret
 2aa:	85 30       	cpi	r24, 0x05	; 5
 2ac:	e9 f1       	breq	.+122    	; 0x328 <_Z10PWM_updateRh+0x92>
 2ae:	70 f1       	brcs	.+92     	; 0x30c <_Z10PWM_updateRh+0x76>
 2b0:	86 30       	cpi	r24, 0x06	; 6
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <_Z10PWM_updateRh+0x20>
 2b4:	47 c0       	rjmp	.+142    	; 0x344 <_Z10PWM_updateRh+0xae>
 2b6:	08 95       	ret
		{
			case 1:
				//110
				//HS_U_LOW;
				HS_V_HIGH;
 2b8:	2d 9a       	sbi	0x05, 5	; 5
				HS_W_LOW;
 2ba:	2e 98       	cbi	0x05, 6	; 5
				
				LS_U_LOW;
 2bc:	e2 e0       	ldi	r30, 0x02	; 2
 2be:	f1 e0       	ldi	r31, 0x01	; 1
 2c0:	80 81       	ld	r24, Z
 2c2:	8f 7e       	andi	r24, 0xEF	; 239
 2c4:	80 83       	st	Z, r24
				LS_V_HIGH;
 2c6:	80 81       	ld	r24, Z
 2c8:	80 62       	ori	r24, 0x20	; 32
 2ca:	80 83       	st	Z, r24
				LS_W_HIGH;
 2cc:	80 81       	ld	r24, Z
 2ce:	80 64       	ori	r24, 0x40	; 64
 2d0:	80 83       	st	Z, r24

			break;
 2d2:	08 95       	ret

			case 2:
				//100
				HS_U_HIGH;
 2d4:	2c 9a       	sbi	0x05, 4	; 5
				//HS_V_LOW;
				HS_W_LOW;
 2d6:	2e 98       	cbi	0x05, 6	; 5
				LS_U_HIGH;
 2d8:	e2 e0       	ldi	r30, 0x02	; 2
 2da:	f1 e0       	ldi	r31, 0x01	; 1
 2dc:	80 81       	ld	r24, Z
 2de:	80 61       	ori	r24, 0x10	; 16
 2e0:	80 83       	st	Z, r24
				LS_V_LOW;
 2e2:	80 81       	ld	r24, Z
 2e4:	8f 7d       	andi	r24, 0xDF	; 223
 2e6:	80 83       	st	Z, r24
				LS_W_HIGH;
 2e8:	80 81       	ld	r24, Z
 2ea:	80 64       	ori	r24, 0x40	; 64
 2ec:	80 83       	st	Z, r24

			break;
 2ee:	08 95       	ret

			case 3:
				//101
				HS_U_HIGH;
 2f0:	2c 9a       	sbi	0x05, 4	; 5
				HS_V_LOW;
 2f2:	2d 98       	cbi	0x05, 5	; 5
				//HS_W_LOW;
				LS_U_HIGH;
 2f4:	e2 e0       	ldi	r30, 0x02	; 2
 2f6:	f1 e0       	ldi	r31, 0x01	; 1
 2f8:	80 81       	ld	r24, Z
 2fa:	80 61       	ori	r24, 0x10	; 16
 2fc:	80 83       	st	Z, r24
				LS_V_HIGH;
 2fe:	80 81       	ld	r24, Z
 300:	80 62       	ori	r24, 0x20	; 32
 302:	80 83       	st	Z, r24
				LS_W_LOW;
 304:	80 81       	ld	r24, Z
 306:	8f 7b       	andi	r24, 0xBF	; 191
 308:	80 83       	st	Z, r24

			break;
 30a:	08 95       	ret

			case 4:
				//001
				//HS_U_LOW;
				HS_V_LOW;
 30c:	2d 98       	cbi	0x05, 5	; 5
				HS_W_HIGH;
 30e:	2e 9a       	sbi	0x05, 6	; 5
				LS_U_LOW;
 310:	e2 e0       	ldi	r30, 0x02	; 2
 312:	f1 e0       	ldi	r31, 0x01	; 1
 314:	80 81       	ld	r24, Z
 316:	8f 7e       	andi	r24, 0xEF	; 239
 318:	80 83       	st	Z, r24
				LS_V_HIGH;
 31a:	80 81       	ld	r24, Z
 31c:	80 62       	ori	r24, 0x20	; 32
 31e:	80 83       	st	Z, r24
				LS_W_HIGH;
 320:	80 81       	ld	r24, Z
 322:	80 64       	ori	r24, 0x40	; 64
 324:	80 83       	st	Z, r24

			break;
 326:	08 95       	ret

			case 5:
				//011
				HS_U_LOW;
 328:	2c 98       	cbi	0x05, 4	; 5
				//HS_V_LOW;
				HS_W_HIGH;
 32a:	2e 9a       	sbi	0x05, 6	; 5
				LS_U_HIGH;
 32c:	e2 e0       	ldi	r30, 0x02	; 2
 32e:	f1 e0       	ldi	r31, 0x01	; 1
 330:	80 81       	ld	r24, Z
 332:	80 61       	ori	r24, 0x10	; 16
 334:	80 83       	st	Z, r24
				LS_V_LOW;
 336:	80 81       	ld	r24, Z
 338:	8f 7d       	andi	r24, 0xDF	; 223
 33a:	80 83       	st	Z, r24
				LS_W_HIGH;
 33c:	80 81       	ld	r24, Z
 33e:	80 64       	ori	r24, 0x40	; 64
 340:	80 83       	st	Z, r24

			break;
 342:	08 95       	ret

			case 6:
				//010
				HS_U_LOW;
 344:	2c 98       	cbi	0x05, 4	; 5
				HS_V_HIGH;
 346:	2d 9a       	sbi	0x05, 5	; 5
				//HS_W_LOW
				LS_U_HIGH;
 348:	e2 e0       	ldi	r30, 0x02	; 2
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	80 81       	ld	r24, Z
 34e:	80 61       	ori	r24, 0x10	; 16
 350:	80 83       	st	Z, r24
				LS_V_HIGH;
 352:	80 81       	ld	r24, Z
 354:	80 62       	ori	r24, 0x20	; 32
 356:	80 83       	st	Z, r24
				LS_W_LOW;
 358:	80 81       	ld	r24, Z
 35a:	8f 7b       	andi	r24, 0xBF	; 191
 35c:	80 83       	st	Z, r24
 35e:	08 95       	ret

00000360 <__vector_35>:
	
    }
}

ISR(TIMER3_OVF_vect)//Timer interrupt routine
{
 360:	1f 92       	push	r1
 362:	0f 92       	push	r0
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1
 36a:	0b b6       	in	r0, 0x3b	; 59
 36c:	0f 92       	push	r0
 36e:	2f 93       	push	r18
 370:	3f 93       	push	r19
 372:	4f 93       	push	r20
 374:	5f 93       	push	r21
 376:	6f 93       	push	r22
 378:	7f 93       	push	r23
 37a:	8f 93       	push	r24
 37c:	9f 93       	push	r25
 37e:	af 93       	push	r26
 380:	bf 93       	push	r27
 382:	ef 93       	push	r30
 384:	ff 93       	push	r31
	PWM_update(phase_state);
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	92 e0       	ldi	r25, 0x02	; 2
 38a:	85 df       	rcall	.-246    	; 0x296 <_Z10PWM_updateRh>
	REVERSE(reverse,phase_state);
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	72 e0       	ldi	r23, 0x02	; 2
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	92 e0       	ldi	r25, 0x02	; 2
 394:	fc de       	rcall	.-520    	; 0x18e <_Z7REVERSERhS_>
}
 396:	ff 91       	pop	r31
 398:	ef 91       	pop	r30
 39a:	bf 91       	pop	r27
 39c:	af 91       	pop	r26
 39e:	9f 91       	pop	r25
 3a0:	8f 91       	pop	r24
 3a2:	7f 91       	pop	r23
 3a4:	6f 91       	pop	r22
 3a6:	5f 91       	pop	r21
 3a8:	4f 91       	pop	r20
 3aa:	3f 91       	pop	r19
 3ac:	2f 91       	pop	r18
 3ae:	0f 90       	pop	r0
 3b0:	0b be       	out	0x3b, r0	; 59
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti

000003bc <_Z10USART_Initj>:
#include <avr/io.h>
#include <stdio.h>
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 3bc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;
 3c0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	UCSR0B = (1<<TXEN0);// | (1<<TXCIE0);
 3c4:	88 e0       	ldi	r24, 0x08	; 8
 3c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);//2 stop bit 8 bit
 3ca:	8e e0       	ldi	r24, 0x0E	; 14
 3cc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 3d0:	08 95       	ret

000003d2 <_exit>:
 3d2:	f8 94       	cli

000003d4 <__stop_program>:
 3d4:	ff cf       	rjmp	.-2      	; 0x3d4 <__stop_program>
