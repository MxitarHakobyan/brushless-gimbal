
Timers_Drv_2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  0000030c  00000380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000051e  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000234  00000000  00000000  000009ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000525  00000000  00000000  00000bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00001124  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000399  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ad  00000000  00000000  00001605  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000018b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	e1 c0       	rjmp	.+450    	; 0x26c <__vector_42>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e0       	ldi	r30, 0x0C	; 12
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 30       	cpi	r26, 0x02	; 2
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	98 d0       	rcall	.+304    	; 0x250 <main>
 120:	f3 c0       	rjmp	.+486    	; 0x308 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z9init_gpiov>:
			break;
			case 6:
			phase_state--;
			break;
		}
		reverse++;
 124:	24 9a       	sbi	0x04, 4	; 4
 126:	25 9a       	sbi	0x04, 5	; 4
 128:	26 9a       	sbi	0x04, 6	; 4
 12a:	e1 e0       	ldi	r30, 0x01	; 1
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	80 81       	ld	r24, Z
 130:	80 61       	ori	r24, 0x10	; 16
 132:	80 83       	st	Z, r24
 134:	80 81       	ld	r24, Z
 136:	80 62       	ori	r24, 0x20	; 32
 138:	80 83       	st	Z, r24
 13a:	80 81       	ld	r24, Z
 13c:	80 64       	ori	r24, 0x40	; 64
 13e:	80 83       	st	Z, r24
 140:	08 95       	ret

00000142 <_Z18SWITCH_PHASE_STATERh>:
	}
}

void SWITCH_PHASE_STATE(uint8_t &phase_state)
{
 142:	fc 01       	movw	r30, r24
	switch(phase_state)
 144:	90 81       	ld	r25, Z
 146:	93 30       	cpi	r25, 0x03	; 3
 148:	91 f0       	breq	.+36     	; 0x16e <_Z18SWITCH_PHASE_STATERh+0x2c>
 14a:	28 f4       	brcc	.+10     	; 0x156 <_Z18SWITCH_PHASE_STATERh+0x14>
 14c:	91 30       	cpi	r25, 0x01	; 1
 14e:	49 f0       	breq	.+18     	; 0x162 <_Z18SWITCH_PHASE_STATERh+0x20>
 150:	92 30       	cpi	r25, 0x02	; 2
 152:	51 f0       	breq	.+20     	; 0x168 <_Z18SWITCH_PHASE_STATERh+0x26>
 154:	08 95       	ret
 156:	95 30       	cpi	r25, 0x05	; 5
 158:	81 f0       	breq	.+32     	; 0x17a <_Z18SWITCH_PHASE_STATERh+0x38>
 15a:	60 f0       	brcs	.+24     	; 0x174 <_Z18SWITCH_PHASE_STATERh+0x32>
 15c:	96 30       	cpi	r25, 0x06	; 6
 15e:	81 f0       	breq	.+32     	; 0x180 <_Z18SWITCH_PHASE_STATERh+0x3e>
 160:	08 95       	ret
	{
		case 1:
		phase_state++;
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 83       	st	Z, r24
		break;
 166:	08 95       	ret
		case 2:
		phase_state++;
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	80 83       	st	Z, r24
		break;
 16c:	08 95       	ret
		case 3:
		phase_state++;
 16e:	84 e0       	ldi	r24, 0x04	; 4
 170:	80 83       	st	Z, r24
		break;
 172:	08 95       	ret
		case 4:
		phase_state++;
 174:	85 e0       	ldi	r24, 0x05	; 5
 176:	80 83       	st	Z, r24
		break;
 178:	08 95       	ret
		case 5:
		phase_state++;
 17a:	86 e0       	ldi	r24, 0x06	; 6
 17c:	80 83       	st	Z, r24
		break;
 17e:	08 95       	ret
		case 6:
		phase_state=1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 83       	st	Z, r24
 184:	08 95       	ret

00000186 <_Z10PWM_updateRh>:

}

void PWM_update(uint8_t &phase_state)
{
	switch(phase_state)
 186:	fc 01       	movw	r30, r24
 188:	80 81       	ld	r24, Z
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	49 f1       	breq	.+82     	; 0x1e0 <_Z10PWM_updateRh+0x5a>
 18e:	28 f4       	brcc	.+10     	; 0x19a <_Z10PWM_updateRh+0x14>
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	51 f0       	breq	.+20     	; 0x1a8 <_Z10PWM_updateRh+0x22>
 194:	82 30       	cpi	r24, 0x02	; 2
 196:	b1 f0       	breq	.+44     	; 0x1c4 <_Z10PWM_updateRh+0x3e>
 198:	08 95       	ret
 19a:	85 30       	cpi	r24, 0x05	; 5
 19c:	e9 f1       	breq	.+122    	; 0x218 <_Z10PWM_updateRh+0x92>
 19e:	70 f1       	brcs	.+92     	; 0x1fc <_Z10PWM_updateRh+0x76>
 1a0:	86 30       	cpi	r24, 0x06	; 6
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <_Z10PWM_updateRh+0x20>
 1a4:	47 c0       	rjmp	.+142    	; 0x234 <_Z10PWM_updateRh+0xae>
 1a6:	08 95       	ret
	{
		case 1:
		//110
		//HS_U_LOW;
		HS_V_HIGH;
 1a8:	2d 9a       	sbi	0x05, 5	; 5
		HS_W_LOW;
 1aa:	2e 98       	cbi	0x05, 6	; 5
		
		LS_U_LOW;
 1ac:	e2 e0       	ldi	r30, 0x02	; 2
 1ae:	f1 e0       	ldi	r31, 0x01	; 1
 1b0:	80 81       	ld	r24, Z
 1b2:	8f 7e       	andi	r24, 0xEF	; 239
 1b4:	80 83       	st	Z, r24
		LS_V_HIGH;
 1b6:	80 81       	ld	r24, Z
 1b8:	80 62       	ori	r24, 0x20	; 32
 1ba:	80 83       	st	Z, r24
		LS_W_HIGH;
 1bc:	80 81       	ld	r24, Z
 1be:	80 64       	ori	r24, 0x40	; 64
 1c0:	80 83       	st	Z, r24

		break;
 1c2:	08 95       	ret

		case 2:
		//100
		HS_U_HIGH;
 1c4:	2c 9a       	sbi	0x05, 4	; 5
		//HS_V_LOW;
		HS_W_LOW;
 1c6:	2e 98       	cbi	0x05, 6	; 5
		LS_U_HIGH;
 1c8:	e2 e0       	ldi	r30, 0x02	; 2
 1ca:	f1 e0       	ldi	r31, 0x01	; 1
 1cc:	80 81       	ld	r24, Z
 1ce:	80 61       	ori	r24, 0x10	; 16
 1d0:	80 83       	st	Z, r24
		LS_V_LOW;
 1d2:	80 81       	ld	r24, Z
 1d4:	8f 7d       	andi	r24, 0xDF	; 223
 1d6:	80 83       	st	Z, r24
		LS_W_HIGH;
 1d8:	80 81       	ld	r24, Z
 1da:	80 64       	ori	r24, 0x40	; 64
 1dc:	80 83       	st	Z, r24

		break;
 1de:	08 95       	ret

		case 3:
		//101
		HS_U_HIGH;
 1e0:	2c 9a       	sbi	0x05, 4	; 5
		HS_V_LOW;
 1e2:	2d 98       	cbi	0x05, 5	; 5
		//HS_W_LOW;
		LS_U_HIGH;
 1e4:	e2 e0       	ldi	r30, 0x02	; 2
 1e6:	f1 e0       	ldi	r31, 0x01	; 1
 1e8:	80 81       	ld	r24, Z
 1ea:	80 61       	ori	r24, 0x10	; 16
 1ec:	80 83       	st	Z, r24
		LS_V_HIGH;
 1ee:	80 81       	ld	r24, Z
 1f0:	80 62       	ori	r24, 0x20	; 32
 1f2:	80 83       	st	Z, r24
		LS_W_LOW;
 1f4:	80 81       	ld	r24, Z
 1f6:	8f 7b       	andi	r24, 0xBF	; 191
 1f8:	80 83       	st	Z, r24

		break;
 1fa:	08 95       	ret

		case 4:
		//001
		//HS_U_LOW;
		HS_V_LOW;
 1fc:	2d 98       	cbi	0x05, 5	; 5
		HS_W_HIGH;
 1fe:	2e 9a       	sbi	0x05, 6	; 5
		LS_U_LOW;
 200:	e2 e0       	ldi	r30, 0x02	; 2
 202:	f1 e0       	ldi	r31, 0x01	; 1
 204:	80 81       	ld	r24, Z
 206:	8f 7e       	andi	r24, 0xEF	; 239
 208:	80 83       	st	Z, r24
		LS_V_HIGH;
 20a:	80 81       	ld	r24, Z
 20c:	80 62       	ori	r24, 0x20	; 32
 20e:	80 83       	st	Z, r24
		LS_W_HIGH;
 210:	80 81       	ld	r24, Z
 212:	80 64       	ori	r24, 0x40	; 64
 214:	80 83       	st	Z, r24

		break;
 216:	08 95       	ret

		case 5:
		//011
		HS_U_LOW;
 218:	2c 98       	cbi	0x05, 4	; 5
		//HS_V_LOW;
		HS_W_HIGH;
 21a:	2e 9a       	sbi	0x05, 6	; 5
		LS_U_HIGH;
 21c:	e2 e0       	ldi	r30, 0x02	; 2
 21e:	f1 e0       	ldi	r31, 0x01	; 1
 220:	80 81       	ld	r24, Z
 222:	80 61       	ori	r24, 0x10	; 16
 224:	80 83       	st	Z, r24
		LS_V_LOW;
 226:	80 81       	ld	r24, Z
 228:	8f 7d       	andi	r24, 0xDF	; 223
 22a:	80 83       	st	Z, r24
		LS_W_HIGH;
 22c:	80 81       	ld	r24, Z
 22e:	80 64       	ori	r24, 0x40	; 64
 230:	80 83       	st	Z, r24

		break;
 232:	08 95       	ret

		case 6:
		//010
		HS_U_LOW;
 234:	2c 98       	cbi	0x05, 4	; 5
		HS_V_HIGH;
 236:	2d 9a       	sbi	0x05, 5	; 5
		//HS_W_LOW
		LS_U_HIGH;
 238:	e2 e0       	ldi	r30, 0x02	; 2
 23a:	f1 e0       	ldi	r31, 0x01	; 1
 23c:	80 81       	ld	r24, Z
 23e:	80 61       	ori	r24, 0x10	; 16
 240:	80 83       	st	Z, r24
		LS_V_HIGH;
 242:	80 81       	ld	r24, Z
 244:	80 62       	ori	r24, 0x20	; 32
 246:	80 83       	st	Z, r24
		LS_W_LOW;
 248:	80 81       	ld	r24, Z
 24a:	8f 7b       	andi	r24, 0xBF	; 191
 24c:	80 83       	st	Z, r24
 24e:	08 95       	ret

00000250 <main>:
uint8_t phase_state=1;//global state 1,2,3,4,5,6
uint8_t reverse=0;
int main(void)
{	
	
	OCR4B=0x255;//Counter top value. Freq = 8 MHz/prescaler/(OCR0A + 1)
 250:	85 e5       	ldi	r24, 0x55	; 85
 252:	92 e0       	ldi	r25, 0x02	; 2
 254:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
 258:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
	//ADC_Init();
	USART_Init(MY_UBRR);
 25c:	87 e6       	ldi	r24, 0x67	; 103
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	48 d0       	rcall	.+144    	; 0x2f2 <_Z10USART_Initj>
	//setup_timer3();
	setup_timer4();
 262:	33 d0       	rcall	.+102    	; 0x2ca <_Z12setup_timer4v>
	//Enable_timer3_interrupt();
	Enable_timer4_compare_interrupt();
 264:	40 d0       	rcall	.+128    	; 0x2e6 <_Z31Enable_timer4_compare_interruptv>
	init_gpio();
 266:	5e df       	rcall	.-324    	; 0x124 <_Z9init_gpiov>
	//GTCCR = 0;//release all timers
	sei();
 268:	78 94       	sei

uint8_t state_counter=0;

uint8_t phase_state=1;//global state 1,2,3,4,5,6
uint8_t reverse=0;
int main(void)
 26a:	ff cf       	rjmp	.-2      	; 0x26a <main+0x1a>

0000026c <__vector_42>:
//	//SWITCH_PHASE_STATE(phase_state);
//	//UDR0=0x15;
//}

ISR(TIMER4_COMPA_vect)
{
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	0b b6       	in	r0, 0x3b	; 59
 278:	0f 92       	push	r0
 27a:	2f 93       	push	r18
 27c:	3f 93       	push	r19
 27e:	4f 93       	push	r20
 280:	5f 93       	push	r21
 282:	6f 93       	push	r22
 284:	7f 93       	push	r23
 286:	8f 93       	push	r24
 288:	9f 93       	push	r25
 28a:	af 93       	push	r26
 28c:	bf 93       	push	r27
 28e:	ef 93       	push	r30
 290:	ff 93       	push	r31
	PWM_update(phase_state);
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	92 e0       	ldi	r25, 0x02	; 2
 296:	77 df       	rcall	.-274    	; 0x186 <_Z10PWM_updateRh>
	SWITCH_PHASE_STATE(phase_state);
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	92 e0       	ldi	r25, 0x02	; 2
 29c:	52 df       	rcall	.-348    	; 0x142 <_Z18SWITCH_PHASE_STATERh>
	UDR0=0x15;
 29e:	85 e1       	ldi	r24, 0x15	; 21
 2a0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
}
 2a4:	ff 91       	pop	r31
 2a6:	ef 91       	pop	r30
 2a8:	bf 91       	pop	r27
 2aa:	af 91       	pop	r26
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	7f 91       	pop	r23
 2b2:	6f 91       	pop	r22
 2b4:	5f 91       	pop	r21
 2b6:	4f 91       	pop	r20
 2b8:	3f 91       	pop	r19
 2ba:	2f 91       	pop	r18
 2bc:	0f 90       	pop	r0
 2be:	0b be       	out	0x3b, r0	; 59
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <_Z12setup_timer4v>:
}

void setup_timer4(void)
{
	//64 pres, 250.000 hz 0.000004s
	sbi (TCCR4B, CS40);
 2ca:	e1 ea       	ldi	r30, 0xA1	; 161
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	81 60       	ori	r24, 0x01	; 1
 2d2:	80 83       	st	Z, r24
	sbi (TCCR4B, CS41);
 2d4:	80 81       	ld	r24, Z
 2d6:	82 60       	ori	r24, 0x02	; 2
 2d8:	80 83       	st	Z, r24
	sbi (TCCR4A, WGM42);//OCR4A compare interrupt
 2da:	e0 ea       	ldi	r30, 0xA0	; 160
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	88 60       	ori	r24, 0x08	; 8
 2e2:	80 83       	st	Z, r24
 2e4:	08 95       	ret

000002e6 <_Z31Enable_timer4_compare_interruptv>:
}

void Enable_timer4_compare_interrupt()
{
	sbi (TIMSK4, OCIE4A);
 2e6:	e2 e7       	ldi	r30, 0x72	; 114
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	82 60       	ori	r24, 0x02	; 2
 2ee:	80 83       	st	Z, r24
 2f0:	08 95       	ret

000002f2 <_Z10USART_Initj>:
#include <avr/io.h>
#include <stdio.h>
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 2f2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;
 2f6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	UCSR0B = (1<<TXEN0);// | (1<<TXCIE0);
 2fa:	88 e0       	ldi	r24, 0x08	; 8
 2fc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);//2 stop bit 8 bit
 300:	8e e0       	ldi	r24, 0x0E	; 14
 302:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 306:	08 95       	ret

00000308 <_exit>:
 308:	f8 94       	cli

0000030a <__stop_program>:
 30a:	ff cf       	rjmp	.-2      	; 0x30a <__stop_program>
