
Timers_Drv_2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  0000042a  000004be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800202  00800202  000004c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001217  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e25  00000000  00000000  00001847  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e1  00000000  00000000  0000266c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00002d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a1  00000000  00000000  00002f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003fe  00000000  00000000  00003701  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003aff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	28 c1       	rjmp	.+592    	; 0x296 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	58 c1       	rjmp	.+688    	; 0x326 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3a c1       	rjmp	.+628    	; 0x302 <__vector_35>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e2       	ldi	r30, 0x2A	; 42
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 30       	cpi	r26, 0x06	; 6
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	aa d0       	rcall	.+340    	; 0x274 <main>
 120:	82 c1       	rjmp	.+772    	; 0x426 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z8ADC_Initv>:
	
	//start the first conversion
	//enable the global interrupts
	
	//ADMUX  =(1<<ADLAR);//adlar is direction bit for ADCL , ADCH distribution 
	ADMUX |= (1<<REFS0);
 124:	ec e7       	ldi	r30, 0x7C	; 124
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
	//ADMUX |= (1<<MUX4);
	ADCSRA = (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);//control and status register
 12e:	8f ec       	ldi	r24, 0xCF	; 207
 130:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	//ADSC is ADC start register maybe after sei() ????
	ADCSRB = (1<<ADTS0) | (1<<ADTS1);//Timer/Counter0 Compare Match A
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xFE;
 13a:	8e ef       	ldi	r24, 0xFE	; 254
 13c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xFF;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
 146:	08 95       	ret

00000148 <_Z9init_gpiov>:
			break;
			case 6:
			phase_state--;
			break;
		}
		reverse++;
 148:	24 9a       	sbi	0x04, 4	; 4
 14a:	25 9a       	sbi	0x04, 5	; 4
 14c:	26 9a       	sbi	0x04, 6	; 4
 14e:	e1 e0       	ldi	r30, 0x01	; 1
 150:	f1 e0       	ldi	r31, 0x01	; 1
 152:	80 81       	ld	r24, Z
 154:	80 61       	ori	r24, 0x10	; 16
 156:	80 83       	st	Z, r24
 158:	80 81       	ld	r24, Z
 15a:	80 62       	ori	r24, 0x20	; 32
 15c:	80 83       	st	Z, r24
 15e:	80 81       	ld	r24, Z
 160:	80 64       	ori	r24, 0x40	; 64
 162:	80 83       	st	Z, r24
 164:	08 95       	ret

00000166 <_Z18SWITCH_PHASE_STATERh>:
	}
}

void SWITCH_PHASE_STATE(uint8_t &phase_state)
{
 166:	fc 01       	movw	r30, r24
	switch(phase_state)
 168:	90 81       	ld	r25, Z
 16a:	93 30       	cpi	r25, 0x03	; 3
 16c:	91 f0       	breq	.+36     	; 0x192 <_Z18SWITCH_PHASE_STATERh+0x2c>
 16e:	28 f4       	brcc	.+10     	; 0x17a <_Z18SWITCH_PHASE_STATERh+0x14>
 170:	91 30       	cpi	r25, 0x01	; 1
 172:	49 f0       	breq	.+18     	; 0x186 <_Z18SWITCH_PHASE_STATERh+0x20>
 174:	92 30       	cpi	r25, 0x02	; 2
 176:	51 f0       	breq	.+20     	; 0x18c <_Z18SWITCH_PHASE_STATERh+0x26>
 178:	08 95       	ret
 17a:	95 30       	cpi	r25, 0x05	; 5
 17c:	81 f0       	breq	.+32     	; 0x19e <_Z18SWITCH_PHASE_STATERh+0x38>
 17e:	60 f0       	brcs	.+24     	; 0x198 <_Z18SWITCH_PHASE_STATERh+0x32>
 180:	96 30       	cpi	r25, 0x06	; 6
 182:	81 f0       	breq	.+32     	; 0x1a4 <_Z18SWITCH_PHASE_STATERh+0x3e>
 184:	08 95       	ret
	{
		case 1:
		phase_state++;
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	80 83       	st	Z, r24
		break;
 18a:	08 95       	ret
		case 2:
		phase_state++;
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	80 83       	st	Z, r24
		break;
 190:	08 95       	ret
		case 3:
		phase_state++;
 192:	84 e0       	ldi	r24, 0x04	; 4
 194:	80 83       	st	Z, r24
		break;
 196:	08 95       	ret
		case 4:
		phase_state++;
 198:	85 e0       	ldi	r24, 0x05	; 5
 19a:	80 83       	st	Z, r24
		break;
 19c:	08 95       	ret
		case 5:
		phase_state++;
 19e:	86 e0       	ldi	r24, 0x06	; 6
 1a0:	80 83       	st	Z, r24
		break;
 1a2:	08 95       	ret
		case 6:
		phase_state=1;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	80 83       	st	Z, r24
 1a8:	08 95       	ret

000001aa <_Z10PWM_updateRh>:

}

void PWM_update(uint8_t &phase_state)
{
	switch(phase_state)
 1aa:	fc 01       	movw	r30, r24
 1ac:	80 81       	ld	r24, Z
 1ae:	83 30       	cpi	r24, 0x03	; 3
 1b0:	49 f1       	breq	.+82     	; 0x204 <_Z10PWM_updateRh+0x5a>
 1b2:	28 f4       	brcc	.+10     	; 0x1be <_Z10PWM_updateRh+0x14>
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	51 f0       	breq	.+20     	; 0x1cc <_Z10PWM_updateRh+0x22>
 1b8:	82 30       	cpi	r24, 0x02	; 2
 1ba:	b1 f0       	breq	.+44     	; 0x1e8 <_Z10PWM_updateRh+0x3e>
 1bc:	08 95       	ret
 1be:	85 30       	cpi	r24, 0x05	; 5
 1c0:	e9 f1       	breq	.+122    	; 0x23c <_Z10PWM_updateRh+0x92>
 1c2:	70 f1       	brcs	.+92     	; 0x220 <_Z10PWM_updateRh+0x76>
 1c4:	86 30       	cpi	r24, 0x06	; 6
 1c6:	09 f4       	brne	.+2      	; 0x1ca <_Z10PWM_updateRh+0x20>
 1c8:	47 c0       	rjmp	.+142    	; 0x258 <_Z10PWM_updateRh+0xae>
 1ca:	08 95       	ret
	{
		case 1:
		//110
		//HS_U_LOW;
		HS_V_HIGH;
 1cc:	2d 9a       	sbi	0x05, 5	; 5
		HS_W_LOW;
 1ce:	2e 98       	cbi	0x05, 6	; 5
		
		LS_U_LOW;
 1d0:	e2 e0       	ldi	r30, 0x02	; 2
 1d2:	f1 e0       	ldi	r31, 0x01	; 1
 1d4:	80 81       	ld	r24, Z
 1d6:	8f 7e       	andi	r24, 0xEF	; 239
 1d8:	80 83       	st	Z, r24
		LS_V_HIGH;
 1da:	80 81       	ld	r24, Z
 1dc:	80 62       	ori	r24, 0x20	; 32
 1de:	80 83       	st	Z, r24
		LS_W_HIGH;
 1e0:	80 81       	ld	r24, Z
 1e2:	80 64       	ori	r24, 0x40	; 64
 1e4:	80 83       	st	Z, r24

		break;
 1e6:	08 95       	ret

		case 2:
		//100
		HS_U_HIGH;
 1e8:	2c 9a       	sbi	0x05, 4	; 5
		//HS_V_LOW;
		HS_W_LOW;
 1ea:	2e 98       	cbi	0x05, 6	; 5
		LS_U_HIGH;
 1ec:	e2 e0       	ldi	r30, 0x02	; 2
 1ee:	f1 e0       	ldi	r31, 0x01	; 1
 1f0:	80 81       	ld	r24, Z
 1f2:	80 61       	ori	r24, 0x10	; 16
 1f4:	80 83       	st	Z, r24
		LS_V_LOW;
 1f6:	80 81       	ld	r24, Z
 1f8:	8f 7d       	andi	r24, 0xDF	; 223
 1fa:	80 83       	st	Z, r24
		LS_W_HIGH;
 1fc:	80 81       	ld	r24, Z
 1fe:	80 64       	ori	r24, 0x40	; 64
 200:	80 83       	st	Z, r24

		break;
 202:	08 95       	ret

		case 3:
		//101
		HS_U_HIGH;
 204:	2c 9a       	sbi	0x05, 4	; 5
		HS_V_LOW;
 206:	2d 98       	cbi	0x05, 5	; 5
		//HS_W_LOW;
		LS_U_HIGH;
 208:	e2 e0       	ldi	r30, 0x02	; 2
 20a:	f1 e0       	ldi	r31, 0x01	; 1
 20c:	80 81       	ld	r24, Z
 20e:	80 61       	ori	r24, 0x10	; 16
 210:	80 83       	st	Z, r24
		LS_V_HIGH;
 212:	80 81       	ld	r24, Z
 214:	80 62       	ori	r24, 0x20	; 32
 216:	80 83       	st	Z, r24
		LS_W_LOW;
 218:	80 81       	ld	r24, Z
 21a:	8f 7b       	andi	r24, 0xBF	; 191
 21c:	80 83       	st	Z, r24

		break;
 21e:	08 95       	ret

		case 4:
		//001
		//HS_U_LOW;
		HS_V_LOW;
 220:	2d 98       	cbi	0x05, 5	; 5
		HS_W_HIGH;
 222:	2e 9a       	sbi	0x05, 6	; 5
		LS_U_LOW;
 224:	e2 e0       	ldi	r30, 0x02	; 2
 226:	f1 e0       	ldi	r31, 0x01	; 1
 228:	80 81       	ld	r24, Z
 22a:	8f 7e       	andi	r24, 0xEF	; 239
 22c:	80 83       	st	Z, r24
		LS_V_HIGH;
 22e:	80 81       	ld	r24, Z
 230:	80 62       	ori	r24, 0x20	; 32
 232:	80 83       	st	Z, r24
		LS_W_HIGH;
 234:	80 81       	ld	r24, Z
 236:	80 64       	ori	r24, 0x40	; 64
 238:	80 83       	st	Z, r24

		break;
 23a:	08 95       	ret

		case 5:
		//011
		HS_U_LOW;
 23c:	2c 98       	cbi	0x05, 4	; 5
		//HS_V_LOW;
		HS_W_HIGH;
 23e:	2e 9a       	sbi	0x05, 6	; 5
		LS_U_HIGH;
 240:	e2 e0       	ldi	r30, 0x02	; 2
 242:	f1 e0       	ldi	r31, 0x01	; 1
 244:	80 81       	ld	r24, Z
 246:	80 61       	ori	r24, 0x10	; 16
 248:	80 83       	st	Z, r24
		LS_V_LOW;
 24a:	80 81       	ld	r24, Z
 24c:	8f 7d       	andi	r24, 0xDF	; 223
 24e:	80 83       	st	Z, r24
		LS_W_HIGH;
 250:	80 81       	ld	r24, Z
 252:	80 64       	ori	r24, 0x40	; 64
 254:	80 83       	st	Z, r24

		break;
 256:	08 95       	ret

		case 6:
		//010
		HS_U_LOW;
 258:	2c 98       	cbi	0x05, 4	; 5
		HS_V_HIGH;
 25a:	2d 9a       	sbi	0x05, 5	; 5
		//HS_W_LOW
		LS_U_HIGH;
 25c:	e2 e0       	ldi	r30, 0x02	; 2
 25e:	f1 e0       	ldi	r31, 0x01	; 1
 260:	80 81       	ld	r24, Z
 262:	80 61       	ori	r24, 0x10	; 16
 264:	80 83       	st	Z, r24
		LS_V_HIGH;
 266:	80 81       	ld	r24, Z
 268:	80 62       	ori	r24, 0x20	; 32
 26a:	80 83       	st	Z, r24
		LS_W_LOW;
 26c:	80 81       	ld	r24, Z
 26e:	8f 7b       	andi	r24, 0xBF	; 191
 270:	80 83       	st	Z, r24
 272:	08 95       	ret

00000274 <main>:
uint8_t ADC_set_max=0;
uint8_t ADC_max=0;
int main(void)
{	
	
	OCR1A=400;
 274:	80 e9       	ldi	r24, 0x90	; 144
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 27c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
//Counter top value. Freq = 16 MHz/prescaler/(OCR0A + 1)
	ADC_Init();
	USART_Init(MY_UBRR);
	setup_timer3();
 280:	51 df       	rcall	.-350    	; 0x124 <_Z8ADC_Initv>
 282:	87 e6       	ldi	r24, 0x67	; 103
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	c4 d0       	rcall	.+392    	; 0x410 <_Z10USART_Initj>
 288:	9d d0       	rcall	.+314    	; 0x3c4 <_Z12setup_timer3v>
 28a:	b0 d0       	rcall	.+352    	; 0x3ec <_Z12setup_timer0v>
 28c:	a9 d0       	rcall	.+338    	; 0x3e0 <_Z23Enable_timer3_interruptv>
 28e:	ba d0       	rcall	.+372    	; 0x404 <_Z31Enable_timer0_compare_interruptv>
 290:	5b df       	rcall	.-330    	; 0x148 <_Z9init_gpiov>
 292:	78 94       	sei
 294:	ff cf       	rjmp	.-2      	; 0x294 <main+0x20>

00000296 <__vector_17>:
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	0b b6       	in	r0, 0x3b	; 59
 2a2:	0f 92       	push	r0
 2a4:	2f 93       	push	r18
 2a6:	3f 93       	push	r19
 2a8:	4f 93       	push	r20
 2aa:	5f 93       	push	r21
 2ac:	6f 93       	push	r22
 2ae:	7f 93       	push	r23
 2b0:	8f 93       	push	r24
 2b2:	9f 93       	push	r25
 2b4:	af 93       	push	r26
 2b6:	bf 93       	push	r27
 2b8:	ef 93       	push	r30
 2ba:	ff 93       	push	r31
 2bc:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <com>
 2c0:	82 30       	cpi	r24, 0x02	; 2
 2c2:	20 f4       	brcc	.+8      	; 0x2cc <__vector_17+0x36>
 2c4:	8f 5f       	subi	r24, 0xFF	; 255
 2c6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <com>
 2ca:	08 c0       	rjmp	.+16     	; 0x2dc <__vector_17+0x46>
 2cc:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <com>
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	92 e0       	ldi	r25, 0x02	; 2
 2d4:	6a df       	rcall	.-300    	; 0x1aa <_Z10PWM_updateRh>
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	92 e0       	ldi	r25, 0x02	; 2
 2da:	45 df       	rcall	.-374    	; 0x166 <_Z18SWITCH_PHASE_STATERh>
 2dc:	ff 91       	pop	r31
 2de:	ef 91       	pop	r30
 2e0:	bf 91       	pop	r27
 2e2:	af 91       	pop	r26
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	7f 91       	pop	r23
 2ea:	6f 91       	pop	r22
 2ec:	5f 91       	pop	r21
 2ee:	4f 91       	pop	r20
 2f0:	3f 91       	pop	r19
 2f2:	2f 91       	pop	r18
 2f4:	0f 90       	pop	r0
 2f6:	0b be       	out	0x3b, r0	; 59
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <__vector_35>:
 302:	1f 92       	push	r1
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	0f 92       	push	r0
 30a:	11 24       	eor	r1, r1
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <_Z7MAX_ADCRhS_>:
 316:	fc 01       	movw	r30, r24
 318:	80 81       	ld	r24, Z
 31a:	fb 01       	movw	r30, r22
 31c:	90 81       	ld	r25, Z
 31e:	98 17       	cp	r25, r24
 320:	08 f4       	brcc	.+2      	; 0x324 <_Z7MAX_ADCRhS_+0xe>
 322:	80 83       	st	Z, r24
 324:	08 95       	ret

00000326 <__vector_29>:
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	0f 92       	push	r0
 32e:	11 24       	eor	r1, r1
 330:	0b b6       	in	r0, 0x3b	; 59
 332:	0f 92       	push	r0
 334:	2f 93       	push	r18
 336:	3f 93       	push	r19
 338:	4f 93       	push	r20
 33a:	5f 93       	push	r21
 33c:	6f 93       	push	r22
 33e:	7f 93       	push	r23
 340:	8f 93       	push	r24
 342:	9f 93       	push	r25
 344:	af 93       	push	r26
 346:	bf 93       	push	r27
 348:	ef 93       	push	r30
 34a:	ff 93       	push	r31
 34c:	ea e7       	ldi	r30, 0x7A	; 122
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	80 64       	ori	r24, 0x40	; 64
 354:	80 83       	st	Z, r24
 356:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 35a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 35e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <ADC_value>
 362:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ADC_set_max>
 366:	8a 30       	cpi	r24, 0x0A	; 10
 368:	48 f4       	brcc	.+18     	; 0x37c <__vector_29+0x56>
 36a:	8f 5f       	subi	r24, 0xFF	; 255
 36c:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <ADC_set_max>
 370:	62 e0       	ldi	r22, 0x02	; 2
 372:	72 e0       	ldi	r23, 0x02	; 2
 374:	85 e0       	ldi	r24, 0x05	; 5
 376:	92 e0       	ldi	r25, 0x02	; 2
 378:	ce df       	rcall	.-100    	; 0x316 <_Z7MAX_ADCRhS_>
 37a:	11 c0       	rjmp	.+34     	; 0x39e <__vector_29+0x78>
 37c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 386:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 38a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 38e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 392:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <ADC_value>
 396:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
 39a:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <ADC_set_max>
 39e:	ff 91       	pop	r31
 3a0:	ef 91       	pop	r30
 3a2:	bf 91       	pop	r27
 3a4:	af 91       	pop	r26
 3a6:	9f 91       	pop	r25
 3a8:	8f 91       	pop	r24
 3aa:	7f 91       	pop	r23
 3ac:	6f 91       	pop	r22
 3ae:	5f 91       	pop	r21
 3b0:	4f 91       	pop	r20
 3b2:	3f 91       	pop	r19
 3b4:	2f 91       	pop	r18
 3b6:	0f 90       	pop	r0
 3b8:	0b be       	out	0x3b, r0	; 59
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <_Z12setup_timer3v>:


void setup_timer3(void)
{
	//64 pres, 250.000 hz 0.000004s
	sbi (TCCR3B, CS30);
 3c4:	e1 e9       	ldi	r30, 0x91	; 145
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	81 60       	ori	r24, 0x01	; 1
 3cc:	80 83       	st	Z, r24
	sbi (TCCR3B, CS31);
 3ce:	80 81       	ld	r24, Z
 3d0:	82 60       	ori	r24, 0x02	; 2
 3d2:	80 83       	st	Z, r24
	//sbi (TCCR3B, CS32);
	sbi (TCCR3A, WGM30);//8bit
 3d4:	e0 e9       	ldi	r30, 0x90	; 144
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	81 60       	ori	r24, 0x01	; 1
 3dc:	80 83       	st	Z, r24
 3de:	08 95       	ret

000003e0 <_Z23Enable_timer3_interruptv>:
}

void Enable_timer3_interrupt()
{
	sbi (TIMSK3, TOIE3);
 3e0:	e1 e7       	ldi	r30, 0x71	; 113
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	81 60       	ori	r24, 0x01	; 1
 3e8:	80 83       	st	Z, r24
 3ea:	08 95       	ret

000003ec <_Z12setup_timer0v>:

void setup_timer0(void)
{
	//64 pres, 250.000 hz 0.000004s
	
	sbi (TCCR1B, CS10);
 3ec:	e1 e8       	ldi	r30, 0x81	; 129
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	81 60       	ori	r24, 0x01	; 1
 3f4:	80 83       	st	Z, r24
	sbi (TCCR1B, CS11);
 3f6:	80 81       	ld	r24, Z
 3f8:	82 60       	ori	r24, 0x02	; 2
 3fa:	80 83       	st	Z, r24
	sbi (TCCR1B, WGM12);//OCR4A compare interrupt
 3fc:	80 81       	ld	r24, Z
 3fe:	88 60       	ori	r24, 0x08	; 8
 400:	80 83       	st	Z, r24
 402:	08 95       	ret

00000404 <_Z31Enable_timer0_compare_interruptv>:
}

void Enable_timer0_compare_interrupt()
{
	sbi (TIMSK1, OCIE1A);
 404:	ef e6       	ldi	r30, 0x6F	; 111
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	82 60       	ori	r24, 0x02	; 2
 40c:	80 83       	st	Z, r24
 40e:	08 95       	ret

00000410 <_Z10USART_Initj>:
#include <avr/io.h>
#include <stdio.h>
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 410:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;
 414:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	UCSR0B = (1<<TXEN0);// | (1<<TXCIE0);
 418:	88 e0       	ldi	r24, 0x08	; 8
 41a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);//2 stop bit 8 bit
 41e:	8e e0       	ldi	r24, 0x0E	; 14
 420:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 424:	08 95       	ret

00000426 <_exit>:
 426:	f8 94       	cli

00000428 <__stop_program>:
 428:	ff cf       	rjmp	.-2      	; 0x428 <__stop_program>
