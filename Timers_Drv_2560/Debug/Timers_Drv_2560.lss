
Timers_Drv_2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  0000043c  000004b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000606  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000033b  00000000  00000000  00000be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000561  00000000  00000000  00000f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  00001480  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039f  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003cd  00000000  00000000  000019d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001da0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	aa c0       	rjmp	.+340    	; 0x1c2 <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	70 c1       	rjmp	.+736    	; 0x36e <__vector_35>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e3       	ldi	r30, 0x3C	; 60
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 30       	cpi	r26, 0x02	; 2
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	36 d0       	rcall	.+108    	; 0x18c <main>
 120:	8b c1       	rjmp	.+790    	; 0x438 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z8ADC_Initv>:
	
	//start the first conversion
	//enable the global interrupts
	
	//ADMUX  =(1<<ADLAR);//adlar is direction bit for ADCL , ADCH distribution 
	ADMUX |= (1<<REFS0);
 124:	ec e7       	ldi	r30, 0x7C	; 124
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);//control and status register
 12e:	8f ec       	ldi	r24, 0xCF	; 207
 130:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	//ADSC is ADC start register maybe after sei() ????
	ADCSRB = 0;
 134:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xFE;
 138:	8e ef       	ldi	r24, 0xFE	; 254
 13a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xFF;
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
 144:	08 95       	ret

00000146 <_Z12setup_timer3v>:
#include <avr/interrupt.h>

void setup_timer3(void)
{
	//64 pres, 250.000 hz 0.000004s
	sbi (TCCR3B, CS30);
 146:	e1 e9       	ldi	r30, 0x91	; 145
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	80 83       	st	Z, r24
	sbi (TCCR3B, CS31);	
 150:	80 81       	ld	r24, Z
 152:	82 60       	ori	r24, 0x02	; 2
 154:	80 83       	st	Z, r24
	//sbi (TCCR3B, CS32);
	
	//sbi (TCCR3A, COM3A1);
	//sbi (TCCR3A, COM3B1);
	//sbi (TCCR3A, COM3C1);
	sbi (TCCR3A, WGM30);//8bit
 156:	e0 e9       	ldi	r30, 0x90	; 144
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	80 83       	st	Z, r24
 160:	08 95       	ret

00000162 <_Z9init_gpiov>:
	DDRD|=(1<<PD7);//enable 1 DIGITAL 7
	DDRB|=(1<<PB0);//enable 2 DIGITAL 8
	DDRD|=(1<<PD2);//enable 3 DIGITAL 2
	*/
	//DDRB|=(1<<PB5);//LED13
	sbi(DDRB,4);//digital 10
 162:	24 9a       	sbi	0x04, 4	; 4
	sbi(DDRB,5);//digital 11
 164:	25 9a       	sbi	0x04, 5	; 4
	sbi(DDRB,6);//digital 12
 166:	26 9a       	sbi	0x04, 6	; 4
	sbi(DDRH,4);//digital 7
 168:	e1 e0       	ldi	r30, 0x01	; 1
 16a:	f1 e0       	ldi	r31, 0x01	; 1
 16c:	80 81       	ld	r24, Z
 16e:	80 61       	ori	r24, 0x10	; 16
 170:	80 83       	st	Z, r24
	sbi(DDRH,5);//digital 8
 172:	80 81       	ld	r24, Z
 174:	80 62       	ori	r24, 0x20	; 32
 176:	80 83       	st	Z, r24
	sbi(DDRH,6);//digital 9
 178:	80 81       	ld	r24, Z
 17a:	80 64       	ori	r24, 0x40	; 64
 17c:	80 83       	st	Z, r24
 17e:	08 95       	ret

00000180 <_Z23Enable_timer3_interruptv>:
}


void Enable_timer3_interrupt()
{
	sbi (TIMSK3, TOIE3);
 180:	e1 e7       	ldi	r30, 0x71	; 113
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	81 60       	ori	r24, 0x01	; 1
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <main>:

uint8_t state_counter=0;
uint8_t phase_state=1;//global state 1,2,3,4,5,6
int main(void)
{	
	ADC_Init();
 18c:	cb df       	rcall	.-106    	; 0x124 <_Z8ADC_Initv>
	USART_Init(MY_UBRR);
 18e:	87 e6       	ldi	r24, 0x67	; 103
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	14 d1       	rcall	.+552    	; 0x3bc <_Z10USART_Initj>
	Enable_timer3_interrupt();
 194:	f5 df       	rcall	.-22     	; 0x180 <_Z23Enable_timer3_interruptv>
	init_gpio();
 196:	e5 df       	rcall	.-54     	; 0x162 <_Z9init_gpiov>
	OCR3A=127;
 198:	8f e7       	ldi	r24, 0x7F	; 127
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 1a0:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
	OCR3B=127;
 1a4:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
 1a8:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
	OCR3C=127;   
 1ac:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
 1b0:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
	//GTCCR = 0;//release all timers
	//TCNT1=0;
	setup_timer3();
 1b4:	c8 df       	rcall	.-112    	; 0x146 <_Z12setup_timer3v>
	DDRB|=(1<<7);
 1b6:	27 9a       	sbi	0x04, 7	; 4
	DDRG|=(1<<5);
 1b8:	9d 9a       	sbi	0x13, 5	; 19
	UDR0=0;
 1ba:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	sei();
 1be:	78 94       	sei
uint8_t lowByte=0;
uint16_t value=0;

uint8_t state_counter=0;
uint8_t phase_state=1;//global state 1,2,3,4,5,6
int main(void)
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <main+0x34>

000001c2 <__vector_27>:
//	//itoa (ADCH, &c,10);
//	//UDR0=c;
//}

ISR (USART0_TX_vect)//USART interrupt routine
{
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	0b b6       	in	r0, 0x3b	; 59
 1ce:	0f 92       	push	r0
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	4f 93       	push	r20
 1de:	5f 93       	push	r21
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	1f 92       	push	r1
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
	char p;
	for(int i=0x41;i<0x46;i++)
 1fa:	01 e4       	ldi	r16, 0x41	; 65
 1fc:	10 e0       	ldi	r17, 0x00	; 0
	{
		itoa(i, &p, 10);
		UDR0=p;
 1fe:	0f 2e       	mov	r0, r31
 200:	f6 ec       	ldi	r31, 0xC6	; 198
 202:	ef 2e       	mov	r14, r31
 204:	f1 2c       	mov	r15, r1
 206:	f0 2d       	mov	r31, r0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 208:	4a e0       	ldi	r20, 0x0A	; 10
 20a:	be 01       	movw	r22, r28
 20c:	6f 5f       	subi	r22, 0xFF	; 255
 20e:	7f 4f       	sbci	r23, 0xFF	; 255
 210:	c8 01       	movw	r24, r16
 212:	df d0       	rcall	.+446    	; 0x3d2 <__itoa_ncheck>
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	f7 01       	movw	r30, r14
 218:	80 83       	st	Z, r24
//}

ISR (USART0_TX_vect)//USART interrupt routine
{
	char p;
	for(int i=0x41;i<0x46;i++)
 21a:	0f 5f       	subi	r16, 0xFF	; 255
 21c:	1f 4f       	sbci	r17, 0xFF	; 255
 21e:	06 34       	cpi	r16, 0x46	; 70
 220:	11 05       	cpc	r17, r1
 222:	91 f7       	brne	.-28     	; 0x208 <__vector_27+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 224:	ff ef       	ldi	r31, 0xFF	; 255
 226:	23 ed       	ldi	r18, 0xD3	; 211
 228:	80 e3       	ldi	r24, 0x30	; 48
 22a:	f1 50       	subi	r31, 0x01	; 1
 22c:	20 40       	sbci	r18, 0x00	; 0
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <__vector_27+0x68>
 232:	00 c0       	rjmp	.+0      	; 0x234 <__vector_27+0x72>
 234:	00 00       	nop
		UDR0=p;
		} 
		_delay_ms(1000);
	
	
}
 236:	0f 90       	pop	r0
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	bf 91       	pop	r27
 242:	af 91       	pop	r26
 244:	9f 91       	pop	r25
 246:	8f 91       	pop	r24
 248:	7f 91       	pop	r23
 24a:	6f 91       	pop	r22
 24c:	5f 91       	pop	r21
 24e:	4f 91       	pop	r20
 250:	3f 91       	pop	r19
 252:	2f 91       	pop	r18
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	ff 90       	pop	r15
 25a:	ef 90       	pop	r14
 25c:	0f 90       	pop	r0
 25e:	0b be       	out	0x3b, r0	; 59
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <_Z10PWM_updatev>:
	//PWM6->HS_W=5	pin OC0B
	
	//if(++state_counter>5)
	//{
	//	state_counter=0;
		switch(phase_state)
 26a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 26e:	83 30       	cpi	r24, 0x03	; 3
 270:	a1 f1       	breq	.+104    	; 0x2da <_Z10PWM_updatev+0x70>
 272:	28 f4       	brcc	.+10     	; 0x27e <_Z10PWM_updatev+0x14>
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	59 f0       	breq	.+22     	; 0x28e <_Z10PWM_updatev+0x24>
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	e1 f0       	breq	.+56     	; 0x2b4 <_Z10PWM_updatev+0x4a>
 27c:	08 95       	ret
 27e:	85 30       	cpi	r24, 0x05	; 5
 280:	09 f4       	brne	.+2      	; 0x284 <_Z10PWM_updatev+0x1a>
 282:	51 c0       	rjmp	.+162    	; 0x326 <_Z10PWM_updatev+0xbc>
 284:	e8 f1       	brcs	.+122    	; 0x300 <_Z10PWM_updatev+0x96>
 286:	86 30       	cpi	r24, 0x06	; 6
 288:	09 f4       	brne	.+2      	; 0x28c <_Z10PWM_updatev+0x22>
 28a:	60 c0       	rjmp	.+192    	; 0x34c <_Z10PWM_updatev+0xe2>
 28c:	08 95       	ret
		{
			case 1:
				//110
				//HS_U_LOW;
				HS_V_HIGH;
 28e:	2d 9a       	sbi	0x05, 5	; 5
				HS_W_LOW;
 290:	2e 98       	cbi	0x05, 6	; 5
				
				LS_U_LOW;
 292:	e2 e0       	ldi	r30, 0x02	; 2
 294:	f1 e0       	ldi	r31, 0x01	; 1
 296:	80 81       	ld	r24, Z
 298:	8f 7e       	andi	r24, 0xEF	; 239
 29a:	80 83       	st	Z, r24
				LS_V_HIGH;
 29c:	80 81       	ld	r24, Z
 29e:	80 62       	ori	r24, 0x20	; 32
 2a0:	80 83       	st	Z, r24
				LS_W_HIGH;
 2a2:	80 81       	ld	r24, Z
 2a4:	80 64       	ori	r24, 0x40	; 64
 2a6:	80 83       	st	Z, r24
				//currentStepA++;
				//currentStepB++;
				//currentStepC++;
				phase_state++;
 2a8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 2ac:	8f 5f       	subi	r24, 0xFF	; 255
 2ae:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			break;
 2b2:	08 95       	ret

			case 2:
				//100
				//HS_U=sin_Drv[currentStepA];
				HS_U_HIGH;
 2b4:	2c 9a       	sbi	0x05, 4	; 5
				//HS_V_LOW;
				HS_W_LOW;
 2b6:	2e 98       	cbi	0x05, 6	; 5
				LS_U_HIGH;
 2b8:	e2 e0       	ldi	r30, 0x02	; 2
 2ba:	f1 e0       	ldi	r31, 0x01	; 1
 2bc:	80 81       	ld	r24, Z
 2be:	80 61       	ori	r24, 0x10	; 16
 2c0:	80 83       	st	Z, r24
				LS_V_LOW;
 2c2:	80 81       	ld	r24, Z
 2c4:	8f 7d       	andi	r24, 0xDF	; 223
 2c6:	80 83       	st	Z, r24
				LS_W_HIGH;
 2c8:	80 81       	ld	r24, Z
 2ca:	80 64       	ori	r24, 0x40	; 64
 2cc:	80 83       	st	Z, r24
				phase_state++;
 2ce:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 2d2:	8f 5f       	subi	r24, 0xFF	; 255
 2d4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
				//currentStepA++;
				//currentStepB++;
				//currentStepC++;
			break;
 2d8:	08 95       	ret

			case 3:
				//101
				//HS_U=sin_Drv[currentStepA];
				HS_U_HIGH;
 2da:	2c 9a       	sbi	0x05, 4	; 5
				HS_V_LOW;
 2dc:	2d 98       	cbi	0x05, 5	; 5
				//HS_W_LOW;
				LS_U_HIGH;
 2de:	e2 e0       	ldi	r30, 0x02	; 2
 2e0:	f1 e0       	ldi	r31, 0x01	; 1
 2e2:	80 81       	ld	r24, Z
 2e4:	80 61       	ori	r24, 0x10	; 16
 2e6:	80 83       	st	Z, r24
				LS_V_HIGH;
 2e8:	80 81       	ld	r24, Z
 2ea:	80 62       	ori	r24, 0x20	; 32
 2ec:	80 83       	st	Z, r24
				LS_W_LOW;
 2ee:	80 81       	ld	r24, Z
 2f0:	8f 7b       	andi	r24, 0xBF	; 191
 2f2:	80 83       	st	Z, r24
				//currentStepA++;
				//currentStepB++;
				//currentStepC++;
				phase_state++;
 2f4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 2f8:	8f 5f       	subi	r24, 0xFF	; 255
 2fa:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			break;
 2fe:	08 95       	ret

			case 4:
				//001
				//HS_U_LOW;
				HS_V_LOW;
 300:	2d 98       	cbi	0x05, 5	; 5
				HS_W_HIGH;
 302:	2e 9a       	sbi	0x05, 6	; 5
				LS_U_LOW;
 304:	e2 e0       	ldi	r30, 0x02	; 2
 306:	f1 e0       	ldi	r31, 0x01	; 1
 308:	80 81       	ld	r24, Z
 30a:	8f 7e       	andi	r24, 0xEF	; 239
 30c:	80 83       	st	Z, r24
				LS_V_HIGH;
 30e:	80 81       	ld	r24, Z
 310:	80 62       	ori	r24, 0x20	; 32
 312:	80 83       	st	Z, r24
				LS_W_HIGH;
 314:	80 81       	ld	r24, Z
 316:	80 64       	ori	r24, 0x40	; 64
 318:	80 83       	st	Z, r24
				phase_state++;
 31a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 31e:	8f 5f       	subi	r24, 0xFF	; 255
 320:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
				//currentStepA++;
				//currentStepB++;
				//currentStepC++;
			break;
 324:	08 95       	ret

			case 5:
				//011
				HS_U_LOW;
 326:	2c 98       	cbi	0x05, 4	; 5
				//HS_V_LOW;
				HS_W_HIGH;
 328:	2e 9a       	sbi	0x05, 6	; 5
				LS_U_HIGH;
 32a:	e2 e0       	ldi	r30, 0x02	; 2
 32c:	f1 e0       	ldi	r31, 0x01	; 1
 32e:	80 81       	ld	r24, Z
 330:	80 61       	ori	r24, 0x10	; 16
 332:	80 83       	st	Z, r24
				LS_V_LOW;
 334:	80 81       	ld	r24, Z
 336:	8f 7d       	andi	r24, 0xDF	; 223
 338:	80 83       	st	Z, r24
				LS_W_HIGH;
 33a:	80 81       	ld	r24, Z
 33c:	80 64       	ori	r24, 0x40	; 64
 33e:	80 83       	st	Z, r24
				//currentStepA++;
				//currentStepB++;
				//currentStepC++;
				phase_state++;
 340:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 344:	8f 5f       	subi	r24, 0xFF	; 255
 346:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			break;
 34a:	08 95       	ret

			case 6:
				//010
				HS_U_LOW;
 34c:	2c 98       	cbi	0x05, 4	; 5
				HS_V_HIGH;
 34e:	2d 9a       	sbi	0x05, 5	; 5
				//HS_W_LOW
				LS_U_HIGH;
 350:	e2 e0       	ldi	r30, 0x02	; 2
 352:	f1 e0       	ldi	r31, 0x01	; 1
 354:	80 81       	ld	r24, Z
 356:	80 61       	ori	r24, 0x10	; 16
 358:	80 83       	st	Z, r24
				LS_V_HIGH;
 35a:	80 81       	ld	r24, Z
 35c:	80 62       	ori	r24, 0x20	; 32
 35e:	80 83       	st	Z, r24
				LS_W_LOW;
 360:	80 81       	ld	r24, Z
 362:	8f 7b       	andi	r24, 0xBF	; 191
 364:	80 83       	st	Z, r24
				phase_state=1;
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 36c:	08 95       	ret

0000036e <__vector_35>:
		
    }
}

ISR(TIMER3_OVF_vect)//Timer interrupt routine
{
 36e:	1f 92       	push	r1
 370:	0f 92       	push	r0
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	0f 92       	push	r0
 376:	11 24       	eor	r1, r1
 378:	0b b6       	in	r0, 0x3b	; 59
 37a:	0f 92       	push	r0
 37c:	2f 93       	push	r18
 37e:	3f 93       	push	r19
 380:	4f 93       	push	r20
 382:	5f 93       	push	r21
 384:	6f 93       	push	r22
 386:	7f 93       	push	r23
 388:	8f 93       	push	r24
 38a:	9f 93       	push	r25
 38c:	af 93       	push	r26
 38e:	bf 93       	push	r27
 390:	ef 93       	push	r30
 392:	ff 93       	push	r31
	PWM_update();
 394:	6a df       	rcall	.-300    	; 0x26a <_Z10PWM_updatev>
}
 396:	ff 91       	pop	r31
 398:	ef 91       	pop	r30
 39a:	bf 91       	pop	r27
 39c:	af 91       	pop	r26
 39e:	9f 91       	pop	r25
 3a0:	8f 91       	pop	r24
 3a2:	7f 91       	pop	r23
 3a4:	6f 91       	pop	r22
 3a6:	5f 91       	pop	r21
 3a8:	4f 91       	pop	r20
 3aa:	3f 91       	pop	r19
 3ac:	2f 91       	pop	r18
 3ae:	0f 90       	pop	r0
 3b0:	0b be       	out	0x3b, r0	; 59
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti

000003bc <_Z10USART_Initj>:
#include "USART.h"
#include <avr/io.h>
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 3bc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;
 3c0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	UCSR0B = (1<<TXEN0) | (1<<TXCIE0);
 3c4:	88 e4       	ldi	r24, 0x48	; 72
 3c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);//2 stop bit 8 bit
 3ca:	8e e0       	ldi	r24, 0x0E	; 14
 3cc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 3d0:	08 95       	ret

000003d2 <__itoa_ncheck>:
 3d2:	bb 27       	eor	r27, r27
 3d4:	4a 30       	cpi	r20, 0x0A	; 10
 3d6:	31 f4       	brne	.+12     	; 0x3e4 <__itoa_ncheck+0x12>
 3d8:	99 23       	and	r25, r25
 3da:	22 f4       	brpl	.+8      	; 0x3e4 <__itoa_ncheck+0x12>
 3dc:	bd e2       	ldi	r27, 0x2D	; 45
 3de:	90 95       	com	r25
 3e0:	81 95       	neg	r24
 3e2:	9f 4f       	sbci	r25, 0xFF	; 255
 3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <__utoa_common>

000003e6 <__utoa_ncheck>:
 3e6:	bb 27       	eor	r27, r27

000003e8 <__utoa_common>:
 3e8:	fb 01       	movw	r30, r22
 3ea:	55 27       	eor	r21, r21
 3ec:	aa 27       	eor	r26, r26
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	aa 1f       	adc	r26, r26
 3f4:	a4 17       	cp	r26, r20
 3f6:	10 f0       	brcs	.+4      	; 0x3fc <__utoa_common+0x14>
 3f8:	a4 1b       	sub	r26, r20
 3fa:	83 95       	inc	r24
 3fc:	50 51       	subi	r21, 0x10	; 16
 3fe:	b9 f7       	brne	.-18     	; 0x3ee <__utoa_common+0x6>
 400:	a0 5d       	subi	r26, 0xD0	; 208
 402:	aa 33       	cpi	r26, 0x3A	; 58
 404:	08 f0       	brcs	.+2      	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
 406:	a9 5d       	subi	r26, 0xD9	; 217
 408:	a1 93       	st	Z+, r26
 40a:	00 97       	sbiw	r24, 0x00	; 0
 40c:	79 f7       	brne	.-34     	; 0x3ec <__utoa_common+0x4>
 40e:	b1 11       	cpse	r27, r1
 410:	b1 93       	st	Z+, r27
 412:	11 92       	st	Z+, r1
 414:	cb 01       	movw	r24, r22
 416:	00 c0       	rjmp	.+0      	; 0x418 <strrev>

00000418 <strrev>:
 418:	dc 01       	movw	r26, r24
 41a:	fc 01       	movw	r30, r24
 41c:	67 2f       	mov	r22, r23
 41e:	71 91       	ld	r23, Z+
 420:	77 23       	and	r23, r23
 422:	e1 f7       	brne	.-8      	; 0x41c <strrev+0x4>
 424:	32 97       	sbiw	r30, 0x02	; 2
 426:	04 c0       	rjmp	.+8      	; 0x430 <strrev+0x18>
 428:	7c 91       	ld	r23, X
 42a:	6d 93       	st	X+, r22
 42c:	70 83       	st	Z, r23
 42e:	62 91       	ld	r22, -Z
 430:	ae 17       	cp	r26, r30
 432:	bf 07       	cpc	r27, r31
 434:	c8 f3       	brcs	.-14     	; 0x428 <strrev+0x10>
 436:	08 95       	ret

00000438 <_exit>:
 438:	f8 94       	cli

0000043a <__stop_program>:
 43a:	ff cf       	rjmp	.-2      	; 0x43a <__stop_program>
