
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  000005d2  00000666  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080020c  0080020c  00000672  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000672  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a2  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e03  00000000  00000000  000017e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000445  00000000  00000000  000025e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00002a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000658  00000000  00000000  00002b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001fd  00000000  00000000  00003170  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000336d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	84 c0       	rjmp	.+264    	; 0x146 <__vector_15>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ed       	ldi	r30, 0xD2	; 210
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 32       	cpi	r26, 0x20	; 32
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	78 d0       	rcall	.+240    	; 0x210 <main>
 120:	56 c2       	rjmp	.+1196   	; 0x5ce <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <uart_putchar>:
	itoa(*value, c, 10);
	printf(c);
	//printf("\n");
}
static int uart_putchar(char c, FILE *stream)
{
 124:	cf 93       	push	r28
 126:	c8 2f       	mov	r28, r24

	if (c == '\n')
 128:	8a 30       	cpi	r24, 0x0A	; 10
 12a:	11 f4       	brne	.+4      	; 0x130 <uart_putchar+0xc>
	uart_putchar('\r', stream);
 12c:	8d e0       	ldi	r24, 0x0D	; 13
 12e:	fa df       	rcall	.-12     	; 0x124 <uart_putchar>
	while ( !( UCSR0A & (1<<UDRE0)) )
 130:	e0 ec       	ldi	r30, 0xC0	; 192
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	85 ff       	sbrs	r24, 5
 138:	fd cf       	rjmp	.-6      	; 0x134 <uart_putchar+0x10>
	;
	/* Put data into buffer, sends the data */
	UDR0 = c;
 13a:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	return 0;
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <__vector_15>:
		};
	
    }
}
ISR(TIMER2_OVF_vect)//10 microsecconed timer interrupt
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	af 93       	push	r26
 156:	bf 93       	push	r27
	++timer2_overflow_count;
 158:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 15c:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 160:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <__data_end+0x2>
 164:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <__data_end+0x3>
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	a1 1d       	adc	r26, r1
 16c:	b1 1d       	adc	r27, r1
 16e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
 172:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 176:	a0 93 0e 02 	sts	0x020E, r26	; 0x80020e <__data_end+0x2>
 17a:	b0 93 0f 02 	sts	0x020F, r27	; 0x80020f <__data_end+0x3>
}
 17e:	bf 91       	pop	r27
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <setup_timer2>:
void setup_timer2(void)
{
	sbi (TCCR2B, CS20);//only this 8
 190:	e1 eb       	ldi	r30, 0xB1	; 177
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	81 60       	ori	r24, 0x01	; 1
 198:	80 83       	st	Z, r24
	sbi (TCCR2B, CS21);
 19a:	80 81       	ld	r24, Z
 19c:	82 60       	ori	r24, 0x02	; 2
 19e:	80 83       	st	Z, r24
 1a0:	08 95       	ret

000001a2 <Enable_timer2_overflow_interrupt>:
	//sbi (TCCR3B, CS31);//only this 256
	//sbi (TCCR0B, WGM02);//OCR4A compare interrupt
}
void Enable_timer2_overflow_interrupt()
{
	sbi (TIMSK2, TOIE2);
 1a2:	e0 e7       	ldi	r30, 0x70	; 112
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	81 60       	ori	r24, 0x01	; 1
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <micros>:
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 1ae:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 1b0:	f8 94       	cli
	m = timer2_overflow_count;
 1b2:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 1b6:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 1ba:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <__data_end+0x2>
 1be:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <__data_end+0x3>
	t = TCNT0;
 1c2:	26 b5       	in	r18, 0x26	; 38
	

	#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 1c4:	a8 9b       	sbis	0x15, 0	; 21
 1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <micros+0x24>
 1c8:	2f 3f       	cpi	r18, 0xFF	; 255
 1ca:	19 f0       	breq	.+6      	; 0x1d2 <micros+0x24>
	m++;
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	a1 1d       	adc	r26, r1
 1d0:	b1 1d       	adc	r27, r1
	#else
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
	m++;
	#endif

	SREG = oldSREG;
 1d2:	3f bf       	out	0x3f, r19	; 63

	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 1d4:	ba 2f       	mov	r27, r26
 1d6:	a9 2f       	mov	r26, r25
 1d8:	98 2f       	mov	r25, r24
 1da:	88 27       	eor	r24, r24
 1dc:	82 0f       	add	r24, r18
 1de:	91 1d       	adc	r25, r1
 1e0:	a1 1d       	adc	r26, r1
 1e2:	b1 1d       	adc	r27, r1
 1e4:	bc 01       	movw	r22, r24
 1e6:	cd 01       	movw	r24, r26
 1e8:	66 0f       	add	r22, r22
 1ea:	77 1f       	adc	r23, r23
 1ec:	88 1f       	adc	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	66 0f       	add	r22, r22
 1f2:	77 1f       	adc	r23, r23
 1f4:	88 1f       	adc	r24, r24
 1f6:	99 1f       	adc	r25, r25
}
 1f8:	08 95       	ret

000001fa <USART_Init>:
		

void USART_Init(unsigned int ubrr)
{
  /* Set baud rate */
  UBRR0H = (unsigned char)(ubrr>>8);
 1fa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
  UBRR0L = (unsigned char)ubrr;
 1fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
  
  UCSR0B = (1<<TXEN0);// | (1<<TXCIE0);
 202:	88 e0       	ldi	r24, 0x08	; 8
 204:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
  UCSR0C = (1<<USBS0) | (3<<UCSZ00);//2 stop bit 8 bit
 208:	8e e0       	ldi	r24, 0x0E	; 14
 20a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 20e:	08 95       	ret

00000210 <main>:
int main(void)
{
	

    //sbi(DDRB,4);//digital 10
	cli();
 210:	f8 94       	cli
	USART_Init(MY_UBRR);
 212:	80 e1       	ldi	r24, 0x10	; 16
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	f1 df       	rcall	.-30     	; 0x1fa <USART_Init>
	uart_str = fdevopen(uart_putchar, NULL);
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	82 e9       	ldi	r24, 0x92	; 146
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	1a d0       	rcall	.+52     	; 0x256 <fdevopen>
 222:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <uart_str+0x1>
	setup_timer2();
 226:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <uart_str>
	Enable_timer2_overflow_interrupt();
 22a:	b2 df       	rcall	.-156    	; 0x190 <setup_timer2>
	
	sei();
 22c:	ba df       	rcall	.-140    	; 0x1a2 <Enable_timer2_overflow_interrupt>

	//printf("asd \n");
    while (1) 
    {
	unsigned long timer=micros();
 22e:	78 94       	sei
 230:	be df       	rcall	.-132    	; 0x1ae <micros>
	printf("asd \n");
 232:	6b 01       	movw	r12, r22
 234:	7c 01       	movw	r14, r24
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	92 e0       	ldi	r25, 0x02	; 2
	//for (int i=0;i<1000;i++);
	//reg=(micros()-timer);
	while(micros()-timer<2000000)
 23a:	57 d0       	rcall	.+174    	; 0x2ea <puts>
 23c:	b8 df       	rcall	.-144    	; 0x1ae <micros>
 23e:	dc 01       	movw	r26, r24
 240:	cb 01       	movw	r24, r22
 242:	8c 19       	sub	r24, r12
 244:	9d 09       	sbc	r25, r13
 246:	ae 09       	sbc	r26, r14
 248:	bf 09       	sbc	r27, r15
 24a:	80 38       	cpi	r24, 0x80	; 128
 24c:	94 48       	sbci	r25, 0x84	; 132
 24e:	ae 41       	sbci	r26, 0x1E	; 30
 250:	b1 05       	cpc	r27, r1
 252:	a0 f3       	brcs	.-24     	; 0x23c <main+0x2c>
 254:	ed cf       	rjmp	.-38     	; 0x230 <main+0x20>

00000256 <fdevopen>:
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	00 97       	sbiw	r24, 0x00	; 0
 260:	31 f4       	brne	.+12     	; 0x26e <fdevopen+0x18>
 262:	61 15       	cp	r22, r1
 264:	71 05       	cpc	r23, r1
 266:	19 f4       	brne	.+6      	; 0x26e <fdevopen+0x18>
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	39 c0       	rjmp	.+114    	; 0x2e0 <fdevopen+0x8a>
 26e:	8b 01       	movw	r16, r22
 270:	ec 01       	movw	r28, r24
 272:	6e e0       	ldi	r22, 0x0E	; 14
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	67 d0       	rcall	.+206    	; 0x34a <calloc>
 27c:	fc 01       	movw	r30, r24
 27e:	89 2b       	or	r24, r25
 280:	99 f3       	breq	.-26     	; 0x268 <fdevopen+0x12>
 282:	80 e8       	ldi	r24, 0x80	; 128
 284:	83 83       	std	Z+3, r24	; 0x03
 286:	01 15       	cp	r16, r1
 288:	11 05       	cpc	r17, r1
 28a:	71 f0       	breq	.+28     	; 0x2a8 <fdevopen+0x52>
 28c:	13 87       	std	Z+11, r17	; 0x0b
 28e:	02 87       	std	Z+10, r16	; 0x0a
 290:	81 e8       	ldi	r24, 0x81	; 129
 292:	83 83       	std	Z+3, r24	; 0x03
 294:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__iob>
 298:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <__iob+0x1>
 29c:	89 2b       	or	r24, r25
 29e:	21 f4       	brne	.+8      	; 0x2a8 <fdevopen+0x52>
 2a0:	f0 93 17 02 	sts	0x0217, r31	; 0x800217 <__iob+0x1>
 2a4:	e0 93 16 02 	sts	0x0216, r30	; 0x800216 <__iob>
 2a8:	20 97       	sbiw	r28, 0x00	; 0
 2aa:	c9 f0       	breq	.+50     	; 0x2de <fdevopen+0x88>
 2ac:	d1 87       	std	Z+9, r29	; 0x09
 2ae:	c0 87       	std	Z+8, r28	; 0x08
 2b0:	83 81       	ldd	r24, Z+3	; 0x03
 2b2:	82 60       	ori	r24, 0x02	; 2
 2b4:	83 83       	std	Z+3, r24	; 0x03
 2b6:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__iob+0x2>
 2ba:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <__iob+0x3>
 2be:	89 2b       	or	r24, r25
 2c0:	71 f4       	brne	.+28     	; 0x2de <fdevopen+0x88>
 2c2:	f0 93 19 02 	sts	0x0219, r31	; 0x800219 <__iob+0x3>
 2c6:	e0 93 18 02 	sts	0x0218, r30	; 0x800218 <__iob+0x2>
 2ca:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__iob+0x4>
 2ce:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <__iob+0x5>
 2d2:	89 2b       	or	r24, r25
 2d4:	21 f4       	brne	.+8      	; 0x2de <fdevopen+0x88>
 2d6:	f0 93 1b 02 	sts	0x021B, r31	; 0x80021b <__iob+0x5>
 2da:	e0 93 1a 02 	sts	0x021A, r30	; 0x80021a <__iob+0x4>
 2de:	cf 01       	movw	r24, r30
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	08 95       	ret

000002ea <puts>:
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__iob+0x2>
 2f6:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__iob+0x3>
 2fa:	23 81       	ldd	r18, Z+3	; 0x03
 2fc:	21 ff       	sbrs	r18, 1
 2fe:	1b c0       	rjmp	.+54     	; 0x336 <puts+0x4c>
 300:	8c 01       	movw	r16, r24
 302:	d0 e0       	ldi	r29, 0x00	; 0
 304:	c0 e0       	ldi	r28, 0x00	; 0
 306:	f8 01       	movw	r30, r16
 308:	81 91       	ld	r24, Z+
 30a:	8f 01       	movw	r16, r30
 30c:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <__iob+0x2>
 310:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <__iob+0x3>
 314:	db 01       	movw	r26, r22
 316:	18 96       	adiw	r26, 0x08	; 8
 318:	ed 91       	ld	r30, X+
 31a:	fc 91       	ld	r31, X
 31c:	19 97       	sbiw	r26, 0x09	; 9
 31e:	88 23       	and	r24, r24
 320:	31 f0       	breq	.+12     	; 0x32e <puts+0x44>
 322:	19 95       	eicall
 324:	89 2b       	or	r24, r25
 326:	79 f3       	breq	.-34     	; 0x306 <puts+0x1c>
 328:	df ef       	ldi	r29, 0xFF	; 255
 32a:	cf ef       	ldi	r28, 0xFF	; 255
 32c:	ec cf       	rjmp	.-40     	; 0x306 <puts+0x1c>
 32e:	8a e0       	ldi	r24, 0x0A	; 10
 330:	19 95       	eicall
 332:	89 2b       	or	r24, r25
 334:	19 f0       	breq	.+6      	; 0x33c <puts+0x52>
 336:	8f ef       	ldi	r24, 0xFF	; 255
 338:	9f ef       	ldi	r25, 0xFF	; 255
 33a:	02 c0       	rjmp	.+4      	; 0x340 <puts+0x56>
 33c:	8d 2f       	mov	r24, r29
 33e:	9c 2f       	mov	r25, r28
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	08 95       	ret

0000034a <calloc>:
 34a:	0f 93       	push	r16
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	86 9f       	mul	r24, r22
 354:	80 01       	movw	r16, r0
 356:	87 9f       	mul	r24, r23
 358:	10 0d       	add	r17, r0
 35a:	96 9f       	mul	r25, r22
 35c:	10 0d       	add	r17, r0
 35e:	11 24       	eor	r1, r1
 360:	c8 01       	movw	r24, r16
 362:	0d d0       	rcall	.+26     	; 0x37e <malloc>
 364:	ec 01       	movw	r28, r24
 366:	00 97       	sbiw	r24, 0x00	; 0
 368:	21 f0       	breq	.+8      	; 0x372 <calloc+0x28>
 36a:	a8 01       	movw	r20, r16
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	27 d1       	rcall	.+590    	; 0x5c0 <memset>
 372:	ce 01       	movw	r24, r28
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	1f 91       	pop	r17
 37a:	0f 91       	pop	r16
 37c:	08 95       	ret

0000037e <malloc>:
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	91 05       	cpc	r25, r1
 38a:	10 f4       	brcc	.+4      	; 0x390 <malloc+0x12>
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <__flp>
 394:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <__flp+0x1>
 398:	20 e0       	ldi	r18, 0x00	; 0
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	a0 e0       	ldi	r26, 0x00	; 0
 39e:	b0 e0       	ldi	r27, 0x00	; 0
 3a0:	30 97       	sbiw	r30, 0x00	; 0
 3a2:	19 f1       	breq	.+70     	; 0x3ea <malloc+0x6c>
 3a4:	40 81       	ld	r20, Z
 3a6:	51 81       	ldd	r21, Z+1	; 0x01
 3a8:	02 81       	ldd	r16, Z+2	; 0x02
 3aa:	13 81       	ldd	r17, Z+3	; 0x03
 3ac:	48 17       	cp	r20, r24
 3ae:	59 07       	cpc	r21, r25
 3b0:	c8 f0       	brcs	.+50     	; 0x3e4 <malloc+0x66>
 3b2:	84 17       	cp	r24, r20
 3b4:	95 07       	cpc	r25, r21
 3b6:	69 f4       	brne	.+26     	; 0x3d2 <malloc+0x54>
 3b8:	10 97       	sbiw	r26, 0x00	; 0
 3ba:	31 f0       	breq	.+12     	; 0x3c8 <malloc+0x4a>
 3bc:	12 96       	adiw	r26, 0x02	; 2
 3be:	0c 93       	st	X, r16
 3c0:	12 97       	sbiw	r26, 0x02	; 2
 3c2:	13 96       	adiw	r26, 0x03	; 3
 3c4:	1c 93       	st	X, r17
 3c6:	27 c0       	rjmp	.+78     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3c8:	00 93 1e 02 	sts	0x021E, r16	; 0x80021e <__flp>
 3cc:	10 93 1f 02 	sts	0x021F, r17	; 0x80021f <__flp+0x1>
 3d0:	22 c0       	rjmp	.+68     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3d2:	21 15       	cp	r18, r1
 3d4:	31 05       	cpc	r19, r1
 3d6:	19 f0       	breq	.+6      	; 0x3de <malloc+0x60>
 3d8:	42 17       	cp	r20, r18
 3da:	53 07       	cpc	r21, r19
 3dc:	18 f4       	brcc	.+6      	; 0x3e4 <malloc+0x66>
 3de:	9a 01       	movw	r18, r20
 3e0:	bd 01       	movw	r22, r26
 3e2:	ef 01       	movw	r28, r30
 3e4:	df 01       	movw	r26, r30
 3e6:	f8 01       	movw	r30, r16
 3e8:	db cf       	rjmp	.-74     	; 0x3a0 <malloc+0x22>
 3ea:	21 15       	cp	r18, r1
 3ec:	31 05       	cpc	r19, r1
 3ee:	f9 f0       	breq	.+62     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3f0:	28 1b       	sub	r18, r24
 3f2:	39 0b       	sbc	r19, r25
 3f4:	24 30       	cpi	r18, 0x04	; 4
 3f6:	31 05       	cpc	r19, r1
 3f8:	80 f4       	brcc	.+32     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3fa:	8a 81       	ldd	r24, Y+2	; 0x02
 3fc:	9b 81       	ldd	r25, Y+3	; 0x03
 3fe:	61 15       	cp	r22, r1
 400:	71 05       	cpc	r23, r1
 402:	21 f0       	breq	.+8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 404:	fb 01       	movw	r30, r22
 406:	93 83       	std	Z+3, r25	; 0x03
 408:	82 83       	std	Z+2, r24	; 0x02
 40a:	04 c0       	rjmp	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40c:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__flp+0x1>
 410:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__flp>
 414:	fe 01       	movw	r30, r28
 416:	32 96       	adiw	r30, 0x02	; 2
 418:	44 c0       	rjmp	.+136    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 41a:	fe 01       	movw	r30, r28
 41c:	e2 0f       	add	r30, r18
 41e:	f3 1f       	adc	r31, r19
 420:	81 93       	st	Z+, r24
 422:	91 93       	st	Z+, r25
 424:	22 50       	subi	r18, 0x02	; 2
 426:	31 09       	sbc	r19, r1
 428:	39 83       	std	Y+1, r19	; 0x01
 42a:	28 83       	st	Y, r18
 42c:	3a c0       	rjmp	.+116    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 42e:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <__brkval>
 432:	30 91 1d 02 	lds	r19, 0x021D	; 0x80021d <__brkval+0x1>
 436:	23 2b       	or	r18, r19
 438:	41 f4       	brne	.+16     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 43a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 43e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 442:	30 93 1d 02 	sts	0x021D, r19	; 0x80021d <__brkval+0x1>
 446:	20 93 1c 02 	sts	0x021C, r18	; 0x80021c <__brkval>
 44a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 44e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 452:	21 15       	cp	r18, r1
 454:	31 05       	cpc	r19, r1
 456:	41 f4       	brne	.+16     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 458:	2d b7       	in	r18, 0x3d	; 61
 45a:	3e b7       	in	r19, 0x3e	; 62
 45c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 460:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 464:	24 1b       	sub	r18, r20
 466:	35 0b       	sbc	r19, r21
 468:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <__brkval>
 46c:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <__brkval+0x1>
 470:	e2 17       	cp	r30, r18
 472:	f3 07       	cpc	r31, r19
 474:	a0 f4       	brcc	.+40     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 476:	2e 1b       	sub	r18, r30
 478:	3f 0b       	sbc	r19, r31
 47a:	28 17       	cp	r18, r24
 47c:	39 07       	cpc	r19, r25
 47e:	78 f0       	brcs	.+30     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 480:	ac 01       	movw	r20, r24
 482:	4e 5f       	subi	r20, 0xFE	; 254
 484:	5f 4f       	sbci	r21, 0xFF	; 255
 486:	24 17       	cp	r18, r20
 488:	35 07       	cpc	r19, r21
 48a:	48 f0       	brcs	.+18     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 48c:	4e 0f       	add	r20, r30
 48e:	5f 1f       	adc	r21, r31
 490:	50 93 1d 02 	sts	0x021D, r21	; 0x80021d <__brkval+0x1>
 494:	40 93 1c 02 	sts	0x021C, r20	; 0x80021c <__brkval>
 498:	81 93       	st	Z+, r24
 49a:	91 93       	st	Z+, r25
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 49e:	e0 e0       	ldi	r30, 0x00	; 0
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	cf 01       	movw	r24, r30
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	1f 91       	pop	r17
 4aa:	0f 91       	pop	r16
 4ac:	08 95       	ret

000004ae <free>:
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	00 97       	sbiw	r24, 0x00	; 0
 4b4:	09 f4       	brne	.+2      	; 0x4b8 <free+0xa>
 4b6:	81 c0       	rjmp	.+258    	; 0x5ba <free+0x10c>
 4b8:	fc 01       	movw	r30, r24
 4ba:	32 97       	sbiw	r30, 0x02	; 2
 4bc:	13 82       	std	Z+3, r1	; 0x03
 4be:	12 82       	std	Z+2, r1	; 0x02
 4c0:	a0 91 1e 02 	lds	r26, 0x021E	; 0x80021e <__flp>
 4c4:	b0 91 1f 02 	lds	r27, 0x021F	; 0x80021f <__flp+0x1>
 4c8:	10 97       	sbiw	r26, 0x00	; 0
 4ca:	81 f4       	brne	.+32     	; 0x4ec <free+0x3e>
 4cc:	20 81       	ld	r18, Z
 4ce:	31 81       	ldd	r19, Z+1	; 0x01
 4d0:	82 0f       	add	r24, r18
 4d2:	93 1f       	adc	r25, r19
 4d4:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <__brkval>
 4d8:	30 91 1d 02 	lds	r19, 0x021D	; 0x80021d <__brkval+0x1>
 4dc:	28 17       	cp	r18, r24
 4de:	39 07       	cpc	r19, r25
 4e0:	51 f5       	brne	.+84     	; 0x536 <free+0x88>
 4e2:	f0 93 1d 02 	sts	0x021D, r31	; 0x80021d <__brkval+0x1>
 4e6:	e0 93 1c 02 	sts	0x021C, r30	; 0x80021c <__brkval>
 4ea:	67 c0       	rjmp	.+206    	; 0x5ba <free+0x10c>
 4ec:	ed 01       	movw	r28, r26
 4ee:	20 e0       	ldi	r18, 0x00	; 0
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	ce 17       	cp	r28, r30
 4f4:	df 07       	cpc	r29, r31
 4f6:	40 f4       	brcc	.+16     	; 0x508 <free+0x5a>
 4f8:	4a 81       	ldd	r20, Y+2	; 0x02
 4fa:	5b 81       	ldd	r21, Y+3	; 0x03
 4fc:	9e 01       	movw	r18, r28
 4fe:	41 15       	cp	r20, r1
 500:	51 05       	cpc	r21, r1
 502:	f1 f0       	breq	.+60     	; 0x540 <free+0x92>
 504:	ea 01       	movw	r28, r20
 506:	f5 cf       	rjmp	.-22     	; 0x4f2 <free+0x44>
 508:	d3 83       	std	Z+3, r29	; 0x03
 50a:	c2 83       	std	Z+2, r28	; 0x02
 50c:	40 81       	ld	r20, Z
 50e:	51 81       	ldd	r21, Z+1	; 0x01
 510:	84 0f       	add	r24, r20
 512:	95 1f       	adc	r25, r21
 514:	c8 17       	cp	r28, r24
 516:	d9 07       	cpc	r29, r25
 518:	59 f4       	brne	.+22     	; 0x530 <free+0x82>
 51a:	88 81       	ld	r24, Y
 51c:	99 81       	ldd	r25, Y+1	; 0x01
 51e:	84 0f       	add	r24, r20
 520:	95 1f       	adc	r25, r21
 522:	02 96       	adiw	r24, 0x02	; 2
 524:	91 83       	std	Z+1, r25	; 0x01
 526:	80 83       	st	Z, r24
 528:	8a 81       	ldd	r24, Y+2	; 0x02
 52a:	9b 81       	ldd	r25, Y+3	; 0x03
 52c:	93 83       	std	Z+3, r25	; 0x03
 52e:	82 83       	std	Z+2, r24	; 0x02
 530:	21 15       	cp	r18, r1
 532:	31 05       	cpc	r19, r1
 534:	29 f4       	brne	.+10     	; 0x540 <free+0x92>
 536:	f0 93 1f 02 	sts	0x021F, r31	; 0x80021f <__flp+0x1>
 53a:	e0 93 1e 02 	sts	0x021E, r30	; 0x80021e <__flp>
 53e:	3d c0       	rjmp	.+122    	; 0x5ba <free+0x10c>
 540:	e9 01       	movw	r28, r18
 542:	fb 83       	std	Y+3, r31	; 0x03
 544:	ea 83       	std	Y+2, r30	; 0x02
 546:	49 91       	ld	r20, Y+
 548:	59 91       	ld	r21, Y+
 54a:	c4 0f       	add	r28, r20
 54c:	d5 1f       	adc	r29, r21
 54e:	ec 17       	cp	r30, r28
 550:	fd 07       	cpc	r31, r29
 552:	61 f4       	brne	.+24     	; 0x56c <free+0xbe>
 554:	80 81       	ld	r24, Z
 556:	91 81       	ldd	r25, Z+1	; 0x01
 558:	84 0f       	add	r24, r20
 55a:	95 1f       	adc	r25, r21
 55c:	02 96       	adiw	r24, 0x02	; 2
 55e:	e9 01       	movw	r28, r18
 560:	99 83       	std	Y+1, r25	; 0x01
 562:	88 83       	st	Y, r24
 564:	82 81       	ldd	r24, Z+2	; 0x02
 566:	93 81       	ldd	r25, Z+3	; 0x03
 568:	9b 83       	std	Y+3, r25	; 0x03
 56a:	8a 83       	std	Y+2, r24	; 0x02
 56c:	e0 e0       	ldi	r30, 0x00	; 0
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	12 96       	adiw	r26, 0x02	; 2
 572:	8d 91       	ld	r24, X+
 574:	9c 91       	ld	r25, X
 576:	13 97       	sbiw	r26, 0x03	; 3
 578:	00 97       	sbiw	r24, 0x00	; 0
 57a:	19 f0       	breq	.+6      	; 0x582 <free+0xd4>
 57c:	fd 01       	movw	r30, r26
 57e:	dc 01       	movw	r26, r24
 580:	f7 cf       	rjmp	.-18     	; 0x570 <free+0xc2>
 582:	8d 91       	ld	r24, X+
 584:	9c 91       	ld	r25, X
 586:	11 97       	sbiw	r26, 0x01	; 1
 588:	9d 01       	movw	r18, r26
 58a:	2e 5f       	subi	r18, 0xFE	; 254
 58c:	3f 4f       	sbci	r19, 0xFF	; 255
 58e:	82 0f       	add	r24, r18
 590:	93 1f       	adc	r25, r19
 592:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <__brkval>
 596:	30 91 1d 02 	lds	r19, 0x021D	; 0x80021d <__brkval+0x1>
 59a:	28 17       	cp	r18, r24
 59c:	39 07       	cpc	r19, r25
 59e:	69 f4       	brne	.+26     	; 0x5ba <free+0x10c>
 5a0:	30 97       	sbiw	r30, 0x00	; 0
 5a2:	29 f4       	brne	.+10     	; 0x5ae <free+0x100>
 5a4:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <__flp+0x1>
 5a8:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <__flp>
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <free+0x104>
 5ae:	13 82       	std	Z+3, r1	; 0x03
 5b0:	12 82       	std	Z+2, r1	; 0x02
 5b2:	b0 93 1d 02 	sts	0x021D, r27	; 0x80021d <__brkval+0x1>
 5b6:	a0 93 1c 02 	sts	0x021C, r26	; 0x80021c <__brkval>
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	08 95       	ret

000005c0 <memset>:
 5c0:	dc 01       	movw	r26, r24
 5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <memset+0x6>
 5c4:	6d 93       	st	X+, r22
 5c6:	41 50       	subi	r20, 0x01	; 1
 5c8:	50 40       	sbci	r21, 0x00	; 0
 5ca:	e0 f7       	brcc	.-8      	; 0x5c4 <memset+0x4>
 5cc:	08 95       	ret

000005ce <_exit>:
 5ce:	f8 94       	cli

000005d0 <__stop_program>:
 5d0:	ff cf       	rjmp	.-2      	; 0x5d0 <__stop_program>
