
drv_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800200  0000182e  000018c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000182e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800244  00800244  00001906  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001906  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001964  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000232c  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001324  00000000  00000000  00003e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001094  00000000  00000000  000051ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e8  00000000  00000000  00006240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ac2  00000000  00000000  00006728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001533  00000000  00000000  000071ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000871d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	72 c0       	rjmp	.+228    	; 0x166 <__vector_32>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e2       	ldi	r30, 0x2E	; 46
      fc:	f8 e1       	ldi	r31, 0x18	; 24
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 34       	cpi	r26, 0x44	; 68
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a4 e4       	ldi	r26, 0x44	; 68
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a6 36       	cpi	r26, 0x66	; 102
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	6d d0       	rcall	.+218    	; 0x1fa <main>
     120:	0c 94 15 0c 	jmp	0x182a	; 0x182a <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <init_gpio>:
	DDRD|=(1<<PD7);//enable 1 DIGITAL 7
	DDRB|=(1<<PB0);//enable 2 DIGITAL 8
	DDRD|=(1<<PD2);//enable 3 DIGITAL 2
	*/
	//DDRB|=(1<<PB5);//LED13
	sbi(DDRB,4);//digital 10
     126:	24 9a       	sbi	0x04, 4	; 4
	sbi(DDRB,5);//digital 11
     128:	25 9a       	sbi	0x04, 5	; 4
	sbi(DDRB,6);//digital 12
     12a:	26 9a       	sbi	0x04, 6	; 4
	sbi(DDRH,4);//digital 7
     12c:	e1 e0       	ldi	r30, 0x01	; 1
     12e:	f1 e0       	ldi	r31, 0x01	; 1
     130:	80 81       	ld	r24, Z
     132:	80 61       	ori	r24, 0x10	; 16
     134:	80 83       	st	Z, r24
	sbi(DDRH,5);//digital 8
     136:	80 81       	ld	r24, Z
     138:	80 62       	ori	r24, 0x20	; 32
     13a:	80 83       	st	Z, r24
	sbi(DDRH,6);//digital 9
     13c:	80 81       	ld	r24, Z
     13e:	80 64       	ori	r24, 0x40	; 64
     140:	80 83       	st	Z, r24
     142:	08 95       	ret

00000144 <uart_putchar>:
		}
	}
	return true;
}
static int uart_putchar(char c, FILE *stream)
{
     144:	cf 93       	push	r28
     146:	c8 2f       	mov	r28, r24

	if (c == '\n')
     148:	8a 30       	cpi	r24, 0x0A	; 10
     14a:	11 f4       	brne	.+4      	; 0x150 <uart_putchar+0xc>
	uart_putchar('\r', stream);
     14c:	8d e0       	ldi	r24, 0x0D	; 13
     14e:	fa df       	rcall	.-12     	; 0x144 <uart_putchar>
	while ( !( UCSR0A & (1<<UDRE0)) )
     150:	e0 ec       	ldi	r30, 0xC0	; 192
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	85 ff       	sbrs	r24, 5
     158:	fd cf       	rjmp	.-6      	; 0x154 <uart_putchar+0x10>
	;
	/* Put data into buffer, sends the data */
	UDR0 = c;
     15a:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	return 0;
}
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	cf 91       	pop	r28
     164:	08 95       	ret

00000166 <__vector_32>:
		#endif  
	}
	return 0;
}
ISR(TIMER3_COMPA_vect)//10 microsecconed timer interrupt
{
     166:	1f 92       	push	r1
     168:	0f 92       	push	r0
     16a:	0f b6       	in	r0, 0x3f	; 63
     16c:	0f 92       	push	r0
     16e:	11 24       	eor	r1, r1
     170:	8f 93       	push	r24
     172:	9f 93       	push	r25
     174:	af 93       	push	r26
     176:	bf 93       	push	r27
		++_10micros;
     178:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <__data_end>
     17c:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <__data_end+0x1>
     180:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <__data_end+0x2>
     184:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <__data_end+0x3>
     188:	01 96       	adiw	r24, 0x01	; 1
     18a:	a1 1d       	adc	r26, r1
     18c:	b1 1d       	adc	r27, r1
     18e:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <__data_end>
     192:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <__data_end+0x1>
     196:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <__data_end+0x2>
     19a:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <__data_end+0x3>
}
     19e:	bf 91       	pop	r27
     1a0:	af 91       	pop	r26
     1a2:	9f 91       	pop	r25
     1a4:	8f 91       	pop	r24
     1a6:	0f 90       	pop	r0
     1a8:	0f be       	out	0x3f, r0	; 63
     1aa:	0f 90       	pop	r0
     1ac:	1f 90       	pop	r1
     1ae:	18 95       	reti

000001b0 <print16>:
//}

void print16(uint16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     1b0:	0f 93       	push	r16
     1b2:	1f 93       	push	r17
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	2a 97       	sbiw	r28, 0x0a	; 10
     1be:	0f b6       	in	r0, 0x3f	; 63
     1c0:	f8 94       	cli
     1c2:	de bf       	out	0x3e, r29	; 62
     1c4:	0f be       	out	0x3f, r0	; 63
     1c6:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     1c8:	4a e0       	ldi	r20, 0x0A	; 10
     1ca:	8e 01       	movw	r16, r28
     1cc:	0f 5f       	subi	r16, 0xFF	; 255
     1ce:	1f 4f       	sbci	r17, 0xFF	; 255
     1d0:	b8 01       	movw	r22, r16
     1d2:	fc 01       	movw	r30, r24
     1d4:	80 81       	ld	r24, Z
     1d6:	91 81       	ldd	r25, Z+1	; 0x01
     1d8:	79 d6       	rcall	.+3314   	; 0xecc <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     1da:	1f 93       	push	r17
     1dc:	0f 93       	push	r16
     1de:	e3 d6       	rcall	.+3526   	; 0xfa6 <printf>
	//printf("\n");
}
     1e0:	0f 90       	pop	r0
     1e2:	0f 90       	pop	r0
     1e4:	2a 96       	adiw	r28, 0x0a	; 10
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	f8 94       	cli
     1ea:	de bf       	out	0x3e, r29	; 62
     1ec:	0f be       	out	0x3f, r0	; 63
     1ee:	cd bf       	out	0x3d, r28	; 61
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	1f 91       	pop	r17
     1f6:	0f 91       	pop	r16
     1f8:	08 95       	ret

000001fa <main>:
uint16_t ADC_max=0;
uint8_t buffer[14];
uint8_t flag=0;
int main(void)

{	
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
     202:	a6 97       	sbiw	r28, 0x26	; 38
     204:	0f b6       	in	r0, 0x3f	; 63
     206:	f8 94       	cli
     208:	de bf       	out	0x3e, r29	; 62
     20a:	0f be       	out	0x3f, r0	; 63
	init_gpio();
	i2c_init();
     20c:	cd bf       	out	0x3d, r28	; 61
	USART_Init(MY_UBRR);
     20e:	8b df       	rcall	.-234    	; 0x126 <init_gpio>
     210:	ba d3       	rcall	.+1908   	; 0x986 <i2c_init>
     212:	80 e1       	ldi	r24, 0x10	; 16
	uart_str = fdevopen(uart_putchar, NULL);
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	68 d4       	rcall	.+2256   	; 0xae8 <USART_Init>
     218:	60 e0       	ldi	r22, 0x00	; 0
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	82 ea       	ldi	r24, 0xA2	; 162
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	78 d6       	rcall	.+3312   	; 0xf12 <fdevopen>
	setup_timer3();
     222:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <uart_str+0x1>
	Enable_timer3_compare_interrupt();
     226:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <uart_str>
	OCR3A=159;//interrupt every 10us
     22a:	9e d3       	rcall	.+1852   	; 0x968 <setup_timer3>
     22c:	a6 d3       	rcall	.+1868   	; 0x97a <Enable_timer3_compare_interrupt>
     22e:	8f e9       	ldi	r24, 0x9F	; 159
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
	float acc_total_vector=0;
	float angle_pitch_acc=0;
	float angle_roll_acc=0;
	bool set_gyro_angles;
	#ifdef CALIBERATED_DATA
		int32_t gyroX_calib=0;
     236:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     23a:	1d 86       	std	Y+13, r1	; 0x0d
     23c:	1e 86       	std	Y+14, r1	; 0x0e
		int32_t gyroY_calib=0;
     23e:	1f 86       	std	Y+15, r1	; 0x0f
     240:	18 8a       	std	Y+16, r1	; 0x10
     242:	19 8a       	std	Y+17, r1	; 0x11
     244:	1a 8a       	std	Y+18, r1	; 0x12
		int32_t gyroZ_calib=0;
     246:	1b 8a       	std	Y+19, r1	; 0x13
     248:	1c 8a       	std	Y+20, r1	; 0x14
     24a:	1d 8a       	std	Y+21, r1	; 0x15
     24c:	1e 8a       	std	Y+22, r1	; 0x16
		int32_t accelX_calib=0;
     24e:	1f 8a       	std	Y+23, r1	; 0x17
     250:	18 8e       	std	Y+24, r1	; 0x18
     252:	19 8e       	std	Y+25, r1	; 0x19
     254:	1a 8e       	std	Y+26, r1	; 0x1a
		int32_t accelY_calib=0;
     256:	1b 8e       	std	Y+27, r1	; 0x1b
     258:	1c 8e       	std	Y+28, r1	; 0x1c
     25a:	1d 8e       	std	Y+29, r1	; 0x1d
     25c:	1e 8e       	std	Y+30, r1	; 0x1e
		int32_t accelZ_calib=0;
     25e:	1f 8e       	std	Y+31, r1	; 0x1f
     260:	18 a2       	std	Y+32, r1	; 0x20
     262:	19 a2       	std	Y+33, r1	; 0x21
     264:	1a a2       	std	Y+34, r1	; 0x22
		mpu6050_calibrate_gyro(&gyroX_calib,&gyroY_calib,&gyroZ_calib);
     266:	1b a2       	std	Y+35, r1	; 0x23
     268:	1c a2       	std	Y+36, r1	; 0x24
     26a:	ae 01       	movw	r20, r28
     26c:	4b 5e       	subi	r20, 0xEB	; 235
     26e:	5f 4f       	sbci	r21, 0xFF	; 255
     270:	be 01       	movw	r22, r28
     272:	6f 5e       	subi	r22, 0xEF	; 239
     274:	7f 4f       	sbci	r23, 0xFF	; 255
     276:	ce 01       	movw	r24, r28
		mpu6050_calibrate_accel(&accelX_calib,&accelY_calib,&accelZ_calib);
     278:	0d 96       	adiw	r24, 0x0d	; 13
     27a:	11 d1       	rcall	.+546    	; 0x49e <mpu6050_calibrate_gyro>
     27c:	ae 01       	movw	r20, r28
     27e:	4f 5d       	subi	r20, 0xDF	; 223
     280:	5f 4f       	sbci	r21, 0xFF	; 255
     282:	be 01       	movw	r22, r28
	#endif
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV,7);
     284:	63 5e       	subi	r22, 0xE3	; 227
     286:	7f 4f       	sbci	r23, 0xFF	; 255
	mpu6050_writeByte(MPU6050_RA_CONFIG,0x00);
     288:	ce 01       	movw	r24, r28
     28a:	49 96       	adiw	r24, 0x19	; 25
     28c:	ef d1       	rcall	.+990    	; 0x66c <mpu6050_calibrate_accel>
	mpu6050_writeByte(MPU6050_RA_GYRO_CONFIG,0x08);//gyro sensitivity set to 500 o/s
     28e:	67 e0       	ldi	r22, 0x07	; 7
     290:	89 e1       	ldi	r24, 0x19	; 25
     292:	a3 d2       	rcall	.+1350   	; 0x7da <mpu6050_writeByte>
     294:	60 e0       	ldi	r22, 0x00	; 0
	mpu6050_writeByte(MPU6050_RA_ACCEL_CONFIG,0x10);//accel sensitivity -/+ 8g
     296:	8a e1       	ldi	r24, 0x1A	; 26
     298:	a0 d2       	rcall	.+1344   	; 0x7da <mpu6050_writeByte>
     29a:	68 e0       	ldi	r22, 0x08	; 8
     29c:	8b e1       	ldi	r24, 0x1B	; 27
	mpu6050_writeByte(MPU6050_RA_PWR_MGMT_1,0x01);
     29e:	9d d2       	rcall	.+1338   	; 0x7da <mpu6050_writeByte>
     2a0:	60 e1       	ldi	r22, 0x10	; 16
     2a2:	8c e1       	ldi	r24, 0x1C	; 28
     2a4:	9a d2       	rcall	.+1332   	; 0x7da <mpu6050_writeByte>
	
	/*-----------------end---------------*/
	sei();
     2a6:	61 e0       	ldi	r22, 0x01	; 1
	int16_t gyro_y;
	int16_t gyro_z;
	int16_t accel_x;
	int16_t accel_y;
	int16_t accel_z;
	float angle_pitch=0;
     2a8:	8b e6       	ldi	r24, 0x6B	; 107
     2aa:	97 d2       	rcall	.+1326   	; 0x7da <mpu6050_writeByte>
     2ac:	78 94       	sei
							//Gyro angle calculations
				//0.0000611 = 1 / (250Hz / 65.5)
				angle_pitch += gyro_x * 0.0000611; //Calculate the traveled pitch angle and add this to the angle_pitch variable
				angle_roll += gyro_y * 0.0000611;  //Calculate the traveled roll angle and add this to the angle_roll variable
				uint16_t reg=(uint16_t)angle_pitch;
				printf("x= ");
     2ae:	41 2c       	mov	r4, r1
     2b0:	51 2c       	mov	r5, r1
     2b2:	32 01       	movw	r6, r4
     2b4:	0f 2e       	mov	r0, r31
     2b6:	f6 e0       	ldi	r31, 0x06	; 6
     2b8:	8f 2e       	mov	r8, r31
				print16(&gyro_x);
				printf("  ");
     2ba:	f2 e0       	ldi	r31, 0x02	; 2
     2bc:	9f 2e       	mov	r9, r31
     2be:	f0 2d       	mov	r31, r0
     2c0:	0f 2e       	mov	r0, r31
     2c2:	fa e0       	ldi	r31, 0x0A	; 10
     2c4:	cf 2e       	mov	r12, r31
				printf("reg= ");
     2c6:	f2 e0       	ldi	r31, 0x02	; 2
     2c8:	df 2e       	mov	r13, r31
     2ca:	f0 2d       	mov	r31, r0
     2cc:	0f 2e       	mov	r0, r31
     2ce:	fd e0       	ldi	r31, 0x0D	; 13
     2d0:	af 2e       	mov	r10, r31
	
	/*-----------------end---------------*/
	sei();
    while (1) 
    {
    	mpu6050_getRawData(&accel_x,&accel_y,&accel_z,&gyro_x,&gyro_y,&gyro_z);//15us to do 
     2d2:	f2 e0       	ldi	r31, 0x02	; 2
     2d4:	bf 2e       	mov	r11, r31
     2d6:	f0 2d       	mov	r31, r0
     2d8:	ce 01       	movw	r24, r28
     2da:	05 96       	adiw	r24, 0x05	; 5
     2dc:	7c 01       	movw	r14, r24
     2de:	8e 01       	movw	r16, r28
     2e0:	0d 5f       	subi	r16, 0xFD	; 253
     2e2:	1f 4f       	sbci	r17, 0xFF	; 255
     2e4:	9e 01       	movw	r18, r28
     2e6:	2f 5f       	subi	r18, 0xFF	; 255
     2e8:	3f 4f       	sbci	r19, 0xFF	; 255
     2ea:	ae 01       	movw	r20, r28
     2ec:	45 5f       	subi	r20, 0xF5	; 245
     2ee:	5f 4f       	sbci	r21, 0xFF	; 255
     2f0:	be 01       	movw	r22, r28
     2f2:	67 5f       	subi	r22, 0xF7	; 247
			
			
			#ifdef CALIBERATED_DATA
				accX;
     2f4:	7f 4f       	sbci	r23, 0xFF	; 255
     2f6:	02 96       	adiw	r24, 0x02	; 2
     2f8:	cc d2       	rcall	.+1432   	; 0x892 <mpu6050_getRawData>
     2fa:	8f 81       	ldd	r24, Y+7	; 0x07
     2fc:	98 85       	ldd	r25, Y+8	; 0x08
     2fe:	29 8d       	ldd	r18, Y+25	; 0x19
     300:	3a 8d       	ldd	r19, Y+26	; 0x1a
     302:	82 1b       	sub	r24, r18
				accY;
     304:	93 0b       	sbc	r25, r19
     306:	98 87       	std	Y+8, r25	; 0x08
     308:	8f 83       	std	Y+7, r24	; 0x07
     30a:	89 85       	ldd	r24, Y+9	; 0x09
     30c:	9a 85       	ldd	r25, Y+10	; 0x0a
     30e:	2d 8d       	ldd	r18, Y+29	; 0x1d
     310:	3e 8d       	ldd	r19, Y+30	; 0x1e
     312:	82 1b       	sub	r24, r18
				accZ;
     314:	93 0b       	sbc	r25, r19
     316:	9a 87       	std	Y+10, r25	; 0x0a
     318:	89 87       	std	Y+9, r24	; 0x09
     31a:	8b 85       	ldd	r24, Y+11	; 0x0b
     31c:	9c 85       	ldd	r25, Y+12	; 0x0c
     31e:	29 a1       	ldd	r18, Y+33	; 0x21
     320:	3a a1       	ldd	r19, Y+34	; 0x22
     322:	82 1b       	sub	r24, r18
				grX;
     324:	93 0b       	sbc	r25, r19
     326:	9c 87       	std	Y+12, r25	; 0x0c
     328:	8b 87       	std	Y+11, r24	; 0x0b
     32a:	69 81       	ldd	r22, Y+1	; 0x01
     32c:	7a 81       	ldd	r23, Y+2	; 0x02
     32e:	8d 85       	ldd	r24, Y+13	; 0x0d
     330:	9e 85       	ldd	r25, Y+14	; 0x0e
     332:	68 1b       	sub	r22, r24
				grY;
     334:	79 0b       	sbc	r23, r25
     336:	7a 83       	std	Y+2, r23	; 0x02
     338:	69 83       	std	Y+1, r22	; 0x01
     33a:	8b 81       	ldd	r24, Y+3	; 0x03
     33c:	9c 81       	ldd	r25, Y+4	; 0x04
     33e:	29 89       	ldd	r18, Y+17	; 0x11
     340:	3a 89       	ldd	r19, Y+18	; 0x12
				grZ;
     342:	82 1b       	sub	r24, r18
     344:	93 0b       	sbc	r25, r19
     346:	9c 83       	std	Y+4, r25	; 0x04
     348:	8b 83       	std	Y+3, r24	; 0x03
     34a:	8d 81       	ldd	r24, Y+5	; 0x05
     34c:	9e 81       	ldd	r25, Y+6	; 0x06
			
		#else
			#ifdef GYRO
							//Gyro angle calculations
				//0.0000611 = 1 / (250Hz / 65.5)
				angle_pitch += gyro_x * 0.0000611; //Calculate the traveled pitch angle and add this to the angle_pitch variable
     34e:	2d 89       	ldd	r18, Y+21	; 0x15
     350:	3e 89       	ldd	r19, Y+22	; 0x16
     352:	82 1b       	sub	r24, r18
     354:	93 0b       	sbc	r25, r19
     356:	9e 83       	std	Y+6, r25	; 0x06
     358:	8d 83       	std	Y+5, r24	; 0x05
     35a:	07 2e       	mov	r0, r23
     35c:	00 0c       	add	r0, r0
     35e:	88 0b       	sbc	r24, r24
     360:	99 0b       	sbc	r25, r25
     362:	60 d4       	rcall	.+2240   	; 0xc24 <__floatsisf>
     364:	20 ed       	ldi	r18, 0xD0	; 208
				angle_roll += gyro_y * 0.0000611;  //Calculate the traveled roll angle and add this to the angle_roll variable
				uint16_t reg=(uint16_t)angle_pitch;
     366:	32 e2       	ldi	r19, 0x22	; 34
     368:	40 e8       	ldi	r20, 0x80	; 128
				printf("x= ");
     36a:	58 e3       	ldi	r21, 0x38	; 56
     36c:	e7 d4       	rcall	.+2510   	; 0xd3c <__mulsf3>
     36e:	a3 01       	movw	r20, r6
     370:	92 01       	movw	r18, r4
				print16(&gyro_x);
     372:	c6 d3       	rcall	.+1932   	; 0xb00 <__addsf3>
     374:	2b 01       	movw	r4, r22
     376:	3c 01       	movw	r6, r24
				printf("  ");
     378:	27 d4       	rcall	.+2126   	; 0xbc8 <__fixunssfsi>
     37a:	7e a3       	std	Y+38, r23	; 0x26
     37c:	6d a3       	std	Y+37, r22	; 0x25
				printf("reg= ");
     37e:	9f 92       	push	r9
     380:	8f 92       	push	r8
     382:	11 d6       	rcall	.+3106   	; 0xfa6 <printf>
     384:	ce 01       	movw	r24, r28
				print16(&reg);
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	13 df       	rcall	.-474    	; 0x1b0 <print16>
     38a:	df 92       	push	r13
     38c:	cf 92       	push	r12
				printf("  \n");
     38e:	0b d6       	rcall	.+3094   	; 0xfa6 <printf>
     390:	bf 92       	push	r11
     392:	af 92       	push	r10
				 //57.296 = 1 / (3.142 / 180) The Arduino asin function is in radians
				 angle_pitch_acc = asin((float)accel_y/acc_total_vector)* 57.296;       //Calculate the pitch angle
				 angle_roll_acc = asin((float)accel_x/acc_total_vector)* -57.296;       //Calculate the roll angle*/
				 
				 if(set_gyro_angles){                                                 //If the IMU is already started
					 angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;     //Correct the drift of the gyro pitch angle with the accelerometer pitch angle
     394:	08 d6       	rcall	.+3088   	; 0xfa6 <printf>
     396:	ce 01       	movw	r24, r28
     398:	85 96       	adiw	r24, 0x25	; 37
     39a:	0a df       	rcall	.-492    	; 0x1b0 <print16>
     39c:	c6 01       	movw	r24, r12
     39e:	16 d6       	rcall	.+3116   	; 0xfcc <puts>
     3a0:	29 ec       	ldi	r18, 0xC9	; 201
     3a2:	35 ee       	ldi	r19, 0xE5	; 229
     3a4:	4f e7       	ldi	r20, 0x7F	; 127
     3a6:	5f e3       	ldi	r21, 0x3F	; 63
     3a8:	c3 01       	movw	r24, r6
     3aa:	b2 01       	movw	r22, r4
     3ac:	c7 d4       	rcall	.+2446   	; 0xd3c <__mulsf3>
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	30 e0       	ldi	r19, 0x00	; 0
				//printf("roll=");
				//print16(&var_to_print2);
				//printf("\n");
			#endif		
			//USART_Transmit(0xff);
			timer1=_10micros;
     3b2:	a9 01       	movw	r20, r18
     3b4:	a5 d3       	rcall	.+1866   	; 0xb00 <__addsf3>
     3b6:	2b 01       	movw	r4, r22
     3b8:	3c 01       	movw	r6, r24
     3ba:	40 91 44 02 	lds	r20, 0x0244	; 0x800244 <__data_end>
     3be:	50 91 45 02 	lds	r21, 0x0245	; 0x800245 <__data_end+0x1>
			while(_10micros-timer1<_4millis);
     3c2:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <__data_end+0x2>
     3c6:	70 91 47 02 	lds	r23, 0x0247	; 0x800247 <__data_end+0x3>
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <__data_end>
     3da:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <__data_end+0x1>
     3de:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <__data_end+0x2>
     3e2:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <__data_end+0x3>
     3e6:	84 1b       	sub	r24, r20
     3e8:	95 0b       	sbc	r25, r21
     3ea:	a6 0b       	sbc	r26, r22
     3ec:	b7 0b       	sbc	r27, r23
     3ee:	80 39       	cpi	r24, 0x90	; 144
		timer1=_10micros;
     3f0:	91 40       	sbci	r25, 0x01	; 1
     3f2:	a1 05       	cpc	r26, r1
     3f4:	b1 05       	cpc	r27, r1
     3f6:	78 f3       	brcs	.-34     	; 0x3d6 <main+0x1dc>
     3f8:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <__data_end>
     3fc:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <__data_end+0x1>
     400:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <__data_end+0x2>
     404:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <__data_end+0x3>
     408:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <timer1>
     40c:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <timer1+0x1>
		#endif  
	}
     410:	a0 93 5a 02 	sts	0x025A, r26	; 0x80025a <timer1+0x2>
     414:	b0 93 5b 02 	sts	0x025B, r27	; 0x80025b <timer1+0x3>
     418:	5f cf       	rjmp	.-322    	; 0x2d8 <main+0xde>

0000041a <mpu6050_readByte>:
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_H);
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_L);
	return axis_value;
}
uint8_t mpu6050_readByte(uint8_t byteToRead)//readbyte
{
     41a:	cf 93       	push	r28
     41c:	c8 2f       	mov	r28, r24
	i2c_start(MPU6050_WRITE);
     41e:	80 ed       	ldi	r24, 0xD0	; 208
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	b7 d2       	rcall	.+1390   	; 0x992 <i2c_start>
	i2c_write(byteToRead);
     424:	8c 2f       	mov	r24, r28
     426:	90 e0       	ldi	r25, 0x00	; 0
	i2c_stop();
	
	i2c_start(MPU6050_READ);
     428:	0a d3       	rcall	.+1556   	; 0xa3e <i2c_write>
     42a:	f9 d2       	rcall	.+1522   	; 0xa1e <i2c_stop>
	uint8_t byteToReturn=i2c_readNak();
     42c:	81 ed       	ldi	r24, 0xD1	; 209
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	b0 d2       	rcall	.+1376   	; 0x992 <i2c_start>
	i2c_stop();
     432:	40 d3       	rcall	.+1664   	; 0xab4 <i2c_readNak>
     434:	c8 2f       	mov	r28, r24
	return byteToReturn;
}
     436:	f3 d2       	rcall	.+1510   	; 0xa1e <i2c_stop>
     438:	8c 2f       	mov	r24, r28
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <mpu6050_read_gyroX>:
	//-----------------------------------
	*/
}
#endif
uint16_t mpu6050_read_gyroX()//axis x=0,y=1,z=2
{
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_XOUT_H);
     442:	83 e4       	ldi	r24, 0x43	; 67
     444:	ea df       	rcall	.-44     	; 0x41a <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_XOUT_L);
     446:	c8 2f       	mov	r28, r24
     448:	d0 e0       	ldi	r29, 0x00	; 0
     44a:	dc 2f       	mov	r29, r28
     44c:	cc 27       	eor	r28, r28
     44e:	84 e4       	ldi	r24, 0x44	; 68
     450:	e4 df       	rcall	.-56     	; 0x41a <mpu6050_readByte>
	return axis_value;
}
     452:	9e 01       	movw	r18, r28
     454:	28 2b       	or	r18, r24
     456:	c9 01       	movw	r24, r18
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <mpu6050_read_gyroY>:
uint16_t mpu6050_read_gyroY()//axis x=0,y=1,z=2
{
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_YOUT_H);
     462:	85 e4       	ldi	r24, 0x45	; 69
     464:	da df       	rcall	.-76     	; 0x41a <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_YOUT_L);
     466:	c8 2f       	mov	r28, r24
     468:	d0 e0       	ldi	r29, 0x00	; 0
     46a:	dc 2f       	mov	r29, r28
     46c:	cc 27       	eor	r28, r28
     46e:	86 e4       	ldi	r24, 0x46	; 70
     470:	d4 df       	rcall	.-88     	; 0x41a <mpu6050_readByte>
	return axis_value;
}
     472:	9e 01       	movw	r18, r28
     474:	28 2b       	or	r18, r24
     476:	c9 01       	movw	r24, r18
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	08 95       	ret

0000047e <mpu6050_read_gyroZ>:
uint16_t mpu6050_read_gyroZ()//axis x=0,y=1,z=2
{
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_H);
     482:	87 e4       	ldi	r24, 0x47	; 71
     484:	ca df       	rcall	.-108    	; 0x41a <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_L);
     486:	c8 2f       	mov	r28, r24
     488:	d0 e0       	ldi	r29, 0x00	; 0
     48a:	dc 2f       	mov	r29, r28
     48c:	cc 27       	eor	r28, r28
     48e:	88 e4       	ldi	r24, 0x48	; 72
     490:	c4 df       	rcall	.-120    	; 0x41a <mpu6050_readByte>
	return axis_value;
}
     492:	9e 01       	movw	r18, r28
     494:	28 2b       	or	r18, r24
     496:	c9 01       	movw	r24, r18
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	08 95       	ret

0000049e <mpu6050_calibrate_gyro>:
 *  Author: HP
 */ 
#include "MPU6050.h"
#ifdef CALIBERATED_DATA
void mpu6050_calibrate_gyro(int32_t *x,int32_t *y, int32_t *z)
{
     49e:	cf 92       	push	r12
     4a0:	df 92       	push	r13
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	6c 01       	movw	r12, r24
     4b0:	7b 01       	movw	r14, r22
     4b2:	8a 01       	movw	r16, r20
	printf("Calibrating Gyro...\n");
     4b4:	83 e1       	ldi	r24, 0x13	; 19
     4b6:	92 e0       	ldi	r25, 0x02	; 2
     4b8:	89 d5       	rcall	.+2834   	; 0xfcc <puts>
     4ba:	c4 e1       	ldi	r28, 0x14	; 20
	for (int i=0;i<calibration_counter;i++)
	{
		(*x)+=mpu6050_read_gyroX();
     4bc:	d0 e0       	ldi	r29, 0x00	; 0
     4be:	bf df       	rcall	.-130    	; 0x43e <mpu6050_read_gyroX>
     4c0:	f6 01       	movw	r30, r12
     4c2:	40 81       	ld	r20, Z
     4c4:	51 81       	ldd	r21, Z+1	; 0x01
     4c6:	62 81       	ldd	r22, Z+2	; 0x02
     4c8:	73 81       	ldd	r23, Z+3	; 0x03
     4ca:	48 0f       	add	r20, r24
     4cc:	59 1f       	adc	r21, r25
     4ce:	61 1d       	adc	r22, r1
     4d0:	71 1d       	adc	r23, r1
     4d2:	40 83       	st	Z, r20
     4d4:	51 83       	std	Z+1, r21	; 0x01
     4d6:	62 83       	std	Z+2, r22	; 0x02
		(*y)+=mpu6050_read_gyroY();
     4d8:	73 83       	std	Z+3, r23	; 0x03
     4da:	c1 df       	rcall	.-126    	; 0x45e <mpu6050_read_gyroY>
     4dc:	f7 01       	movw	r30, r14
     4de:	40 81       	ld	r20, Z
     4e0:	51 81       	ldd	r21, Z+1	; 0x01
     4e2:	62 81       	ldd	r22, Z+2	; 0x02
     4e4:	73 81       	ldd	r23, Z+3	; 0x03
     4e6:	48 0f       	add	r20, r24
     4e8:	59 1f       	adc	r21, r25
     4ea:	61 1d       	adc	r22, r1
     4ec:	71 1d       	adc	r23, r1
     4ee:	40 83       	st	Z, r20
     4f0:	51 83       	std	Z+1, r21	; 0x01
     4f2:	62 83       	std	Z+2, r22	; 0x02
		(*z)+=mpu6050_read_gyroZ();
     4f4:	73 83       	std	Z+3, r23	; 0x03
     4f6:	c3 df       	rcall	.-122    	; 0x47e <mpu6050_read_gyroZ>
     4f8:	f8 01       	movw	r30, r16
     4fa:	40 81       	ld	r20, Z
     4fc:	51 81       	ldd	r21, Z+1	; 0x01
     4fe:	62 81       	ldd	r22, Z+2	; 0x02
     500:	73 81       	ldd	r23, Z+3	; 0x03
     502:	48 0f       	add	r20, r24
     504:	59 1f       	adc	r21, r25
     506:	61 1d       	adc	r22, r1
     508:	71 1d       	adc	r23, r1
     50a:	40 83       	st	Z, r20
     50c:	51 83       	std	Z+1, r21	; 0x01
     50e:	62 83       	std	Z+2, r22	; 0x02
     510:	73 83       	std	Z+3, r23	; 0x03
     512:	21 97       	sbiw	r28, 0x01	; 1
#include "MPU6050.h"
#ifdef CALIBERATED_DATA
void mpu6050_calibrate_gyro(int32_t *x,int32_t *y, int32_t *z)
{
	printf("Calibrating Gyro...\n");
	for (int i=0;i<calibration_counter;i++)
     514:	a1 f6       	brne	.-88     	; 0x4be <mpu6050_calibrate_gyro+0x20>
		(*x)+=mpu6050_read_gyroX();
		(*y)+=mpu6050_read_gyroY();
		(*z)+=mpu6050_read_gyroZ();
		_delay_ms(caliberation_wait_delay);
	}
		if(*x<0)
     516:	f6 01       	movw	r30, r12
     518:	60 81       	ld	r22, Z
     51a:	71 81       	ldd	r23, Z+1	; 0x01
     51c:	82 81       	ldd	r24, Z+2	; 0x02
     51e:	93 81       	ldd	r25, Z+3	; 0x03
     520:	99 23       	and	r25, r25
     522:	ac f4       	brge	.+42     	; 0x54e <mpu6050_calibrate_gyro+0xb0>
		(*x)=abs(*x)/calibration_counter;
     524:	9b 01       	movw	r18, r22
     526:	77 23       	and	r23, r23
     528:	24 f4       	brge	.+8      	; 0x532 <mpu6050_calibrate_gyro+0x94>
     52a:	22 27       	eor	r18, r18
     52c:	33 27       	eor	r19, r19
     52e:	26 1b       	sub	r18, r22
     530:	37 0b       	sbc	r19, r23
     532:	c9 01       	movw	r24, r18
     534:	64 e1       	ldi	r22, 0x14	; 20
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	64 d4       	rcall	.+2248   	; 0xe02 <__divmodhi4>
     53a:	cb 01       	movw	r24, r22
     53c:	77 0f       	add	r23, r23
     53e:	aa 0b       	sbc	r26, r26
     540:	bb 0b       	sbc	r27, r27
     542:	f6 01       	movw	r30, r12
     544:	80 83       	st	Z, r24
     546:	91 83       	std	Z+1, r25	; 0x01
     548:	a2 83       	std	Z+2, r26	; 0x02
     54a:	b3 83       	std	Z+3, r27	; 0x03
		else
		(*x)=(*x)/calibration_counter;
     54c:	0a c0       	rjmp	.+20     	; 0x562 <mpu6050_calibrate_gyro+0xc4>
     54e:	24 e1       	ldi	r18, 0x14	; 20
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	40 e0       	ldi	r20, 0x00	; 0
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	68 d4       	rcall	.+2256   	; 0xe28 <__divmodsi4>
     558:	f6 01       	movw	r30, r12
     55a:	20 83       	st	Z, r18
     55c:	31 83       	std	Z+1, r19	; 0x01
     55e:	42 83       	std	Z+2, r20	; 0x02
     560:	53 83       	std	Z+3, r21	; 0x03
		
		if(*y<0)
     562:	f7 01       	movw	r30, r14
     564:	60 81       	ld	r22, Z
     566:	71 81       	ldd	r23, Z+1	; 0x01
     568:	82 81       	ldd	r24, Z+2	; 0x02
     56a:	93 81       	ldd	r25, Z+3	; 0x03
     56c:	99 23       	and	r25, r25
     56e:	ac f4       	brge	.+42     	; 0x59a <mpu6050_calibrate_gyro+0xfc>
		(*y)=abs(*y)/calibration_counter;
     570:	9b 01       	movw	r18, r22
     572:	77 23       	and	r23, r23
     574:	24 f4       	brge	.+8      	; 0x57e <mpu6050_calibrate_gyro+0xe0>
     576:	22 27       	eor	r18, r18
     578:	33 27       	eor	r19, r19
     57a:	26 1b       	sub	r18, r22
     57c:	37 0b       	sbc	r19, r23
     57e:	c9 01       	movw	r24, r18
     580:	64 e1       	ldi	r22, 0x14	; 20
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	3e d4       	rcall	.+2172   	; 0xe02 <__divmodhi4>
     586:	cb 01       	movw	r24, r22
     588:	77 0f       	add	r23, r23
     58a:	aa 0b       	sbc	r26, r26
     58c:	bb 0b       	sbc	r27, r27
     58e:	f7 01       	movw	r30, r14
     590:	80 83       	st	Z, r24
     592:	91 83       	std	Z+1, r25	; 0x01
     594:	a2 83       	std	Z+2, r26	; 0x02
     596:	b3 83       	std	Z+3, r27	; 0x03
		else
		(*y)=(*y)/calibration_counter;
     598:	0a c0       	rjmp	.+20     	; 0x5ae <mpu6050_calibrate_gyro+0x110>
     59a:	24 e1       	ldi	r18, 0x14	; 20
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	40 e0       	ldi	r20, 0x00	; 0
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	42 d4       	rcall	.+2180   	; 0xe28 <__divmodsi4>
     5a4:	f7 01       	movw	r30, r14
     5a6:	20 83       	st	Z, r18
     5a8:	31 83       	std	Z+1, r19	; 0x01
     5aa:	42 83       	std	Z+2, r20	; 0x02
     5ac:	53 83       	std	Z+3, r21	; 0x03
		
		if(*z<0)
     5ae:	f8 01       	movw	r30, r16
     5b0:	60 81       	ld	r22, Z
     5b2:	71 81       	ldd	r23, Z+1	; 0x01
     5b4:	82 81       	ldd	r24, Z+2	; 0x02
     5b6:	93 81       	ldd	r25, Z+3	; 0x03
     5b8:	99 23       	and	r25, r25
     5ba:	ac f4       	brge	.+42     	; 0x5e6 <mpu6050_calibrate_gyro+0x148>
		(*z)=abs(*z)/calibration_counter;
     5bc:	9b 01       	movw	r18, r22
     5be:	77 23       	and	r23, r23
     5c0:	24 f4       	brge	.+8      	; 0x5ca <mpu6050_calibrate_gyro+0x12c>
     5c2:	22 27       	eor	r18, r18
     5c4:	33 27       	eor	r19, r19
     5c6:	26 1b       	sub	r18, r22
     5c8:	37 0b       	sbc	r19, r23
     5ca:	c9 01       	movw	r24, r18
     5cc:	64 e1       	ldi	r22, 0x14	; 20
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	18 d4       	rcall	.+2096   	; 0xe02 <__divmodhi4>
     5d2:	cb 01       	movw	r24, r22
     5d4:	77 0f       	add	r23, r23
     5d6:	aa 0b       	sbc	r26, r26
     5d8:	bb 0b       	sbc	r27, r27
     5da:	f8 01       	movw	r30, r16
     5dc:	80 83       	st	Z, r24
     5de:	91 83       	std	Z+1, r25	; 0x01
     5e0:	a2 83       	std	Z+2, r26	; 0x02
     5e2:	b3 83       	std	Z+3, r27	; 0x03
		else
		(*z)=(*z)/calibration_counter;
     5e4:	0a c0       	rjmp	.+20     	; 0x5fa <mpu6050_calibrate_gyro+0x15c>
     5e6:	24 e1       	ldi	r18, 0x14	; 20
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	40 e0       	ldi	r20, 0x00	; 0
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	1c d4       	rcall	.+2104   	; 0xe28 <__divmodsi4>
     5f0:	f8 01       	movw	r30, r16
     5f2:	20 83       	st	Z, r18
     5f4:	31 83       	std	Z+1, r19	; 0x01
     5f6:	42 83       	std	Z+2, r20	; 0x02
     5f8:	53 83       	std	Z+3, r21	; 0x03
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/			
	
}
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	df 90       	pop	r13
     608:	cf 90       	pop	r12
     60a:	08 95       	ret

0000060c <mpu6050_read_accelX>:
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_H);
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_L);
	return axis_value;
}
uint16_t mpu6050_read_accelX()
{
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_XOUT_H);
     610:	8b e3       	ldi	r24, 0x3B	; 59
     612:	03 df       	rcall	.-506    	; 0x41a <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_XOUT_L);
     614:	c8 2f       	mov	r28, r24
     616:	d0 e0       	ldi	r29, 0x00	; 0
     618:	dc 2f       	mov	r29, r28
     61a:	cc 27       	eor	r28, r28
     61c:	8c e3       	ldi	r24, 0x3C	; 60
     61e:	fd de       	rcall	.-518    	; 0x41a <mpu6050_readByte>
	return axis_value;
}
     620:	9e 01       	movw	r18, r28
     622:	28 2b       	or	r18, r24
     624:	c9 01       	movw	r24, r18
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <mpu6050_read_accelY>:
uint16_t mpu6050_read_accelY()
{
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_YOUT_H);
     630:	8d e3       	ldi	r24, 0x3D	; 61
     632:	f3 de       	rcall	.-538    	; 0x41a <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_YOUT_L);
     634:	c8 2f       	mov	r28, r24
     636:	d0 e0       	ldi	r29, 0x00	; 0
     638:	dc 2f       	mov	r29, r28
     63a:	cc 27       	eor	r28, r28
     63c:	8e e3       	ldi	r24, 0x3E	; 62
     63e:	ed de       	rcall	.-550    	; 0x41a <mpu6050_readByte>
	return axis_value;
}
     640:	9e 01       	movw	r18, r28
     642:	28 2b       	or	r18, r24
     644:	c9 01       	movw	r24, r18
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	08 95       	ret

0000064c <mpu6050_read_accelZ>:
uint16_t mpu6050_read_accelZ()
{
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_H);
     650:	8f e3       	ldi	r24, 0x3F	; 63
     652:	e3 de       	rcall	.-570    	; 0x41a <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_L);
     654:	c8 2f       	mov	r28, r24
     656:	d0 e0       	ldi	r29, 0x00	; 0
     658:	dc 2f       	mov	r29, r28
     65a:	cc 27       	eor	r28, r28
     65c:	80 e4       	ldi	r24, 0x40	; 64
     65e:	dd de       	rcall	.-582    	; 0x41a <mpu6050_readByte>
	return axis_value;
}
     660:	9e 01       	movw	r18, r28
     662:	28 2b       	or	r18, r24
     664:	c9 01       	movw	r24, r18
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	08 95       	ret

0000066c <mpu6050_calibrate_accel>:
	*/			
	
}

void mpu6050_calibrate_accel(int32_t *x,int32_t *y, int32_t *z)
{
     66c:	cf 92       	push	r12
     66e:	df 92       	push	r13
     670:	ef 92       	push	r14
     672:	ff 92       	push	r15
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	6c 01       	movw	r12, r24
     67e:	7b 01       	movw	r14, r22
     680:	8a 01       	movw	r16, r20
	
	printf("Calibrating Accelerometer...\n");
     682:	87 e2       	ldi	r24, 0x27	; 39
     684:	92 e0       	ldi	r25, 0x02	; 2
     686:	a2 d4       	rcall	.+2372   	; 0xfcc <puts>
     688:	c4 e1       	ldi	r28, 0x14	; 20
	for(int i=0;i<calibration_counter;i++){
		(*x)+=mpu6050_read_accelX();
     68a:	d0 e0       	ldi	r29, 0x00	; 0
     68c:	bf df       	rcall	.-130    	; 0x60c <mpu6050_read_accelX>
     68e:	f6 01       	movw	r30, r12
     690:	40 81       	ld	r20, Z
     692:	51 81       	ldd	r21, Z+1	; 0x01
     694:	62 81       	ldd	r22, Z+2	; 0x02
     696:	73 81       	ldd	r23, Z+3	; 0x03
     698:	48 0f       	add	r20, r24
     69a:	59 1f       	adc	r21, r25
     69c:	61 1d       	adc	r22, r1
     69e:	71 1d       	adc	r23, r1
     6a0:	40 83       	st	Z, r20
     6a2:	51 83       	std	Z+1, r21	; 0x01
     6a4:	62 83       	std	Z+2, r22	; 0x02
		(*y)+=mpu6050_read_accelY();
     6a6:	73 83       	std	Z+3, r23	; 0x03
     6a8:	c1 df       	rcall	.-126    	; 0x62c <mpu6050_read_accelY>
     6aa:	f7 01       	movw	r30, r14
     6ac:	40 81       	ld	r20, Z
     6ae:	51 81       	ldd	r21, Z+1	; 0x01
     6b0:	62 81       	ldd	r22, Z+2	; 0x02
     6b2:	73 81       	ldd	r23, Z+3	; 0x03
     6b4:	48 0f       	add	r20, r24
     6b6:	59 1f       	adc	r21, r25
     6b8:	61 1d       	adc	r22, r1
     6ba:	71 1d       	adc	r23, r1
     6bc:	40 83       	st	Z, r20
     6be:	51 83       	std	Z+1, r21	; 0x01
     6c0:	62 83       	std	Z+2, r22	; 0x02
		(*z)+=mpu6050_read_accelZ();
     6c2:	73 83       	std	Z+3, r23	; 0x03
     6c4:	c3 df       	rcall	.-122    	; 0x64c <mpu6050_read_accelZ>
     6c6:	f8 01       	movw	r30, r16
     6c8:	40 81       	ld	r20, Z
     6ca:	51 81       	ldd	r21, Z+1	; 0x01
     6cc:	62 81       	ldd	r22, Z+2	; 0x02
     6ce:	73 81       	ldd	r23, Z+3	; 0x03
     6d0:	48 0f       	add	r20, r24
     6d2:	59 1f       	adc	r21, r25
     6d4:	61 1d       	adc	r22, r1
     6d6:	71 1d       	adc	r23, r1
     6d8:	40 83       	st	Z, r20
     6da:	51 83       	std	Z+1, r21	; 0x01
     6dc:	62 83       	std	Z+2, r22	; 0x02
     6de:	73 83       	std	Z+3, r23	; 0x03
     6e0:	21 97       	sbiw	r28, 0x01	; 1

void mpu6050_calibrate_accel(int32_t *x,int32_t *y, int32_t *z)
{
	
	printf("Calibrating Accelerometer...\n");
	for(int i=0;i<calibration_counter;i++){
     6e2:	a1 f6       	brne	.-88     	; 0x68c <mpu6050_calibrate_accel+0x20>
		(*x)+=mpu6050_read_accelX();
		(*y)+=mpu6050_read_accelY();
		(*z)+=mpu6050_read_accelZ();
		_delay_ms(caliberation_wait_delay);
	}
	if(*x<0)
     6e4:	f6 01       	movw	r30, r12
     6e6:	60 81       	ld	r22, Z
     6e8:	71 81       	ldd	r23, Z+1	; 0x01
     6ea:	82 81       	ldd	r24, Z+2	; 0x02
     6ec:	93 81       	ldd	r25, Z+3	; 0x03
     6ee:	99 23       	and	r25, r25
     6f0:	ac f4       	brge	.+42     	; 0x71c <mpu6050_calibrate_accel+0xb0>
	(*x)=abs(*x)/calibration_counter;
     6f2:	9b 01       	movw	r18, r22
     6f4:	77 23       	and	r23, r23
     6f6:	24 f4       	brge	.+8      	; 0x700 <mpu6050_calibrate_accel+0x94>
     6f8:	22 27       	eor	r18, r18
     6fa:	33 27       	eor	r19, r19
     6fc:	26 1b       	sub	r18, r22
     6fe:	37 0b       	sbc	r19, r23
     700:	c9 01       	movw	r24, r18
     702:	64 e1       	ldi	r22, 0x14	; 20
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	7d d3       	rcall	.+1786   	; 0xe02 <__divmodhi4>
     708:	cb 01       	movw	r24, r22
     70a:	77 0f       	add	r23, r23
     70c:	aa 0b       	sbc	r26, r26
     70e:	bb 0b       	sbc	r27, r27
     710:	f6 01       	movw	r30, r12
     712:	80 83       	st	Z, r24
     714:	91 83       	std	Z+1, r25	; 0x01
     716:	a2 83       	std	Z+2, r26	; 0x02
     718:	b3 83       	std	Z+3, r27	; 0x03
	else
	(*x)=(*x)/calibration_counter;
     71a:	0a c0       	rjmp	.+20     	; 0x730 <mpu6050_calibrate_accel+0xc4>
     71c:	24 e1       	ldi	r18, 0x14	; 20
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	40 e0       	ldi	r20, 0x00	; 0
     722:	50 e0       	ldi	r21, 0x00	; 0
     724:	81 d3       	rcall	.+1794   	; 0xe28 <__divmodsi4>
     726:	f6 01       	movw	r30, r12
     728:	20 83       	st	Z, r18
     72a:	31 83       	std	Z+1, r19	; 0x01
     72c:	42 83       	std	Z+2, r20	; 0x02
     72e:	53 83       	std	Z+3, r21	; 0x03
	
	if(*y<0)
     730:	f7 01       	movw	r30, r14
     732:	60 81       	ld	r22, Z
     734:	71 81       	ldd	r23, Z+1	; 0x01
     736:	82 81       	ldd	r24, Z+2	; 0x02
     738:	93 81       	ldd	r25, Z+3	; 0x03
     73a:	99 23       	and	r25, r25
     73c:	ac f4       	brge	.+42     	; 0x768 <mpu6050_calibrate_accel+0xfc>
	(*y)=abs(*y)/calibration_counter;
     73e:	9b 01       	movw	r18, r22
     740:	77 23       	and	r23, r23
     742:	24 f4       	brge	.+8      	; 0x74c <mpu6050_calibrate_accel+0xe0>
     744:	22 27       	eor	r18, r18
     746:	33 27       	eor	r19, r19
     748:	26 1b       	sub	r18, r22
     74a:	37 0b       	sbc	r19, r23
     74c:	c9 01       	movw	r24, r18
     74e:	64 e1       	ldi	r22, 0x14	; 20
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	57 d3       	rcall	.+1710   	; 0xe02 <__divmodhi4>
     754:	cb 01       	movw	r24, r22
     756:	77 0f       	add	r23, r23
     758:	aa 0b       	sbc	r26, r26
     75a:	bb 0b       	sbc	r27, r27
     75c:	f7 01       	movw	r30, r14
     75e:	80 83       	st	Z, r24
     760:	91 83       	std	Z+1, r25	; 0x01
     762:	a2 83       	std	Z+2, r26	; 0x02
     764:	b3 83       	std	Z+3, r27	; 0x03
	else
	(*y)=(*y)/calibration_counter;
     766:	0a c0       	rjmp	.+20     	; 0x77c <mpu6050_calibrate_accel+0x110>
     768:	24 e1       	ldi	r18, 0x14	; 20
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	40 e0       	ldi	r20, 0x00	; 0
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	5b d3       	rcall	.+1718   	; 0xe28 <__divmodsi4>
     772:	f7 01       	movw	r30, r14
     774:	20 83       	st	Z, r18
     776:	31 83       	std	Z+1, r19	; 0x01
     778:	42 83       	std	Z+2, r20	; 0x02
     77a:	53 83       	std	Z+3, r21	; 0x03
	
	if(*z<0)
     77c:	f8 01       	movw	r30, r16
     77e:	60 81       	ld	r22, Z
     780:	71 81       	ldd	r23, Z+1	; 0x01
     782:	82 81       	ldd	r24, Z+2	; 0x02
     784:	93 81       	ldd	r25, Z+3	; 0x03
     786:	99 23       	and	r25, r25
     788:	ac f4       	brge	.+42     	; 0x7b4 <mpu6050_calibrate_accel+0x148>
	(*z)=abs(*z)/calibration_counter;
     78a:	9b 01       	movw	r18, r22
     78c:	77 23       	and	r23, r23
     78e:	24 f4       	brge	.+8      	; 0x798 <mpu6050_calibrate_accel+0x12c>
     790:	22 27       	eor	r18, r18
     792:	33 27       	eor	r19, r19
     794:	26 1b       	sub	r18, r22
     796:	37 0b       	sbc	r19, r23
     798:	c9 01       	movw	r24, r18
     79a:	64 e1       	ldi	r22, 0x14	; 20
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	31 d3       	rcall	.+1634   	; 0xe02 <__divmodhi4>
     7a0:	cb 01       	movw	r24, r22
     7a2:	77 0f       	add	r23, r23
     7a4:	aa 0b       	sbc	r26, r26
     7a6:	bb 0b       	sbc	r27, r27
     7a8:	f8 01       	movw	r30, r16
     7aa:	80 83       	st	Z, r24
     7ac:	91 83       	std	Z+1, r25	; 0x01
     7ae:	a2 83       	std	Z+2, r26	; 0x02
     7b0:	b3 83       	std	Z+3, r27	; 0x03
	else
	(*z)=(*z)/calibration_counter;
     7b2:	0a c0       	rjmp	.+20     	; 0x7c8 <mpu6050_calibrate_accel+0x15c>
     7b4:	24 e1       	ldi	r18, 0x14	; 20
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	40 e0       	ldi	r20, 0x00	; 0
     7ba:	50 e0       	ldi	r21, 0x00	; 0
     7bc:	35 d3       	rcall	.+1642   	; 0xe28 <__divmodsi4>
     7be:	f8 01       	movw	r30, r16
     7c0:	20 83       	st	Z, r18
     7c2:	31 83       	std	Z+1, r19	; 0x01
     7c4:	42 83       	std	Z+2, r20	; 0x02
     7c6:	53 83       	std	Z+3, r21	; 0x03
	printf("  ");
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/
}
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	ff 90       	pop	r15
     7d2:	ef 90       	pop	r14
     7d4:	df 90       	pop	r13
     7d6:	cf 90       	pop	r12
     7d8:	08 95       	ret

000007da <mpu6050_writeByte>:
	uint8_t byteToReturn=i2c_readNak();
	i2c_stop();
	return byteToReturn;
}
void mpu6050_writeByte(uint8_t wereToWrite,uint8_t byteToWrite)//writebyte
{
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	d8 2f       	mov	r29, r24
     7e0:	c6 2f       	mov	r28, r22
	i2c_start(MPU6050_WRITE);
     7e2:	80 ed       	ldi	r24, 0xD0	; 208
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	d5 d0       	rcall	.+426    	; 0x992 <i2c_start>
	i2c_write(wereToWrite);
     7e8:	8d 2f       	mov	r24, r29
     7ea:	90 e0       	ldi	r25, 0x00	; 0
	i2c_write(byteToWrite);
     7ec:	28 d1       	rcall	.+592    	; 0xa3e <i2c_write>
     7ee:	8c 2f       	mov	r24, r28
	i2c_stop();
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	25 d1       	rcall	.+586    	; 0xa3e <i2c_write>
}
     7f4:	14 d1       	rcall	.+552    	; 0xa1e <i2c_stop>
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <mpu6050_readBytes>:
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
     7fc:	af 92       	push	r10
     7fe:	bf 92       	push	r11
     800:	cf 92       	push	r12
     802:	df 92       	push	r13
     804:	ff 92       	push	r15
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
     80e:	66 23       	and	r22, r22
     810:	a1 f1       	breq	.+104    	; 0x87a <mpu6050_readBytes+0x7e>
     812:	c5 2f       	mov	r28, r21
     814:	d4 2f       	mov	r29, r20
     816:	f6 2e       	mov	r15, r22
     818:	18 2f       	mov	r17, r24
		//request register
		i2c_start(MPU6050_WRITE);
     81a:	80 ed       	ldi	r24, 0xD0	; 208
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	b9 d0       	rcall	.+370    	; 0x992 <i2c_start>
		i2c_write(regAddr);
     820:	81 2f       	mov	r24, r17
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0c d1       	rcall	.+536    	; 0xa3e <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     826:	85 e3       	ldi	r24, 0x35	; 53
     828:	8a 95       	dec	r24
     82a:	f1 f7       	brne	.-4      	; 0x828 <mpu6050_readBytes+0x2c>
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
     82c:	00 00       	nop
     82e:	81 ed       	ldi	r24, 0xD1	; 209
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	af d0       	rcall	.+350    	; 0x992 <i2c_start>
     834:	0d 2f       	mov	r16, r29
     836:	1c 2f       	mov	r17, r28
     838:	cc 24       	eor	r12, r12
     83a:	ca 94       	dec	r12
     83c:	cf 0c       	add	r12, r15
     83e:	d1 2c       	mov	r13, r1
     840:	ef ef       	ldi	r30, 0xFF	; 255
     842:	ce 1a       	sub	r12, r30
     844:	de 0a       	sbc	r13, r30
     846:	c0 e0       	ldi	r28, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
     848:	d0 e0       	ldi	r29, 0x00	; 0
     84a:	af 2c       	mov	r10, r15
     84c:	b1 2c       	mov	r11, r1
     84e:	f1 e0       	ldi	r31, 0x01	; 1
     850:	af 1a       	sub	r10, r31
     852:	b1 08       	sbc	r11, r1
     854:	ac 16       	cp	r10, r28
			data[i] = i2c_readNak();
     856:	bd 06       	cpc	r11, r29
     858:	21 f4       	brne	.+8      	; 0x862 <mpu6050_readBytes+0x66>
     85a:	2c d1       	rcall	.+600    	; 0xab4 <i2c_readNak>
     85c:	f8 01       	movw	r30, r16
			else
			data[i] = i2c_readAck();
     85e:	80 83       	st	Z, r24
     860:	03 c0       	rjmp	.+6      	; 0x868 <mpu6050_readBytes+0x6c>
     862:	0e d1       	rcall	.+540    	; 0xa80 <i2c_readAck>
     864:	f8 01       	movw	r30, r16
     866:	80 83       	st	Z, r24
     868:	21 96       	adiw	r28, 0x01	; 1
		i2c_start(MPU6050_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
		for(i=0; i<length; i++) {
     86a:	0f 5f       	subi	r16, 0xFF	; 255
     86c:	1f 4f       	sbci	r17, 0xFF	; 255
     86e:	cc 15       	cp	r28, r12
     870:	dd 05       	cpc	r29, r13
			if(i==length-1)
			data[i] = i2c_readNak();
			else
			data[i] = i2c_readAck();
		}
		i2c_stop();
     872:	81 f7       	brne	.-32     	; 0x854 <mpu6050_readBytes+0x58>
     874:	cf 2d       	mov	r28, r15
     876:	d3 d0       	rcall	.+422    	; 0xa1e <i2c_stop>
	i2c_write(byteToWrite);
	i2c_stop();
}
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
	uint8_t i = 0;
	int8_t count = 0;
     878:	01 c0       	rjmp	.+2      	; 0x87c <mpu6050_readBytes+0x80>
			data[i] = i2c_readAck();
		}
		i2c_stop();
	}
	return count;
}
     87a:	c0 e0       	ldi	r28, 0x00	; 0
     87c:	8c 2f       	mov	r24, r28
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	ff 90       	pop	r15
     888:	df 90       	pop	r13
     88a:	cf 90       	pop	r12
     88c:	bf 90       	pop	r11
     88e:	af 90       	pop	r10
     890:	08 95       	ret

00000892 <mpu6050_getRawData>:
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     892:	6f 92       	push	r6
     894:	7f 92       	push	r7
     896:	8f 92       	push	r8
     898:	9f 92       	push	r9
     89a:	af 92       	push	r10
     89c:	bf 92       	push	r11
     89e:	cf 92       	push	r12
     8a0:	df 92       	push	r13
     8a2:	ef 92       	push	r14
     8a4:	ff 92       	push	r15
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	cd b7       	in	r28, 0x3d	; 61
     8b0:	de b7       	in	r29, 0x3e	; 62
     8b2:	2e 97       	sbiw	r28, 0x0e	; 14
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	f8 94       	cli
     8b8:	de bf       	out	0x3e, r29	; 62
     8ba:	0f be       	out	0x3f, r0	; 63
     8bc:	cd bf       	out	0x3d, r28	; 61
     8be:	4c 01       	movw	r8, r24
     8c0:	5b 01       	movw	r10, r22
     8c2:	6a 01       	movw	r12, r20
     8c4:	39 01       	movw	r6, r18
	uint8_t buffer[14];
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14,  buffer);
     8c6:	ae 01       	movw	r20, r28
     8c8:	4f 5f       	subi	r20, 0xFF	; 255
     8ca:	5f 4f       	sbci	r21, 0xFF	; 255
     8cc:	6e e0       	ldi	r22, 0x0E	; 14
     8ce:	8b e3       	ldi	r24, 0x3B	; 59
     8d0:	95 df       	rcall	.-214    	; 0x7fc <mpu6050_readBytes>
	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     8d2:	89 81       	ldd	r24, Y+1	; 0x01
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	98 2f       	mov	r25, r24
     8d8:	88 27       	eor	r24, r24
     8da:	2a 81       	ldd	r18, Y+2	; 0x02
     8dc:	82 2b       	or	r24, r18
     8de:	f4 01       	movw	r30, r8
     8e0:	91 83       	std	Z+1, r25	; 0x01
     8e2:	80 83       	st	Z, r24
	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     8e4:	8b 81       	ldd	r24, Y+3	; 0x03
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	98 2f       	mov	r25, r24
     8ea:	88 27       	eor	r24, r24
     8ec:	2c 81       	ldd	r18, Y+4	; 0x04
     8ee:	82 2b       	or	r24, r18
     8f0:	f5 01       	movw	r30, r10
     8f2:	91 83       	std	Z+1, r25	; 0x01
     8f4:	80 83       	st	Z, r24
	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
     8f6:	8d 81       	ldd	r24, Y+5	; 0x05
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	98 2f       	mov	r25, r24
     8fc:	88 27       	eor	r24, r24
     8fe:	2e 81       	ldd	r18, Y+6	; 0x06
     900:	82 2b       	or	r24, r18
     902:	f6 01       	movw	r30, r12
     904:	91 83       	std	Z+1, r25	; 0x01
     906:	80 83       	st	Z, r24
	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     908:	89 85       	ldd	r24, Y+9	; 0x09
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	98 2f       	mov	r25, r24
     90e:	88 27       	eor	r24, r24
     910:	2a 85       	ldd	r18, Y+10	; 0x0a
     912:	82 2b       	or	r24, r18
     914:	f3 01       	movw	r30, r6
     916:	91 83       	std	Z+1, r25	; 0x01
     918:	80 83       	st	Z, r24
	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     91a:	8b 85       	ldd	r24, Y+11	; 0x0b
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	98 2f       	mov	r25, r24
     920:	88 27       	eor	r24, r24
     922:	2c 85       	ldd	r18, Y+12	; 0x0c
     924:	82 2b       	or	r24, r18
     926:	f8 01       	movw	r30, r16
     928:	91 83       	std	Z+1, r25	; 0x01
     92a:	80 83       	st	Z, r24
	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     92c:	8d 85       	ldd	r24, Y+13	; 0x0d
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	98 2f       	mov	r25, r24
     932:	88 27       	eor	r24, r24
     934:	2e 85       	ldd	r18, Y+14	; 0x0e
     936:	82 2b       	or	r24, r18
     938:	f7 01       	movw	r30, r14
     93a:	91 83       	std	Z+1, r25	; 0x01
     93c:	80 83       	st	Z, r24
     93e:	2e 96       	adiw	r28, 0x0e	; 14
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	cf 90       	pop	r12
     95a:	bf 90       	pop	r11
     95c:	af 90       	pop	r10
     95e:	9f 90       	pop	r9
     960:	8f 90       	pop	r8
     962:	7f 90       	pop	r7
     964:	6f 90       	pop	r6
     966:	08 95       	ret

00000968 <setup_timer3>:
void setup_timer3(void)
{
	//64 pres, 250.000 hz 0.000004s
	//sbi (TCCR5B, CS50);//only this no prescaling
	
	sbi (TCCR3B, CS30);//only this 8
     968:	e1 e9       	ldi	r30, 0x91	; 145
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 81       	ld	r24, Z
     96e:	81 60       	ori	r24, 0x01	; 1
     970:	80 83       	st	Z, r24
	//sbi (TCCR5B, CS52);//only this 256
	sbi (TCCR3B, WGM32);//OCR4A compare interrupt
     972:	80 81       	ld	r24, Z
     974:	88 60       	ori	r24, 0x08	; 8
     976:	80 83       	st	Z, r24
     978:	08 95       	ret

0000097a <Enable_timer3_compare_interrupt>:
}
void Enable_timer3_compare_interrupt()
{
	sbi (TIMSK3, OCIE3A);
     97a:	e1 e7       	ldi	r30, 0x71	; 113
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	80 81       	ld	r24, Z
     980:	82 60       	ori	r24, 0x02	; 2
     982:	80 83       	st	Z, r24
     984:	08 95       	ret

00000986 <i2c_init>:
     986:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     98a:	8c e0       	ldi	r24, 0x0C	; 12
     98c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     990:	08 95       	ret

00000992 <i2c_start>:
     992:	94 ea       	ldi	r25, 0xA4	; 164
     994:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	50 e0       	ldi	r21, 0x00	; 0
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	ec eb       	ldi	r30, 0xBC	; 188
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	90 81       	ld	r25, Z
     9a6:	99 23       	and	r25, r25
     9a8:	34 f0       	brlt	.+12     	; 0x9b6 <i2c_start+0x24>
     9aa:	41 50       	subi	r20, 0x01	; 1
     9ac:	51 09       	sbc	r21, r1
     9ae:	61 09       	sbc	r22, r1
     9b0:	71 09       	sbc	r23, r1
     9b2:	c0 f7       	brcc	.-16     	; 0x9a4 <i2c_start+0x12>
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <i2c_start+0x2c>
     9b6:	45 2b       	or	r20, r21
     9b8:	46 2b       	or	r20, r22
     9ba:	47 2b       	or	r20, r23
     9bc:	41 f1       	breq	.+80     	; 0xa0e <i2c_start+0x7c>
     9be:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     9c2:	98 7f       	andi	r25, 0xF8	; 248
     9c4:	98 30       	cpi	r25, 0x08	; 8
     9c6:	11 f0       	breq	.+4      	; 0x9cc <i2c_start+0x3a>
     9c8:	90 31       	cpi	r25, 0x10	; 16
     9ca:	19 f5       	brne	.+70     	; 0xa12 <i2c_start+0x80>
     9cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     9d0:	84 e8       	ldi	r24, 0x84	; 132
     9d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     9d6:	8f ef       	ldi	r24, 0xFF	; 255
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	ec eb       	ldi	r30, 0xBC	; 188
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	20 81       	ld	r18, Z
     9e4:	22 23       	and	r18, r18
     9e6:	2c f0       	brlt	.+10     	; 0x9f2 <i2c_start+0x60>
     9e8:	01 97       	sbiw	r24, 0x01	; 1
     9ea:	a1 09       	sbc	r26, r1
     9ec:	b1 09       	sbc	r27, r1
     9ee:	c8 f7       	brcc	.-14     	; 0x9e2 <i2c_start+0x50>
     9f0:	04 c0       	rjmp	.+8      	; 0x9fa <i2c_start+0x68>
     9f2:	89 2b       	or	r24, r25
     9f4:	8a 2b       	or	r24, r26
     9f6:	8b 2b       	or	r24, r27
     9f8:	71 f0       	breq	.+28     	; 0xa16 <i2c_start+0x84>
     9fa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     9fe:	98 7f       	andi	r25, 0xF8	; 248
     a00:	98 31       	cpi	r25, 0x18	; 24
     a02:	59 f0       	breq	.+22     	; 0xa1a <i2c_start+0x88>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 34       	cpi	r25, 0x40	; 64
     a08:	49 f4       	brne	.+18     	; 0xa1c <i2c_start+0x8a>
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	08 95       	ret
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	08 95       	ret
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 95       	ret
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	08 95       	ret
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	08 95       	ret

00000a1e <i2c_stop>:
     a1e:	84 e9       	ldi	r24, 0x94	; 148
     a20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	ec eb       	ldi	r30, 0xBC	; 188
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	20 81       	ld	r18, Z
     a2e:	24 ff       	sbrs	r18, 4
     a30:	05 c0       	rjmp	.+10     	; 0xa3c <i2c_stop+0x1e>
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	81 15       	cp	r24, r1
     a36:	21 e0       	ldi	r18, 0x01	; 1
     a38:	92 07       	cpc	r25, r18
     a3a:	c1 f7       	brne	.-16     	; 0xa2c <i2c_stop+0xe>
     a3c:	08 95       	ret

00000a3e <i2c_write>:
     a3e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     a42:	84 e8       	ldi	r24, 0x84	; 132
     a44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     a48:	8f ef       	ldi	r24, 0xFF	; 255
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	a0 e0       	ldi	r26, 0x00	; 0
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	ec eb       	ldi	r30, 0xBC	; 188
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	20 81       	ld	r18, Z
     a56:	22 23       	and	r18, r18
     a58:	2c f0       	brlt	.+10     	; 0xa64 <i2c_write+0x26>
     a5a:	01 97       	sbiw	r24, 0x01	; 1
     a5c:	a1 09       	sbc	r26, r1
     a5e:	b1 09       	sbc	r27, r1
     a60:	c8 f7       	brcc	.-14     	; 0xa54 <i2c_write+0x16>
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <i2c_write+0x2e>
     a64:	89 2b       	or	r24, r25
     a66:	8a 2b       	or	r24, r26
     a68:	8b 2b       	or	r24, r27
     a6a:	41 f0       	breq	.+16     	; 0xa7c <i2c_write+0x3e>
     a6c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     a70:	98 7f       	andi	r25, 0xF8	; 248
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	98 32       	cpi	r25, 0x28	; 40
     a76:	19 f4       	brne	.+6      	; 0xa7e <i2c_write+0x40>
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	08 95       	ret
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	08 95       	ret

00000a80 <i2c_readAck>:
     a80:	84 ec       	ldi	r24, 0xC4	; 196
     a82:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     a86:	8f ef       	ldi	r24, 0xFF	; 255
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	ec eb       	ldi	r30, 0xBC	; 188
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	20 81       	ld	r18, Z
     a94:	22 23       	and	r18, r18
     a96:	2c f0       	brlt	.+10     	; 0xaa2 <i2c_readAck+0x22>
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	a1 09       	sbc	r26, r1
     a9c:	b1 09       	sbc	r27, r1
     a9e:	c8 f7       	brcc	.-14     	; 0xa92 <i2c_readAck+0x12>
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <i2c_readAck+0x2a>
     aa2:	89 2b       	or	r24, r25
     aa4:	8a 2b       	or	r24, r26
     aa6:	8b 2b       	or	r24, r27
     aa8:	19 f0       	breq	.+6      	; 0xab0 <i2c_readAck+0x30>
     aaa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     aae:	08 95       	ret
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	08 95       	ret

00000ab4 <i2c_readNak>:
     ab4:	84 e8       	ldi	r24, 0x84	; 132
     ab6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     aba:	8f ef       	ldi	r24, 0xFF	; 255
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	a0 e0       	ldi	r26, 0x00	; 0
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
     ac2:	ec eb       	ldi	r30, 0xBC	; 188
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	20 81       	ld	r18, Z
     ac8:	22 23       	and	r18, r18
     aca:	2c f0       	brlt	.+10     	; 0xad6 <i2c_readNak+0x22>
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	a1 09       	sbc	r26, r1
     ad0:	b1 09       	sbc	r27, r1
     ad2:	c8 f7       	brcc	.-14     	; 0xac6 <i2c_readNak+0x12>
     ad4:	04 c0       	rjmp	.+8      	; 0xade <i2c_readNak+0x2a>
     ad6:	89 2b       	or	r24, r25
     ad8:	8a 2b       	or	r24, r26
     ada:	8b 2b       	or	r24, r27
     adc:	19 f0       	breq	.+6      	; 0xae4 <i2c_readNak+0x30>
     ade:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     ae2:	08 95       	ret
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	08 95       	ret

00000ae8 <USART_Init>:
     ae8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     aec:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     af0:	88 e0       	ldi	r24, 0x08	; 8
     af2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     af6:	8e e0       	ldi	r24, 0x0E	; 14
     af8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     afc:	08 95       	ret

00000afe <__subsf3>:
     afe:	50 58       	subi	r21, 0x80	; 128

00000b00 <__addsf3>:
     b00:	bb 27       	eor	r27, r27
     b02:	aa 27       	eor	r26, r26
     b04:	0e d0       	rcall	.+28     	; 0xb22 <__addsf3x>
     b06:	e0 c0       	rjmp	.+448    	; 0xcc8 <__fp_round>
     b08:	d1 d0       	rcall	.+418    	; 0xcac <__fp_pscA>
     b0a:	30 f0       	brcs	.+12     	; 0xb18 <__addsf3+0x18>
     b0c:	d6 d0       	rcall	.+428    	; 0xcba <__fp_pscB>
     b0e:	20 f0       	brcs	.+8      	; 0xb18 <__addsf3+0x18>
     b10:	31 f4       	brne	.+12     	; 0xb1e <__addsf3+0x1e>
     b12:	9f 3f       	cpi	r25, 0xFF	; 255
     b14:	11 f4       	brne	.+4      	; 0xb1a <__addsf3+0x1a>
     b16:	1e f4       	brtc	.+6      	; 0xb1e <__addsf3+0x1e>
     b18:	c6 c0       	rjmp	.+396    	; 0xca6 <__fp_nan>
     b1a:	0e f4       	brtc	.+2      	; 0xb1e <__addsf3+0x1e>
     b1c:	e0 95       	com	r30
     b1e:	e7 fb       	bst	r30, 7
     b20:	bc c0       	rjmp	.+376    	; 0xc9a <__fp_inf>

00000b22 <__addsf3x>:
     b22:	e9 2f       	mov	r30, r25
     b24:	e2 d0       	rcall	.+452    	; 0xcea <__fp_split3>
     b26:	80 f3       	brcs	.-32     	; 0xb08 <__addsf3+0x8>
     b28:	ba 17       	cp	r27, r26
     b2a:	62 07       	cpc	r22, r18
     b2c:	73 07       	cpc	r23, r19
     b2e:	84 07       	cpc	r24, r20
     b30:	95 07       	cpc	r25, r21
     b32:	18 f0       	brcs	.+6      	; 0xb3a <__addsf3x+0x18>
     b34:	71 f4       	brne	.+28     	; 0xb52 <__addsf3x+0x30>
     b36:	9e f5       	brtc	.+102    	; 0xb9e <__addsf3x+0x7c>
     b38:	fa c0       	rjmp	.+500    	; 0xd2e <__fp_zero>
     b3a:	0e f4       	brtc	.+2      	; 0xb3e <__addsf3x+0x1c>
     b3c:	e0 95       	com	r30
     b3e:	0b 2e       	mov	r0, r27
     b40:	ba 2f       	mov	r27, r26
     b42:	a0 2d       	mov	r26, r0
     b44:	0b 01       	movw	r0, r22
     b46:	b9 01       	movw	r22, r18
     b48:	90 01       	movw	r18, r0
     b4a:	0c 01       	movw	r0, r24
     b4c:	ca 01       	movw	r24, r20
     b4e:	a0 01       	movw	r20, r0
     b50:	11 24       	eor	r1, r1
     b52:	ff 27       	eor	r31, r31
     b54:	59 1b       	sub	r21, r25
     b56:	99 f0       	breq	.+38     	; 0xb7e <__addsf3x+0x5c>
     b58:	59 3f       	cpi	r21, 0xF9	; 249
     b5a:	50 f4       	brcc	.+20     	; 0xb70 <__addsf3x+0x4e>
     b5c:	50 3e       	cpi	r21, 0xE0	; 224
     b5e:	68 f1       	brcs	.+90     	; 0xbba <__addsf3x+0x98>
     b60:	1a 16       	cp	r1, r26
     b62:	f0 40       	sbci	r31, 0x00	; 0
     b64:	a2 2f       	mov	r26, r18
     b66:	23 2f       	mov	r18, r19
     b68:	34 2f       	mov	r19, r20
     b6a:	44 27       	eor	r20, r20
     b6c:	58 5f       	subi	r21, 0xF8	; 248
     b6e:	f3 cf       	rjmp	.-26     	; 0xb56 <__addsf3x+0x34>
     b70:	46 95       	lsr	r20
     b72:	37 95       	ror	r19
     b74:	27 95       	ror	r18
     b76:	a7 95       	ror	r26
     b78:	f0 40       	sbci	r31, 0x00	; 0
     b7a:	53 95       	inc	r21
     b7c:	c9 f7       	brne	.-14     	; 0xb70 <__addsf3x+0x4e>
     b7e:	7e f4       	brtc	.+30     	; 0xb9e <__addsf3x+0x7c>
     b80:	1f 16       	cp	r1, r31
     b82:	ba 0b       	sbc	r27, r26
     b84:	62 0b       	sbc	r22, r18
     b86:	73 0b       	sbc	r23, r19
     b88:	84 0b       	sbc	r24, r20
     b8a:	ba f0       	brmi	.+46     	; 0xbba <__addsf3x+0x98>
     b8c:	91 50       	subi	r25, 0x01	; 1
     b8e:	a1 f0       	breq	.+40     	; 0xbb8 <__addsf3x+0x96>
     b90:	ff 0f       	add	r31, r31
     b92:	bb 1f       	adc	r27, r27
     b94:	66 1f       	adc	r22, r22
     b96:	77 1f       	adc	r23, r23
     b98:	88 1f       	adc	r24, r24
     b9a:	c2 f7       	brpl	.-16     	; 0xb8c <__addsf3x+0x6a>
     b9c:	0e c0       	rjmp	.+28     	; 0xbba <__addsf3x+0x98>
     b9e:	ba 0f       	add	r27, r26
     ba0:	62 1f       	adc	r22, r18
     ba2:	73 1f       	adc	r23, r19
     ba4:	84 1f       	adc	r24, r20
     ba6:	48 f4       	brcc	.+18     	; 0xbba <__addsf3x+0x98>
     ba8:	87 95       	ror	r24
     baa:	77 95       	ror	r23
     bac:	67 95       	ror	r22
     bae:	b7 95       	ror	r27
     bb0:	f7 95       	ror	r31
     bb2:	9e 3f       	cpi	r25, 0xFE	; 254
     bb4:	08 f0       	brcs	.+2      	; 0xbb8 <__addsf3x+0x96>
     bb6:	b3 cf       	rjmp	.-154    	; 0xb1e <__addsf3+0x1e>
     bb8:	93 95       	inc	r25
     bba:	88 0f       	add	r24, r24
     bbc:	08 f0       	brcs	.+2      	; 0xbc0 <__addsf3x+0x9e>
     bbe:	99 27       	eor	r25, r25
     bc0:	ee 0f       	add	r30, r30
     bc2:	97 95       	ror	r25
     bc4:	87 95       	ror	r24
     bc6:	08 95       	ret

00000bc8 <__fixunssfsi>:
     bc8:	98 d0       	rcall	.+304    	; 0xcfa <__fp_splitA>
     bca:	88 f0       	brcs	.+34     	; 0xbee <__fixunssfsi+0x26>
     bcc:	9f 57       	subi	r25, 0x7F	; 127
     bce:	90 f0       	brcs	.+36     	; 0xbf4 <__fixunssfsi+0x2c>
     bd0:	b9 2f       	mov	r27, r25
     bd2:	99 27       	eor	r25, r25
     bd4:	b7 51       	subi	r27, 0x17	; 23
     bd6:	a0 f0       	brcs	.+40     	; 0xc00 <__fixunssfsi+0x38>
     bd8:	d1 f0       	breq	.+52     	; 0xc0e <__fixunssfsi+0x46>
     bda:	66 0f       	add	r22, r22
     bdc:	77 1f       	adc	r23, r23
     bde:	88 1f       	adc	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	1a f0       	brmi	.+6      	; 0xbea <__fixunssfsi+0x22>
     be4:	ba 95       	dec	r27
     be6:	c9 f7       	brne	.-14     	; 0xbda <__fixunssfsi+0x12>
     be8:	12 c0       	rjmp	.+36     	; 0xc0e <__fixunssfsi+0x46>
     bea:	b1 30       	cpi	r27, 0x01	; 1
     bec:	81 f0       	breq	.+32     	; 0xc0e <__fixunssfsi+0x46>
     bee:	9f d0       	rcall	.+318    	; 0xd2e <__fp_zero>
     bf0:	b1 e0       	ldi	r27, 0x01	; 1
     bf2:	08 95       	ret
     bf4:	9c c0       	rjmp	.+312    	; 0xd2e <__fp_zero>
     bf6:	67 2f       	mov	r22, r23
     bf8:	78 2f       	mov	r23, r24
     bfa:	88 27       	eor	r24, r24
     bfc:	b8 5f       	subi	r27, 0xF8	; 248
     bfe:	39 f0       	breq	.+14     	; 0xc0e <__fixunssfsi+0x46>
     c00:	b9 3f       	cpi	r27, 0xF9	; 249
     c02:	cc f3       	brlt	.-14     	; 0xbf6 <__fixunssfsi+0x2e>
     c04:	86 95       	lsr	r24
     c06:	77 95       	ror	r23
     c08:	67 95       	ror	r22
     c0a:	b3 95       	inc	r27
     c0c:	d9 f7       	brne	.-10     	; 0xc04 <__fixunssfsi+0x3c>
     c0e:	3e f4       	brtc	.+14     	; 0xc1e <__fixunssfsi+0x56>
     c10:	90 95       	com	r25
     c12:	80 95       	com	r24
     c14:	70 95       	com	r23
     c16:	61 95       	neg	r22
     c18:	7f 4f       	sbci	r23, 0xFF	; 255
     c1a:	8f 4f       	sbci	r24, 0xFF	; 255
     c1c:	9f 4f       	sbci	r25, 0xFF	; 255
     c1e:	08 95       	ret

00000c20 <__floatunsisf>:
     c20:	e8 94       	clt
     c22:	09 c0       	rjmp	.+18     	; 0xc36 <__floatsisf+0x12>

00000c24 <__floatsisf>:
     c24:	97 fb       	bst	r25, 7
     c26:	3e f4       	brtc	.+14     	; 0xc36 <__floatsisf+0x12>
     c28:	90 95       	com	r25
     c2a:	80 95       	com	r24
     c2c:	70 95       	com	r23
     c2e:	61 95       	neg	r22
     c30:	7f 4f       	sbci	r23, 0xFF	; 255
     c32:	8f 4f       	sbci	r24, 0xFF	; 255
     c34:	9f 4f       	sbci	r25, 0xFF	; 255
     c36:	99 23       	and	r25, r25
     c38:	a9 f0       	breq	.+42     	; 0xc64 <__floatsisf+0x40>
     c3a:	f9 2f       	mov	r31, r25
     c3c:	96 e9       	ldi	r25, 0x96	; 150
     c3e:	bb 27       	eor	r27, r27
     c40:	93 95       	inc	r25
     c42:	f6 95       	lsr	r31
     c44:	87 95       	ror	r24
     c46:	77 95       	ror	r23
     c48:	67 95       	ror	r22
     c4a:	b7 95       	ror	r27
     c4c:	f1 11       	cpse	r31, r1
     c4e:	f8 cf       	rjmp	.-16     	; 0xc40 <__floatsisf+0x1c>
     c50:	fa f4       	brpl	.+62     	; 0xc90 <__floatsisf+0x6c>
     c52:	bb 0f       	add	r27, r27
     c54:	11 f4       	brne	.+4      	; 0xc5a <__floatsisf+0x36>
     c56:	60 ff       	sbrs	r22, 0
     c58:	1b c0       	rjmp	.+54     	; 0xc90 <__floatsisf+0x6c>
     c5a:	6f 5f       	subi	r22, 0xFF	; 255
     c5c:	7f 4f       	sbci	r23, 0xFF	; 255
     c5e:	8f 4f       	sbci	r24, 0xFF	; 255
     c60:	9f 4f       	sbci	r25, 0xFF	; 255
     c62:	16 c0       	rjmp	.+44     	; 0xc90 <__floatsisf+0x6c>
     c64:	88 23       	and	r24, r24
     c66:	11 f0       	breq	.+4      	; 0xc6c <__floatsisf+0x48>
     c68:	96 e9       	ldi	r25, 0x96	; 150
     c6a:	11 c0       	rjmp	.+34     	; 0xc8e <__floatsisf+0x6a>
     c6c:	77 23       	and	r23, r23
     c6e:	21 f0       	breq	.+8      	; 0xc78 <__floatsisf+0x54>
     c70:	9e e8       	ldi	r25, 0x8E	; 142
     c72:	87 2f       	mov	r24, r23
     c74:	76 2f       	mov	r23, r22
     c76:	05 c0       	rjmp	.+10     	; 0xc82 <__floatsisf+0x5e>
     c78:	66 23       	and	r22, r22
     c7a:	71 f0       	breq	.+28     	; 0xc98 <__floatsisf+0x74>
     c7c:	96 e8       	ldi	r25, 0x86	; 134
     c7e:	86 2f       	mov	r24, r22
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	2a f0       	brmi	.+10     	; 0xc90 <__floatsisf+0x6c>
     c86:	9a 95       	dec	r25
     c88:	66 0f       	add	r22, r22
     c8a:	77 1f       	adc	r23, r23
     c8c:	88 1f       	adc	r24, r24
     c8e:	da f7       	brpl	.-10     	; 0xc86 <__floatsisf+0x62>
     c90:	88 0f       	add	r24, r24
     c92:	96 95       	lsr	r25
     c94:	87 95       	ror	r24
     c96:	97 f9       	bld	r25, 7
     c98:	08 95       	ret

00000c9a <__fp_inf>:
     c9a:	97 f9       	bld	r25, 7
     c9c:	9f 67       	ori	r25, 0x7F	; 127
     c9e:	80 e8       	ldi	r24, 0x80	; 128
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	08 95       	ret

00000ca6 <__fp_nan>:
     ca6:	9f ef       	ldi	r25, 0xFF	; 255
     ca8:	80 ec       	ldi	r24, 0xC0	; 192
     caa:	08 95       	ret

00000cac <__fp_pscA>:
     cac:	00 24       	eor	r0, r0
     cae:	0a 94       	dec	r0
     cb0:	16 16       	cp	r1, r22
     cb2:	17 06       	cpc	r1, r23
     cb4:	18 06       	cpc	r1, r24
     cb6:	09 06       	cpc	r0, r25
     cb8:	08 95       	ret

00000cba <__fp_pscB>:
     cba:	00 24       	eor	r0, r0
     cbc:	0a 94       	dec	r0
     cbe:	12 16       	cp	r1, r18
     cc0:	13 06       	cpc	r1, r19
     cc2:	14 06       	cpc	r1, r20
     cc4:	05 06       	cpc	r0, r21
     cc6:	08 95       	ret

00000cc8 <__fp_round>:
     cc8:	09 2e       	mov	r0, r25
     cca:	03 94       	inc	r0
     ccc:	00 0c       	add	r0, r0
     cce:	11 f4       	brne	.+4      	; 0xcd4 <__fp_round+0xc>
     cd0:	88 23       	and	r24, r24
     cd2:	52 f0       	brmi	.+20     	; 0xce8 <__fp_round+0x20>
     cd4:	bb 0f       	add	r27, r27
     cd6:	40 f4       	brcc	.+16     	; 0xce8 <__fp_round+0x20>
     cd8:	bf 2b       	or	r27, r31
     cda:	11 f4       	brne	.+4      	; 0xce0 <__fp_round+0x18>
     cdc:	60 ff       	sbrs	r22, 0
     cde:	04 c0       	rjmp	.+8      	; 0xce8 <__fp_round+0x20>
     ce0:	6f 5f       	subi	r22, 0xFF	; 255
     ce2:	7f 4f       	sbci	r23, 0xFF	; 255
     ce4:	8f 4f       	sbci	r24, 0xFF	; 255
     ce6:	9f 4f       	sbci	r25, 0xFF	; 255
     ce8:	08 95       	ret

00000cea <__fp_split3>:
     cea:	57 fd       	sbrc	r21, 7
     cec:	90 58       	subi	r25, 0x80	; 128
     cee:	44 0f       	add	r20, r20
     cf0:	55 1f       	adc	r21, r21
     cf2:	59 f0       	breq	.+22     	; 0xd0a <__fp_splitA+0x10>
     cf4:	5f 3f       	cpi	r21, 0xFF	; 255
     cf6:	71 f0       	breq	.+28     	; 0xd14 <__fp_splitA+0x1a>
     cf8:	47 95       	ror	r20

00000cfa <__fp_splitA>:
     cfa:	88 0f       	add	r24, r24
     cfc:	97 fb       	bst	r25, 7
     cfe:	99 1f       	adc	r25, r25
     d00:	61 f0       	breq	.+24     	; 0xd1a <__fp_splitA+0x20>
     d02:	9f 3f       	cpi	r25, 0xFF	; 255
     d04:	79 f0       	breq	.+30     	; 0xd24 <__fp_splitA+0x2a>
     d06:	87 95       	ror	r24
     d08:	08 95       	ret
     d0a:	12 16       	cp	r1, r18
     d0c:	13 06       	cpc	r1, r19
     d0e:	14 06       	cpc	r1, r20
     d10:	55 1f       	adc	r21, r21
     d12:	f2 cf       	rjmp	.-28     	; 0xcf8 <__fp_split3+0xe>
     d14:	46 95       	lsr	r20
     d16:	f1 df       	rcall	.-30     	; 0xcfa <__fp_splitA>
     d18:	08 c0       	rjmp	.+16     	; 0xd2a <__fp_splitA+0x30>
     d1a:	16 16       	cp	r1, r22
     d1c:	17 06       	cpc	r1, r23
     d1e:	18 06       	cpc	r1, r24
     d20:	99 1f       	adc	r25, r25
     d22:	f1 cf       	rjmp	.-30     	; 0xd06 <__fp_splitA+0xc>
     d24:	86 95       	lsr	r24
     d26:	71 05       	cpc	r23, r1
     d28:	61 05       	cpc	r22, r1
     d2a:	08 94       	sec
     d2c:	08 95       	ret

00000d2e <__fp_zero>:
     d2e:	e8 94       	clt

00000d30 <__fp_szero>:
     d30:	bb 27       	eor	r27, r27
     d32:	66 27       	eor	r22, r22
     d34:	77 27       	eor	r23, r23
     d36:	cb 01       	movw	r24, r22
     d38:	97 f9       	bld	r25, 7
     d3a:	08 95       	ret

00000d3c <__mulsf3>:
     d3c:	0b d0       	rcall	.+22     	; 0xd54 <__mulsf3x>
     d3e:	c4 cf       	rjmp	.-120    	; 0xcc8 <__fp_round>
     d40:	b5 df       	rcall	.-150    	; 0xcac <__fp_pscA>
     d42:	28 f0       	brcs	.+10     	; 0xd4e <__mulsf3+0x12>
     d44:	ba df       	rcall	.-140    	; 0xcba <__fp_pscB>
     d46:	18 f0       	brcs	.+6      	; 0xd4e <__mulsf3+0x12>
     d48:	95 23       	and	r25, r21
     d4a:	09 f0       	breq	.+2      	; 0xd4e <__mulsf3+0x12>
     d4c:	a6 cf       	rjmp	.-180    	; 0xc9a <__fp_inf>
     d4e:	ab cf       	rjmp	.-170    	; 0xca6 <__fp_nan>
     d50:	11 24       	eor	r1, r1
     d52:	ee cf       	rjmp	.-36     	; 0xd30 <__fp_szero>

00000d54 <__mulsf3x>:
     d54:	ca df       	rcall	.-108    	; 0xcea <__fp_split3>
     d56:	a0 f3       	brcs	.-24     	; 0xd40 <__mulsf3+0x4>

00000d58 <__mulsf3_pse>:
     d58:	95 9f       	mul	r25, r21
     d5a:	d1 f3       	breq	.-12     	; 0xd50 <__mulsf3+0x14>
     d5c:	95 0f       	add	r25, r21
     d5e:	50 e0       	ldi	r21, 0x00	; 0
     d60:	55 1f       	adc	r21, r21
     d62:	62 9f       	mul	r22, r18
     d64:	f0 01       	movw	r30, r0
     d66:	72 9f       	mul	r23, r18
     d68:	bb 27       	eor	r27, r27
     d6a:	f0 0d       	add	r31, r0
     d6c:	b1 1d       	adc	r27, r1
     d6e:	63 9f       	mul	r22, r19
     d70:	aa 27       	eor	r26, r26
     d72:	f0 0d       	add	r31, r0
     d74:	b1 1d       	adc	r27, r1
     d76:	aa 1f       	adc	r26, r26
     d78:	64 9f       	mul	r22, r20
     d7a:	66 27       	eor	r22, r22
     d7c:	b0 0d       	add	r27, r0
     d7e:	a1 1d       	adc	r26, r1
     d80:	66 1f       	adc	r22, r22
     d82:	82 9f       	mul	r24, r18
     d84:	22 27       	eor	r18, r18
     d86:	b0 0d       	add	r27, r0
     d88:	a1 1d       	adc	r26, r1
     d8a:	62 1f       	adc	r22, r18
     d8c:	73 9f       	mul	r23, r19
     d8e:	b0 0d       	add	r27, r0
     d90:	a1 1d       	adc	r26, r1
     d92:	62 1f       	adc	r22, r18
     d94:	83 9f       	mul	r24, r19
     d96:	a0 0d       	add	r26, r0
     d98:	61 1d       	adc	r22, r1
     d9a:	22 1f       	adc	r18, r18
     d9c:	74 9f       	mul	r23, r20
     d9e:	33 27       	eor	r19, r19
     da0:	a0 0d       	add	r26, r0
     da2:	61 1d       	adc	r22, r1
     da4:	23 1f       	adc	r18, r19
     da6:	84 9f       	mul	r24, r20
     da8:	60 0d       	add	r22, r0
     daa:	21 1d       	adc	r18, r1
     dac:	82 2f       	mov	r24, r18
     dae:	76 2f       	mov	r23, r22
     db0:	6a 2f       	mov	r22, r26
     db2:	11 24       	eor	r1, r1
     db4:	9f 57       	subi	r25, 0x7F	; 127
     db6:	50 40       	sbci	r21, 0x00	; 0
     db8:	8a f0       	brmi	.+34     	; 0xddc <__mulsf3_pse+0x84>
     dba:	e1 f0       	breq	.+56     	; 0xdf4 <__mulsf3_pse+0x9c>
     dbc:	88 23       	and	r24, r24
     dbe:	4a f0       	brmi	.+18     	; 0xdd2 <__mulsf3_pse+0x7a>
     dc0:	ee 0f       	add	r30, r30
     dc2:	ff 1f       	adc	r31, r31
     dc4:	bb 1f       	adc	r27, r27
     dc6:	66 1f       	adc	r22, r22
     dc8:	77 1f       	adc	r23, r23
     dca:	88 1f       	adc	r24, r24
     dcc:	91 50       	subi	r25, 0x01	; 1
     dce:	50 40       	sbci	r21, 0x00	; 0
     dd0:	a9 f7       	brne	.-22     	; 0xdbc <__mulsf3_pse+0x64>
     dd2:	9e 3f       	cpi	r25, 0xFE	; 254
     dd4:	51 05       	cpc	r21, r1
     dd6:	70 f0       	brcs	.+28     	; 0xdf4 <__mulsf3_pse+0x9c>
     dd8:	60 cf       	rjmp	.-320    	; 0xc9a <__fp_inf>
     dda:	aa cf       	rjmp	.-172    	; 0xd30 <__fp_szero>
     ddc:	5f 3f       	cpi	r21, 0xFF	; 255
     dde:	ec f3       	brlt	.-6      	; 0xdda <__mulsf3_pse+0x82>
     de0:	98 3e       	cpi	r25, 0xE8	; 232
     de2:	dc f3       	brlt	.-10     	; 0xdda <__mulsf3_pse+0x82>
     de4:	86 95       	lsr	r24
     de6:	77 95       	ror	r23
     de8:	67 95       	ror	r22
     dea:	b7 95       	ror	r27
     dec:	f7 95       	ror	r31
     dee:	e7 95       	ror	r30
     df0:	9f 5f       	subi	r25, 0xFF	; 255
     df2:	c1 f7       	brne	.-16     	; 0xde4 <__mulsf3_pse+0x8c>
     df4:	fe 2b       	or	r31, r30
     df6:	88 0f       	add	r24, r24
     df8:	91 1d       	adc	r25, r1
     dfa:	96 95       	lsr	r25
     dfc:	87 95       	ror	r24
     dfe:	97 f9       	bld	r25, 7
     e00:	08 95       	ret

00000e02 <__divmodhi4>:
     e02:	97 fb       	bst	r25, 7
     e04:	07 2e       	mov	r0, r23
     e06:	16 f4       	brtc	.+4      	; 0xe0c <__divmodhi4+0xa>
     e08:	00 94       	com	r0
     e0a:	06 d0       	rcall	.+12     	; 0xe18 <__divmodhi4_neg1>
     e0c:	77 fd       	sbrc	r23, 7
     e0e:	08 d0       	rcall	.+16     	; 0xe20 <__divmodhi4_neg2>
     e10:	27 d0       	rcall	.+78     	; 0xe60 <__udivmodhi4>
     e12:	07 fc       	sbrc	r0, 7
     e14:	05 d0       	rcall	.+10     	; 0xe20 <__divmodhi4_neg2>
     e16:	3e f4       	brtc	.+14     	; 0xe26 <__divmodhi4_exit>

00000e18 <__divmodhi4_neg1>:
     e18:	90 95       	com	r25
     e1a:	81 95       	neg	r24
     e1c:	9f 4f       	sbci	r25, 0xFF	; 255
     e1e:	08 95       	ret

00000e20 <__divmodhi4_neg2>:
     e20:	70 95       	com	r23
     e22:	61 95       	neg	r22
     e24:	7f 4f       	sbci	r23, 0xFF	; 255

00000e26 <__divmodhi4_exit>:
     e26:	08 95       	ret

00000e28 <__divmodsi4>:
     e28:	05 2e       	mov	r0, r21
     e2a:	97 fb       	bst	r25, 7
     e2c:	16 f4       	brtc	.+4      	; 0xe32 <__divmodsi4+0xa>
     e2e:	00 94       	com	r0
     e30:	0f d0       	rcall	.+30     	; 0xe50 <__negsi2>
     e32:	57 fd       	sbrc	r21, 7
     e34:	05 d0       	rcall	.+10     	; 0xe40 <__divmodsi4_neg2>
     e36:	28 d0       	rcall	.+80     	; 0xe88 <__udivmodsi4>
     e38:	07 fc       	sbrc	r0, 7
     e3a:	02 d0       	rcall	.+4      	; 0xe40 <__divmodsi4_neg2>
     e3c:	46 f4       	brtc	.+16     	; 0xe4e <__divmodsi4_exit>
     e3e:	08 c0       	rjmp	.+16     	; 0xe50 <__negsi2>

00000e40 <__divmodsi4_neg2>:
     e40:	50 95       	com	r21
     e42:	40 95       	com	r20
     e44:	30 95       	com	r19
     e46:	21 95       	neg	r18
     e48:	3f 4f       	sbci	r19, 0xFF	; 255
     e4a:	4f 4f       	sbci	r20, 0xFF	; 255
     e4c:	5f 4f       	sbci	r21, 0xFF	; 255

00000e4e <__divmodsi4_exit>:
     e4e:	08 95       	ret

00000e50 <__negsi2>:
     e50:	90 95       	com	r25
     e52:	80 95       	com	r24
     e54:	70 95       	com	r23
     e56:	61 95       	neg	r22
     e58:	7f 4f       	sbci	r23, 0xFF	; 255
     e5a:	8f 4f       	sbci	r24, 0xFF	; 255
     e5c:	9f 4f       	sbci	r25, 0xFF	; 255
     e5e:	08 95       	ret

00000e60 <__udivmodhi4>:
     e60:	aa 1b       	sub	r26, r26
     e62:	bb 1b       	sub	r27, r27
     e64:	51 e1       	ldi	r21, 0x11	; 17
     e66:	07 c0       	rjmp	.+14     	; 0xe76 <__udivmodhi4_ep>

00000e68 <__udivmodhi4_loop>:
     e68:	aa 1f       	adc	r26, r26
     e6a:	bb 1f       	adc	r27, r27
     e6c:	a6 17       	cp	r26, r22
     e6e:	b7 07       	cpc	r27, r23
     e70:	10 f0       	brcs	.+4      	; 0xe76 <__udivmodhi4_ep>
     e72:	a6 1b       	sub	r26, r22
     e74:	b7 0b       	sbc	r27, r23

00000e76 <__udivmodhi4_ep>:
     e76:	88 1f       	adc	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	5a 95       	dec	r21
     e7c:	a9 f7       	brne	.-22     	; 0xe68 <__udivmodhi4_loop>
     e7e:	80 95       	com	r24
     e80:	90 95       	com	r25
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	08 95       	ret

00000e88 <__udivmodsi4>:
     e88:	a1 e2       	ldi	r26, 0x21	; 33
     e8a:	1a 2e       	mov	r1, r26
     e8c:	aa 1b       	sub	r26, r26
     e8e:	bb 1b       	sub	r27, r27
     e90:	fd 01       	movw	r30, r26
     e92:	0d c0       	rjmp	.+26     	; 0xeae <__udivmodsi4_ep>

00000e94 <__udivmodsi4_loop>:
     e94:	aa 1f       	adc	r26, r26
     e96:	bb 1f       	adc	r27, r27
     e98:	ee 1f       	adc	r30, r30
     e9a:	ff 1f       	adc	r31, r31
     e9c:	a2 17       	cp	r26, r18
     e9e:	b3 07       	cpc	r27, r19
     ea0:	e4 07       	cpc	r30, r20
     ea2:	f5 07       	cpc	r31, r21
     ea4:	20 f0       	brcs	.+8      	; 0xeae <__udivmodsi4_ep>
     ea6:	a2 1b       	sub	r26, r18
     ea8:	b3 0b       	sbc	r27, r19
     eaa:	e4 0b       	sbc	r30, r20
     eac:	f5 0b       	sbc	r31, r21

00000eae <__udivmodsi4_ep>:
     eae:	66 1f       	adc	r22, r22
     eb0:	77 1f       	adc	r23, r23
     eb2:	88 1f       	adc	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	1a 94       	dec	r1
     eb8:	69 f7       	brne	.-38     	; 0xe94 <__udivmodsi4_loop>
     eba:	60 95       	com	r22
     ebc:	70 95       	com	r23
     ebe:	80 95       	com	r24
     ec0:	90 95       	com	r25
     ec2:	9b 01       	movw	r18, r22
     ec4:	ac 01       	movw	r20, r24
     ec6:	bd 01       	movw	r22, r26
     ec8:	cf 01       	movw	r24, r30
     eca:	08 95       	ret

00000ecc <__itoa_ncheck>:
     ecc:	bb 27       	eor	r27, r27
     ece:	4a 30       	cpi	r20, 0x0A	; 10
     ed0:	31 f4       	brne	.+12     	; 0xede <__itoa_ncheck+0x12>
     ed2:	99 23       	and	r25, r25
     ed4:	22 f4       	brpl	.+8      	; 0xede <__itoa_ncheck+0x12>
     ed6:	bd e2       	ldi	r27, 0x2D	; 45
     ed8:	90 95       	com	r25
     eda:	81 95       	neg	r24
     edc:	9f 4f       	sbci	r25, 0xFF	; 255
     ede:	01 c0       	rjmp	.+2      	; 0xee2 <__utoa_common>

00000ee0 <__utoa_ncheck>:
     ee0:	bb 27       	eor	r27, r27

00000ee2 <__utoa_common>:
     ee2:	fb 01       	movw	r30, r22
     ee4:	55 27       	eor	r21, r21
     ee6:	aa 27       	eor	r26, r26
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	aa 1f       	adc	r26, r26
     eee:	a4 17       	cp	r26, r20
     ef0:	10 f0       	brcs	.+4      	; 0xef6 <__utoa_common+0x14>
     ef2:	a4 1b       	sub	r26, r20
     ef4:	83 95       	inc	r24
     ef6:	50 51       	subi	r21, 0x10	; 16
     ef8:	b9 f7       	brne	.-18     	; 0xee8 <__utoa_common+0x6>
     efa:	a0 5d       	subi	r26, 0xD0	; 208
     efc:	aa 33       	cpi	r26, 0x3A	; 58
     efe:	08 f0       	brcs	.+2      	; 0xf02 <__utoa_common+0x20>
     f00:	a9 5d       	subi	r26, 0xD9	; 217
     f02:	a1 93       	st	Z+, r26
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	79 f7       	brne	.-34     	; 0xee6 <__utoa_common+0x4>
     f08:	b1 11       	cpse	r27, r1
     f0a:	b1 93       	st	Z+, r27
     f0c:	11 92       	st	Z+, r1
     f0e:	cb 01       	movw	r24, r22
     f10:	e2 c3       	rjmp	.+1988   	; 0x16d6 <strrev>

00000f12 <fdevopen>:
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	31 f4       	brne	.+12     	; 0xf2a <fdevopen+0x18>
     f1e:	61 15       	cp	r22, r1
     f20:	71 05       	cpc	r23, r1
     f22:	19 f4       	brne	.+6      	; 0xf2a <fdevopen+0x18>
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	39 c0       	rjmp	.+114    	; 0xf9c <fdevopen+0x8a>
     f2a:	8b 01       	movw	r16, r22
     f2c:	ec 01       	movw	r28, r24
     f2e:	6e e0       	ldi	r22, 0x0E	; 14
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	77 d2       	rcall	.+1262   	; 0x1426 <calloc>
     f38:	fc 01       	movw	r30, r24
     f3a:	89 2b       	or	r24, r25
     f3c:	99 f3       	breq	.-26     	; 0xf24 <fdevopen+0x12>
     f3e:	80 e8       	ldi	r24, 0x80	; 128
     f40:	83 83       	std	Z+3, r24	; 0x03
     f42:	01 15       	cp	r16, r1
     f44:	11 05       	cpc	r17, r1
     f46:	71 f0       	breq	.+28     	; 0xf64 <fdevopen+0x52>
     f48:	13 87       	std	Z+11, r17	; 0x0b
     f4a:	02 87       	std	Z+10, r16	; 0x0a
     f4c:	81 e8       	ldi	r24, 0x81	; 129
     f4e:	83 83       	std	Z+3, r24	; 0x03
     f50:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <__iob>
     f54:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <__iob+0x1>
     f58:	89 2b       	or	r24, r25
     f5a:	21 f4       	brne	.+8      	; 0xf64 <fdevopen+0x52>
     f5c:	f0 93 5d 02 	sts	0x025D, r31	; 0x80025d <__iob+0x1>
     f60:	e0 93 5c 02 	sts	0x025C, r30	; 0x80025c <__iob>
     f64:	20 97       	sbiw	r28, 0x00	; 0
     f66:	c9 f0       	breq	.+50     	; 0xf9a <fdevopen+0x88>
     f68:	d1 87       	std	Z+9, r29	; 0x09
     f6a:	c0 87       	std	Z+8, r28	; 0x08
     f6c:	83 81       	ldd	r24, Z+3	; 0x03
     f6e:	82 60       	ori	r24, 0x02	; 2
     f70:	83 83       	std	Z+3, r24	; 0x03
     f72:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <__iob+0x2>
     f76:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <__iob+0x3>
     f7a:	89 2b       	or	r24, r25
     f7c:	71 f4       	brne	.+28     	; 0xf9a <fdevopen+0x88>
     f7e:	f0 93 5f 02 	sts	0x025F, r31	; 0x80025f <__iob+0x3>
     f82:	e0 93 5e 02 	sts	0x025E, r30	; 0x80025e <__iob+0x2>
     f86:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <__iob+0x4>
     f8a:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <__iob+0x5>
     f8e:	89 2b       	or	r24, r25
     f90:	21 f4       	brne	.+8      	; 0xf9a <fdevopen+0x88>
     f92:	f0 93 61 02 	sts	0x0261, r31	; 0x800261 <__iob+0x5>
     f96:	e0 93 60 02 	sts	0x0260, r30	; 0x800260 <__iob+0x4>
     f9a:	cf 01       	movw	r24, r30
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	08 95       	ret

00000fa6 <printf>:
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	ae 01       	movw	r20, r28
     fb0:	4a 5f       	subi	r20, 0xFA	; 250
     fb2:	5f 4f       	sbci	r21, 0xFF	; 255
     fb4:	fa 01       	movw	r30, r20
     fb6:	61 91       	ld	r22, Z+
     fb8:	71 91       	ld	r23, Z+
     fba:	af 01       	movw	r20, r30
     fbc:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <__iob+0x2>
     fc0:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <__iob+0x3>
     fc4:	33 d0       	rcall	.+102    	; 0x102c <vfprintf>
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	08 95       	ret

00000fcc <puts>:
     fcc:	0f 93       	push	r16
     fce:	1f 93       	push	r17
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <__iob+0x2>
     fd8:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <__iob+0x3>
     fdc:	23 81       	ldd	r18, Z+3	; 0x03
     fde:	21 ff       	sbrs	r18, 1
     fe0:	1b c0       	rjmp	.+54     	; 0x1018 <puts+0x4c>
     fe2:	8c 01       	movw	r16, r24
     fe4:	d0 e0       	ldi	r29, 0x00	; 0
     fe6:	c0 e0       	ldi	r28, 0x00	; 0
     fe8:	f8 01       	movw	r30, r16
     fea:	81 91       	ld	r24, Z+
     fec:	8f 01       	movw	r16, r30
     fee:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <__iob+0x2>
     ff2:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <__iob+0x3>
     ff6:	db 01       	movw	r26, r22
     ff8:	18 96       	adiw	r26, 0x08	; 8
     ffa:	ed 91       	ld	r30, X+
     ffc:	fc 91       	ld	r31, X
     ffe:	19 97       	sbiw	r26, 0x09	; 9
    1000:	88 23       	and	r24, r24
    1002:	31 f0       	breq	.+12     	; 0x1010 <puts+0x44>
    1004:	19 95       	eicall
    1006:	89 2b       	or	r24, r25
    1008:	79 f3       	breq	.-34     	; 0xfe8 <puts+0x1c>
    100a:	df ef       	ldi	r29, 0xFF	; 255
    100c:	cf ef       	ldi	r28, 0xFF	; 255
    100e:	ec cf       	rjmp	.-40     	; 0xfe8 <puts+0x1c>
    1010:	8a e0       	ldi	r24, 0x0A	; 10
    1012:	19 95       	eicall
    1014:	89 2b       	or	r24, r25
    1016:	19 f0       	breq	.+6      	; 0x101e <puts+0x52>
    1018:	8f ef       	ldi	r24, 0xFF	; 255
    101a:	9f ef       	ldi	r25, 0xFF	; 255
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <puts+0x56>
    101e:	8d 2f       	mov	r24, r29
    1020:	9c 2f       	mov	r25, r28
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	08 95       	ret

0000102c <vfprintf>:
    102c:	2f 92       	push	r2
    102e:	3f 92       	push	r3
    1030:	4f 92       	push	r4
    1032:	5f 92       	push	r5
    1034:	6f 92       	push	r6
    1036:	7f 92       	push	r7
    1038:	8f 92       	push	r8
    103a:	9f 92       	push	r9
    103c:	af 92       	push	r10
    103e:	bf 92       	push	r11
    1040:	cf 92       	push	r12
    1042:	df 92       	push	r13
    1044:	ef 92       	push	r14
    1046:	ff 92       	push	r15
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	2b 97       	sbiw	r28, 0x0b	; 11
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	6c 01       	movw	r12, r24
    1062:	7b 01       	movw	r14, r22
    1064:	8a 01       	movw	r16, r20
    1066:	fc 01       	movw	r30, r24
    1068:	17 82       	std	Z+7, r1	; 0x07
    106a:	16 82       	std	Z+6, r1	; 0x06
    106c:	83 81       	ldd	r24, Z+3	; 0x03
    106e:	81 ff       	sbrs	r24, 1
    1070:	bf c1       	rjmp	.+894    	; 0x13f0 <vfprintf+0x3c4>
    1072:	ce 01       	movw	r24, r28
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	3c 01       	movw	r6, r24
    1078:	f6 01       	movw	r30, r12
    107a:	93 81       	ldd	r25, Z+3	; 0x03
    107c:	f7 01       	movw	r30, r14
    107e:	93 fd       	sbrc	r25, 3
    1080:	85 91       	lpm	r24, Z+
    1082:	93 ff       	sbrs	r25, 3
    1084:	81 91       	ld	r24, Z+
    1086:	7f 01       	movw	r14, r30
    1088:	88 23       	and	r24, r24
    108a:	09 f4       	brne	.+2      	; 0x108e <vfprintf+0x62>
    108c:	ad c1       	rjmp	.+858    	; 0x13e8 <vfprintf+0x3bc>
    108e:	85 32       	cpi	r24, 0x25	; 37
    1090:	39 f4       	brne	.+14     	; 0x10a0 <vfprintf+0x74>
    1092:	93 fd       	sbrc	r25, 3
    1094:	85 91       	lpm	r24, Z+
    1096:	93 ff       	sbrs	r25, 3
    1098:	81 91       	ld	r24, Z+
    109a:	7f 01       	movw	r14, r30
    109c:	85 32       	cpi	r24, 0x25	; 37
    109e:	21 f4       	brne	.+8      	; 0x10a8 <vfprintf+0x7c>
    10a0:	b6 01       	movw	r22, r12
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	28 d3       	rcall	.+1616   	; 0x16f6 <fputc>
    10a6:	e8 cf       	rjmp	.-48     	; 0x1078 <vfprintf+0x4c>
    10a8:	91 2c       	mov	r9, r1
    10aa:	21 2c       	mov	r2, r1
    10ac:	31 2c       	mov	r3, r1
    10ae:	ff e1       	ldi	r31, 0x1F	; 31
    10b0:	f3 15       	cp	r31, r3
    10b2:	d8 f0       	brcs	.+54     	; 0x10ea <vfprintf+0xbe>
    10b4:	8b 32       	cpi	r24, 0x2B	; 43
    10b6:	79 f0       	breq	.+30     	; 0x10d6 <vfprintf+0xaa>
    10b8:	38 f4       	brcc	.+14     	; 0x10c8 <vfprintf+0x9c>
    10ba:	80 32       	cpi	r24, 0x20	; 32
    10bc:	79 f0       	breq	.+30     	; 0x10dc <vfprintf+0xb0>
    10be:	83 32       	cpi	r24, 0x23	; 35
    10c0:	a1 f4       	brne	.+40     	; 0x10ea <vfprintf+0xbe>
    10c2:	23 2d       	mov	r18, r3
    10c4:	20 61       	ori	r18, 0x10	; 16
    10c6:	1d c0       	rjmp	.+58     	; 0x1102 <vfprintf+0xd6>
    10c8:	8d 32       	cpi	r24, 0x2D	; 45
    10ca:	61 f0       	breq	.+24     	; 0x10e4 <vfprintf+0xb8>
    10cc:	80 33       	cpi	r24, 0x30	; 48
    10ce:	69 f4       	brne	.+26     	; 0x10ea <vfprintf+0xbe>
    10d0:	23 2d       	mov	r18, r3
    10d2:	21 60       	ori	r18, 0x01	; 1
    10d4:	16 c0       	rjmp	.+44     	; 0x1102 <vfprintf+0xd6>
    10d6:	83 2d       	mov	r24, r3
    10d8:	82 60       	ori	r24, 0x02	; 2
    10da:	38 2e       	mov	r3, r24
    10dc:	e3 2d       	mov	r30, r3
    10de:	e4 60       	ori	r30, 0x04	; 4
    10e0:	3e 2e       	mov	r3, r30
    10e2:	2a c0       	rjmp	.+84     	; 0x1138 <vfprintf+0x10c>
    10e4:	f3 2d       	mov	r31, r3
    10e6:	f8 60       	ori	r31, 0x08	; 8
    10e8:	1d c0       	rjmp	.+58     	; 0x1124 <vfprintf+0xf8>
    10ea:	37 fc       	sbrc	r3, 7
    10ec:	2d c0       	rjmp	.+90     	; 0x1148 <vfprintf+0x11c>
    10ee:	20 ed       	ldi	r18, 0xD0	; 208
    10f0:	28 0f       	add	r18, r24
    10f2:	2a 30       	cpi	r18, 0x0A	; 10
    10f4:	40 f0       	brcs	.+16     	; 0x1106 <vfprintf+0xda>
    10f6:	8e 32       	cpi	r24, 0x2E	; 46
    10f8:	b9 f4       	brne	.+46     	; 0x1128 <vfprintf+0xfc>
    10fa:	36 fc       	sbrc	r3, 6
    10fc:	75 c1       	rjmp	.+746    	; 0x13e8 <vfprintf+0x3bc>
    10fe:	23 2d       	mov	r18, r3
    1100:	20 64       	ori	r18, 0x40	; 64
    1102:	32 2e       	mov	r3, r18
    1104:	19 c0       	rjmp	.+50     	; 0x1138 <vfprintf+0x10c>
    1106:	36 fe       	sbrs	r3, 6
    1108:	06 c0       	rjmp	.+12     	; 0x1116 <vfprintf+0xea>
    110a:	8a e0       	ldi	r24, 0x0A	; 10
    110c:	98 9e       	mul	r9, r24
    110e:	20 0d       	add	r18, r0
    1110:	11 24       	eor	r1, r1
    1112:	92 2e       	mov	r9, r18
    1114:	11 c0       	rjmp	.+34     	; 0x1138 <vfprintf+0x10c>
    1116:	ea e0       	ldi	r30, 0x0A	; 10
    1118:	2e 9e       	mul	r2, r30
    111a:	20 0d       	add	r18, r0
    111c:	11 24       	eor	r1, r1
    111e:	22 2e       	mov	r2, r18
    1120:	f3 2d       	mov	r31, r3
    1122:	f0 62       	ori	r31, 0x20	; 32
    1124:	3f 2e       	mov	r3, r31
    1126:	08 c0       	rjmp	.+16     	; 0x1138 <vfprintf+0x10c>
    1128:	8c 36       	cpi	r24, 0x6C	; 108
    112a:	21 f4       	brne	.+8      	; 0x1134 <vfprintf+0x108>
    112c:	83 2d       	mov	r24, r3
    112e:	80 68       	ori	r24, 0x80	; 128
    1130:	38 2e       	mov	r3, r24
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <vfprintf+0x10c>
    1134:	88 36       	cpi	r24, 0x68	; 104
    1136:	41 f4       	brne	.+16     	; 0x1148 <vfprintf+0x11c>
    1138:	f7 01       	movw	r30, r14
    113a:	93 fd       	sbrc	r25, 3
    113c:	85 91       	lpm	r24, Z+
    113e:	93 ff       	sbrs	r25, 3
    1140:	81 91       	ld	r24, Z+
    1142:	7f 01       	movw	r14, r30
    1144:	81 11       	cpse	r24, r1
    1146:	b3 cf       	rjmp	.-154    	; 0x10ae <vfprintf+0x82>
    1148:	98 2f       	mov	r25, r24
    114a:	9f 7d       	andi	r25, 0xDF	; 223
    114c:	95 54       	subi	r25, 0x45	; 69
    114e:	93 30       	cpi	r25, 0x03	; 3
    1150:	28 f4       	brcc	.+10     	; 0x115c <vfprintf+0x130>
    1152:	0c 5f       	subi	r16, 0xFC	; 252
    1154:	1f 4f       	sbci	r17, 0xFF	; 255
    1156:	9f e3       	ldi	r25, 0x3F	; 63
    1158:	99 83       	std	Y+1, r25	; 0x01
    115a:	0d c0       	rjmp	.+26     	; 0x1176 <vfprintf+0x14a>
    115c:	83 36       	cpi	r24, 0x63	; 99
    115e:	31 f0       	breq	.+12     	; 0x116c <vfprintf+0x140>
    1160:	83 37       	cpi	r24, 0x73	; 115
    1162:	71 f0       	breq	.+28     	; 0x1180 <vfprintf+0x154>
    1164:	83 35       	cpi	r24, 0x53	; 83
    1166:	09 f0       	breq	.+2      	; 0x116a <vfprintf+0x13e>
    1168:	55 c0       	rjmp	.+170    	; 0x1214 <vfprintf+0x1e8>
    116a:	20 c0       	rjmp	.+64     	; 0x11ac <vfprintf+0x180>
    116c:	f8 01       	movw	r30, r16
    116e:	80 81       	ld	r24, Z
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	0e 5f       	subi	r16, 0xFE	; 254
    1174:	1f 4f       	sbci	r17, 0xFF	; 255
    1176:	88 24       	eor	r8, r8
    1178:	83 94       	inc	r8
    117a:	91 2c       	mov	r9, r1
    117c:	53 01       	movw	r10, r6
    117e:	12 c0       	rjmp	.+36     	; 0x11a4 <vfprintf+0x178>
    1180:	28 01       	movw	r4, r16
    1182:	f2 e0       	ldi	r31, 0x02	; 2
    1184:	4f 0e       	add	r4, r31
    1186:	51 1c       	adc	r5, r1
    1188:	f8 01       	movw	r30, r16
    118a:	a0 80       	ld	r10, Z
    118c:	b1 80       	ldd	r11, Z+1	; 0x01
    118e:	36 fe       	sbrs	r3, 6
    1190:	03 c0       	rjmp	.+6      	; 0x1198 <vfprintf+0x16c>
    1192:	69 2d       	mov	r22, r9
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	02 c0       	rjmp	.+4      	; 0x119c <vfprintf+0x170>
    1198:	6f ef       	ldi	r22, 0xFF	; 255
    119a:	7f ef       	ldi	r23, 0xFF	; 255
    119c:	c5 01       	movw	r24, r10
    119e:	90 d2       	rcall	.+1312   	; 0x16c0 <strnlen>
    11a0:	4c 01       	movw	r8, r24
    11a2:	82 01       	movw	r16, r4
    11a4:	f3 2d       	mov	r31, r3
    11a6:	ff 77       	andi	r31, 0x7F	; 127
    11a8:	3f 2e       	mov	r3, r31
    11aa:	15 c0       	rjmp	.+42     	; 0x11d6 <vfprintf+0x1aa>
    11ac:	28 01       	movw	r4, r16
    11ae:	22 e0       	ldi	r18, 0x02	; 2
    11b0:	42 0e       	add	r4, r18
    11b2:	51 1c       	adc	r5, r1
    11b4:	f8 01       	movw	r30, r16
    11b6:	a0 80       	ld	r10, Z
    11b8:	b1 80       	ldd	r11, Z+1	; 0x01
    11ba:	36 fe       	sbrs	r3, 6
    11bc:	03 c0       	rjmp	.+6      	; 0x11c4 <vfprintf+0x198>
    11be:	69 2d       	mov	r22, r9
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <vfprintf+0x19c>
    11c4:	6f ef       	ldi	r22, 0xFF	; 255
    11c6:	7f ef       	ldi	r23, 0xFF	; 255
    11c8:	c5 01       	movw	r24, r10
    11ca:	68 d2       	rcall	.+1232   	; 0x169c <strnlen_P>
    11cc:	4c 01       	movw	r8, r24
    11ce:	f3 2d       	mov	r31, r3
    11d0:	f0 68       	ori	r31, 0x80	; 128
    11d2:	3f 2e       	mov	r3, r31
    11d4:	82 01       	movw	r16, r4
    11d6:	33 fc       	sbrc	r3, 3
    11d8:	19 c0       	rjmp	.+50     	; 0x120c <vfprintf+0x1e0>
    11da:	82 2d       	mov	r24, r2
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	88 16       	cp	r8, r24
    11e0:	99 06       	cpc	r9, r25
    11e2:	a0 f4       	brcc	.+40     	; 0x120c <vfprintf+0x1e0>
    11e4:	b6 01       	movw	r22, r12
    11e6:	80 e2       	ldi	r24, 0x20	; 32
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	85 d2       	rcall	.+1290   	; 0x16f6 <fputc>
    11ec:	2a 94       	dec	r2
    11ee:	f5 cf       	rjmp	.-22     	; 0x11da <vfprintf+0x1ae>
    11f0:	f5 01       	movw	r30, r10
    11f2:	37 fc       	sbrc	r3, 7
    11f4:	85 91       	lpm	r24, Z+
    11f6:	37 fe       	sbrs	r3, 7
    11f8:	81 91       	ld	r24, Z+
    11fa:	5f 01       	movw	r10, r30
    11fc:	b6 01       	movw	r22, r12
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	7a d2       	rcall	.+1268   	; 0x16f6 <fputc>
    1202:	21 10       	cpse	r2, r1
    1204:	2a 94       	dec	r2
    1206:	21 e0       	ldi	r18, 0x01	; 1
    1208:	82 1a       	sub	r8, r18
    120a:	91 08       	sbc	r9, r1
    120c:	81 14       	cp	r8, r1
    120e:	91 04       	cpc	r9, r1
    1210:	79 f7       	brne	.-34     	; 0x11f0 <vfprintf+0x1c4>
    1212:	e1 c0       	rjmp	.+450    	; 0x13d6 <vfprintf+0x3aa>
    1214:	84 36       	cpi	r24, 0x64	; 100
    1216:	11 f0       	breq	.+4      	; 0x121c <vfprintf+0x1f0>
    1218:	89 36       	cpi	r24, 0x69	; 105
    121a:	39 f5       	brne	.+78     	; 0x126a <vfprintf+0x23e>
    121c:	f8 01       	movw	r30, r16
    121e:	37 fe       	sbrs	r3, 7
    1220:	07 c0       	rjmp	.+14     	; 0x1230 <vfprintf+0x204>
    1222:	60 81       	ld	r22, Z
    1224:	71 81       	ldd	r23, Z+1	; 0x01
    1226:	82 81       	ldd	r24, Z+2	; 0x02
    1228:	93 81       	ldd	r25, Z+3	; 0x03
    122a:	0c 5f       	subi	r16, 0xFC	; 252
    122c:	1f 4f       	sbci	r17, 0xFF	; 255
    122e:	08 c0       	rjmp	.+16     	; 0x1240 <vfprintf+0x214>
    1230:	60 81       	ld	r22, Z
    1232:	71 81       	ldd	r23, Z+1	; 0x01
    1234:	07 2e       	mov	r0, r23
    1236:	00 0c       	add	r0, r0
    1238:	88 0b       	sbc	r24, r24
    123a:	99 0b       	sbc	r25, r25
    123c:	0e 5f       	subi	r16, 0xFE	; 254
    123e:	1f 4f       	sbci	r17, 0xFF	; 255
    1240:	f3 2d       	mov	r31, r3
    1242:	ff 76       	andi	r31, 0x6F	; 111
    1244:	3f 2e       	mov	r3, r31
    1246:	97 ff       	sbrs	r25, 7
    1248:	09 c0       	rjmp	.+18     	; 0x125c <vfprintf+0x230>
    124a:	90 95       	com	r25
    124c:	80 95       	com	r24
    124e:	70 95       	com	r23
    1250:	61 95       	neg	r22
    1252:	7f 4f       	sbci	r23, 0xFF	; 255
    1254:	8f 4f       	sbci	r24, 0xFF	; 255
    1256:	9f 4f       	sbci	r25, 0xFF	; 255
    1258:	f0 68       	ori	r31, 0x80	; 128
    125a:	3f 2e       	mov	r3, r31
    125c:	2a e0       	ldi	r18, 0x0A	; 10
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	a3 01       	movw	r20, r6
    1262:	85 d2       	rcall	.+1290   	; 0x176e <__ultoa_invert>
    1264:	88 2e       	mov	r8, r24
    1266:	86 18       	sub	r8, r6
    1268:	44 c0       	rjmp	.+136    	; 0x12f2 <vfprintf+0x2c6>
    126a:	85 37       	cpi	r24, 0x75	; 117
    126c:	31 f4       	brne	.+12     	; 0x127a <vfprintf+0x24e>
    126e:	23 2d       	mov	r18, r3
    1270:	2f 7e       	andi	r18, 0xEF	; 239
    1272:	b2 2e       	mov	r11, r18
    1274:	2a e0       	ldi	r18, 0x0A	; 10
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	25 c0       	rjmp	.+74     	; 0x12c4 <vfprintf+0x298>
    127a:	93 2d       	mov	r25, r3
    127c:	99 7f       	andi	r25, 0xF9	; 249
    127e:	b9 2e       	mov	r11, r25
    1280:	8f 36       	cpi	r24, 0x6F	; 111
    1282:	c1 f0       	breq	.+48     	; 0x12b4 <vfprintf+0x288>
    1284:	18 f4       	brcc	.+6      	; 0x128c <vfprintf+0x260>
    1286:	88 35       	cpi	r24, 0x58	; 88
    1288:	79 f0       	breq	.+30     	; 0x12a8 <vfprintf+0x27c>
    128a:	ae c0       	rjmp	.+348    	; 0x13e8 <vfprintf+0x3bc>
    128c:	80 37       	cpi	r24, 0x70	; 112
    128e:	19 f0       	breq	.+6      	; 0x1296 <vfprintf+0x26a>
    1290:	88 37       	cpi	r24, 0x78	; 120
    1292:	21 f0       	breq	.+8      	; 0x129c <vfprintf+0x270>
    1294:	a9 c0       	rjmp	.+338    	; 0x13e8 <vfprintf+0x3bc>
    1296:	e9 2f       	mov	r30, r25
    1298:	e0 61       	ori	r30, 0x10	; 16
    129a:	be 2e       	mov	r11, r30
    129c:	b4 fe       	sbrs	r11, 4
    129e:	0d c0       	rjmp	.+26     	; 0x12ba <vfprintf+0x28e>
    12a0:	fb 2d       	mov	r31, r11
    12a2:	f4 60       	ori	r31, 0x04	; 4
    12a4:	bf 2e       	mov	r11, r31
    12a6:	09 c0       	rjmp	.+18     	; 0x12ba <vfprintf+0x28e>
    12a8:	34 fe       	sbrs	r3, 4
    12aa:	0a c0       	rjmp	.+20     	; 0x12c0 <vfprintf+0x294>
    12ac:	29 2f       	mov	r18, r25
    12ae:	26 60       	ori	r18, 0x06	; 6
    12b0:	b2 2e       	mov	r11, r18
    12b2:	06 c0       	rjmp	.+12     	; 0x12c0 <vfprintf+0x294>
    12b4:	28 e0       	ldi	r18, 0x08	; 8
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	05 c0       	rjmp	.+10     	; 0x12c4 <vfprintf+0x298>
    12ba:	20 e1       	ldi	r18, 0x10	; 16
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <vfprintf+0x298>
    12c0:	20 e1       	ldi	r18, 0x10	; 16
    12c2:	32 e0       	ldi	r19, 0x02	; 2
    12c4:	f8 01       	movw	r30, r16
    12c6:	b7 fe       	sbrs	r11, 7
    12c8:	07 c0       	rjmp	.+14     	; 0x12d8 <vfprintf+0x2ac>
    12ca:	60 81       	ld	r22, Z
    12cc:	71 81       	ldd	r23, Z+1	; 0x01
    12ce:	82 81       	ldd	r24, Z+2	; 0x02
    12d0:	93 81       	ldd	r25, Z+3	; 0x03
    12d2:	0c 5f       	subi	r16, 0xFC	; 252
    12d4:	1f 4f       	sbci	r17, 0xFF	; 255
    12d6:	06 c0       	rjmp	.+12     	; 0x12e4 <vfprintf+0x2b8>
    12d8:	60 81       	ld	r22, Z
    12da:	71 81       	ldd	r23, Z+1	; 0x01
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	0e 5f       	subi	r16, 0xFE	; 254
    12e2:	1f 4f       	sbci	r17, 0xFF	; 255
    12e4:	a3 01       	movw	r20, r6
    12e6:	43 d2       	rcall	.+1158   	; 0x176e <__ultoa_invert>
    12e8:	88 2e       	mov	r8, r24
    12ea:	86 18       	sub	r8, r6
    12ec:	fb 2d       	mov	r31, r11
    12ee:	ff 77       	andi	r31, 0x7F	; 127
    12f0:	3f 2e       	mov	r3, r31
    12f2:	36 fe       	sbrs	r3, 6
    12f4:	0d c0       	rjmp	.+26     	; 0x1310 <vfprintf+0x2e4>
    12f6:	23 2d       	mov	r18, r3
    12f8:	2e 7f       	andi	r18, 0xFE	; 254
    12fa:	a2 2e       	mov	r10, r18
    12fc:	89 14       	cp	r8, r9
    12fe:	58 f4       	brcc	.+22     	; 0x1316 <vfprintf+0x2ea>
    1300:	34 fe       	sbrs	r3, 4
    1302:	0b c0       	rjmp	.+22     	; 0x131a <vfprintf+0x2ee>
    1304:	32 fc       	sbrc	r3, 2
    1306:	09 c0       	rjmp	.+18     	; 0x131a <vfprintf+0x2ee>
    1308:	83 2d       	mov	r24, r3
    130a:	8e 7e       	andi	r24, 0xEE	; 238
    130c:	a8 2e       	mov	r10, r24
    130e:	05 c0       	rjmp	.+10     	; 0x131a <vfprintf+0x2ee>
    1310:	b8 2c       	mov	r11, r8
    1312:	a3 2c       	mov	r10, r3
    1314:	03 c0       	rjmp	.+6      	; 0x131c <vfprintf+0x2f0>
    1316:	b8 2c       	mov	r11, r8
    1318:	01 c0       	rjmp	.+2      	; 0x131c <vfprintf+0x2f0>
    131a:	b9 2c       	mov	r11, r9
    131c:	a4 fe       	sbrs	r10, 4
    131e:	0f c0       	rjmp	.+30     	; 0x133e <vfprintf+0x312>
    1320:	fe 01       	movw	r30, r28
    1322:	e8 0d       	add	r30, r8
    1324:	f1 1d       	adc	r31, r1
    1326:	80 81       	ld	r24, Z
    1328:	80 33       	cpi	r24, 0x30	; 48
    132a:	21 f4       	brne	.+8      	; 0x1334 <vfprintf+0x308>
    132c:	9a 2d       	mov	r25, r10
    132e:	99 7e       	andi	r25, 0xE9	; 233
    1330:	a9 2e       	mov	r10, r25
    1332:	09 c0       	rjmp	.+18     	; 0x1346 <vfprintf+0x31a>
    1334:	a2 fe       	sbrs	r10, 2
    1336:	06 c0       	rjmp	.+12     	; 0x1344 <vfprintf+0x318>
    1338:	b3 94       	inc	r11
    133a:	b3 94       	inc	r11
    133c:	04 c0       	rjmp	.+8      	; 0x1346 <vfprintf+0x31a>
    133e:	8a 2d       	mov	r24, r10
    1340:	86 78       	andi	r24, 0x86	; 134
    1342:	09 f0       	breq	.+2      	; 0x1346 <vfprintf+0x31a>
    1344:	b3 94       	inc	r11
    1346:	a3 fc       	sbrc	r10, 3
    1348:	10 c0       	rjmp	.+32     	; 0x136a <vfprintf+0x33e>
    134a:	a0 fe       	sbrs	r10, 0
    134c:	06 c0       	rjmp	.+12     	; 0x135a <vfprintf+0x32e>
    134e:	b2 14       	cp	r11, r2
    1350:	80 f4       	brcc	.+32     	; 0x1372 <vfprintf+0x346>
    1352:	28 0c       	add	r2, r8
    1354:	92 2c       	mov	r9, r2
    1356:	9b 18       	sub	r9, r11
    1358:	0d c0       	rjmp	.+26     	; 0x1374 <vfprintf+0x348>
    135a:	b2 14       	cp	r11, r2
    135c:	58 f4       	brcc	.+22     	; 0x1374 <vfprintf+0x348>
    135e:	b6 01       	movw	r22, r12
    1360:	80 e2       	ldi	r24, 0x20	; 32
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	c8 d1       	rcall	.+912    	; 0x16f6 <fputc>
    1366:	b3 94       	inc	r11
    1368:	f8 cf       	rjmp	.-16     	; 0x135a <vfprintf+0x32e>
    136a:	b2 14       	cp	r11, r2
    136c:	18 f4       	brcc	.+6      	; 0x1374 <vfprintf+0x348>
    136e:	2b 18       	sub	r2, r11
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <vfprintf+0x34a>
    1372:	98 2c       	mov	r9, r8
    1374:	21 2c       	mov	r2, r1
    1376:	a4 fe       	sbrs	r10, 4
    1378:	0f c0       	rjmp	.+30     	; 0x1398 <vfprintf+0x36c>
    137a:	b6 01       	movw	r22, r12
    137c:	80 e3       	ldi	r24, 0x30	; 48
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	ba d1       	rcall	.+884    	; 0x16f6 <fputc>
    1382:	a2 fe       	sbrs	r10, 2
    1384:	16 c0       	rjmp	.+44     	; 0x13b2 <vfprintf+0x386>
    1386:	a1 fc       	sbrc	r10, 1
    1388:	03 c0       	rjmp	.+6      	; 0x1390 <vfprintf+0x364>
    138a:	88 e7       	ldi	r24, 0x78	; 120
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <vfprintf+0x368>
    1390:	88 e5       	ldi	r24, 0x58	; 88
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	b6 01       	movw	r22, r12
    1396:	0c c0       	rjmp	.+24     	; 0x13b0 <vfprintf+0x384>
    1398:	8a 2d       	mov	r24, r10
    139a:	86 78       	andi	r24, 0x86	; 134
    139c:	51 f0       	breq	.+20     	; 0x13b2 <vfprintf+0x386>
    139e:	a1 fe       	sbrs	r10, 1
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <vfprintf+0x37a>
    13a2:	8b e2       	ldi	r24, 0x2B	; 43
    13a4:	01 c0       	rjmp	.+2      	; 0x13a8 <vfprintf+0x37c>
    13a6:	80 e2       	ldi	r24, 0x20	; 32
    13a8:	a7 fc       	sbrc	r10, 7
    13aa:	8d e2       	ldi	r24, 0x2D	; 45
    13ac:	b6 01       	movw	r22, r12
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	a2 d1       	rcall	.+836    	; 0x16f6 <fputc>
    13b2:	89 14       	cp	r8, r9
    13b4:	30 f4       	brcc	.+12     	; 0x13c2 <vfprintf+0x396>
    13b6:	b6 01       	movw	r22, r12
    13b8:	80 e3       	ldi	r24, 0x30	; 48
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	9c d1       	rcall	.+824    	; 0x16f6 <fputc>
    13be:	9a 94       	dec	r9
    13c0:	f8 cf       	rjmp	.-16     	; 0x13b2 <vfprintf+0x386>
    13c2:	8a 94       	dec	r8
    13c4:	f3 01       	movw	r30, r6
    13c6:	e8 0d       	add	r30, r8
    13c8:	f1 1d       	adc	r31, r1
    13ca:	80 81       	ld	r24, Z
    13cc:	b6 01       	movw	r22, r12
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	92 d1       	rcall	.+804    	; 0x16f6 <fputc>
    13d2:	81 10       	cpse	r8, r1
    13d4:	f6 cf       	rjmp	.-20     	; 0x13c2 <vfprintf+0x396>
    13d6:	22 20       	and	r2, r2
    13d8:	09 f4       	brne	.+2      	; 0x13dc <vfprintf+0x3b0>
    13da:	4e ce       	rjmp	.-868    	; 0x1078 <vfprintf+0x4c>
    13dc:	b6 01       	movw	r22, r12
    13de:	80 e2       	ldi	r24, 0x20	; 32
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	89 d1       	rcall	.+786    	; 0x16f6 <fputc>
    13e4:	2a 94       	dec	r2
    13e6:	f7 cf       	rjmp	.-18     	; 0x13d6 <vfprintf+0x3aa>
    13e8:	f6 01       	movw	r30, r12
    13ea:	86 81       	ldd	r24, Z+6	; 0x06
    13ec:	97 81       	ldd	r25, Z+7	; 0x07
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <vfprintf+0x3c8>
    13f0:	8f ef       	ldi	r24, 0xFF	; 255
    13f2:	9f ef       	ldi	r25, 0xFF	; 255
    13f4:	2b 96       	adiw	r28, 0x0b	; 11
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	ff 90       	pop	r15
    140a:	ef 90       	pop	r14
    140c:	df 90       	pop	r13
    140e:	cf 90       	pop	r12
    1410:	bf 90       	pop	r11
    1412:	af 90       	pop	r10
    1414:	9f 90       	pop	r9
    1416:	8f 90       	pop	r8
    1418:	7f 90       	pop	r7
    141a:	6f 90       	pop	r6
    141c:	5f 90       	pop	r5
    141e:	4f 90       	pop	r4
    1420:	3f 90       	pop	r3
    1422:	2f 90       	pop	r2
    1424:	08 95       	ret

00001426 <calloc>:
    1426:	0f 93       	push	r16
    1428:	1f 93       	push	r17
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	86 9f       	mul	r24, r22
    1430:	80 01       	movw	r16, r0
    1432:	87 9f       	mul	r24, r23
    1434:	10 0d       	add	r17, r0
    1436:	96 9f       	mul	r25, r22
    1438:	10 0d       	add	r17, r0
    143a:	11 24       	eor	r1, r1
    143c:	c8 01       	movw	r24, r16
    143e:	0d d0       	rcall	.+26     	; 0x145a <malloc>
    1440:	ec 01       	movw	r28, r24
    1442:	00 97       	sbiw	r24, 0x00	; 0
    1444:	21 f0       	breq	.+8      	; 0x144e <calloc+0x28>
    1446:	a8 01       	movw	r20, r16
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	32 d1       	rcall	.+612    	; 0x16b2 <memset>
    144e:	ce 01       	movw	r24, r28
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	08 95       	ret

0000145a <malloc>:
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	82 30       	cpi	r24, 0x02	; 2
    1464:	91 05       	cpc	r25, r1
    1466:	10 f4       	brcc	.+4      	; 0x146c <malloc+0x12>
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <__flp>
    1470:	f0 91 65 02 	lds	r31, 0x0265	; 0x800265 <__flp+0x1>
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	a0 e0       	ldi	r26, 0x00	; 0
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	30 97       	sbiw	r30, 0x00	; 0
    147e:	19 f1       	breq	.+70     	; 0x14c6 <malloc+0x6c>
    1480:	40 81       	ld	r20, Z
    1482:	51 81       	ldd	r21, Z+1	; 0x01
    1484:	02 81       	ldd	r16, Z+2	; 0x02
    1486:	13 81       	ldd	r17, Z+3	; 0x03
    1488:	48 17       	cp	r20, r24
    148a:	59 07       	cpc	r21, r25
    148c:	c8 f0       	brcs	.+50     	; 0x14c0 <malloc+0x66>
    148e:	84 17       	cp	r24, r20
    1490:	95 07       	cpc	r25, r21
    1492:	69 f4       	brne	.+26     	; 0x14ae <malloc+0x54>
    1494:	10 97       	sbiw	r26, 0x00	; 0
    1496:	31 f0       	breq	.+12     	; 0x14a4 <malloc+0x4a>
    1498:	12 96       	adiw	r26, 0x02	; 2
    149a:	0c 93       	st	X, r16
    149c:	12 97       	sbiw	r26, 0x02	; 2
    149e:	13 96       	adiw	r26, 0x03	; 3
    14a0:	1c 93       	st	X, r17
    14a2:	27 c0       	rjmp	.+78     	; 0x14f2 <malloc+0x98>
    14a4:	00 93 64 02 	sts	0x0264, r16	; 0x800264 <__flp>
    14a8:	10 93 65 02 	sts	0x0265, r17	; 0x800265 <__flp+0x1>
    14ac:	22 c0       	rjmp	.+68     	; 0x14f2 <malloc+0x98>
    14ae:	21 15       	cp	r18, r1
    14b0:	31 05       	cpc	r19, r1
    14b2:	19 f0       	breq	.+6      	; 0x14ba <malloc+0x60>
    14b4:	42 17       	cp	r20, r18
    14b6:	53 07       	cpc	r21, r19
    14b8:	18 f4       	brcc	.+6      	; 0x14c0 <malloc+0x66>
    14ba:	9a 01       	movw	r18, r20
    14bc:	bd 01       	movw	r22, r26
    14be:	ef 01       	movw	r28, r30
    14c0:	df 01       	movw	r26, r30
    14c2:	f8 01       	movw	r30, r16
    14c4:	db cf       	rjmp	.-74     	; 0x147c <malloc+0x22>
    14c6:	21 15       	cp	r18, r1
    14c8:	31 05       	cpc	r19, r1
    14ca:	f9 f0       	breq	.+62     	; 0x150a <malloc+0xb0>
    14cc:	28 1b       	sub	r18, r24
    14ce:	39 0b       	sbc	r19, r25
    14d0:	24 30       	cpi	r18, 0x04	; 4
    14d2:	31 05       	cpc	r19, r1
    14d4:	80 f4       	brcc	.+32     	; 0x14f6 <malloc+0x9c>
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	9b 81       	ldd	r25, Y+3	; 0x03
    14da:	61 15       	cp	r22, r1
    14dc:	71 05       	cpc	r23, r1
    14de:	21 f0       	breq	.+8      	; 0x14e8 <malloc+0x8e>
    14e0:	fb 01       	movw	r30, r22
    14e2:	93 83       	std	Z+3, r25	; 0x03
    14e4:	82 83       	std	Z+2, r24	; 0x02
    14e6:	04 c0       	rjmp	.+8      	; 0x14f0 <malloc+0x96>
    14e8:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <__flp+0x1>
    14ec:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <__flp>
    14f0:	fe 01       	movw	r30, r28
    14f2:	32 96       	adiw	r30, 0x02	; 2
    14f4:	44 c0       	rjmp	.+136    	; 0x157e <malloc+0x124>
    14f6:	fe 01       	movw	r30, r28
    14f8:	e2 0f       	add	r30, r18
    14fa:	f3 1f       	adc	r31, r19
    14fc:	81 93       	st	Z+, r24
    14fe:	91 93       	st	Z+, r25
    1500:	22 50       	subi	r18, 0x02	; 2
    1502:	31 09       	sbc	r19, r1
    1504:	39 83       	std	Y+1, r19	; 0x01
    1506:	28 83       	st	Y, r18
    1508:	3a c0       	rjmp	.+116    	; 0x157e <malloc+0x124>
    150a:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <__brkval>
    150e:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <__brkval+0x1>
    1512:	23 2b       	or	r18, r19
    1514:	41 f4       	brne	.+16     	; 0x1526 <malloc+0xcc>
    1516:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    151a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    151e:	30 93 63 02 	sts	0x0263, r19	; 0x800263 <__brkval+0x1>
    1522:	20 93 62 02 	sts	0x0262, r18	; 0x800262 <__brkval>
    1526:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    152a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    152e:	21 15       	cp	r18, r1
    1530:	31 05       	cpc	r19, r1
    1532:	41 f4       	brne	.+16     	; 0x1544 <malloc+0xea>
    1534:	2d b7       	in	r18, 0x3d	; 61
    1536:	3e b7       	in	r19, 0x3e	; 62
    1538:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    153c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1540:	24 1b       	sub	r18, r20
    1542:	35 0b       	sbc	r19, r21
    1544:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <__brkval>
    1548:	f0 91 63 02 	lds	r31, 0x0263	; 0x800263 <__brkval+0x1>
    154c:	e2 17       	cp	r30, r18
    154e:	f3 07       	cpc	r31, r19
    1550:	a0 f4       	brcc	.+40     	; 0x157a <malloc+0x120>
    1552:	2e 1b       	sub	r18, r30
    1554:	3f 0b       	sbc	r19, r31
    1556:	28 17       	cp	r18, r24
    1558:	39 07       	cpc	r19, r25
    155a:	78 f0       	brcs	.+30     	; 0x157a <malloc+0x120>
    155c:	ac 01       	movw	r20, r24
    155e:	4e 5f       	subi	r20, 0xFE	; 254
    1560:	5f 4f       	sbci	r21, 0xFF	; 255
    1562:	24 17       	cp	r18, r20
    1564:	35 07       	cpc	r19, r21
    1566:	48 f0       	brcs	.+18     	; 0x157a <malloc+0x120>
    1568:	4e 0f       	add	r20, r30
    156a:	5f 1f       	adc	r21, r31
    156c:	50 93 63 02 	sts	0x0263, r21	; 0x800263 <__brkval+0x1>
    1570:	40 93 62 02 	sts	0x0262, r20	; 0x800262 <__brkval>
    1574:	81 93       	st	Z+, r24
    1576:	91 93       	st	Z+, r25
    1578:	02 c0       	rjmp	.+4      	; 0x157e <malloc+0x124>
    157a:	e0 e0       	ldi	r30, 0x00	; 0
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	cf 01       	movw	r24, r30
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	0f 91       	pop	r16
    1588:	08 95       	ret

0000158a <free>:
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	09 f4       	brne	.+2      	; 0x1594 <free+0xa>
    1592:	81 c0       	rjmp	.+258    	; 0x1696 <free+0x10c>
    1594:	fc 01       	movw	r30, r24
    1596:	32 97       	sbiw	r30, 0x02	; 2
    1598:	13 82       	std	Z+3, r1	; 0x03
    159a:	12 82       	std	Z+2, r1	; 0x02
    159c:	a0 91 64 02 	lds	r26, 0x0264	; 0x800264 <__flp>
    15a0:	b0 91 65 02 	lds	r27, 0x0265	; 0x800265 <__flp+0x1>
    15a4:	10 97       	sbiw	r26, 0x00	; 0
    15a6:	81 f4       	brne	.+32     	; 0x15c8 <free+0x3e>
    15a8:	20 81       	ld	r18, Z
    15aa:	31 81       	ldd	r19, Z+1	; 0x01
    15ac:	82 0f       	add	r24, r18
    15ae:	93 1f       	adc	r25, r19
    15b0:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <__brkval>
    15b4:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <__brkval+0x1>
    15b8:	28 17       	cp	r18, r24
    15ba:	39 07       	cpc	r19, r25
    15bc:	51 f5       	brne	.+84     	; 0x1612 <free+0x88>
    15be:	f0 93 63 02 	sts	0x0263, r31	; 0x800263 <__brkval+0x1>
    15c2:	e0 93 62 02 	sts	0x0262, r30	; 0x800262 <__brkval>
    15c6:	67 c0       	rjmp	.+206    	; 0x1696 <free+0x10c>
    15c8:	ed 01       	movw	r28, r26
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	ce 17       	cp	r28, r30
    15d0:	df 07       	cpc	r29, r31
    15d2:	40 f4       	brcc	.+16     	; 0x15e4 <free+0x5a>
    15d4:	4a 81       	ldd	r20, Y+2	; 0x02
    15d6:	5b 81       	ldd	r21, Y+3	; 0x03
    15d8:	9e 01       	movw	r18, r28
    15da:	41 15       	cp	r20, r1
    15dc:	51 05       	cpc	r21, r1
    15de:	f1 f0       	breq	.+60     	; 0x161c <free+0x92>
    15e0:	ea 01       	movw	r28, r20
    15e2:	f5 cf       	rjmp	.-22     	; 0x15ce <free+0x44>
    15e4:	d3 83       	std	Z+3, r29	; 0x03
    15e6:	c2 83       	std	Z+2, r28	; 0x02
    15e8:	40 81       	ld	r20, Z
    15ea:	51 81       	ldd	r21, Z+1	; 0x01
    15ec:	84 0f       	add	r24, r20
    15ee:	95 1f       	adc	r25, r21
    15f0:	c8 17       	cp	r28, r24
    15f2:	d9 07       	cpc	r29, r25
    15f4:	59 f4       	brne	.+22     	; 0x160c <free+0x82>
    15f6:	88 81       	ld	r24, Y
    15f8:	99 81       	ldd	r25, Y+1	; 0x01
    15fa:	84 0f       	add	r24, r20
    15fc:	95 1f       	adc	r25, r21
    15fe:	02 96       	adiw	r24, 0x02	; 2
    1600:	91 83       	std	Z+1, r25	; 0x01
    1602:	80 83       	st	Z, r24
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	9b 81       	ldd	r25, Y+3	; 0x03
    1608:	93 83       	std	Z+3, r25	; 0x03
    160a:	82 83       	std	Z+2, r24	; 0x02
    160c:	21 15       	cp	r18, r1
    160e:	31 05       	cpc	r19, r1
    1610:	29 f4       	brne	.+10     	; 0x161c <free+0x92>
    1612:	f0 93 65 02 	sts	0x0265, r31	; 0x800265 <__flp+0x1>
    1616:	e0 93 64 02 	sts	0x0264, r30	; 0x800264 <__flp>
    161a:	3d c0       	rjmp	.+122    	; 0x1696 <free+0x10c>
    161c:	e9 01       	movw	r28, r18
    161e:	fb 83       	std	Y+3, r31	; 0x03
    1620:	ea 83       	std	Y+2, r30	; 0x02
    1622:	49 91       	ld	r20, Y+
    1624:	59 91       	ld	r21, Y+
    1626:	c4 0f       	add	r28, r20
    1628:	d5 1f       	adc	r29, r21
    162a:	ec 17       	cp	r30, r28
    162c:	fd 07       	cpc	r31, r29
    162e:	61 f4       	brne	.+24     	; 0x1648 <free+0xbe>
    1630:	80 81       	ld	r24, Z
    1632:	91 81       	ldd	r25, Z+1	; 0x01
    1634:	84 0f       	add	r24, r20
    1636:	95 1f       	adc	r25, r21
    1638:	02 96       	adiw	r24, 0x02	; 2
    163a:	e9 01       	movw	r28, r18
    163c:	99 83       	std	Y+1, r25	; 0x01
    163e:	88 83       	st	Y, r24
    1640:	82 81       	ldd	r24, Z+2	; 0x02
    1642:	93 81       	ldd	r25, Z+3	; 0x03
    1644:	9b 83       	std	Y+3, r25	; 0x03
    1646:	8a 83       	std	Y+2, r24	; 0x02
    1648:	e0 e0       	ldi	r30, 0x00	; 0
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	12 96       	adiw	r26, 0x02	; 2
    164e:	8d 91       	ld	r24, X+
    1650:	9c 91       	ld	r25, X
    1652:	13 97       	sbiw	r26, 0x03	; 3
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	19 f0       	breq	.+6      	; 0x165e <free+0xd4>
    1658:	fd 01       	movw	r30, r26
    165a:	dc 01       	movw	r26, r24
    165c:	f7 cf       	rjmp	.-18     	; 0x164c <free+0xc2>
    165e:	8d 91       	ld	r24, X+
    1660:	9c 91       	ld	r25, X
    1662:	11 97       	sbiw	r26, 0x01	; 1
    1664:	9d 01       	movw	r18, r26
    1666:	2e 5f       	subi	r18, 0xFE	; 254
    1668:	3f 4f       	sbci	r19, 0xFF	; 255
    166a:	82 0f       	add	r24, r18
    166c:	93 1f       	adc	r25, r19
    166e:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <__brkval>
    1672:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <__brkval+0x1>
    1676:	28 17       	cp	r18, r24
    1678:	39 07       	cpc	r19, r25
    167a:	69 f4       	brne	.+26     	; 0x1696 <free+0x10c>
    167c:	30 97       	sbiw	r30, 0x00	; 0
    167e:	29 f4       	brne	.+10     	; 0x168a <free+0x100>
    1680:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <__flp+0x1>
    1684:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <__flp>
    1688:	02 c0       	rjmp	.+4      	; 0x168e <free+0x104>
    168a:	13 82       	std	Z+3, r1	; 0x03
    168c:	12 82       	std	Z+2, r1	; 0x02
    168e:	b0 93 63 02 	sts	0x0263, r27	; 0x800263 <__brkval+0x1>
    1692:	a0 93 62 02 	sts	0x0262, r26	; 0x800262 <__brkval>
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	08 95       	ret

0000169c <strnlen_P>:
    169c:	fc 01       	movw	r30, r24
    169e:	05 90       	lpm	r0, Z+
    16a0:	61 50       	subi	r22, 0x01	; 1
    16a2:	70 40       	sbci	r23, 0x00	; 0
    16a4:	01 10       	cpse	r0, r1
    16a6:	d8 f7       	brcc	.-10     	; 0x169e <strnlen_P+0x2>
    16a8:	80 95       	com	r24
    16aa:	90 95       	com	r25
    16ac:	8e 0f       	add	r24, r30
    16ae:	9f 1f       	adc	r25, r31
    16b0:	08 95       	ret

000016b2 <memset>:
    16b2:	dc 01       	movw	r26, r24
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <memset+0x6>
    16b6:	6d 93       	st	X+, r22
    16b8:	41 50       	subi	r20, 0x01	; 1
    16ba:	50 40       	sbci	r21, 0x00	; 0
    16bc:	e0 f7       	brcc	.-8      	; 0x16b6 <memset+0x4>
    16be:	08 95       	ret

000016c0 <strnlen>:
    16c0:	fc 01       	movw	r30, r24
    16c2:	61 50       	subi	r22, 0x01	; 1
    16c4:	70 40       	sbci	r23, 0x00	; 0
    16c6:	01 90       	ld	r0, Z+
    16c8:	01 10       	cpse	r0, r1
    16ca:	d8 f7       	brcc	.-10     	; 0x16c2 <strnlen+0x2>
    16cc:	80 95       	com	r24
    16ce:	90 95       	com	r25
    16d0:	8e 0f       	add	r24, r30
    16d2:	9f 1f       	adc	r25, r31
    16d4:	08 95       	ret

000016d6 <strrev>:
    16d6:	dc 01       	movw	r26, r24
    16d8:	fc 01       	movw	r30, r24
    16da:	67 2f       	mov	r22, r23
    16dc:	71 91       	ld	r23, Z+
    16de:	77 23       	and	r23, r23
    16e0:	e1 f7       	brne	.-8      	; 0x16da <strrev+0x4>
    16e2:	32 97       	sbiw	r30, 0x02	; 2
    16e4:	04 c0       	rjmp	.+8      	; 0x16ee <strrev+0x18>
    16e6:	7c 91       	ld	r23, X
    16e8:	6d 93       	st	X+, r22
    16ea:	70 83       	st	Z, r23
    16ec:	62 91       	ld	r22, -Z
    16ee:	ae 17       	cp	r26, r30
    16f0:	bf 07       	cpc	r27, r31
    16f2:	c8 f3       	brcs	.-14     	; 0x16e6 <strrev+0x10>
    16f4:	08 95       	ret

000016f6 <fputc>:
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	fb 01       	movw	r30, r22
    1700:	23 81       	ldd	r18, Z+3	; 0x03
    1702:	21 fd       	sbrc	r18, 1
    1704:	03 c0       	rjmp	.+6      	; 0x170c <fputc+0x16>
    1706:	8f ef       	ldi	r24, 0xFF	; 255
    1708:	9f ef       	ldi	r25, 0xFF	; 255
    170a:	2c c0       	rjmp	.+88     	; 0x1764 <fputc+0x6e>
    170c:	22 ff       	sbrs	r18, 2
    170e:	16 c0       	rjmp	.+44     	; 0x173c <fputc+0x46>
    1710:	46 81       	ldd	r20, Z+6	; 0x06
    1712:	57 81       	ldd	r21, Z+7	; 0x07
    1714:	24 81       	ldd	r18, Z+4	; 0x04
    1716:	35 81       	ldd	r19, Z+5	; 0x05
    1718:	42 17       	cp	r20, r18
    171a:	53 07       	cpc	r21, r19
    171c:	44 f4       	brge	.+16     	; 0x172e <fputc+0x38>
    171e:	a0 81       	ld	r26, Z
    1720:	b1 81       	ldd	r27, Z+1	; 0x01
    1722:	9d 01       	movw	r18, r26
    1724:	2f 5f       	subi	r18, 0xFF	; 255
    1726:	3f 4f       	sbci	r19, 0xFF	; 255
    1728:	31 83       	std	Z+1, r19	; 0x01
    172a:	20 83       	st	Z, r18
    172c:	8c 93       	st	X, r24
    172e:	26 81       	ldd	r18, Z+6	; 0x06
    1730:	37 81       	ldd	r19, Z+7	; 0x07
    1732:	2f 5f       	subi	r18, 0xFF	; 255
    1734:	3f 4f       	sbci	r19, 0xFF	; 255
    1736:	37 83       	std	Z+7, r19	; 0x07
    1738:	26 83       	std	Z+6, r18	; 0x06
    173a:	14 c0       	rjmp	.+40     	; 0x1764 <fputc+0x6e>
    173c:	8b 01       	movw	r16, r22
    173e:	ec 01       	movw	r28, r24
    1740:	fb 01       	movw	r30, r22
    1742:	00 84       	ldd	r0, Z+8	; 0x08
    1744:	f1 85       	ldd	r31, Z+9	; 0x09
    1746:	e0 2d       	mov	r30, r0
    1748:	19 95       	eicall
    174a:	89 2b       	or	r24, r25
    174c:	e1 f6       	brne	.-72     	; 0x1706 <fputc+0x10>
    174e:	d8 01       	movw	r26, r16
    1750:	16 96       	adiw	r26, 0x06	; 6
    1752:	8d 91       	ld	r24, X+
    1754:	9c 91       	ld	r25, X
    1756:	17 97       	sbiw	r26, 0x07	; 7
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	17 96       	adiw	r26, 0x07	; 7
    175c:	9c 93       	st	X, r25
    175e:	8e 93       	st	-X, r24
    1760:	16 97       	sbiw	r26, 0x06	; 6
    1762:	ce 01       	movw	r24, r28
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	1f 91       	pop	r17
    176a:	0f 91       	pop	r16
    176c:	08 95       	ret

0000176e <__ultoa_invert>:
    176e:	fa 01       	movw	r30, r20
    1770:	aa 27       	eor	r26, r26
    1772:	28 30       	cpi	r18, 0x08	; 8
    1774:	51 f1       	breq	.+84     	; 0x17ca <__ultoa_invert+0x5c>
    1776:	20 31       	cpi	r18, 0x10	; 16
    1778:	81 f1       	breq	.+96     	; 0x17da <__ultoa_invert+0x6c>
    177a:	e8 94       	clt
    177c:	6f 93       	push	r22
    177e:	6e 7f       	andi	r22, 0xFE	; 254
    1780:	6e 5f       	subi	r22, 0xFE	; 254
    1782:	7f 4f       	sbci	r23, 0xFF	; 255
    1784:	8f 4f       	sbci	r24, 0xFF	; 255
    1786:	9f 4f       	sbci	r25, 0xFF	; 255
    1788:	af 4f       	sbci	r26, 0xFF	; 255
    178a:	b1 e0       	ldi	r27, 0x01	; 1
    178c:	3e d0       	rcall	.+124    	; 0x180a <__ultoa_invert+0x9c>
    178e:	b4 e0       	ldi	r27, 0x04	; 4
    1790:	3c d0       	rcall	.+120    	; 0x180a <__ultoa_invert+0x9c>
    1792:	67 0f       	add	r22, r23
    1794:	78 1f       	adc	r23, r24
    1796:	89 1f       	adc	r24, r25
    1798:	9a 1f       	adc	r25, r26
    179a:	a1 1d       	adc	r26, r1
    179c:	68 0f       	add	r22, r24
    179e:	79 1f       	adc	r23, r25
    17a0:	8a 1f       	adc	r24, r26
    17a2:	91 1d       	adc	r25, r1
    17a4:	a1 1d       	adc	r26, r1
    17a6:	6a 0f       	add	r22, r26
    17a8:	71 1d       	adc	r23, r1
    17aa:	81 1d       	adc	r24, r1
    17ac:	91 1d       	adc	r25, r1
    17ae:	a1 1d       	adc	r26, r1
    17b0:	20 d0       	rcall	.+64     	; 0x17f2 <__ultoa_invert+0x84>
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <__ultoa_invert+0x48>
    17b4:	68 94       	set
    17b6:	3f 91       	pop	r19
    17b8:	2a e0       	ldi	r18, 0x0A	; 10
    17ba:	26 9f       	mul	r18, r22
    17bc:	11 24       	eor	r1, r1
    17be:	30 19       	sub	r19, r0
    17c0:	30 5d       	subi	r19, 0xD0	; 208
    17c2:	31 93       	st	Z+, r19
    17c4:	de f6       	brtc	.-74     	; 0x177c <__ultoa_invert+0xe>
    17c6:	cf 01       	movw	r24, r30
    17c8:	08 95       	ret
    17ca:	46 2f       	mov	r20, r22
    17cc:	47 70       	andi	r20, 0x07	; 7
    17ce:	40 5d       	subi	r20, 0xD0	; 208
    17d0:	41 93       	st	Z+, r20
    17d2:	b3 e0       	ldi	r27, 0x03	; 3
    17d4:	0f d0       	rcall	.+30     	; 0x17f4 <__ultoa_invert+0x86>
    17d6:	c9 f7       	brne	.-14     	; 0x17ca <__ultoa_invert+0x5c>
    17d8:	f6 cf       	rjmp	.-20     	; 0x17c6 <__ultoa_invert+0x58>
    17da:	46 2f       	mov	r20, r22
    17dc:	4f 70       	andi	r20, 0x0F	; 15
    17de:	40 5d       	subi	r20, 0xD0	; 208
    17e0:	4a 33       	cpi	r20, 0x3A	; 58
    17e2:	18 f0       	brcs	.+6      	; 0x17ea <__ultoa_invert+0x7c>
    17e4:	49 5d       	subi	r20, 0xD9	; 217
    17e6:	31 fd       	sbrc	r19, 1
    17e8:	40 52       	subi	r20, 0x20	; 32
    17ea:	41 93       	st	Z+, r20
    17ec:	02 d0       	rcall	.+4      	; 0x17f2 <__ultoa_invert+0x84>
    17ee:	a9 f7       	brne	.-22     	; 0x17da <__ultoa_invert+0x6c>
    17f0:	ea cf       	rjmp	.-44     	; 0x17c6 <__ultoa_invert+0x58>
    17f2:	b4 e0       	ldi	r27, 0x04	; 4
    17f4:	a6 95       	lsr	r26
    17f6:	97 95       	ror	r25
    17f8:	87 95       	ror	r24
    17fa:	77 95       	ror	r23
    17fc:	67 95       	ror	r22
    17fe:	ba 95       	dec	r27
    1800:	c9 f7       	brne	.-14     	; 0x17f4 <__ultoa_invert+0x86>
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	61 05       	cpc	r22, r1
    1806:	71 05       	cpc	r23, r1
    1808:	08 95       	ret
    180a:	9b 01       	movw	r18, r22
    180c:	ac 01       	movw	r20, r24
    180e:	0a 2e       	mov	r0, r26
    1810:	06 94       	lsr	r0
    1812:	57 95       	ror	r21
    1814:	47 95       	ror	r20
    1816:	37 95       	ror	r19
    1818:	27 95       	ror	r18
    181a:	ba 95       	dec	r27
    181c:	c9 f7       	brne	.-14     	; 0x1810 <__ultoa_invert+0xa2>
    181e:	62 0f       	add	r22, r18
    1820:	73 1f       	adc	r23, r19
    1822:	84 1f       	adc	r24, r20
    1824:	95 1f       	adc	r25, r21
    1826:	a0 1d       	adc	r26, r0
    1828:	08 95       	ret

0000182a <_exit>:
    182a:	f8 94       	cli

0000182c <__stop_program>:
    182c:	ff cf       	rjmp	.-2      	; 0x182c <__stop_program>
