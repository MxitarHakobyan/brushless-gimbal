
drv_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000220  00800200  00000e94  00000f28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800420  00800420  00001148  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001178  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002554  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000136c  00000000  00000000  000038f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ef1  00000000  00000000  00004c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  00005b54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b20  00000000  00000000  00006134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000159e  00000000  00000000  00006c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  000081f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1a c1       	rjmp	.+564    	; 0x272 <__vector_15>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c1       	rjmp	.+646    	; 0x308 <__vector_32>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	d3 c1       	rjmp	.+934    	; 0x464 <__vector_47>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	14 e0       	ldi	r17, 0x04	; 4
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e9       	ldi	r30, 0x94	; 148
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 32       	cpi	r26, 0x20	; 32
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	a0 e2       	ldi	r26, 0x20	; 32
 112:	b4 e0       	ldi	r27, 0x04	; 4
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 34       	cpi	r26, 0x48	; 72
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	1f d0       	rcall	.+62     	; 0x15e <main>
 120:	b7 c6       	rjmp	.+3438   	; 0xe90 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <init_gpio>:
	*/
	//DDRB|=(1<<PB5);//LED13
	//sbi(DDRB,4);//digital 10
	//sbi(DDRB,5);//digital 11
	//sbi(DDRB,6);//digital 12
	sbi(DDRH,3);//digital 6 OC4A
 124:	e1 e0       	ldi	r30, 0x01	; 1
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	80 81       	ld	r24, Z
 12a:	88 60       	ori	r24, 0x08	; 8
 12c:	80 83       	st	Z, r24
	sbi(DDRH,4);//digital 7 OC4B
 12e:	80 81       	ld	r24, Z
 130:	80 61       	ori	r24, 0x10	; 16
 132:	80 83       	st	Z, r24
	sbi(DDRH,5);//digital 8 OC4C
 134:	80 81       	ld	r24, Z
 136:	80 62       	ori	r24, 0x20	; 32
 138:	80 83       	st	Z, r24
 13a:	08 95       	ret

0000013c <uart_putchar>:
		}
	}
	return true;
}
static int uart_putchar(char c, FILE *stream)
{
 13c:	cf 93       	push	r28
 13e:	c8 2f       	mov	r28, r24

	if (c == '\n')
 140:	8a 30       	cpi	r24, 0x0A	; 10
 142:	11 f4       	brne	.+4      	; 0x148 <uart_putchar+0xc>
	uart_putchar('\r', stream);
 144:	8d e0       	ldi	r24, 0x0D	; 13
 146:	fa df       	rcall	.-12     	; 0x13c <uart_putchar>
	while ( !( UCSR0A & (1<<UDRE0)) )
 148:	e0 ec       	ldi	r30, 0xC0	; 192
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	90 81       	ld	r25, Z
 14e:	95 ff       	sbrs	r25, 5
 150:	fd cf       	rjmp	.-6      	; 0x14c <uart_putchar+0x10>
	;
	/* Put data into buffer, sends the data */
	UDR0 = c;
 152:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	return 0;
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <main>:
uint8_t phase = 60;//sinTableSize / 3;         // Find phase shift and initial A, B C phase values

uint16_t pwm_delay=0;
int main(void)

{	
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	68 97       	sbiw	r28, 0x18	; 24
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	f8 94       	cli
 16c:	de bf       	out	0x3e, r29	; 62
 16e:	0f be       	out	0x3f, r0	; 63
 170:	cd bf       	out	0x3d, r28	; 61
	
	init_gpio();
 172:	d8 df       	rcall	.-80     	; 0x124 <init_gpio>
	i2c_init();
 174:	9c d3       	rcall	.+1848   	; 0x8ae <i2c_init>
	USART_Init(MY_UBRR);
 176:	80 e1       	ldi	r24, 0x10	; 16
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	4a d4       	rcall	.+2196   	; 0xa10 <USART_Init>
	uart_str = fdevopen(uart_putchar, NULL);
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	8e e9       	ldi	r24, 0x9E	; 158
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	bd d4       	rcall	.+2426   	; 0xb00 <fdevopen>
 186:	90 93 2d 04 	sts	0x042D, r25	; 0x80042d <uart_str+0x1>
 18a:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <uart_str>
	setup_timer2();
 18e:	83 d3       	rcall	.+1798   	; 0x896 <setup_timer2>
	setup_timer5();
 190:	73 d3       	rcall	.+1766   	; 0x878 <setup_timer5>
	setup_timer3();
 192:	63 d3       	rcall	.+1734   	; 0x85a <setup_timer3>
	setup_timer4();//pwm
 194:	4e d3       	rcall	.+1692   	; 0x832 <setup_timer4>
	Enable_timer3_compare_interrupt();
 196:	6a d3       	rcall	.+1748   	; 0x86c <Enable_timer3_compare_interrupt>
	Enable_timer5_compare_interrupt();
 198:	78 d3       	rcall	.+1776   	; 0x88a <Enable_timer5_compare_interrupt>
	Enable_timer2_overflow_interrupt();
 19a:	83 d3       	rcall	.+1798   	; 0x8a2 <Enable_timer2_overflow_interrupt>
	OCR3A=159;//interrupt every 10us
 19c:	8f e9       	ldi	r24, 0x9F	; 159
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 1a4:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
	OCR5A=4000;
 1a8:	80 ea       	ldi	r24, 0xA0	; 160
 1aa:	9f e0       	ldi	r25, 0x0F	; 15
 1ac:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 1b0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	float acc_total_vector=0;
	float angle_pitch_acc=0;
	float angle_roll_acc=0;
	bool set_gyro_angles=false;
	#ifdef CALIBERATED_DATA
		int32_t gyroX_calib=0;
 1b4:	1d 86       	std	Y+13, r1	; 0x0d
 1b6:	1e 86       	std	Y+14, r1	; 0x0e
 1b8:	1f 86       	std	Y+15, r1	; 0x0f
 1ba:	18 8a       	std	Y+16, r1	; 0x10
		int32_t gyroY_calib=0;
 1bc:	19 8a       	std	Y+17, r1	; 0x11
 1be:	1a 8a       	std	Y+18, r1	; 0x12
 1c0:	1b 8a       	std	Y+19, r1	; 0x13
 1c2:	1c 8a       	std	Y+20, r1	; 0x14
		int32_t gyroZ_calib=0;
 1c4:	1d 8a       	std	Y+21, r1	; 0x15
 1c6:	1e 8a       	std	Y+22, r1	; 0x16
 1c8:	1f 8a       	std	Y+23, r1	; 0x17
 1ca:	18 8e       	std	Y+24, r1	; 0x18
		int32_t accelX_calib=0;
		int32_t accelY_calib=0;
		int32_t accelZ_calib=0;
		mpu6050_calibrate_gyro(&gyroX_calib,&gyroY_calib,&gyroZ_calib);
 1cc:	ae 01       	movw	r20, r28
 1ce:	4b 5e       	subi	r20, 0xEB	; 235
 1d0:	5f 4f       	sbci	r21, 0xFF	; 255
 1d2:	be 01       	movw	r22, r28
 1d4:	6f 5e       	subi	r22, 0xEF	; 239
 1d6:	7f 4f       	sbci	r23, 0xFF	; 255
 1d8:	ce 01       	movw	r24, r28
 1da:	0d 96       	adiw	r24, 0x0d	; 13
 1dc:	ac d1       	rcall	.+856    	; 0x536 <mpu6050_calibrate_gyro>
		//mpu6050_calibrate_accel(&accelX_calib,&accelY_calib,&accelZ_calib);
	#endif
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV,7);
 1de:	67 e0       	ldi	r22, 0x07	; 7
 1e0:	89 e1       	ldi	r24, 0x19	; 25
 1e2:	60 d2       	rcall	.+1216   	; 0x6a4 <mpu6050_writeByte>
	mpu6050_writeByte(MPU6050_RA_CONFIG,0x00);
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	8a e1       	ldi	r24, 0x1A	; 26
 1e8:	5d d2       	rcall	.+1210   	; 0x6a4 <mpu6050_writeByte>
	mpu6050_writeByte(MPU6050_RA_GYRO_CONFIG,0x08);//gyro sensitivity set to 500 o/s
 1ea:	68 e0       	ldi	r22, 0x08	; 8
 1ec:	8b e1       	ldi	r24, 0x1B	; 27
 1ee:	5a d2       	rcall	.+1204   	; 0x6a4 <mpu6050_writeByte>
	mpu6050_writeByte(MPU6050_RA_ACCEL_CONFIG,0x10);//accel sensitivity -/+ 8g
 1f0:	60 e1       	ldi	r22, 0x10	; 16
 1f2:	8c e1       	ldi	r24, 0x1C	; 28
 1f4:	57 d2       	rcall	.+1198   	; 0x6a4 <mpu6050_writeByte>
	mpu6050_writeByte(MPU6050_RA_PWR_MGMT_1,0x01);
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	8b e6       	ldi	r24, 0x6B	; 107
 1fa:	54 d2       	rcall	.+1192   	; 0x6a4 <mpu6050_writeByte>
	
	/*-----------------end---------------*/
	sei();
 1fc:	78 94       	sei
	uint32_t timer1=_10micros;
 1fe:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <_10micros>
 202:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <_10micros+0x1>
 206:	a0 91 28 04 	lds	r26, 0x0428	; 0x800428 <_10micros+0x2>
 20a:	b0 91 29 04 	lds	r27, 0x0429	; 0x800429 <_10micros+0x3>
    while (1) 
    {
    	mpu6050_getRawData(&accel_x,&accel_y,&accel_z,&gyro_x,&gyro_y,&gyro_z);//15us to do
 20e:	ce 01       	movw	r24, r28
 210:	05 96       	adiw	r24, 0x05	; 5
 212:	7c 01       	movw	r14, r24
 214:	8e 01       	movw	r16, r28
 216:	0d 5f       	subi	r16, 0xFD	; 253
 218:	1f 4f       	sbci	r17, 0xFF	; 255
 21a:	9e 01       	movw	r18, r28
 21c:	2f 5f       	subi	r18, 0xFF	; 255
 21e:	3f 4f       	sbci	r19, 0xFF	; 255
 220:	ae 01       	movw	r20, r28
 222:	45 5f       	subi	r20, 0xF5	; 245
 224:	5f 4f       	sbci	r21, 0xFF	; 255
 226:	be 01       	movw	r22, r28
 228:	67 5f       	subi	r22, 0xF7	; 247
 22a:	7f 4f       	sbci	r23, 0xFF	; 255
 22c:	02 96       	adiw	r24, 0x02	; 2
 22e:	96 d2       	rcall	.+1324   	; 0x75c <mpu6050_getRawData>
    	double dt = (double)((_10micros - timer1));
 230:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <_10micros>
 234:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <_10micros+0x1>
 238:	a0 91 28 04 	lds	r26, 0x0428	; 0x800428 <_10micros+0x2>
 23c:	b0 91 29 04 	lds	r27, 0x0429	; 0x800429 <_10micros+0x3>
			#ifdef CALIBERATED_DATA
				accX;
				accY;
				accZ;
				grX;
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	9a 81       	ldd	r25, Y+2	; 0x02
 244:	2d 85       	ldd	r18, Y+13	; 0x0d
 246:	3e 85       	ldd	r19, Y+14	; 0x0e
 248:	82 1b       	sub	r24, r18
 24a:	93 0b       	sbc	r25, r19
 24c:	9a 83       	std	Y+2, r25	; 0x02
 24e:	89 83       	std	Y+1, r24	; 0x01
				grY;
 250:	8b 81       	ldd	r24, Y+3	; 0x03
 252:	9c 81       	ldd	r25, Y+4	; 0x04
 254:	29 89       	ldd	r18, Y+17	; 0x11
 256:	3a 89       	ldd	r19, Y+18	; 0x12
 258:	82 1b       	sub	r24, r18
 25a:	93 0b       	sbc	r25, r19
 25c:	9c 83       	std	Y+4, r25	; 0x04
 25e:	8b 83       	std	Y+3, r24	; 0x03
				grZ;
 260:	8d 81       	ldd	r24, Y+5	; 0x05
 262:	9e 81       	ldd	r25, Y+6	; 0x06
 264:	2d 89       	ldd	r18, Y+21	; 0x15
 266:	3e 89       	ldd	r19, Y+22	; 0x16
 268:	82 1b       	sub	r24, r18
 26a:	93 0b       	sbc	r25, r19
 26c:	9e 83       	std	Y+6, r25	; 0x06
 26e:	8d 83       	std	Y+5, r24	; 0x05
					 angle_roll = angle_roll_acc;                                       //Set the gyro roll angle equal to the accelerometer roll angle
					 set_gyro_angles = true;                                            //Set the IMU started flag
				}
			#endif				
		#endif  
	}
 270:	ce cf       	rjmp	.-100    	; 0x20e <main+0xb0>

00000272 <__vector_15>:
	return 0;
}
ISR(TIMER2_OVF_vect)
{
 272:	1f 92       	push	r1
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	0b b6       	in	r0, 0x3b	; 59
 27e:	0f 92       	push	r0
 280:	2f 93       	push	r18
 282:	3f 93       	push	r19
 284:	4f 93       	push	r20
 286:	5f 93       	push	r21
 288:	6f 93       	push	r22
 28a:	7f 93       	push	r23
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
 290:	af 93       	push	r26
 292:	bf 93       	push	r27
 294:	ef 93       	push	r30
 296:	ff 93       	push	r31
	TCNT2=248;
 298:	88 ef       	ldi	r24, 0xF8	; 248
 29a:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
	++_micros;
 29e:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <_micros>
 2a2:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <_micros+0x1>
 2a6:	a0 91 24 04 	lds	r26, 0x0424	; 0x800424 <_micros+0x2>
 2aa:	b0 91 25 04 	lds	r27, 0x0425	; 0x800425 <_micros+0x3>
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	a1 1d       	adc	r26, r1
 2b2:	b1 1d       	adc	r27, r1
 2b4:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <_micros>
 2b8:	90 93 23 04 	sts	0x0423, r25	; 0x800423 <_micros+0x1>
 2bc:	a0 93 24 04 	sts	0x0424, r26	; 0x800424 <_micros+0x2>
 2c0:	b0 93 25 04 	sts	0x0425, r27	; 0x800425 <_micros+0x3>
	if(_micros>1000000)
 2c4:	81 34       	cpi	r24, 0x41	; 65
 2c6:	92 44       	sbci	r25, 0x42	; 66
 2c8:	af 40       	sbci	r26, 0x0F	; 15
 2ca:	b1 05       	cpc	r27, r1
 2cc:	50 f0       	brcs	.+20     	; 0x2e2 <__vector_15+0x70>
	{	
		USART_Transmit(0xd3);
 2ce:	83 ed       	ldi	r24, 0xD3	; 211
 2d0:	aa d3       	rcall	.+1876   	; 0xa26 <USART_Transmit>
		_micros=0;
 2d2:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <_micros>
 2d6:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <_micros+0x1>
 2da:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <_micros+0x2>
 2de:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <_micros+0x3>
	}
	
}
 2e2:	ff 91       	pop	r31
 2e4:	ef 91       	pop	r30
 2e6:	bf 91       	pop	r27
 2e8:	af 91       	pop	r26
 2ea:	9f 91       	pop	r25
 2ec:	8f 91       	pop	r24
 2ee:	7f 91       	pop	r23
 2f0:	6f 91       	pop	r22
 2f2:	5f 91       	pop	r21
 2f4:	4f 91       	pop	r20
 2f6:	3f 91       	pop	r19
 2f8:	2f 91       	pop	r18
 2fa:	0f 90       	pop	r0
 2fc:	0b be       	out	0x3b, r0	; 59
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <__vector_32>:
ISR(TIMER3_COMPA_vect)//10 microsecconed timer interrupt
{
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	8f 93       	push	r24
 314:	9f 93       	push	r25
 316:	af 93       	push	r26
 318:	bf 93       	push	r27
	++_10micros;
 31a:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <_10micros>
 31e:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <_10micros+0x1>
 322:	a0 91 28 04 	lds	r26, 0x0428	; 0x800428 <_10micros+0x2>
 326:	b0 91 29 04 	lds	r27, 0x0429	; 0x800429 <_10micros+0x3>
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	a1 1d       	adc	r26, r1
 32e:	b1 1d       	adc	r27, r1
 330:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <_10micros>
 334:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <_10micros+0x1>
 338:	a0 93 28 04 	sts	0x0428, r26	; 0x800428 <_10micros+0x2>
 33c:	b0 93 29 04 	sts	0x0429, r27	; 0x800429 <_10micros+0x3>
	//HS_U_INVERSE;		
}
 340:	bf 91       	pop	r27
 342:	af 91       	pop	r26
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	0f 90       	pop	r0
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	0f 90       	pop	r0
 34e:	1f 90       	pop	r1
 350:	18 95       	reti

00000352 <PWM_update>:
	PWM_update();
	//PWM_update();
}
void PWM_update()
{
	U_PWM=pwmSin[U_step];
 352:	e0 91 2a 04 	lds	r30, 0x042A	; 0x80042a <U_step>
 356:	f0 91 2b 04 	lds	r31, 0x042B	; 0x80042b <U_step+0x1>
 35a:	e2 5f       	subi	r30, 0xF2	; 242
 35c:	fd 4f       	sbci	r31, 0xFD	; 253
 35e:	80 81       	ld	r24, Z
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 366:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
	V_PWM=pwmSin[V_step];
 36a:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <V_step>
 36e:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <V_step+0x1>
 372:	e2 5f       	subi	r30, 0xF2	; 242
 374:	fd 4f       	sbci	r31, 0xFD	; 253
 376:	80 81       	ld	r24, Z
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
 37e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
	W_PWM=pwmSin[W_step];
 382:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <W_step>
 386:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <W_step+0x1>
 38a:	e2 5f       	subi	r30, 0xF2	; 242
 38c:	fd 4f       	sbci	r31, 0xFD	; 253
 38e:	80 81       	ld	r24, Z
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
 396:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
	U_step=U_step+incr;
 39a:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <incr>
 39e:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <incr+0x1>
 3a2:	40 91 2a 04 	lds	r20, 0x042A	; 0x80042a <U_step>
 3a6:	50 91 2b 04 	lds	r21, 0x042B	; 0x80042b <U_step+0x1>
 3aa:	46 0f       	add	r20, r22
 3ac:	57 1f       	adc	r21, r23
 3ae:	50 93 2b 04 	sts	0x042B, r21	; 0x80042b <U_step+0x1>
 3b2:	40 93 2a 04 	sts	0x042A, r20	; 0x80042a <U_step>
	V_step=V_step+incr;
 3b6:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <V_step>
 3ba:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <V_step+0x1>
 3be:	26 0f       	add	r18, r22
 3c0:	37 1f       	adc	r19, r23
 3c2:	30 93 0b 02 	sts	0x020B, r19	; 0x80020b <V_step+0x1>
 3c6:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <V_step>
	W_step=W_step+incr;
 3ca:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <W_step>
 3ce:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <W_step+0x1>
 3d2:	86 0f       	add	r24, r22
 3d4:	97 1f       	adc	r25, r23
 3d6:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <W_step+0x1>
 3da:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <W_step>
	if(U_step > sinTableSize)  U_step = 0;
 3de:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <sinTableSize>
 3e2:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <sinTableSize+0x1>
 3e6:	64 17       	cp	r22, r20
 3e8:	75 07       	cpc	r23, r21
 3ea:	2c f4       	brge	.+10     	; 0x3f6 <PWM_update+0xa4>
 3ec:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <U_step+0x1>
 3f0:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <U_step>
 3f4:	0a c0       	rjmp	.+20     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	if(U_step < 0)  U_step = sinTableSize;
 3f6:	40 91 2a 04 	lds	r20, 0x042A	; 0x80042a <U_step>
 3fa:	50 91 2b 04 	lds	r21, 0x042B	; 0x80042b <U_step+0x1>
 3fe:	55 23       	and	r21, r21
 400:	24 f4       	brge	.+8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 402:	70 93 2b 04 	sts	0x042B, r23	; 0x80042b <U_step+0x1>
 406:	60 93 2a 04 	sts	0x042A, r22	; 0x80042a <U_step>
	
	if(V_step > sinTableSize)  V_step = 0;
 40a:	62 17       	cp	r22, r18
 40c:	73 07       	cpc	r23, r19
 40e:	2c f4       	brge	.+10     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 410:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <V_step+0x1>
 414:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <V_step>
 418:	0a c0       	rjmp	.+20     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	if(V_step < 0)  V_step = sinTableSize;
 41a:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <V_step>
 41e:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <V_step+0x1>
 422:	33 23       	and	r19, r19
 424:	24 f4       	brge	.+8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 426:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <V_step+0x1>
 42a:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <V_step>
	
	if(W_step > sinTableSize)  W_step = 0;
 42e:	68 17       	cp	r22, r24
 430:	79 07       	cpc	r23, r25
 432:	2c f4       	brge	.+10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 434:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <W_step+0x1>
 438:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <W_step>
 43c:	0a c0       	rjmp	.+20     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	if(W_step < 0) W_step = sinTableSize;
 43e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <W_step>
 442:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <W_step+0x1>
 446:	99 23       	and	r25, r25
 448:	24 f4       	brge	.+8      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44a:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <W_step+0x1>
 44e:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <W_step>
	//_delay_us(100);
	OCR5A=pwm_delay;
 452:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <__data_end>
 456:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <__data_end+0x1>
 45a:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 45e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 462:	08 95       	ret

00000464 <__vector_47>:
{
	++_10micros;
	//HS_U_INVERSE;		
}
ISR(TIMER5_COMPA_vect)//10 microsecconed timer interrupt
{
 464:	1f 92       	push	r1
 466:	0f 92       	push	r0
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
 46e:	0b b6       	in	r0, 0x3b	; 59
 470:	0f 92       	push	r0
 472:	2f 93       	push	r18
 474:	3f 93       	push	r19
 476:	4f 93       	push	r20
 478:	5f 93       	push	r21
 47a:	6f 93       	push	r22
 47c:	7f 93       	push	r23
 47e:	8f 93       	push	r24
 480:	9f 93       	push	r25
 482:	af 93       	push	r26
 484:	bf 93       	push	r27
 486:	ef 93       	push	r30
 488:	ff 93       	push	r31
	PWM_update();
 48a:	63 df       	rcall	.-314    	; 0x352 <PWM_update>
	//PWM_update();
}
 48c:	ff 91       	pop	r31
 48e:	ef 91       	pop	r30
 490:	bf 91       	pop	r27
 492:	af 91       	pop	r26
 494:	9f 91       	pop	r25
 496:	8f 91       	pop	r24
 498:	7f 91       	pop	r23
 49a:	6f 91       	pop	r22
 49c:	5f 91       	pop	r21
 49e:	4f 91       	pop	r20
 4a0:	3f 91       	pop	r19
 4a2:	2f 91       	pop	r18
 4a4:	0f 90       	pop	r0
 4a6:	0b be       	out	0x3b, r0	; 59
 4a8:	0f 90       	pop	r0
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	0f 90       	pop	r0
 4ae:	1f 90       	pop	r1
 4b0:	18 95       	reti

000004b2 <mpu6050_readByte>:
	printf("  ");
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/
}
 4b2:	cf 93       	push	r28
 4b4:	c8 2f       	mov	r28, r24
 4b6:	80 ed       	ldi	r24, 0xD0	; 208
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	ff d1       	rcall	.+1022   	; 0x8ba <i2c_start>
 4bc:	8c 2f       	mov	r24, r28
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	52 d2       	rcall	.+1188   	; 0x966 <i2c_write>
 4c2:	41 d2       	rcall	.+1154   	; 0x946 <i2c_stop>
 4c4:	81 ed       	ldi	r24, 0xD1	; 209
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	f8 d1       	rcall	.+1008   	; 0x8ba <i2c_start>
 4ca:	88 d2       	rcall	.+1296   	; 0x9dc <i2c_readNak>
 4cc:	c8 2f       	mov	r28, r24
 4ce:	3b d2       	rcall	.+1142   	; 0x946 <i2c_stop>
 4d0:	8c 2f       	mov	r24, r28
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <mpu6050_read_gyroX>:
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	83 e4       	ldi	r24, 0x43	; 67
 4dc:	ea df       	rcall	.-44     	; 0x4b2 <mpu6050_readByte>
 4de:	c8 2f       	mov	r28, r24
 4e0:	d0 e0       	ldi	r29, 0x00	; 0
 4e2:	dc 2f       	mov	r29, r28
 4e4:	cc 27       	eor	r28, r28
 4e6:	84 e4       	ldi	r24, 0x44	; 68
 4e8:	e4 df       	rcall	.-56     	; 0x4b2 <mpu6050_readByte>
 4ea:	9e 01       	movw	r18, r28
 4ec:	28 2b       	or	r18, r24
 4ee:	c9 01       	movw	r24, r18
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	08 95       	ret

000004f6 <mpu6050_read_gyroY>:
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	85 e4       	ldi	r24, 0x45	; 69
 4fc:	da df       	rcall	.-76     	; 0x4b2 <mpu6050_readByte>
 4fe:	c8 2f       	mov	r28, r24
 500:	d0 e0       	ldi	r29, 0x00	; 0
 502:	dc 2f       	mov	r29, r28
 504:	cc 27       	eor	r28, r28
 506:	86 e4       	ldi	r24, 0x46	; 70
 508:	d4 df       	rcall	.-88     	; 0x4b2 <mpu6050_readByte>
 50a:	9e 01       	movw	r18, r28
 50c:	28 2b       	or	r18, r24
 50e:	c9 01       	movw	r24, r18
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	08 95       	ret

00000516 <mpu6050_read_gyroZ>:
 516:	cf 93       	push	r28
 518:	df 93       	push	r29
 51a:	87 e4       	ldi	r24, 0x47	; 71
 51c:	ca df       	rcall	.-108    	; 0x4b2 <mpu6050_readByte>
 51e:	c8 2f       	mov	r28, r24
 520:	d0 e0       	ldi	r29, 0x00	; 0
 522:	dc 2f       	mov	r29, r28
 524:	cc 27       	eor	r28, r28
 526:	88 e4       	ldi	r24, 0x48	; 72
 528:	c4 df       	rcall	.-120    	; 0x4b2 <mpu6050_readByte>
 52a:	9e 01       	movw	r18, r28
 52c:	28 2b       	or	r18, r24
 52e:	c9 01       	movw	r24, r18
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <mpu6050_calibrate_gyro>:
 536:	cf 92       	push	r12
 538:	df 92       	push	r13
 53a:	ef 92       	push	r14
 53c:	ff 92       	push	r15
 53e:	0f 93       	push	r16
 540:	1f 93       	push	r17
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	6c 01       	movw	r12, r24
 548:	7b 01       	movw	r14, r22
 54a:	8a 01       	movw	r16, r20
 54c:	8e ee       	ldi	r24, 0xEE	; 238
 54e:	93 e0       	ldi	r25, 0x03	; 3
 550:	21 d3       	rcall	.+1602   	; 0xb94 <puts>
 552:	c4 e1       	ldi	r28, 0x14	; 20
 554:	d0 e0       	ldi	r29, 0x00	; 0
 556:	bf df       	rcall	.-130    	; 0x4d6 <mpu6050_read_gyroX>
 558:	f6 01       	movw	r30, r12
 55a:	40 81       	ld	r20, Z
 55c:	51 81       	ldd	r21, Z+1	; 0x01
 55e:	62 81       	ldd	r22, Z+2	; 0x02
 560:	73 81       	ldd	r23, Z+3	; 0x03
 562:	48 0f       	add	r20, r24
 564:	59 1f       	adc	r21, r25
 566:	61 1d       	adc	r22, r1
 568:	71 1d       	adc	r23, r1
 56a:	40 83       	st	Z, r20
 56c:	51 83       	std	Z+1, r21	; 0x01
 56e:	62 83       	std	Z+2, r22	; 0x02
 570:	73 83       	std	Z+3, r23	; 0x03
 572:	c1 df       	rcall	.-126    	; 0x4f6 <mpu6050_read_gyroY>
 574:	f7 01       	movw	r30, r14
 576:	40 81       	ld	r20, Z
 578:	51 81       	ldd	r21, Z+1	; 0x01
 57a:	62 81       	ldd	r22, Z+2	; 0x02
 57c:	73 81       	ldd	r23, Z+3	; 0x03
 57e:	48 0f       	add	r20, r24
 580:	59 1f       	adc	r21, r25
 582:	61 1d       	adc	r22, r1
 584:	71 1d       	adc	r23, r1
 586:	40 83       	st	Z, r20
 588:	51 83       	std	Z+1, r21	; 0x01
 58a:	62 83       	std	Z+2, r22	; 0x02
 58c:	73 83       	std	Z+3, r23	; 0x03
 58e:	c3 df       	rcall	.-122    	; 0x516 <mpu6050_read_gyroZ>
 590:	f8 01       	movw	r30, r16
 592:	40 81       	ld	r20, Z
 594:	51 81       	ldd	r21, Z+1	; 0x01
 596:	62 81       	ldd	r22, Z+2	; 0x02
 598:	73 81       	ldd	r23, Z+3	; 0x03
 59a:	48 0f       	add	r20, r24
 59c:	59 1f       	adc	r21, r25
 59e:	61 1d       	adc	r22, r1
 5a0:	71 1d       	adc	r23, r1
 5a2:	40 83       	st	Z, r20
 5a4:	51 83       	std	Z+1, r21	; 0x01
 5a6:	62 83       	std	Z+2, r22	; 0x02
 5a8:	73 83       	std	Z+3, r23	; 0x03
 5aa:	21 97       	sbiw	r28, 0x01	; 1
 5ac:	a1 f6       	brne	.-88     	; 0x556 <mpu6050_calibrate_gyro+0x20>
 5ae:	f6 01       	movw	r30, r12
 5b0:	60 81       	ld	r22, Z
 5b2:	71 81       	ldd	r23, Z+1	; 0x01
 5b4:	82 81       	ldd	r24, Z+2	; 0x02
 5b6:	93 81       	ldd	r25, Z+3	; 0x03
 5b8:	99 23       	and	r25, r25
 5ba:	ac f4       	brge	.+42     	; 0x5e6 <mpu6050_calibrate_gyro+0xb0>
 5bc:	9b 01       	movw	r18, r22
 5be:	77 23       	and	r23, r23
 5c0:	24 f4       	brge	.+8      	; 0x5ca <mpu6050_calibrate_gyro+0x94>
 5c2:	22 27       	eor	r18, r18
 5c4:	33 27       	eor	r19, r19
 5c6:	26 1b       	sub	r18, r22
 5c8:	37 0b       	sbc	r19, r23
 5ca:	c9 01       	movw	r24, r18
 5cc:	64 e1       	ldi	r22, 0x14	; 20
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	32 d2       	rcall	.+1124   	; 0xa36 <__divmodhi4>
 5d2:	cb 01       	movw	r24, r22
 5d4:	77 0f       	add	r23, r23
 5d6:	aa 0b       	sbc	r26, r26
 5d8:	bb 0b       	sbc	r27, r27
 5da:	f6 01       	movw	r30, r12
 5dc:	80 83       	st	Z, r24
 5de:	91 83       	std	Z+1, r25	; 0x01
 5e0:	a2 83       	std	Z+2, r26	; 0x02
 5e2:	b3 83       	std	Z+3, r27	; 0x03
 5e4:	0a c0       	rjmp	.+20     	; 0x5fa <mpu6050_calibrate_gyro+0xc4>
 5e6:	24 e1       	ldi	r18, 0x14	; 20
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	40 e0       	ldi	r20, 0x00	; 0
 5ec:	50 e0       	ldi	r21, 0x00	; 0
 5ee:	36 d2       	rcall	.+1132   	; 0xa5c <__divmodsi4>
 5f0:	f6 01       	movw	r30, r12
 5f2:	20 83       	st	Z, r18
 5f4:	31 83       	std	Z+1, r19	; 0x01
 5f6:	42 83       	std	Z+2, r20	; 0x02
 5f8:	53 83       	std	Z+3, r21	; 0x03
 5fa:	f7 01       	movw	r30, r14
 5fc:	60 81       	ld	r22, Z
 5fe:	71 81       	ldd	r23, Z+1	; 0x01
 600:	82 81       	ldd	r24, Z+2	; 0x02
 602:	93 81       	ldd	r25, Z+3	; 0x03
 604:	99 23       	and	r25, r25
 606:	ac f4       	brge	.+42     	; 0x632 <mpu6050_calibrate_gyro+0xfc>
 608:	9b 01       	movw	r18, r22
 60a:	77 23       	and	r23, r23
 60c:	24 f4       	brge	.+8      	; 0x616 <mpu6050_calibrate_gyro+0xe0>
 60e:	22 27       	eor	r18, r18
 610:	33 27       	eor	r19, r19
 612:	26 1b       	sub	r18, r22
 614:	37 0b       	sbc	r19, r23
 616:	c9 01       	movw	r24, r18
 618:	64 e1       	ldi	r22, 0x14	; 20
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	0c d2       	rcall	.+1048   	; 0xa36 <__divmodhi4>
 61e:	cb 01       	movw	r24, r22
 620:	77 0f       	add	r23, r23
 622:	aa 0b       	sbc	r26, r26
 624:	bb 0b       	sbc	r27, r27
 626:	f7 01       	movw	r30, r14
 628:	80 83       	st	Z, r24
 62a:	91 83       	std	Z+1, r25	; 0x01
 62c:	a2 83       	std	Z+2, r26	; 0x02
 62e:	b3 83       	std	Z+3, r27	; 0x03
 630:	0a c0       	rjmp	.+20     	; 0x646 <mpu6050_calibrate_gyro+0x110>
 632:	24 e1       	ldi	r18, 0x14	; 20
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	40 e0       	ldi	r20, 0x00	; 0
 638:	50 e0       	ldi	r21, 0x00	; 0
 63a:	10 d2       	rcall	.+1056   	; 0xa5c <__divmodsi4>
 63c:	f7 01       	movw	r30, r14
 63e:	20 83       	st	Z, r18
 640:	31 83       	std	Z+1, r19	; 0x01
 642:	42 83       	std	Z+2, r20	; 0x02
 644:	53 83       	std	Z+3, r21	; 0x03
 646:	f8 01       	movw	r30, r16
 648:	60 81       	ld	r22, Z
 64a:	71 81       	ldd	r23, Z+1	; 0x01
 64c:	82 81       	ldd	r24, Z+2	; 0x02
 64e:	93 81       	ldd	r25, Z+3	; 0x03
 650:	99 23       	and	r25, r25
 652:	ac f4       	brge	.+42     	; 0x67e <mpu6050_calibrate_gyro+0x148>
 654:	9b 01       	movw	r18, r22
 656:	77 23       	and	r23, r23
 658:	24 f4       	brge	.+8      	; 0x662 <mpu6050_calibrate_gyro+0x12c>
 65a:	22 27       	eor	r18, r18
 65c:	33 27       	eor	r19, r19
 65e:	26 1b       	sub	r18, r22
 660:	37 0b       	sbc	r19, r23
 662:	c9 01       	movw	r24, r18
 664:	64 e1       	ldi	r22, 0x14	; 20
 666:	70 e0       	ldi	r23, 0x00	; 0
 668:	e6 d1       	rcall	.+972    	; 0xa36 <__divmodhi4>
 66a:	cb 01       	movw	r24, r22
 66c:	77 0f       	add	r23, r23
 66e:	aa 0b       	sbc	r26, r26
 670:	bb 0b       	sbc	r27, r27
 672:	f8 01       	movw	r30, r16
 674:	80 83       	st	Z, r24
 676:	91 83       	std	Z+1, r25	; 0x01
 678:	a2 83       	std	Z+2, r26	; 0x02
 67a:	b3 83       	std	Z+3, r27	; 0x03
 67c:	0a c0       	rjmp	.+20     	; 0x692 <mpu6050_calibrate_gyro+0x15c>
 67e:	24 e1       	ldi	r18, 0x14	; 20
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	40 e0       	ldi	r20, 0x00	; 0
 684:	50 e0       	ldi	r21, 0x00	; 0
 686:	ea d1       	rcall	.+980    	; 0xa5c <__divmodsi4>
 688:	f8 01       	movw	r30, r16
 68a:	20 83       	st	Z, r18
 68c:	31 83       	std	Z+1, r19	; 0x01
 68e:	42 83       	std	Z+2, r20	; 0x02
 690:	53 83       	std	Z+3, r21	; 0x03
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	1f 91       	pop	r17
 698:	0f 91       	pop	r16
 69a:	ff 90       	pop	r15
 69c:	ef 90       	pop	r14
 69e:	df 90       	pop	r13
 6a0:	cf 90       	pop	r12
 6a2:	08 95       	ret

000006a4 <mpu6050_writeByte>:
	uint8_t byteToReturn=i2c_readNak();
	i2c_stop();
	return byteToReturn;
}
void mpu6050_writeByte(uint8_t wereToWrite,uint8_t byteToWrite)//writebyte
{
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
 6a8:	d8 2f       	mov	r29, r24
 6aa:	c6 2f       	mov	r28, r22
	i2c_start(MPU6050_WRITE);
 6ac:	80 ed       	ldi	r24, 0xD0	; 208
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	04 d1       	rcall	.+520    	; 0x8ba <i2c_start>
	i2c_write(wereToWrite);
 6b2:	8d 2f       	mov	r24, r29
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	57 d1       	rcall	.+686    	; 0x966 <i2c_write>
	i2c_write(byteToWrite);
 6b8:	8c 2f       	mov	r24, r28
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	54 d1       	rcall	.+680    	; 0x966 <i2c_write>
	i2c_stop();
 6be:	43 d1       	rcall	.+646    	; 0x946 <i2c_stop>
}
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	08 95       	ret

000006c6 <mpu6050_readBytes>:
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
 6c6:	af 92       	push	r10
 6c8:	bf 92       	push	r11
 6ca:	df 92       	push	r13
 6cc:	ef 92       	push	r14
 6ce:	ff 92       	push	r15
 6d0:	0f 93       	push	r16
 6d2:	1f 93       	push	r17
 6d4:	cf 93       	push	r28
 6d6:	df 93       	push	r29
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
 6d8:	66 23       	and	r22, r22
 6da:	a1 f1       	breq	.+104    	; 0x744 <mpu6050_readBytes+0x7e>
 6dc:	c5 2f       	mov	r28, r21
 6de:	d4 2f       	mov	r29, r20
 6e0:	d6 2e       	mov	r13, r22
 6e2:	18 2f       	mov	r17, r24
		//request register
		i2c_start(MPU6050_WRITE);
 6e4:	80 ed       	ldi	r24, 0xD0	; 208
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	e8 d0       	rcall	.+464    	; 0x8ba <i2c_start>
		i2c_write(regAddr);
 6ea:	81 2f       	mov	r24, r17
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	3b d1       	rcall	.+630    	; 0x966 <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6f0:	85 e3       	ldi	r24, 0x35	; 53
 6f2:	8a 95       	dec	r24
 6f4:	f1 f7       	brne	.-4      	; 0x6f2 <mpu6050_readBytes+0x2c>
 6f6:	00 00       	nop
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
 6f8:	81 ed       	ldi	r24, 0xD1	; 209
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	de d0       	rcall	.+444    	; 0x8ba <i2c_start>
 6fe:	0d 2f       	mov	r16, r29
 700:	1c 2f       	mov	r17, r28
 702:	ee 24       	eor	r14, r14
 704:	ea 94       	dec	r14
 706:	ed 0c       	add	r14, r13
 708:	f1 2c       	mov	r15, r1
 70a:	ef ef       	ldi	r30, 0xFF	; 255
 70c:	ee 1a       	sub	r14, r30
 70e:	fe 0a       	sbc	r15, r30
 710:	c0 e0       	ldi	r28, 0x00	; 0
 712:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
 714:	ad 2c       	mov	r10, r13
 716:	b1 2c       	mov	r11, r1
 718:	f1 e0       	ldi	r31, 0x01	; 1
 71a:	af 1a       	sub	r10, r31
 71c:	b1 08       	sbc	r11, r1
 71e:	ca 15       	cp	r28, r10
 720:	db 05       	cpc	r29, r11
 722:	21 f4       	brne	.+8      	; 0x72c <mpu6050_readBytes+0x66>
			data[i] = i2c_readNak();
 724:	5b d1       	rcall	.+694    	; 0x9dc <i2c_readNak>
 726:	f8 01       	movw	r30, r16
 728:	80 83       	st	Z, r24
 72a:	03 c0       	rjmp	.+6      	; 0x732 <mpu6050_readBytes+0x6c>
			else
			data[i] = i2c_readAck();
 72c:	3d d1       	rcall	.+634    	; 0x9a8 <i2c_readAck>
 72e:	f8 01       	movw	r30, r16
 730:	80 83       	st	Z, r24
 732:	21 96       	adiw	r28, 0x01	; 1
 734:	0f 5f       	subi	r16, 0xFF	; 255
 736:	1f 4f       	sbci	r17, 0xFF	; 255
		i2c_start(MPU6050_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
		for(i=0; i<length; i++) {
 738:	ce 15       	cp	r28, r14
 73a:	df 05       	cpc	r29, r15
 73c:	81 f7       	brne	.-32     	; 0x71e <mpu6050_readBytes+0x58>
 73e:	cd 2d       	mov	r28, r13
			if(i==length-1)
			data[i] = i2c_readNak();
			else
			data[i] = i2c_readAck();
		}
		i2c_stop();
 740:	02 d1       	rcall	.+516    	; 0x946 <i2c_stop>
 742:	01 c0       	rjmp	.+2      	; 0x746 <mpu6050_readBytes+0x80>
	i2c_write(byteToWrite);
	i2c_stop();
}
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
	uint8_t i = 0;
	int8_t count = 0;
 744:	c0 e0       	ldi	r28, 0x00	; 0
			data[i] = i2c_readAck();
		}
		i2c_stop();
	}
	return count;
}
 746:	8c 2f       	mov	r24, r28
 748:	df 91       	pop	r29
 74a:	cf 91       	pop	r28
 74c:	1f 91       	pop	r17
 74e:	0f 91       	pop	r16
 750:	ff 90       	pop	r15
 752:	ef 90       	pop	r14
 754:	df 90       	pop	r13
 756:	bf 90       	pop	r11
 758:	af 90       	pop	r10
 75a:	08 95       	ret

0000075c <mpu6050_getRawData>:
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
 75c:	6f 92       	push	r6
 75e:	7f 92       	push	r7
 760:	8f 92       	push	r8
 762:	9f 92       	push	r9
 764:	af 92       	push	r10
 766:	bf 92       	push	r11
 768:	cf 92       	push	r12
 76a:	df 92       	push	r13
 76c:	ef 92       	push	r14
 76e:	ff 92       	push	r15
 770:	0f 93       	push	r16
 772:	1f 93       	push	r17
 774:	cf 93       	push	r28
 776:	df 93       	push	r29
 778:	cd b7       	in	r28, 0x3d	; 61
 77a:	de b7       	in	r29, 0x3e	; 62
 77c:	2e 97       	sbiw	r28, 0x0e	; 14
 77e:	0f b6       	in	r0, 0x3f	; 63
 780:	f8 94       	cli
 782:	de bf       	out	0x3e, r29	; 62
 784:	0f be       	out	0x3f, r0	; 63
 786:	cd bf       	out	0x3d, r28	; 61
 788:	4c 01       	movw	r8, r24
 78a:	5b 01       	movw	r10, r22
 78c:	6a 01       	movw	r12, r20
 78e:	39 01       	movw	r6, r18
	uint8_t buffer[14];
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14,  buffer);
 790:	ae 01       	movw	r20, r28
 792:	4f 5f       	subi	r20, 0xFF	; 255
 794:	5f 4f       	sbci	r21, 0xFF	; 255
 796:	6e e0       	ldi	r22, 0x0E	; 14
 798:	8b e3       	ldi	r24, 0x3B	; 59
 79a:	95 df       	rcall	.-214    	; 0x6c6 <mpu6050_readBytes>
	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
 79c:	89 81       	ldd	r24, Y+1	; 0x01
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	98 2f       	mov	r25, r24
 7a2:	88 27       	eor	r24, r24
 7a4:	2a 81       	ldd	r18, Y+2	; 0x02
 7a6:	82 2b       	or	r24, r18
 7a8:	f4 01       	movw	r30, r8
 7aa:	91 83       	std	Z+1, r25	; 0x01
 7ac:	80 83       	st	Z, r24
	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
 7ae:	8b 81       	ldd	r24, Y+3	; 0x03
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	98 2f       	mov	r25, r24
 7b4:	88 27       	eor	r24, r24
 7b6:	2c 81       	ldd	r18, Y+4	; 0x04
 7b8:	82 2b       	or	r24, r18
 7ba:	f5 01       	movw	r30, r10
 7bc:	91 83       	std	Z+1, r25	; 0x01
 7be:	80 83       	st	Z, r24
	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
 7c0:	8d 81       	ldd	r24, Y+5	; 0x05
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	98 2f       	mov	r25, r24
 7c6:	88 27       	eor	r24, r24
 7c8:	2e 81       	ldd	r18, Y+6	; 0x06
 7ca:	82 2b       	or	r24, r18
 7cc:	f6 01       	movw	r30, r12
 7ce:	91 83       	std	Z+1, r25	; 0x01
 7d0:	80 83       	st	Z, r24
	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
 7d2:	89 85       	ldd	r24, Y+9	; 0x09
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	98 2f       	mov	r25, r24
 7d8:	88 27       	eor	r24, r24
 7da:	2a 85       	ldd	r18, Y+10	; 0x0a
 7dc:	82 2b       	or	r24, r18
 7de:	f3 01       	movw	r30, r6
 7e0:	91 83       	std	Z+1, r25	; 0x01
 7e2:	80 83       	st	Z, r24
	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
 7e4:	8b 85       	ldd	r24, Y+11	; 0x0b
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	98 2f       	mov	r25, r24
 7ea:	88 27       	eor	r24, r24
 7ec:	2c 85       	ldd	r18, Y+12	; 0x0c
 7ee:	82 2b       	or	r24, r18
 7f0:	f8 01       	movw	r30, r16
 7f2:	91 83       	std	Z+1, r25	; 0x01
 7f4:	80 83       	st	Z, r24
	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
 7f6:	8d 85       	ldd	r24, Y+13	; 0x0d
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	98 2f       	mov	r25, r24
 7fc:	88 27       	eor	r24, r24
 7fe:	2e 85       	ldd	r18, Y+14	; 0x0e
 800:	82 2b       	or	r24, r18
 802:	f7 01       	movw	r30, r14
 804:	91 83       	std	Z+1, r25	; 0x01
 806:	80 83       	st	Z, r24
 808:	2e 96       	adiw	r28, 0x0e	; 14
 80a:	0f b6       	in	r0, 0x3f	; 63
 80c:	f8 94       	cli
 80e:	de bf       	out	0x3e, r29	; 62
 810:	0f be       	out	0x3f, r0	; 63
 812:	cd bf       	out	0x3d, r28	; 61
 814:	df 91       	pop	r29
 816:	cf 91       	pop	r28
 818:	1f 91       	pop	r17
 81a:	0f 91       	pop	r16
 81c:	ff 90       	pop	r15
 81e:	ef 90       	pop	r14
 820:	df 90       	pop	r13
 822:	cf 90       	pop	r12
 824:	bf 90       	pop	r11
 826:	af 90       	pop	r10
 828:	9f 90       	pop	r9
 82a:	8f 90       	pop	r8
 82c:	7f 90       	pop	r7
 82e:	6f 90       	pop	r6
 830:	08 95       	ret

00000832 <setup_timer4>:
	sbi (TIMSK3, TOIE3);
}*/
/*-----------Timter 1-----------*/
void setup_timer4(void)
{
    sbi (TCCR4B, CS40);//prescakaer 256
 832:	e1 ea       	ldi	r30, 0xA1	; 161
 834:	f0 e0       	ldi	r31, 0x00	; 0
 836:	80 81       	ld	r24, Z
 838:	81 60       	ori	r24, 0x01	; 1
 83a:	80 83       	st	Z, r24
    sbi (TCCR4A, WGM40);//8 bit phase correct PWM
 83c:	e0 ea       	ldi	r30, 0xA0	; 160
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	80 81       	ld	r24, Z
 842:	81 60       	ori	r24, 0x01	; 1
 844:	80 83       	st	Z, r24
	
	//sbi (TCCR4A,COM4A0);
	sbi (TCCR4A,COM4A1);
 846:	80 81       	ld	r24, Z
 848:	80 68       	ori	r24, 0x80	; 128
 84a:	80 83       	st	Z, r24
	//sbi (TCCR4A,COM4B0);
	sbi (TCCR4A,COM4B1);
 84c:	80 81       	ld	r24, Z
 84e:	80 62       	ori	r24, 0x20	; 32
 850:	80 83       	st	Z, r24
	//sbi (TCCR4A,COM4C0);
	sbi (TCCR4A,COM4C1);
 852:	80 81       	ld	r24, Z
 854:	88 60       	ori	r24, 0x08	; 8
 856:	80 83       	st	Z, r24
 858:	08 95       	ret

0000085a <setup_timer3>:
void setup_timer3(void)
{
	//64 pres, 250.000 hz 0.000004s
	//sbi (TCCR5B, CS50);//only this no prescaling
	
	sbi (TCCR3B, CS30);//only this 8
 85a:	e1 e9       	ldi	r30, 0x91	; 145
 85c:	f0 e0       	ldi	r31, 0x00	; 0
 85e:	80 81       	ld	r24, Z
 860:	81 60       	ori	r24, 0x01	; 1
 862:	80 83       	st	Z, r24
	//sbi (TCCR5B, CS52);//only this 256
	sbi (TCCR3B, WGM32);//OCR4A compare interrupt
 864:	80 81       	ld	r24, Z
 866:	88 60       	ori	r24, 0x08	; 8
 868:	80 83       	st	Z, r24
 86a:	08 95       	ret

0000086c <Enable_timer3_compare_interrupt>:
}
void Enable_timer3_compare_interrupt()
{
	sbi (TIMSK3, OCIE3A);
 86c:	e1 e7       	ldi	r30, 0x71	; 113
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	80 81       	ld	r24, Z
 872:	82 60       	ori	r24, 0x02	; 2
 874:	80 83       	st	Z, r24
 876:	08 95       	ret

00000878 <setup_timer5>:
}
void setup_timer5(void)
{
	sbi (TCCR5B, CS50);//only this 8
 878:	e1 e2       	ldi	r30, 0x21	; 33
 87a:	f1 e0       	ldi	r31, 0x01	; 1
 87c:	80 81       	ld	r24, Z
 87e:	81 60       	ori	r24, 0x01	; 1
 880:	80 83       	st	Z, r24
	//sbi (TCCR5B, CS52);//only this 256
	sbi (TCCR5B, WGM52);//OCR4A compare interrupt
 882:	80 81       	ld	r24, Z
 884:	88 60       	ori	r24, 0x08	; 8
 886:	80 83       	st	Z, r24
 888:	08 95       	ret

0000088a <Enable_timer5_compare_interrupt>:
	
}
void Enable_timer5_compare_interrupt()
{
	sbi (TIMSK5, OCIE5A);
 88a:	e3 e7       	ldi	r30, 0x73	; 115
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	80 81       	ld	r24, Z
 890:	82 60       	ori	r24, 0x02	; 2
 892:	80 83       	st	Z, r24
 894:	08 95       	ret

00000896 <setup_timer2>:
}
void setup_timer2(void)
{
		sbi(TCCR2B,CS20);
 896:	e1 eb       	ldi	r30, 0xB1	; 177
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	80 81       	ld	r24, Z
 89c:	81 60       	ori	r24, 0x01	; 1
 89e:	80 83       	st	Z, r24
 8a0:	08 95       	ret

000008a2 <Enable_timer2_overflow_interrupt>:
}
void Enable_timer2_overflow_interrupt()
{
	sbi(TIMSK2,TOIE2);
 8a2:	e0 e7       	ldi	r30, 0x70	; 112
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	80 81       	ld	r24, Z
 8a8:	81 60       	ori	r24, 0x01	; 1
 8aa:	80 83       	st	Z, r24
 8ac:	08 95       	ret

000008ae <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 8ae:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 8b2:	8c e0       	ldi	r24, 0x0C	; 12
 8b4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
 8b8:	08 95       	ret

000008ba <i2c_start>:
 8ba:	94 ea       	ldi	r25, 0xA4	; 164
 8bc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 8c0:	4f ef       	ldi	r20, 0xFF	; 255
 8c2:	50 e0       	ldi	r21, 0x00	; 0
 8c4:	60 e0       	ldi	r22, 0x00	; 0
 8c6:	70 e0       	ldi	r23, 0x00	; 0
 8c8:	ec eb       	ldi	r30, 0xBC	; 188
 8ca:	f0 e0       	ldi	r31, 0x00	; 0
 8cc:	90 81       	ld	r25, Z
 8ce:	99 23       	and	r25, r25
 8d0:	34 f0       	brlt	.+12     	; 0x8de <i2c_start+0x24>
 8d2:	41 50       	subi	r20, 0x01	; 1
 8d4:	51 09       	sbc	r21, r1
 8d6:	61 09       	sbc	r22, r1
 8d8:	71 09       	sbc	r23, r1
 8da:	c0 f7       	brcc	.-16     	; 0x8cc <i2c_start+0x12>
 8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <i2c_start+0x2c>
 8de:	45 2b       	or	r20, r21
 8e0:	46 2b       	or	r20, r22
 8e2:	47 2b       	or	r20, r23
 8e4:	41 f1       	breq	.+80     	; 0x936 <i2c_start+0x7c>
 8e6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 8ea:	98 7f       	andi	r25, 0xF8	; 248
 8ec:	98 30       	cpi	r25, 0x08	; 8
 8ee:	11 f0       	breq	.+4      	; 0x8f4 <i2c_start+0x3a>
 8f0:	90 31       	cpi	r25, 0x10	; 16
 8f2:	19 f5       	brne	.+70     	; 0x93a <i2c_start+0x80>
 8f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 8f8:	84 e8       	ldi	r24, 0x84	; 132
 8fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 8fe:	8f ef       	ldi	r24, 0xFF	; 255
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	a0 e0       	ldi	r26, 0x00	; 0
 904:	b0 e0       	ldi	r27, 0x00	; 0
 906:	ec eb       	ldi	r30, 0xBC	; 188
 908:	f0 e0       	ldi	r31, 0x00	; 0
 90a:	20 81       	ld	r18, Z
 90c:	22 23       	and	r18, r18
 90e:	2c f0       	brlt	.+10     	; 0x91a <i2c_start+0x60>
 910:	01 97       	sbiw	r24, 0x01	; 1
 912:	a1 09       	sbc	r26, r1
 914:	b1 09       	sbc	r27, r1
 916:	c8 f7       	brcc	.-14     	; 0x90a <i2c_start+0x50>
 918:	04 c0       	rjmp	.+8      	; 0x922 <i2c_start+0x68>
 91a:	89 2b       	or	r24, r25
 91c:	8a 2b       	or	r24, r26
 91e:	8b 2b       	or	r24, r27
 920:	71 f0       	breq	.+28     	; 0x93e <i2c_start+0x84>
 922:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 926:	98 7f       	andi	r25, 0xF8	; 248
 928:	98 31       	cpi	r25, 0x18	; 24
 92a:	59 f0       	breq	.+22     	; 0x942 <i2c_start+0x88>
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	90 34       	cpi	r25, 0x40	; 64
 930:	49 f4       	brne	.+18     	; 0x944 <i2c_start+0x8a>
 932:	80 e0       	ldi	r24, 0x00	; 0
 934:	08 95       	ret
 936:	81 e0       	ldi	r24, 0x01	; 1
 938:	08 95       	ret
 93a:	81 e0       	ldi	r24, 0x01	; 1
 93c:	08 95       	ret
 93e:	81 e0       	ldi	r24, 0x01	; 1
 940:	08 95       	ret
 942:	80 e0       	ldi	r24, 0x00	; 0
 944:	08 95       	ret

00000946 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 946:	84 e9       	ldi	r24, 0x94	; 148
 948:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
 94c:	80 e0       	ldi	r24, 0x00	; 0
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	ec eb       	ldi	r30, 0xBC	; 188
 952:	f0 e0       	ldi	r31, 0x00	; 0
 954:	20 81       	ld	r18, Z
 956:	24 ff       	sbrs	r18, 4
 958:	05 c0       	rjmp	.+10     	; 0x964 <i2c_stop+0x1e>
 95a:	01 96       	adiw	r24, 0x01	; 1
 95c:	81 15       	cp	r24, r1
 95e:	21 e0       	ldi	r18, 0x01	; 1
 960:	92 07       	cpc	r25, r18
 962:	c1 f7       	brne	.-16     	; 0x954 <i2c_stop+0xe>
 964:	08 95       	ret

00000966 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 966:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 96a:	84 e8       	ldi	r24, 0x84	; 132
 96c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
 970:	8f ef       	ldi	r24, 0xFF	; 255
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	a0 e0       	ldi	r26, 0x00	; 0
 976:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
 978:	ec eb       	ldi	r30, 0xBC	; 188
 97a:	f0 e0       	ldi	r31, 0x00	; 0
 97c:	20 81       	ld	r18, Z
 97e:	22 23       	and	r18, r18
 980:	2c f0       	brlt	.+10     	; 0x98c <i2c_write+0x26>
 982:	01 97       	sbiw	r24, 0x01	; 1
 984:	a1 09       	sbc	r26, r1
 986:	b1 09       	sbc	r27, r1
 988:	c8 f7       	brcc	.-14     	; 0x97c <i2c_write+0x16>
 98a:	04 c0       	rjmp	.+8      	; 0x994 <i2c_write+0x2e>
	if(i2c_timer == 0)
 98c:	89 2b       	or	r24, r25
 98e:	8a 2b       	or	r24, r26
 990:	8b 2b       	or	r24, r27
 992:	41 f0       	breq	.+16     	; 0x9a4 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 994:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 998:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 99a:	81 e0       	ldi	r24, 0x01	; 1
 99c:	98 32       	cpi	r25, 0x28	; 40
 99e:	19 f4       	brne	.+6      	; 0x9a6 <i2c_write+0x40>
 9a0:	80 e0       	ldi	r24, 0x00	; 0
 9a2:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
 9a4:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 9a6:	08 95       	ret

000009a8 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 9a8:	84 ec       	ldi	r24, 0xC4	; 196
 9aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
 9ae:	8f ef       	ldi	r24, 0xFF	; 255
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	a0 e0       	ldi	r26, 0x00	; 0
 9b4:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
 9b6:	ec eb       	ldi	r30, 0xBC	; 188
 9b8:	f0 e0       	ldi	r31, 0x00	; 0
 9ba:	20 81       	ld	r18, Z
 9bc:	22 23       	and	r18, r18
 9be:	2c f0       	brlt	.+10     	; 0x9ca <i2c_readAck+0x22>
 9c0:	01 97       	sbiw	r24, 0x01	; 1
 9c2:	a1 09       	sbc	r26, r1
 9c4:	b1 09       	sbc	r27, r1
 9c6:	c8 f7       	brcc	.-14     	; 0x9ba <i2c_readAck+0x12>
 9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
 9ca:	89 2b       	or	r24, r25
 9cc:	8a 2b       	or	r24, r26
 9ce:	8b 2b       	or	r24, r27
 9d0:	19 f0       	breq	.+6      	; 0x9d8 <i2c_readAck+0x30>
		return 0;

    return TWDR;
 9d2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 9d6:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
 9d8:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
 9da:	08 95       	ret

000009dc <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
 9dc:	84 e8       	ldi	r24, 0x84	; 132
 9de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
 9e2:	8f ef       	ldi	r24, 0xFF	; 255
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	a0 e0       	ldi	r26, 0x00	; 0
 9e8:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
 9ea:	ec eb       	ldi	r30, 0xBC	; 188
 9ec:	f0 e0       	ldi	r31, 0x00	; 0
 9ee:	20 81       	ld	r18, Z
 9f0:	22 23       	and	r18, r18
 9f2:	2c f0       	brlt	.+10     	; 0x9fe <i2c_readNak+0x22>
 9f4:	01 97       	sbiw	r24, 0x01	; 1
 9f6:	a1 09       	sbc	r26, r1
 9f8:	b1 09       	sbc	r27, r1
 9fa:	c8 f7       	brcc	.-14     	; 0x9ee <i2c_readNak+0x12>
 9fc:	04 c0       	rjmp	.+8      	; 0xa06 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
 9fe:	89 2b       	or	r24, r25
 a00:	8a 2b       	or	r24, r26
 a02:	8b 2b       	or	r24, r27
 a04:	19 f0       	breq	.+6      	; 0xa0c <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
 a06:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 a0a:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
 a0c:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
 a0e:	08 95       	ret

00000a10 <USART_Init>:
#include <avr/io.h>
#include <stdio.h>
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 a10:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;
 a14:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	UCSR0B = (1<<TXEN0);// | (1<<TXCIE0);
 a18:	88 e0       	ldi	r24, 0x08	; 8
 a1a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);//2 stop bit 8 bit
 a1e:	8e e0       	ldi	r24, 0x0E	; 14
 a20:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 a24:	08 95       	ret

00000a26 <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 a26:	e0 ec       	ldi	r30, 0xC0	; 192
 a28:	f0 e0       	ldi	r31, 0x00	; 0
 a2a:	90 81       	ld	r25, Z
 a2c:	95 ff       	sbrs	r25, 5
 a2e:	fd cf       	rjmp	.-6      	; 0xa2a <USART_Transmit+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 a30:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 a34:	08 95       	ret

00000a36 <__divmodhi4>:
 a36:	97 fb       	bst	r25, 7
 a38:	07 2e       	mov	r0, r23
 a3a:	16 f4       	brtc	.+4      	; 0xa40 <__divmodhi4+0xa>
 a3c:	00 94       	com	r0
 a3e:	06 d0       	rcall	.+12     	; 0xa4c <__divmodhi4_neg1>
 a40:	77 fd       	sbrc	r23, 7
 a42:	08 d0       	rcall	.+16     	; 0xa54 <__divmodhi4_neg2>
 a44:	27 d0       	rcall	.+78     	; 0xa94 <__udivmodhi4>
 a46:	07 fc       	sbrc	r0, 7
 a48:	05 d0       	rcall	.+10     	; 0xa54 <__divmodhi4_neg2>
 a4a:	3e f4       	brtc	.+14     	; 0xa5a <__divmodhi4_exit>

00000a4c <__divmodhi4_neg1>:
 a4c:	90 95       	com	r25
 a4e:	81 95       	neg	r24
 a50:	9f 4f       	sbci	r25, 0xFF	; 255
 a52:	08 95       	ret

00000a54 <__divmodhi4_neg2>:
 a54:	70 95       	com	r23
 a56:	61 95       	neg	r22
 a58:	7f 4f       	sbci	r23, 0xFF	; 255

00000a5a <__divmodhi4_exit>:
 a5a:	08 95       	ret

00000a5c <__divmodsi4>:
 a5c:	05 2e       	mov	r0, r21
 a5e:	97 fb       	bst	r25, 7
 a60:	16 f4       	brtc	.+4      	; 0xa66 <__divmodsi4+0xa>
 a62:	00 94       	com	r0
 a64:	0f d0       	rcall	.+30     	; 0xa84 <__negsi2>
 a66:	57 fd       	sbrc	r21, 7
 a68:	05 d0       	rcall	.+10     	; 0xa74 <__divmodsi4_neg2>
 a6a:	28 d0       	rcall	.+80     	; 0xabc <__udivmodsi4>
 a6c:	07 fc       	sbrc	r0, 7
 a6e:	02 d0       	rcall	.+4      	; 0xa74 <__divmodsi4_neg2>
 a70:	46 f4       	brtc	.+16     	; 0xa82 <__divmodsi4_exit>
 a72:	08 c0       	rjmp	.+16     	; 0xa84 <__negsi2>

00000a74 <__divmodsi4_neg2>:
 a74:	50 95       	com	r21
 a76:	40 95       	com	r20
 a78:	30 95       	com	r19
 a7a:	21 95       	neg	r18
 a7c:	3f 4f       	sbci	r19, 0xFF	; 255
 a7e:	4f 4f       	sbci	r20, 0xFF	; 255
 a80:	5f 4f       	sbci	r21, 0xFF	; 255

00000a82 <__divmodsi4_exit>:
 a82:	08 95       	ret

00000a84 <__negsi2>:
 a84:	90 95       	com	r25
 a86:	80 95       	com	r24
 a88:	70 95       	com	r23
 a8a:	61 95       	neg	r22
 a8c:	7f 4f       	sbci	r23, 0xFF	; 255
 a8e:	8f 4f       	sbci	r24, 0xFF	; 255
 a90:	9f 4f       	sbci	r25, 0xFF	; 255
 a92:	08 95       	ret

00000a94 <__udivmodhi4>:
 a94:	aa 1b       	sub	r26, r26
 a96:	bb 1b       	sub	r27, r27
 a98:	51 e1       	ldi	r21, 0x11	; 17
 a9a:	07 c0       	rjmp	.+14     	; 0xaaa <__udivmodhi4_ep>

00000a9c <__udivmodhi4_loop>:
 a9c:	aa 1f       	adc	r26, r26
 a9e:	bb 1f       	adc	r27, r27
 aa0:	a6 17       	cp	r26, r22
 aa2:	b7 07       	cpc	r27, r23
 aa4:	10 f0       	brcs	.+4      	; 0xaaa <__udivmodhi4_ep>
 aa6:	a6 1b       	sub	r26, r22
 aa8:	b7 0b       	sbc	r27, r23

00000aaa <__udivmodhi4_ep>:
 aaa:	88 1f       	adc	r24, r24
 aac:	99 1f       	adc	r25, r25
 aae:	5a 95       	dec	r21
 ab0:	a9 f7       	brne	.-22     	; 0xa9c <__udivmodhi4_loop>
 ab2:	80 95       	com	r24
 ab4:	90 95       	com	r25
 ab6:	bc 01       	movw	r22, r24
 ab8:	cd 01       	movw	r24, r26
 aba:	08 95       	ret

00000abc <__udivmodsi4>:
 abc:	a1 e2       	ldi	r26, 0x21	; 33
 abe:	1a 2e       	mov	r1, r26
 ac0:	aa 1b       	sub	r26, r26
 ac2:	bb 1b       	sub	r27, r27
 ac4:	fd 01       	movw	r30, r26
 ac6:	0d c0       	rjmp	.+26     	; 0xae2 <__udivmodsi4_ep>

00000ac8 <__udivmodsi4_loop>:
 ac8:	aa 1f       	adc	r26, r26
 aca:	bb 1f       	adc	r27, r27
 acc:	ee 1f       	adc	r30, r30
 ace:	ff 1f       	adc	r31, r31
 ad0:	a2 17       	cp	r26, r18
 ad2:	b3 07       	cpc	r27, r19
 ad4:	e4 07       	cpc	r30, r20
 ad6:	f5 07       	cpc	r31, r21
 ad8:	20 f0       	brcs	.+8      	; 0xae2 <__udivmodsi4_ep>
 ada:	a2 1b       	sub	r26, r18
 adc:	b3 0b       	sbc	r27, r19
 ade:	e4 0b       	sbc	r30, r20
 ae0:	f5 0b       	sbc	r31, r21

00000ae2 <__udivmodsi4_ep>:
 ae2:	66 1f       	adc	r22, r22
 ae4:	77 1f       	adc	r23, r23
 ae6:	88 1f       	adc	r24, r24
 ae8:	99 1f       	adc	r25, r25
 aea:	1a 94       	dec	r1
 aec:	69 f7       	brne	.-38     	; 0xac8 <__udivmodsi4_loop>
 aee:	60 95       	com	r22
 af0:	70 95       	com	r23
 af2:	80 95       	com	r24
 af4:	90 95       	com	r25
 af6:	9b 01       	movw	r18, r22
 af8:	ac 01       	movw	r20, r24
 afa:	bd 01       	movw	r22, r26
 afc:	cf 01       	movw	r24, r30
 afe:	08 95       	ret

00000b00 <fdevopen>:
 b00:	0f 93       	push	r16
 b02:	1f 93       	push	r17
 b04:	cf 93       	push	r28
 b06:	df 93       	push	r29
 b08:	00 97       	sbiw	r24, 0x00	; 0
 b0a:	31 f4       	brne	.+12     	; 0xb18 <fdevopen+0x18>
 b0c:	61 15       	cp	r22, r1
 b0e:	71 05       	cpc	r23, r1
 b10:	19 f4       	brne	.+6      	; 0xb18 <fdevopen+0x18>
 b12:	80 e0       	ldi	r24, 0x00	; 0
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	39 c0       	rjmp	.+114    	; 0xb8a <fdevopen+0x8a>
 b18:	8b 01       	movw	r16, r22
 b1a:	ec 01       	movw	r28, r24
 b1c:	6e e0       	ldi	r22, 0x0E	; 14
 b1e:	70 e0       	ldi	r23, 0x00	; 0
 b20:	81 e0       	ldi	r24, 0x01	; 1
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	67 d0       	rcall	.+206    	; 0xbf4 <calloc>
 b26:	fc 01       	movw	r30, r24
 b28:	89 2b       	or	r24, r25
 b2a:	99 f3       	breq	.-26     	; 0xb12 <fdevopen+0x12>
 b2c:	80 e8       	ldi	r24, 0x80	; 128
 b2e:	83 83       	std	Z+3, r24	; 0x03
 b30:	01 15       	cp	r16, r1
 b32:	11 05       	cpc	r17, r1
 b34:	71 f0       	breq	.+28     	; 0xb52 <fdevopen+0x52>
 b36:	13 87       	std	Z+11, r17	; 0x0b
 b38:	02 87       	std	Z+10, r16	; 0x0a
 b3a:	81 e8       	ldi	r24, 0x81	; 129
 b3c:	83 83       	std	Z+3, r24	; 0x03
 b3e:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <__iob>
 b42:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <__iob+0x1>
 b46:	89 2b       	or	r24, r25
 b48:	21 f4       	brne	.+8      	; 0xb52 <fdevopen+0x52>
 b4a:	f0 93 3f 04 	sts	0x043F, r31	; 0x80043f <__iob+0x1>
 b4e:	e0 93 3e 04 	sts	0x043E, r30	; 0x80043e <__iob>
 b52:	20 97       	sbiw	r28, 0x00	; 0
 b54:	c9 f0       	breq	.+50     	; 0xb88 <fdevopen+0x88>
 b56:	d1 87       	std	Z+9, r29	; 0x09
 b58:	c0 87       	std	Z+8, r28	; 0x08
 b5a:	83 81       	ldd	r24, Z+3	; 0x03
 b5c:	82 60       	ori	r24, 0x02	; 2
 b5e:	83 83       	std	Z+3, r24	; 0x03
 b60:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <__iob+0x2>
 b64:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <__iob+0x3>
 b68:	89 2b       	or	r24, r25
 b6a:	71 f4       	brne	.+28     	; 0xb88 <fdevopen+0x88>
 b6c:	f0 93 41 04 	sts	0x0441, r31	; 0x800441 <__iob+0x3>
 b70:	e0 93 40 04 	sts	0x0440, r30	; 0x800440 <__iob+0x2>
 b74:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <__iob+0x4>
 b78:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <__iob+0x5>
 b7c:	89 2b       	or	r24, r25
 b7e:	21 f4       	brne	.+8      	; 0xb88 <fdevopen+0x88>
 b80:	f0 93 43 04 	sts	0x0443, r31	; 0x800443 <__iob+0x5>
 b84:	e0 93 42 04 	sts	0x0442, r30	; 0x800442 <__iob+0x4>
 b88:	cf 01       	movw	r24, r30
 b8a:	df 91       	pop	r29
 b8c:	cf 91       	pop	r28
 b8e:	1f 91       	pop	r17
 b90:	0f 91       	pop	r16
 b92:	08 95       	ret

00000b94 <puts>:
 b94:	0f 93       	push	r16
 b96:	1f 93       	push	r17
 b98:	cf 93       	push	r28
 b9a:	df 93       	push	r29
 b9c:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <__iob+0x2>
 ba0:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <__iob+0x3>
 ba4:	23 81       	ldd	r18, Z+3	; 0x03
 ba6:	21 ff       	sbrs	r18, 1
 ba8:	1b c0       	rjmp	.+54     	; 0xbe0 <puts+0x4c>
 baa:	8c 01       	movw	r16, r24
 bac:	d0 e0       	ldi	r29, 0x00	; 0
 bae:	c0 e0       	ldi	r28, 0x00	; 0
 bb0:	f8 01       	movw	r30, r16
 bb2:	81 91       	ld	r24, Z+
 bb4:	8f 01       	movw	r16, r30
 bb6:	60 91 40 04 	lds	r22, 0x0440	; 0x800440 <__iob+0x2>
 bba:	70 91 41 04 	lds	r23, 0x0441	; 0x800441 <__iob+0x3>
 bbe:	db 01       	movw	r26, r22
 bc0:	18 96       	adiw	r26, 0x08	; 8
 bc2:	ed 91       	ld	r30, X+
 bc4:	fc 91       	ld	r31, X
 bc6:	19 97       	sbiw	r26, 0x09	; 9
 bc8:	88 23       	and	r24, r24
 bca:	31 f0       	breq	.+12     	; 0xbd8 <puts+0x44>
 bcc:	19 95       	eicall
 bce:	89 2b       	or	r24, r25
 bd0:	79 f3       	breq	.-34     	; 0xbb0 <puts+0x1c>
 bd2:	df ef       	ldi	r29, 0xFF	; 255
 bd4:	cf ef       	ldi	r28, 0xFF	; 255
 bd6:	ec cf       	rjmp	.-40     	; 0xbb0 <puts+0x1c>
 bd8:	8a e0       	ldi	r24, 0x0A	; 10
 bda:	19 95       	eicall
 bdc:	89 2b       	or	r24, r25
 bde:	19 f0       	breq	.+6      	; 0xbe6 <puts+0x52>
 be0:	8f ef       	ldi	r24, 0xFF	; 255
 be2:	9f ef       	ldi	r25, 0xFF	; 255
 be4:	02 c0       	rjmp	.+4      	; 0xbea <puts+0x56>
 be6:	8d 2f       	mov	r24, r29
 be8:	9c 2f       	mov	r25, r28
 bea:	df 91       	pop	r29
 bec:	cf 91       	pop	r28
 bee:	1f 91       	pop	r17
 bf0:	0f 91       	pop	r16
 bf2:	08 95       	ret

00000bf4 <calloc>:
 bf4:	0f 93       	push	r16
 bf6:	1f 93       	push	r17
 bf8:	cf 93       	push	r28
 bfa:	df 93       	push	r29
 bfc:	86 9f       	mul	r24, r22
 bfe:	80 01       	movw	r16, r0
 c00:	87 9f       	mul	r24, r23
 c02:	10 0d       	add	r17, r0
 c04:	96 9f       	mul	r25, r22
 c06:	10 0d       	add	r17, r0
 c08:	11 24       	eor	r1, r1
 c0a:	c8 01       	movw	r24, r16
 c0c:	0d d0       	rcall	.+26     	; 0xc28 <malloc>
 c0e:	ec 01       	movw	r28, r24
 c10:	00 97       	sbiw	r24, 0x00	; 0
 c12:	21 f0       	breq	.+8      	; 0xc1c <calloc+0x28>
 c14:	a8 01       	movw	r20, r16
 c16:	60 e0       	ldi	r22, 0x00	; 0
 c18:	70 e0       	ldi	r23, 0x00	; 0
 c1a:	33 d1       	rcall	.+614    	; 0xe82 <memset>
 c1c:	ce 01       	movw	r24, r28
 c1e:	df 91       	pop	r29
 c20:	cf 91       	pop	r28
 c22:	1f 91       	pop	r17
 c24:	0f 91       	pop	r16
 c26:	08 95       	ret

00000c28 <malloc>:
 c28:	cf 93       	push	r28
 c2a:	df 93       	push	r29
 c2c:	82 30       	cpi	r24, 0x02	; 2
 c2e:	91 05       	cpc	r25, r1
 c30:	10 f4       	brcc	.+4      	; 0xc36 <malloc+0xe>
 c32:	82 e0       	ldi	r24, 0x02	; 2
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <__flp>
 c3a:	f0 91 47 04 	lds	r31, 0x0447	; 0x800447 <__flp+0x1>
 c3e:	20 e0       	ldi	r18, 0x00	; 0
 c40:	30 e0       	ldi	r19, 0x00	; 0
 c42:	c0 e0       	ldi	r28, 0x00	; 0
 c44:	d0 e0       	ldi	r29, 0x00	; 0
 c46:	30 97       	sbiw	r30, 0x00	; 0
 c48:	11 f1       	breq	.+68     	; 0xc8e <malloc+0x66>
 c4a:	40 81       	ld	r20, Z
 c4c:	51 81       	ldd	r21, Z+1	; 0x01
 c4e:	48 17       	cp	r20, r24
 c50:	59 07       	cpc	r21, r25
 c52:	c0 f0       	brcs	.+48     	; 0xc84 <malloc+0x5c>
 c54:	48 17       	cp	r20, r24
 c56:	59 07       	cpc	r21, r25
 c58:	61 f4       	brne	.+24     	; 0xc72 <malloc+0x4a>
 c5a:	82 81       	ldd	r24, Z+2	; 0x02
 c5c:	93 81       	ldd	r25, Z+3	; 0x03
 c5e:	20 97       	sbiw	r28, 0x00	; 0
 c60:	19 f0       	breq	.+6      	; 0xc68 <malloc+0x40>
 c62:	9b 83       	std	Y+3, r25	; 0x03
 c64:	8a 83       	std	Y+2, r24	; 0x02
 c66:	2b c0       	rjmp	.+86     	; 0xcbe <malloc+0x96>
 c68:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <__flp+0x1>
 c6c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__flp>
 c70:	26 c0       	rjmp	.+76     	; 0xcbe <malloc+0x96>
 c72:	21 15       	cp	r18, r1
 c74:	31 05       	cpc	r19, r1
 c76:	19 f0       	breq	.+6      	; 0xc7e <malloc+0x56>
 c78:	42 17       	cp	r20, r18
 c7a:	53 07       	cpc	r21, r19
 c7c:	18 f4       	brcc	.+6      	; 0xc84 <malloc+0x5c>
 c7e:	9a 01       	movw	r18, r20
 c80:	be 01       	movw	r22, r28
 c82:	df 01       	movw	r26, r30
 c84:	ef 01       	movw	r28, r30
 c86:	02 80       	ldd	r0, Z+2	; 0x02
 c88:	f3 81       	ldd	r31, Z+3	; 0x03
 c8a:	e0 2d       	mov	r30, r0
 c8c:	dc cf       	rjmp	.-72     	; 0xc46 <malloc+0x1e>
 c8e:	21 15       	cp	r18, r1
 c90:	31 05       	cpc	r19, r1
 c92:	09 f1       	breq	.+66     	; 0xcd6 <malloc+0xae>
 c94:	28 1b       	sub	r18, r24
 c96:	39 0b       	sbc	r19, r25
 c98:	24 30       	cpi	r18, 0x04	; 4
 c9a:	31 05       	cpc	r19, r1
 c9c:	90 f4       	brcc	.+36     	; 0xcc2 <malloc+0x9a>
 c9e:	12 96       	adiw	r26, 0x02	; 2
 ca0:	8d 91       	ld	r24, X+
 ca2:	9c 91       	ld	r25, X
 ca4:	13 97       	sbiw	r26, 0x03	; 3
 ca6:	61 15       	cp	r22, r1
 ca8:	71 05       	cpc	r23, r1
 caa:	21 f0       	breq	.+8      	; 0xcb4 <malloc+0x8c>
 cac:	fb 01       	movw	r30, r22
 cae:	93 83       	std	Z+3, r25	; 0x03
 cb0:	82 83       	std	Z+2, r24	; 0x02
 cb2:	04 c0       	rjmp	.+8      	; 0xcbc <malloc+0x94>
 cb4:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <__flp+0x1>
 cb8:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__flp>
 cbc:	fd 01       	movw	r30, r26
 cbe:	32 96       	adiw	r30, 0x02	; 2
 cc0:	44 c0       	rjmp	.+136    	; 0xd4a <malloc+0x122>
 cc2:	fd 01       	movw	r30, r26
 cc4:	e2 0f       	add	r30, r18
 cc6:	f3 1f       	adc	r31, r19
 cc8:	81 93       	st	Z+, r24
 cca:	91 93       	st	Z+, r25
 ccc:	22 50       	subi	r18, 0x02	; 2
 cce:	31 09       	sbc	r19, r1
 cd0:	2d 93       	st	X+, r18
 cd2:	3c 93       	st	X, r19
 cd4:	3a c0       	rjmp	.+116    	; 0xd4a <malloc+0x122>
 cd6:	20 91 44 04 	lds	r18, 0x0444	; 0x800444 <__brkval>
 cda:	30 91 45 04 	lds	r19, 0x0445	; 0x800445 <__brkval+0x1>
 cde:	23 2b       	or	r18, r19
 ce0:	41 f4       	brne	.+16     	; 0xcf2 <malloc+0xca>
 ce2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 ce6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 cea:	30 93 45 04 	sts	0x0445, r19	; 0x800445 <__brkval+0x1>
 cee:	20 93 44 04 	sts	0x0444, r18	; 0x800444 <__brkval>
 cf2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 cf6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 cfa:	21 15       	cp	r18, r1
 cfc:	31 05       	cpc	r19, r1
 cfe:	41 f4       	brne	.+16     	; 0xd10 <malloc+0xe8>
 d00:	2d b7       	in	r18, 0x3d	; 61
 d02:	3e b7       	in	r19, 0x3e	; 62
 d04:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 d08:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 d0c:	24 1b       	sub	r18, r20
 d0e:	35 0b       	sbc	r19, r21
 d10:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <__brkval>
 d14:	f0 91 45 04 	lds	r31, 0x0445	; 0x800445 <__brkval+0x1>
 d18:	e2 17       	cp	r30, r18
 d1a:	f3 07       	cpc	r31, r19
 d1c:	a0 f4       	brcc	.+40     	; 0xd46 <malloc+0x11e>
 d1e:	2e 1b       	sub	r18, r30
 d20:	3f 0b       	sbc	r19, r31
 d22:	28 17       	cp	r18, r24
 d24:	39 07       	cpc	r19, r25
 d26:	78 f0       	brcs	.+30     	; 0xd46 <malloc+0x11e>
 d28:	ac 01       	movw	r20, r24
 d2a:	4e 5f       	subi	r20, 0xFE	; 254
 d2c:	5f 4f       	sbci	r21, 0xFF	; 255
 d2e:	24 17       	cp	r18, r20
 d30:	35 07       	cpc	r19, r21
 d32:	48 f0       	brcs	.+18     	; 0xd46 <malloc+0x11e>
 d34:	4e 0f       	add	r20, r30
 d36:	5f 1f       	adc	r21, r31
 d38:	50 93 45 04 	sts	0x0445, r21	; 0x800445 <__brkval+0x1>
 d3c:	40 93 44 04 	sts	0x0444, r20	; 0x800444 <__brkval>
 d40:	81 93       	st	Z+, r24
 d42:	91 93       	st	Z+, r25
 d44:	02 c0       	rjmp	.+4      	; 0xd4a <malloc+0x122>
 d46:	e0 e0       	ldi	r30, 0x00	; 0
 d48:	f0 e0       	ldi	r31, 0x00	; 0
 d4a:	cf 01       	movw	r24, r30
 d4c:	df 91       	pop	r29
 d4e:	cf 91       	pop	r28
 d50:	08 95       	ret

00000d52 <free>:
 d52:	0f 93       	push	r16
 d54:	1f 93       	push	r17
 d56:	cf 93       	push	r28
 d58:	df 93       	push	r29
 d5a:	00 97       	sbiw	r24, 0x00	; 0
 d5c:	09 f4       	brne	.+2      	; 0xd60 <free+0xe>
 d5e:	8c c0       	rjmp	.+280    	; 0xe78 <free+0x126>
 d60:	fc 01       	movw	r30, r24
 d62:	32 97       	sbiw	r30, 0x02	; 2
 d64:	13 82       	std	Z+3, r1	; 0x03
 d66:	12 82       	std	Z+2, r1	; 0x02
 d68:	00 91 46 04 	lds	r16, 0x0446	; 0x800446 <__flp>
 d6c:	10 91 47 04 	lds	r17, 0x0447	; 0x800447 <__flp+0x1>
 d70:	01 15       	cp	r16, r1
 d72:	11 05       	cpc	r17, r1
 d74:	81 f4       	brne	.+32     	; 0xd96 <free+0x44>
 d76:	20 81       	ld	r18, Z
 d78:	31 81       	ldd	r19, Z+1	; 0x01
 d7a:	82 0f       	add	r24, r18
 d7c:	93 1f       	adc	r25, r19
 d7e:	20 91 44 04 	lds	r18, 0x0444	; 0x800444 <__brkval>
 d82:	30 91 45 04 	lds	r19, 0x0445	; 0x800445 <__brkval+0x1>
 d86:	28 17       	cp	r18, r24
 d88:	39 07       	cpc	r19, r25
 d8a:	79 f5       	brne	.+94     	; 0xdea <free+0x98>
 d8c:	f0 93 45 04 	sts	0x0445, r31	; 0x800445 <__brkval+0x1>
 d90:	e0 93 44 04 	sts	0x0444, r30	; 0x800444 <__brkval>
 d94:	71 c0       	rjmp	.+226    	; 0xe78 <free+0x126>
 d96:	d8 01       	movw	r26, r16
 d98:	40 e0       	ldi	r20, 0x00	; 0
 d9a:	50 e0       	ldi	r21, 0x00	; 0
 d9c:	ae 17       	cp	r26, r30
 d9e:	bf 07       	cpc	r27, r31
 da0:	50 f4       	brcc	.+20     	; 0xdb6 <free+0x64>
 da2:	12 96       	adiw	r26, 0x02	; 2
 da4:	2d 91       	ld	r18, X+
 da6:	3c 91       	ld	r19, X
 da8:	13 97       	sbiw	r26, 0x03	; 3
 daa:	ad 01       	movw	r20, r26
 dac:	21 15       	cp	r18, r1
 dae:	31 05       	cpc	r19, r1
 db0:	09 f1       	breq	.+66     	; 0xdf4 <free+0xa2>
 db2:	d9 01       	movw	r26, r18
 db4:	f3 cf       	rjmp	.-26     	; 0xd9c <free+0x4a>
 db6:	9d 01       	movw	r18, r26
 db8:	da 01       	movw	r26, r20
 dba:	33 83       	std	Z+3, r19	; 0x03
 dbc:	22 83       	std	Z+2, r18	; 0x02
 dbe:	60 81       	ld	r22, Z
 dc0:	71 81       	ldd	r23, Z+1	; 0x01
 dc2:	86 0f       	add	r24, r22
 dc4:	97 1f       	adc	r25, r23
 dc6:	82 17       	cp	r24, r18
 dc8:	93 07       	cpc	r25, r19
 dca:	69 f4       	brne	.+26     	; 0xde6 <free+0x94>
 dcc:	ec 01       	movw	r28, r24
 dce:	28 81       	ld	r18, Y
 dd0:	39 81       	ldd	r19, Y+1	; 0x01
 dd2:	26 0f       	add	r18, r22
 dd4:	37 1f       	adc	r19, r23
 dd6:	2e 5f       	subi	r18, 0xFE	; 254
 dd8:	3f 4f       	sbci	r19, 0xFF	; 255
 dda:	31 83       	std	Z+1, r19	; 0x01
 ddc:	20 83       	st	Z, r18
 dde:	8a 81       	ldd	r24, Y+2	; 0x02
 de0:	9b 81       	ldd	r25, Y+3	; 0x03
 de2:	93 83       	std	Z+3, r25	; 0x03
 de4:	82 83       	std	Z+2, r24	; 0x02
 de6:	45 2b       	or	r20, r21
 de8:	29 f4       	brne	.+10     	; 0xdf4 <free+0xa2>
 dea:	f0 93 47 04 	sts	0x0447, r31	; 0x800447 <__flp+0x1>
 dee:	e0 93 46 04 	sts	0x0446, r30	; 0x800446 <__flp>
 df2:	42 c0       	rjmp	.+132    	; 0xe78 <free+0x126>
 df4:	13 96       	adiw	r26, 0x03	; 3
 df6:	fc 93       	st	X, r31
 df8:	ee 93       	st	-X, r30
 dfa:	12 97       	sbiw	r26, 0x02	; 2
 dfc:	ed 01       	movw	r28, r26
 dfe:	49 91       	ld	r20, Y+
 e00:	59 91       	ld	r21, Y+
 e02:	9e 01       	movw	r18, r28
 e04:	24 0f       	add	r18, r20
 e06:	35 1f       	adc	r19, r21
 e08:	e2 17       	cp	r30, r18
 e0a:	f3 07       	cpc	r31, r19
 e0c:	71 f4       	brne	.+28     	; 0xe2a <free+0xd8>
 e0e:	80 81       	ld	r24, Z
 e10:	91 81       	ldd	r25, Z+1	; 0x01
 e12:	84 0f       	add	r24, r20
 e14:	95 1f       	adc	r25, r21
 e16:	02 96       	adiw	r24, 0x02	; 2
 e18:	11 96       	adiw	r26, 0x01	; 1
 e1a:	9c 93       	st	X, r25
 e1c:	8e 93       	st	-X, r24
 e1e:	82 81       	ldd	r24, Z+2	; 0x02
 e20:	93 81       	ldd	r25, Z+3	; 0x03
 e22:	13 96       	adiw	r26, 0x03	; 3
 e24:	9c 93       	st	X, r25
 e26:	8e 93       	st	-X, r24
 e28:	12 97       	sbiw	r26, 0x02	; 2
 e2a:	e0 e0       	ldi	r30, 0x00	; 0
 e2c:	f0 e0       	ldi	r31, 0x00	; 0
 e2e:	d8 01       	movw	r26, r16
 e30:	12 96       	adiw	r26, 0x02	; 2
 e32:	8d 91       	ld	r24, X+
 e34:	9c 91       	ld	r25, X
 e36:	13 97       	sbiw	r26, 0x03	; 3
 e38:	00 97       	sbiw	r24, 0x00	; 0
 e3a:	19 f0       	breq	.+6      	; 0xe42 <free+0xf0>
 e3c:	f8 01       	movw	r30, r16
 e3e:	8c 01       	movw	r16, r24
 e40:	f6 cf       	rjmp	.-20     	; 0xe2e <free+0xdc>
 e42:	8d 91       	ld	r24, X+
 e44:	9c 91       	ld	r25, X
 e46:	98 01       	movw	r18, r16
 e48:	2e 5f       	subi	r18, 0xFE	; 254
 e4a:	3f 4f       	sbci	r19, 0xFF	; 255
 e4c:	82 0f       	add	r24, r18
 e4e:	93 1f       	adc	r25, r19
 e50:	20 91 44 04 	lds	r18, 0x0444	; 0x800444 <__brkval>
 e54:	30 91 45 04 	lds	r19, 0x0445	; 0x800445 <__brkval+0x1>
 e58:	28 17       	cp	r18, r24
 e5a:	39 07       	cpc	r19, r25
 e5c:	69 f4       	brne	.+26     	; 0xe78 <free+0x126>
 e5e:	30 97       	sbiw	r30, 0x00	; 0
 e60:	29 f4       	brne	.+10     	; 0xe6c <free+0x11a>
 e62:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <__flp+0x1>
 e66:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <__flp>
 e6a:	02 c0       	rjmp	.+4      	; 0xe70 <free+0x11e>
 e6c:	13 82       	std	Z+3, r1	; 0x03
 e6e:	12 82       	std	Z+2, r1	; 0x02
 e70:	10 93 45 04 	sts	0x0445, r17	; 0x800445 <__brkval+0x1>
 e74:	00 93 44 04 	sts	0x0444, r16	; 0x800444 <__brkval>
 e78:	df 91       	pop	r29
 e7a:	cf 91       	pop	r28
 e7c:	1f 91       	pop	r17
 e7e:	0f 91       	pop	r16
 e80:	08 95       	ret

00000e82 <memset>:
 e82:	dc 01       	movw	r26, r24
 e84:	01 c0       	rjmp	.+2      	; 0xe88 <memset+0x6>
 e86:	6d 93       	st	X+, r22
 e88:	41 50       	subi	r20, 0x01	; 1
 e8a:	50 40       	sbci	r21, 0x00	; 0
 e8c:	e0 f7       	brcc	.-8      	; 0xe86 <memset+0x4>
 e8e:	08 95       	ret

00000e90 <_exit>:
 e90:	f8 94       	cli

00000e92 <__stop_program>:
 e92:	ff cf       	rjmp	.-2      	; 0xe92 <__stop_program>
