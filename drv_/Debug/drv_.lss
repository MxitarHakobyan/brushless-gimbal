
drv_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800200  00000c18  00000cac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800238  00800238  00000ce4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002154  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000127a  00000000  00000000  00003030  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e36  00000000  00000000  000042aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a4  00000000  00000000  000050e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a63  00000000  00000000  00005584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013dd  00000000  00000000  00005fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  000073c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	62 c0       	rjmp	.+196    	; 0x146 <__vector_32>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e1       	ldi	r30, 0x18	; 24
  fc:	fc e0       	ldi	r31, 0x0C	; 12
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 33       	cpi	r26, 0x38	; 56
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e3       	ldi	r26, 0x38	; 56
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 35       	cpi	r26, 0x56	; 86
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	43 d0       	rcall	.+134    	; 0x1a6 <main>
 120:	79 c5       	rjmp	.+2802   	; 0xc14 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <uart_putchar>:
		}
	}
	return true;
}
static int uart_putchar(char c, FILE *stream)
{
 124:	cf 93       	push	r28
 126:	c8 2f       	mov	r28, r24

	if (c == '\n')
 128:	8a 30       	cpi	r24, 0x0A	; 10
 12a:	11 f4       	brne	.+4      	; 0x130 <uart_putchar+0xc>
	uart_putchar('\r', stream);
 12c:	8d e0       	ldi	r24, 0x0D	; 13
 12e:	fa df       	rcall	.-12     	; 0x124 <uart_putchar>
	while ( !( UCSR0A & (1<<UDRE0)) )
 130:	e0 ec       	ldi	r30, 0xC0	; 192
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	85 ff       	sbrs	r24, 5
 138:	fd cf       	rjmp	.-6      	; 0x134 <uart_putchar+0x10>
	;
	/* Put data into buffer, sends the data */
	UDR0 = c;
 13a:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	return 0;
}
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <__vector_32>:
		#endif  
	}
	return 0;
}
ISR(TIMER3_COMPA_vect)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	af 93       	push	r26
 156:	bf 93       	push	r27
	//prescaler 1 ,calls OCR5A=7 
	// ???? 1 ????????????? ??? ?????? ?????

		++timer3_ovf_count;
 158:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <__data_end>
 15c:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <__data_end+0x1>
 160:	a0 91 3a 02 	lds	r26, 0x023A	; 0x80023a <__data_end+0x2>
 164:	b0 91 3b 02 	lds	r27, 0x023B	; 0x80023b <__data_end+0x3>
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	a1 1d       	adc	r26, r1
 16c:	b1 1d       	adc	r27, r1
 16e:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <__data_end>
 172:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <__data_end+0x1>
 176:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <__data_end+0x2>
 17a:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <__data_end+0x3>
		
}
 17e:	bf 91       	pop	r27
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <micros>:
unsigned long micros()
{
	cli();
 190:	f8 94       	cli
	uint32_t micros_return_value=timer3_ovf_count;
 192:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <__data_end>
 196:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <__data_end+0x1>
 19a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <__data_end+0x2>
 19e:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <__data_end+0x3>
	sei();
 1a2:	78 94       	sei
	return micros_return_value;
}
 1a4:	08 95       	ret

000001a6 <main>:
uint16_t ADC_max=0;
uint8_t buffer[14];
uint8_t flag=0;
int main(void)

{	
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	68 97       	sbiw	r28, 0x18	; 24
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	de bf       	out	0x3e, r29	; 62
 1b6:	0f be       	out	0x3f, r0	; 63
	i2c_init();
 1b8:	cd bf       	out	0x3d, r28	; 61
	USART_Init(MY_UBRR);
 1ba:	61 d2       	rcall	.+1218   	; 0x67e <i2c_init>
 1bc:	8c e0       	ldi	r24, 0x0C	; 12
 1be:	90 e0       	ldi	r25, 0x00	; 0
	uart_str = fdevopen(uart_putchar, NULL);
 1c0:	f5 d2       	rcall	.+1514   	; 0x7ac <USART_Init>
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	82 e9       	ldi	r24, 0x92	; 146
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	68 d3       	rcall	.+1744   	; 0x89c <fdevopen>
 1cc:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <uart_str+0x1>
	setup_timer3();
 1d0:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <uart_str>
	Enable_timer3_compare_interrupt();
 1d4:	45 d2       	rcall	.+1162   	; 0x660 <setup_timer3>
	OCR3A=7;//interrupt every 1us
 1d6:	4d d2       	rcall	.+1178   	; 0x672 <Enable_timer3_compare_interrupt>
 1d8:	87 e0       	ldi	r24, 0x07	; 7
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 1e0:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
	double acc_total_vector=0;
	double angle_pitch_acc=0;
	double angle_roll_acc=0;
	bool set_gyro_angles;
	#ifdef CALIBERATED_DATA
		int32_t gyroX_calib=0;
 1e4:	19 82       	std	Y+1, r1	; 0x01
 1e6:	1a 82       	std	Y+2, r1	; 0x02
 1e8:	1b 82       	std	Y+3, r1	; 0x03
		int32_t gyroY_calib=0;
 1ea:	1c 82       	std	Y+4, r1	; 0x04
 1ec:	1d 82       	std	Y+5, r1	; 0x05
 1ee:	1e 82       	std	Y+6, r1	; 0x06
 1f0:	1f 82       	std	Y+7, r1	; 0x07
		int32_t gyroZ_calib=0;
 1f2:	18 86       	std	Y+8, r1	; 0x08
 1f4:	19 86       	std	Y+9, r1	; 0x09
 1f6:	1a 86       	std	Y+10, r1	; 0x0a
 1f8:	1b 86       	std	Y+11, r1	; 0x0b
		int32_t accelX_calib=0;
 1fa:	1c 86       	std	Y+12, r1	; 0x0c
 1fc:	1d 86       	std	Y+13, r1	; 0x0d
 1fe:	1e 86       	std	Y+14, r1	; 0x0e
 200:	1f 86       	std	Y+15, r1	; 0x0f
		int32_t accelY_calib=0;
 202:	18 8a       	std	Y+16, r1	; 0x10
 204:	19 8a       	std	Y+17, r1	; 0x11
 206:	1a 8a       	std	Y+18, r1	; 0x12
 208:	1b 8a       	std	Y+19, r1	; 0x13
		int32_t accelZ_calib=0;
 20a:	1c 8a       	std	Y+20, r1	; 0x14
 20c:	1d 8a       	std	Y+21, r1	; 0x15
 20e:	1e 8a       	std	Y+22, r1	; 0x16
 210:	1f 8a       	std	Y+23, r1	; 0x17
		mpu6050_calibrate_gyro(&gyroX_calib,&gyroY_calib,&gyroZ_calib);
 212:	18 8e       	std	Y+24, r1	; 0x18
 214:	ae 01       	movw	r20, r28
 216:	47 5f       	subi	r20, 0xF7	; 247
 218:	5f 4f       	sbci	r21, 0xFF	; 255
 21a:	be 01       	movw	r22, r28
 21c:	6b 5f       	subi	r22, 0xFB	; 251
 21e:	7f 4f       	sbci	r23, 0xFF	; 255
 220:	ce 01       	movw	r24, r28
 222:	01 96       	adiw	r24, 0x01	; 1
		mpu6050_calibrate_accel(&accelX_calib,&accelY_calib,&accelZ_calib);
 224:	6e d0       	rcall	.+220    	; 0x302 <mpu6050_calibrate_gyro>
 226:	ae 01       	movw	r20, r28
 228:	4b 5e       	subi	r20, 0xEB	; 235
 22a:	5f 4f       	sbci	r21, 0xFF	; 255
 22c:	be 01       	movw	r22, r28
 22e:	6f 5e       	subi	r22, 0xEF	; 239
 230:	7f 4f       	sbci	r23, 0xFF	; 255
	#endif
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV,7);
 232:	ce 01       	movw	r24, r28
 234:	0d 96       	adiw	r24, 0x0d	; 13
	mpu6050_writeByte(MPU6050_RA_CONFIG,0x00);
 236:	4c d1       	rcall	.+664    	; 0x4d0 <mpu6050_calibrate_accel>
 238:	67 e0       	ldi	r22, 0x07	; 7
	mpu6050_writeByte(MPU6050_RA_GYRO_CONFIG,0x08);//gyro sensitivity set to 500 o/s
 23a:	89 e1       	ldi	r24, 0x19	; 25
	mpu6050_writeByte(MPU6050_RA_ACCEL_CONFIG,0x10);//accel sensitivity -/+ 8g
 23c:	00 d2       	rcall	.+1024   	; 0x63e <mpu6050_writeByte>
 23e:	60 e0       	ldi	r22, 0x00	; 0
	mpu6050_writeByte(MPU6050_RA_PWR_MGMT_1,0x01);
 240:	8a e1       	ldi	r24, 0x1A	; 26
 242:	fd d1       	rcall	.+1018   	; 0x63e <mpu6050_writeByte>
 244:	68 e0       	ldi	r22, 0x08	; 8
 246:	8b e1       	ldi	r24, 0x1B	; 27
	
	/*-----------------end---------------*/
	sei();
 248:	fa d1       	rcall	.+1012   	; 0x63e <mpu6050_writeByte>
    while (1) 
    {
		uint32_t timer1=micros();
 24a:	60 e1       	ldi	r22, 0x10	; 16
 24c:	8c e1       	ldi	r24, 0x1C	; 28
				//printf("roll=");
				//print16(var2);
				//printf("\n");
			#endif
			
			USART_Transmit(0xff);
 24e:	f7 d1       	rcall	.+1006   	; 0x63e <mpu6050_writeByte>
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	8b e6       	ldi	r24, 0x6B	; 107
			
			timer1=micros();
 254:	f4 d1       	rcall	.+1000   	; 0x63e <mpu6050_writeByte>
 256:	78 94       	sei
 258:	9b df       	rcall	.-202    	; 0x190 <micros>
 25a:	8f ef       	ldi	r24, 0xFF	; 255
			while(micros()-timer1<100000);
 25c:	b2 d2       	rcall	.+1380   	; 0x7c2 <USART_Transmit>
 25e:	98 df       	rcall	.-208    	; 0x190 <micros>
 260:	6b 01       	movw	r12, r22
 262:	7c 01       	movw	r14, r24
 264:	95 df       	rcall	.-214    	; 0x190 <micros>
 266:	dc 01       	movw	r26, r24
 268:	cb 01       	movw	r24, r22
 26a:	8c 19       	sub	r24, r12
 26c:	9d 09       	sbc	r25, r13
 26e:	ae 09       	sbc	r26, r14
 270:	bf 09       	sbc	r27, r15
 272:	80 3a       	cpi	r24, 0xA0	; 160
 274:	96 48       	sbci	r25, 0x86	; 134
 276:	a1 40       	sbci	r26, 0x01	; 1
 278:	b1 05       	cpc	r27, r1
 27a:	a0 f3       	brcs	.-24     	; 0x264 <main+0xbe>
 27c:	ed cf       	rjmp	.-38     	; 0x258 <main+0xb2>

0000027e <mpu6050_readByte>:
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_H);
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_L);
	return axis_value;
}
uint8_t mpu6050_readByte(uint8_t byteToRead)//readbyte
{
 27e:	cf 93       	push	r28
 280:	c8 2f       	mov	r28, r24
	i2c_start(MPU6050_WRITE);
 282:	80 ed       	ldi	r24, 0xD0	; 208
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	01 d2       	rcall	.+1026   	; 0x68a <i2c_start>
	i2c_write(byteToRead);
 288:	8c 2f       	mov	r24, r28
 28a:	90 e0       	ldi	r25, 0x00	; 0
	i2c_stop();
	
	i2c_start(MPU6050_READ);
 28c:	54 d2       	rcall	.+1192   	; 0x736 <i2c_write>
 28e:	43 d2       	rcall	.+1158   	; 0x716 <i2c_stop>
	uint8_t byteToReturn=i2c_readNak();
 290:	81 ed       	ldi	r24, 0xD1	; 209
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	fa d1       	rcall	.+1012   	; 0x68a <i2c_start>
	i2c_stop();
 296:	70 d2       	rcall	.+1248   	; 0x778 <i2c_readNak>
 298:	c8 2f       	mov	r28, r24
	return byteToReturn;
}
 29a:	3d d2       	rcall	.+1146   	; 0x716 <i2c_stop>
 29c:	8c 2f       	mov	r24, r28
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <mpu6050_read_gyroX>:
	//-----------------------------------
	*/
}
#endif
uint16_t mpu6050_read_gyroX()//axis x=0,y=1,z=2
{
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_XOUT_H);
 2a6:	83 e4       	ldi	r24, 0x43	; 67
 2a8:	ea df       	rcall	.-44     	; 0x27e <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_XOUT_L);
 2aa:	c8 2f       	mov	r28, r24
 2ac:	d0 e0       	ldi	r29, 0x00	; 0
 2ae:	dc 2f       	mov	r29, r28
 2b0:	cc 27       	eor	r28, r28
 2b2:	84 e4       	ldi	r24, 0x44	; 68
 2b4:	e4 df       	rcall	.-56     	; 0x27e <mpu6050_readByte>
	return axis_value;
}
 2b6:	9e 01       	movw	r18, r28
 2b8:	28 2b       	or	r18, r24
 2ba:	c9 01       	movw	r24, r18
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <mpu6050_read_gyroY>:
uint16_t mpu6050_read_gyroY()//axis x=0,y=1,z=2
{
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_YOUT_H);
 2c6:	85 e4       	ldi	r24, 0x45	; 69
 2c8:	da df       	rcall	.-76     	; 0x27e <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_YOUT_L);
 2ca:	c8 2f       	mov	r28, r24
 2cc:	d0 e0       	ldi	r29, 0x00	; 0
 2ce:	dc 2f       	mov	r29, r28
 2d0:	cc 27       	eor	r28, r28
 2d2:	86 e4       	ldi	r24, 0x46	; 70
 2d4:	d4 df       	rcall	.-88     	; 0x27e <mpu6050_readByte>
	return axis_value;
}
 2d6:	9e 01       	movw	r18, r28
 2d8:	28 2b       	or	r18, r24
 2da:	c9 01       	movw	r24, r18
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <mpu6050_read_gyroZ>:
uint16_t mpu6050_read_gyroZ()//axis x=0,y=1,z=2
{
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_H);
 2e6:	87 e4       	ldi	r24, 0x47	; 71
 2e8:	ca df       	rcall	.-108    	; 0x27e <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_L);
 2ea:	c8 2f       	mov	r28, r24
 2ec:	d0 e0       	ldi	r29, 0x00	; 0
 2ee:	dc 2f       	mov	r29, r28
 2f0:	cc 27       	eor	r28, r28
 2f2:	88 e4       	ldi	r24, 0x48	; 72
 2f4:	c4 df       	rcall	.-120    	; 0x27e <mpu6050_readByte>
	return axis_value;
}
 2f6:	9e 01       	movw	r18, r28
 2f8:	28 2b       	or	r18, r24
 2fa:	c9 01       	movw	r24, r18
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <mpu6050_calibrate_gyro>:
 *  Author: HP
 */ 
#include "MPU6050.h"
#ifdef CALIBERATED_DATA
void mpu6050_calibrate_gyro(int32_t *x,int32_t *y, int32_t *z)
{
 302:	cf 92       	push	r12
 304:	df 92       	push	r13
 306:	ef 92       	push	r14
 308:	ff 92       	push	r15
 30a:	0f 93       	push	r16
 30c:	1f 93       	push	r17
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	6c 01       	movw	r12, r24
 314:	7b 01       	movw	r14, r22
 316:	8a 01       	movw	r16, r20
	printf("Calibrating Gyro...\n");
 318:	86 e0       	ldi	r24, 0x06	; 6
 31a:	92 e0       	ldi	r25, 0x02	; 2
 31c:	09 d3       	rcall	.+1554   	; 0x930 <puts>
 31e:	c4 e1       	ldi	r28, 0x14	; 20
	for (int i=0;i<calibration_counter;i++)
	{
		(*x)+=mpu6050_read_gyroX();
 320:	d0 e0       	ldi	r29, 0x00	; 0
 322:	bf df       	rcall	.-130    	; 0x2a2 <mpu6050_read_gyroX>
 324:	f6 01       	movw	r30, r12
 326:	40 81       	ld	r20, Z
 328:	51 81       	ldd	r21, Z+1	; 0x01
 32a:	62 81       	ldd	r22, Z+2	; 0x02
 32c:	73 81       	ldd	r23, Z+3	; 0x03
 32e:	48 0f       	add	r20, r24
 330:	59 1f       	adc	r21, r25
 332:	61 1d       	adc	r22, r1
 334:	71 1d       	adc	r23, r1
 336:	40 83       	st	Z, r20
 338:	51 83       	std	Z+1, r21	; 0x01
 33a:	62 83       	std	Z+2, r22	; 0x02
		(*y)+=mpu6050_read_gyroY();
 33c:	73 83       	std	Z+3, r23	; 0x03
 33e:	c1 df       	rcall	.-126    	; 0x2c2 <mpu6050_read_gyroY>
 340:	f7 01       	movw	r30, r14
 342:	40 81       	ld	r20, Z
 344:	51 81       	ldd	r21, Z+1	; 0x01
 346:	62 81       	ldd	r22, Z+2	; 0x02
 348:	73 81       	ldd	r23, Z+3	; 0x03
 34a:	48 0f       	add	r20, r24
 34c:	59 1f       	adc	r21, r25
 34e:	61 1d       	adc	r22, r1
 350:	71 1d       	adc	r23, r1
 352:	40 83       	st	Z, r20
 354:	51 83       	std	Z+1, r21	; 0x01
 356:	62 83       	std	Z+2, r22	; 0x02
		(*z)+=mpu6050_read_gyroZ();
 358:	73 83       	std	Z+3, r23	; 0x03
 35a:	c3 df       	rcall	.-122    	; 0x2e2 <mpu6050_read_gyroZ>
 35c:	f8 01       	movw	r30, r16
 35e:	40 81       	ld	r20, Z
 360:	51 81       	ldd	r21, Z+1	; 0x01
 362:	62 81       	ldd	r22, Z+2	; 0x02
 364:	73 81       	ldd	r23, Z+3	; 0x03
 366:	48 0f       	add	r20, r24
 368:	59 1f       	adc	r21, r25
 36a:	61 1d       	adc	r22, r1
 36c:	71 1d       	adc	r23, r1
 36e:	40 83       	st	Z, r20
 370:	51 83       	std	Z+1, r21	; 0x01
 372:	62 83       	std	Z+2, r22	; 0x02
 374:	73 83       	std	Z+3, r23	; 0x03
 376:	21 97       	sbiw	r28, 0x01	; 1
#include "MPU6050.h"
#ifdef CALIBERATED_DATA
void mpu6050_calibrate_gyro(int32_t *x,int32_t *y, int32_t *z)
{
	printf("Calibrating Gyro...\n");
	for (int i=0;i<calibration_counter;i++)
 378:	a1 f6       	brne	.-88     	; 0x322 <mpu6050_calibrate_gyro+0x20>
		(*x)+=mpu6050_read_gyroX();
		(*y)+=mpu6050_read_gyroY();
		(*z)+=mpu6050_read_gyroZ();
		_delay_ms(caliberation_wait_delay);
	}
		if(*x<0)
 37a:	f6 01       	movw	r30, r12
 37c:	60 81       	ld	r22, Z
 37e:	71 81       	ldd	r23, Z+1	; 0x01
 380:	82 81       	ldd	r24, Z+2	; 0x02
 382:	93 81       	ldd	r25, Z+3	; 0x03
 384:	99 23       	and	r25, r25
 386:	ac f4       	brge	.+42     	; 0x3b2 <mpu6050_calibrate_gyro+0xb0>
		(*x)=abs(*x)/calibration_counter;
 388:	9b 01       	movw	r18, r22
 38a:	77 23       	and	r23, r23
 38c:	24 f4       	brge	.+8      	; 0x396 <mpu6050_calibrate_gyro+0x94>
 38e:	22 27       	eor	r18, r18
 390:	33 27       	eor	r19, r19
 392:	26 1b       	sub	r18, r22
 394:	37 0b       	sbc	r19, r23
 396:	c9 01       	movw	r24, r18
 398:	64 e1       	ldi	r22, 0x14	; 20
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	1a d2       	rcall	.+1076   	; 0x7d2 <__divmodhi4>
 39e:	cb 01       	movw	r24, r22
 3a0:	77 0f       	add	r23, r23
 3a2:	aa 0b       	sbc	r26, r26
 3a4:	bb 0b       	sbc	r27, r27
 3a6:	f6 01       	movw	r30, r12
 3a8:	80 83       	st	Z, r24
 3aa:	91 83       	std	Z+1, r25	; 0x01
 3ac:	a2 83       	std	Z+2, r26	; 0x02
 3ae:	b3 83       	std	Z+3, r27	; 0x03
		else
		(*x)=(*x)/calibration_counter;
 3b0:	0a c0       	rjmp	.+20     	; 0x3c6 <mpu6050_calibrate_gyro+0xc4>
 3b2:	24 e1       	ldi	r18, 0x14	; 20
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	40 e0       	ldi	r20, 0x00	; 0
 3b8:	50 e0       	ldi	r21, 0x00	; 0
 3ba:	1e d2       	rcall	.+1084   	; 0x7f8 <__divmodsi4>
 3bc:	f6 01       	movw	r30, r12
 3be:	20 83       	st	Z, r18
 3c0:	31 83       	std	Z+1, r19	; 0x01
 3c2:	42 83       	std	Z+2, r20	; 0x02
 3c4:	53 83       	std	Z+3, r21	; 0x03
		
		if(*y<0)
 3c6:	f7 01       	movw	r30, r14
 3c8:	60 81       	ld	r22, Z
 3ca:	71 81       	ldd	r23, Z+1	; 0x01
 3cc:	82 81       	ldd	r24, Z+2	; 0x02
 3ce:	93 81       	ldd	r25, Z+3	; 0x03
 3d0:	99 23       	and	r25, r25
 3d2:	ac f4       	brge	.+42     	; 0x3fe <mpu6050_calibrate_gyro+0xfc>
		(*y)=abs(*y)/calibration_counter;
 3d4:	9b 01       	movw	r18, r22
 3d6:	77 23       	and	r23, r23
 3d8:	24 f4       	brge	.+8      	; 0x3e2 <mpu6050_calibrate_gyro+0xe0>
 3da:	22 27       	eor	r18, r18
 3dc:	33 27       	eor	r19, r19
 3de:	26 1b       	sub	r18, r22
 3e0:	37 0b       	sbc	r19, r23
 3e2:	c9 01       	movw	r24, r18
 3e4:	64 e1       	ldi	r22, 0x14	; 20
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	f4 d1       	rcall	.+1000   	; 0x7d2 <__divmodhi4>
 3ea:	cb 01       	movw	r24, r22
 3ec:	77 0f       	add	r23, r23
 3ee:	aa 0b       	sbc	r26, r26
 3f0:	bb 0b       	sbc	r27, r27
 3f2:	f7 01       	movw	r30, r14
 3f4:	80 83       	st	Z, r24
 3f6:	91 83       	std	Z+1, r25	; 0x01
 3f8:	a2 83       	std	Z+2, r26	; 0x02
 3fa:	b3 83       	std	Z+3, r27	; 0x03
		else
		(*y)=(*y)/calibration_counter;
 3fc:	0a c0       	rjmp	.+20     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3fe:	24 e1       	ldi	r18, 0x14	; 20
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	40 e0       	ldi	r20, 0x00	; 0
 404:	50 e0       	ldi	r21, 0x00	; 0
 406:	f8 d1       	rcall	.+1008   	; 0x7f8 <__divmodsi4>
 408:	f7 01       	movw	r30, r14
 40a:	20 83       	st	Z, r18
 40c:	31 83       	std	Z+1, r19	; 0x01
 40e:	42 83       	std	Z+2, r20	; 0x02
 410:	53 83       	std	Z+3, r21	; 0x03
		
		if(*z<0)
 412:	f8 01       	movw	r30, r16
 414:	60 81       	ld	r22, Z
 416:	71 81       	ldd	r23, Z+1	; 0x01
 418:	82 81       	ldd	r24, Z+2	; 0x02
 41a:	93 81       	ldd	r25, Z+3	; 0x03
 41c:	99 23       	and	r25, r25
 41e:	ac f4       	brge	.+42     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		(*z)=abs(*z)/calibration_counter;
 420:	9b 01       	movw	r18, r22
 422:	77 23       	and	r23, r23
 424:	24 f4       	brge	.+8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 426:	22 27       	eor	r18, r18
 428:	33 27       	eor	r19, r19
 42a:	26 1b       	sub	r18, r22
 42c:	37 0b       	sbc	r19, r23
 42e:	c9 01       	movw	r24, r18
 430:	64 e1       	ldi	r22, 0x14	; 20
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	ce d1       	rcall	.+924    	; 0x7d2 <__divmodhi4>
 436:	cb 01       	movw	r24, r22
 438:	77 0f       	add	r23, r23
 43a:	aa 0b       	sbc	r26, r26
 43c:	bb 0b       	sbc	r27, r27
 43e:	f8 01       	movw	r30, r16
 440:	80 83       	st	Z, r24
 442:	91 83       	std	Z+1, r25	; 0x01
 444:	a2 83       	std	Z+2, r26	; 0x02
 446:	b3 83       	std	Z+3, r27	; 0x03
		else
		(*z)=(*z)/calibration_counter;
 448:	0a c0       	rjmp	.+20     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 44a:	24 e1       	ldi	r18, 0x14	; 20
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	40 e0       	ldi	r20, 0x00	; 0
 450:	50 e0       	ldi	r21, 0x00	; 0
 452:	d2 d1       	rcall	.+932    	; 0x7f8 <__divmodsi4>
 454:	f8 01       	movw	r30, r16
 456:	20 83       	st	Z, r18
 458:	31 83       	std	Z+1, r19	; 0x01
 45a:	42 83       	std	Z+2, r20	; 0x02
 45c:	53 83       	std	Z+3, r21	; 0x03
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/			
	
}
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	1f 91       	pop	r17
 464:	0f 91       	pop	r16
 466:	ff 90       	pop	r15
 468:	ef 90       	pop	r14
 46a:	df 90       	pop	r13
 46c:	cf 90       	pop	r12
 46e:	08 95       	ret

00000470 <mpu6050_read_accelX>:
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_H);
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_L);
	return axis_value;
}
uint16_t mpu6050_read_accelX()
{
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_XOUT_H);
 474:	8b e3       	ldi	r24, 0x3B	; 59
 476:	03 df       	rcall	.-506    	; 0x27e <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_XOUT_L);
 478:	c8 2f       	mov	r28, r24
 47a:	d0 e0       	ldi	r29, 0x00	; 0
 47c:	dc 2f       	mov	r29, r28
 47e:	cc 27       	eor	r28, r28
 480:	8c e3       	ldi	r24, 0x3C	; 60
 482:	fd de       	rcall	.-518    	; 0x27e <mpu6050_readByte>
	return axis_value;
}
 484:	9e 01       	movw	r18, r28
 486:	28 2b       	or	r18, r24
 488:	c9 01       	movw	r24, r18
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <mpu6050_read_accelY>:
uint16_t mpu6050_read_accelY()
{
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_YOUT_H);
 494:	8d e3       	ldi	r24, 0x3D	; 61
 496:	f3 de       	rcall	.-538    	; 0x27e <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_YOUT_L);
 498:	c8 2f       	mov	r28, r24
 49a:	d0 e0       	ldi	r29, 0x00	; 0
 49c:	dc 2f       	mov	r29, r28
 49e:	cc 27       	eor	r28, r28
 4a0:	8e e3       	ldi	r24, 0x3E	; 62
 4a2:	ed de       	rcall	.-550    	; 0x27e <mpu6050_readByte>
	return axis_value;
}
 4a4:	9e 01       	movw	r18, r28
 4a6:	28 2b       	or	r18, r24
 4a8:	c9 01       	movw	r24, r18
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	08 95       	ret

000004b0 <mpu6050_read_accelZ>:
uint16_t mpu6050_read_accelZ()
{
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_H);
 4b4:	8f e3       	ldi	r24, 0x3F	; 63
 4b6:	e3 de       	rcall	.-570    	; 0x27e <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_L);
 4b8:	c8 2f       	mov	r28, r24
 4ba:	d0 e0       	ldi	r29, 0x00	; 0
 4bc:	dc 2f       	mov	r29, r28
 4be:	cc 27       	eor	r28, r28
 4c0:	80 e4       	ldi	r24, 0x40	; 64
 4c2:	dd de       	rcall	.-582    	; 0x27e <mpu6050_readByte>
	return axis_value;
}
 4c4:	9e 01       	movw	r18, r28
 4c6:	28 2b       	or	r18, r24
 4c8:	c9 01       	movw	r24, r18
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	08 95       	ret

000004d0 <mpu6050_calibrate_accel>:
	*/			
	
}

void mpu6050_calibrate_accel(int32_t *x,int32_t *y, int32_t *z)
{
 4d0:	cf 92       	push	r12
 4d2:	df 92       	push	r13
 4d4:	ef 92       	push	r14
 4d6:	ff 92       	push	r15
 4d8:	0f 93       	push	r16
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	6c 01       	movw	r12, r24
 4e2:	7b 01       	movw	r14, r22
 4e4:	8a 01       	movw	r16, r20
	
	printf("Calibrating Accelerometer...\n");
 4e6:	8a e1       	ldi	r24, 0x1A	; 26
 4e8:	92 e0       	ldi	r25, 0x02	; 2
 4ea:	22 d2       	rcall	.+1092   	; 0x930 <puts>
 4ec:	c4 e1       	ldi	r28, 0x14	; 20
	for(int i=0;i<calibration_counter;i++){
		(*x)+=mpu6050_read_accelX();
 4ee:	d0 e0       	ldi	r29, 0x00	; 0
 4f0:	bf df       	rcall	.-130    	; 0x470 <mpu6050_read_accelX>
 4f2:	f6 01       	movw	r30, r12
 4f4:	40 81       	ld	r20, Z
 4f6:	51 81       	ldd	r21, Z+1	; 0x01
 4f8:	62 81       	ldd	r22, Z+2	; 0x02
 4fa:	73 81       	ldd	r23, Z+3	; 0x03
 4fc:	48 0f       	add	r20, r24
 4fe:	59 1f       	adc	r21, r25
 500:	61 1d       	adc	r22, r1
 502:	71 1d       	adc	r23, r1
 504:	40 83       	st	Z, r20
 506:	51 83       	std	Z+1, r21	; 0x01
 508:	62 83       	std	Z+2, r22	; 0x02
		(*y)+=mpu6050_read_accelY();
 50a:	73 83       	std	Z+3, r23	; 0x03
 50c:	c1 df       	rcall	.-126    	; 0x490 <mpu6050_read_accelY>
 50e:	f7 01       	movw	r30, r14
 510:	40 81       	ld	r20, Z
 512:	51 81       	ldd	r21, Z+1	; 0x01
 514:	62 81       	ldd	r22, Z+2	; 0x02
 516:	73 81       	ldd	r23, Z+3	; 0x03
 518:	48 0f       	add	r20, r24
 51a:	59 1f       	adc	r21, r25
 51c:	61 1d       	adc	r22, r1
 51e:	71 1d       	adc	r23, r1
 520:	40 83       	st	Z, r20
 522:	51 83       	std	Z+1, r21	; 0x01
 524:	62 83       	std	Z+2, r22	; 0x02
		(*z)+=mpu6050_read_accelZ();
 526:	73 83       	std	Z+3, r23	; 0x03
 528:	c3 df       	rcall	.-122    	; 0x4b0 <mpu6050_read_accelZ>
 52a:	f8 01       	movw	r30, r16
 52c:	40 81       	ld	r20, Z
 52e:	51 81       	ldd	r21, Z+1	; 0x01
 530:	62 81       	ldd	r22, Z+2	; 0x02
 532:	73 81       	ldd	r23, Z+3	; 0x03
 534:	48 0f       	add	r20, r24
 536:	59 1f       	adc	r21, r25
 538:	61 1d       	adc	r22, r1
 53a:	71 1d       	adc	r23, r1
 53c:	40 83       	st	Z, r20
 53e:	51 83       	std	Z+1, r21	; 0x01
 540:	62 83       	std	Z+2, r22	; 0x02
 542:	73 83       	std	Z+3, r23	; 0x03
 544:	21 97       	sbiw	r28, 0x01	; 1

void mpu6050_calibrate_accel(int32_t *x,int32_t *y, int32_t *z)
{
	
	printf("Calibrating Accelerometer...\n");
	for(int i=0;i<calibration_counter;i++){
 546:	a1 f6       	brne	.-88     	; 0x4f0 <mpu6050_calibrate_accel+0x20>
		(*x)+=mpu6050_read_accelX();
		(*y)+=mpu6050_read_accelY();
		(*z)+=mpu6050_read_accelZ();
		_delay_ms(caliberation_wait_delay);
	}
	if(*x<0)
 548:	f6 01       	movw	r30, r12
 54a:	60 81       	ld	r22, Z
 54c:	71 81       	ldd	r23, Z+1	; 0x01
 54e:	82 81       	ldd	r24, Z+2	; 0x02
 550:	93 81       	ldd	r25, Z+3	; 0x03
 552:	99 23       	and	r25, r25
 554:	ac f4       	brge	.+42     	; 0x580 <mpu6050_calibrate_accel+0xb0>
	(*x)=abs(*x)/calibration_counter;
 556:	9b 01       	movw	r18, r22
 558:	77 23       	and	r23, r23
 55a:	24 f4       	brge	.+8      	; 0x564 <mpu6050_calibrate_accel+0x94>
 55c:	22 27       	eor	r18, r18
 55e:	33 27       	eor	r19, r19
 560:	26 1b       	sub	r18, r22
 562:	37 0b       	sbc	r19, r23
 564:	c9 01       	movw	r24, r18
 566:	64 e1       	ldi	r22, 0x14	; 20
 568:	70 e0       	ldi	r23, 0x00	; 0
 56a:	33 d1       	rcall	.+614    	; 0x7d2 <__divmodhi4>
 56c:	cb 01       	movw	r24, r22
 56e:	77 0f       	add	r23, r23
 570:	aa 0b       	sbc	r26, r26
 572:	bb 0b       	sbc	r27, r27
 574:	f6 01       	movw	r30, r12
 576:	80 83       	st	Z, r24
 578:	91 83       	std	Z+1, r25	; 0x01
 57a:	a2 83       	std	Z+2, r26	; 0x02
 57c:	b3 83       	std	Z+3, r27	; 0x03
	else
	(*x)=(*x)/calibration_counter;
 57e:	0a c0       	rjmp	.+20     	; 0x594 <mpu6050_calibrate_accel+0xc4>
 580:	24 e1       	ldi	r18, 0x14	; 20
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	40 e0       	ldi	r20, 0x00	; 0
 586:	50 e0       	ldi	r21, 0x00	; 0
 588:	37 d1       	rcall	.+622    	; 0x7f8 <__divmodsi4>
 58a:	f6 01       	movw	r30, r12
 58c:	20 83       	st	Z, r18
 58e:	31 83       	std	Z+1, r19	; 0x01
 590:	42 83       	std	Z+2, r20	; 0x02
 592:	53 83       	std	Z+3, r21	; 0x03
	
	if(*y<0)
 594:	f7 01       	movw	r30, r14
 596:	60 81       	ld	r22, Z
 598:	71 81       	ldd	r23, Z+1	; 0x01
 59a:	82 81       	ldd	r24, Z+2	; 0x02
 59c:	93 81       	ldd	r25, Z+3	; 0x03
 59e:	99 23       	and	r25, r25
 5a0:	ac f4       	brge	.+42     	; 0x5cc <mpu6050_calibrate_accel+0xfc>
	(*y)=abs(*y)/calibration_counter;
 5a2:	9b 01       	movw	r18, r22
 5a4:	77 23       	and	r23, r23
 5a6:	24 f4       	brge	.+8      	; 0x5b0 <mpu6050_calibrate_accel+0xe0>
 5a8:	22 27       	eor	r18, r18
 5aa:	33 27       	eor	r19, r19
 5ac:	26 1b       	sub	r18, r22
 5ae:	37 0b       	sbc	r19, r23
 5b0:	c9 01       	movw	r24, r18
 5b2:	64 e1       	ldi	r22, 0x14	; 20
 5b4:	70 e0       	ldi	r23, 0x00	; 0
 5b6:	0d d1       	rcall	.+538    	; 0x7d2 <__divmodhi4>
 5b8:	cb 01       	movw	r24, r22
 5ba:	77 0f       	add	r23, r23
 5bc:	aa 0b       	sbc	r26, r26
 5be:	bb 0b       	sbc	r27, r27
 5c0:	f7 01       	movw	r30, r14
 5c2:	80 83       	st	Z, r24
 5c4:	91 83       	std	Z+1, r25	; 0x01
 5c6:	a2 83       	std	Z+2, r26	; 0x02
 5c8:	b3 83       	std	Z+3, r27	; 0x03
	else
	(*y)=(*y)/calibration_counter;
 5ca:	0a c0       	rjmp	.+20     	; 0x5e0 <mpu6050_calibrate_accel+0x110>
 5cc:	24 e1       	ldi	r18, 0x14	; 20
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	40 e0       	ldi	r20, 0x00	; 0
 5d2:	50 e0       	ldi	r21, 0x00	; 0
 5d4:	11 d1       	rcall	.+546    	; 0x7f8 <__divmodsi4>
 5d6:	f7 01       	movw	r30, r14
 5d8:	20 83       	st	Z, r18
 5da:	31 83       	std	Z+1, r19	; 0x01
 5dc:	42 83       	std	Z+2, r20	; 0x02
 5de:	53 83       	std	Z+3, r21	; 0x03
	
	if(*z<0)
 5e0:	f8 01       	movw	r30, r16
 5e2:	60 81       	ld	r22, Z
 5e4:	71 81       	ldd	r23, Z+1	; 0x01
 5e6:	82 81       	ldd	r24, Z+2	; 0x02
 5e8:	93 81       	ldd	r25, Z+3	; 0x03
 5ea:	99 23       	and	r25, r25
 5ec:	ac f4       	brge	.+42     	; 0x618 <mpu6050_calibrate_accel+0x148>
	(*z)=abs(*z)/calibration_counter;
 5ee:	9b 01       	movw	r18, r22
 5f0:	77 23       	and	r23, r23
 5f2:	24 f4       	brge	.+8      	; 0x5fc <mpu6050_calibrate_accel+0x12c>
 5f4:	22 27       	eor	r18, r18
 5f6:	33 27       	eor	r19, r19
 5f8:	26 1b       	sub	r18, r22
 5fa:	37 0b       	sbc	r19, r23
 5fc:	c9 01       	movw	r24, r18
 5fe:	64 e1       	ldi	r22, 0x14	; 20
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	e7 d0       	rcall	.+462    	; 0x7d2 <__divmodhi4>
 604:	cb 01       	movw	r24, r22
 606:	77 0f       	add	r23, r23
 608:	aa 0b       	sbc	r26, r26
 60a:	bb 0b       	sbc	r27, r27
 60c:	f8 01       	movw	r30, r16
 60e:	80 83       	st	Z, r24
 610:	91 83       	std	Z+1, r25	; 0x01
 612:	a2 83       	std	Z+2, r26	; 0x02
 614:	b3 83       	std	Z+3, r27	; 0x03
	else
	(*z)=(*z)/calibration_counter;
 616:	0a c0       	rjmp	.+20     	; 0x62c <mpu6050_calibrate_accel+0x15c>
 618:	24 e1       	ldi	r18, 0x14	; 20
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	40 e0       	ldi	r20, 0x00	; 0
 61e:	50 e0       	ldi	r21, 0x00	; 0
 620:	eb d0       	rcall	.+470    	; 0x7f8 <__divmodsi4>
 622:	f8 01       	movw	r30, r16
 624:	20 83       	st	Z, r18
 626:	31 83       	std	Z+1, r19	; 0x01
 628:	42 83       	std	Z+2, r20	; 0x02
 62a:	53 83       	std	Z+3, r21	; 0x03
	printf("  ");
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/
}
 62c:	df 91       	pop	r29
 62e:	cf 91       	pop	r28
 630:	1f 91       	pop	r17
 632:	0f 91       	pop	r16
 634:	ff 90       	pop	r15
 636:	ef 90       	pop	r14
 638:	df 90       	pop	r13
 63a:	cf 90       	pop	r12
 63c:	08 95       	ret

0000063e <mpu6050_writeByte>:
	uint8_t byteToReturn=i2c_readNak();
	i2c_stop();
	return byteToReturn;
}
void mpu6050_writeByte(uint8_t wereToWrite,uint8_t byteToWrite)//writebyte
{
 63e:	cf 93       	push	r28
 640:	df 93       	push	r29
 642:	d8 2f       	mov	r29, r24
 644:	c6 2f       	mov	r28, r22
	i2c_start(MPU6050_WRITE);
 646:	80 ed       	ldi	r24, 0xD0	; 208
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	1f d0       	rcall	.+62     	; 0x68a <i2c_start>
	i2c_write(wereToWrite);
 64c:	8d 2f       	mov	r24, r29
 64e:	90 e0       	ldi	r25, 0x00	; 0
	i2c_write(byteToWrite);
 650:	72 d0       	rcall	.+228    	; 0x736 <i2c_write>
 652:	8c 2f       	mov	r24, r28
	i2c_stop();
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	6f d0       	rcall	.+222    	; 0x736 <i2c_write>
}
 658:	5e d0       	rcall	.+188    	; 0x716 <i2c_stop>
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	08 95       	ret

00000660 <setup_timer3>:
void setup_timer3(void)
{
	//64 pres, 250.000 hz 0.000004s
	//sbi (TCCR5B, CS50);//only this no prescaling
	
	sbi (TCCR3B, CS30);//only this 8
 660:	e1 e9       	ldi	r30, 0x91	; 145
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	80 81       	ld	r24, Z
 666:	81 60       	ori	r24, 0x01	; 1
 668:	80 83       	st	Z, r24
	//sbi (TCCR5B, CS52);//only this 256
	sbi (TCCR3B, WGM32);//OCR4A compare interrupt
 66a:	80 81       	ld	r24, Z
 66c:	88 60       	ori	r24, 0x08	; 8
 66e:	80 83       	st	Z, r24
 670:	08 95       	ret

00000672 <Enable_timer3_compare_interrupt>:
}
void Enable_timer3_compare_interrupt()
{
	sbi (TIMSK3, OCIE3A);
 672:	e1 e7       	ldi	r30, 0x71	; 113
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	80 81       	ld	r24, Z
 678:	82 60       	ori	r24, 0x02	; 2
 67a:	80 83       	st	Z, r24
 67c:	08 95       	ret

0000067e <i2c_init>:
	if(i2c_timer == 0)
		return 0;

    return TWDR;

}/* i2c_readAck */
 67e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 682:	8c e0       	ldi	r24, 0x0C	; 12
 684:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
 688:	08 95       	ret

0000068a <i2c_start>:
 68a:	94 ea       	ldi	r25, 0xA4	; 164
 68c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 690:	4f ef       	ldi	r20, 0xFF	; 255
 692:	50 e0       	ldi	r21, 0x00	; 0
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	70 e0       	ldi	r23, 0x00	; 0
 698:	ec eb       	ldi	r30, 0xBC	; 188
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	90 81       	ld	r25, Z
 69e:	99 23       	and	r25, r25
 6a0:	34 f0       	brlt	.+12     	; 0x6ae <i2c_start+0x24>
 6a2:	41 50       	subi	r20, 0x01	; 1
 6a4:	51 09       	sbc	r21, r1
 6a6:	61 09       	sbc	r22, r1
 6a8:	71 09       	sbc	r23, r1
 6aa:	c0 f7       	brcc	.-16     	; 0x69c <i2c_start+0x12>
 6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <i2c_start+0x2c>
 6ae:	45 2b       	or	r20, r21
 6b0:	46 2b       	or	r20, r22
 6b2:	47 2b       	or	r20, r23
 6b4:	41 f1       	breq	.+80     	; 0x706 <i2c_start+0x7c>
 6b6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 6ba:	98 7f       	andi	r25, 0xF8	; 248
 6bc:	98 30       	cpi	r25, 0x08	; 8
 6be:	11 f0       	breq	.+4      	; 0x6c4 <i2c_start+0x3a>
 6c0:	90 31       	cpi	r25, 0x10	; 16
 6c2:	19 f5       	brne	.+70     	; 0x70a <i2c_start+0x80>
 6c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 6c8:	84 e8       	ldi	r24, 0x84	; 132
 6ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 6ce:	8f ef       	ldi	r24, 0xFF	; 255
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	a0 e0       	ldi	r26, 0x00	; 0
 6d4:	b0 e0       	ldi	r27, 0x00	; 0
 6d6:	ec eb       	ldi	r30, 0xBC	; 188
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	20 81       	ld	r18, Z
 6dc:	22 23       	and	r18, r18
 6de:	2c f0       	brlt	.+10     	; 0x6ea <i2c_start+0x60>
 6e0:	01 97       	sbiw	r24, 0x01	; 1
 6e2:	a1 09       	sbc	r26, r1
 6e4:	b1 09       	sbc	r27, r1
 6e6:	c8 f7       	brcc	.-14     	; 0x6da <i2c_start+0x50>
 6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <i2c_start+0x68>
 6ea:	89 2b       	or	r24, r25
 6ec:	8a 2b       	or	r24, r26
 6ee:	8b 2b       	or	r24, r27
 6f0:	71 f0       	breq	.+28     	; 0x70e <i2c_start+0x84>
 6f2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 6f6:	98 7f       	andi	r25, 0xF8	; 248
 6f8:	98 31       	cpi	r25, 0x18	; 24
 6fa:	59 f0       	breq	.+22     	; 0x712 <i2c_start+0x88>
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	90 34       	cpi	r25, 0x40	; 64
 700:	49 f4       	brne	.+18     	; 0x714 <i2c_start+0x8a>
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	08 95       	ret
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	08 95       	ret
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	08 95       	ret
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	08 95       	ret
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	08 95       	ret

00000716 <i2c_stop>:
 716:	84 e9       	ldi	r24, 0x94	; 148
 718:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 71c:	80 e0       	ldi	r24, 0x00	; 0
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	ec eb       	ldi	r30, 0xBC	; 188
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	20 81       	ld	r18, Z
 726:	24 ff       	sbrs	r18, 4
 728:	05 c0       	rjmp	.+10     	; 0x734 <i2c_stop+0x1e>
 72a:	01 96       	adiw	r24, 0x01	; 1
 72c:	81 15       	cp	r24, r1
 72e:	21 e0       	ldi	r18, 0x01	; 1
 730:	92 07       	cpc	r25, r18
 732:	c1 f7       	brne	.-16     	; 0x724 <i2c_stop+0xe>
 734:	08 95       	ret

00000736 <i2c_write>:
 736:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 73a:	84 e8       	ldi	r24, 0x84	; 132
 73c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 740:	8f ef       	ldi	r24, 0xFF	; 255
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	a0 e0       	ldi	r26, 0x00	; 0
 746:	b0 e0       	ldi	r27, 0x00	; 0
 748:	ec eb       	ldi	r30, 0xBC	; 188
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	20 81       	ld	r18, Z
 74e:	22 23       	and	r18, r18
 750:	2c f0       	brlt	.+10     	; 0x75c <i2c_write+0x26>
 752:	01 97       	sbiw	r24, 0x01	; 1
 754:	a1 09       	sbc	r26, r1
 756:	b1 09       	sbc	r27, r1
 758:	c8 f7       	brcc	.-14     	; 0x74c <i2c_write+0x16>
 75a:	04 c0       	rjmp	.+8      	; 0x764 <i2c_write+0x2e>
 75c:	89 2b       	or	r24, r25
 75e:	8a 2b       	or	r24, r26
 760:	8b 2b       	or	r24, r27
 762:	41 f0       	breq	.+16     	; 0x774 <i2c_write+0x3e>
 764:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 768:	98 7f       	andi	r25, 0xF8	; 248
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	98 32       	cpi	r25, 0x28	; 40
 76e:	19 f4       	brne	.+6      	; 0x776 <i2c_write+0x40>
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	08 95       	ret
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	08 95       	ret

00000778 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
 778:	84 e8       	ldi	r24, 0x84	; 132
 77a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
 77e:	8f ef       	ldi	r24, 0xFF	; 255
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	a0 e0       	ldi	r26, 0x00	; 0
 784:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
 786:	ec eb       	ldi	r30, 0xBC	; 188
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	20 81       	ld	r18, Z
 78c:	22 23       	and	r18, r18
 78e:	2c f0       	brlt	.+10     	; 0x79a <i2c_readNak+0x22>
 790:	01 97       	sbiw	r24, 0x01	; 1
 792:	a1 09       	sbc	r26, r1
 794:	b1 09       	sbc	r27, r1
 796:	c8 f7       	brcc	.-14     	; 0x78a <i2c_readNak+0x12>
 798:	04 c0       	rjmp	.+8      	; 0x7a2 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
 79a:	89 2b       	or	r24, r25
 79c:	8a 2b       	or	r24, r26
 79e:	8b 2b       	or	r24, r27
 7a0:	19 f0       	breq	.+6      	; 0x7a8 <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
 7a2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 7a6:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
 7a8:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
 7aa:	08 95       	ret

000007ac <USART_Init>:
 7ac:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 7b0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 7b4:	88 e0       	ldi	r24, 0x08	; 8
 7b6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 7ba:	8e e0       	ldi	r24, 0x0E	; 14
 7bc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 7c0:	08 95       	ret

000007c2 <USART_Transmit>:
 7c2:	e0 ec       	ldi	r30, 0xC0	; 192
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	90 81       	ld	r25, Z
 7c8:	95 ff       	sbrs	r25, 5
 7ca:	fd cf       	rjmp	.-6      	; 0x7c6 <USART_Transmit+0x4>
 7cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 7d0:	08 95       	ret

000007d2 <__divmodhi4>:
 7d2:	97 fb       	bst	r25, 7
 7d4:	07 2e       	mov	r0, r23
 7d6:	16 f4       	brtc	.+4      	; 0x7dc <__divmodhi4+0xa>
 7d8:	00 94       	com	r0
 7da:	06 d0       	rcall	.+12     	; 0x7e8 <__divmodhi4_neg1>
 7dc:	77 fd       	sbrc	r23, 7
 7de:	08 d0       	rcall	.+16     	; 0x7f0 <__divmodhi4_neg2>
 7e0:	27 d0       	rcall	.+78     	; 0x830 <__udivmodhi4>
 7e2:	07 fc       	sbrc	r0, 7
 7e4:	05 d0       	rcall	.+10     	; 0x7f0 <__divmodhi4_neg2>
 7e6:	3e f4       	brtc	.+14     	; 0x7f6 <__divmodhi4_exit>

000007e8 <__divmodhi4_neg1>:
 7e8:	90 95       	com	r25
 7ea:	81 95       	neg	r24
 7ec:	9f 4f       	sbci	r25, 0xFF	; 255
 7ee:	08 95       	ret

000007f0 <__divmodhi4_neg2>:
 7f0:	70 95       	com	r23
 7f2:	61 95       	neg	r22
 7f4:	7f 4f       	sbci	r23, 0xFF	; 255

000007f6 <__divmodhi4_exit>:
 7f6:	08 95       	ret

000007f8 <__divmodsi4>:
 7f8:	05 2e       	mov	r0, r21
 7fa:	97 fb       	bst	r25, 7
 7fc:	16 f4       	brtc	.+4      	; 0x802 <__divmodsi4+0xa>
 7fe:	00 94       	com	r0
 800:	0f d0       	rcall	.+30     	; 0x820 <__negsi2>
 802:	57 fd       	sbrc	r21, 7
 804:	05 d0       	rcall	.+10     	; 0x810 <__divmodsi4_neg2>
 806:	28 d0       	rcall	.+80     	; 0x858 <__udivmodsi4>
 808:	07 fc       	sbrc	r0, 7
 80a:	02 d0       	rcall	.+4      	; 0x810 <__divmodsi4_neg2>
 80c:	46 f4       	brtc	.+16     	; 0x81e <__divmodsi4_exit>
 80e:	08 c0       	rjmp	.+16     	; 0x820 <__negsi2>

00000810 <__divmodsi4_neg2>:
 810:	50 95       	com	r21
 812:	40 95       	com	r20
 814:	30 95       	com	r19
 816:	21 95       	neg	r18
 818:	3f 4f       	sbci	r19, 0xFF	; 255
 81a:	4f 4f       	sbci	r20, 0xFF	; 255
 81c:	5f 4f       	sbci	r21, 0xFF	; 255

0000081e <__divmodsi4_exit>:
 81e:	08 95       	ret

00000820 <__negsi2>:
 820:	90 95       	com	r25
 822:	80 95       	com	r24
 824:	70 95       	com	r23
 826:	61 95       	neg	r22
 828:	7f 4f       	sbci	r23, 0xFF	; 255
 82a:	8f 4f       	sbci	r24, 0xFF	; 255
 82c:	9f 4f       	sbci	r25, 0xFF	; 255
 82e:	08 95       	ret

00000830 <__udivmodhi4>:
 830:	aa 1b       	sub	r26, r26
 832:	bb 1b       	sub	r27, r27
 834:	51 e1       	ldi	r21, 0x11	; 17
 836:	07 c0       	rjmp	.+14     	; 0x846 <__udivmodhi4_ep>

00000838 <__udivmodhi4_loop>:
 838:	aa 1f       	adc	r26, r26
 83a:	bb 1f       	adc	r27, r27
 83c:	a6 17       	cp	r26, r22
 83e:	b7 07       	cpc	r27, r23
 840:	10 f0       	brcs	.+4      	; 0x846 <__udivmodhi4_ep>
 842:	a6 1b       	sub	r26, r22
 844:	b7 0b       	sbc	r27, r23

00000846 <__udivmodhi4_ep>:
 846:	88 1f       	adc	r24, r24
 848:	99 1f       	adc	r25, r25
 84a:	5a 95       	dec	r21
 84c:	a9 f7       	brne	.-22     	; 0x838 <__udivmodhi4_loop>
 84e:	80 95       	com	r24
 850:	90 95       	com	r25
 852:	bc 01       	movw	r22, r24
 854:	cd 01       	movw	r24, r26
 856:	08 95       	ret

00000858 <__udivmodsi4>:
 858:	a1 e2       	ldi	r26, 0x21	; 33
 85a:	1a 2e       	mov	r1, r26
 85c:	aa 1b       	sub	r26, r26
 85e:	bb 1b       	sub	r27, r27
 860:	fd 01       	movw	r30, r26
 862:	0d c0       	rjmp	.+26     	; 0x87e <__udivmodsi4_ep>

00000864 <__udivmodsi4_loop>:
 864:	aa 1f       	adc	r26, r26
 866:	bb 1f       	adc	r27, r27
 868:	ee 1f       	adc	r30, r30
 86a:	ff 1f       	adc	r31, r31
 86c:	a2 17       	cp	r26, r18
 86e:	b3 07       	cpc	r27, r19
 870:	e4 07       	cpc	r30, r20
 872:	f5 07       	cpc	r31, r21
 874:	20 f0       	brcs	.+8      	; 0x87e <__udivmodsi4_ep>
 876:	a2 1b       	sub	r26, r18
 878:	b3 0b       	sbc	r27, r19
 87a:	e4 0b       	sbc	r30, r20
 87c:	f5 0b       	sbc	r31, r21

0000087e <__udivmodsi4_ep>:
 87e:	66 1f       	adc	r22, r22
 880:	77 1f       	adc	r23, r23
 882:	88 1f       	adc	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	1a 94       	dec	r1
 888:	69 f7       	brne	.-38     	; 0x864 <__udivmodsi4_loop>
 88a:	60 95       	com	r22
 88c:	70 95       	com	r23
 88e:	80 95       	com	r24
 890:	90 95       	com	r25
 892:	9b 01       	movw	r18, r22
 894:	ac 01       	movw	r20, r24
 896:	bd 01       	movw	r22, r26
 898:	cf 01       	movw	r24, r30
 89a:	08 95       	ret

0000089c <fdevopen>:
 89c:	0f 93       	push	r16
 89e:	1f 93       	push	r17
 8a0:	cf 93       	push	r28
 8a2:	df 93       	push	r29
 8a4:	00 97       	sbiw	r24, 0x00	; 0
 8a6:	31 f4       	brne	.+12     	; 0x8b4 <fdevopen+0x18>
 8a8:	61 15       	cp	r22, r1
 8aa:	71 05       	cpc	r23, r1
 8ac:	19 f4       	brne	.+6      	; 0x8b4 <fdevopen+0x18>
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	39 c0       	rjmp	.+114    	; 0x926 <fdevopen+0x8a>
 8b4:	8b 01       	movw	r16, r22
 8b6:	ec 01       	movw	r28, r24
 8b8:	6e e0       	ldi	r22, 0x0E	; 14
 8ba:	70 e0       	ldi	r23, 0x00	; 0
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	67 d0       	rcall	.+206    	; 0x990 <calloc>
 8c2:	fc 01       	movw	r30, r24
 8c4:	89 2b       	or	r24, r25
 8c6:	99 f3       	breq	.-26     	; 0x8ae <fdevopen+0x12>
 8c8:	80 e8       	ldi	r24, 0x80	; 128
 8ca:	83 83       	std	Z+3, r24	; 0x03
 8cc:	01 15       	cp	r16, r1
 8ce:	11 05       	cpc	r17, r1
 8d0:	71 f0       	breq	.+28     	; 0x8ee <fdevopen+0x52>
 8d2:	13 87       	std	Z+11, r17	; 0x0b
 8d4:	02 87       	std	Z+10, r16	; 0x0a
 8d6:	81 e8       	ldi	r24, 0x81	; 129
 8d8:	83 83       	std	Z+3, r24	; 0x03
 8da:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <__iob>
 8de:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <__iob+0x1>
 8e2:	89 2b       	or	r24, r25
 8e4:	21 f4       	brne	.+8      	; 0x8ee <fdevopen+0x52>
 8e6:	f0 93 4d 02 	sts	0x024D, r31	; 0x80024d <__iob+0x1>
 8ea:	e0 93 4c 02 	sts	0x024C, r30	; 0x80024c <__iob>
 8ee:	20 97       	sbiw	r28, 0x00	; 0
 8f0:	c9 f0       	breq	.+50     	; 0x924 <fdevopen+0x88>
 8f2:	d1 87       	std	Z+9, r29	; 0x09
 8f4:	c0 87       	std	Z+8, r28	; 0x08
 8f6:	83 81       	ldd	r24, Z+3	; 0x03
 8f8:	82 60       	ori	r24, 0x02	; 2
 8fa:	83 83       	std	Z+3, r24	; 0x03
 8fc:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <__iob+0x2>
 900:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <__iob+0x3>
 904:	89 2b       	or	r24, r25
 906:	71 f4       	brne	.+28     	; 0x924 <fdevopen+0x88>
 908:	f0 93 4f 02 	sts	0x024F, r31	; 0x80024f <__iob+0x3>
 90c:	e0 93 4e 02 	sts	0x024E, r30	; 0x80024e <__iob+0x2>
 910:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <__iob+0x4>
 914:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <__iob+0x5>
 918:	89 2b       	or	r24, r25
 91a:	21 f4       	brne	.+8      	; 0x924 <fdevopen+0x88>
 91c:	f0 93 51 02 	sts	0x0251, r31	; 0x800251 <__iob+0x5>
 920:	e0 93 50 02 	sts	0x0250, r30	; 0x800250 <__iob+0x4>
 924:	cf 01       	movw	r24, r30
 926:	df 91       	pop	r29
 928:	cf 91       	pop	r28
 92a:	1f 91       	pop	r17
 92c:	0f 91       	pop	r16
 92e:	08 95       	ret

00000930 <puts>:
 930:	0f 93       	push	r16
 932:	1f 93       	push	r17
 934:	cf 93       	push	r28
 936:	df 93       	push	r29
 938:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <__iob+0x2>
 93c:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <__iob+0x3>
 940:	23 81       	ldd	r18, Z+3	; 0x03
 942:	21 ff       	sbrs	r18, 1
 944:	1b c0       	rjmp	.+54     	; 0x97c <puts+0x4c>
 946:	8c 01       	movw	r16, r24
 948:	d0 e0       	ldi	r29, 0x00	; 0
 94a:	c0 e0       	ldi	r28, 0x00	; 0
 94c:	f8 01       	movw	r30, r16
 94e:	81 91       	ld	r24, Z+
 950:	8f 01       	movw	r16, r30
 952:	60 91 4e 02 	lds	r22, 0x024E	; 0x80024e <__iob+0x2>
 956:	70 91 4f 02 	lds	r23, 0x024F	; 0x80024f <__iob+0x3>
 95a:	db 01       	movw	r26, r22
 95c:	18 96       	adiw	r26, 0x08	; 8
 95e:	ed 91       	ld	r30, X+
 960:	fc 91       	ld	r31, X
 962:	19 97       	sbiw	r26, 0x09	; 9
 964:	88 23       	and	r24, r24
 966:	31 f0       	breq	.+12     	; 0x974 <puts+0x44>
 968:	19 95       	eicall
 96a:	89 2b       	or	r24, r25
 96c:	79 f3       	breq	.-34     	; 0x94c <puts+0x1c>
 96e:	df ef       	ldi	r29, 0xFF	; 255
 970:	cf ef       	ldi	r28, 0xFF	; 255
 972:	ec cf       	rjmp	.-40     	; 0x94c <puts+0x1c>
 974:	8a e0       	ldi	r24, 0x0A	; 10
 976:	19 95       	eicall
 978:	89 2b       	or	r24, r25
 97a:	19 f0       	breq	.+6      	; 0x982 <puts+0x52>
 97c:	8f ef       	ldi	r24, 0xFF	; 255
 97e:	9f ef       	ldi	r25, 0xFF	; 255
 980:	02 c0       	rjmp	.+4      	; 0x986 <puts+0x56>
 982:	8d 2f       	mov	r24, r29
 984:	9c 2f       	mov	r25, r28
 986:	df 91       	pop	r29
 988:	cf 91       	pop	r28
 98a:	1f 91       	pop	r17
 98c:	0f 91       	pop	r16
 98e:	08 95       	ret

00000990 <calloc>:
 990:	0f 93       	push	r16
 992:	1f 93       	push	r17
 994:	cf 93       	push	r28
 996:	df 93       	push	r29
 998:	86 9f       	mul	r24, r22
 99a:	80 01       	movw	r16, r0
 99c:	87 9f       	mul	r24, r23
 99e:	10 0d       	add	r17, r0
 9a0:	96 9f       	mul	r25, r22
 9a2:	10 0d       	add	r17, r0
 9a4:	11 24       	eor	r1, r1
 9a6:	c8 01       	movw	r24, r16
 9a8:	0d d0       	rcall	.+26     	; 0x9c4 <malloc>
 9aa:	ec 01       	movw	r28, r24
 9ac:	00 97       	sbiw	r24, 0x00	; 0
 9ae:	21 f0       	breq	.+8      	; 0x9b8 <calloc+0x28>
 9b0:	a8 01       	movw	r20, r16
 9b2:	60 e0       	ldi	r22, 0x00	; 0
 9b4:	70 e0       	ldi	r23, 0x00	; 0
 9b6:	27 d1       	rcall	.+590    	; 0xc06 <memset>
 9b8:	ce 01       	movw	r24, r28
 9ba:	df 91       	pop	r29
 9bc:	cf 91       	pop	r28
 9be:	1f 91       	pop	r17
 9c0:	0f 91       	pop	r16
 9c2:	08 95       	ret

000009c4 <malloc>:
 9c4:	0f 93       	push	r16
 9c6:	1f 93       	push	r17
 9c8:	cf 93       	push	r28
 9ca:	df 93       	push	r29
 9cc:	82 30       	cpi	r24, 0x02	; 2
 9ce:	91 05       	cpc	r25, r1
 9d0:	10 f4       	brcc	.+4      	; 0x9d6 <malloc+0x12>
 9d2:	82 e0       	ldi	r24, 0x02	; 2
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <__flp>
 9da:	f0 91 55 02 	lds	r31, 0x0255	; 0x800255 <__flp+0x1>
 9de:	20 e0       	ldi	r18, 0x00	; 0
 9e0:	30 e0       	ldi	r19, 0x00	; 0
 9e2:	a0 e0       	ldi	r26, 0x00	; 0
 9e4:	b0 e0       	ldi	r27, 0x00	; 0
 9e6:	30 97       	sbiw	r30, 0x00	; 0
 9e8:	19 f1       	breq	.+70     	; 0xa30 <malloc+0x6c>
 9ea:	40 81       	ld	r20, Z
 9ec:	51 81       	ldd	r21, Z+1	; 0x01
 9ee:	02 81       	ldd	r16, Z+2	; 0x02
 9f0:	13 81       	ldd	r17, Z+3	; 0x03
 9f2:	48 17       	cp	r20, r24
 9f4:	59 07       	cpc	r21, r25
 9f6:	c8 f0       	brcs	.+50     	; 0xa2a <malloc+0x66>
 9f8:	84 17       	cp	r24, r20
 9fa:	95 07       	cpc	r25, r21
 9fc:	69 f4       	brne	.+26     	; 0xa18 <malloc+0x54>
 9fe:	10 97       	sbiw	r26, 0x00	; 0
 a00:	31 f0       	breq	.+12     	; 0xa0e <malloc+0x4a>
 a02:	12 96       	adiw	r26, 0x02	; 2
 a04:	0c 93       	st	X, r16
 a06:	12 97       	sbiw	r26, 0x02	; 2
 a08:	13 96       	adiw	r26, 0x03	; 3
 a0a:	1c 93       	st	X, r17
 a0c:	27 c0       	rjmp	.+78     	; 0xa5c <malloc+0x98>
 a0e:	00 93 54 02 	sts	0x0254, r16	; 0x800254 <__flp>
 a12:	10 93 55 02 	sts	0x0255, r17	; 0x800255 <__flp+0x1>
 a16:	22 c0       	rjmp	.+68     	; 0xa5c <malloc+0x98>
 a18:	21 15       	cp	r18, r1
 a1a:	31 05       	cpc	r19, r1
 a1c:	19 f0       	breq	.+6      	; 0xa24 <malloc+0x60>
 a1e:	42 17       	cp	r20, r18
 a20:	53 07       	cpc	r21, r19
 a22:	18 f4       	brcc	.+6      	; 0xa2a <malloc+0x66>
 a24:	9a 01       	movw	r18, r20
 a26:	bd 01       	movw	r22, r26
 a28:	ef 01       	movw	r28, r30
 a2a:	df 01       	movw	r26, r30
 a2c:	f8 01       	movw	r30, r16
 a2e:	db cf       	rjmp	.-74     	; 0x9e6 <malloc+0x22>
 a30:	21 15       	cp	r18, r1
 a32:	31 05       	cpc	r19, r1
 a34:	f9 f0       	breq	.+62     	; 0xa74 <malloc+0xb0>
 a36:	28 1b       	sub	r18, r24
 a38:	39 0b       	sbc	r19, r25
 a3a:	24 30       	cpi	r18, 0x04	; 4
 a3c:	31 05       	cpc	r19, r1
 a3e:	80 f4       	brcc	.+32     	; 0xa60 <malloc+0x9c>
 a40:	8a 81       	ldd	r24, Y+2	; 0x02
 a42:	9b 81       	ldd	r25, Y+3	; 0x03
 a44:	61 15       	cp	r22, r1
 a46:	71 05       	cpc	r23, r1
 a48:	21 f0       	breq	.+8      	; 0xa52 <malloc+0x8e>
 a4a:	fb 01       	movw	r30, r22
 a4c:	93 83       	std	Z+3, r25	; 0x03
 a4e:	82 83       	std	Z+2, r24	; 0x02
 a50:	04 c0       	rjmp	.+8      	; 0xa5a <malloc+0x96>
 a52:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <__flp+0x1>
 a56:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <__flp>
 a5a:	fe 01       	movw	r30, r28
 a5c:	32 96       	adiw	r30, 0x02	; 2
 a5e:	44 c0       	rjmp	.+136    	; 0xae8 <malloc+0x124>
 a60:	fe 01       	movw	r30, r28
 a62:	e2 0f       	add	r30, r18
 a64:	f3 1f       	adc	r31, r19
 a66:	81 93       	st	Z+, r24
 a68:	91 93       	st	Z+, r25
 a6a:	22 50       	subi	r18, 0x02	; 2
 a6c:	31 09       	sbc	r19, r1
 a6e:	39 83       	std	Y+1, r19	; 0x01
 a70:	28 83       	st	Y, r18
 a72:	3a c0       	rjmp	.+116    	; 0xae8 <malloc+0x124>
 a74:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <__brkval>
 a78:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <__brkval+0x1>
 a7c:	23 2b       	or	r18, r19
 a7e:	41 f4       	brne	.+16     	; 0xa90 <malloc+0xcc>
 a80:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 a84:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 a88:	30 93 53 02 	sts	0x0253, r19	; 0x800253 <__brkval+0x1>
 a8c:	20 93 52 02 	sts	0x0252, r18	; 0x800252 <__brkval>
 a90:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 a94:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 a98:	21 15       	cp	r18, r1
 a9a:	31 05       	cpc	r19, r1
 a9c:	41 f4       	brne	.+16     	; 0xaae <malloc+0xea>
 a9e:	2d b7       	in	r18, 0x3d	; 61
 aa0:	3e b7       	in	r19, 0x3e	; 62
 aa2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 aa6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 aaa:	24 1b       	sub	r18, r20
 aac:	35 0b       	sbc	r19, r21
 aae:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <__brkval>
 ab2:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <__brkval+0x1>
 ab6:	e2 17       	cp	r30, r18
 ab8:	f3 07       	cpc	r31, r19
 aba:	a0 f4       	brcc	.+40     	; 0xae4 <malloc+0x120>
 abc:	2e 1b       	sub	r18, r30
 abe:	3f 0b       	sbc	r19, r31
 ac0:	28 17       	cp	r18, r24
 ac2:	39 07       	cpc	r19, r25
 ac4:	78 f0       	brcs	.+30     	; 0xae4 <malloc+0x120>
 ac6:	ac 01       	movw	r20, r24
 ac8:	4e 5f       	subi	r20, 0xFE	; 254
 aca:	5f 4f       	sbci	r21, 0xFF	; 255
 acc:	24 17       	cp	r18, r20
 ace:	35 07       	cpc	r19, r21
 ad0:	48 f0       	brcs	.+18     	; 0xae4 <malloc+0x120>
 ad2:	4e 0f       	add	r20, r30
 ad4:	5f 1f       	adc	r21, r31
 ad6:	50 93 53 02 	sts	0x0253, r21	; 0x800253 <__brkval+0x1>
 ada:	40 93 52 02 	sts	0x0252, r20	; 0x800252 <__brkval>
 ade:	81 93       	st	Z+, r24
 ae0:	91 93       	st	Z+, r25
 ae2:	02 c0       	rjmp	.+4      	; 0xae8 <malloc+0x124>
 ae4:	e0 e0       	ldi	r30, 0x00	; 0
 ae6:	f0 e0       	ldi	r31, 0x00	; 0
 ae8:	cf 01       	movw	r24, r30
 aea:	df 91       	pop	r29
 aec:	cf 91       	pop	r28
 aee:	1f 91       	pop	r17
 af0:	0f 91       	pop	r16
 af2:	08 95       	ret

00000af4 <free>:
 af4:	cf 93       	push	r28
 af6:	df 93       	push	r29
 af8:	00 97       	sbiw	r24, 0x00	; 0
 afa:	09 f4       	brne	.+2      	; 0xafe <free+0xa>
 afc:	81 c0       	rjmp	.+258    	; 0xc00 <free+0x10c>
 afe:	fc 01       	movw	r30, r24
 b00:	32 97       	sbiw	r30, 0x02	; 2
 b02:	13 82       	std	Z+3, r1	; 0x03
 b04:	12 82       	std	Z+2, r1	; 0x02
 b06:	a0 91 54 02 	lds	r26, 0x0254	; 0x800254 <__flp>
 b0a:	b0 91 55 02 	lds	r27, 0x0255	; 0x800255 <__flp+0x1>
 b0e:	10 97       	sbiw	r26, 0x00	; 0
 b10:	81 f4       	brne	.+32     	; 0xb32 <free+0x3e>
 b12:	20 81       	ld	r18, Z
 b14:	31 81       	ldd	r19, Z+1	; 0x01
 b16:	82 0f       	add	r24, r18
 b18:	93 1f       	adc	r25, r19
 b1a:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <__brkval>
 b1e:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <__brkval+0x1>
 b22:	28 17       	cp	r18, r24
 b24:	39 07       	cpc	r19, r25
 b26:	51 f5       	brne	.+84     	; 0xb7c <free+0x88>
 b28:	f0 93 53 02 	sts	0x0253, r31	; 0x800253 <__brkval+0x1>
 b2c:	e0 93 52 02 	sts	0x0252, r30	; 0x800252 <__brkval>
 b30:	67 c0       	rjmp	.+206    	; 0xc00 <free+0x10c>
 b32:	ed 01       	movw	r28, r26
 b34:	20 e0       	ldi	r18, 0x00	; 0
 b36:	30 e0       	ldi	r19, 0x00	; 0
 b38:	ce 17       	cp	r28, r30
 b3a:	df 07       	cpc	r29, r31
 b3c:	40 f4       	brcc	.+16     	; 0xb4e <free+0x5a>
 b3e:	4a 81       	ldd	r20, Y+2	; 0x02
 b40:	5b 81       	ldd	r21, Y+3	; 0x03
 b42:	9e 01       	movw	r18, r28
 b44:	41 15       	cp	r20, r1
 b46:	51 05       	cpc	r21, r1
 b48:	f1 f0       	breq	.+60     	; 0xb86 <free+0x92>
 b4a:	ea 01       	movw	r28, r20
 b4c:	f5 cf       	rjmp	.-22     	; 0xb38 <free+0x44>
 b4e:	d3 83       	std	Z+3, r29	; 0x03
 b50:	c2 83       	std	Z+2, r28	; 0x02
 b52:	40 81       	ld	r20, Z
 b54:	51 81       	ldd	r21, Z+1	; 0x01
 b56:	84 0f       	add	r24, r20
 b58:	95 1f       	adc	r25, r21
 b5a:	c8 17       	cp	r28, r24
 b5c:	d9 07       	cpc	r29, r25
 b5e:	59 f4       	brne	.+22     	; 0xb76 <free+0x82>
 b60:	88 81       	ld	r24, Y
 b62:	99 81       	ldd	r25, Y+1	; 0x01
 b64:	84 0f       	add	r24, r20
 b66:	95 1f       	adc	r25, r21
 b68:	02 96       	adiw	r24, 0x02	; 2
 b6a:	91 83       	std	Z+1, r25	; 0x01
 b6c:	80 83       	st	Z, r24
 b6e:	8a 81       	ldd	r24, Y+2	; 0x02
 b70:	9b 81       	ldd	r25, Y+3	; 0x03
 b72:	93 83       	std	Z+3, r25	; 0x03
 b74:	82 83       	std	Z+2, r24	; 0x02
 b76:	21 15       	cp	r18, r1
 b78:	31 05       	cpc	r19, r1
 b7a:	29 f4       	brne	.+10     	; 0xb86 <free+0x92>
 b7c:	f0 93 55 02 	sts	0x0255, r31	; 0x800255 <__flp+0x1>
 b80:	e0 93 54 02 	sts	0x0254, r30	; 0x800254 <__flp>
 b84:	3d c0       	rjmp	.+122    	; 0xc00 <free+0x10c>
 b86:	e9 01       	movw	r28, r18
 b88:	fb 83       	std	Y+3, r31	; 0x03
 b8a:	ea 83       	std	Y+2, r30	; 0x02
 b8c:	49 91       	ld	r20, Y+
 b8e:	59 91       	ld	r21, Y+
 b90:	c4 0f       	add	r28, r20
 b92:	d5 1f       	adc	r29, r21
 b94:	ec 17       	cp	r30, r28
 b96:	fd 07       	cpc	r31, r29
 b98:	61 f4       	brne	.+24     	; 0xbb2 <free+0xbe>
 b9a:	80 81       	ld	r24, Z
 b9c:	91 81       	ldd	r25, Z+1	; 0x01
 b9e:	84 0f       	add	r24, r20
 ba0:	95 1f       	adc	r25, r21
 ba2:	02 96       	adiw	r24, 0x02	; 2
 ba4:	e9 01       	movw	r28, r18
 ba6:	99 83       	std	Y+1, r25	; 0x01
 ba8:	88 83       	st	Y, r24
 baa:	82 81       	ldd	r24, Z+2	; 0x02
 bac:	93 81       	ldd	r25, Z+3	; 0x03
 bae:	9b 83       	std	Y+3, r25	; 0x03
 bb0:	8a 83       	std	Y+2, r24	; 0x02
 bb2:	e0 e0       	ldi	r30, 0x00	; 0
 bb4:	f0 e0       	ldi	r31, 0x00	; 0
 bb6:	12 96       	adiw	r26, 0x02	; 2
 bb8:	8d 91       	ld	r24, X+
 bba:	9c 91       	ld	r25, X
 bbc:	13 97       	sbiw	r26, 0x03	; 3
 bbe:	00 97       	sbiw	r24, 0x00	; 0
 bc0:	19 f0       	breq	.+6      	; 0xbc8 <free+0xd4>
 bc2:	fd 01       	movw	r30, r26
 bc4:	dc 01       	movw	r26, r24
 bc6:	f7 cf       	rjmp	.-18     	; 0xbb6 <free+0xc2>
 bc8:	8d 91       	ld	r24, X+
 bca:	9c 91       	ld	r25, X
 bcc:	11 97       	sbiw	r26, 0x01	; 1
 bce:	9d 01       	movw	r18, r26
 bd0:	2e 5f       	subi	r18, 0xFE	; 254
 bd2:	3f 4f       	sbci	r19, 0xFF	; 255
 bd4:	82 0f       	add	r24, r18
 bd6:	93 1f       	adc	r25, r19
 bd8:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <__brkval>
 bdc:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <__brkval+0x1>
 be0:	28 17       	cp	r18, r24
 be2:	39 07       	cpc	r19, r25
 be4:	69 f4       	brne	.+26     	; 0xc00 <free+0x10c>
 be6:	30 97       	sbiw	r30, 0x00	; 0
 be8:	29 f4       	brne	.+10     	; 0xbf4 <free+0x100>
 bea:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <__flp+0x1>
 bee:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <__flp>
 bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <free+0x104>
 bf4:	13 82       	std	Z+3, r1	; 0x03
 bf6:	12 82       	std	Z+2, r1	; 0x02
 bf8:	b0 93 53 02 	sts	0x0253, r27	; 0x800253 <__brkval+0x1>
 bfc:	a0 93 52 02 	sts	0x0252, r26	; 0x800252 <__brkval>
 c00:	df 91       	pop	r29
 c02:	cf 91       	pop	r28
 c04:	08 95       	ret

00000c06 <memset>:
 c06:	dc 01       	movw	r26, r24
 c08:	01 c0       	rjmp	.+2      	; 0xc0c <memset+0x6>
 c0a:	6d 93       	st	X+, r22
 c0c:	41 50       	subi	r20, 0x01	; 1
 c0e:	50 40       	sbci	r21, 0x00	; 0
 c10:	e0 f7       	brcc	.-8      	; 0xc0a <memset+0x4>
 c12:	08 95       	ret

00000c14 <_exit>:
 c14:	f8 94       	cli

00000c16 <__stop_program>:
 c16:	ff cf       	rjmp	.-2      	; 0xc16 <__stop_program>
