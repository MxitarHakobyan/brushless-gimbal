
drv_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f8  00800200  00002588  0000261c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002588  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000053  008003f8  008003f8  00002814  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002814  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002870  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  000028b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002da7  00000000  00000000  00002ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000168e  00000000  00000000  00005887  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001569  00000000  00000000  00006f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000684  00000000  00000000  00008480  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000be1  00000000  00000000  00008b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d10  00000000  00000000  000096e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  0000b3f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b5 c0       	rjmp	.+362    	; 0x16c <__ctors_end>
       2:	00 00       	nop
       4:	d3 c0       	rjmp	.+422    	; 0x1ac <__bad_interrupt>
       6:	00 00       	nop
       8:	d1 c0       	rjmp	.+418    	; 0x1ac <__bad_interrupt>
       a:	00 00       	nop
       c:	cf c0       	rjmp	.+414    	; 0x1ac <__bad_interrupt>
       e:	00 00       	nop
      10:	cd c0       	rjmp	.+410    	; 0x1ac <__bad_interrupt>
      12:	00 00       	nop
      14:	cb c0       	rjmp	.+406    	; 0x1ac <__bad_interrupt>
      16:	00 00       	nop
      18:	c9 c0       	rjmp	.+402    	; 0x1ac <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c7 c0       	rjmp	.+398    	; 0x1ac <__bad_interrupt>
      1e:	00 00       	nop
      20:	c5 c0       	rjmp	.+394    	; 0x1ac <__bad_interrupt>
      22:	00 00       	nop
      24:	c3 c0       	rjmp	.+390    	; 0x1ac <__bad_interrupt>
      26:	00 00       	nop
      28:	c1 c0       	rjmp	.+386    	; 0x1ac <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bf c0       	rjmp	.+382    	; 0x1ac <__bad_interrupt>
      2e:	00 00       	nop
      30:	bd c0       	rjmp	.+378    	; 0x1ac <__bad_interrupt>
      32:	00 00       	nop
      34:	bb c0       	rjmp	.+374    	; 0x1ac <__bad_interrupt>
      36:	00 00       	nop
      38:	b9 c0       	rjmp	.+370    	; 0x1ac <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b7 c0       	rjmp	.+366    	; 0x1ac <__bad_interrupt>
      3e:	00 00       	nop
      40:	b5 c0       	rjmp	.+362    	; 0x1ac <__bad_interrupt>
      42:	00 00       	nop
      44:	b3 c0       	rjmp	.+358    	; 0x1ac <__bad_interrupt>
      46:	00 00       	nop
      48:	b1 c0       	rjmp	.+354    	; 0x1ac <__bad_interrupt>
      4a:	00 00       	nop
      4c:	af c0       	rjmp	.+350    	; 0x1ac <__bad_interrupt>
      4e:	00 00       	nop
      50:	ad c0       	rjmp	.+346    	; 0x1ac <__bad_interrupt>
      52:	00 00       	nop
      54:	ab c0       	rjmp	.+342    	; 0x1ac <__bad_interrupt>
      56:	00 00       	nop
      58:	a9 c0       	rjmp	.+338    	; 0x1ac <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 90 08 	jmp	0x1120	; 0x1120 <__vector_23>
      60:	a5 c0       	rjmp	.+330    	; 0x1ac <__bad_interrupt>
      62:	00 00       	nop
      64:	a3 c0       	rjmp	.+326    	; 0x1ac <__bad_interrupt>
      66:	00 00       	nop
      68:	a1 c0       	rjmp	.+322    	; 0x1ac <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9f c0       	rjmp	.+318    	; 0x1ac <__bad_interrupt>
      6e:	00 00       	nop
      70:	9d c0       	rjmp	.+314    	; 0x1ac <__bad_interrupt>
      72:	00 00       	nop
      74:	9b c0       	rjmp	.+310    	; 0x1ac <__bad_interrupt>
      76:	00 00       	nop
      78:	99 c0       	rjmp	.+306    	; 0x1ac <__bad_interrupt>
      7a:	00 00       	nop
      7c:	97 c0       	rjmp	.+302    	; 0x1ac <__bad_interrupt>
      7e:	00 00       	nop
      80:	95 c0       	rjmp	.+298    	; 0x1ac <__bad_interrupt>
      82:	00 00       	nop
      84:	93 c0       	rjmp	.+294    	; 0x1ac <__bad_interrupt>
      86:	00 00       	nop
      88:	91 c0       	rjmp	.+290    	; 0x1ac <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8f c0       	rjmp	.+286    	; 0x1ac <__bad_interrupt>
      8e:	00 00       	nop
      90:	8d c0       	rjmp	.+282    	; 0x1ac <__bad_interrupt>
      92:	00 00       	nop
      94:	8b c0       	rjmp	.+278    	; 0x1ac <__bad_interrupt>
      96:	00 00       	nop
      98:	89 c0       	rjmp	.+274    	; 0x1ac <__bad_interrupt>
      9a:	00 00       	nop
      9c:	87 c0       	rjmp	.+270    	; 0x1ac <__bad_interrupt>
      9e:	00 00       	nop
      a0:	85 c0       	rjmp	.+266    	; 0x1ac <__bad_interrupt>
      a2:	00 00       	nop
      a4:	83 c0       	rjmp	.+262    	; 0x1ac <__bad_interrupt>
      a6:	00 00       	nop
      a8:	81 c0       	rjmp	.+258    	; 0x1ac <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7f c0       	rjmp	.+254    	; 0x1ac <__bad_interrupt>
      ae:	00 00       	nop
      b0:	7d c0       	rjmp	.+250    	; 0x1ac <__bad_interrupt>
      b2:	00 00       	nop
      b4:	7b c0       	rjmp	.+246    	; 0x1ac <__bad_interrupt>
      b6:	00 00       	nop
      b8:	79 c0       	rjmp	.+242    	; 0x1ac <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__vector_47>
      c0:	75 c0       	rjmp	.+234    	; 0x1ac <__bad_interrupt>
      c2:	00 00       	nop
      c4:	73 c0       	rjmp	.+230    	; 0x1ac <__bad_interrupt>
      c6:	00 00       	nop
      c8:	71 c0       	rjmp	.+226    	; 0x1ac <__bad_interrupt>
      ca:	00 00       	nop
      cc:	6f c0       	rjmp	.+222    	; 0x1ac <__bad_interrupt>
      ce:	00 00       	nop
      d0:	6d c0       	rjmp	.+218    	; 0x1ac <__bad_interrupt>
      d2:	00 00       	nop
      d4:	6b c0       	rjmp	.+214    	; 0x1ac <__bad_interrupt>
      d6:	00 00       	nop
      d8:	69 c0       	rjmp	.+210    	; 0x1ac <__bad_interrupt>
      da:	00 00       	nop
      dc:	67 c0       	rjmp	.+206    	; 0x1ac <__bad_interrupt>
      de:	00 00       	nop
      e0:	65 c0       	rjmp	.+202    	; 0x1ac <__bad_interrupt>
      e2:	00 00       	nop
      e4:	03 6e       	ori	r16, 0xE3	; 227
      e6:	db 36       	cpi	r29, 0x6B	; 107
      e8:	3d 9a       	sbi	0x07, 5	; 7
      ea:	99 99       	sbic	0x13, 1	; 19
      ec:	99 3d       	cpi	r25, 0xD9	; 217
      ee:	ab aa       	std	Y+51, r10	; 0x33
      f0:	aa 2a       	or	r10, r26
      f2:	3e 00       	.word	0x003e	; ????
      f4:	00 00       	nop
      f6:	80 3f       	cpi	r24, 0xF0	; 240
      f8:	08 4a       	sbci	r16, 0xA8	; 168
      fa:	d7 3b       	cpi	r29, 0xB7	; 183
      fc:	3b ce       	rjmp	.-906    	; 0xfffffd74 <__eeprom_end+0xff7efd74>
      fe:	01 6e       	ori	r16, 0xE1	; 225
     100:	84 bc       	out	0x24, r8	; 36
     102:	bf fd       	.word	0xfdbf	; ????
     104:	c1 2f       	mov	r28, r17
     106:	3d 6c       	ori	r19, 0xCD	; 205
     108:	74 31       	cpi	r23, 0x14	; 20
     10a:	9a bd       	out	0x2a, r25	; 42
     10c:	56 83       	std	Z+6, r21	; 0x06
     10e:	3d da       	rcall	.-2950   	; 0xfffff58a <__eeprom_end+0xff7ef58a>
     110:	3d 00       	.word	0x003d	; ????
     112:	c7 7f       	andi	r28, 0xF7	; 247
     114:	11 be       	out	0x31, r1	; 49
     116:	d9 e4       	ldi	r29, 0x49	; 73
     118:	bb 4c       	sbci	r27, 0xCB	; 203
     11a:	3e 91       	ld	r19, -X
     11c:	6b aa       	std	Y+51, r6	; 0x33
     11e:	aa be       	out	0x3a, r10	; 58
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	3f 07       	cpc	r19, r31
     126:	2c 7a       	andi	r18, 0xAC	; 172
     128:	a5 ba       	out	0x15, r10	; 21
     12a:	6c c5       	rjmp	.+2776   	; 0xc04 <main+0x570>
     12c:	90 da       	rcall	.-2784   	; 0xfffff64e <__eeprom_end+0xff7ef64e>
     12e:	3b 93       	.word	0x933b	; ????
     130:	65 fc       	sbrc	r6, 5
     132:	8b bc       	out	0x2b, r8	; 43
     134:	53 f8       	bld	r5, 3
     136:	10 fd       	sbrc	r17, 0
     138:	3c 56       	subi	r19, 0x6C	; 108
     13a:	92 83       	std	Z+2, r25	; 0x02
     13c:	4d bd       	out	0x2d, r20	; 45
     13e:	87 9d       	mul	r24, r7
     140:	3a b6       	in	r3, 0x3a	; 58
     142:	3d cb       	rjmp	.-2438   	; 0xfffff7be <__eeprom_end+0xff7ef7be>
     144:	c9 bf       	out	0x39, r28	; 57
     146:	5b be       	out	0x3b, r5	; 59
     148:	73 da       	rcall	.-2842   	; 0xfffff630 <__eeprom_end+0xff7ef630>
     14a:	0f c9       	rjmp	.-3554   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
     14c:	3f 05       	cpc	r19, r15
     14e:	a8 4c       	sbci	r26, 0xC8	; 200
     150:	cd b2       	in	r12, 0x1d	; 29
     152:	d4 4e       	sbci	r29, 0xE4	; 228
     154:	b9 38       	cpi	r27, 0x89	; 137
     156:	36 a9       	ldd	r19, Z+54	; 0x36
     158:	02 0c       	add	r0, r2
     15a:	50 b9       	out	0x00, r21	; 0
     15c:	91 86       	std	Z+9, r9	; 0x09
     15e:	88 08       	sbc	r8, r8
     160:	3c a6       	std	Y+44, r3	; 0x2c
     162:	aa aa       	std	Y+50, r10	; 0x32
     164:	2a be       	out	0x3a, r2	; 58
     166:	00 00       	nop
     168:	00 80       	ld	r0, Z
     16a:	3f 00       	.word	0x003f	; ????

0000016c <__ctors_end>:
     16c:	11 24       	eor	r1, r1
     16e:	1f be       	out	0x3f, r1	; 63
     170:	cf ef       	ldi	r28, 0xFF	; 255
     172:	d1 e2       	ldi	r29, 0x21	; 33
     174:	de bf       	out	0x3e, r29	; 62
     176:	cd bf       	out	0x3d, r28	; 61
     178:	00 e0       	ldi	r16, 0x00	; 0
     17a:	0c bf       	out	0x3c, r16	; 60

0000017c <__do_copy_data>:
     17c:	13 e0       	ldi	r17, 0x03	; 3
     17e:	a0 e0       	ldi	r26, 0x00	; 0
     180:	b2 e0       	ldi	r27, 0x02	; 2
     182:	e8 e8       	ldi	r30, 0x88	; 136
     184:	f5 e2       	ldi	r31, 0x25	; 37
     186:	00 e0       	ldi	r16, 0x00	; 0
     188:	0b bf       	out	0x3b, r16	; 59
     18a:	02 c0       	rjmp	.+4      	; 0x190 <__do_copy_data+0x14>
     18c:	07 90       	elpm	r0, Z+
     18e:	0d 92       	st	X+, r0
     190:	a8 3f       	cpi	r26, 0xF8	; 248
     192:	b1 07       	cpc	r27, r17
     194:	d9 f7       	brne	.-10     	; 0x18c <__do_copy_data+0x10>

00000196 <__do_clear_bss>:
     196:	24 e0       	ldi	r18, 0x04	; 4
     198:	a8 ef       	ldi	r26, 0xF8	; 248
     19a:	b3 e0       	ldi	r27, 0x03	; 3
     19c:	01 c0       	rjmp	.+2      	; 0x1a0 <.do_clear_bss_start>

0000019e <.do_clear_bss_loop>:
     19e:	1d 92       	st	X+, r1

000001a0 <.do_clear_bss_start>:
     1a0:	ab 34       	cpi	r26, 0x4B	; 75
     1a2:	b2 07       	cpc	r27, r18
     1a4:	e1 f7       	brne	.-8      	; 0x19e <.do_clear_bss_loop>
     1a6:	76 d2       	rcall	.+1260   	; 0x694 <main>
     1a8:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <_exit>

000001ac <__bad_interrupt>:
     1ac:	29 cf       	rjmp	.-430    	; 0x0 <__vectors>

000001ae <init_gpio>:
{
	if (a>b && a>c) return a;
	if (b>a && b>c) return b;
	if (c>a && c>b) return c;
	return a;
}
     1ae:	e1 e0       	ldi	r30, 0x01	; 1
     1b0:	f1 e0       	ldi	r31, 0x01	; 1
     1b2:	80 81       	ld	r24, Z
     1b4:	88 60       	ori	r24, 0x08	; 8
     1b6:	80 83       	st	Z, r24
     1b8:	80 81       	ld	r24, Z
     1ba:	80 61       	ori	r24, 0x10	; 16
     1bc:	80 83       	st	Z, r24
     1be:	80 81       	ld	r24, Z
     1c0:	80 62       	ori	r24, 0x20	; 32
     1c2:	80 83       	st	Z, r24
     1c4:	08 95       	ret

000001c6 <PWM_update>:
void PWM_update()//motor pwm update
{
	U_PWM=pwmSin[U_step];
     1c6:	e0 91 f8 03 	lds	r30, 0x03F8	; 0x8003f8 <__data_end>
     1ca:	f0 91 f9 03 	lds	r31, 0x03F9	; 0x8003f9 <__data_end+0x1>
     1ce:	ea 5f       	subi	r30, 0xFA	; 250
     1d0:	fd 4f       	sbci	r31, 0xFD	; 253
     1d2:	80 81       	ld	r24, Z
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     1da:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
	V_PWM=pwmSin[V_step];
     1de:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <V_step>
     1e2:	f0 91 72 03 	lds	r31, 0x0372	; 0x800372 <V_step+0x1>
     1e6:	ea 5f       	subi	r30, 0xFA	; 250
     1e8:	fd 4f       	sbci	r31, 0xFD	; 253
     1ea:	80 81       	ld	r24, Z
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     1f2:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
	W_PWM=pwmSin[W_step];
     1f6:	e0 91 6f 03 	lds	r30, 0x036F	; 0x80036f <W_step>
     1fa:	f0 91 70 03 	lds	r31, 0x0370	; 0x800370 <W_step+0x1>
     1fe:	ea 5f       	subi	r30, 0xFA	; 250
     200:	fd 4f       	sbci	r31, 0xFD	; 253
     202:	80 81       	ld	r24, Z
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
     20a:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
	U_step=U_step+incr;
     20e:	60 91 07 04 	lds	r22, 0x0407	; 0x800407 <incr>
     212:	70 91 08 04 	lds	r23, 0x0408	; 0x800408 <incr+0x1>
     216:	40 91 f8 03 	lds	r20, 0x03F8	; 0x8003f8 <__data_end>
     21a:	50 91 f9 03 	lds	r21, 0x03F9	; 0x8003f9 <__data_end+0x1>
     21e:	46 0f       	add	r20, r22
     220:	57 1f       	adc	r21, r23
     222:	50 93 f9 03 	sts	0x03F9, r21	; 0x8003f9 <__data_end+0x1>
     226:	40 93 f8 03 	sts	0x03F8, r20	; 0x8003f8 <__data_end>
	V_step=V_step+incr;
     22a:	20 91 71 03 	lds	r18, 0x0371	; 0x800371 <V_step>
     22e:	30 91 72 03 	lds	r19, 0x0372	; 0x800372 <V_step+0x1>
     232:	26 0f       	add	r18, r22
     234:	37 1f       	adc	r19, r23
     236:	30 93 72 03 	sts	0x0372, r19	; 0x800372 <V_step+0x1>
     23a:	20 93 71 03 	sts	0x0371, r18	; 0x800371 <V_step>
	W_step=W_step+incr;
     23e:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <W_step>
     242:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <W_step+0x1>
     246:	86 0f       	add	r24, r22
     248:	97 1f       	adc	r25, r23
     24a:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <W_step+0x1>
     24e:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <W_step>
	if(U_step > SINE_TABLE_SZ)
     252:	49 36       	cpi	r20, 0x69	; 105
     254:	61 e0       	ldi	r22, 0x01	; 1
     256:	56 07       	cpc	r21, r22
     258:	2c f0       	brlt	.+10     	; 0x264 <PWM_update+0x9e>
	U_step = 0;
     25a:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <__data_end+0x1>
     25e:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <__data_end>
     262:	08 c0       	rjmp	.+16     	; 0x274 <PWM_update+0xae>
	if(U_step < 0)
     264:	55 23       	and	r21, r21
     266:	34 f4       	brge	.+12     	; 0x274 <PWM_update+0xae>
	U_step = SINE_TABLE_SZ;
     268:	48 e6       	ldi	r20, 0x68	; 104
     26a:	51 e0       	ldi	r21, 0x01	; 1
     26c:	50 93 f9 03 	sts	0x03F9, r21	; 0x8003f9 <__data_end+0x1>
     270:	40 93 f8 03 	sts	0x03F8, r20	; 0x8003f8 <__data_end>
	
	if(V_step > SINE_TABLE_SZ)
     274:	29 36       	cpi	r18, 0x69	; 105
     276:	41 e0       	ldi	r20, 0x01	; 1
     278:	34 07       	cpc	r19, r20
     27a:	2c f0       	brlt	.+10     	; 0x286 <PWM_update+0xc0>
	V_step = 0;
     27c:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <V_step+0x1>
     280:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <V_step>
     284:	08 c0       	rjmp	.+16     	; 0x296 <PWM_update+0xd0>
	if(V_step < 0)
     286:	33 23       	and	r19, r19
     288:	34 f4       	brge	.+12     	; 0x296 <PWM_update+0xd0>
	V_step = SINE_TABLE_SZ;
     28a:	28 e6       	ldi	r18, 0x68	; 104
     28c:	31 e0       	ldi	r19, 0x01	; 1
     28e:	30 93 72 03 	sts	0x0372, r19	; 0x800372 <V_step+0x1>
     292:	20 93 71 03 	sts	0x0371, r18	; 0x800371 <V_step>
	
	if(W_step > SINE_TABLE_SZ)
     296:	89 36       	cpi	r24, 0x69	; 105
     298:	61 e0       	ldi	r22, 0x01	; 1
     29a:	96 07       	cpc	r25, r22
     29c:	2c f0       	brlt	.+10     	; 0x2a8 <PWM_update+0xe2>
	W_step = 0;
     29e:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <W_step+0x1>
     2a2:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <W_step>
     2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <PWM_update+0xf2>
	if(W_step < 0)
     2a8:	99 23       	and	r25, r25
     2aa:	34 f4       	brge	.+12     	; 0x2b8 <PWM_update+0xf2>
	W_step = SINE_TABLE_SZ;
     2ac:	88 e6       	ldi	r24, 0x68	; 104
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <W_step+0x1>
     2b4:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <W_step>
	//_delay_us(100);
	OCR5A=pwm_delay;
     2b8:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <pwm_delay>
     2bc:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <pwm_delay+0x1>
     2c0:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     2c4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     2c8:	08 95       	ret

000002ca <getAngle>:
#include "KALMAN.h"

float getAngle(float newAngle, float newRate, float dt) {
     2ca:	4f 92       	push	r4
     2cc:	5f 92       	push	r5
     2ce:	6f 92       	push	r6
     2d0:	7f 92       	push	r7
     2d2:	8f 92       	push	r8
     2d4:	9f 92       	push	r9
     2d6:	af 92       	push	r10
     2d8:	bf 92       	push	r11
     2da:	cf 92       	push	r12
     2dc:	df 92       	push	r13
     2de:	ef 92       	push	r14
     2e0:	ff 92       	push	r15
     2e2:	0f 93       	push	r16
     2e4:	1f 93       	push	r17
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
     2ee:	6c 97       	sbiw	r28, 0x1c	; 28
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	69 8b       	std	Y+17, r22	; 0x11
     2fc:	7a 8b       	std	Y+18, r23	; 0x12
     2fe:	8b 8b       	std	Y+19, r24	; 0x13
     300:	9c 8b       	std	Y+20, r25	; 0x14
     302:	ca 01       	movw	r24, r20
     304:	b9 01       	movw	r22, r18
     306:	e9 82       	std	Y+1, r14	; 0x01
     308:	fa 82       	std	Y+2, r15	; 0x02
     30a:	0b 83       	std	Y+3, r16	; 0x03
     30c:	1c 83       	std	Y+4, r17	; 0x04
	// See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

	// Discrete Kalman filter time update equations - Time Update ("Predict")
	// Update xhat - Project the state ahead
	/* Step 1 */
	rate = newRate - bias;
     30e:	c0 90 15 04 	lds	r12, 0x0415	; 0x800415 <bias>
     312:	d0 90 16 04 	lds	r13, 0x0416	; 0x800416 <bias+0x1>
     316:	e0 90 17 04 	lds	r14, 0x0417	; 0x800417 <bias+0x2>
     31a:	f0 90 18 04 	lds	r15, 0x0418	; 0x800418 <bias+0x3>
     31e:	a7 01       	movw	r20, r14
     320:	96 01       	movw	r18, r12
     322:	0e 94 1e 0a 	call	0x143c	; 0x143c <__subsf3>
     326:	60 93 0d 04 	sts	0x040D, r22	; 0x80040d <rate>
     32a:	70 93 0e 04 	sts	0x040E, r23	; 0x80040e <rate+0x1>
     32e:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <rate+0x2>
     332:	90 93 10 04 	sts	0x0410, r25	; 0x800410 <rate+0x3>
	angle += dt * rate;
     336:	29 81       	ldd	r18, Y+1	; 0x01
     338:	3a 81       	ldd	r19, Y+2	; 0x02
     33a:	4b 81       	ldd	r20, Y+3	; 0x03
     33c:	5c 81       	ldd	r21, Y+4	; 0x04
     33e:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     342:	20 91 1d 04 	lds	r18, 0x041D	; 0x80041d <angle>
     346:	30 91 1e 04 	lds	r19, 0x041E	; 0x80041e <angle+0x1>
     34a:	40 91 1f 04 	lds	r20, 0x041F	; 0x80041f <angle+0x2>
     34e:	50 91 20 04 	lds	r21, 0x0420	; 0x800420 <angle+0x3>
     352:	0e 94 1f 0a 	call	0x143e	; 0x143e <__addsf3>
     356:	6d 8b       	std	Y+21, r22	; 0x15
     358:	7e 8b       	std	Y+22, r23	; 0x16
     35a:	8f 8b       	std	Y+23, r24	; 0x17
     35c:	98 8f       	std	Y+24, r25	; 0x18

	// Update estimation error covariance - Project the error covariance ahead
	/* Step 2 */
	P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
     35e:	80 90 2d 04 	lds	r8, 0x042D	; 0x80042d <P+0xc>
     362:	90 90 2e 04 	lds	r9, 0x042E	; 0x80042e <P+0xd>
     366:	a0 90 2f 04 	lds	r10, 0x042F	; 0x80042f <P+0xe>
     36a:	b0 90 30 04 	lds	r11, 0x0430	; 0x800430 <P+0xf>
     36e:	a5 01       	movw	r20, r10
     370:	94 01       	movw	r18, r8
     372:	69 81       	ldd	r22, Y+1	; 0x01
     374:	7a 81       	ldd	r23, Y+2	; 0x02
     376:	8b 81       	ldd	r24, Y+3	; 0x03
     378:	9c 81       	ldd	r25, Y+4	; 0x04
     37a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     37e:	6d 83       	std	Y+5, r22	; 0x05
     380:	7e 83       	std	Y+6, r23	; 0x06
     382:	8f 83       	std	Y+7, r24	; 0x07
     384:	98 87       	std	Y+8, r25	; 0x08
     386:	40 90 25 04 	lds	r4, 0x0425	; 0x800425 <P+0x4>
     38a:	50 90 26 04 	lds	r5, 0x0426	; 0x800426 <P+0x5>
     38e:	60 90 27 04 	lds	r6, 0x0427	; 0x800427 <P+0x6>
     392:	70 90 28 04 	lds	r7, 0x0428	; 0x800428 <P+0x7>
     396:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <P+0x8>
     39a:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <P+0x9>
     39e:	a0 91 2b 04 	lds	r26, 0x042B	; 0x80042b <P+0xa>
     3a2:	b0 91 2c 04 	lds	r27, 0x042C	; 0x80042c <P+0xb>
     3a6:	8d 87       	std	Y+13, r24	; 0x0d
     3a8:	9e 87       	std	Y+14, r25	; 0x0e
     3aa:	af 87       	std	Y+15, r26	; 0x0f
     3ac:	b8 8b       	std	Y+16, r27	; 0x10
     3ae:	a3 01       	movw	r20, r6
     3b0:	92 01       	movw	r18, r4
     3b2:	6d 81       	ldd	r22, Y+5	; 0x05
     3b4:	7e 81       	ldd	r23, Y+6	; 0x06
     3b6:	8f 81       	ldd	r24, Y+7	; 0x07
     3b8:	98 85       	ldd	r25, Y+8	; 0x08
     3ba:	0e 94 1e 0a 	call	0x143c	; 0x143c <__subsf3>
     3be:	2d 85       	ldd	r18, Y+13	; 0x0d
     3c0:	3e 85       	ldd	r19, Y+14	; 0x0e
     3c2:	4f 85       	ldd	r20, Y+15	; 0x0f
     3c4:	58 89       	ldd	r21, Y+16	; 0x10
     3c6:	0e 94 1e 0a 	call	0x143c	; 0x143c <__subsf3>
     3ca:	20 91 11 04 	lds	r18, 0x0411	; 0x800411 <Q_angle>
     3ce:	30 91 12 04 	lds	r19, 0x0412	; 0x800412 <Q_angle+0x1>
     3d2:	40 91 13 04 	lds	r20, 0x0413	; 0x800413 <Q_angle+0x2>
     3d6:	50 91 14 04 	lds	r21, 0x0414	; 0x800414 <Q_angle+0x3>
     3da:	0e 94 1f 0a 	call	0x143e	; 0x143e <__addsf3>
     3de:	29 81       	ldd	r18, Y+1	; 0x01
     3e0:	3a 81       	ldd	r19, Y+2	; 0x02
     3e2:	4b 81       	ldd	r20, Y+3	; 0x03
     3e4:	5c 81       	ldd	r21, Y+4	; 0x04
     3e6:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     3ea:	a1 e2       	ldi	r26, 0x21	; 33
     3ec:	b4 e0       	ldi	r27, 0x04	; 4
     3ee:	2d 91       	ld	r18, X+
     3f0:	3d 91       	ld	r19, X+
     3f2:	4d 91       	ld	r20, X+
     3f4:	5c 91       	ld	r21, X
     3f6:	0e 94 1f 0a 	call	0x143e	; 0x143e <__addsf3>
     3fa:	69 87       	std	Y+9, r22	; 0x09
     3fc:	7a 87       	std	Y+10, r23	; 0x0a
     3fe:	8b 87       	std	Y+11, r24	; 0x0b
     400:	9c 87       	std	Y+12, r25	; 0x0c
	P[0][1] -= dt * P[1][1];
     402:	2d 81       	ldd	r18, Y+5	; 0x05
     404:	3e 81       	ldd	r19, Y+6	; 0x06
     406:	4f 81       	ldd	r20, Y+7	; 0x07
     408:	58 85       	ldd	r21, Y+8	; 0x08
     40a:	c3 01       	movw	r24, r6
     40c:	b2 01       	movw	r22, r4
     40e:	0e 94 1e 0a 	call	0x143c	; 0x143c <__subsf3>
     412:	2b 01       	movw	r4, r22
     414:	3c 01       	movw	r6, r24
	P[1][0] -= dt * P[1][1];
     416:	2d 81       	ldd	r18, Y+5	; 0x05
     418:	3e 81       	ldd	r19, Y+6	; 0x06
     41a:	4f 81       	ldd	r20, Y+7	; 0x07
     41c:	58 85       	ldd	r21, Y+8	; 0x08
     41e:	6d 85       	ldd	r22, Y+13	; 0x0d
     420:	7e 85       	ldd	r23, Y+14	; 0x0e
     422:	8f 85       	ldd	r24, Y+15	; 0x0f
     424:	98 89       	ldd	r25, Y+16	; 0x10
     426:	0e 94 1e 0a 	call	0x143c	; 0x143c <__subsf3>
     42a:	6d 87       	std	Y+13, r22	; 0x0d
     42c:	7e 87       	std	Y+14, r23	; 0x0e
     42e:	8f 87       	std	Y+15, r24	; 0x0f
     430:	98 8b       	std	Y+16, r25	; 0x10
	P[1][1] += Q_bias * dt;
     432:	20 91 09 04 	lds	r18, 0x0409	; 0x800409 <Q_bias>
     436:	30 91 0a 04 	lds	r19, 0x040A	; 0x80040a <Q_bias+0x1>
     43a:	40 91 0b 04 	lds	r20, 0x040B	; 0x80040b <Q_bias+0x2>
     43e:	50 91 0c 04 	lds	r21, 0x040C	; 0x80040c <Q_bias+0x3>
     442:	69 81       	ldd	r22, Y+1	; 0x01
     444:	7a 81       	ldd	r23, Y+2	; 0x02
     446:	8b 81       	ldd	r24, Y+3	; 0x03
     448:	9c 81       	ldd	r25, Y+4	; 0x04
     44a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     44e:	a5 01       	movw	r20, r10
     450:	94 01       	movw	r18, r8
     452:	f5 d7       	rcall	.+4074   	; 0x143e <__addsf3>
     454:	69 8f       	std	Y+25, r22	; 0x19
     456:	7a 8f       	std	Y+26, r23	; 0x1a
     458:	8b 8f       	std	Y+27, r24	; 0x1b
     45a:	9c 8f       	std	Y+28, r25	; 0x1c

	// Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
	// Calculate Kalman gain - Compute the Kalman gain
	/* Step 4 */
	float S = P[0][0] + R_measure; // Estimate error
     45c:	20 91 19 04 	lds	r18, 0x0419	; 0x800419 <R_measure>
     460:	30 91 1a 04 	lds	r19, 0x041A	; 0x80041a <R_measure+0x1>
     464:	40 91 1b 04 	lds	r20, 0x041B	; 0x80041b <R_measure+0x2>
     468:	50 91 1c 04 	lds	r21, 0x041C	; 0x80041c <R_measure+0x3>
     46c:	69 85       	ldd	r22, Y+9	; 0x09
     46e:	7a 85       	ldd	r23, Y+10	; 0x0a
     470:	8b 85       	ldd	r24, Y+11	; 0x0b
     472:	9c 85       	ldd	r25, Y+12	; 0x0c
     474:	e4 d7       	rcall	.+4040   	; 0x143e <__addsf3>
     476:	4b 01       	movw	r8, r22
     478:	5c 01       	movw	r10, r24
	/* Step 5 */
	float K[2]; // Kalman gain - This is a 2x1 vector
	K[0] = P[0][0] / S;
     47a:	9b 01       	movw	r18, r22
     47c:	ac 01       	movw	r20, r24
     47e:	69 85       	ldd	r22, Y+9	; 0x09
     480:	7a 85       	ldd	r23, Y+10	; 0x0a
     482:	8b 85       	ldd	r24, Y+11	; 0x0b
     484:	9c 85       	ldd	r25, Y+12	; 0x0c
     486:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__divsf3>
     48a:	69 83       	std	Y+1, r22	; 0x01
     48c:	7a 83       	std	Y+2, r23	; 0x02
     48e:	8b 83       	std	Y+3, r24	; 0x03
     490:	9c 83       	std	Y+4, r25	; 0x04
	K[1] = P[1][0] / S;
     492:	a5 01       	movw	r20, r10
     494:	94 01       	movw	r18, r8
     496:	6d 85       	ldd	r22, Y+13	; 0x0d
     498:	7e 85       	ldd	r23, Y+14	; 0x0e
     49a:	8f 85       	ldd	r24, Y+15	; 0x0f
     49c:	98 89       	ldd	r25, Y+16	; 0x10
     49e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__divsf3>
     4a2:	6d 83       	std	Y+5, r22	; 0x05
     4a4:	7e 83       	std	Y+6, r23	; 0x06
     4a6:	8f 83       	std	Y+7, r24	; 0x07
     4a8:	98 87       	std	Y+8, r25	; 0x08

	// Calculate angle and bias - Update estimate with measurement zk (newAngle)
	/* Step 3 */
	float y = newAngle - angle; // Angle difference
     4aa:	2d 89       	ldd	r18, Y+21	; 0x15
     4ac:	3e 89       	ldd	r19, Y+22	; 0x16
     4ae:	4f 89       	ldd	r20, Y+23	; 0x17
     4b0:	58 8d       	ldd	r21, Y+24	; 0x18
     4b2:	69 89       	ldd	r22, Y+17	; 0x11
     4b4:	7a 89       	ldd	r23, Y+18	; 0x12
     4b6:	8b 89       	ldd	r24, Y+19	; 0x13
     4b8:	9c 89       	ldd	r25, Y+20	; 0x14
     4ba:	c0 d7       	rcall	.+3968   	; 0x143c <__subsf3>
     4bc:	69 8b       	std	Y+17, r22	; 0x11
     4be:	7a 8b       	std	Y+18, r23	; 0x12
     4c0:	8b 8b       	std	Y+19, r24	; 0x13
     4c2:	9c 8b       	std	Y+20, r25	; 0x14
	/* Step 6 */
	angle += K[0] * y;
     4c4:	9b 01       	movw	r18, r22
     4c6:	ac 01       	movw	r20, r24
     4c8:	69 81       	ldd	r22, Y+1	; 0x01
     4ca:	7a 81       	ldd	r23, Y+2	; 0x02
     4cc:	8b 81       	ldd	r24, Y+3	; 0x03
     4ce:	9c 81       	ldd	r25, Y+4	; 0x04
     4d0:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     4d4:	2d 89       	ldd	r18, Y+21	; 0x15
     4d6:	3e 89       	ldd	r19, Y+22	; 0x16
     4d8:	4f 89       	ldd	r20, Y+23	; 0x17
     4da:	58 8d       	ldd	r21, Y+24	; 0x18
     4dc:	b0 d7       	rcall	.+3936   	; 0x143e <__addsf3>
     4de:	4b 01       	movw	r8, r22
     4e0:	5c 01       	movw	r10, r24
     4e2:	60 93 1d 04 	sts	0x041D, r22	; 0x80041d <angle>
     4e6:	70 93 1e 04 	sts	0x041E, r23	; 0x80041e <angle+0x1>
     4ea:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <angle+0x2>
     4ee:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <angle+0x3>
	bias += K[1] * y;
     4f2:	29 89       	ldd	r18, Y+17	; 0x11
     4f4:	3a 89       	ldd	r19, Y+18	; 0x12
     4f6:	4b 89       	ldd	r20, Y+19	; 0x13
     4f8:	5c 89       	ldd	r21, Y+20	; 0x14
     4fa:	6d 81       	ldd	r22, Y+5	; 0x05
     4fc:	7e 81       	ldd	r23, Y+6	; 0x06
     4fe:	8f 81       	ldd	r24, Y+7	; 0x07
     500:	98 85       	ldd	r25, Y+8	; 0x08
     502:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     506:	a7 01       	movw	r20, r14
     508:	96 01       	movw	r18, r12
     50a:	99 d7       	rcall	.+3890   	; 0x143e <__addsf3>
     50c:	60 93 15 04 	sts	0x0415, r22	; 0x800415 <bias>
     510:	70 93 16 04 	sts	0x0416, r23	; 0x800416 <bias+0x1>
     514:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <bias+0x2>
     518:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <bias+0x3>
	// Calculate estimation error covariance - Update the error covariance
	/* Step 7 */
	float P00_temp = P[0][0];
	float P01_temp = P[0][1];

	P[0][0] -= K[0] * P00_temp;
     51c:	29 81       	ldd	r18, Y+1	; 0x01
     51e:	3a 81       	ldd	r19, Y+2	; 0x02
     520:	4b 81       	ldd	r20, Y+3	; 0x03
     522:	5c 81       	ldd	r21, Y+4	; 0x04
     524:	69 85       	ldd	r22, Y+9	; 0x09
     526:	7a 85       	ldd	r23, Y+10	; 0x0a
     528:	8b 85       	ldd	r24, Y+11	; 0x0b
     52a:	9c 85       	ldd	r25, Y+12	; 0x0c
     52c:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     530:	9b 01       	movw	r18, r22
     532:	ac 01       	movw	r20, r24
     534:	69 85       	ldd	r22, Y+9	; 0x09
     536:	7a 85       	ldd	r23, Y+10	; 0x0a
     538:	8b 85       	ldd	r24, Y+11	; 0x0b
     53a:	9c 85       	ldd	r25, Y+12	; 0x0c
     53c:	7f d7       	rcall	.+3838   	; 0x143c <__subsf3>
     53e:	e1 e2       	ldi	r30, 0x21	; 33
     540:	f4 e0       	ldi	r31, 0x04	; 4
     542:	60 83       	st	Z, r22
     544:	71 83       	std	Z+1, r23	; 0x01
     546:	82 83       	std	Z+2, r24	; 0x02
     548:	93 83       	std	Z+3, r25	; 0x03
	P[0][1] -= K[0] * P01_temp;
     54a:	29 81       	ldd	r18, Y+1	; 0x01
     54c:	3a 81       	ldd	r19, Y+2	; 0x02
     54e:	4b 81       	ldd	r20, Y+3	; 0x03
     550:	5c 81       	ldd	r21, Y+4	; 0x04
     552:	c3 01       	movw	r24, r6
     554:	b2 01       	movw	r22, r4
     556:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     55a:	9b 01       	movw	r18, r22
     55c:	ac 01       	movw	r20, r24
     55e:	c3 01       	movw	r24, r6
     560:	b2 01       	movw	r22, r4
     562:	6c d7       	rcall	.+3800   	; 0x143c <__subsf3>
     564:	60 93 25 04 	sts	0x0425, r22	; 0x800425 <P+0x4>
     568:	70 93 26 04 	sts	0x0426, r23	; 0x800426 <P+0x5>
     56c:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <P+0x6>
     570:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <P+0x7>
	P[1][0] -= K[1] * P00_temp;
     574:	2d 81       	ldd	r18, Y+5	; 0x05
     576:	3e 81       	ldd	r19, Y+6	; 0x06
     578:	4f 81       	ldd	r20, Y+7	; 0x07
     57a:	58 85       	ldd	r21, Y+8	; 0x08
     57c:	69 85       	ldd	r22, Y+9	; 0x09
     57e:	7a 85       	ldd	r23, Y+10	; 0x0a
     580:	8b 85       	ldd	r24, Y+11	; 0x0b
     582:	9c 85       	ldd	r25, Y+12	; 0x0c
     584:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     588:	9b 01       	movw	r18, r22
     58a:	ac 01       	movw	r20, r24
     58c:	6d 85       	ldd	r22, Y+13	; 0x0d
     58e:	7e 85       	ldd	r23, Y+14	; 0x0e
     590:	8f 85       	ldd	r24, Y+15	; 0x0f
     592:	98 89       	ldd	r25, Y+16	; 0x10
     594:	53 d7       	rcall	.+3750   	; 0x143c <__subsf3>
     596:	60 93 29 04 	sts	0x0429, r22	; 0x800429 <P+0x8>
     59a:	70 93 2a 04 	sts	0x042A, r23	; 0x80042a <P+0x9>
     59e:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <P+0xa>
     5a2:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <P+0xb>
	P[1][1] -= K[1] * P01_temp;
     5a6:	2d 81       	ldd	r18, Y+5	; 0x05
     5a8:	3e 81       	ldd	r19, Y+6	; 0x06
     5aa:	4f 81       	ldd	r20, Y+7	; 0x07
     5ac:	58 85       	ldd	r21, Y+8	; 0x08
     5ae:	c3 01       	movw	r24, r6
     5b0:	b2 01       	movw	r22, r4
     5b2:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     5b6:	9b 01       	movw	r18, r22
     5b8:	ac 01       	movw	r20, r24
     5ba:	69 8d       	ldd	r22, Y+25	; 0x19
     5bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     5be:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5c2:	3c d7       	rcall	.+3704   	; 0x143c <__subsf3>
     5c4:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <P+0xc>
     5c8:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <P+0xd>
     5cc:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <P+0xe>
     5d0:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <P+0xf>

	return angle;
};
     5d4:	c5 01       	movw	r24, r10
     5d6:	b4 01       	movw	r22, r8
     5d8:	6c 96       	adiw	r28, 0x1c	; 28
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	df 90       	pop	r13
     5f2:	cf 90       	pop	r12
     5f4:	bf 90       	pop	r11
     5f6:	af 90       	pop	r10
     5f8:	9f 90       	pop	r9
     5fa:	8f 90       	pop	r8
     5fc:	7f 90       	pop	r7
     5fe:	6f 90       	pop	r6
     600:	5f 90       	pop	r5
     602:	4f 90       	pop	r4
     604:	08 95       	ret

00000606 <Kalman_init>:
void Kalman_init() {
	/* We will set the variables like so, these can also be tuned by the user */
	Q_angle = 0.001f;
     606:	8f e6       	ldi	r24, 0x6F	; 111
     608:	92 e1       	ldi	r25, 0x12	; 18
     60a:	a3 e8       	ldi	r26, 0x83	; 131
     60c:	ba e3       	ldi	r27, 0x3A	; 58
     60e:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <Q_angle>
     612:	90 93 12 04 	sts	0x0412, r25	; 0x800412 <Q_angle+0x1>
     616:	a0 93 13 04 	sts	0x0413, r26	; 0x800413 <Q_angle+0x2>
     61a:	b0 93 14 04 	sts	0x0414, r27	; 0x800414 <Q_angle+0x3>
	Q_bias = 0.003f;
     61e:	86 ea       	ldi	r24, 0xA6	; 166
     620:	9b e9       	ldi	r25, 0x9B	; 155
     622:	a4 e4       	ldi	r26, 0x44	; 68
     624:	bb e3       	ldi	r27, 0x3B	; 59
     626:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <Q_bias>
     62a:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <Q_bias+0x1>
     62e:	a0 93 0b 04 	sts	0x040B, r26	; 0x80040b <Q_bias+0x2>
     632:	b0 93 0c 04 	sts	0x040C, r27	; 0x80040c <Q_bias+0x3>
	R_measure = 0.03f;
     636:	8f e8       	ldi	r24, 0x8F	; 143
     638:	92 ec       	ldi	r25, 0xC2	; 194
     63a:	a5 ef       	ldi	r26, 0xF5	; 245
     63c:	bc e3       	ldi	r27, 0x3C	; 60
     63e:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <R_measure>
     642:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <R_measure+0x1>
     646:	a0 93 1b 04 	sts	0x041B, r26	; 0x80041b <R_measure+0x2>
     64a:	b0 93 1c 04 	sts	0x041C, r27	; 0x80041c <R_measure+0x3>

	angle = 0.0f; // Reset the angle
     64e:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <angle>
     652:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <angle+0x1>
     656:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <angle+0x2>
     65a:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <angle+0x3>
	bias = 0.0f; // Reset bias
     65e:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <bias>
     662:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <bias+0x1>
     666:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <bias+0x2>
     66a:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <bias+0x3>

	P[0][0] = 0.0f; // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so - see: http://en.wikipedia.org/wiki/Kalman_filter#Example_application.2C_technical
     66e:	e1 e2       	ldi	r30, 0x21	; 33
     670:	f4 e0       	ldi	r31, 0x04	; 4
     672:	10 82       	st	Z, r1
     674:	11 82       	std	Z+1, r1	; 0x01
     676:	12 82       	std	Z+2, r1	; 0x02
     678:	13 82       	std	Z+3, r1	; 0x03
	P[0][1] = 0.0f;
     67a:	14 82       	std	Z+4, r1	; 0x04
     67c:	15 82       	std	Z+5, r1	; 0x05
     67e:	16 82       	std	Z+6, r1	; 0x06
     680:	17 82       	std	Z+7, r1	; 0x07
	P[1][0] = 0.0f;
     682:	10 86       	std	Z+8, r1	; 0x08
     684:	11 86       	std	Z+9, r1	; 0x09
     686:	12 86       	std	Z+10, r1	; 0x0a
     688:	13 86       	std	Z+11, r1	; 0x0b
	P[1][1] = 0.0f;
     68a:	14 86       	std	Z+12, r1	; 0x0c
     68c:	15 86       	std	Z+13, r1	; 0x0d
     68e:	16 86       	std	Z+14, r1	; 0x0e
     690:	17 86       	std	Z+15, r1	; 0x0f
     692:	08 95       	ret

00000694 <main>:
#include <time.h>
uint8_t buffer[14];
bool loop_bool=true;
/*-----------------------------------start of main----------------------------------*/
int main(void)
{	
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	ee 97       	sbiw	r28, 0x3e	; 62
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
	U_step=U_step_predefine;
     6a8:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <__data_end+0x1>
     6ac:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <__data_end>
	V_step=V_step_predefine;
     6b0:	88 e7       	ldi	r24, 0x78	; 120
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <V_step+0x1>
     6b8:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <V_step>
	W_step=W_step_predefine;
     6bc:	80 ef       	ldi	r24, 0xF0	; 240
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <W_step+0x1>
     6c4:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <W_step>
	incr=-1;
     6c8:	8f ef       	ldi	r24, 0xFF	; 255
     6ca:	9f ef       	ldi	r25, 0xFF	; 255
     6cc:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <incr+0x1>
     6d0:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <incr>
	pwm_delay=2000;
     6d4:	80 ed       	ldi	r24, 0xD0	; 208
     6d6:	97 e0       	ldi	r25, 0x07	; 7
     6d8:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <pwm_delay+0x1>
     6dc:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <pwm_delay>
	cli();
	init_gpio();
		#ifdef GYRO
			i2c_init();
     6e0:	f8 94       	cli
		#endif
	USART_Init(MY_UBRR);
     6e2:	65 dd       	rcall	.-1334   	; 0x1ae <init_gpio>
     6e4:	8f d5       	rcall	.+2846   	; 0x1204 <i2c_init>
     6e6:	80 e1       	ldi	r24, 0x10	; 16
	uart_str = fdevopen(uart_putchar, NULL);
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	3d d6       	rcall	.+3194   	; 0x1366 <USART_Init>
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	8d e0       	ldi	r24, 0x0D	; 13
     6f2:	9a e0       	ldi	r25, 0x0A	; 10
	setup_timer0();
	Enable_timer0_overflow_interrupt();//micros
     6f4:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <fdevopen>
	setup_timer4();//pwm
     6f8:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <uart_str+0x1>
	setup_timer5();
     6fc:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <uart_str>
	Enable_timer5_compare_interrupt();//motor
	OCR5A=4000;
     700:	dc d4       	rcall	.+2488   	; 0x10ba <setup_timer0>
     702:	e2 d4       	rcall	.+2500   	; 0x10c8 <Enable_timer0_overflow_interrupt>
     704:	b7 d4       	rcall	.+2414   	; 0x1074 <setup_timer4>
     706:	ca d4       	rcall	.+2452   	; 0x109c <setup_timer5>
     708:	d2 d4       	rcall	.+2468   	; 0x10ae <Enable_timer5_compare_interrupt>
     70a:	80 ea       	ldi	r24, 0xA0	; 160
	unsigned long timer1=micros();
     70c:	9f e0       	ldi	r25, 0x0F	; 15
     70e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     712:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		double acc_total_vector=0;
		double angle_pitch_acc=0;
		double angle_roll_acc=0;
		bool set_gyro_angles=false;
			#ifdef CALIBERATED_DATA
				int32_t gyroX_calib_=0;
     716:	de d4       	rcall	.+2492   	; 0x10d4 <micros>
     718:	2b 01       	movw	r4, r22
     71a:	3c 01       	movw	r6, r24
				int32_t gyroY_calib_=0;
     71c:	1d 86       	std	Y+13, r1	; 0x0d
     71e:	1e 86       	std	Y+14, r1	; 0x0e
     720:	1f 86       	std	Y+15, r1	; 0x0f
     722:	18 8a       	std	Y+16, r1	; 0x10
				int32_t gyroZ_calib_=0;
     724:	19 8a       	std	Y+17, r1	; 0x11
     726:	1a 8a       	std	Y+18, r1	; 0x12
     728:	1b 8a       	std	Y+19, r1	; 0x13
				int32_t accelY_calib_=0;
				int32_t accelZ_calib_=0;				
				//uint16_t gyroX_angle_calib=0; 
				uint16_t gyroY_angle_calib=0; 
				//uint16_t gyroZ_angle_calib=0; 				
				mpu6050_calibrate_gyro(&gyroX_calib_,&gyroY_calib_,&gyroZ_calib_);
     72a:	1c 8a       	std	Y+20, r1	; 0x14
     72c:	1d 8a       	std	Y+21, r1	; 0x15
     72e:	1e 8a       	std	Y+22, r1	; 0x16
     730:	1f 8a       	std	Y+23, r1	; 0x17
     732:	18 8e       	std	Y+24, r1	; 0x18
     734:	ae 01       	movw	r20, r28
     736:	4b 5e       	subi	r20, 0xEB	; 235
     738:	5f 4f       	sbci	r21, 0xFF	; 255
     73a:	be 01       	movw	r22, r28
     73c:	6f 5e       	subi	r22, 0xEF	; 239
				int16_t gyroX_calib=gyroX_calib_;
     73e:	7f 4f       	sbci	r23, 0xFF	; 255
     740:	ce 01       	movw	r24, r28
     742:	0d 96       	adiw	r24, 0x0d	; 13
				int16_t gyroY_calib=gyroY_calib_;
     744:	f7 d2       	rcall	.+1518   	; 0xd34 <mpu6050_calibrate_gyro>
     746:	2d 85       	ldd	r18, Y+13	; 0x0d
				int16_t gyroZ_calib=gyroZ_calib_;
     748:	3e 85       	ldd	r19, Y+14	; 0x0e
     74a:	3a af       	std	Y+58, r19	; 0x3a
     74c:	29 af       	std	Y+57, r18	; 0x39
				int16_t accelX_calib=accelX_calib_;
				int16_t accelY_calib=accelY_calib_;
				int16_t accelZ_calib=accelZ_calib_;				
				//mpu6050_calibrate_accel(&accelX_calib,&accelY_calib,&accelZ_calib);
			#endif
		mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV,7);
     74e:	89 89       	ldd	r24, Y+17	; 0x11
     750:	9a 89       	ldd	r25, Y+18	; 0x12
		mpu6050_writeByte(MPU6050_RA_CONFIG,0x00);
     752:	9c af       	std	Y+60, r25	; 0x3c
     754:	8b af       	std	Y+59, r24	; 0x3b
		mpu6050_writeByte(MPU6050_RA_GYRO_CONFIG,0x08);//gyro sensitivity set to 500 o/s
     756:	2d 89       	ldd	r18, Y+21	; 0x15
     758:	3e 89       	ldd	r19, Y+22	; 0x16
     75a:	3e af       	std	Y+62, r19	; 0x3e
		mpu6050_writeByte(MPU6050_RA_ACCEL_CONFIG,0x10);//accel sensitivity -/+ 8g
     75c:	2d af       	std	Y+61, r18	; 0x3d
     75e:	67 e0       	ldi	r22, 0x07	; 7
     760:	89 e1       	ldi	r24, 0x19	; 25
		mpu6050_writeByte(MPU6050_RA_PWR_MGMT_1,0x01);
     762:	c7 d3       	rcall	.+1934   	; 0xef2 <mpu6050_writeByte>
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	8a e1       	ldi	r24, 0x1A	; 26
     768:	c4 d3       	rcall	.+1928   	; 0xef2 <mpu6050_writeByte>
		double gyroXangle;
		double gyroYangle;
		double compAngleX;
		double compAngleY;
	#endif  
	Kalman_init();
     76a:	68 e0       	ldi	r22, 0x08	; 8
	double angle_roll_kalman=0;
	double roll  = atan2(accel_y, accel_z) * RAD_TO_DEG;
     76c:	8b e1       	ldi	r24, 0x1B	; 27
     76e:	c1 d3       	rcall	.+1922   	; 0xef2 <mpu6050_writeByte>
     770:	60 e1       	ldi	r22, 0x10	; 16
     772:	8c e1       	ldi	r24, 0x1C	; 28
     774:	be d3       	rcall	.+1916   	; 0xef2 <mpu6050_writeByte>
     776:	61 e0       	ldi	r22, 0x01	; 1
     778:	8b e6       	ldi	r24, 0x6B	; 107
     77a:	bb d3       	rcall	.+1910   	; 0xef2 <mpu6050_writeByte>
     77c:	44 df       	rcall	.-376    	; 0x606 <Kalman_init>
     77e:	6b 85       	ldd	r22, Y+11	; 0x0b
     780:	7c 85       	ldd	r23, Y+12	; 0x0c
     782:	07 2e       	mov	r0, r23
     784:	00 0c       	add	r0, r0
     786:	88 0b       	sbc	r24, r24
     788:	99 0b       	sbc	r25, r25
     78a:	d1 d7       	rcall	.+4002   	; 0x172e <__floatsisf>
     78c:	6b 01       	movw	r12, r22
     78e:	7c 01       	movw	r14, r24
     790:	69 85       	ldd	r22, Y+9	; 0x09
     792:	7a 85       	ldd	r23, Y+10	; 0x0a
     794:	07 2e       	mov	r0, r23
	angle=roll;//set starting angle
     796:	00 0c       	add	r0, r0
     798:	88 0b       	sbc	r24, r24
     79a:	99 0b       	sbc	r25, r25
     79c:	c8 d7       	rcall	.+3984   	; 0x172e <__floatsisf>
     79e:	a7 01       	movw	r20, r14
     7a0:	96 01       	movw	r18, r12
     7a2:	d7 d6       	rcall	.+3502   	; 0x1552 <atan2>
     7a4:	25 e3       	ldi	r18, 0x35	; 53
     7a6:	3a ef       	ldi	r19, 0xFA	; 250
     7a8:	4e e8       	ldi	r20, 0x8E	; 142
     7aa:	5c e3       	ldi	r21, 0x3C	; 60
     7ac:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     7b0:	60 93 1d 04 	sts	0x041D, r22	; 0x80041d <angle>
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		double angle_pitch=0;
		double angle_roll=0;
     7b4:	70 93 1e 04 	sts	0x041E, r23	; 0x80041e <angle+0x1>
     7b8:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <angle+0x2>
		int16_t gyro_y;
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		double angle_pitch=0;
     7bc:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <angle+0x3>
     7c0:	78 94       	sei
	angle=roll;//set starting angle
	sei();
    while (1) /*---------------------------while(1)---------------------------------*/
    {
		#ifdef GYRO
    		mpu6050_getRawData(&accel_x,&accel_y,&accel_z,&gyro_x,&gyro_y,&gyro_z);//15us to do
     7c2:	1b a2       	std	Y+35, r1	; 0x23
     7c4:	1c a2       	std	Y+36, r1	; 0x24
     7c6:	1d a2       	std	Y+37, r1	; 0x25
     7c8:	1e a2       	std	Y+38, r1	; 0x26
     7ca:	1b a6       	std	Y+43, r1	; 0x2b
     7cc:	1c a6       	std	Y+44, r1	; 0x2c
     7ce:	1d a6       	std	Y+45, r1	; 0x2d
     7d0:	1e a6       	std	Y+46, r1	; 0x2e
     7d2:	ce 01       	movw	r24, r28
     7d4:	05 96       	adiw	r24, 0x05	; 5
     7d6:	7c 01       	movw	r14, r24
     7d8:	8e 01       	movw	r16, r28
     7da:	0d 5f       	subi	r16, 0xFD	; 253
     7dc:	1f 4f       	sbci	r17, 0xFF	; 255
     7de:	9e 01       	movw	r18, r28
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	ae 01       	movw	r20, r28
		#ifdef GYRO
			#ifdef CALIBERATED_DATA
				accX;
				accY;
				accZ;
				grX;
     7e6:	45 5f       	subi	r20, 0xF5	; 245
     7e8:	5f 4f       	sbci	r21, 0xFF	; 255
     7ea:	be 01       	movw	r22, r28
     7ec:	67 5f       	subi	r22, 0xF7	; 247
     7ee:	7f 4f       	sbci	r23, 0xFF	; 255
     7f0:	02 96       	adiw	r24, 0x02	; 2
     7f2:	d5 d3       	rcall	.+1962   	; 0xf9e <mpu6050_getRawData>
				grY;
     7f4:	89 81       	ldd	r24, Y+1	; 0x01
     7f6:	9a 81       	ldd	r25, Y+2	; 0x02
     7f8:	29 ad       	ldd	r18, Y+57	; 0x39
     7fa:	3a ad       	ldd	r19, Y+58	; 0x3a
     7fc:	82 1b       	sub	r24, r18
     7fe:	93 0b       	sbc	r25, r19
     800:	9a 83       	std	Y+2, r25	; 0x02
				grZ;
     802:	89 83       	std	Y+1, r24	; 0x01
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	9c 81       	ldd	r25, Y+4	; 0x04
     808:	2b ad       	ldd	r18, Y+59	; 0x3b
     80a:	3c ad       	ldd	r19, Y+60	; 0x3c
     80c:	82 1b       	sub	r24, r18
     80e:	93 0b       	sbc	r25, r19
			printf("  ");
			printf("\n");
			/*--------end------*/			
		#else
			
			double dt = (double)((micros() - timer1));
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	8b 83       	std	Y+3, r24	; 0x03
     814:	8d 81       	ldd	r24, Y+5	; 0x05
     816:	9e 81       	ldd	r25, Y+6	; 0x06
     818:	2d ad       	ldd	r18, Y+61	; 0x3d
     81a:	3e ad       	ldd	r19, Y+62	; 0x3e
     81c:	82 1b       	sub	r24, r18
     81e:	93 0b       	sbc	r25, r19
     820:	9e 83       	std	Y+6, r25	; 0x06
     822:	8d 83       	std	Y+5, r24	; 0x05
			timer1=micros();
     824:	57 d4       	rcall	.+2222   	; 0x10d4 <micros>
     826:	64 19       	sub	r22, r4
     828:	75 09       	sbc	r23, r5
     82a:	86 09       	sbc	r24, r6
			//double hz=1000000/dt;
			double pop=1/(65.5*1000000/dt);
     82c:	97 09       	sbc	r25, r7
     82e:	7d d7       	rcall	.+3834   	; 0x172a <__floatunsisf>
     830:	6f a3       	std	Y+39, r22	; 0x27
     832:	78 a7       	std	Y+40, r23	; 0x28
     834:	89 a7       	std	Y+41, r24	; 0x29
     836:	9a a7       	std	Y+42, r25	; 0x2a
     838:	4d d4       	rcall	.+2202   	; 0x10d4 <micros>
     83a:	2b 01       	movw	r4, r22
     83c:	3c 01       	movw	r6, r24
     83e:	2f a1       	ldd	r18, Y+39	; 0x27
     840:	38 a5       	ldd	r19, Y+40	; 0x28
     842:	49 a5       	ldd	r20, Y+41	; 0x29
     844:	5a a5       	ldd	r21, Y+42	; 0x2a
     846:	68 ed       	ldi	r22, 0xD8	; 216
     848:	7c ed       	ldi	r23, 0xDC	; 220
     84a:	89 e7       	ldi	r24, 0x79	; 121
     84c:	9c e4       	ldi	r25, 0x4C	; 76
     84e:	d4 d6       	rcall	.+3496   	; 0x15f8 <__divsf3>
     850:	9b 01       	movw	r18, r22
			double gyroXrate = gyro_x*pop;// / 65.5 / hz; 
			double gyroYrate = gyro_y*pop;// / 65.5 / hz; 
     852:	ac 01       	movw	r20, r24
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	80 e8       	ldi	r24, 0x80	; 128
     85a:	9f e3       	ldi	r25, 0x3F	; 63
     85c:	cd d6       	rcall	.+3482   	; 0x15f8 <__divsf3>
     85e:	6b 01       	movw	r12, r22
     860:	7c 01       	movw	r14, r24
     862:	6b 81       	ldd	r22, Y+3	; 0x03
     864:	7c 81       	ldd	r23, Y+4	; 0x04
			//if(loop_bool)
			//{
			//	gyroYrate-=tpel;
			//	loop_bool=false;
			//}
			if (!loop_bool)
     866:	07 2e       	mov	r0, r23
     868:	00 0c       	add	r0, r0
     86a:	88 0b       	sbc	r24, r24
     86c:	99 0b       	sbc	r25, r25
     86e:	5f d7       	rcall	.+3774   	; 0x172e <__floatsisf>
			{
				angle_pitch += gyroXrate; //Calculate the traveled pitch angle and add this to the angle_pitch variable
     870:	6d ab       	std	Y+53, r22	; 0x35
     872:	7e ab       	std	Y+54, r23	; 0x36
     874:	8f ab       	std	Y+55, r24	; 0x37
     876:	98 af       	std	Y+56, r25	; 0x38
     878:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <loop_bool>
     87c:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <loop_bool+0x1>
     880:	89 2b       	or	r24, r25
     882:	51 f5       	brne	.+84     	; 0x8d8 <main+0x244>
     884:	69 81       	ldd	r22, Y+1	; 0x01
     886:	7a 81       	ldd	r23, Y+2	; 0x02
     888:	07 2e       	mov	r0, r23
     88a:	00 0c       	add	r0, r0
     88c:	88 0b       	sbc	r24, r24
     88e:	99 0b       	sbc	r25, r25
     890:	4e d7       	rcall	.+3740   	; 0x172e <__floatsisf>
     892:	a7 01       	movw	r20, r14
     894:	96 01       	movw	r18, r12
     896:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     89a:	9b 01       	movw	r18, r22
     89c:	ac 01       	movw	r20, r24
				angle_roll += gyroYrate;  //Calculate the traveled roll angle and add this to the angle_roll variable			
     89e:	6b a5       	ldd	r22, Y+43	; 0x2b
     8a0:	7c a5       	ldd	r23, Y+44	; 0x2c
     8a2:	8d a5       	ldd	r24, Y+45	; 0x2d
     8a4:	9e a5       	ldd	r25, Y+46	; 0x2e
     8a6:	cb d5       	rcall	.+2966   	; 0x143e <__addsf3>
     8a8:	6b a7       	std	Y+43, r22	; 0x2b
     8aa:	7c a7       	std	Y+44, r23	; 0x2c
     8ac:	8d a7       	std	Y+45, r24	; 0x2d
     8ae:	9e a7       	std	Y+46, r25	; 0x2e
     8b0:	2d a9       	ldd	r18, Y+53	; 0x35
     8b2:	3e a9       	ldd	r19, Y+54	; 0x36
     8b4:	4f a9       	ldd	r20, Y+55	; 0x37
     8b6:	58 ad       	ldd	r21, Y+56	; 0x38
     8b8:	c7 01       	movw	r24, r14
     8ba:	b6 01       	movw	r22, r12
     8bc:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     8c0:	9b 01       	movw	r18, r22
     8c2:	ac 01       	movw	r20, r24
     8c4:	6b a1       	ldd	r22, Y+35	; 0x23
			}
			else
			{
				loop_bool=false;
     8c6:	7c a1       	ldd	r23, Y+36	; 0x24
     8c8:	8d a1       	ldd	r24, Y+37	; 0x25
     8ca:	9e a1       	ldd	r25, Y+38	; 0x26
     8cc:	b8 d5       	rcall	.+2928   	; 0x143e <__addsf3>
			}					
					//0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
			pop*=(3.142/180);	
			angle_pitch += angle_roll * sin(gyro_z * pop);               //If the IMU has yawed transfer the roll angle to the pitch angel
     8ce:	6b a3       	std	Y+35, r22	; 0x23
     8d0:	7c a3       	std	Y+36, r23	; 0x24
     8d2:	8d a3       	std	Y+37, r24	; 0x25
     8d4:	9e a3       	std	Y+38, r25	; 0x26
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <main+0x24c>
     8d8:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <loop_bool+0x1>
     8dc:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <loop_bool>
     8e0:	6d 81       	ldd	r22, Y+5	; 0x05
     8e2:	7e 81       	ldd	r23, Y+6	; 0x06
     8e4:	07 2e       	mov	r0, r23
     8e6:	00 0c       	add	r0, r0
     8e8:	88 0b       	sbc	r24, r24
     8ea:	99 0b       	sbc	r25, r25
     8ec:	20 d7       	rcall	.+3648   	; 0x172e <__floatsisf>
     8ee:	4b 01       	movw	r8, r22
     8f0:	5c 01       	movw	r10, r24
     8f2:	24 ef       	ldi	r18, 0xF4	; 244
     8f4:	3e ef       	ldi	r19, 0xFE	; 254
     8f6:	4e e8       	ldi	r20, 0x8E	; 142
     8f8:	5c e3       	ldi	r21, 0x3C	; 60
     8fa:	c7 01       	movw	r24, r14
     8fc:	b6 01       	movw	r22, r12
     8fe:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     902:	9b 01       	movw	r18, r22
     904:	ac 01       	movw	r20, r24
     906:	c5 01       	movw	r24, r10
     908:	b4 01       	movw	r22, r8
     90a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     90e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <sin>
     912:	6b 01       	movw	r12, r22
     914:	7c 01       	movw	r14, r24
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	6b a1       	ldd	r22, Y+35	; 0x23
     91c:	7c a1       	ldd	r23, Y+36	; 0x24
     91e:	8d a1       	ldd	r24, Y+37	; 0x25
     920:	9e a1       	ldd	r25, Y+38	; 0x26
     922:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     926:	9b 01       	movw	r18, r22
			angle_roll -= angle_pitch * sin(gyro_z * pop);               //If the IMU has yawed transfer the pitch angle to the roll angel
     928:	ac 01       	movw	r20, r24
     92a:	6b a5       	ldd	r22, Y+43	; 0x2b
     92c:	7c a5       	ldd	r23, Y+44	; 0x2c
     92e:	8d a5       	ldd	r24, Y+45	; 0x2d
     930:	9e a5       	ldd	r25, Y+46	; 0x2e
     932:	85 d5       	rcall	.+2826   	; 0x143e <__addsf3>
     934:	6b a7       	std	Y+43, r22	; 0x2b
     936:	7c a7       	std	Y+44, r23	; 0x2c
     938:	8d a7       	std	Y+45, r24	; 0x2d
     93a:	9e a7       	std	Y+46, r25	; 0x2e
     93c:	9b 01       	movw	r18, r22
     93e:	ac 01       	movw	r20, r24
     940:	c7 01       	movw	r24, r14
     942:	b6 01       	movw	r22, r12
     944:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
			
			double temporar_accel_x=accel_x/100;
     948:	9b 01       	movw	r18, r22
     94a:	ac 01       	movw	r20, r24
     94c:	6b a1       	ldd	r22, Y+35	; 0x23
     94e:	7c a1       	ldd	r23, Y+36	; 0x24
     950:	8d a1       	ldd	r24, Y+37	; 0x25
     952:	9e a1       	ldd	r25, Y+38	; 0x26
     954:	73 d5       	rcall	.+2790   	; 0x143c <__subsf3>
     956:	6b a3       	std	Y+35, r22	; 0x23
     958:	7c a3       	std	Y+36, r23	; 0x24
     95a:	8d a3       	std	Y+37, r24	; 0x25
     95c:	9e a3       	std	Y+38, r25	; 0x26
     95e:	2f 80       	ldd	r2, Y+7	; 0x07
     960:	38 84       	ldd	r3, Y+8	; 0x08
     962:	c1 01       	movw	r24, r2
			double temporar_accel_y=accel_y/100;
     964:	64 e6       	ldi	r22, 0x64	; 100
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__divmodhi4>
     96c:	07 2e       	mov	r0, r23
     96e:	00 0c       	add	r0, r0
     970:	88 0b       	sbc	r24, r24
     972:	99 0b       	sbc	r25, r25
     974:	dc d6       	rcall	.+3512   	; 0x172e <__floatsisf>
     976:	4b 01       	movw	r8, r22
     978:	5c 01       	movw	r10, r24
     97a:	89 85       	ldd	r24, Y+9	; 0x09
     97c:	9a 85       	ldd	r25, Y+10	; 0x0a
     97e:	9c ab       	std	Y+52, r25	; 0x34
     980:	8b ab       	std	Y+51, r24	; 0x33
     982:	64 e6       	ldi	r22, 0x64	; 100
			double temporar_accel_z=accel_z/100;
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__divmodhi4>
     98a:	07 2e       	mov	r0, r23
     98c:	00 0c       	add	r0, r0
     98e:	88 0b       	sbc	r24, r24
     990:	99 0b       	sbc	r25, r25
     992:	cd d6       	rcall	.+3482   	; 0x172e <__floatsisf>
     994:	6f 8f       	std	Y+31, r22	; 0x1f
     996:	78 a3       	std	Y+32, r23	; 0x20
     998:	89 a3       	std	Y+33, r24	; 0x21
     99a:	9a a3       	std	Y+34, r25	; 0x22
     99c:	0b 85       	ldd	r16, Y+11	; 0x0b
			
			acc_total_vector = sqrt((temporar_accel_x*temporar_accel_x)+(temporar_accel_y*temporar_accel_y)+(temporar_accel_z*temporar_accel_z));  //Calculate the total accelerometer vector
     99e:	1c 85       	ldd	r17, Y+12	; 0x0c
     9a0:	c8 01       	movw	r24, r16
     9a2:	64 e6       	ldi	r22, 0x64	; 100
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__divmodhi4>
     9aa:	07 2e       	mov	r0, r23
     9ac:	00 0c       	add	r0, r0
     9ae:	88 0b       	sbc	r24, r24
     9b0:	99 0b       	sbc	r25, r25
     9b2:	bd d6       	rcall	.+3450   	; 0x172e <__floatsisf>
     9b4:	6b 01       	movw	r12, r22
     9b6:	7c 01       	movw	r14, r24
     9b8:	a5 01       	movw	r20, r10
     9ba:	94 01       	movw	r18, r8
     9bc:	c5 01       	movw	r24, r10
     9be:	b4 01       	movw	r22, r8
     9c0:	c2 d7       	rcall	.+3972   	; 0x1946 <__mulsf3>
     9c2:	6f a7       	std	Y+47, r22	; 0x2f
     9c4:	78 ab       	std	Y+48, r23	; 0x30
     9c6:	89 ab       	std	Y+49, r24	; 0x31
     9c8:	9a ab       	std	Y+50, r25	; 0x32
     9ca:	2f 8d       	ldd	r18, Y+31	; 0x1f
     9cc:	38 a1       	ldd	r19, Y+32	; 0x20
     9ce:	49 a1       	ldd	r20, Y+33	; 0x21
     9d0:	5a a1       	ldd	r21, Y+34	; 0x22
     9d2:	ca 01       	movw	r24, r20
     9d4:	b9 01       	movw	r22, r18
     9d6:	b7 d7       	rcall	.+3950   	; 0x1946 <__mulsf3>
     9d8:	9b 01       	movw	r18, r22
     9da:	ac 01       	movw	r20, r24
     9dc:	6f a5       	ldd	r22, Y+47	; 0x2f
     9de:	78 a9       	ldd	r23, Y+48	; 0x30
     9e0:	89 a9       	ldd	r24, Y+49	; 0x31
     9e2:	9a a9       	ldd	r25, Y+50	; 0x32
     9e4:	2c d5       	rcall	.+2648   	; 0x143e <__addsf3>
     9e6:	6f a7       	std	Y+47, r22	; 0x2f
     9e8:	78 ab       	std	Y+48, r23	; 0x30
     9ea:	89 ab       	std	Y+49, r24	; 0x31
     9ec:	9a ab       	std	Y+50, r25	; 0x32
     9ee:	a5 01       	movw	r20, r10
     9f0:	94 01       	movw	r18, r8
     9f2:	c5 01       	movw	r24, r10
     9f4:	b4 01       	movw	r22, r8
     9f6:	a7 d7       	rcall	.+3918   	; 0x1946 <__mulsf3>
     9f8:	4b 01       	movw	r8, r22
     9fa:	5c 01       	movw	r10, r24
     9fc:	2f 8d       	ldd	r18, Y+31	; 0x1f
     9fe:	38 a1       	ldd	r19, Y+32	; 0x20
     a00:	49 a1       	ldd	r20, Y+33	; 0x21
     a02:	5a a1       	ldd	r21, Y+34	; 0x22
     a04:	ca 01       	movw	r24, r20
     a06:	b9 01       	movw	r22, r18
     a08:	9e d7       	rcall	.+3900   	; 0x1946 <__mulsf3>
     a0a:	9b 01       	movw	r18, r22
     a0c:	ac 01       	movw	r20, r24
     a0e:	c5 01       	movw	r24, r10
     a10:	b4 01       	movw	r22, r8
     a12:	15 d5       	rcall	.+2602   	; 0x143e <__addsf3>
     a14:	4b 01       	movw	r8, r22
     a16:	5c 01       	movw	r10, r24
					//57.296 = 1 / (3.142 / 180) The Arduino asin function is in radians
			acc_total_vector*=100;
		    angle_pitch_acc = asin((double)accel_y/acc_total_vector)* 57.296;       //Calculate the pitch angle
			angle_roll_acc = asin((double)accel_x/acc_total_vector)* -57.296;       //Calculate the roll angle
     a18:	a7 01       	movw	r20, r14
     a1a:	96 01       	movw	r18, r12
     a1c:	c7 01       	movw	r24, r14
     a1e:	b6 01       	movw	r22, r12
     a20:	92 d7       	rcall	.+3876   	; 0x1946 <__mulsf3>
     a22:	9b 01       	movw	r18, r22
     a24:	ac 01       	movw	r20, r24
     a26:	c5 01       	movw	r24, r10
     a28:	b4 01       	movw	r22, r8
     a2a:	09 d5       	rcall	.+2578   	; 0x143e <__addsf3>
     a2c:	f9 d7       	rcall	.+4082   	; 0x1a20 <sqrt>
     a2e:	4b 01       	movw	r8, r22
     a30:	5c 01       	movw	r10, r24
     a32:	b1 01       	movw	r22, r2
     a34:	33 0c       	add	r3, r3
     a36:	88 0b       	sbc	r24, r24
     a38:	99 0b       	sbc	r25, r25
     a3a:	79 d6       	rcall	.+3314   	; 0x172e <__floatsisf>
     a3c:	6b 01       	movw	r12, r22
     a3e:	7c 01       	movw	r14, r24
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	48 ec       	ldi	r20, 0xC8	; 200
     a46:	52 e4       	ldi	r21, 0x42	; 66
     a48:	c5 01       	movw	r24, r10
				
				
				
			#endif
			//kalman
			double roll  = atan2(accel_y, accel_z) * RAD_TO_DEG;
     a4a:	b4 01       	movw	r22, r8
     a4c:	7c d7       	rcall	.+3832   	; 0x1946 <__mulsf3>
     a4e:	9b 01       	movw	r18, r22
     a50:	ac 01       	movw	r20, r24
     a52:	c7 01       	movw	r24, r14
     a54:	b6 01       	movw	r22, r12
     a56:	d0 d5       	rcall	.+2976   	; 0x15f8 <__divsf3>
     a58:	56 d5       	rcall	.+2732   	; 0x1506 <asin>
     a5a:	6f 8f       	std	Y+31, r22	; 0x1f
     a5c:	78 a3       	std	Y+32, r23	; 0x20
     a5e:	89 a3       	std	Y+33, r24	; 0x21
     a60:	9a a3       	std	Y+34, r25	; 0x22
     a62:	b8 01       	movw	r22, r16
     a64:	11 0f       	add	r17, r17
     a66:	88 0b       	sbc	r24, r24
     a68:	99 0b       	sbc	r25, r25
     a6a:	61 d6       	rcall	.+3266   	; 0x172e <__floatsisf>
     a6c:	6b 01       	movw	r12, r22
			//angle=roll;//setangle	
			float kalman_dt=dt/1000000;
			double kalman_gyroyRate=gyro_y/65.5;
			float kalman_angle=getAngle(roll,kalman_gyroyRate,kalman_dt);
     a6e:	7c 01       	movw	r14, r24
     a70:	2b a9       	ldd	r18, Y+51	; 0x33
     a72:	3c a9       	ldd	r19, Y+52	; 0x34
     a74:	b9 01       	movw	r22, r18
     a76:	33 0f       	add	r19, r19
     a78:	88 0b       	sbc	r24, r24
     a7a:	99 0b       	sbc	r25, r25
     a7c:	58 d6       	rcall	.+3248   	; 0x172e <__floatsisf>
     a7e:	a7 01       	movw	r20, r14
     a80:	96 01       	movw	r18, r12
     a82:	67 d5       	rcall	.+2766   	; 0x1552 <atan2>
     a84:	6b 01       	movw	r12, r22
     a86:	7c 01       	movw	r14, r24
     a88:	20 e0       	ldi	r18, 0x00	; 0
     a8a:	34 e2       	ldi	r19, 0x24	; 36
     a8c:	44 e7       	ldi	r20, 0x74	; 116
     a8e:	59 e4       	ldi	r21, 0x49	; 73
     a90:	6f a1       	ldd	r22, Y+39	; 0x27
     a92:	78 a5       	ldd	r23, Y+40	; 0x28
     a94:	89 a5       	ldd	r24, Y+41	; 0x29
     a96:	9a a5       	ldd	r25, Y+42	; 0x2a
     a98:	af d5       	rcall	.+2910   	; 0x15f8 <__divsf3>
     a9a:	6f a3       	std	Y+39, r22	; 0x27
     a9c:	78 a7       	std	Y+40, r23	; 0x28
     a9e:	89 a7       	std	Y+41, r24	; 0x29
     aa0:	9a a7       	std	Y+42, r25	; 0x2a
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	43 e8       	ldi	r20, 0x83	; 131
     aa8:	52 e4       	ldi	r21, 0x42	; 66
     aaa:	6d a9       	ldd	r22, Y+53	; 0x35
     aac:	7e a9       	ldd	r23, Y+54	; 0x36
     aae:	8f a9       	ldd	r24, Y+55	; 0x37
     ab0:	98 ad       	ldd	r25, Y+56	; 0x38
     ab2:	a2 d5       	rcall	.+2884   	; 0x15f8 <__divsf3>
     ab4:	4b 01       	movw	r8, r22
     ab6:	5c 01       	movw	r10, r24
     ab8:	25 e3       	ldi	r18, 0x35	; 53
			//angle_roll_kalman+=pop*kalman_angle;	
			
			
			
			
			int16_t reg=kalman_angle;
     aba:	3a ef       	ldi	r19, 0xFA	; 250
     abc:	4e e8       	ldi	r20, 0x8E	; 142
     abe:	5c e3       	ldi	r21, 0x3C	; 60
			printf(" ");
     ac0:	c7 01       	movw	r24, r14
     ac2:	b6 01       	movw	r22, r12
     ac4:	40 d7       	rcall	.+3712   	; 0x1946 <__mulsf3>
			printf("kalman_angle= ");
     ac6:	ef a0       	ldd	r14, Y+39	; 0x27
     ac8:	f8 a4       	ldd	r15, Y+40	; 0x28
     aca:	09 a5       	ldd	r16, Y+41	; 0x29
     acc:	1a a5       	ldd	r17, Y+42	; 0x2a
     ace:	a5 01       	movw	r20, r10
     ad0:	94 01       	movw	r18, r8
			print16(&reg);
     ad2:	fb db       	rcall	.-2058   	; 0x2ca <getAngle>
     ad4:	f9 d5       	rcall	.+3058   	; 0x16c8 <__fixsfsi>
     ad6:	7e 8f       	std	Y+30, r23	; 0x1e
			reg=angle_roll;
     ad8:	6d 8f       	std	Y+29, r22	; 0x1d
     ada:	80 e2       	ldi	r24, 0x20	; 32
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <putchar>
     ae2:	85 e7       	ldi	r24, 0x75	; 117
			printf(" ");
     ae4:	93 e0       	ldi	r25, 0x03	; 3
     ae6:	9f 93       	push	r25
     ae8:	8f 93       	push	r24
     aea:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <printf>
			printf("gyroY_angle= ");
     aee:	ce 01       	movw	r24, r28
     af0:	4d 96       	adiw	r24, 0x1d	; 29
     af2:	44 d4       	rcall	.+2184   	; 0x137c <print16>
     af4:	6b a1       	ldd	r22, Y+35	; 0x23
     af6:	7c a1       	ldd	r23, Y+36	; 0x24
			print16(&reg);
     af8:	8d a1       	ldd	r24, Y+37	; 0x25
     afa:	9e a1       	ldd	r25, Y+38	; 0x26
     afc:	e5 d5       	rcall	.+3018   	; 0x16c8 <__fixsfsi>
			
			double xff=angle_roll_acc;
			double final_angleY=(angle_roll*0.996)+(xff*0.004);
     afe:	7e 8f       	std	Y+30, r23	; 0x1e
     b00:	6d 8f       	std	Y+29, r22	; 0x1d
     b02:	80 e2       	ldi	r24, 0x20	; 32
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <putchar>
     b0a:	84 e8       	ldi	r24, 0x84	; 132
     b0c:	93 e0       	ldi	r25, 0x03	; 3
     b0e:	9f 93       	push	r25
     b10:	8f 93       	push	r24
     b12:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <printf>
     b16:	ce 01       	movw	r24, r28
     b18:	4d 96       	adiw	r24, 0x1d	; 29
     b1a:	30 d4       	rcall	.+2144   	; 0x137c <print16>
     b1c:	2b e1       	ldi	r18, 0x1B	; 27
     b1e:	3f e2       	ldi	r19, 0x2F	; 47
     b20:	45 e6       	ldi	r20, 0x65	; 101
     b22:	52 ec       	ldi	r21, 0xC2	; 194
     b24:	6f 8d       	ldd	r22, Y+31	; 0x1f
     b26:	78 a1       	ldd	r23, Y+32	; 0x20
     b28:	89 a1       	ldd	r24, Y+33	; 0x21
     b2a:	9a a1       	ldd	r25, Y+34	; 0x22
     b2c:	0c d7       	rcall	.+3608   	; 0x1946 <__mulsf3>
     b2e:	2f e6       	ldi	r18, 0x6F	; 111
     b30:	32 e1       	ldi	r19, 0x12	; 18
     b32:	43 e8       	ldi	r20, 0x83	; 131
     b34:	5b e3       	ldi	r21, 0x3B	; 59
     b36:	07 d7       	rcall	.+3598   	; 0x1946 <__mulsf3>
     b38:	6b 01       	movw	r12, r22
     b3a:	7c 01       	movw	r14, r24
     b3c:	2b ed       	ldi	r18, 0xDB	; 219
     b3e:	39 ef       	ldi	r19, 0xF9	; 249
     b40:	4e e7       	ldi	r20, 0x7E	; 126
     b42:	5f e3       	ldi	r21, 0x3F	; 63
			reg=final_angleY;
     b44:	6b a1       	ldd	r22, Y+35	; 0x23
     b46:	7c a1       	ldd	r23, Y+36	; 0x24
     b48:	8d a1       	ldd	r24, Y+37	; 0x25
     b4a:	9e a1       	ldd	r25, Y+38	; 0x26
     b4c:	fc d6       	rcall	.+3576   	; 0x1946 <__mulsf3>
     b4e:	9b 01       	movw	r18, r22
			printf(" ");	
     b50:	ac 01       	movw	r20, r24
     b52:	c7 01       	movw	r24, r14
     b54:	b6 01       	movw	r22, r12
     b56:	73 d4       	rcall	.+2278   	; 0x143e <__addsf3>
			printf("final_angleY= ");
     b58:	6b 01       	movw	r12, r22
     b5a:	7c 01       	movw	r14, r24
     b5c:	b5 d5       	rcall	.+2922   	; 0x16c8 <__fixsfsi>
     b5e:	4b 01       	movw	r8, r22
     b60:	5c 01       	movw	r10, r24
			print16(&reg);
     b62:	7e 8f       	std	Y+30, r23	; 0x1e
     b64:	6d 8f       	std	Y+29, r22	; 0x1d
     b66:	80 e2       	ldi	r24, 0x20	; 32
						
			#ifdef DRV8313
				int absoulute_y=abs(final_angleY);
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <putchar>
     b6e:	82 e9       	ldi	r24, 0x92	; 146
     b70:	93 e0       	ldi	r25, 0x03	; 3
     b72:	9f 93       	push	r25
     b74:	8f 93       	push	r24
				uint16_t learing_rate=500;				
				uint16_t local_motor_delay=(32735-(absoulute_y*learing_rate));
     b76:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <printf>
     b7a:	ce 01       	movw	r24, r28
     b7c:	4d 96       	adiw	r24, 0x1d	; 29
     b7e:	fe d3       	rcall	.+2044   	; 0x137c <print16>
     b80:	c4 01       	movw	r24, r8
     b82:	99 23       	and	r25, r25
     b84:	24 f4       	brge	.+8      	; 0xb8e <main+0x4fa>
     b86:	88 27       	eor	r24, r24
     b88:	99 27       	eor	r25, r25
     b8a:	88 19       	sub	r24, r8
				if (local_motor_delay>2000)
     b8c:	99 09       	sbc	r25, r9
     b8e:	8c 01       	movw	r16, r24
     b90:	44 ef       	ldi	r20, 0xF4	; 244
     b92:	51 e0       	ldi	r21, 0x01	; 1
     b94:	84 9f       	mul	r24, r20
     b96:	90 01       	movw	r18, r0
     b98:	85 9f       	mul	r24, r21
     b9a:	30 0d       	add	r19, r0
     b9c:	94 9f       	mul	r25, r20
     b9e:	30 0d       	add	r19, r0
				{
					pwm_delay=local_motor_delay;
     ba0:	11 24       	eor	r1, r1
     ba2:	8f ed       	ldi	r24, 0xDF	; 223
     ba4:	9f e7       	ldi	r25, 0x7F	; 127
     ba6:	82 1b       	sub	r24, r18
				}
				int16_t reg_ = local_motor_delay;
     ba8:	93 0b       	sbc	r25, r19
				printf("  ");
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
				printf("ocr= ");
     bb4:	0f 90       	pop	r0
     bb6:	81 3d       	cpi	r24, 0xD1	; 209
     bb8:	37 e0       	ldi	r19, 0x07	; 7
     bba:	93 07       	cpc	r25, r19
     bbc:	20 f0       	brcs	.+8      	; 0xbc6 <main+0x532>
     bbe:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <pwm_delay+0x1>
				print16(&reg_);
     bc2:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <pwm_delay>
     bc6:	9c 8f       	std	Y+28, r25	; 0x1c
				if ((absoulute_y>=0.8) || (final_angleY >90))
     bc8:	8b 8f       	std	Y+27, r24	; 0x1b
     bca:	81 ea       	ldi	r24, 0xA1	; 161
     bcc:	93 e0       	ldi	r25, 0x03	; 3
     bce:	9f 93       	push	r25
     bd0:	8f 93       	push	r24
     bd2:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <printf>
     bd6:	84 ea       	ldi	r24, 0xA4	; 164
     bd8:	93 e0       	ldi	r25, 0x03	; 3
     bda:	9f 93       	push	r25
     bdc:	8f 93       	push	r24
     bde:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <printf>
     be2:	ce 01       	movw	r24, r28
     be4:	4b 96       	adiw	r24, 0x1b	; 27
     be6:	ca d3       	rcall	.+1940   	; 0x137c <print16>
     be8:	b8 01       	movw	r22, r16
     bea:	11 0f       	add	r17, r17
     bec:	88 0b       	sbc	r24, r24
     bee:	99 0b       	sbc	r25, r25
     bf0:	9e d5       	rcall	.+2876   	; 0x172e <__floatsisf>
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	2d ec       	ldi	r18, 0xCD	; 205
     bfc:	3c ec       	ldi	r19, 0xCC	; 204
				{
					incr=0;
     bfe:	4c e4       	ldi	r20, 0x4C	; 76
     c00:	5f e3       	ldi	r21, 0x3F	; 63
     c02:	96 d6       	rcall	.+3372   	; 0x1930 <__gesf2>
     c04:	88 23       	and	r24, r24
					printf("\n");	
     c06:	4c f4       	brge	.+18     	; 0xc1a <main+0x586>
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	44 eb       	ldi	r20, 0xB4	; 180
     c0e:	52 e4       	ldi	r21, 0x42	; 66
				}
				else 
					if (final_angleY>0.8)
     c10:	c7 01       	movw	r24, r14
     c12:	b6 01       	movw	r22, r12
     c14:	8d d6       	rcall	.+3354   	; 0x1930 <__gesf2>
     c16:	18 16       	cp	r1, r24
     c18:	4c f4       	brge	.+18     	; 0xc2c <main+0x598>
     c1a:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <incr+0x1>
     c1e:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <incr>
					{
						cli();
     c22:	8a e0       	ldi	r24, 0x0A	; 10
						incr=1;
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <putchar>
     c2a:	d3 cd       	rjmp	.-1114   	; 0x7d2 <main+0x13e>
     c2c:	2d ec       	ldi	r18, 0xCD	; 205
     c2e:	3c ec       	ldi	r19, 0xCC	; 204
						printf(" ");
     c30:	4c e4       	ldi	r20, 0x4C	; 76
     c32:	5f e3       	ldi	r21, 0x3F	; 63
     c34:	c7 01       	movw	r24, r14
     c36:	b6 01       	movw	r22, r12
						int16_t val=pwmSin[U_step];
     c38:	7b d6       	rcall	.+3318   	; 0x1930 <__gesf2>
     c3a:	18 16       	cp	r1, r24
     c3c:	f4 f4       	brge	.+60     	; 0xc7a <main+0x5e6>
     c3e:	f8 94       	cli
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <incr+0x1>
     c48:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <incr>
						print16(&val);
     c4c:	80 e2       	ldi	r24, 0x20	; 32
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <putchar>
						printf(" yes\n");
     c54:	e0 91 f8 03 	lds	r30, 0x03F8	; 0x8003f8 <__data_end>
     c58:	f0 91 f9 03 	lds	r31, 0x03F9	; 0x8003f9 <__data_end+0x1>
						
						sei();
     c5c:	ea 5f       	subi	r30, 0xFA	; 250
     c5e:	fd 4f       	sbci	r31, 0xFD	; 253
					}
					else
					{	cli();
     c60:	80 81       	ld	r24, Z
						incr=-1;
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	9a 8f       	std	Y+26, r25	; 0x1a
     c66:	89 8f       	std	Y+25, r24	; 0x19
     c68:	ce 01       	movw	r24, r28
     c6a:	49 96       	adiw	r24, 0x19	; 25
     c6c:	87 d3       	rcall	.+1806   	; 0x137c <print16>
						printf(" ");
     c6e:	8a ea       	ldi	r24, 0xAA	; 170
     c70:	93 e0       	ldi	r25, 0x03	; 3
     c72:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <puts>
						int16_t val=pwmSin[U_step];
     c76:	78 94       	sei
     c78:	ac cd       	rjmp	.-1192   	; 0x7d2 <main+0x13e>
     c7a:	f8 94       	cli
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	9f ef       	ldi	r25, 0xFF	; 255
     c80:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <incr+0x1>
     c84:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <incr>
     c88:	80 e2       	ldi	r24, 0x20	; 32
						print16(&val);
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <putchar>
     c90:	e0 91 f8 03 	lds	r30, 0x03F8	; 0x8003f8 <__data_end>
						printf(" no\n");
     c94:	f0 91 f9 03 	lds	r31, 0x03F9	; 0x8003f9 <__data_end+0x1>
     c98:	ea 5f       	subi	r30, 0xFA	; 250
						sei();
     c9a:	fd 4f       	sbci	r31, 0xFD	; 253
			//	 set_gyro_angles = true;                                            //Set the IMU started flag
			//}
			
			#endif //PRINT_RAW_DATA			
		#endif //GYRO
	}
     c9c:	80 81       	ld	r24, Z
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	9a 8f       	std	Y+26, r25	; 0x1a
     ca2:	89 8f       	std	Y+25, r24	; 0x19
     ca4:	ce 01       	movw	r24, r28
     ca6:	49 96       	adiw	r24, 0x19	; 25
     ca8:	69 d3       	rcall	.+1746   	; 0x137c <print16>
     caa:	8f ea       	ldi	r24, 0xAF	; 175
     cac:	93 e0       	ldi	r25, 0x03	; 3
     cae:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <puts>
     cb2:	78 94       	sei
     cb4:	8e cd       	rjmp	.-1252   	; 0x7d2 <main+0x13e>

00000cb6 <mpu6050_readByte>:
	printf("  ");
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/
}
     cb6:	cf 93       	push	r28
     cb8:	c8 2f       	mov	r28, r24
     cba:	80 ed       	ldi	r24, 0xD0	; 208
     cbc:	a9 d2       	rcall	.+1362   	; 0x1210 <i2c_start>
     cbe:	8c 2f       	mov	r24, r28
     cc0:	fd d2       	rcall	.+1530   	; 0x12bc <i2c_write>
     cc2:	ec d2       	rcall	.+1496   	; 0x129c <i2c_stop>
     cc4:	81 ed       	ldi	r24, 0xD1	; 209
     cc6:	a4 d2       	rcall	.+1352   	; 0x1210 <i2c_start>
     cc8:	34 d3       	rcall	.+1640   	; 0x1332 <i2c_readNak>
     cca:	c8 2f       	mov	r28, r24
     ccc:	e7 d2       	rcall	.+1486   	; 0x129c <i2c_stop>
     cce:	8c 2f       	mov	r24, r28
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <mpu6050_read_gyroX>:
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	83 e4       	ldi	r24, 0x43	; 67
     cda:	ed df       	rcall	.-38     	; 0xcb6 <mpu6050_readByte>
     cdc:	c8 2f       	mov	r28, r24
     cde:	d0 e0       	ldi	r29, 0x00	; 0
     ce0:	dc 2f       	mov	r29, r28
     ce2:	cc 27       	eor	r28, r28
     ce4:	84 e4       	ldi	r24, 0x44	; 68
     ce6:	e7 df       	rcall	.-50     	; 0xcb6 <mpu6050_readByte>
     ce8:	9e 01       	movw	r18, r28
     cea:	28 2b       	or	r18, r24
     cec:	c9 01       	movw	r24, r18
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	08 95       	ret

00000cf4 <mpu6050_read_gyroY>:
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	85 e4       	ldi	r24, 0x45	; 69
     cfa:	dd df       	rcall	.-70     	; 0xcb6 <mpu6050_readByte>
     cfc:	c8 2f       	mov	r28, r24
     cfe:	d0 e0       	ldi	r29, 0x00	; 0
     d00:	dc 2f       	mov	r29, r28
     d02:	cc 27       	eor	r28, r28
     d04:	86 e4       	ldi	r24, 0x46	; 70
     d06:	d7 df       	rcall	.-82     	; 0xcb6 <mpu6050_readByte>
     d08:	9e 01       	movw	r18, r28
     d0a:	28 2b       	or	r18, r24
     d0c:	c9 01       	movw	r24, r18
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	08 95       	ret

00000d14 <mpu6050_read_gyroZ>:
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	87 e4       	ldi	r24, 0x47	; 71
     d1a:	cd df       	rcall	.-102    	; 0xcb6 <mpu6050_readByte>
     d1c:	c8 2f       	mov	r28, r24
     d1e:	d0 e0       	ldi	r29, 0x00	; 0
     d20:	dc 2f       	mov	r29, r28
     d22:	cc 27       	eor	r28, r28
     d24:	88 e4       	ldi	r24, 0x48	; 72
     d26:	c7 df       	rcall	.-114    	; 0xcb6 <mpu6050_readByte>
     d28:	9e 01       	movw	r18, r28
     d2a:	28 2b       	or	r18, r24
     d2c:	c9 01       	movw	r24, r18
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	08 95       	ret

00000d34 <mpu6050_calibrate_gyro>:
     d34:	cf 92       	push	r12
     d36:	df 92       	push	r13
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	6c 01       	movw	r12, r24
     d46:	7b 01       	movw	r14, r22
     d48:	8a 01       	movw	r16, r20
     d4a:	83 eb       	ldi	r24, 0xB3	; 179
     d4c:	93 e0       	ldi	r25, 0x03	; 3
     d4e:	eb d7       	rcall	.+4054   	; 0x1d26 <puts>
     d50:	c8 ec       	ldi	r28, 0xC8	; 200
     d52:	d0 e0       	ldi	r29, 0x00	; 0
     d54:	bf df       	rcall	.-130    	; 0xcd4 <mpu6050_read_gyroX>
     d56:	f6 01       	movw	r30, r12
     d58:	40 81       	ld	r20, Z
     d5a:	51 81       	ldd	r21, Z+1	; 0x01
     d5c:	62 81       	ldd	r22, Z+2	; 0x02
     d5e:	73 81       	ldd	r23, Z+3	; 0x03
     d60:	48 0f       	add	r20, r24
     d62:	59 1f       	adc	r21, r25
     d64:	61 1d       	adc	r22, r1
     d66:	71 1d       	adc	r23, r1
     d68:	40 83       	st	Z, r20
     d6a:	51 83       	std	Z+1, r21	; 0x01
     d6c:	62 83       	std	Z+2, r22	; 0x02
     d6e:	73 83       	std	Z+3, r23	; 0x03
     d70:	c1 df       	rcall	.-126    	; 0xcf4 <mpu6050_read_gyroY>
     d72:	f7 01       	movw	r30, r14
     d74:	40 81       	ld	r20, Z
     d76:	51 81       	ldd	r21, Z+1	; 0x01
     d78:	62 81       	ldd	r22, Z+2	; 0x02
     d7a:	73 81       	ldd	r23, Z+3	; 0x03
     d7c:	48 0f       	add	r20, r24
     d7e:	59 1f       	adc	r21, r25
     d80:	61 1d       	adc	r22, r1
     d82:	71 1d       	adc	r23, r1
     d84:	40 83       	st	Z, r20
     d86:	51 83       	std	Z+1, r21	; 0x01
     d88:	62 83       	std	Z+2, r22	; 0x02
     d8a:	73 83       	std	Z+3, r23	; 0x03
     d8c:	c3 df       	rcall	.-122    	; 0xd14 <mpu6050_read_gyroZ>
     d8e:	f8 01       	movw	r30, r16
     d90:	40 81       	ld	r20, Z
     d92:	51 81       	ldd	r21, Z+1	; 0x01
     d94:	62 81       	ldd	r22, Z+2	; 0x02
     d96:	73 81       	ldd	r23, Z+3	; 0x03
     d98:	48 0f       	add	r20, r24
     d9a:	59 1f       	adc	r21, r25
     d9c:	61 1d       	adc	r22, r1
     d9e:	71 1d       	adc	r23, r1
     da0:	40 83       	st	Z, r20
     da2:	51 83       	std	Z+1, r21	; 0x01
     da4:	62 83       	std	Z+2, r22	; 0x02
     da6:	73 83       	std	Z+3, r23	; 0x03
     da8:	8f e3       	ldi	r24, 0x3F	; 63
     daa:	9f e1       	ldi	r25, 0x1F	; 31
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <mpu6050_calibrate_gyro+0x78>
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <mpu6050_calibrate_gyro+0x7e>
     db2:	00 00       	nop
     db4:	21 97       	sbiw	r28, 0x01	; 1
     db6:	71 f6       	brne	.-100    	; 0xd54 <mpu6050_calibrate_gyro+0x20>
     db8:	f6 01       	movw	r30, r12
     dba:	60 81       	ld	r22, Z
     dbc:	71 81       	ldd	r23, Z+1	; 0x01
     dbe:	82 81       	ldd	r24, Z+2	; 0x02
     dc0:	93 81       	ldd	r25, Z+3	; 0x03
     dc2:	99 23       	and	r25, r25
     dc4:	ac f4       	brge	.+42     	; 0xdf0 <mpu6050_calibrate_gyro+0xbc>
     dc6:	9b 01       	movw	r18, r22
     dc8:	77 23       	and	r23, r23
     dca:	24 f4       	brge	.+8      	; 0xdd4 <mpu6050_calibrate_gyro+0xa0>
     dcc:	22 27       	eor	r18, r18
     dce:	33 27       	eor	r19, r19
     dd0:	26 1b       	sub	r18, r22
     dd2:	37 0b       	sbc	r19, r23
     dd4:	c9 01       	movw	r24, r18
     dd6:	68 ec       	ldi	r22, 0xC8	; 200
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	b1 d6       	rcall	.+3426   	; 0x1b3e <__divmodhi4>
     ddc:	cb 01       	movw	r24, r22
     dde:	77 0f       	add	r23, r23
     de0:	aa 0b       	sbc	r26, r26
     de2:	bb 0b       	sbc	r27, r27
     de4:	f6 01       	movw	r30, r12
     de6:	80 83       	st	Z, r24
     de8:	91 83       	std	Z+1, r25	; 0x01
     dea:	a2 83       	std	Z+2, r26	; 0x02
     dec:	b3 83       	std	Z+3, r27	; 0x03
     dee:	0a c0       	rjmp	.+20     	; 0xe04 <mpu6050_calibrate_gyro+0xd0>
     df0:	28 ec       	ldi	r18, 0xC8	; 200
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	40 e0       	ldi	r20, 0x00	; 0
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	b5 d6       	rcall	.+3434   	; 0x1b64 <__divmodsi4>
     dfa:	f6 01       	movw	r30, r12
     dfc:	20 83       	st	Z, r18
     dfe:	31 83       	std	Z+1, r19	; 0x01
     e00:	42 83       	std	Z+2, r20	; 0x02
     e02:	53 83       	std	Z+3, r21	; 0x03
     e04:	f7 01       	movw	r30, r14
     e06:	60 81       	ld	r22, Z
     e08:	71 81       	ldd	r23, Z+1	; 0x01
     e0a:	82 81       	ldd	r24, Z+2	; 0x02
     e0c:	93 81       	ldd	r25, Z+3	; 0x03
     e0e:	99 23       	and	r25, r25
     e10:	ac f4       	brge	.+42     	; 0xe3c <mpu6050_calibrate_gyro+0x108>
     e12:	9b 01       	movw	r18, r22
     e14:	77 23       	and	r23, r23
     e16:	24 f4       	brge	.+8      	; 0xe20 <mpu6050_calibrate_gyro+0xec>
     e18:	22 27       	eor	r18, r18
     e1a:	33 27       	eor	r19, r19
     e1c:	26 1b       	sub	r18, r22
     e1e:	37 0b       	sbc	r19, r23
     e20:	c9 01       	movw	r24, r18
     e22:	68 ec       	ldi	r22, 0xC8	; 200
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	8b d6       	rcall	.+3350   	; 0x1b3e <__divmodhi4>
     e28:	cb 01       	movw	r24, r22
     e2a:	77 0f       	add	r23, r23
     e2c:	aa 0b       	sbc	r26, r26
     e2e:	bb 0b       	sbc	r27, r27
     e30:	f7 01       	movw	r30, r14
     e32:	80 83       	st	Z, r24
     e34:	91 83       	std	Z+1, r25	; 0x01
     e36:	a2 83       	std	Z+2, r26	; 0x02
     e38:	b3 83       	std	Z+3, r27	; 0x03
     e3a:	0a c0       	rjmp	.+20     	; 0xe50 <mpu6050_calibrate_gyro+0x11c>
     e3c:	28 ec       	ldi	r18, 0xC8	; 200
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	40 e0       	ldi	r20, 0x00	; 0
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	8f d6       	rcall	.+3358   	; 0x1b64 <__divmodsi4>
     e46:	f7 01       	movw	r30, r14
     e48:	20 83       	st	Z, r18
     e4a:	31 83       	std	Z+1, r19	; 0x01
     e4c:	42 83       	std	Z+2, r20	; 0x02
     e4e:	53 83       	std	Z+3, r21	; 0x03
     e50:	f8 01       	movw	r30, r16
     e52:	60 81       	ld	r22, Z
     e54:	71 81       	ldd	r23, Z+1	; 0x01
     e56:	82 81       	ldd	r24, Z+2	; 0x02
     e58:	93 81       	ldd	r25, Z+3	; 0x03
     e5a:	99 23       	and	r25, r25
     e5c:	ac f4       	brge	.+42     	; 0xe88 <mpu6050_calibrate_gyro+0x154>
     e5e:	9b 01       	movw	r18, r22
     e60:	77 23       	and	r23, r23
     e62:	24 f4       	brge	.+8      	; 0xe6c <mpu6050_calibrate_gyro+0x138>
     e64:	22 27       	eor	r18, r18
     e66:	33 27       	eor	r19, r19
     e68:	26 1b       	sub	r18, r22
     e6a:	37 0b       	sbc	r19, r23
     e6c:	c9 01       	movw	r24, r18
     e6e:	68 ec       	ldi	r22, 0xC8	; 200
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	65 d6       	rcall	.+3274   	; 0x1b3e <__divmodhi4>
     e74:	cb 01       	movw	r24, r22
     e76:	77 0f       	add	r23, r23
     e78:	aa 0b       	sbc	r26, r26
     e7a:	bb 0b       	sbc	r27, r27
     e7c:	f8 01       	movw	r30, r16
     e7e:	80 83       	st	Z, r24
     e80:	91 83       	std	Z+1, r25	; 0x01
     e82:	a2 83       	std	Z+2, r26	; 0x02
     e84:	b3 83       	std	Z+3, r27	; 0x03
     e86:	0a c0       	rjmp	.+20     	; 0xe9c <mpu6050_calibrate_gyro+0x168>
     e88:	28 ec       	ldi	r18, 0xC8	; 200
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	69 d6       	rcall	.+3282   	; 0x1b64 <__divmodsi4>
     e92:	f8 01       	movw	r30, r16
     e94:	20 83       	st	Z, r18
     e96:	31 83       	std	Z+1, r19	; 0x01
     e98:	42 83       	std	Z+2, r20	; 0x02
     e9a:	53 83       	std	Z+3, r21	; 0x03
     e9c:	89 ec       	ldi	r24, 0xC9	; 201
     e9e:	93 e0       	ldi	r25, 0x03	; 3
     ea0:	9f 93       	push	r25
     ea2:	8f 93       	push	r24
     ea4:	28 d7       	rcall	.+3664   	; 0x1cf6 <printf>
     ea6:	c6 01       	movw	r24, r12
     ea8:	69 d2       	rcall	.+1234   	; 0x137c <print16>
     eaa:	c1 ea       	ldi	r28, 0xA1	; 161
     eac:	d3 e0       	ldi	r29, 0x03	; 3
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	21 d7       	rcall	.+3650   	; 0x1cf6 <printf>
     eb4:	c7 01       	movw	r24, r14
     eb6:	62 d2       	rcall	.+1220   	; 0x137c <print16>
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	1c d7       	rcall	.+3640   	; 0x1cf6 <printf>
     ebe:	c8 01       	movw	r24, r16
     ec0:	83 d2       	rcall	.+1286   	; 0x13c8 <print16ln>
     ec2:	ef ef       	ldi	r30, 0xFF	; 255
     ec4:	f3 ed       	ldi	r31, 0xD3	; 211
     ec6:	20 e3       	ldi	r18, 0x30	; 48
     ec8:	e1 50       	subi	r30, 0x01	; 1
     eca:	f0 40       	sbci	r31, 0x00	; 0
     ecc:	20 40       	sbci	r18, 0x00	; 0
     ece:	e1 f7       	brne	.-8      	; 0xec8 <mpu6050_calibrate_gyro+0x194>
     ed0:	00 c0       	rjmp	.+0      	; 0xed2 <mpu6050_calibrate_gyro+0x19e>
     ed2:	00 00       	nop
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ff 90       	pop	r15
     eea:	ef 90       	pop	r14
     eec:	df 90       	pop	r13
     eee:	cf 90       	pop	r12
     ef0:	08 95       	ret

00000ef2 <mpu6050_writeByte>:
	uint8_t byteToReturn=i2c_readNak();
	i2c_stop();
	return byteToReturn;
}
void mpu6050_writeByte(uint8_t wereToWrite,uint8_t byteToWrite)//writebyte
{
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	d8 2f       	mov	r29, r24
     ef8:	c6 2f       	mov	r28, r22
	i2c_start(MPU6050_WRITE);
     efa:	80 ed       	ldi	r24, 0xD0	; 208
	i2c_write(wereToWrite);
	i2c_write(byteToWrite);
     efc:	89 d1       	rcall	.+786    	; 0x1210 <i2c_start>
     efe:	8d 2f       	mov	r24, r29
	i2c_stop();
     f00:	dd d1       	rcall	.+954    	; 0x12bc <i2c_write>
     f02:	8c 2f       	mov	r24, r28
}
     f04:	db d1       	rcall	.+950    	; 0x12bc <i2c_write>
     f06:	ca d1       	rcall	.+916    	; 0x129c <i2c_stop>
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	08 95       	ret

00000f0e <mpu6050_readBytes>:
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
     f0e:	af 92       	push	r10
     f10:	bf 92       	push	r11
     f12:	cf 92       	push	r12
     f14:	df 92       	push	r13
     f16:	ff 92       	push	r15
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
     f20:	66 23       	and	r22, r22
     f22:	89 f1       	breq	.+98     	; 0xf86 <mpu6050_readBytes+0x78>
     f24:	c5 2f       	mov	r28, r21
     f26:	d4 2f       	mov	r29, r20
     f28:	f6 2e       	mov	r15, r22
     f2a:	18 2f       	mov	r17, r24
		//request register
		i2c_start(MPU6050_WRITE);
     f2c:	80 ed       	ldi	r24, 0xD0	; 208
		i2c_write(regAddr);
     f2e:	70 d1       	rcall	.+736    	; 0x1210 <i2c_start>
     f30:	81 2f       	mov	r24, r17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f32:	c4 d1       	rcall	.+904    	; 0x12bc <i2c_write>
     f34:	85 e3       	ldi	r24, 0x35	; 53
     f36:	8a 95       	dec	r24
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
     f38:	f1 f7       	brne	.-4      	; 0xf36 <mpu6050_readBytes+0x28>
     f3a:	00 00       	nop
     f3c:	81 ed       	ldi	r24, 0xD1	; 209
     f3e:	68 d1       	rcall	.+720    	; 0x1210 <i2c_start>
     f40:	0d 2f       	mov	r16, r29
     f42:	1c 2f       	mov	r17, r28
     f44:	cc 24       	eor	r12, r12
     f46:	ca 94       	dec	r12
     f48:	cf 0c       	add	r12, r15
     f4a:	d1 2c       	mov	r13, r1
     f4c:	ef ef       	ldi	r30, 0xFF	; 255
     f4e:	ce 1a       	sub	r12, r30
     f50:	de 0a       	sbc	r13, r30
     f52:	c0 e0       	ldi	r28, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
     f54:	d0 e0       	ldi	r29, 0x00	; 0
     f56:	af 2c       	mov	r10, r15
     f58:	b1 2c       	mov	r11, r1
     f5a:	f1 e0       	ldi	r31, 0x01	; 1
     f5c:	af 1a       	sub	r10, r31
     f5e:	b1 08       	sbc	r11, r1
     f60:	ac 16       	cp	r10, r28
			data[i] = i2c_readNak();
     f62:	bd 06       	cpc	r11, r29
     f64:	21 f4       	brne	.+8      	; 0xf6e <mpu6050_readBytes+0x60>
     f66:	e5 d1       	rcall	.+970    	; 0x1332 <i2c_readNak>
     f68:	f8 01       	movw	r30, r16
			else
			data[i] = i2c_readAck();
     f6a:	80 83       	st	Z, r24
     f6c:	03 c0       	rjmp	.+6      	; 0xf74 <mpu6050_readBytes+0x66>
     f6e:	c7 d1       	rcall	.+910    	; 0x12fe <i2c_readAck>
     f70:	f8 01       	movw	r30, r16
     f72:	80 83       	st	Z, r24
     f74:	21 96       	adiw	r28, 0x01	; 1
		i2c_start(MPU6050_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
		for(i=0; i<length; i++) {
     f76:	0f 5f       	subi	r16, 0xFF	; 255
     f78:	1f 4f       	sbci	r17, 0xFF	; 255
     f7a:	cc 15       	cp	r28, r12
     f7c:	dd 05       	cpc	r29, r13
			if(i==length-1)
			data[i] = i2c_readNak();
			else
			data[i] = i2c_readAck();
		}
		i2c_stop();
     f7e:	81 f7       	brne	.-32     	; 0xf60 <mpu6050_readBytes+0x52>
     f80:	cf 2d       	mov	r28, r15
     f82:	8c d1       	rcall	.+792    	; 0x129c <i2c_stop>
	i2c_write(byteToWrite);
	i2c_stop();
}
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
	uint8_t i = 0;
	int8_t count = 0;
     f84:	01 c0       	rjmp	.+2      	; 0xf88 <mpu6050_readBytes+0x7a>
			data[i] = i2c_readAck();
		}
		i2c_stop();
	}
	return count;
}
     f86:	c0 e0       	ldi	r28, 0x00	; 0
     f88:	8c 2f       	mov	r24, r28
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	0f 91       	pop	r16
     f92:	ff 90       	pop	r15
     f94:	df 90       	pop	r13
     f96:	cf 90       	pop	r12
     f98:	bf 90       	pop	r11
     f9a:	af 90       	pop	r10
     f9c:	08 95       	ret

00000f9e <mpu6050_getRawData>:
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     f9e:	6f 92       	push	r6
     fa0:	7f 92       	push	r7
     fa2:	8f 92       	push	r8
     fa4:	9f 92       	push	r9
     fa6:	af 92       	push	r10
     fa8:	bf 92       	push	r11
     faa:	cf 92       	push	r12
     fac:	df 92       	push	r13
     fae:	ef 92       	push	r14
     fb0:	ff 92       	push	r15
     fb2:	0f 93       	push	r16
     fb4:	1f 93       	push	r17
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	2e 97       	sbiw	r28, 0x0e	; 14
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	cd bf       	out	0x3d, r28	; 61
     fca:	4c 01       	movw	r8, r24
     fcc:	5b 01       	movw	r10, r22
     fce:	6a 01       	movw	r12, r20
     fd0:	39 01       	movw	r6, r18
	uint8_t buffer[14];
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14,  buffer);
     fd2:	ae 01       	movw	r20, r28
     fd4:	4f 5f       	subi	r20, 0xFF	; 255
     fd6:	5f 4f       	sbci	r21, 0xFF	; 255
     fd8:	6e e0       	ldi	r22, 0x0E	; 14
     fda:	8b e3       	ldi	r24, 0x3B	; 59
     fdc:	98 df       	rcall	.-208    	; 0xf0e <mpu6050_readBytes>
	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	98 2f       	mov	r25, r24
     fe4:	88 27       	eor	r24, r24
     fe6:	2a 81       	ldd	r18, Y+2	; 0x02
     fe8:	82 2b       	or	r24, r18
     fea:	f4 01       	movw	r30, r8
     fec:	91 83       	std	Z+1, r25	; 0x01
     fee:	80 83       	st	Z, r24
	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	98 2f       	mov	r25, r24
     ff6:	88 27       	eor	r24, r24
     ff8:	2c 81       	ldd	r18, Y+4	; 0x04
     ffa:	82 2b       	or	r24, r18
     ffc:	f5 01       	movw	r30, r10
     ffe:	91 83       	std	Z+1, r25	; 0x01
    1000:	80 83       	st	Z, r24
	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
    1002:	8d 81       	ldd	r24, Y+5	; 0x05
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	98 2f       	mov	r25, r24
    1008:	88 27       	eor	r24, r24
    100a:	2e 81       	ldd	r18, Y+6	; 0x06
    100c:	82 2b       	or	r24, r18
    100e:	f6 01       	movw	r30, r12
    1010:	91 83       	std	Z+1, r25	; 0x01
    1012:	80 83       	st	Z, r24
	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    1014:	89 85       	ldd	r24, Y+9	; 0x09
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	98 2f       	mov	r25, r24
    101a:	88 27       	eor	r24, r24
    101c:	2a 85       	ldd	r18, Y+10	; 0x0a
    101e:	82 2b       	or	r24, r18
    1020:	f3 01       	movw	r30, r6
    1022:	91 83       	std	Z+1, r25	; 0x01
    1024:	80 83       	st	Z, r24
	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    1026:	8b 85       	ldd	r24, Y+11	; 0x0b
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	98 2f       	mov	r25, r24
    102c:	88 27       	eor	r24, r24
    102e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1030:	82 2b       	or	r24, r18
    1032:	f8 01       	movw	r30, r16
    1034:	91 83       	std	Z+1, r25	; 0x01
    1036:	80 83       	st	Z, r24
	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    1038:	8d 85       	ldd	r24, Y+13	; 0x0d
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	98 2f       	mov	r25, r24
    103e:	88 27       	eor	r24, r24
    1040:	2e 85       	ldd	r18, Y+14	; 0x0e
    1042:	82 2b       	or	r24, r18
    1044:	f7 01       	movw	r30, r14
    1046:	91 83       	std	Z+1, r25	; 0x01
    1048:	80 83       	st	Z, r24
    104a:	2e 96       	adiw	r28, 0x0e	; 14
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	de bf       	out	0x3e, r29	; 62
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	cd bf       	out	0x3d, r28	; 61
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	ff 90       	pop	r15
    1060:	ef 90       	pop	r14
    1062:	df 90       	pop	r13
    1064:	cf 90       	pop	r12
    1066:	bf 90       	pop	r11
    1068:	af 90       	pop	r10
    106a:	9f 90       	pop	r9
    106c:	8f 90       	pop	r8
    106e:	7f 90       	pop	r7
    1070:	6f 90       	pop	r6
    1072:	08 95       	ret

00001074 <setup_timer4>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    1074:	e1 ea       	ldi	r30, 0xA1	; 161
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	81 60       	ori	r24, 0x01	; 1
    107c:	80 83       	st	Z, r24
    107e:	e0 ea       	ldi	r30, 0xA0	; 160
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	81 60       	ori	r24, 0x01	; 1
    1086:	80 83       	st	Z, r24
    1088:	80 81       	ld	r24, Z
    108a:	80 68       	ori	r24, 0x80	; 128
    108c:	80 83       	st	Z, r24
    108e:	80 81       	ld	r24, Z
    1090:	80 62       	ori	r24, 0x20	; 32
    1092:	80 83       	st	Z, r24
    1094:	80 81       	ld	r24, Z
    1096:	88 60       	ori	r24, 0x08	; 8
    1098:	80 83       	st	Z, r24
    109a:	08 95       	ret

0000109c <setup_timer5>:
    109c:	e1 e2       	ldi	r30, 0x21	; 33
    109e:	f1 e0       	ldi	r31, 0x01	; 1
    10a0:	80 81       	ld	r24, Z
    10a2:	81 60       	ori	r24, 0x01	; 1
    10a4:	80 83       	st	Z, r24
    10a6:	80 81       	ld	r24, Z
    10a8:	88 60       	ori	r24, 0x08	; 8
    10aa:	80 83       	st	Z, r24
    10ac:	08 95       	ret

000010ae <Enable_timer5_compare_interrupt>:
    10ae:	e3 e7       	ldi	r30, 0x73	; 115
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	82 60       	ori	r24, 0x02	; 2
    10b6:	80 83       	st	Z, r24
    10b8:	08 95       	ret

000010ba <setup_timer0>:
    10ba:	85 b5       	in	r24, 0x25	; 37
    10bc:	81 60       	ori	r24, 0x01	; 1
    10be:	85 bd       	out	0x25, r24	; 37
    10c0:	85 b5       	in	r24, 0x25	; 37
    10c2:	82 60       	ori	r24, 0x02	; 2
    10c4:	85 bd       	out	0x25, r24	; 37
    10c6:	08 95       	ret

000010c8 <Enable_timer0_overflow_interrupt>:
    10c8:	ee e6       	ldi	r30, 0x6E	; 110
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	81 60       	ori	r24, 0x01	; 1
    10d0:	80 83       	st	Z, r24
    10d2:	08 95       	ret

000010d4 <micros>:
    10d4:	3f b7       	in	r19, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <timer0_overflow_count>
    10dc:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <timer0_overflow_count+0x1>
    10e0:	a0 91 01 04 	lds	r26, 0x0401	; 0x800401 <timer0_overflow_count+0x2>
    10e4:	b0 91 02 04 	lds	r27, 0x0402	; 0x800402 <timer0_overflow_count+0x3>
    10e8:	26 b5       	in	r18, 0x26	; 38
    10ea:	a8 9b       	sbis	0x15, 0	; 21
    10ec:	05 c0       	rjmp	.+10     	; 0x10f8 <micros+0x24>
    10ee:	2f 3f       	cpi	r18, 0xFF	; 255
    10f0:	19 f0       	breq	.+6      	; 0x10f8 <micros+0x24>
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	a1 1d       	adc	r26, r1
    10f6:	b1 1d       	adc	r27, r1
    10f8:	3f bf       	out	0x3f, r19	; 63
    10fa:	ba 2f       	mov	r27, r26
    10fc:	a9 2f       	mov	r26, r25
    10fe:	98 2f       	mov	r25, r24
    1100:	88 27       	eor	r24, r24
    1102:	82 0f       	add	r24, r18
    1104:	91 1d       	adc	r25, r1
    1106:	a1 1d       	adc	r26, r1
    1108:	b1 1d       	adc	r27, r1
    110a:	bc 01       	movw	r22, r24
    110c:	cd 01       	movw	r24, r26
    110e:	66 0f       	add	r22, r22
    1110:	77 1f       	adc	r23, r23
    1112:	88 1f       	adc	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	66 0f       	add	r22, r22
    1118:	77 1f       	adc	r23, r23
    111a:	88 1f       	adc	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	08 95       	ret

00001120 <__vector_23>:
ISR(TIMER0_OVF_vect)//10 microsecconed timer interrupt
{
    1120:	1f 92       	push	r1
    1122:	0f 92       	push	r0
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	0f 92       	push	r0
    1128:	11 24       	eor	r1, r1
    112a:	2f 93       	push	r18
    112c:	3f 93       	push	r19
    112e:	8f 93       	push	r24
    1130:	9f 93       	push	r25
    1132:	af 93       	push	r26
    1134:	bf 93       	push	r27
	unsigned long m = timer0_millis;
    1136:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <timer0_millis>
    113a:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <timer0_millis+0x1>
    113e:	a0 91 fd 03 	lds	r26, 0x03FD	; 0x8003fd <timer0_millis+0x2>
    1142:	b0 91 fe 03 	lds	r27, 0x03FE	; 0x8003fe <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1146:	30 91 fa 03 	lds	r19, 0x03FA	; 0x8003fa <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    114a:	23 e0       	ldi	r18, 0x03	; 3
    114c:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    114e:	2d 37       	cpi	r18, 0x7D	; 125
    1150:	20 f4       	brcc	.+8      	; 0x115a <__vector_23+0x3a>
ISR(TIMER0_OVF_vect)//10 microsecconed timer interrupt
{
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	a1 1d       	adc	r26, r1
    1156:	b1 1d       	adc	r27, r1
    1158:	05 c0       	rjmp	.+10     	; 0x1164 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    115a:	26 e8       	ldi	r18, 0x86	; 134
    115c:	23 0f       	add	r18, r19
		m += 1;
    115e:	02 96       	adiw	r24, 0x02	; 2
    1160:	a1 1d       	adc	r26, r1
    1162:	b1 1d       	adc	r27, r1
	}


	timer0_fract = f;
    1164:	20 93 fa 03 	sts	0x03FA, r18	; 0x8003fa <timer0_fract>
	timer0_millis = m;
    1168:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <timer0_millis>
    116c:	90 93 fc 03 	sts	0x03FC, r25	; 0x8003fc <timer0_millis+0x1>
    1170:	a0 93 fd 03 	sts	0x03FD, r26	; 0x8003fd <timer0_millis+0x2>
    1174:	b0 93 fe 03 	sts	0x03FE, r27	; 0x8003fe <timer0_millis+0x3>
	timer0_overflow_count++;
    1178:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <timer0_overflow_count>
    117c:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <timer0_overflow_count+0x1>
    1180:	a0 91 01 04 	lds	r26, 0x0401	; 0x800401 <timer0_overflow_count+0x2>
    1184:	b0 91 02 04 	lds	r27, 0x0402	; 0x800402 <timer0_overflow_count+0x3>
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	a1 1d       	adc	r26, r1
    118c:	b1 1d       	adc	r27, r1
    118e:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <timer0_overflow_count>
    1192:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <timer0_overflow_count+0x1>
    1196:	a0 93 01 04 	sts	0x0401, r26	; 0x800401 <timer0_overflow_count+0x2>
    119a:	b0 93 02 04 	sts	0x0402, r27	; 0x800402 <timer0_overflow_count+0x3>
}
    119e:	bf 91       	pop	r27
    11a0:	af 91       	pop	r26
    11a2:	9f 91       	pop	r25
    11a4:	8f 91       	pop	r24
    11a6:	3f 91       	pop	r19
    11a8:	2f 91       	pop	r18
    11aa:	0f 90       	pop	r0
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	0f 90       	pop	r0
    11b0:	1f 90       	pop	r1
    11b2:	18 95       	reti

000011b4 <__vector_47>:

ISR(TIMER5_COMPA_vect)//motor update interrupt routine
{
    11b4:	1f 92       	push	r1
    11b6:	0f 92       	push	r0
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	0f 92       	push	r0
    11bc:	11 24       	eor	r1, r1
    11be:	0b b6       	in	r0, 0x3b	; 59
    11c0:	0f 92       	push	r0
    11c2:	2f 93       	push	r18
    11c4:	3f 93       	push	r19
    11c6:	4f 93       	push	r20
    11c8:	5f 93       	push	r21
    11ca:	6f 93       	push	r22
    11cc:	7f 93       	push	r23
    11ce:	8f 93       	push	r24
    11d0:	9f 93       	push	r25
    11d2:	af 93       	push	r26
    11d4:	bf 93       	push	r27
    11d6:	ef 93       	push	r30
    11d8:	ff 93       	push	r31
	PWM_update();
    11da:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <PWM_update>
    11de:	ff 91       	pop	r31
    11e0:	ef 91       	pop	r30
    11e2:	bf 91       	pop	r27
    11e4:	af 91       	pop	r26
    11e6:	9f 91       	pop	r25
    11e8:	8f 91       	pop	r24
    11ea:	7f 91       	pop	r23
    11ec:	6f 91       	pop	r22
    11ee:	5f 91       	pop	r21
    11f0:	4f 91       	pop	r20
    11f2:	3f 91       	pop	r19
    11f4:	2f 91       	pop	r18
    11f6:	0f 90       	pop	r0
    11f8:	0b be       	out	0x3b, r0	; 59
    11fa:	0f 90       	pop	r0
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	0f 90       	pop	r0
    1200:	1f 90       	pop	r1
    1202:	18 95       	reti

00001204 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1204:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1208:	8c e0       	ldi	r24, 0x0C	; 12
    120a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    120e:	08 95       	ret

00001210 <i2c_start>:
    1210:	94 ea       	ldi	r25, 0xA4	; 164
    1212:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1216:	4f ef       	ldi	r20, 0xFF	; 255
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	ec eb       	ldi	r30, 0xBC	; 188
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	90 81       	ld	r25, Z
    1224:	99 23       	and	r25, r25
    1226:	34 f0       	brlt	.+12     	; 0x1234 <i2c_start+0x24>
    1228:	41 50       	subi	r20, 0x01	; 1
    122a:	51 09       	sbc	r21, r1
    122c:	61 09       	sbc	r22, r1
    122e:	71 09       	sbc	r23, r1
    1230:	c0 f7       	brcc	.-16     	; 0x1222 <i2c_start+0x12>
    1232:	04 c0       	rjmp	.+8      	; 0x123c <i2c_start+0x2c>
    1234:	45 2b       	or	r20, r21
    1236:	46 2b       	or	r20, r22
    1238:	47 2b       	or	r20, r23
    123a:	41 f1       	breq	.+80     	; 0x128c <i2c_start+0x7c>
    123c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1240:	98 7f       	andi	r25, 0xF8	; 248
    1242:	98 30       	cpi	r25, 0x08	; 8
    1244:	11 f0       	breq	.+4      	; 0x124a <i2c_start+0x3a>
    1246:	90 31       	cpi	r25, 0x10	; 16
    1248:	19 f5       	brne	.+70     	; 0x1290 <i2c_start+0x80>
    124a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    124e:	84 e8       	ldi	r24, 0x84	; 132
    1250:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1254:	8f ef       	ldi	r24, 0xFF	; 255
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	a0 e0       	ldi	r26, 0x00	; 0
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	ec eb       	ldi	r30, 0xBC	; 188
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	20 81       	ld	r18, Z
    1262:	22 23       	and	r18, r18
    1264:	2c f0       	brlt	.+10     	; 0x1270 <i2c_start+0x60>
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	a1 09       	sbc	r26, r1
    126a:	b1 09       	sbc	r27, r1
    126c:	c8 f7       	brcc	.-14     	; 0x1260 <i2c_start+0x50>
    126e:	04 c0       	rjmp	.+8      	; 0x1278 <i2c_start+0x68>
    1270:	89 2b       	or	r24, r25
    1272:	8a 2b       	or	r24, r26
    1274:	8b 2b       	or	r24, r27
    1276:	71 f0       	breq	.+28     	; 0x1294 <i2c_start+0x84>
    1278:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    127c:	98 7f       	andi	r25, 0xF8	; 248
    127e:	98 31       	cpi	r25, 0x18	; 24
    1280:	59 f0       	breq	.+22     	; 0x1298 <i2c_start+0x88>
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 34       	cpi	r25, 0x40	; 64
    1286:	49 f4       	brne	.+18     	; 0x129a <i2c_start+0x8a>
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	08 95       	ret
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	08 95       	ret
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	08 95       	ret
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	08 95       	ret
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	08 95       	ret

0000129c <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    129c:	84 e9       	ldi	r24, 0x94	; 148
    129e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	ec eb       	ldi	r30, 0xBC	; 188
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	20 81       	ld	r18, Z
    12ac:	24 ff       	sbrs	r18, 4
    12ae:	05 c0       	rjmp	.+10     	; 0x12ba <i2c_stop+0x1e>
    12b0:	01 96       	adiw	r24, 0x01	; 1
    12b2:	81 15       	cp	r24, r1
    12b4:	21 e0       	ldi	r18, 0x01	; 1
    12b6:	92 07       	cpc	r25, r18
    12b8:	c1 f7       	brne	.-16     	; 0x12aa <i2c_stop+0xe>
    12ba:	08 95       	ret

000012bc <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    12bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    12c0:	84 e8       	ldi	r24, 0x84	; 132
    12c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    12c6:	8f ef       	ldi	r24, 0xFF	; 255
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	a0 e0       	ldi	r26, 0x00	; 0
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    12ce:	ec eb       	ldi	r30, 0xBC	; 188
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	20 81       	ld	r18, Z
    12d4:	22 23       	and	r18, r18
    12d6:	2c f0       	brlt	.+10     	; 0x12e2 <i2c_write+0x26>
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	a1 09       	sbc	r26, r1
    12dc:	b1 09       	sbc	r27, r1
    12de:	c8 f7       	brcc	.-14     	; 0x12d2 <i2c_write+0x16>
    12e0:	04 c0       	rjmp	.+8      	; 0x12ea <i2c_write+0x2e>
	if(i2c_timer == 0)
    12e2:	89 2b       	or	r24, r25
    12e4:	8a 2b       	or	r24, r26
    12e6:	8b 2b       	or	r24, r27
    12e8:	41 f0       	breq	.+16     	; 0x12fa <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    12ea:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    12ee:	98 7f       	andi	r25, 0xF8	; 248
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	98 32       	cpi	r25, 0x28	; 40
    12f4:	19 f4       	brne	.+6      	; 0x12fc <i2c_write+0x40>
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	08 95       	ret
    12fa:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    12fc:	08 95       	ret

000012fe <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    12fe:	84 ec       	ldi	r24, 0xC4	; 196
    1300:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
    1304:	8f ef       	ldi	r24, 0xFF	; 255
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	a0 e0       	ldi	r26, 0x00	; 0
    130a:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    130c:	ec eb       	ldi	r30, 0xBC	; 188
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	20 81       	ld	r18, Z
    1312:	22 23       	and	r18, r18
    1314:	2c f0       	brlt	.+10     	; 0x1320 <i2c_readAck+0x22>
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	a1 09       	sbc	r26, r1
    131a:	b1 09       	sbc	r27, r1
    131c:	c8 f7       	brcc	.-14     	; 0x1310 <i2c_readAck+0x12>
    131e:	04 c0       	rjmp	.+8      	; 0x1328 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
    1320:	89 2b       	or	r24, r25
    1322:	8a 2b       	or	r24, r26
    1324:	8b 2b       	or	r24, r27
    1326:	19 f0       	breq	.+6      	; 0x132e <i2c_readAck+0x30>
		return 0;

    return TWDR;
    1328:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    132c:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    132e:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    1330:	08 95       	ret

00001332 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    1332:	84 e8       	ldi	r24, 0x84	; 132
    1334:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
    1338:	8f ef       	ldi	r24, 0xFF	; 255
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	a0 e0       	ldi	r26, 0x00	; 0
    133e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1340:	ec eb       	ldi	r30, 0xBC	; 188
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	20 81       	ld	r18, Z
    1346:	22 23       	and	r18, r18
    1348:	2c f0       	brlt	.+10     	; 0x1354 <i2c_readNak+0x22>
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	a1 09       	sbc	r26, r1
    134e:	b1 09       	sbc	r27, r1
    1350:	c8 f7       	brcc	.-14     	; 0x1344 <i2c_readNak+0x12>
    1352:	04 c0       	rjmp	.+8      	; 0x135c <i2c_readNak+0x2a>
	if(i2c_timer == 0)
    1354:	89 2b       	or	r24, r25
    1356:	8a 2b       	or	r24, r26
    1358:	8b 2b       	or	r24, r27
    135a:	19 f0       	breq	.+6      	; 0x1362 <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
    135c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1360:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    1362:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    1364:	08 95       	ret

00001366 <USART_Init>:
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
    1366:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    136a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    136e:	88 e0       	ldi	r24, 0x08	; 8
    1370:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1374:	8e e0       	ldi	r24, 0x0E	; 14
    1376:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    137a:	08 95       	ret

0000137c <print16>:
}
void print16(int16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	2a 97       	sbiw	r28, 0x0a	; 10
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
	char c[10];
	itoa(*value, c, 10);
    1394:	4a e0       	ldi	r20, 0x0A	; 10
    1396:	50 e0       	ldi	r21, 0x00	; 0
    1398:	8e 01       	movw	r16, r28
    139a:	0f 5f       	subi	r16, 0xFF	; 255
    139c:	1f 4f       	sbci	r17, 0xFF	; 255
    139e:	b8 01       	movw	r22, r16
    13a0:	fc 01       	movw	r30, r24
    13a2:	80 81       	ld	r24, Z
    13a4:	91 81       	ldd	r25, Z+1	; 0x01
    13a6:	30 d4       	rcall	.+2144   	; 0x1c08 <itoa>
	printf(c);
    13a8:	1f 93       	push	r17
    13aa:	0f 93       	push	r16
    13ac:	a4 d4       	rcall	.+2376   	; 0x1cf6 <printf>
	//printf("\n");
}
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	2a 96       	adiw	r28, 0x0a	; 10
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	1f 91       	pop	r17
    13c4:	0f 91       	pop	r16
    13c6:	08 95       	ret

000013c8 <print16ln>:

void print16ln(int16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	2a 97       	sbiw	r28, 0x0a	; 10
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
	char c[10];
	itoa(*value, c, 10);
    13e0:	4a e0       	ldi	r20, 0x0A	; 10
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	8e 01       	movw	r16, r28
    13e6:	0f 5f       	subi	r16, 0xFF	; 255
    13e8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ea:	b8 01       	movw	r22, r16
    13ec:	fc 01       	movw	r30, r24
    13ee:	80 81       	ld	r24, Z
    13f0:	91 81       	ldd	r25, Z+1	; 0x01
    13f2:	0a d4       	rcall	.+2068   	; 0x1c08 <itoa>
	printf(c);
    13f4:	1f 93       	push	r17
    13f6:	0f 93       	push	r16
	printf("\n");
    13f8:	7e d4       	rcall	.+2300   	; 0x1cf6 <printf>
    13fa:	8a e0       	ldi	r24, 0x0A	; 10
    13fc:	90 e0       	ldi	r25, 0x00	; 0
}
    13fe:	8e d4       	rcall	.+2332   	; 0x1d1c <putchar>
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	2a 96       	adiw	r28, 0x0a	; 10
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	08 95       	ret

0000141a <uart_putchar>:

int uart_putchar(char c, FILE *stream)
{
    141a:	cf 93       	push	r28
    141c:	c8 2f       	mov	r28, r24
	if (c == '\n')
    141e:	8a 30       	cpi	r24, 0x0A	; 10
    1420:	11 f4       	brne	.+4      	; 0x1426 <uart_putchar+0xc>
	uart_putchar('\r', stream);
    1422:	8d e0       	ldi	r24, 0x0D	; 13
    1424:	fa df       	rcall	.-12     	; 0x141a <uart_putchar>
	while (!( UCSR0A & (1<<UDRE0)));
    1426:	e0 ec       	ldi	r30, 0xC0	; 192
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	85 ff       	sbrs	r24, 5
    142e:	fd cf       	rjmp	.-6      	; 0x142a <uart_putchar+0x10>

	UDR0 = c;
    1430:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	return 0;
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	cf 91       	pop	r28
    143a:	08 95       	ret

0000143c <__subsf3>:
    143c:	50 58       	subi	r21, 0x80	; 128

0000143e <__addsf3>:
    143e:	bb 27       	eor	r27, r27
    1440:	aa 27       	eor	r26, r26
    1442:	0e d0       	rcall	.+28     	; 0x1460 <__addsf3x>
    1444:	3b c2       	rjmp	.+1142   	; 0x18bc <__fp_round>
    1446:	2c d2       	rcall	.+1112   	; 0x18a0 <__fp_pscA>
    1448:	30 f0       	brcs	.+12     	; 0x1456 <__addsf3+0x18>
    144a:	31 d2       	rcall	.+1122   	; 0x18ae <__fp_pscB>
    144c:	20 f0       	brcs	.+8      	; 0x1456 <__addsf3+0x18>
    144e:	31 f4       	brne	.+12     	; 0x145c <__addsf3+0x1e>
    1450:	9f 3f       	cpi	r25, 0xFF	; 255
    1452:	11 f4       	brne	.+4      	; 0x1458 <__addsf3+0x1a>
    1454:	1e f4       	brtc	.+6      	; 0x145c <__addsf3+0x1e>
    1456:	eb c1       	rjmp	.+982    	; 0x182e <__fp_nan>
    1458:	0e f4       	brtc	.+2      	; 0x145c <__addsf3+0x1e>
    145a:	e0 95       	com	r30
    145c:	e7 fb       	bst	r30, 7
    145e:	e1 c1       	rjmp	.+962    	; 0x1822 <__fp_inf>

00001460 <__addsf3x>:
    1460:	e9 2f       	mov	r30, r25
    1462:	3d d2       	rcall	.+1146   	; 0x18de <__fp_split3>
    1464:	80 f3       	brcs	.-32     	; 0x1446 <__addsf3+0x8>
    1466:	ba 17       	cp	r27, r26
    1468:	62 07       	cpc	r22, r18
    146a:	73 07       	cpc	r23, r19
    146c:	84 07       	cpc	r24, r20
    146e:	95 07       	cpc	r25, r21
    1470:	18 f0       	brcs	.+6      	; 0x1478 <__addsf3x+0x18>
    1472:	71 f4       	brne	.+28     	; 0x1490 <__addsf3x+0x30>
    1474:	9e f5       	brtc	.+102    	; 0x14dc <__addsf3x+0x7c>
    1476:	55 c2       	rjmp	.+1194   	; 0x1922 <__fp_zero>
    1478:	0e f4       	brtc	.+2      	; 0x147c <__addsf3x+0x1c>
    147a:	e0 95       	com	r30
    147c:	0b 2e       	mov	r0, r27
    147e:	ba 2f       	mov	r27, r26
    1480:	a0 2d       	mov	r26, r0
    1482:	0b 01       	movw	r0, r22
    1484:	b9 01       	movw	r22, r18
    1486:	90 01       	movw	r18, r0
    1488:	0c 01       	movw	r0, r24
    148a:	ca 01       	movw	r24, r20
    148c:	a0 01       	movw	r20, r0
    148e:	11 24       	eor	r1, r1
    1490:	ff 27       	eor	r31, r31
    1492:	59 1b       	sub	r21, r25
    1494:	99 f0       	breq	.+38     	; 0x14bc <__addsf3x+0x5c>
    1496:	59 3f       	cpi	r21, 0xF9	; 249
    1498:	50 f4       	brcc	.+20     	; 0x14ae <__addsf3x+0x4e>
    149a:	50 3e       	cpi	r21, 0xE0	; 224
    149c:	68 f1       	brcs	.+90     	; 0x14f8 <__addsf3x+0x98>
    149e:	1a 16       	cp	r1, r26
    14a0:	f0 40       	sbci	r31, 0x00	; 0
    14a2:	a2 2f       	mov	r26, r18
    14a4:	23 2f       	mov	r18, r19
    14a6:	34 2f       	mov	r19, r20
    14a8:	44 27       	eor	r20, r20
    14aa:	58 5f       	subi	r21, 0xF8	; 248
    14ac:	f3 cf       	rjmp	.-26     	; 0x1494 <__addsf3x+0x34>
    14ae:	46 95       	lsr	r20
    14b0:	37 95       	ror	r19
    14b2:	27 95       	ror	r18
    14b4:	a7 95       	ror	r26
    14b6:	f0 40       	sbci	r31, 0x00	; 0
    14b8:	53 95       	inc	r21
    14ba:	c9 f7       	brne	.-14     	; 0x14ae <__addsf3x+0x4e>
    14bc:	7e f4       	brtc	.+30     	; 0x14dc <__addsf3x+0x7c>
    14be:	1f 16       	cp	r1, r31
    14c0:	ba 0b       	sbc	r27, r26
    14c2:	62 0b       	sbc	r22, r18
    14c4:	73 0b       	sbc	r23, r19
    14c6:	84 0b       	sbc	r24, r20
    14c8:	ba f0       	brmi	.+46     	; 0x14f8 <__addsf3x+0x98>
    14ca:	91 50       	subi	r25, 0x01	; 1
    14cc:	a1 f0       	breq	.+40     	; 0x14f6 <__addsf3x+0x96>
    14ce:	ff 0f       	add	r31, r31
    14d0:	bb 1f       	adc	r27, r27
    14d2:	66 1f       	adc	r22, r22
    14d4:	77 1f       	adc	r23, r23
    14d6:	88 1f       	adc	r24, r24
    14d8:	c2 f7       	brpl	.-16     	; 0x14ca <__addsf3x+0x6a>
    14da:	0e c0       	rjmp	.+28     	; 0x14f8 <__addsf3x+0x98>
    14dc:	ba 0f       	add	r27, r26
    14de:	62 1f       	adc	r22, r18
    14e0:	73 1f       	adc	r23, r19
    14e2:	84 1f       	adc	r24, r20
    14e4:	48 f4       	brcc	.+18     	; 0x14f8 <__addsf3x+0x98>
    14e6:	87 95       	ror	r24
    14e8:	77 95       	ror	r23
    14ea:	67 95       	ror	r22
    14ec:	b7 95       	ror	r27
    14ee:	f7 95       	ror	r31
    14f0:	9e 3f       	cpi	r25, 0xFE	; 254
    14f2:	08 f0       	brcs	.+2      	; 0x14f6 <__addsf3x+0x96>
    14f4:	b3 cf       	rjmp	.-154    	; 0x145c <__addsf3+0x1e>
    14f6:	93 95       	inc	r25
    14f8:	88 0f       	add	r24, r24
    14fa:	08 f0       	brcs	.+2      	; 0x14fe <__addsf3x+0x9e>
    14fc:	99 27       	eor	r25, r25
    14fe:	ee 0f       	add	r30, r30
    1500:	97 95       	ror	r25
    1502:	87 95       	ror	r24
    1504:	08 95       	ret

00001506 <asin>:
    1506:	9f 93       	push	r25
    1508:	9f 77       	andi	r25, 0x7F	; 127
    150a:	ee e3       	ldi	r30, 0x3E	; 62
    150c:	89 37       	cpi	r24, 0x79	; 121
    150e:	9e 07       	cpc	r25, r30
    1510:	20 f4       	brcc	.+8      	; 0x151a <asin+0x14>
    1512:	e4 ee       	ldi	r30, 0xE4	; 228
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	b3 d1       	rcall	.+870    	; 0x187e <__fp_powsodd>
    1518:	09 c0       	rjmp	.+18     	; 0x152c <asin+0x26>
    151a:	44 d1       	rcall	.+648    	; 0x17a4 <__fp_arccos>
    151c:	90 58       	subi	r25, 0x80	; 128
    151e:	a2 ea       	ldi	r26, 0xA2	; 162
    1520:	2a ed       	ldi	r18, 0xDA	; 218
    1522:	3f e0       	ldi	r19, 0x0F	; 15
    1524:	49 ec       	ldi	r20, 0xC9	; 201
    1526:	5f e3       	ldi	r21, 0x3F	; 63
    1528:	9b df       	rcall	.-202    	; 0x1460 <__addsf3x>
    152a:	c8 d1       	rcall	.+912    	; 0x18bc <__fp_round>
    152c:	0f 90       	pop	r0
    152e:	07 fc       	sbrc	r0, 7
    1530:	90 58       	subi	r25, 0x80	; 128
    1532:	08 95       	ret
    1534:	b5 d1       	rcall	.+874    	; 0x18a0 <__fp_pscA>
    1536:	58 f0       	brcs	.+22     	; 0x154e <asin+0x48>
    1538:	80 e8       	ldi	r24, 0x80	; 128
    153a:	91 e0       	ldi	r25, 0x01	; 1
    153c:	09 f4       	brne	.+2      	; 0x1540 <asin+0x3a>
    153e:	9e ef       	ldi	r25, 0xFE	; 254
    1540:	b6 d1       	rcall	.+876    	; 0x18ae <__fp_pscB>
    1542:	28 f0       	brcs	.+10     	; 0x154e <asin+0x48>
    1544:	40 e8       	ldi	r20, 0x80	; 128
    1546:	51 e0       	ldi	r21, 0x01	; 1
    1548:	59 f4       	brne	.+22     	; 0x1560 <atan2+0xe>
    154a:	5e ef       	ldi	r21, 0xFE	; 254
    154c:	09 c0       	rjmp	.+18     	; 0x1560 <atan2+0xe>
    154e:	6f c1       	rjmp	.+734    	; 0x182e <__fp_nan>
    1550:	e8 c1       	rjmp	.+976    	; 0x1922 <__fp_zero>

00001552 <atan2>:
    1552:	e9 2f       	mov	r30, r25
    1554:	e0 78       	andi	r30, 0x80	; 128
    1556:	c3 d1       	rcall	.+902    	; 0x18de <__fp_split3>
    1558:	68 f3       	brcs	.-38     	; 0x1534 <asin+0x2e>
    155a:	09 2e       	mov	r0, r25
    155c:	05 2a       	or	r0, r21
    155e:	c1 f3       	breq	.-16     	; 0x1550 <asin+0x4a>
    1560:	26 17       	cp	r18, r22
    1562:	37 07       	cpc	r19, r23
    1564:	48 07       	cpc	r20, r24
    1566:	59 07       	cpc	r21, r25
    1568:	38 f0       	brcs	.+14     	; 0x1578 <atan2+0x26>
    156a:	0e 2e       	mov	r0, r30
    156c:	07 f8       	bld	r0, 7
    156e:	e0 25       	eor	r30, r0
    1570:	69 f0       	breq	.+26     	; 0x158c <atan2+0x3a>
    1572:	e0 25       	eor	r30, r0
    1574:	e0 64       	ori	r30, 0x40	; 64
    1576:	0a c0       	rjmp	.+20     	; 0x158c <atan2+0x3a>
    1578:	ef 63       	ori	r30, 0x3F	; 63
    157a:	07 f8       	bld	r0, 7
    157c:	00 94       	com	r0
    157e:	07 fa       	bst	r0, 7
    1580:	db 01       	movw	r26, r22
    1582:	b9 01       	movw	r22, r18
    1584:	9d 01       	movw	r18, r26
    1586:	dc 01       	movw	r26, r24
    1588:	ca 01       	movw	r24, r20
    158a:	ad 01       	movw	r20, r26
    158c:	ef 93       	push	r30
    158e:	43 d0       	rcall	.+134    	; 0x1616 <__divsf3_pse>
    1590:	95 d1       	rcall	.+810    	; 0x18bc <__fp_round>
    1592:	0a d0       	rcall	.+20     	; 0x15a8 <atan>
    1594:	5f 91       	pop	r21
    1596:	55 23       	and	r21, r21
    1598:	31 f0       	breq	.+12     	; 0x15a6 <atan2+0x54>
    159a:	2b ed       	ldi	r18, 0xDB	; 219
    159c:	3f e0       	ldi	r19, 0x0F	; 15
    159e:	49 e4       	ldi	r20, 0x49	; 73
    15a0:	50 fd       	sbrc	r21, 0
    15a2:	49 ec       	ldi	r20, 0xC9	; 201
    15a4:	4c cf       	rjmp	.-360    	; 0x143e <__addsf3>
    15a6:	08 95       	ret

000015a8 <atan>:
    15a8:	df 93       	push	r29
    15aa:	dd 27       	eor	r29, r29
    15ac:	b9 2f       	mov	r27, r25
    15ae:	bf 77       	andi	r27, 0x7F	; 127
    15b0:	40 e8       	ldi	r20, 0x80	; 128
    15b2:	5f e3       	ldi	r21, 0x3F	; 63
    15b4:	16 16       	cp	r1, r22
    15b6:	17 06       	cpc	r1, r23
    15b8:	48 07       	cpc	r20, r24
    15ba:	5b 07       	cpc	r21, r27
    15bc:	10 f4       	brcc	.+4      	; 0x15c2 <atan+0x1a>
    15be:	d9 2f       	mov	r29, r25
    15c0:	bb d1       	rcall	.+886    	; 0x1938 <inverse>
    15c2:	9f 93       	push	r25
    15c4:	8f 93       	push	r24
    15c6:	7f 93       	push	r23
    15c8:	6f 93       	push	r22
    15ca:	68 d2       	rcall	.+1232   	; 0x1a9c <square>
    15cc:	e8 ef       	ldi	r30, 0xF8	; 248
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	31 d1       	rcall	.+610    	; 0x1834 <__fp_powser>
    15d2:	74 d1       	rcall	.+744    	; 0x18bc <__fp_round>
    15d4:	2f 91       	pop	r18
    15d6:	3f 91       	pop	r19
    15d8:	4f 91       	pop	r20
    15da:	5f 91       	pop	r21
    15dc:	c0 d1       	rcall	.+896    	; 0x195e <__mulsf3x>
    15de:	dd 23       	and	r29, r29
    15e0:	49 f0       	breq	.+18     	; 0x15f4 <atan+0x4c>
    15e2:	90 58       	subi	r25, 0x80	; 128
    15e4:	a2 ea       	ldi	r26, 0xA2	; 162
    15e6:	2a ed       	ldi	r18, 0xDA	; 218
    15e8:	3f e0       	ldi	r19, 0x0F	; 15
    15ea:	49 ec       	ldi	r20, 0xC9	; 201
    15ec:	5f e3       	ldi	r21, 0x3F	; 63
    15ee:	d0 78       	andi	r29, 0x80	; 128
    15f0:	5d 27       	eor	r21, r29
    15f2:	36 df       	rcall	.-404    	; 0x1460 <__addsf3x>
    15f4:	df 91       	pop	r29
    15f6:	62 c1       	rjmp	.+708    	; 0x18bc <__fp_round>

000015f8 <__divsf3>:
    15f8:	0c d0       	rcall	.+24     	; 0x1612 <__divsf3x>
    15fa:	60 c1       	rjmp	.+704    	; 0x18bc <__fp_round>
    15fc:	58 d1       	rcall	.+688    	; 0x18ae <__fp_pscB>
    15fe:	40 f0       	brcs	.+16     	; 0x1610 <__divsf3+0x18>
    1600:	4f d1       	rcall	.+670    	; 0x18a0 <__fp_pscA>
    1602:	30 f0       	brcs	.+12     	; 0x1610 <__divsf3+0x18>
    1604:	21 f4       	brne	.+8      	; 0x160e <__divsf3+0x16>
    1606:	5f 3f       	cpi	r21, 0xFF	; 255
    1608:	19 f0       	breq	.+6      	; 0x1610 <__divsf3+0x18>
    160a:	0b c1       	rjmp	.+534    	; 0x1822 <__fp_inf>
    160c:	51 11       	cpse	r21, r1
    160e:	8a c1       	rjmp	.+788    	; 0x1924 <__fp_szero>
    1610:	0e c1       	rjmp	.+540    	; 0x182e <__fp_nan>

00001612 <__divsf3x>:
    1612:	65 d1       	rcall	.+714    	; 0x18de <__fp_split3>
    1614:	98 f3       	brcs	.-26     	; 0x15fc <__divsf3+0x4>

00001616 <__divsf3_pse>:
    1616:	99 23       	and	r25, r25
    1618:	c9 f3       	breq	.-14     	; 0x160c <__divsf3+0x14>
    161a:	55 23       	and	r21, r21
    161c:	b1 f3       	breq	.-20     	; 0x160a <__divsf3+0x12>
    161e:	95 1b       	sub	r25, r21
    1620:	55 0b       	sbc	r21, r21
    1622:	bb 27       	eor	r27, r27
    1624:	aa 27       	eor	r26, r26
    1626:	62 17       	cp	r22, r18
    1628:	73 07       	cpc	r23, r19
    162a:	84 07       	cpc	r24, r20
    162c:	38 f0       	brcs	.+14     	; 0x163c <__divsf3_pse+0x26>
    162e:	9f 5f       	subi	r25, 0xFF	; 255
    1630:	5f 4f       	sbci	r21, 0xFF	; 255
    1632:	22 0f       	add	r18, r18
    1634:	33 1f       	adc	r19, r19
    1636:	44 1f       	adc	r20, r20
    1638:	aa 1f       	adc	r26, r26
    163a:	a9 f3       	breq	.-22     	; 0x1626 <__divsf3_pse+0x10>
    163c:	33 d0       	rcall	.+102    	; 0x16a4 <__divsf3_pse+0x8e>
    163e:	0e 2e       	mov	r0, r30
    1640:	3a f0       	brmi	.+14     	; 0x1650 <__divsf3_pse+0x3a>
    1642:	e0 e8       	ldi	r30, 0x80	; 128
    1644:	30 d0       	rcall	.+96     	; 0x16a6 <__divsf3_pse+0x90>
    1646:	91 50       	subi	r25, 0x01	; 1
    1648:	50 40       	sbci	r21, 0x00	; 0
    164a:	e6 95       	lsr	r30
    164c:	00 1c       	adc	r0, r0
    164e:	ca f7       	brpl	.-14     	; 0x1642 <__divsf3_pse+0x2c>
    1650:	29 d0       	rcall	.+82     	; 0x16a4 <__divsf3_pse+0x8e>
    1652:	fe 2f       	mov	r31, r30
    1654:	27 d0       	rcall	.+78     	; 0x16a4 <__divsf3_pse+0x8e>
    1656:	66 0f       	add	r22, r22
    1658:	77 1f       	adc	r23, r23
    165a:	88 1f       	adc	r24, r24
    165c:	bb 1f       	adc	r27, r27
    165e:	26 17       	cp	r18, r22
    1660:	37 07       	cpc	r19, r23
    1662:	48 07       	cpc	r20, r24
    1664:	ab 07       	cpc	r26, r27
    1666:	b0 e8       	ldi	r27, 0x80	; 128
    1668:	09 f0       	breq	.+2      	; 0x166c <__divsf3_pse+0x56>
    166a:	bb 0b       	sbc	r27, r27
    166c:	80 2d       	mov	r24, r0
    166e:	bf 01       	movw	r22, r30
    1670:	ff 27       	eor	r31, r31
    1672:	93 58       	subi	r25, 0x83	; 131
    1674:	5f 4f       	sbci	r21, 0xFF	; 255
    1676:	2a f0       	brmi	.+10     	; 0x1682 <__divsf3_pse+0x6c>
    1678:	9e 3f       	cpi	r25, 0xFE	; 254
    167a:	51 05       	cpc	r21, r1
    167c:	68 f0       	brcs	.+26     	; 0x1698 <__divsf3_pse+0x82>
    167e:	d1 c0       	rjmp	.+418    	; 0x1822 <__fp_inf>
    1680:	51 c1       	rjmp	.+674    	; 0x1924 <__fp_szero>
    1682:	5f 3f       	cpi	r21, 0xFF	; 255
    1684:	ec f3       	brlt	.-6      	; 0x1680 <__divsf3_pse+0x6a>
    1686:	98 3e       	cpi	r25, 0xE8	; 232
    1688:	dc f3       	brlt	.-10     	; 0x1680 <__divsf3_pse+0x6a>
    168a:	86 95       	lsr	r24
    168c:	77 95       	ror	r23
    168e:	67 95       	ror	r22
    1690:	b7 95       	ror	r27
    1692:	f7 95       	ror	r31
    1694:	9f 5f       	subi	r25, 0xFF	; 255
    1696:	c9 f7       	brne	.-14     	; 0x168a <__divsf3_pse+0x74>
    1698:	88 0f       	add	r24, r24
    169a:	91 1d       	adc	r25, r1
    169c:	96 95       	lsr	r25
    169e:	87 95       	ror	r24
    16a0:	97 f9       	bld	r25, 7
    16a2:	08 95       	ret
    16a4:	e1 e0       	ldi	r30, 0x01	; 1
    16a6:	66 0f       	add	r22, r22
    16a8:	77 1f       	adc	r23, r23
    16aa:	88 1f       	adc	r24, r24
    16ac:	bb 1f       	adc	r27, r27
    16ae:	62 17       	cp	r22, r18
    16b0:	73 07       	cpc	r23, r19
    16b2:	84 07       	cpc	r24, r20
    16b4:	ba 07       	cpc	r27, r26
    16b6:	20 f0       	brcs	.+8      	; 0x16c0 <__divsf3_pse+0xaa>
    16b8:	62 1b       	sub	r22, r18
    16ba:	73 0b       	sbc	r23, r19
    16bc:	84 0b       	sbc	r24, r20
    16be:	ba 0b       	sbc	r27, r26
    16c0:	ee 1f       	adc	r30, r30
    16c2:	88 f7       	brcc	.-30     	; 0x16a6 <__divsf3_pse+0x90>
    16c4:	e0 95       	com	r30
    16c6:	08 95       	ret

000016c8 <__fixsfsi>:
    16c8:	04 d0       	rcall	.+8      	; 0x16d2 <__fixunssfsi>
    16ca:	68 94       	set
    16cc:	b1 11       	cpse	r27, r1
    16ce:	2a c1       	rjmp	.+596    	; 0x1924 <__fp_szero>
    16d0:	08 95       	ret

000016d2 <__fixunssfsi>:
    16d2:	0d d1       	rcall	.+538    	; 0x18ee <__fp_splitA>
    16d4:	88 f0       	brcs	.+34     	; 0x16f8 <__fixunssfsi+0x26>
    16d6:	9f 57       	subi	r25, 0x7F	; 127
    16d8:	90 f0       	brcs	.+36     	; 0x16fe <__fixunssfsi+0x2c>
    16da:	b9 2f       	mov	r27, r25
    16dc:	99 27       	eor	r25, r25
    16de:	b7 51       	subi	r27, 0x17	; 23
    16e0:	a0 f0       	brcs	.+40     	; 0x170a <__fixunssfsi+0x38>
    16e2:	d1 f0       	breq	.+52     	; 0x1718 <__fixunssfsi+0x46>
    16e4:	66 0f       	add	r22, r22
    16e6:	77 1f       	adc	r23, r23
    16e8:	88 1f       	adc	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	1a f0       	brmi	.+6      	; 0x16f4 <__fixunssfsi+0x22>
    16ee:	ba 95       	dec	r27
    16f0:	c9 f7       	brne	.-14     	; 0x16e4 <__fixunssfsi+0x12>
    16f2:	12 c0       	rjmp	.+36     	; 0x1718 <__fixunssfsi+0x46>
    16f4:	b1 30       	cpi	r27, 0x01	; 1
    16f6:	81 f0       	breq	.+32     	; 0x1718 <__fixunssfsi+0x46>
    16f8:	14 d1       	rcall	.+552    	; 0x1922 <__fp_zero>
    16fa:	b1 e0       	ldi	r27, 0x01	; 1
    16fc:	08 95       	ret
    16fe:	11 c1       	rjmp	.+546    	; 0x1922 <__fp_zero>
    1700:	67 2f       	mov	r22, r23
    1702:	78 2f       	mov	r23, r24
    1704:	88 27       	eor	r24, r24
    1706:	b8 5f       	subi	r27, 0xF8	; 248
    1708:	39 f0       	breq	.+14     	; 0x1718 <__fixunssfsi+0x46>
    170a:	b9 3f       	cpi	r27, 0xF9	; 249
    170c:	cc f3       	brlt	.-14     	; 0x1700 <__fixunssfsi+0x2e>
    170e:	86 95       	lsr	r24
    1710:	77 95       	ror	r23
    1712:	67 95       	ror	r22
    1714:	b3 95       	inc	r27
    1716:	d9 f7       	brne	.-10     	; 0x170e <__fixunssfsi+0x3c>
    1718:	3e f4       	brtc	.+14     	; 0x1728 <__fixunssfsi+0x56>
    171a:	90 95       	com	r25
    171c:	80 95       	com	r24
    171e:	70 95       	com	r23
    1720:	61 95       	neg	r22
    1722:	7f 4f       	sbci	r23, 0xFF	; 255
    1724:	8f 4f       	sbci	r24, 0xFF	; 255
    1726:	9f 4f       	sbci	r25, 0xFF	; 255
    1728:	08 95       	ret

0000172a <__floatunsisf>:
    172a:	e8 94       	clt
    172c:	09 c0       	rjmp	.+18     	; 0x1740 <__floatsisf+0x12>

0000172e <__floatsisf>:
    172e:	97 fb       	bst	r25, 7
    1730:	3e f4       	brtc	.+14     	; 0x1740 <__floatsisf+0x12>
    1732:	90 95       	com	r25
    1734:	80 95       	com	r24
    1736:	70 95       	com	r23
    1738:	61 95       	neg	r22
    173a:	7f 4f       	sbci	r23, 0xFF	; 255
    173c:	8f 4f       	sbci	r24, 0xFF	; 255
    173e:	9f 4f       	sbci	r25, 0xFF	; 255
    1740:	99 23       	and	r25, r25
    1742:	a9 f0       	breq	.+42     	; 0x176e <__floatsisf+0x40>
    1744:	f9 2f       	mov	r31, r25
    1746:	96 e9       	ldi	r25, 0x96	; 150
    1748:	bb 27       	eor	r27, r27
    174a:	93 95       	inc	r25
    174c:	f6 95       	lsr	r31
    174e:	87 95       	ror	r24
    1750:	77 95       	ror	r23
    1752:	67 95       	ror	r22
    1754:	b7 95       	ror	r27
    1756:	f1 11       	cpse	r31, r1
    1758:	f8 cf       	rjmp	.-16     	; 0x174a <__floatsisf+0x1c>
    175a:	fa f4       	brpl	.+62     	; 0x179a <__floatsisf+0x6c>
    175c:	bb 0f       	add	r27, r27
    175e:	11 f4       	brne	.+4      	; 0x1764 <__floatsisf+0x36>
    1760:	60 ff       	sbrs	r22, 0
    1762:	1b c0       	rjmp	.+54     	; 0x179a <__floatsisf+0x6c>
    1764:	6f 5f       	subi	r22, 0xFF	; 255
    1766:	7f 4f       	sbci	r23, 0xFF	; 255
    1768:	8f 4f       	sbci	r24, 0xFF	; 255
    176a:	9f 4f       	sbci	r25, 0xFF	; 255
    176c:	16 c0       	rjmp	.+44     	; 0x179a <__floatsisf+0x6c>
    176e:	88 23       	and	r24, r24
    1770:	11 f0       	breq	.+4      	; 0x1776 <__floatsisf+0x48>
    1772:	96 e9       	ldi	r25, 0x96	; 150
    1774:	11 c0       	rjmp	.+34     	; 0x1798 <__floatsisf+0x6a>
    1776:	77 23       	and	r23, r23
    1778:	21 f0       	breq	.+8      	; 0x1782 <__floatsisf+0x54>
    177a:	9e e8       	ldi	r25, 0x8E	; 142
    177c:	87 2f       	mov	r24, r23
    177e:	76 2f       	mov	r23, r22
    1780:	05 c0       	rjmp	.+10     	; 0x178c <__floatsisf+0x5e>
    1782:	66 23       	and	r22, r22
    1784:	71 f0       	breq	.+28     	; 0x17a2 <__floatsisf+0x74>
    1786:	96 e8       	ldi	r25, 0x86	; 134
    1788:	86 2f       	mov	r24, r22
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	2a f0       	brmi	.+10     	; 0x179a <__floatsisf+0x6c>
    1790:	9a 95       	dec	r25
    1792:	66 0f       	add	r22, r22
    1794:	77 1f       	adc	r23, r23
    1796:	88 1f       	adc	r24, r24
    1798:	da f7       	brpl	.-10     	; 0x1790 <__floatsisf+0x62>
    179a:	88 0f       	add	r24, r24
    179c:	96 95       	lsr	r25
    179e:	87 95       	ror	r24
    17a0:	97 f9       	bld	r25, 7
    17a2:	08 95       	ret

000017a4 <__fp_arccos>:
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	1f 93       	push	r17
    17aa:	0f 93       	push	r16
    17ac:	8b 01       	movw	r16, r22
    17ae:	ec 01       	movw	r28, r24
    17b0:	e5 e2       	ldi	r30, 0x25	; 37
    17b2:	f1 e0       	ldi	r31, 0x01	; 1
    17b4:	3f d0       	rcall	.+126    	; 0x1834 <__fp_powser>
    17b6:	82 d0       	rcall	.+260    	; 0x18bc <__fp_round>
    17b8:	98 01       	movw	r18, r16
    17ba:	ae 01       	movw	r20, r28
    17bc:	8b 01       	movw	r16, r22
    17be:	ec 01       	movw	r28, r24
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	70 e0       	ldi	r23, 0x00	; 0
    17c4:	80 e8       	ldi	r24, 0x80	; 128
    17c6:	9f e3       	ldi	r25, 0x3F	; 63
    17c8:	39 de       	rcall	.-910    	; 0x143c <__subsf3>
    17ca:	2a d1       	rcall	.+596    	; 0x1a20 <sqrt>
    17cc:	98 01       	movw	r18, r16
    17ce:	ae 01       	movw	r20, r28
    17d0:	0f 91       	pop	r16
    17d2:	1f 91       	pop	r17
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	c2 c0       	rjmp	.+388    	; 0x195e <__mulsf3x>

000017da <__fp_cmp>:
    17da:	99 0f       	add	r25, r25
    17dc:	00 08       	sbc	r0, r0
    17de:	55 0f       	add	r21, r21
    17e0:	aa 0b       	sbc	r26, r26
    17e2:	e0 e8       	ldi	r30, 0x80	; 128
    17e4:	fe ef       	ldi	r31, 0xFE	; 254
    17e6:	16 16       	cp	r1, r22
    17e8:	17 06       	cpc	r1, r23
    17ea:	e8 07       	cpc	r30, r24
    17ec:	f9 07       	cpc	r31, r25
    17ee:	c0 f0       	brcs	.+48     	; 0x1820 <__fp_cmp+0x46>
    17f0:	12 16       	cp	r1, r18
    17f2:	13 06       	cpc	r1, r19
    17f4:	e4 07       	cpc	r30, r20
    17f6:	f5 07       	cpc	r31, r21
    17f8:	98 f0       	brcs	.+38     	; 0x1820 <__fp_cmp+0x46>
    17fa:	62 1b       	sub	r22, r18
    17fc:	73 0b       	sbc	r23, r19
    17fe:	84 0b       	sbc	r24, r20
    1800:	95 0b       	sbc	r25, r21
    1802:	39 f4       	brne	.+14     	; 0x1812 <__fp_cmp+0x38>
    1804:	0a 26       	eor	r0, r26
    1806:	61 f0       	breq	.+24     	; 0x1820 <__fp_cmp+0x46>
    1808:	23 2b       	or	r18, r19
    180a:	24 2b       	or	r18, r20
    180c:	25 2b       	or	r18, r21
    180e:	21 f4       	brne	.+8      	; 0x1818 <__fp_cmp+0x3e>
    1810:	08 95       	ret
    1812:	0a 26       	eor	r0, r26
    1814:	09 f4       	brne	.+2      	; 0x1818 <__fp_cmp+0x3e>
    1816:	a1 40       	sbci	r26, 0x01	; 1
    1818:	a6 95       	lsr	r26
    181a:	8f ef       	ldi	r24, 0xFF	; 255
    181c:	81 1d       	adc	r24, r1
    181e:	81 1d       	adc	r24, r1
    1820:	08 95       	ret

00001822 <__fp_inf>:
    1822:	97 f9       	bld	r25, 7
    1824:	9f 67       	ori	r25, 0x7F	; 127
    1826:	80 e8       	ldi	r24, 0x80	; 128
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	08 95       	ret

0000182e <__fp_nan>:
    182e:	9f ef       	ldi	r25, 0xFF	; 255
    1830:	80 ec       	ldi	r24, 0xC0	; 192
    1832:	08 95       	ret

00001834 <__fp_powser>:
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	1f 93       	push	r17
    183a:	0f 93       	push	r16
    183c:	ff 92       	push	r15
    183e:	ef 92       	push	r14
    1840:	df 92       	push	r13
    1842:	7b 01       	movw	r14, r22
    1844:	8c 01       	movw	r16, r24
    1846:	68 94       	set
    1848:	05 c0       	rjmp	.+10     	; 0x1854 <__fp_powser+0x20>
    184a:	da 2e       	mov	r13, r26
    184c:	ef 01       	movw	r28, r30
    184e:	87 d0       	rcall	.+270    	; 0x195e <__mulsf3x>
    1850:	fe 01       	movw	r30, r28
    1852:	e8 94       	clt
    1854:	a5 91       	lpm	r26, Z+
    1856:	25 91       	lpm	r18, Z+
    1858:	35 91       	lpm	r19, Z+
    185a:	45 91       	lpm	r20, Z+
    185c:	55 91       	lpm	r21, Z+
    185e:	ae f3       	brts	.-22     	; 0x184a <__fp_powser+0x16>
    1860:	ef 01       	movw	r28, r30
    1862:	fe dd       	rcall	.-1028   	; 0x1460 <__addsf3x>
    1864:	fe 01       	movw	r30, r28
    1866:	97 01       	movw	r18, r14
    1868:	a8 01       	movw	r20, r16
    186a:	da 94       	dec	r13
    186c:	79 f7       	brne	.-34     	; 0x184c <__fp_powser+0x18>
    186e:	df 90       	pop	r13
    1870:	ef 90       	pop	r14
    1872:	ff 90       	pop	r15
    1874:	0f 91       	pop	r16
    1876:	1f 91       	pop	r17
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <__fp_powsodd>:
    187e:	9f 93       	push	r25
    1880:	8f 93       	push	r24
    1882:	7f 93       	push	r23
    1884:	6f 93       	push	r22
    1886:	ff 93       	push	r31
    1888:	ef 93       	push	r30
    188a:	9b 01       	movw	r18, r22
    188c:	ac 01       	movw	r20, r24
    188e:	5b d0       	rcall	.+182    	; 0x1946 <__mulsf3>
    1890:	ef 91       	pop	r30
    1892:	ff 91       	pop	r31
    1894:	cf df       	rcall	.-98     	; 0x1834 <__fp_powser>
    1896:	2f 91       	pop	r18
    1898:	3f 91       	pop	r19
    189a:	4f 91       	pop	r20
    189c:	5f 91       	pop	r21
    189e:	53 c0       	rjmp	.+166    	; 0x1946 <__mulsf3>

000018a0 <__fp_pscA>:
    18a0:	00 24       	eor	r0, r0
    18a2:	0a 94       	dec	r0
    18a4:	16 16       	cp	r1, r22
    18a6:	17 06       	cpc	r1, r23
    18a8:	18 06       	cpc	r1, r24
    18aa:	09 06       	cpc	r0, r25
    18ac:	08 95       	ret

000018ae <__fp_pscB>:
    18ae:	00 24       	eor	r0, r0
    18b0:	0a 94       	dec	r0
    18b2:	12 16       	cp	r1, r18
    18b4:	13 06       	cpc	r1, r19
    18b6:	14 06       	cpc	r1, r20
    18b8:	05 06       	cpc	r0, r21
    18ba:	08 95       	ret

000018bc <__fp_round>:
    18bc:	09 2e       	mov	r0, r25
    18be:	03 94       	inc	r0
    18c0:	00 0c       	add	r0, r0
    18c2:	11 f4       	brne	.+4      	; 0x18c8 <__fp_round+0xc>
    18c4:	88 23       	and	r24, r24
    18c6:	52 f0       	brmi	.+20     	; 0x18dc <__fp_round+0x20>
    18c8:	bb 0f       	add	r27, r27
    18ca:	40 f4       	brcc	.+16     	; 0x18dc <__fp_round+0x20>
    18cc:	bf 2b       	or	r27, r31
    18ce:	11 f4       	brne	.+4      	; 0x18d4 <__fp_round+0x18>
    18d0:	60 ff       	sbrs	r22, 0
    18d2:	04 c0       	rjmp	.+8      	; 0x18dc <__fp_round+0x20>
    18d4:	6f 5f       	subi	r22, 0xFF	; 255
    18d6:	7f 4f       	sbci	r23, 0xFF	; 255
    18d8:	8f 4f       	sbci	r24, 0xFF	; 255
    18da:	9f 4f       	sbci	r25, 0xFF	; 255
    18dc:	08 95       	ret

000018de <__fp_split3>:
    18de:	57 fd       	sbrc	r21, 7
    18e0:	90 58       	subi	r25, 0x80	; 128
    18e2:	44 0f       	add	r20, r20
    18e4:	55 1f       	adc	r21, r21
    18e6:	59 f0       	breq	.+22     	; 0x18fe <__fp_splitA+0x10>
    18e8:	5f 3f       	cpi	r21, 0xFF	; 255
    18ea:	71 f0       	breq	.+28     	; 0x1908 <__fp_splitA+0x1a>
    18ec:	47 95       	ror	r20

000018ee <__fp_splitA>:
    18ee:	88 0f       	add	r24, r24
    18f0:	97 fb       	bst	r25, 7
    18f2:	99 1f       	adc	r25, r25
    18f4:	61 f0       	breq	.+24     	; 0x190e <__fp_splitA+0x20>
    18f6:	9f 3f       	cpi	r25, 0xFF	; 255
    18f8:	79 f0       	breq	.+30     	; 0x1918 <__fp_splitA+0x2a>
    18fa:	87 95       	ror	r24
    18fc:	08 95       	ret
    18fe:	12 16       	cp	r1, r18
    1900:	13 06       	cpc	r1, r19
    1902:	14 06       	cpc	r1, r20
    1904:	55 1f       	adc	r21, r21
    1906:	f2 cf       	rjmp	.-28     	; 0x18ec <__fp_split3+0xe>
    1908:	46 95       	lsr	r20
    190a:	f1 df       	rcall	.-30     	; 0x18ee <__fp_splitA>
    190c:	08 c0       	rjmp	.+16     	; 0x191e <__fp_splitA+0x30>
    190e:	16 16       	cp	r1, r22
    1910:	17 06       	cpc	r1, r23
    1912:	18 06       	cpc	r1, r24
    1914:	99 1f       	adc	r25, r25
    1916:	f1 cf       	rjmp	.-30     	; 0x18fa <__fp_splitA+0xc>
    1918:	86 95       	lsr	r24
    191a:	71 05       	cpc	r23, r1
    191c:	61 05       	cpc	r22, r1
    191e:	08 94       	sec
    1920:	08 95       	ret

00001922 <__fp_zero>:
    1922:	e8 94       	clt

00001924 <__fp_szero>:
    1924:	bb 27       	eor	r27, r27
    1926:	66 27       	eor	r22, r22
    1928:	77 27       	eor	r23, r23
    192a:	cb 01       	movw	r24, r22
    192c:	97 f9       	bld	r25, 7
    192e:	08 95       	ret

00001930 <__gesf2>:
    1930:	54 df       	rcall	.-344    	; 0x17da <__fp_cmp>
    1932:	08 f4       	brcc	.+2      	; 0x1936 <__gesf2+0x6>
    1934:	8f ef       	ldi	r24, 0xFF	; 255
    1936:	08 95       	ret

00001938 <inverse>:
    1938:	9b 01       	movw	r18, r22
    193a:	ac 01       	movw	r20, r24
    193c:	60 e0       	ldi	r22, 0x00	; 0
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	80 e8       	ldi	r24, 0x80	; 128
    1942:	9f e3       	ldi	r25, 0x3F	; 63
    1944:	59 ce       	rjmp	.-846    	; 0x15f8 <__divsf3>

00001946 <__mulsf3>:
    1946:	0b d0       	rcall	.+22     	; 0x195e <__mulsf3x>
    1948:	b9 cf       	rjmp	.-142    	; 0x18bc <__fp_round>
    194a:	aa df       	rcall	.-172    	; 0x18a0 <__fp_pscA>
    194c:	28 f0       	brcs	.+10     	; 0x1958 <__mulsf3+0x12>
    194e:	af df       	rcall	.-162    	; 0x18ae <__fp_pscB>
    1950:	18 f0       	brcs	.+6      	; 0x1958 <__mulsf3+0x12>
    1952:	95 23       	and	r25, r21
    1954:	09 f0       	breq	.+2      	; 0x1958 <__mulsf3+0x12>
    1956:	65 cf       	rjmp	.-310    	; 0x1822 <__fp_inf>
    1958:	6a cf       	rjmp	.-300    	; 0x182e <__fp_nan>
    195a:	11 24       	eor	r1, r1
    195c:	e3 cf       	rjmp	.-58     	; 0x1924 <__fp_szero>

0000195e <__mulsf3x>:
    195e:	bf df       	rcall	.-130    	; 0x18de <__fp_split3>
    1960:	a0 f3       	brcs	.-24     	; 0x194a <__mulsf3+0x4>

00001962 <__mulsf3_pse>:
    1962:	95 9f       	mul	r25, r21
    1964:	d1 f3       	breq	.-12     	; 0x195a <__mulsf3+0x14>
    1966:	95 0f       	add	r25, r21
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	55 1f       	adc	r21, r21
    196c:	62 9f       	mul	r22, r18
    196e:	f0 01       	movw	r30, r0
    1970:	72 9f       	mul	r23, r18
    1972:	bb 27       	eor	r27, r27
    1974:	f0 0d       	add	r31, r0
    1976:	b1 1d       	adc	r27, r1
    1978:	63 9f       	mul	r22, r19
    197a:	aa 27       	eor	r26, r26
    197c:	f0 0d       	add	r31, r0
    197e:	b1 1d       	adc	r27, r1
    1980:	aa 1f       	adc	r26, r26
    1982:	64 9f       	mul	r22, r20
    1984:	66 27       	eor	r22, r22
    1986:	b0 0d       	add	r27, r0
    1988:	a1 1d       	adc	r26, r1
    198a:	66 1f       	adc	r22, r22
    198c:	82 9f       	mul	r24, r18
    198e:	22 27       	eor	r18, r18
    1990:	b0 0d       	add	r27, r0
    1992:	a1 1d       	adc	r26, r1
    1994:	62 1f       	adc	r22, r18
    1996:	73 9f       	mul	r23, r19
    1998:	b0 0d       	add	r27, r0
    199a:	a1 1d       	adc	r26, r1
    199c:	62 1f       	adc	r22, r18
    199e:	83 9f       	mul	r24, r19
    19a0:	a0 0d       	add	r26, r0
    19a2:	61 1d       	adc	r22, r1
    19a4:	22 1f       	adc	r18, r18
    19a6:	74 9f       	mul	r23, r20
    19a8:	33 27       	eor	r19, r19
    19aa:	a0 0d       	add	r26, r0
    19ac:	61 1d       	adc	r22, r1
    19ae:	23 1f       	adc	r18, r19
    19b0:	84 9f       	mul	r24, r20
    19b2:	60 0d       	add	r22, r0
    19b4:	21 1d       	adc	r18, r1
    19b6:	82 2f       	mov	r24, r18
    19b8:	76 2f       	mov	r23, r22
    19ba:	6a 2f       	mov	r22, r26
    19bc:	11 24       	eor	r1, r1
    19be:	9f 57       	subi	r25, 0x7F	; 127
    19c0:	50 40       	sbci	r21, 0x00	; 0
    19c2:	8a f0       	brmi	.+34     	; 0x19e6 <__mulsf3_pse+0x84>
    19c4:	e1 f0       	breq	.+56     	; 0x19fe <__mulsf3_pse+0x9c>
    19c6:	88 23       	and	r24, r24
    19c8:	4a f0       	brmi	.+18     	; 0x19dc <__mulsf3_pse+0x7a>
    19ca:	ee 0f       	add	r30, r30
    19cc:	ff 1f       	adc	r31, r31
    19ce:	bb 1f       	adc	r27, r27
    19d0:	66 1f       	adc	r22, r22
    19d2:	77 1f       	adc	r23, r23
    19d4:	88 1f       	adc	r24, r24
    19d6:	91 50       	subi	r25, 0x01	; 1
    19d8:	50 40       	sbci	r21, 0x00	; 0
    19da:	a9 f7       	brne	.-22     	; 0x19c6 <__mulsf3_pse+0x64>
    19dc:	9e 3f       	cpi	r25, 0xFE	; 254
    19de:	51 05       	cpc	r21, r1
    19e0:	70 f0       	brcs	.+28     	; 0x19fe <__mulsf3_pse+0x9c>
    19e2:	1f cf       	rjmp	.-450    	; 0x1822 <__fp_inf>
    19e4:	9f cf       	rjmp	.-194    	; 0x1924 <__fp_szero>
    19e6:	5f 3f       	cpi	r21, 0xFF	; 255
    19e8:	ec f3       	brlt	.-6      	; 0x19e4 <__mulsf3_pse+0x82>
    19ea:	98 3e       	cpi	r25, 0xE8	; 232
    19ec:	dc f3       	brlt	.-10     	; 0x19e4 <__mulsf3_pse+0x82>
    19ee:	86 95       	lsr	r24
    19f0:	77 95       	ror	r23
    19f2:	67 95       	ror	r22
    19f4:	b7 95       	ror	r27
    19f6:	f7 95       	ror	r31
    19f8:	e7 95       	ror	r30
    19fa:	9f 5f       	subi	r25, 0xFF	; 255
    19fc:	c1 f7       	brne	.-16     	; 0x19ee <__mulsf3_pse+0x8c>
    19fe:	fe 2b       	or	r31, r30
    1a00:	88 0f       	add	r24, r24
    1a02:	91 1d       	adc	r25, r1
    1a04:	96 95       	lsr	r25
    1a06:	87 95       	ror	r24
    1a08:	97 f9       	bld	r25, 7
    1a0a:	08 95       	ret

00001a0c <sin>:
    1a0c:	9f 93       	push	r25
    1a0e:	5f d0       	rcall	.+190    	; 0x1ace <__fp_rempio2>
    1a10:	0f 90       	pop	r0
    1a12:	07 fc       	sbrc	r0, 7
    1a14:	ee 5f       	subi	r30, 0xFE	; 254
    1a16:	82 c0       	rjmp	.+260    	; 0x1b1c <__fp_sinus>
    1a18:	11 f4       	brne	.+4      	; 0x1a1e <sin+0x12>
    1a1a:	0e f4       	brtc	.+2      	; 0x1a1e <sin+0x12>
    1a1c:	08 cf       	rjmp	.-496    	; 0x182e <__fp_nan>
    1a1e:	41 c0       	rjmp	.+130    	; 0x1aa2 <__fp_mpack>

00001a20 <sqrt>:
    1a20:	66 df       	rcall	.-308    	; 0x18ee <__fp_splitA>
    1a22:	d0 f3       	brcs	.-12     	; 0x1a18 <sin+0xc>
    1a24:	99 23       	and	r25, r25
    1a26:	d9 f3       	breq	.-10     	; 0x1a1e <sin+0x12>
    1a28:	ce f3       	brts	.-14     	; 0x1a1c <sin+0x10>
    1a2a:	9f 57       	subi	r25, 0x7F	; 127
    1a2c:	55 0b       	sbc	r21, r21
    1a2e:	87 ff       	sbrs	r24, 7
    1a30:	46 d0       	rcall	.+140    	; 0x1abe <__fp_norm2>
    1a32:	00 24       	eor	r0, r0
    1a34:	a0 e6       	ldi	r26, 0x60	; 96
    1a36:	40 ea       	ldi	r20, 0xA0	; 160
    1a38:	90 01       	movw	r18, r0
    1a3a:	80 58       	subi	r24, 0x80	; 128
    1a3c:	56 95       	lsr	r21
    1a3e:	97 95       	ror	r25
    1a40:	28 f4       	brcc	.+10     	; 0x1a4c <sqrt+0x2c>
    1a42:	80 5c       	subi	r24, 0xC0	; 192
    1a44:	66 0f       	add	r22, r22
    1a46:	77 1f       	adc	r23, r23
    1a48:	88 1f       	adc	r24, r24
    1a4a:	20 f0       	brcs	.+8      	; 0x1a54 <sqrt+0x34>
    1a4c:	26 17       	cp	r18, r22
    1a4e:	37 07       	cpc	r19, r23
    1a50:	48 07       	cpc	r20, r24
    1a52:	30 f4       	brcc	.+12     	; 0x1a60 <sqrt+0x40>
    1a54:	62 1b       	sub	r22, r18
    1a56:	73 0b       	sbc	r23, r19
    1a58:	84 0b       	sbc	r24, r20
    1a5a:	20 29       	or	r18, r0
    1a5c:	31 29       	or	r19, r1
    1a5e:	4a 2b       	or	r20, r26
    1a60:	a6 95       	lsr	r26
    1a62:	17 94       	ror	r1
    1a64:	07 94       	ror	r0
    1a66:	20 25       	eor	r18, r0
    1a68:	31 25       	eor	r19, r1
    1a6a:	4a 27       	eor	r20, r26
    1a6c:	58 f7       	brcc	.-42     	; 0x1a44 <sqrt+0x24>
    1a6e:	66 0f       	add	r22, r22
    1a70:	77 1f       	adc	r23, r23
    1a72:	88 1f       	adc	r24, r24
    1a74:	20 f0       	brcs	.+8      	; 0x1a7e <sqrt+0x5e>
    1a76:	26 17       	cp	r18, r22
    1a78:	37 07       	cpc	r19, r23
    1a7a:	48 07       	cpc	r20, r24
    1a7c:	30 f4       	brcc	.+12     	; 0x1a8a <sqrt+0x6a>
    1a7e:	62 0b       	sbc	r22, r18
    1a80:	73 0b       	sbc	r23, r19
    1a82:	84 0b       	sbc	r24, r20
    1a84:	20 0d       	add	r18, r0
    1a86:	31 1d       	adc	r19, r1
    1a88:	41 1d       	adc	r20, r1
    1a8a:	a0 95       	com	r26
    1a8c:	81 f7       	brne	.-32     	; 0x1a6e <sqrt+0x4e>
    1a8e:	b9 01       	movw	r22, r18
    1a90:	84 2f       	mov	r24, r20
    1a92:	91 58       	subi	r25, 0x81	; 129
    1a94:	88 0f       	add	r24, r24
    1a96:	96 95       	lsr	r25
    1a98:	87 95       	ror	r24
    1a9a:	08 95       	ret

00001a9c <square>:
    1a9c:	9b 01       	movw	r18, r22
    1a9e:	ac 01       	movw	r20, r24
    1aa0:	52 cf       	rjmp	.-348    	; 0x1946 <__mulsf3>

00001aa2 <__fp_mpack>:
    1aa2:	9f 3f       	cpi	r25, 0xFF	; 255
    1aa4:	31 f0       	breq	.+12     	; 0x1ab2 <__fp_mpack_finite+0xc>

00001aa6 <__fp_mpack_finite>:
    1aa6:	91 50       	subi	r25, 0x01	; 1
    1aa8:	20 f4       	brcc	.+8      	; 0x1ab2 <__fp_mpack_finite+0xc>
    1aaa:	87 95       	ror	r24
    1aac:	77 95       	ror	r23
    1aae:	67 95       	ror	r22
    1ab0:	b7 95       	ror	r27
    1ab2:	88 0f       	add	r24, r24
    1ab4:	91 1d       	adc	r25, r1
    1ab6:	96 95       	lsr	r25
    1ab8:	87 95       	ror	r24
    1aba:	97 f9       	bld	r25, 7
    1abc:	08 95       	ret

00001abe <__fp_norm2>:
    1abe:	91 50       	subi	r25, 0x01	; 1
    1ac0:	50 40       	sbci	r21, 0x00	; 0
    1ac2:	66 0f       	add	r22, r22
    1ac4:	77 1f       	adc	r23, r23
    1ac6:	88 1f       	adc	r24, r24
    1ac8:	d2 f7       	brpl	.-12     	; 0x1abe <__fp_norm2>
    1aca:	08 95       	ret
    1acc:	b0 ce       	rjmp	.-672    	; 0x182e <__fp_nan>

00001ace <__fp_rempio2>:
    1ace:	0f df       	rcall	.-482    	; 0x18ee <__fp_splitA>
    1ad0:	e8 f3       	brcs	.-6      	; 0x1acc <__fp_norm2+0xe>
    1ad2:	e8 94       	clt
    1ad4:	e0 e0       	ldi	r30, 0x00	; 0
    1ad6:	bb 27       	eor	r27, r27
    1ad8:	9f 57       	subi	r25, 0x7F	; 127
    1ada:	f0 f0       	brcs	.+60     	; 0x1b18 <__fp_rempio2+0x4a>
    1adc:	2a ed       	ldi	r18, 0xDA	; 218
    1ade:	3f e0       	ldi	r19, 0x0F	; 15
    1ae0:	49 ec       	ldi	r20, 0xC9	; 201
    1ae2:	06 c0       	rjmp	.+12     	; 0x1af0 <__fp_rempio2+0x22>
    1ae4:	ee 0f       	add	r30, r30
    1ae6:	bb 0f       	add	r27, r27
    1ae8:	66 1f       	adc	r22, r22
    1aea:	77 1f       	adc	r23, r23
    1aec:	88 1f       	adc	r24, r24
    1aee:	28 f0       	brcs	.+10     	; 0x1afa <__fp_rempio2+0x2c>
    1af0:	b2 3a       	cpi	r27, 0xA2	; 162
    1af2:	62 07       	cpc	r22, r18
    1af4:	73 07       	cpc	r23, r19
    1af6:	84 07       	cpc	r24, r20
    1af8:	28 f0       	brcs	.+10     	; 0x1b04 <__fp_rempio2+0x36>
    1afa:	b2 5a       	subi	r27, 0xA2	; 162
    1afc:	62 0b       	sbc	r22, r18
    1afe:	73 0b       	sbc	r23, r19
    1b00:	84 0b       	sbc	r24, r20
    1b02:	e3 95       	inc	r30
    1b04:	9a 95       	dec	r25
    1b06:	72 f7       	brpl	.-36     	; 0x1ae4 <__fp_rempio2+0x16>
    1b08:	80 38       	cpi	r24, 0x80	; 128
    1b0a:	30 f4       	brcc	.+12     	; 0x1b18 <__fp_rempio2+0x4a>
    1b0c:	9a 95       	dec	r25
    1b0e:	bb 0f       	add	r27, r27
    1b10:	66 1f       	adc	r22, r22
    1b12:	77 1f       	adc	r23, r23
    1b14:	88 1f       	adc	r24, r24
    1b16:	d2 f7       	brpl	.-12     	; 0x1b0c <__fp_rempio2+0x3e>
    1b18:	90 48       	sbci	r25, 0x80	; 128
    1b1a:	c5 cf       	rjmp	.-118    	; 0x1aa6 <__fp_mpack_finite>

00001b1c <__fp_sinus>:
    1b1c:	ef 93       	push	r30
    1b1e:	e0 ff       	sbrs	r30, 0
    1b20:	06 c0       	rjmp	.+12     	; 0x1b2e <__fp_sinus+0x12>
    1b22:	a2 ea       	ldi	r26, 0xA2	; 162
    1b24:	2a ed       	ldi	r18, 0xDA	; 218
    1b26:	3f e0       	ldi	r19, 0x0F	; 15
    1b28:	49 ec       	ldi	r20, 0xC9	; 201
    1b2a:	5f eb       	ldi	r21, 0xBF	; 191
    1b2c:	99 dc       	rcall	.-1742   	; 0x1460 <__addsf3x>
    1b2e:	c6 de       	rcall	.-628    	; 0x18bc <__fp_round>
    1b30:	0f 90       	pop	r0
    1b32:	03 94       	inc	r0
    1b34:	01 fc       	sbrc	r0, 1
    1b36:	90 58       	subi	r25, 0x80	; 128
    1b38:	ed e4       	ldi	r30, 0x4D	; 77
    1b3a:	f1 e0       	ldi	r31, 0x01	; 1
    1b3c:	a0 ce       	rjmp	.-704    	; 0x187e <__fp_powsodd>

00001b3e <__divmodhi4>:
    1b3e:	97 fb       	bst	r25, 7
    1b40:	07 2e       	mov	r0, r23
    1b42:	16 f4       	brtc	.+4      	; 0x1b48 <__divmodhi4+0xa>
    1b44:	00 94       	com	r0
    1b46:	06 d0       	rcall	.+12     	; 0x1b54 <__divmodhi4_neg1>
    1b48:	77 fd       	sbrc	r23, 7
    1b4a:	08 d0       	rcall	.+16     	; 0x1b5c <__divmodhi4_neg2>
    1b4c:	27 d0       	rcall	.+78     	; 0x1b9c <__udivmodhi4>
    1b4e:	07 fc       	sbrc	r0, 7
    1b50:	05 d0       	rcall	.+10     	; 0x1b5c <__divmodhi4_neg2>
    1b52:	3e f4       	brtc	.+14     	; 0x1b62 <__divmodhi4_exit>

00001b54 <__divmodhi4_neg1>:
    1b54:	90 95       	com	r25
    1b56:	81 95       	neg	r24
    1b58:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5a:	08 95       	ret

00001b5c <__divmodhi4_neg2>:
    1b5c:	70 95       	com	r23
    1b5e:	61 95       	neg	r22
    1b60:	7f 4f       	sbci	r23, 0xFF	; 255

00001b62 <__divmodhi4_exit>:
    1b62:	08 95       	ret

00001b64 <__divmodsi4>:
    1b64:	05 2e       	mov	r0, r21
    1b66:	97 fb       	bst	r25, 7
    1b68:	16 f4       	brtc	.+4      	; 0x1b6e <__divmodsi4+0xa>
    1b6a:	00 94       	com	r0
    1b6c:	0f d0       	rcall	.+30     	; 0x1b8c <__negsi2>
    1b6e:	57 fd       	sbrc	r21, 7
    1b70:	05 d0       	rcall	.+10     	; 0x1b7c <__divmodsi4_neg2>
    1b72:	28 d0       	rcall	.+80     	; 0x1bc4 <__udivmodsi4>
    1b74:	07 fc       	sbrc	r0, 7
    1b76:	02 d0       	rcall	.+4      	; 0x1b7c <__divmodsi4_neg2>
    1b78:	46 f4       	brtc	.+16     	; 0x1b8a <__divmodsi4_exit>
    1b7a:	08 c0       	rjmp	.+16     	; 0x1b8c <__negsi2>

00001b7c <__divmodsi4_neg2>:
    1b7c:	50 95       	com	r21
    1b7e:	40 95       	com	r20
    1b80:	30 95       	com	r19
    1b82:	21 95       	neg	r18
    1b84:	3f 4f       	sbci	r19, 0xFF	; 255
    1b86:	4f 4f       	sbci	r20, 0xFF	; 255
    1b88:	5f 4f       	sbci	r21, 0xFF	; 255

00001b8a <__divmodsi4_exit>:
    1b8a:	08 95       	ret

00001b8c <__negsi2>:
    1b8c:	90 95       	com	r25
    1b8e:	80 95       	com	r24
    1b90:	70 95       	com	r23
    1b92:	61 95       	neg	r22
    1b94:	7f 4f       	sbci	r23, 0xFF	; 255
    1b96:	8f 4f       	sbci	r24, 0xFF	; 255
    1b98:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9a:	08 95       	ret

00001b9c <__udivmodhi4>:
    1b9c:	aa 1b       	sub	r26, r26
    1b9e:	bb 1b       	sub	r27, r27
    1ba0:	51 e1       	ldi	r21, 0x11	; 17
    1ba2:	07 c0       	rjmp	.+14     	; 0x1bb2 <__udivmodhi4_ep>

00001ba4 <__udivmodhi4_loop>:
    1ba4:	aa 1f       	adc	r26, r26
    1ba6:	bb 1f       	adc	r27, r27
    1ba8:	a6 17       	cp	r26, r22
    1baa:	b7 07       	cpc	r27, r23
    1bac:	10 f0       	brcs	.+4      	; 0x1bb2 <__udivmodhi4_ep>
    1bae:	a6 1b       	sub	r26, r22
    1bb0:	b7 0b       	sbc	r27, r23

00001bb2 <__udivmodhi4_ep>:
    1bb2:	88 1f       	adc	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	5a 95       	dec	r21
    1bb8:	a9 f7       	brne	.-22     	; 0x1ba4 <__udivmodhi4_loop>
    1bba:	80 95       	com	r24
    1bbc:	90 95       	com	r25
    1bbe:	bc 01       	movw	r22, r24
    1bc0:	cd 01       	movw	r24, r26
    1bc2:	08 95       	ret

00001bc4 <__udivmodsi4>:
    1bc4:	a1 e2       	ldi	r26, 0x21	; 33
    1bc6:	1a 2e       	mov	r1, r26
    1bc8:	aa 1b       	sub	r26, r26
    1bca:	bb 1b       	sub	r27, r27
    1bcc:	fd 01       	movw	r30, r26
    1bce:	0d c0       	rjmp	.+26     	; 0x1bea <__udivmodsi4_ep>

00001bd0 <__udivmodsi4_loop>:
    1bd0:	aa 1f       	adc	r26, r26
    1bd2:	bb 1f       	adc	r27, r27
    1bd4:	ee 1f       	adc	r30, r30
    1bd6:	ff 1f       	adc	r31, r31
    1bd8:	a2 17       	cp	r26, r18
    1bda:	b3 07       	cpc	r27, r19
    1bdc:	e4 07       	cpc	r30, r20
    1bde:	f5 07       	cpc	r31, r21
    1be0:	20 f0       	brcs	.+8      	; 0x1bea <__udivmodsi4_ep>
    1be2:	a2 1b       	sub	r26, r18
    1be4:	b3 0b       	sbc	r27, r19
    1be6:	e4 0b       	sbc	r30, r20
    1be8:	f5 0b       	sbc	r31, r21

00001bea <__udivmodsi4_ep>:
    1bea:	66 1f       	adc	r22, r22
    1bec:	77 1f       	adc	r23, r23
    1bee:	88 1f       	adc	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	1a 94       	dec	r1
    1bf4:	69 f7       	brne	.-38     	; 0x1bd0 <__udivmodsi4_loop>
    1bf6:	60 95       	com	r22
    1bf8:	70 95       	com	r23
    1bfa:	80 95       	com	r24
    1bfc:	90 95       	com	r25
    1bfe:	9b 01       	movw	r18, r22
    1c00:	ac 01       	movw	r20, r24
    1c02:	bd 01       	movw	r22, r26
    1c04:	cf 01       	movw	r24, r30
    1c06:	08 95       	ret

00001c08 <itoa>:
    1c08:	45 32       	cpi	r20, 0x25	; 37
    1c0a:	51 05       	cpc	r21, r1
    1c0c:	18 f4       	brcc	.+6      	; 0x1c14 <itoa+0xc>
    1c0e:	42 30       	cpi	r20, 0x02	; 2
    1c10:	08 f0       	brcs	.+2      	; 0x1c14 <itoa+0xc>
    1c12:	04 c0       	rjmp	.+8      	; 0x1c1c <__itoa_ncheck>
    1c14:	fb 01       	movw	r30, r22
    1c16:	10 82       	st	Z, r1
    1c18:	cb 01       	movw	r24, r22
    1c1a:	08 95       	ret

00001c1c <__itoa_ncheck>:
    1c1c:	bb 27       	eor	r27, r27
    1c1e:	4a 30       	cpi	r20, 0x0A	; 10
    1c20:	31 f4       	brne	.+12     	; 0x1c2e <__itoa_ncheck+0x12>
    1c22:	99 23       	and	r25, r25
    1c24:	22 f4       	brpl	.+8      	; 0x1c2e <__itoa_ncheck+0x12>
    1c26:	bd e2       	ldi	r27, 0x2D	; 45
    1c28:	90 95       	com	r25
    1c2a:	81 95       	neg	r24
    1c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2e:	01 c0       	rjmp	.+2      	; 0x1c32 <__utoa_common>

00001c30 <__utoa_ncheck>:
    1c30:	bb 27       	eor	r27, r27

00001c32 <__utoa_common>:
    1c32:	fb 01       	movw	r30, r22
    1c34:	55 27       	eor	r21, r21
    1c36:	aa 27       	eor	r26, r26
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	aa 1f       	adc	r26, r26
    1c3e:	a4 17       	cp	r26, r20
    1c40:	10 f0       	brcs	.+4      	; 0x1c46 <__utoa_common+0x14>
    1c42:	a4 1b       	sub	r26, r20
    1c44:	83 95       	inc	r24
    1c46:	50 51       	subi	r21, 0x10	; 16
    1c48:	b9 f7       	brne	.-18     	; 0x1c38 <__utoa_common+0x6>
    1c4a:	a0 5d       	subi	r26, 0xD0	; 208
    1c4c:	aa 33       	cpi	r26, 0x3A	; 58
    1c4e:	08 f0       	brcs	.+2      	; 0x1c52 <__utoa_common+0x20>
    1c50:	a9 5d       	subi	r26, 0xD9	; 217
    1c52:	a1 93       	st	Z+, r26
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	79 f7       	brne	.-34     	; 0x1c36 <__utoa_common+0x4>
    1c58:	b1 11       	cpse	r27, r1
    1c5a:	b1 93       	st	Z+, r27
    1c5c:	11 92       	st	Z+, r1
    1c5e:	cb 01       	movw	r24, r22
    1c60:	e7 c3       	rjmp	.+1998   	; 0x2430 <strrev>

00001c62 <fdevopen>:
    1c62:	0f 93       	push	r16
    1c64:	1f 93       	push	r17
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	31 f4       	brne	.+12     	; 0x1c7a <fdevopen+0x18>
    1c6e:	61 15       	cp	r22, r1
    1c70:	71 05       	cpc	r23, r1
    1c72:	19 f4       	brne	.+6      	; 0x1c7a <fdevopen+0x18>
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	39 c0       	rjmp	.+114    	; 0x1cec <fdevopen+0x8a>
    1c7a:	8b 01       	movw	r16, r22
    1c7c:	ec 01       	movw	r28, r24
    1c7e:	6e e0       	ldi	r22, 0x0E	; 14
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	7c d2       	rcall	.+1272   	; 0x2180 <calloc>
    1c88:	fc 01       	movw	r30, r24
    1c8a:	89 2b       	or	r24, r25
    1c8c:	99 f3       	breq	.-26     	; 0x1c74 <fdevopen+0x12>
    1c8e:	80 e8       	ldi	r24, 0x80	; 128
    1c90:	83 83       	std	Z+3, r24	; 0x03
    1c92:	01 15       	cp	r16, r1
    1c94:	11 05       	cpc	r17, r1
    1c96:	71 f0       	breq	.+28     	; 0x1cb4 <fdevopen+0x52>
    1c98:	13 87       	std	Z+11, r17	; 0x0b
    1c9a:	02 87       	std	Z+10, r16	; 0x0a
    1c9c:	81 e8       	ldi	r24, 0x81	; 129
    1c9e:	83 83       	std	Z+3, r24	; 0x03
    1ca0:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <__iob>
    1ca4:	90 91 42 04 	lds	r25, 0x0442	; 0x800442 <__iob+0x1>
    1ca8:	89 2b       	or	r24, r25
    1caa:	21 f4       	brne	.+8      	; 0x1cb4 <fdevopen+0x52>
    1cac:	f0 93 42 04 	sts	0x0442, r31	; 0x800442 <__iob+0x1>
    1cb0:	e0 93 41 04 	sts	0x0441, r30	; 0x800441 <__iob>
    1cb4:	20 97       	sbiw	r28, 0x00	; 0
    1cb6:	c9 f0       	breq	.+50     	; 0x1cea <fdevopen+0x88>
    1cb8:	d1 87       	std	Z+9, r29	; 0x09
    1cba:	c0 87       	std	Z+8, r28	; 0x08
    1cbc:	83 81       	ldd	r24, Z+3	; 0x03
    1cbe:	82 60       	ori	r24, 0x02	; 2
    1cc0:	83 83       	std	Z+3, r24	; 0x03
    1cc2:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <__iob+0x2>
    1cc6:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <__iob+0x3>
    1cca:	89 2b       	or	r24, r25
    1ccc:	71 f4       	brne	.+28     	; 0x1cea <fdevopen+0x88>
    1cce:	f0 93 44 04 	sts	0x0444, r31	; 0x800444 <__iob+0x3>
    1cd2:	e0 93 43 04 	sts	0x0443, r30	; 0x800443 <__iob+0x2>
    1cd6:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <__iob+0x4>
    1cda:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <__iob+0x5>
    1cde:	89 2b       	or	r24, r25
    1ce0:	21 f4       	brne	.+8      	; 0x1cea <fdevopen+0x88>
    1ce2:	f0 93 46 04 	sts	0x0446, r31	; 0x800446 <__iob+0x5>
    1ce6:	e0 93 45 04 	sts	0x0445, r30	; 0x800445 <__iob+0x4>
    1cea:	cf 01       	movw	r24, r30
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	1f 91       	pop	r17
    1cf2:	0f 91       	pop	r16
    1cf4:	08 95       	ret

00001cf6 <printf>:
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	ae 01       	movw	r20, r28
    1d00:	4a 5f       	subi	r20, 0xFA	; 250
    1d02:	5f 4f       	sbci	r21, 0xFF	; 255
    1d04:	fa 01       	movw	r30, r20
    1d06:	61 91       	ld	r22, Z+
    1d08:	71 91       	ld	r23, Z+
    1d0a:	af 01       	movw	r20, r30
    1d0c:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <__iob+0x2>
    1d10:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <__iob+0x3>
    1d14:	38 d0       	rcall	.+112    	; 0x1d86 <vfprintf>
    1d16:	df 91       	pop	r29
    1d18:	cf 91       	pop	r28
    1d1a:	08 95       	ret

00001d1c <putchar>:
    1d1c:	60 91 43 04 	lds	r22, 0x0443	; 0x800443 <__iob+0x2>
    1d20:	70 91 44 04 	lds	r23, 0x0444	; 0x800444 <__iob+0x3>
    1d24:	95 c3       	rjmp	.+1834   	; 0x2450 <fputc>

00001d26 <puts>:
    1d26:	0f 93       	push	r16
    1d28:	1f 93       	push	r17
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	e0 91 43 04 	lds	r30, 0x0443	; 0x800443 <__iob+0x2>
    1d32:	f0 91 44 04 	lds	r31, 0x0444	; 0x800444 <__iob+0x3>
    1d36:	23 81       	ldd	r18, Z+3	; 0x03
    1d38:	21 ff       	sbrs	r18, 1
    1d3a:	1b c0       	rjmp	.+54     	; 0x1d72 <puts+0x4c>
    1d3c:	8c 01       	movw	r16, r24
    1d3e:	d0 e0       	ldi	r29, 0x00	; 0
    1d40:	c0 e0       	ldi	r28, 0x00	; 0
    1d42:	f8 01       	movw	r30, r16
    1d44:	81 91       	ld	r24, Z+
    1d46:	8f 01       	movw	r16, r30
    1d48:	60 91 43 04 	lds	r22, 0x0443	; 0x800443 <__iob+0x2>
    1d4c:	70 91 44 04 	lds	r23, 0x0444	; 0x800444 <__iob+0x3>
    1d50:	db 01       	movw	r26, r22
    1d52:	18 96       	adiw	r26, 0x08	; 8
    1d54:	ed 91       	ld	r30, X+
    1d56:	fc 91       	ld	r31, X
    1d58:	19 97       	sbiw	r26, 0x09	; 9
    1d5a:	88 23       	and	r24, r24
    1d5c:	31 f0       	breq	.+12     	; 0x1d6a <puts+0x44>
    1d5e:	19 95       	eicall
    1d60:	89 2b       	or	r24, r25
    1d62:	79 f3       	breq	.-34     	; 0x1d42 <puts+0x1c>
    1d64:	df ef       	ldi	r29, 0xFF	; 255
    1d66:	cf ef       	ldi	r28, 0xFF	; 255
    1d68:	ec cf       	rjmp	.-40     	; 0x1d42 <puts+0x1c>
    1d6a:	8a e0       	ldi	r24, 0x0A	; 10
    1d6c:	19 95       	eicall
    1d6e:	89 2b       	or	r24, r25
    1d70:	19 f0       	breq	.+6      	; 0x1d78 <puts+0x52>
    1d72:	8f ef       	ldi	r24, 0xFF	; 255
    1d74:	9f ef       	ldi	r25, 0xFF	; 255
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <puts+0x56>
    1d78:	8d 2f       	mov	r24, r29
    1d7a:	9c 2f       	mov	r25, r28
    1d7c:	df 91       	pop	r29
    1d7e:	cf 91       	pop	r28
    1d80:	1f 91       	pop	r17
    1d82:	0f 91       	pop	r16
    1d84:	08 95       	ret

00001d86 <vfprintf>:
    1d86:	2f 92       	push	r2
    1d88:	3f 92       	push	r3
    1d8a:	4f 92       	push	r4
    1d8c:	5f 92       	push	r5
    1d8e:	6f 92       	push	r6
    1d90:	7f 92       	push	r7
    1d92:	8f 92       	push	r8
    1d94:	9f 92       	push	r9
    1d96:	af 92       	push	r10
    1d98:	bf 92       	push	r11
    1d9a:	cf 92       	push	r12
    1d9c:	df 92       	push	r13
    1d9e:	ef 92       	push	r14
    1da0:	ff 92       	push	r15
    1da2:	0f 93       	push	r16
    1da4:	1f 93       	push	r17
    1da6:	cf 93       	push	r28
    1da8:	df 93       	push	r29
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
    1dae:	2b 97       	sbiw	r28, 0x0b	; 11
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	f8 94       	cli
    1db4:	de bf       	out	0x3e, r29	; 62
    1db6:	0f be       	out	0x3f, r0	; 63
    1db8:	cd bf       	out	0x3d, r28	; 61
    1dba:	6c 01       	movw	r12, r24
    1dbc:	7b 01       	movw	r14, r22
    1dbe:	8a 01       	movw	r16, r20
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	17 82       	std	Z+7, r1	; 0x07
    1dc4:	16 82       	std	Z+6, r1	; 0x06
    1dc6:	83 81       	ldd	r24, Z+3	; 0x03
    1dc8:	81 ff       	sbrs	r24, 1
    1dca:	bf c1       	rjmp	.+894    	; 0x214a <vfprintf+0x3c4>
    1dcc:	ce 01       	movw	r24, r28
    1dce:	01 96       	adiw	r24, 0x01	; 1
    1dd0:	3c 01       	movw	r6, r24
    1dd2:	f6 01       	movw	r30, r12
    1dd4:	93 81       	ldd	r25, Z+3	; 0x03
    1dd6:	f7 01       	movw	r30, r14
    1dd8:	93 fd       	sbrc	r25, 3
    1dda:	85 91       	lpm	r24, Z+
    1ddc:	93 ff       	sbrs	r25, 3
    1dde:	81 91       	ld	r24, Z+
    1de0:	7f 01       	movw	r14, r30
    1de2:	88 23       	and	r24, r24
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <vfprintf+0x62>
    1de6:	ad c1       	rjmp	.+858    	; 0x2142 <vfprintf+0x3bc>
    1de8:	85 32       	cpi	r24, 0x25	; 37
    1dea:	39 f4       	brne	.+14     	; 0x1dfa <vfprintf+0x74>
    1dec:	93 fd       	sbrc	r25, 3
    1dee:	85 91       	lpm	r24, Z+
    1df0:	93 ff       	sbrs	r25, 3
    1df2:	81 91       	ld	r24, Z+
    1df4:	7f 01       	movw	r14, r30
    1df6:	85 32       	cpi	r24, 0x25	; 37
    1df8:	21 f4       	brne	.+8      	; 0x1e02 <vfprintf+0x7c>
    1dfa:	b6 01       	movw	r22, r12
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	28 d3       	rcall	.+1616   	; 0x2450 <fputc>
    1e00:	e8 cf       	rjmp	.-48     	; 0x1dd2 <vfprintf+0x4c>
    1e02:	91 2c       	mov	r9, r1
    1e04:	21 2c       	mov	r2, r1
    1e06:	31 2c       	mov	r3, r1
    1e08:	ff e1       	ldi	r31, 0x1F	; 31
    1e0a:	f3 15       	cp	r31, r3
    1e0c:	d8 f0       	brcs	.+54     	; 0x1e44 <vfprintf+0xbe>
    1e0e:	8b 32       	cpi	r24, 0x2B	; 43
    1e10:	79 f0       	breq	.+30     	; 0x1e30 <vfprintf+0xaa>
    1e12:	38 f4       	brcc	.+14     	; 0x1e22 <vfprintf+0x9c>
    1e14:	80 32       	cpi	r24, 0x20	; 32
    1e16:	79 f0       	breq	.+30     	; 0x1e36 <vfprintf+0xb0>
    1e18:	83 32       	cpi	r24, 0x23	; 35
    1e1a:	a1 f4       	brne	.+40     	; 0x1e44 <vfprintf+0xbe>
    1e1c:	23 2d       	mov	r18, r3
    1e1e:	20 61       	ori	r18, 0x10	; 16
    1e20:	1d c0       	rjmp	.+58     	; 0x1e5c <vfprintf+0xd6>
    1e22:	8d 32       	cpi	r24, 0x2D	; 45
    1e24:	61 f0       	breq	.+24     	; 0x1e3e <vfprintf+0xb8>
    1e26:	80 33       	cpi	r24, 0x30	; 48
    1e28:	69 f4       	brne	.+26     	; 0x1e44 <vfprintf+0xbe>
    1e2a:	23 2d       	mov	r18, r3
    1e2c:	21 60       	ori	r18, 0x01	; 1
    1e2e:	16 c0       	rjmp	.+44     	; 0x1e5c <vfprintf+0xd6>
    1e30:	83 2d       	mov	r24, r3
    1e32:	82 60       	ori	r24, 0x02	; 2
    1e34:	38 2e       	mov	r3, r24
    1e36:	e3 2d       	mov	r30, r3
    1e38:	e4 60       	ori	r30, 0x04	; 4
    1e3a:	3e 2e       	mov	r3, r30
    1e3c:	2a c0       	rjmp	.+84     	; 0x1e92 <vfprintf+0x10c>
    1e3e:	f3 2d       	mov	r31, r3
    1e40:	f8 60       	ori	r31, 0x08	; 8
    1e42:	1d c0       	rjmp	.+58     	; 0x1e7e <vfprintf+0xf8>
    1e44:	37 fc       	sbrc	r3, 7
    1e46:	2d c0       	rjmp	.+90     	; 0x1ea2 <vfprintf+0x11c>
    1e48:	20 ed       	ldi	r18, 0xD0	; 208
    1e4a:	28 0f       	add	r18, r24
    1e4c:	2a 30       	cpi	r18, 0x0A	; 10
    1e4e:	40 f0       	brcs	.+16     	; 0x1e60 <vfprintf+0xda>
    1e50:	8e 32       	cpi	r24, 0x2E	; 46
    1e52:	b9 f4       	brne	.+46     	; 0x1e82 <vfprintf+0xfc>
    1e54:	36 fc       	sbrc	r3, 6
    1e56:	75 c1       	rjmp	.+746    	; 0x2142 <vfprintf+0x3bc>
    1e58:	23 2d       	mov	r18, r3
    1e5a:	20 64       	ori	r18, 0x40	; 64
    1e5c:	32 2e       	mov	r3, r18
    1e5e:	19 c0       	rjmp	.+50     	; 0x1e92 <vfprintf+0x10c>
    1e60:	36 fe       	sbrs	r3, 6
    1e62:	06 c0       	rjmp	.+12     	; 0x1e70 <vfprintf+0xea>
    1e64:	8a e0       	ldi	r24, 0x0A	; 10
    1e66:	98 9e       	mul	r9, r24
    1e68:	20 0d       	add	r18, r0
    1e6a:	11 24       	eor	r1, r1
    1e6c:	92 2e       	mov	r9, r18
    1e6e:	11 c0       	rjmp	.+34     	; 0x1e92 <vfprintf+0x10c>
    1e70:	ea e0       	ldi	r30, 0x0A	; 10
    1e72:	2e 9e       	mul	r2, r30
    1e74:	20 0d       	add	r18, r0
    1e76:	11 24       	eor	r1, r1
    1e78:	22 2e       	mov	r2, r18
    1e7a:	f3 2d       	mov	r31, r3
    1e7c:	f0 62       	ori	r31, 0x20	; 32
    1e7e:	3f 2e       	mov	r3, r31
    1e80:	08 c0       	rjmp	.+16     	; 0x1e92 <vfprintf+0x10c>
    1e82:	8c 36       	cpi	r24, 0x6C	; 108
    1e84:	21 f4       	brne	.+8      	; 0x1e8e <vfprintf+0x108>
    1e86:	83 2d       	mov	r24, r3
    1e88:	80 68       	ori	r24, 0x80	; 128
    1e8a:	38 2e       	mov	r3, r24
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <vfprintf+0x10c>
    1e8e:	88 36       	cpi	r24, 0x68	; 104
    1e90:	41 f4       	brne	.+16     	; 0x1ea2 <vfprintf+0x11c>
    1e92:	f7 01       	movw	r30, r14
    1e94:	93 fd       	sbrc	r25, 3
    1e96:	85 91       	lpm	r24, Z+
    1e98:	93 ff       	sbrs	r25, 3
    1e9a:	81 91       	ld	r24, Z+
    1e9c:	7f 01       	movw	r14, r30
    1e9e:	81 11       	cpse	r24, r1
    1ea0:	b3 cf       	rjmp	.-154    	; 0x1e08 <vfprintf+0x82>
    1ea2:	98 2f       	mov	r25, r24
    1ea4:	9f 7d       	andi	r25, 0xDF	; 223
    1ea6:	95 54       	subi	r25, 0x45	; 69
    1ea8:	93 30       	cpi	r25, 0x03	; 3
    1eaa:	28 f4       	brcc	.+10     	; 0x1eb6 <vfprintf+0x130>
    1eac:	0c 5f       	subi	r16, 0xFC	; 252
    1eae:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb0:	9f e3       	ldi	r25, 0x3F	; 63
    1eb2:	99 83       	std	Y+1, r25	; 0x01
    1eb4:	0d c0       	rjmp	.+26     	; 0x1ed0 <vfprintf+0x14a>
    1eb6:	83 36       	cpi	r24, 0x63	; 99
    1eb8:	31 f0       	breq	.+12     	; 0x1ec6 <vfprintf+0x140>
    1eba:	83 37       	cpi	r24, 0x73	; 115
    1ebc:	71 f0       	breq	.+28     	; 0x1eda <vfprintf+0x154>
    1ebe:	83 35       	cpi	r24, 0x53	; 83
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <vfprintf+0x13e>
    1ec2:	55 c0       	rjmp	.+170    	; 0x1f6e <vfprintf+0x1e8>
    1ec4:	20 c0       	rjmp	.+64     	; 0x1f06 <vfprintf+0x180>
    1ec6:	f8 01       	movw	r30, r16
    1ec8:	80 81       	ld	r24, Z
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	0e 5f       	subi	r16, 0xFE	; 254
    1ece:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed0:	88 24       	eor	r8, r8
    1ed2:	83 94       	inc	r8
    1ed4:	91 2c       	mov	r9, r1
    1ed6:	53 01       	movw	r10, r6
    1ed8:	12 c0       	rjmp	.+36     	; 0x1efe <vfprintf+0x178>
    1eda:	28 01       	movw	r4, r16
    1edc:	f2 e0       	ldi	r31, 0x02	; 2
    1ede:	4f 0e       	add	r4, r31
    1ee0:	51 1c       	adc	r5, r1
    1ee2:	f8 01       	movw	r30, r16
    1ee4:	a0 80       	ld	r10, Z
    1ee6:	b1 80       	ldd	r11, Z+1	; 0x01
    1ee8:	36 fe       	sbrs	r3, 6
    1eea:	03 c0       	rjmp	.+6      	; 0x1ef2 <vfprintf+0x16c>
    1eec:	69 2d       	mov	r22, r9
    1eee:	70 e0       	ldi	r23, 0x00	; 0
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <vfprintf+0x170>
    1ef2:	6f ef       	ldi	r22, 0xFF	; 255
    1ef4:	7f ef       	ldi	r23, 0xFF	; 255
    1ef6:	c5 01       	movw	r24, r10
    1ef8:	90 d2       	rcall	.+1312   	; 0x241a <strnlen>
    1efa:	4c 01       	movw	r8, r24
    1efc:	82 01       	movw	r16, r4
    1efe:	f3 2d       	mov	r31, r3
    1f00:	ff 77       	andi	r31, 0x7F	; 127
    1f02:	3f 2e       	mov	r3, r31
    1f04:	15 c0       	rjmp	.+42     	; 0x1f30 <vfprintf+0x1aa>
    1f06:	28 01       	movw	r4, r16
    1f08:	22 e0       	ldi	r18, 0x02	; 2
    1f0a:	42 0e       	add	r4, r18
    1f0c:	51 1c       	adc	r5, r1
    1f0e:	f8 01       	movw	r30, r16
    1f10:	a0 80       	ld	r10, Z
    1f12:	b1 80       	ldd	r11, Z+1	; 0x01
    1f14:	36 fe       	sbrs	r3, 6
    1f16:	03 c0       	rjmp	.+6      	; 0x1f1e <vfprintf+0x198>
    1f18:	69 2d       	mov	r22, r9
    1f1a:	70 e0       	ldi	r23, 0x00	; 0
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <vfprintf+0x19c>
    1f1e:	6f ef       	ldi	r22, 0xFF	; 255
    1f20:	7f ef       	ldi	r23, 0xFF	; 255
    1f22:	c5 01       	movw	r24, r10
    1f24:	68 d2       	rcall	.+1232   	; 0x23f6 <strnlen_P>
    1f26:	4c 01       	movw	r8, r24
    1f28:	f3 2d       	mov	r31, r3
    1f2a:	f0 68       	ori	r31, 0x80	; 128
    1f2c:	3f 2e       	mov	r3, r31
    1f2e:	82 01       	movw	r16, r4
    1f30:	33 fc       	sbrc	r3, 3
    1f32:	19 c0       	rjmp	.+50     	; 0x1f66 <vfprintf+0x1e0>
    1f34:	82 2d       	mov	r24, r2
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	88 16       	cp	r8, r24
    1f3a:	99 06       	cpc	r9, r25
    1f3c:	a0 f4       	brcc	.+40     	; 0x1f66 <vfprintf+0x1e0>
    1f3e:	b6 01       	movw	r22, r12
    1f40:	80 e2       	ldi	r24, 0x20	; 32
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	85 d2       	rcall	.+1290   	; 0x2450 <fputc>
    1f46:	2a 94       	dec	r2
    1f48:	f5 cf       	rjmp	.-22     	; 0x1f34 <vfprintf+0x1ae>
    1f4a:	f5 01       	movw	r30, r10
    1f4c:	37 fc       	sbrc	r3, 7
    1f4e:	85 91       	lpm	r24, Z+
    1f50:	37 fe       	sbrs	r3, 7
    1f52:	81 91       	ld	r24, Z+
    1f54:	5f 01       	movw	r10, r30
    1f56:	b6 01       	movw	r22, r12
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	7a d2       	rcall	.+1268   	; 0x2450 <fputc>
    1f5c:	21 10       	cpse	r2, r1
    1f5e:	2a 94       	dec	r2
    1f60:	21 e0       	ldi	r18, 0x01	; 1
    1f62:	82 1a       	sub	r8, r18
    1f64:	91 08       	sbc	r9, r1
    1f66:	81 14       	cp	r8, r1
    1f68:	91 04       	cpc	r9, r1
    1f6a:	79 f7       	brne	.-34     	; 0x1f4a <vfprintf+0x1c4>
    1f6c:	e1 c0       	rjmp	.+450    	; 0x2130 <vfprintf+0x3aa>
    1f6e:	84 36       	cpi	r24, 0x64	; 100
    1f70:	11 f0       	breq	.+4      	; 0x1f76 <vfprintf+0x1f0>
    1f72:	89 36       	cpi	r24, 0x69	; 105
    1f74:	39 f5       	brne	.+78     	; 0x1fc4 <vfprintf+0x23e>
    1f76:	f8 01       	movw	r30, r16
    1f78:	37 fe       	sbrs	r3, 7
    1f7a:	07 c0       	rjmp	.+14     	; 0x1f8a <vfprintf+0x204>
    1f7c:	60 81       	ld	r22, Z
    1f7e:	71 81       	ldd	r23, Z+1	; 0x01
    1f80:	82 81       	ldd	r24, Z+2	; 0x02
    1f82:	93 81       	ldd	r25, Z+3	; 0x03
    1f84:	0c 5f       	subi	r16, 0xFC	; 252
    1f86:	1f 4f       	sbci	r17, 0xFF	; 255
    1f88:	08 c0       	rjmp	.+16     	; 0x1f9a <vfprintf+0x214>
    1f8a:	60 81       	ld	r22, Z
    1f8c:	71 81       	ldd	r23, Z+1	; 0x01
    1f8e:	07 2e       	mov	r0, r23
    1f90:	00 0c       	add	r0, r0
    1f92:	88 0b       	sbc	r24, r24
    1f94:	99 0b       	sbc	r25, r25
    1f96:	0e 5f       	subi	r16, 0xFE	; 254
    1f98:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9a:	f3 2d       	mov	r31, r3
    1f9c:	ff 76       	andi	r31, 0x6F	; 111
    1f9e:	3f 2e       	mov	r3, r31
    1fa0:	97 ff       	sbrs	r25, 7
    1fa2:	09 c0       	rjmp	.+18     	; 0x1fb6 <vfprintf+0x230>
    1fa4:	90 95       	com	r25
    1fa6:	80 95       	com	r24
    1fa8:	70 95       	com	r23
    1faa:	61 95       	neg	r22
    1fac:	7f 4f       	sbci	r23, 0xFF	; 255
    1fae:	8f 4f       	sbci	r24, 0xFF	; 255
    1fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb2:	f0 68       	ori	r31, 0x80	; 128
    1fb4:	3f 2e       	mov	r3, r31
    1fb6:	2a e0       	ldi	r18, 0x0A	; 10
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	a3 01       	movw	r20, r6
    1fbc:	85 d2       	rcall	.+1290   	; 0x24c8 <__ultoa_invert>
    1fbe:	88 2e       	mov	r8, r24
    1fc0:	86 18       	sub	r8, r6
    1fc2:	44 c0       	rjmp	.+136    	; 0x204c <vfprintf+0x2c6>
    1fc4:	85 37       	cpi	r24, 0x75	; 117
    1fc6:	31 f4       	brne	.+12     	; 0x1fd4 <vfprintf+0x24e>
    1fc8:	23 2d       	mov	r18, r3
    1fca:	2f 7e       	andi	r18, 0xEF	; 239
    1fcc:	b2 2e       	mov	r11, r18
    1fce:	2a e0       	ldi	r18, 0x0A	; 10
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	25 c0       	rjmp	.+74     	; 0x201e <vfprintf+0x298>
    1fd4:	93 2d       	mov	r25, r3
    1fd6:	99 7f       	andi	r25, 0xF9	; 249
    1fd8:	b9 2e       	mov	r11, r25
    1fda:	8f 36       	cpi	r24, 0x6F	; 111
    1fdc:	c1 f0       	breq	.+48     	; 0x200e <vfprintf+0x288>
    1fde:	18 f4       	brcc	.+6      	; 0x1fe6 <vfprintf+0x260>
    1fe0:	88 35       	cpi	r24, 0x58	; 88
    1fe2:	79 f0       	breq	.+30     	; 0x2002 <vfprintf+0x27c>
    1fe4:	ae c0       	rjmp	.+348    	; 0x2142 <vfprintf+0x3bc>
    1fe6:	80 37       	cpi	r24, 0x70	; 112
    1fe8:	19 f0       	breq	.+6      	; 0x1ff0 <vfprintf+0x26a>
    1fea:	88 37       	cpi	r24, 0x78	; 120
    1fec:	21 f0       	breq	.+8      	; 0x1ff6 <vfprintf+0x270>
    1fee:	a9 c0       	rjmp	.+338    	; 0x2142 <vfprintf+0x3bc>
    1ff0:	e9 2f       	mov	r30, r25
    1ff2:	e0 61       	ori	r30, 0x10	; 16
    1ff4:	be 2e       	mov	r11, r30
    1ff6:	b4 fe       	sbrs	r11, 4
    1ff8:	0d c0       	rjmp	.+26     	; 0x2014 <vfprintf+0x28e>
    1ffa:	fb 2d       	mov	r31, r11
    1ffc:	f4 60       	ori	r31, 0x04	; 4
    1ffe:	bf 2e       	mov	r11, r31
    2000:	09 c0       	rjmp	.+18     	; 0x2014 <vfprintf+0x28e>
    2002:	34 fe       	sbrs	r3, 4
    2004:	0a c0       	rjmp	.+20     	; 0x201a <vfprintf+0x294>
    2006:	29 2f       	mov	r18, r25
    2008:	26 60       	ori	r18, 0x06	; 6
    200a:	b2 2e       	mov	r11, r18
    200c:	06 c0       	rjmp	.+12     	; 0x201a <vfprintf+0x294>
    200e:	28 e0       	ldi	r18, 0x08	; 8
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	05 c0       	rjmp	.+10     	; 0x201e <vfprintf+0x298>
    2014:	20 e1       	ldi	r18, 0x10	; 16
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	02 c0       	rjmp	.+4      	; 0x201e <vfprintf+0x298>
    201a:	20 e1       	ldi	r18, 0x10	; 16
    201c:	32 e0       	ldi	r19, 0x02	; 2
    201e:	f8 01       	movw	r30, r16
    2020:	b7 fe       	sbrs	r11, 7
    2022:	07 c0       	rjmp	.+14     	; 0x2032 <vfprintf+0x2ac>
    2024:	60 81       	ld	r22, Z
    2026:	71 81       	ldd	r23, Z+1	; 0x01
    2028:	82 81       	ldd	r24, Z+2	; 0x02
    202a:	93 81       	ldd	r25, Z+3	; 0x03
    202c:	0c 5f       	subi	r16, 0xFC	; 252
    202e:	1f 4f       	sbci	r17, 0xFF	; 255
    2030:	06 c0       	rjmp	.+12     	; 0x203e <vfprintf+0x2b8>
    2032:	60 81       	ld	r22, Z
    2034:	71 81       	ldd	r23, Z+1	; 0x01
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	0e 5f       	subi	r16, 0xFE	; 254
    203c:	1f 4f       	sbci	r17, 0xFF	; 255
    203e:	a3 01       	movw	r20, r6
    2040:	43 d2       	rcall	.+1158   	; 0x24c8 <__ultoa_invert>
    2042:	88 2e       	mov	r8, r24
    2044:	86 18       	sub	r8, r6
    2046:	fb 2d       	mov	r31, r11
    2048:	ff 77       	andi	r31, 0x7F	; 127
    204a:	3f 2e       	mov	r3, r31
    204c:	36 fe       	sbrs	r3, 6
    204e:	0d c0       	rjmp	.+26     	; 0x206a <vfprintf+0x2e4>
    2050:	23 2d       	mov	r18, r3
    2052:	2e 7f       	andi	r18, 0xFE	; 254
    2054:	a2 2e       	mov	r10, r18
    2056:	89 14       	cp	r8, r9
    2058:	58 f4       	brcc	.+22     	; 0x2070 <vfprintf+0x2ea>
    205a:	34 fe       	sbrs	r3, 4
    205c:	0b c0       	rjmp	.+22     	; 0x2074 <vfprintf+0x2ee>
    205e:	32 fc       	sbrc	r3, 2
    2060:	09 c0       	rjmp	.+18     	; 0x2074 <vfprintf+0x2ee>
    2062:	83 2d       	mov	r24, r3
    2064:	8e 7e       	andi	r24, 0xEE	; 238
    2066:	a8 2e       	mov	r10, r24
    2068:	05 c0       	rjmp	.+10     	; 0x2074 <vfprintf+0x2ee>
    206a:	b8 2c       	mov	r11, r8
    206c:	a3 2c       	mov	r10, r3
    206e:	03 c0       	rjmp	.+6      	; 0x2076 <vfprintf+0x2f0>
    2070:	b8 2c       	mov	r11, r8
    2072:	01 c0       	rjmp	.+2      	; 0x2076 <vfprintf+0x2f0>
    2074:	b9 2c       	mov	r11, r9
    2076:	a4 fe       	sbrs	r10, 4
    2078:	0f c0       	rjmp	.+30     	; 0x2098 <vfprintf+0x312>
    207a:	fe 01       	movw	r30, r28
    207c:	e8 0d       	add	r30, r8
    207e:	f1 1d       	adc	r31, r1
    2080:	80 81       	ld	r24, Z
    2082:	80 33       	cpi	r24, 0x30	; 48
    2084:	21 f4       	brne	.+8      	; 0x208e <vfprintf+0x308>
    2086:	9a 2d       	mov	r25, r10
    2088:	99 7e       	andi	r25, 0xE9	; 233
    208a:	a9 2e       	mov	r10, r25
    208c:	09 c0       	rjmp	.+18     	; 0x20a0 <vfprintf+0x31a>
    208e:	a2 fe       	sbrs	r10, 2
    2090:	06 c0       	rjmp	.+12     	; 0x209e <vfprintf+0x318>
    2092:	b3 94       	inc	r11
    2094:	b3 94       	inc	r11
    2096:	04 c0       	rjmp	.+8      	; 0x20a0 <vfprintf+0x31a>
    2098:	8a 2d       	mov	r24, r10
    209a:	86 78       	andi	r24, 0x86	; 134
    209c:	09 f0       	breq	.+2      	; 0x20a0 <vfprintf+0x31a>
    209e:	b3 94       	inc	r11
    20a0:	a3 fc       	sbrc	r10, 3
    20a2:	10 c0       	rjmp	.+32     	; 0x20c4 <vfprintf+0x33e>
    20a4:	a0 fe       	sbrs	r10, 0
    20a6:	06 c0       	rjmp	.+12     	; 0x20b4 <vfprintf+0x32e>
    20a8:	b2 14       	cp	r11, r2
    20aa:	80 f4       	brcc	.+32     	; 0x20cc <vfprintf+0x346>
    20ac:	28 0c       	add	r2, r8
    20ae:	92 2c       	mov	r9, r2
    20b0:	9b 18       	sub	r9, r11
    20b2:	0d c0       	rjmp	.+26     	; 0x20ce <vfprintf+0x348>
    20b4:	b2 14       	cp	r11, r2
    20b6:	58 f4       	brcc	.+22     	; 0x20ce <vfprintf+0x348>
    20b8:	b6 01       	movw	r22, r12
    20ba:	80 e2       	ldi	r24, 0x20	; 32
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	c8 d1       	rcall	.+912    	; 0x2450 <fputc>
    20c0:	b3 94       	inc	r11
    20c2:	f8 cf       	rjmp	.-16     	; 0x20b4 <vfprintf+0x32e>
    20c4:	b2 14       	cp	r11, r2
    20c6:	18 f4       	brcc	.+6      	; 0x20ce <vfprintf+0x348>
    20c8:	2b 18       	sub	r2, r11
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <vfprintf+0x34a>
    20cc:	98 2c       	mov	r9, r8
    20ce:	21 2c       	mov	r2, r1
    20d0:	a4 fe       	sbrs	r10, 4
    20d2:	0f c0       	rjmp	.+30     	; 0x20f2 <vfprintf+0x36c>
    20d4:	b6 01       	movw	r22, r12
    20d6:	80 e3       	ldi	r24, 0x30	; 48
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	ba d1       	rcall	.+884    	; 0x2450 <fputc>
    20dc:	a2 fe       	sbrs	r10, 2
    20de:	16 c0       	rjmp	.+44     	; 0x210c <vfprintf+0x386>
    20e0:	a1 fc       	sbrc	r10, 1
    20e2:	03 c0       	rjmp	.+6      	; 0x20ea <vfprintf+0x364>
    20e4:	88 e7       	ldi	r24, 0x78	; 120
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <vfprintf+0x368>
    20ea:	88 e5       	ldi	r24, 0x58	; 88
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	b6 01       	movw	r22, r12
    20f0:	0c c0       	rjmp	.+24     	; 0x210a <vfprintf+0x384>
    20f2:	8a 2d       	mov	r24, r10
    20f4:	86 78       	andi	r24, 0x86	; 134
    20f6:	51 f0       	breq	.+20     	; 0x210c <vfprintf+0x386>
    20f8:	a1 fe       	sbrs	r10, 1
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <vfprintf+0x37a>
    20fc:	8b e2       	ldi	r24, 0x2B	; 43
    20fe:	01 c0       	rjmp	.+2      	; 0x2102 <vfprintf+0x37c>
    2100:	80 e2       	ldi	r24, 0x20	; 32
    2102:	a7 fc       	sbrc	r10, 7
    2104:	8d e2       	ldi	r24, 0x2D	; 45
    2106:	b6 01       	movw	r22, r12
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a2 d1       	rcall	.+836    	; 0x2450 <fputc>
    210c:	89 14       	cp	r8, r9
    210e:	30 f4       	brcc	.+12     	; 0x211c <vfprintf+0x396>
    2110:	b6 01       	movw	r22, r12
    2112:	80 e3       	ldi	r24, 0x30	; 48
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	9c d1       	rcall	.+824    	; 0x2450 <fputc>
    2118:	9a 94       	dec	r9
    211a:	f8 cf       	rjmp	.-16     	; 0x210c <vfprintf+0x386>
    211c:	8a 94       	dec	r8
    211e:	f3 01       	movw	r30, r6
    2120:	e8 0d       	add	r30, r8
    2122:	f1 1d       	adc	r31, r1
    2124:	80 81       	ld	r24, Z
    2126:	b6 01       	movw	r22, r12
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	92 d1       	rcall	.+804    	; 0x2450 <fputc>
    212c:	81 10       	cpse	r8, r1
    212e:	f6 cf       	rjmp	.-20     	; 0x211c <vfprintf+0x396>
    2130:	22 20       	and	r2, r2
    2132:	09 f4       	brne	.+2      	; 0x2136 <vfprintf+0x3b0>
    2134:	4e ce       	rjmp	.-868    	; 0x1dd2 <vfprintf+0x4c>
    2136:	b6 01       	movw	r22, r12
    2138:	80 e2       	ldi	r24, 0x20	; 32
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	89 d1       	rcall	.+786    	; 0x2450 <fputc>
    213e:	2a 94       	dec	r2
    2140:	f7 cf       	rjmp	.-18     	; 0x2130 <vfprintf+0x3aa>
    2142:	f6 01       	movw	r30, r12
    2144:	86 81       	ldd	r24, Z+6	; 0x06
    2146:	97 81       	ldd	r25, Z+7	; 0x07
    2148:	02 c0       	rjmp	.+4      	; 0x214e <vfprintf+0x3c8>
    214a:	8f ef       	ldi	r24, 0xFF	; 255
    214c:	9f ef       	ldi	r25, 0xFF	; 255
    214e:	2b 96       	adiw	r28, 0x0b	; 11
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	f8 94       	cli
    2154:	de bf       	out	0x3e, r29	; 62
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	cd bf       	out	0x3d, r28	; 61
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28
    215e:	1f 91       	pop	r17
    2160:	0f 91       	pop	r16
    2162:	ff 90       	pop	r15
    2164:	ef 90       	pop	r14
    2166:	df 90       	pop	r13
    2168:	cf 90       	pop	r12
    216a:	bf 90       	pop	r11
    216c:	af 90       	pop	r10
    216e:	9f 90       	pop	r9
    2170:	8f 90       	pop	r8
    2172:	7f 90       	pop	r7
    2174:	6f 90       	pop	r6
    2176:	5f 90       	pop	r5
    2178:	4f 90       	pop	r4
    217a:	3f 90       	pop	r3
    217c:	2f 90       	pop	r2
    217e:	08 95       	ret

00002180 <calloc>:
    2180:	0f 93       	push	r16
    2182:	1f 93       	push	r17
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
    2188:	86 9f       	mul	r24, r22
    218a:	80 01       	movw	r16, r0
    218c:	87 9f       	mul	r24, r23
    218e:	10 0d       	add	r17, r0
    2190:	96 9f       	mul	r25, r22
    2192:	10 0d       	add	r17, r0
    2194:	11 24       	eor	r1, r1
    2196:	c8 01       	movw	r24, r16
    2198:	0d d0       	rcall	.+26     	; 0x21b4 <malloc>
    219a:	ec 01       	movw	r28, r24
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	21 f0       	breq	.+8      	; 0x21a8 <calloc+0x28>
    21a0:	a8 01       	movw	r20, r16
    21a2:	60 e0       	ldi	r22, 0x00	; 0
    21a4:	70 e0       	ldi	r23, 0x00	; 0
    21a6:	32 d1       	rcall	.+612    	; 0x240c <memset>
    21a8:	ce 01       	movw	r24, r28
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	1f 91       	pop	r17
    21b0:	0f 91       	pop	r16
    21b2:	08 95       	ret

000021b4 <malloc>:
    21b4:	0f 93       	push	r16
    21b6:	1f 93       	push	r17
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	82 30       	cpi	r24, 0x02	; 2
    21be:	91 05       	cpc	r25, r1
    21c0:	10 f4       	brcc	.+4      	; 0x21c6 <malloc+0x12>
    21c2:	82 e0       	ldi	r24, 0x02	; 2
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	e0 91 49 04 	lds	r30, 0x0449	; 0x800449 <__flp>
    21ca:	f0 91 4a 04 	lds	r31, 0x044A	; 0x80044a <__flp+0x1>
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	a0 e0       	ldi	r26, 0x00	; 0
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	30 97       	sbiw	r30, 0x00	; 0
    21d8:	19 f1       	breq	.+70     	; 0x2220 <__stack+0x21>
    21da:	40 81       	ld	r20, Z
    21dc:	51 81       	ldd	r21, Z+1	; 0x01
    21de:	02 81       	ldd	r16, Z+2	; 0x02
    21e0:	13 81       	ldd	r17, Z+3	; 0x03
    21e2:	48 17       	cp	r20, r24
    21e4:	59 07       	cpc	r21, r25
    21e6:	c8 f0       	brcs	.+50     	; 0x221a <__stack+0x1b>
    21e8:	84 17       	cp	r24, r20
    21ea:	95 07       	cpc	r25, r21
    21ec:	69 f4       	brne	.+26     	; 0x2208 <__stack+0x9>
    21ee:	10 97       	sbiw	r26, 0x00	; 0
    21f0:	31 f0       	breq	.+12     	; 0x21fe <malloc+0x4a>
    21f2:	12 96       	adiw	r26, 0x02	; 2
    21f4:	0c 93       	st	X, r16
    21f6:	12 97       	sbiw	r26, 0x02	; 2
    21f8:	13 96       	adiw	r26, 0x03	; 3
    21fa:	1c 93       	st	X, r17
    21fc:	27 c0       	rjmp	.+78     	; 0x224c <__stack+0x4d>
    21fe:	00 93 49 04 	sts	0x0449, r16	; 0x800449 <__flp>
    2202:	10 93 4a 04 	sts	0x044A, r17	; 0x80044a <__flp+0x1>
    2206:	22 c0       	rjmp	.+68     	; 0x224c <__stack+0x4d>
    2208:	21 15       	cp	r18, r1
    220a:	31 05       	cpc	r19, r1
    220c:	19 f0       	breq	.+6      	; 0x2214 <__stack+0x15>
    220e:	42 17       	cp	r20, r18
    2210:	53 07       	cpc	r21, r19
    2212:	18 f4       	brcc	.+6      	; 0x221a <__stack+0x1b>
    2214:	9a 01       	movw	r18, r20
    2216:	bd 01       	movw	r22, r26
    2218:	ef 01       	movw	r28, r30
    221a:	df 01       	movw	r26, r30
    221c:	f8 01       	movw	r30, r16
    221e:	db cf       	rjmp	.-74     	; 0x21d6 <malloc+0x22>
    2220:	21 15       	cp	r18, r1
    2222:	31 05       	cpc	r19, r1
    2224:	f9 f0       	breq	.+62     	; 0x2264 <__stack+0x65>
    2226:	28 1b       	sub	r18, r24
    2228:	39 0b       	sbc	r19, r25
    222a:	24 30       	cpi	r18, 0x04	; 4
    222c:	31 05       	cpc	r19, r1
    222e:	80 f4       	brcc	.+32     	; 0x2250 <__stack+0x51>
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	9b 81       	ldd	r25, Y+3	; 0x03
    2234:	61 15       	cp	r22, r1
    2236:	71 05       	cpc	r23, r1
    2238:	21 f0       	breq	.+8      	; 0x2242 <__stack+0x43>
    223a:	fb 01       	movw	r30, r22
    223c:	93 83       	std	Z+3, r25	; 0x03
    223e:	82 83       	std	Z+2, r24	; 0x02
    2240:	04 c0       	rjmp	.+8      	; 0x224a <__stack+0x4b>
    2242:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <__flp+0x1>
    2246:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__flp>
    224a:	fe 01       	movw	r30, r28
    224c:	32 96       	adiw	r30, 0x02	; 2
    224e:	44 c0       	rjmp	.+136    	; 0x22d8 <__stack+0xd9>
    2250:	fe 01       	movw	r30, r28
    2252:	e2 0f       	add	r30, r18
    2254:	f3 1f       	adc	r31, r19
    2256:	81 93       	st	Z+, r24
    2258:	91 93       	st	Z+, r25
    225a:	22 50       	subi	r18, 0x02	; 2
    225c:	31 09       	sbc	r19, r1
    225e:	39 83       	std	Y+1, r19	; 0x01
    2260:	28 83       	st	Y, r18
    2262:	3a c0       	rjmp	.+116    	; 0x22d8 <__stack+0xd9>
    2264:	20 91 47 04 	lds	r18, 0x0447	; 0x800447 <__brkval>
    2268:	30 91 48 04 	lds	r19, 0x0448	; 0x800448 <__brkval+0x1>
    226c:	23 2b       	or	r18, r19
    226e:	41 f4       	brne	.+16     	; 0x2280 <__stack+0x81>
    2270:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2274:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2278:	30 93 48 04 	sts	0x0448, r19	; 0x800448 <__brkval+0x1>
    227c:	20 93 47 04 	sts	0x0447, r18	; 0x800447 <__brkval>
    2280:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    2284:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    2288:	21 15       	cp	r18, r1
    228a:	31 05       	cpc	r19, r1
    228c:	41 f4       	brne	.+16     	; 0x229e <__stack+0x9f>
    228e:	2d b7       	in	r18, 0x3d	; 61
    2290:	3e b7       	in	r19, 0x3e	; 62
    2292:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2296:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    229a:	24 1b       	sub	r18, r20
    229c:	35 0b       	sbc	r19, r21
    229e:	e0 91 47 04 	lds	r30, 0x0447	; 0x800447 <__brkval>
    22a2:	f0 91 48 04 	lds	r31, 0x0448	; 0x800448 <__brkval+0x1>
    22a6:	e2 17       	cp	r30, r18
    22a8:	f3 07       	cpc	r31, r19
    22aa:	a0 f4       	brcc	.+40     	; 0x22d4 <__stack+0xd5>
    22ac:	2e 1b       	sub	r18, r30
    22ae:	3f 0b       	sbc	r19, r31
    22b0:	28 17       	cp	r18, r24
    22b2:	39 07       	cpc	r19, r25
    22b4:	78 f0       	brcs	.+30     	; 0x22d4 <__stack+0xd5>
    22b6:	ac 01       	movw	r20, r24
    22b8:	4e 5f       	subi	r20, 0xFE	; 254
    22ba:	5f 4f       	sbci	r21, 0xFF	; 255
    22bc:	24 17       	cp	r18, r20
    22be:	35 07       	cpc	r19, r21
    22c0:	48 f0       	brcs	.+18     	; 0x22d4 <__stack+0xd5>
    22c2:	4e 0f       	add	r20, r30
    22c4:	5f 1f       	adc	r21, r31
    22c6:	50 93 48 04 	sts	0x0448, r21	; 0x800448 <__brkval+0x1>
    22ca:	40 93 47 04 	sts	0x0447, r20	; 0x800447 <__brkval>
    22ce:	81 93       	st	Z+, r24
    22d0:	91 93       	st	Z+, r25
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <__stack+0xd9>
    22d4:	e0 e0       	ldi	r30, 0x00	; 0
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	cf 01       	movw	r24, r30
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	1f 91       	pop	r17
    22e0:	0f 91       	pop	r16
    22e2:	08 95       	ret

000022e4 <free>:
    22e4:	cf 93       	push	r28
    22e6:	df 93       	push	r29
    22e8:	00 97       	sbiw	r24, 0x00	; 0
    22ea:	09 f4       	brne	.+2      	; 0x22ee <free+0xa>
    22ec:	81 c0       	rjmp	.+258    	; 0x23f0 <free+0x10c>
    22ee:	fc 01       	movw	r30, r24
    22f0:	32 97       	sbiw	r30, 0x02	; 2
    22f2:	13 82       	std	Z+3, r1	; 0x03
    22f4:	12 82       	std	Z+2, r1	; 0x02
    22f6:	a0 91 49 04 	lds	r26, 0x0449	; 0x800449 <__flp>
    22fa:	b0 91 4a 04 	lds	r27, 0x044A	; 0x80044a <__flp+0x1>
    22fe:	10 97       	sbiw	r26, 0x00	; 0
    2300:	81 f4       	brne	.+32     	; 0x2322 <free+0x3e>
    2302:	20 81       	ld	r18, Z
    2304:	31 81       	ldd	r19, Z+1	; 0x01
    2306:	82 0f       	add	r24, r18
    2308:	93 1f       	adc	r25, r19
    230a:	20 91 47 04 	lds	r18, 0x0447	; 0x800447 <__brkval>
    230e:	30 91 48 04 	lds	r19, 0x0448	; 0x800448 <__brkval+0x1>
    2312:	28 17       	cp	r18, r24
    2314:	39 07       	cpc	r19, r25
    2316:	51 f5       	brne	.+84     	; 0x236c <free+0x88>
    2318:	f0 93 48 04 	sts	0x0448, r31	; 0x800448 <__brkval+0x1>
    231c:	e0 93 47 04 	sts	0x0447, r30	; 0x800447 <__brkval>
    2320:	67 c0       	rjmp	.+206    	; 0x23f0 <free+0x10c>
    2322:	ed 01       	movw	r28, r26
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	ce 17       	cp	r28, r30
    232a:	df 07       	cpc	r29, r31
    232c:	40 f4       	brcc	.+16     	; 0x233e <free+0x5a>
    232e:	4a 81       	ldd	r20, Y+2	; 0x02
    2330:	5b 81       	ldd	r21, Y+3	; 0x03
    2332:	9e 01       	movw	r18, r28
    2334:	41 15       	cp	r20, r1
    2336:	51 05       	cpc	r21, r1
    2338:	f1 f0       	breq	.+60     	; 0x2376 <free+0x92>
    233a:	ea 01       	movw	r28, r20
    233c:	f5 cf       	rjmp	.-22     	; 0x2328 <free+0x44>
    233e:	d3 83       	std	Z+3, r29	; 0x03
    2340:	c2 83       	std	Z+2, r28	; 0x02
    2342:	40 81       	ld	r20, Z
    2344:	51 81       	ldd	r21, Z+1	; 0x01
    2346:	84 0f       	add	r24, r20
    2348:	95 1f       	adc	r25, r21
    234a:	c8 17       	cp	r28, r24
    234c:	d9 07       	cpc	r29, r25
    234e:	59 f4       	brne	.+22     	; 0x2366 <free+0x82>
    2350:	88 81       	ld	r24, Y
    2352:	99 81       	ldd	r25, Y+1	; 0x01
    2354:	84 0f       	add	r24, r20
    2356:	95 1f       	adc	r25, r21
    2358:	02 96       	adiw	r24, 0x02	; 2
    235a:	91 83       	std	Z+1, r25	; 0x01
    235c:	80 83       	st	Z, r24
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	9b 81       	ldd	r25, Y+3	; 0x03
    2362:	93 83       	std	Z+3, r25	; 0x03
    2364:	82 83       	std	Z+2, r24	; 0x02
    2366:	21 15       	cp	r18, r1
    2368:	31 05       	cpc	r19, r1
    236a:	29 f4       	brne	.+10     	; 0x2376 <free+0x92>
    236c:	f0 93 4a 04 	sts	0x044A, r31	; 0x80044a <__flp+0x1>
    2370:	e0 93 49 04 	sts	0x0449, r30	; 0x800449 <__flp>
    2374:	3d c0       	rjmp	.+122    	; 0x23f0 <free+0x10c>
    2376:	e9 01       	movw	r28, r18
    2378:	fb 83       	std	Y+3, r31	; 0x03
    237a:	ea 83       	std	Y+2, r30	; 0x02
    237c:	49 91       	ld	r20, Y+
    237e:	59 91       	ld	r21, Y+
    2380:	c4 0f       	add	r28, r20
    2382:	d5 1f       	adc	r29, r21
    2384:	ec 17       	cp	r30, r28
    2386:	fd 07       	cpc	r31, r29
    2388:	61 f4       	brne	.+24     	; 0x23a2 <free+0xbe>
    238a:	80 81       	ld	r24, Z
    238c:	91 81       	ldd	r25, Z+1	; 0x01
    238e:	84 0f       	add	r24, r20
    2390:	95 1f       	adc	r25, r21
    2392:	02 96       	adiw	r24, 0x02	; 2
    2394:	e9 01       	movw	r28, r18
    2396:	99 83       	std	Y+1, r25	; 0x01
    2398:	88 83       	st	Y, r24
    239a:	82 81       	ldd	r24, Z+2	; 0x02
    239c:	93 81       	ldd	r25, Z+3	; 0x03
    239e:	9b 83       	std	Y+3, r25	; 0x03
    23a0:	8a 83       	std	Y+2, r24	; 0x02
    23a2:	e0 e0       	ldi	r30, 0x00	; 0
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	12 96       	adiw	r26, 0x02	; 2
    23a8:	8d 91       	ld	r24, X+
    23aa:	9c 91       	ld	r25, X
    23ac:	13 97       	sbiw	r26, 0x03	; 3
    23ae:	00 97       	sbiw	r24, 0x00	; 0
    23b0:	19 f0       	breq	.+6      	; 0x23b8 <free+0xd4>
    23b2:	fd 01       	movw	r30, r26
    23b4:	dc 01       	movw	r26, r24
    23b6:	f7 cf       	rjmp	.-18     	; 0x23a6 <free+0xc2>
    23b8:	8d 91       	ld	r24, X+
    23ba:	9c 91       	ld	r25, X
    23bc:	11 97       	sbiw	r26, 0x01	; 1
    23be:	9d 01       	movw	r18, r26
    23c0:	2e 5f       	subi	r18, 0xFE	; 254
    23c2:	3f 4f       	sbci	r19, 0xFF	; 255
    23c4:	82 0f       	add	r24, r18
    23c6:	93 1f       	adc	r25, r19
    23c8:	20 91 47 04 	lds	r18, 0x0447	; 0x800447 <__brkval>
    23cc:	30 91 48 04 	lds	r19, 0x0448	; 0x800448 <__brkval+0x1>
    23d0:	28 17       	cp	r18, r24
    23d2:	39 07       	cpc	r19, r25
    23d4:	69 f4       	brne	.+26     	; 0x23f0 <free+0x10c>
    23d6:	30 97       	sbiw	r30, 0x00	; 0
    23d8:	29 f4       	brne	.+10     	; 0x23e4 <free+0x100>
    23da:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <__flp+0x1>
    23de:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <__flp>
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <free+0x104>
    23e4:	13 82       	std	Z+3, r1	; 0x03
    23e6:	12 82       	std	Z+2, r1	; 0x02
    23e8:	b0 93 48 04 	sts	0x0448, r27	; 0x800448 <__brkval+0x1>
    23ec:	a0 93 47 04 	sts	0x0447, r26	; 0x800447 <__brkval>
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	08 95       	ret

000023f6 <strnlen_P>:
    23f6:	fc 01       	movw	r30, r24
    23f8:	05 90       	lpm	r0, Z+
    23fa:	61 50       	subi	r22, 0x01	; 1
    23fc:	70 40       	sbci	r23, 0x00	; 0
    23fe:	01 10       	cpse	r0, r1
    2400:	d8 f7       	brcc	.-10     	; 0x23f8 <strnlen_P+0x2>
    2402:	80 95       	com	r24
    2404:	90 95       	com	r25
    2406:	8e 0f       	add	r24, r30
    2408:	9f 1f       	adc	r25, r31
    240a:	08 95       	ret

0000240c <memset>:
    240c:	dc 01       	movw	r26, r24
    240e:	01 c0       	rjmp	.+2      	; 0x2412 <memset+0x6>
    2410:	6d 93       	st	X+, r22
    2412:	41 50       	subi	r20, 0x01	; 1
    2414:	50 40       	sbci	r21, 0x00	; 0
    2416:	e0 f7       	brcc	.-8      	; 0x2410 <memset+0x4>
    2418:	08 95       	ret

0000241a <strnlen>:
    241a:	fc 01       	movw	r30, r24
    241c:	61 50       	subi	r22, 0x01	; 1
    241e:	70 40       	sbci	r23, 0x00	; 0
    2420:	01 90       	ld	r0, Z+
    2422:	01 10       	cpse	r0, r1
    2424:	d8 f7       	brcc	.-10     	; 0x241c <strnlen+0x2>
    2426:	80 95       	com	r24
    2428:	90 95       	com	r25
    242a:	8e 0f       	add	r24, r30
    242c:	9f 1f       	adc	r25, r31
    242e:	08 95       	ret

00002430 <strrev>:
    2430:	dc 01       	movw	r26, r24
    2432:	fc 01       	movw	r30, r24
    2434:	67 2f       	mov	r22, r23
    2436:	71 91       	ld	r23, Z+
    2438:	77 23       	and	r23, r23
    243a:	e1 f7       	brne	.-8      	; 0x2434 <strrev+0x4>
    243c:	32 97       	sbiw	r30, 0x02	; 2
    243e:	04 c0       	rjmp	.+8      	; 0x2448 <strrev+0x18>
    2440:	7c 91       	ld	r23, X
    2442:	6d 93       	st	X+, r22
    2444:	70 83       	st	Z, r23
    2446:	62 91       	ld	r22, -Z
    2448:	ae 17       	cp	r26, r30
    244a:	bf 07       	cpc	r27, r31
    244c:	c8 f3       	brcs	.-14     	; 0x2440 <strrev+0x10>
    244e:	08 95       	ret

00002450 <fputc>:
    2450:	0f 93       	push	r16
    2452:	1f 93       	push	r17
    2454:	cf 93       	push	r28
    2456:	df 93       	push	r29
    2458:	fb 01       	movw	r30, r22
    245a:	23 81       	ldd	r18, Z+3	; 0x03
    245c:	21 fd       	sbrc	r18, 1
    245e:	03 c0       	rjmp	.+6      	; 0x2466 <fputc+0x16>
    2460:	8f ef       	ldi	r24, 0xFF	; 255
    2462:	9f ef       	ldi	r25, 0xFF	; 255
    2464:	2c c0       	rjmp	.+88     	; 0x24be <fputc+0x6e>
    2466:	22 ff       	sbrs	r18, 2
    2468:	16 c0       	rjmp	.+44     	; 0x2496 <fputc+0x46>
    246a:	46 81       	ldd	r20, Z+6	; 0x06
    246c:	57 81       	ldd	r21, Z+7	; 0x07
    246e:	24 81       	ldd	r18, Z+4	; 0x04
    2470:	35 81       	ldd	r19, Z+5	; 0x05
    2472:	42 17       	cp	r20, r18
    2474:	53 07       	cpc	r21, r19
    2476:	44 f4       	brge	.+16     	; 0x2488 <fputc+0x38>
    2478:	a0 81       	ld	r26, Z
    247a:	b1 81       	ldd	r27, Z+1	; 0x01
    247c:	9d 01       	movw	r18, r26
    247e:	2f 5f       	subi	r18, 0xFF	; 255
    2480:	3f 4f       	sbci	r19, 0xFF	; 255
    2482:	31 83       	std	Z+1, r19	; 0x01
    2484:	20 83       	st	Z, r18
    2486:	8c 93       	st	X, r24
    2488:	26 81       	ldd	r18, Z+6	; 0x06
    248a:	37 81       	ldd	r19, Z+7	; 0x07
    248c:	2f 5f       	subi	r18, 0xFF	; 255
    248e:	3f 4f       	sbci	r19, 0xFF	; 255
    2490:	37 83       	std	Z+7, r19	; 0x07
    2492:	26 83       	std	Z+6, r18	; 0x06
    2494:	14 c0       	rjmp	.+40     	; 0x24be <fputc+0x6e>
    2496:	8b 01       	movw	r16, r22
    2498:	ec 01       	movw	r28, r24
    249a:	fb 01       	movw	r30, r22
    249c:	00 84       	ldd	r0, Z+8	; 0x08
    249e:	f1 85       	ldd	r31, Z+9	; 0x09
    24a0:	e0 2d       	mov	r30, r0
    24a2:	19 95       	eicall
    24a4:	89 2b       	or	r24, r25
    24a6:	e1 f6       	brne	.-72     	; 0x2460 <fputc+0x10>
    24a8:	d8 01       	movw	r26, r16
    24aa:	16 96       	adiw	r26, 0x06	; 6
    24ac:	8d 91       	ld	r24, X+
    24ae:	9c 91       	ld	r25, X
    24b0:	17 97       	sbiw	r26, 0x07	; 7
    24b2:	01 96       	adiw	r24, 0x01	; 1
    24b4:	17 96       	adiw	r26, 0x07	; 7
    24b6:	9c 93       	st	X, r25
    24b8:	8e 93       	st	-X, r24
    24ba:	16 97       	sbiw	r26, 0x06	; 6
    24bc:	ce 01       	movw	r24, r28
    24be:	df 91       	pop	r29
    24c0:	cf 91       	pop	r28
    24c2:	1f 91       	pop	r17
    24c4:	0f 91       	pop	r16
    24c6:	08 95       	ret

000024c8 <__ultoa_invert>:
    24c8:	fa 01       	movw	r30, r20
    24ca:	aa 27       	eor	r26, r26
    24cc:	28 30       	cpi	r18, 0x08	; 8
    24ce:	51 f1       	breq	.+84     	; 0x2524 <__ultoa_invert+0x5c>
    24d0:	20 31       	cpi	r18, 0x10	; 16
    24d2:	81 f1       	breq	.+96     	; 0x2534 <__ultoa_invert+0x6c>
    24d4:	e8 94       	clt
    24d6:	6f 93       	push	r22
    24d8:	6e 7f       	andi	r22, 0xFE	; 254
    24da:	6e 5f       	subi	r22, 0xFE	; 254
    24dc:	7f 4f       	sbci	r23, 0xFF	; 255
    24de:	8f 4f       	sbci	r24, 0xFF	; 255
    24e0:	9f 4f       	sbci	r25, 0xFF	; 255
    24e2:	af 4f       	sbci	r26, 0xFF	; 255
    24e4:	b1 e0       	ldi	r27, 0x01	; 1
    24e6:	3e d0       	rcall	.+124    	; 0x2564 <__ultoa_invert+0x9c>
    24e8:	b4 e0       	ldi	r27, 0x04	; 4
    24ea:	3c d0       	rcall	.+120    	; 0x2564 <__ultoa_invert+0x9c>
    24ec:	67 0f       	add	r22, r23
    24ee:	78 1f       	adc	r23, r24
    24f0:	89 1f       	adc	r24, r25
    24f2:	9a 1f       	adc	r25, r26
    24f4:	a1 1d       	adc	r26, r1
    24f6:	68 0f       	add	r22, r24
    24f8:	79 1f       	adc	r23, r25
    24fa:	8a 1f       	adc	r24, r26
    24fc:	91 1d       	adc	r25, r1
    24fe:	a1 1d       	adc	r26, r1
    2500:	6a 0f       	add	r22, r26
    2502:	71 1d       	adc	r23, r1
    2504:	81 1d       	adc	r24, r1
    2506:	91 1d       	adc	r25, r1
    2508:	a1 1d       	adc	r26, r1
    250a:	20 d0       	rcall	.+64     	; 0x254c <__ultoa_invert+0x84>
    250c:	09 f4       	brne	.+2      	; 0x2510 <__ultoa_invert+0x48>
    250e:	68 94       	set
    2510:	3f 91       	pop	r19
    2512:	2a e0       	ldi	r18, 0x0A	; 10
    2514:	26 9f       	mul	r18, r22
    2516:	11 24       	eor	r1, r1
    2518:	30 19       	sub	r19, r0
    251a:	30 5d       	subi	r19, 0xD0	; 208
    251c:	31 93       	st	Z+, r19
    251e:	de f6       	brtc	.-74     	; 0x24d6 <__ultoa_invert+0xe>
    2520:	cf 01       	movw	r24, r30
    2522:	08 95       	ret
    2524:	46 2f       	mov	r20, r22
    2526:	47 70       	andi	r20, 0x07	; 7
    2528:	40 5d       	subi	r20, 0xD0	; 208
    252a:	41 93       	st	Z+, r20
    252c:	b3 e0       	ldi	r27, 0x03	; 3
    252e:	0f d0       	rcall	.+30     	; 0x254e <__ultoa_invert+0x86>
    2530:	c9 f7       	brne	.-14     	; 0x2524 <__ultoa_invert+0x5c>
    2532:	f6 cf       	rjmp	.-20     	; 0x2520 <__ultoa_invert+0x58>
    2534:	46 2f       	mov	r20, r22
    2536:	4f 70       	andi	r20, 0x0F	; 15
    2538:	40 5d       	subi	r20, 0xD0	; 208
    253a:	4a 33       	cpi	r20, 0x3A	; 58
    253c:	18 f0       	brcs	.+6      	; 0x2544 <__ultoa_invert+0x7c>
    253e:	49 5d       	subi	r20, 0xD9	; 217
    2540:	31 fd       	sbrc	r19, 1
    2542:	40 52       	subi	r20, 0x20	; 32
    2544:	41 93       	st	Z+, r20
    2546:	02 d0       	rcall	.+4      	; 0x254c <__ultoa_invert+0x84>
    2548:	a9 f7       	brne	.-22     	; 0x2534 <__ultoa_invert+0x6c>
    254a:	ea cf       	rjmp	.-44     	; 0x2520 <__ultoa_invert+0x58>
    254c:	b4 e0       	ldi	r27, 0x04	; 4
    254e:	a6 95       	lsr	r26
    2550:	97 95       	ror	r25
    2552:	87 95       	ror	r24
    2554:	77 95       	ror	r23
    2556:	67 95       	ror	r22
    2558:	ba 95       	dec	r27
    255a:	c9 f7       	brne	.-14     	; 0x254e <__ultoa_invert+0x86>
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	61 05       	cpc	r22, r1
    2560:	71 05       	cpc	r23, r1
    2562:	08 95       	ret
    2564:	9b 01       	movw	r18, r22
    2566:	ac 01       	movw	r20, r24
    2568:	0a 2e       	mov	r0, r26
    256a:	06 94       	lsr	r0
    256c:	57 95       	ror	r21
    256e:	47 95       	ror	r20
    2570:	37 95       	ror	r19
    2572:	27 95       	ror	r18
    2574:	ba 95       	dec	r27
    2576:	c9 f7       	brne	.-14     	; 0x256a <__ultoa_invert+0xa2>
    2578:	62 0f       	add	r22, r18
    257a:	73 1f       	adc	r23, r19
    257c:	84 1f       	adc	r24, r20
    257e:	95 1f       	adc	r25, r21
    2580:	a0 1d       	adc	r26, r0
    2582:	08 95       	ret

00002584 <_exit>:
    2584:	f8 94       	cli

00002586 <__stop_program>:
    2586:	ff cf       	rjmp	.-2      	; 0x2586 <__stop_program>
