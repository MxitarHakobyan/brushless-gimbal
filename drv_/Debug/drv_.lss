
drv_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000242  00800200  000019f2  00001a86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  00800442  00800442  00001cc8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00001d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023bb  00000000  00000000  00001f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000128f  00000000  00000000  000042d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001064  00000000  00000000  00005566  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004bc  00000000  00000000  000065cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a9a  00000000  00000000  00006a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001428  00000000  00000000  00007522  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  0000894a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	81 c0       	rjmp	.+258    	; 0x160 <__vector_23>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3e c1       	rjmp	.+636    	; 0x33a <__vector_47>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 ef       	ldi	r30, 0xF2	; 242
      fc:	f9 e1       	ldi	r31, 0x19	; 25
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a2 34       	cpi	r26, 0x42	; 66
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	24 e0       	ldi	r18, 0x04	; 4
     110:	a2 e4       	ldi	r26, 0x42	; 66
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a9 36       	cpi	r26, 0x69	; 105
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	81 d1       	rcall	.+770    	; 0x422 <main>
     120:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <init_gpio>:
	*/
	//DDRB|=(1<<PB5);//LED13
	//sbi(DDRB,4);//digital 10
	//sbi(DDRB,5);//digital 11
	//sbi(DDRB,6);//digital 12
	sbi(DDRH,3);//digital 6 OC4A
     126:	e1 e0       	ldi	r30, 0x01	; 1
     128:	f1 e0       	ldi	r31, 0x01	; 1
     12a:	80 81       	ld	r24, Z
     12c:	88 60       	ori	r24, 0x08	; 8
     12e:	80 83       	st	Z, r24
	sbi(DDRH,4);//digital 7 OC4B
     130:	80 81       	ld	r24, Z
     132:	80 61       	ori	r24, 0x10	; 16
     134:	80 83       	st	Z, r24
	sbi(DDRH,5);//digital 8 OC4C
     136:	80 81       	ld	r24, Z
     138:	80 62       	ori	r24, 0x20	; 32
     13a:	80 83       	st	Z, r24
     13c:	08 95       	ret

0000013e <uart_putchar>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     13e:	cf 93       	push	r28
     140:	c8 2f       	mov	r28, r24
     142:	8a 30       	cpi	r24, 0x0A	; 10
     144:	11 f4       	brne	.+4      	; 0x14a <uart_putchar+0xc>
     146:	8d e0       	ldi	r24, 0x0D	; 13
     148:	fa df       	rcall	.-12     	; 0x13e <uart_putchar>
     14a:	e0 ec       	ldi	r30, 0xC0	; 192
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	80 81       	ld	r24, Z
     150:	85 ff       	sbrs	r24, 5
     152:	fd cf       	rjmp	.-6      	; 0x14e <uart_putchar+0x10>
     154:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	cf 91       	pop	r28
     15e:	08 95       	ret

00000160 <__vector_23>:
     160:	1f 92       	push	r1
     162:	0f 92       	push	r0
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	0f 92       	push	r0
     168:	11 24       	eor	r1, r1
     16a:	2f 93       	push	r18
     16c:	3f 93       	push	r19
     16e:	8f 93       	push	r24
     170:	9f 93       	push	r25
     172:	af 93       	push	r26
     174:	bf 93       	push	r27
     176:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <timer0_millis>
     17a:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <timer0_millis+0x1>
     17e:	a0 91 45 04 	lds	r26, 0x0445	; 0x800445 <timer0_millis+0x2>
     182:	b0 91 46 04 	lds	r27, 0x0446	; 0x800446 <timer0_millis+0x3>
     186:	30 91 42 04 	lds	r19, 0x0442	; 0x800442 <__data_end>
     18a:	23 e0       	ldi	r18, 0x03	; 3
     18c:	23 0f       	add	r18, r19
     18e:	2d 37       	cpi	r18, 0x7D	; 125
     190:	20 f4       	brcc	.+8      	; 0x19a <__vector_23+0x3a>
     192:	01 96       	adiw	r24, 0x01	; 1
     194:	a1 1d       	adc	r26, r1
     196:	b1 1d       	adc	r27, r1
     198:	05 c0       	rjmp	.+10     	; 0x1a4 <__vector_23+0x44>
     19a:	26 e8       	ldi	r18, 0x86	; 134
     19c:	23 0f       	add	r18, r19
     19e:	02 96       	adiw	r24, 0x02	; 2
     1a0:	a1 1d       	adc	r26, r1
     1a2:	b1 1d       	adc	r27, r1
     1a4:	20 93 42 04 	sts	0x0442, r18	; 0x800442 <__data_end>
     1a8:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <timer0_millis>
     1ac:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <timer0_millis+0x1>
     1b0:	a0 93 45 04 	sts	0x0445, r26	; 0x800445 <timer0_millis+0x2>
     1b4:	b0 93 46 04 	sts	0x0446, r27	; 0x800446 <timer0_millis+0x3>
     1b8:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <timer0_overflow_count>
     1bc:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <timer0_overflow_count+0x1>
     1c0:	a0 91 49 04 	lds	r26, 0x0449	; 0x800449 <timer0_overflow_count+0x2>
     1c4:	b0 91 4a 04 	lds	r27, 0x044A	; 0x80044a <timer0_overflow_count+0x3>
     1c8:	01 96       	adiw	r24, 0x01	; 1
     1ca:	a1 1d       	adc	r26, r1
     1cc:	b1 1d       	adc	r27, r1
     1ce:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <timer0_overflow_count>
     1d2:	90 93 48 04 	sts	0x0448, r25	; 0x800448 <timer0_overflow_count+0x1>
     1d6:	a0 93 49 04 	sts	0x0449, r26	; 0x800449 <timer0_overflow_count+0x2>
     1da:	b0 93 4a 04 	sts	0x044A, r27	; 0x80044a <timer0_overflow_count+0x3>
     1de:	bf 91       	pop	r27
     1e0:	af 91       	pop	r26
     1e2:	9f 91       	pop	r25
     1e4:	8f 91       	pop	r24
     1e6:	3f 91       	pop	r19
     1e8:	2f 91       	pop	r18
     1ea:	0f 90       	pop	r0
     1ec:	0f be       	out	0x3f, r0	; 63
     1ee:	0f 90       	pop	r0
     1f0:	1f 90       	pop	r1
     1f2:	18 95       	reti

000001f4 <micros>:
     1f4:	3f b7       	in	r19, 0x3f	; 63
     1f6:	f8 94       	cli
     1f8:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <timer0_overflow_count>
     1fc:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <timer0_overflow_count+0x1>
     200:	a0 91 49 04 	lds	r26, 0x0449	; 0x800449 <timer0_overflow_count+0x2>
     204:	b0 91 4a 04 	lds	r27, 0x044A	; 0x80044a <timer0_overflow_count+0x3>
     208:	26 b5       	in	r18, 0x26	; 38
     20a:	a8 9b       	sbis	0x15, 0	; 21
     20c:	05 c0       	rjmp	.+10     	; 0x218 <micros+0x24>
     20e:	2f 3f       	cpi	r18, 0xFF	; 255
     210:	19 f0       	breq	.+6      	; 0x218 <micros+0x24>
     212:	01 96       	adiw	r24, 0x01	; 1
     214:	a1 1d       	adc	r26, r1
     216:	b1 1d       	adc	r27, r1
     218:	3f bf       	out	0x3f, r19	; 63
     21a:	ba 2f       	mov	r27, r26
     21c:	a9 2f       	mov	r26, r25
     21e:	98 2f       	mov	r25, r24
     220:	88 27       	eor	r24, r24
     222:	82 0f       	add	r24, r18
     224:	91 1d       	adc	r25, r1
     226:	a1 1d       	adc	r26, r1
     228:	b1 1d       	adc	r27, r1
     22a:	bc 01       	movw	r22, r24
     22c:	cd 01       	movw	r24, r26
     22e:	66 0f       	add	r22, r22
     230:	77 1f       	adc	r23, r23
     232:	88 1f       	adc	r24, r24
     234:	99 1f       	adc	r25, r25
     236:	66 0f       	add	r22, r22
     238:	77 1f       	adc	r23, r23
     23a:	88 1f       	adc	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	08 95       	ret

00000240 <PWM_update>:
{
	PWM_update();
}
void PWM_update()//motor pwm update 
{
	U_PWM=pwmSin[U_step];
     240:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <U_step>
     244:	f0 91 4c 04 	lds	r31, 0x044C	; 0x80044c <U_step+0x1>
     248:	ef 5c       	subi	r30, 0xCF	; 207
     24a:	fd 4f       	sbci	r31, 0xFD	; 253
     24c:	80 81       	ld	r24, Z
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     254:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
	V_PWM=pwmSin[V_step];
     258:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <V_step>
     25c:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <V_step+0x1>
     260:	ef 5c       	subi	r30, 0xCF	; 207
     262:	fd 4f       	sbci	r31, 0xFD	; 253
     264:	80 81       	ld	r24, Z
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     26c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
	W_PWM=pwmSin[W_step];
     270:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <W_step>
     274:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <W_step+0x1>
     278:	ef 5c       	subi	r30, 0xCF	; 207
     27a:	fd 4f       	sbci	r31, 0xFD	; 253
     27c:	80 81       	ld	r24, Z
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
     284:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
	U_step=U_step+incr;
     288:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <incr>
     28c:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <incr+0x1>
     290:	40 91 4b 04 	lds	r20, 0x044B	; 0x80044b <U_step>
     294:	50 91 4c 04 	lds	r21, 0x044C	; 0x80044c <U_step+0x1>
     298:	46 0f       	add	r20, r22
     29a:	57 1f       	adc	r21, r23
     29c:	50 93 4c 04 	sts	0x044C, r21	; 0x80044c <U_step+0x1>
     2a0:	40 93 4b 04 	sts	0x044B, r20	; 0x80044b <U_step>
	V_step=V_step+incr;
     2a4:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <V_step>
     2a8:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <V_step+0x1>
     2ac:	26 0f       	add	r18, r22
     2ae:	37 1f       	adc	r19, r23
     2b0:	30 93 0d 02 	sts	0x020D, r19	; 0x80020d <V_step+0x1>
     2b4:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <V_step>
	W_step=W_step+incr;
     2b8:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <W_step>
     2bc:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <W_step+0x1>
     2c0:	86 0f       	add	r24, r22
     2c2:	97 1f       	adc	r25, r23
     2c4:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <W_step+0x1>
     2c8:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <W_step>
	if(U_step > sinTableSize)  U_step = 0;
     2cc:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <sinTableSize>
     2d0:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <sinTableSize+0x1>
     2d4:	64 17       	cp	r22, r20
     2d6:	75 07       	cpc	r23, r21
     2d8:	2c f4       	brge	.+10     	; 0x2e4 <PWM_update+0xa4>
     2da:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <U_step+0x1>
     2de:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <U_step>
     2e2:	06 c0       	rjmp	.+12     	; 0x2f0 <PWM_update+0xb0>
	if(U_step < 0)  U_step = sinTableSize;
     2e4:	55 23       	and	r21, r21
     2e6:	24 f4       	brge	.+8      	; 0x2f0 <PWM_update+0xb0>
     2e8:	70 93 4c 04 	sts	0x044C, r23	; 0x80044c <U_step+0x1>
     2ec:	60 93 4b 04 	sts	0x044B, r22	; 0x80044b <U_step>
	
	if(V_step > sinTableSize)  V_step = 0;
     2f0:	62 17       	cp	r22, r18
     2f2:	73 07       	cpc	r23, r19
     2f4:	2c f4       	brge	.+10     	; 0x300 <PWM_update+0xc0>
     2f6:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <V_step+0x1>
     2fa:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <V_step>
     2fe:	06 c0       	rjmp	.+12     	; 0x30c <PWM_update+0xcc>
	if(V_step < 0)  V_step = sinTableSize;
     300:	33 23       	and	r19, r19
     302:	24 f4       	brge	.+8      	; 0x30c <PWM_update+0xcc>
     304:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <V_step+0x1>
     308:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <V_step>
	
	if(W_step > sinTableSize)  W_step = 0;
     30c:	68 17       	cp	r22, r24
     30e:	79 07       	cpc	r23, r25
     310:	2c f4       	brge	.+10     	; 0x31c <PWM_update+0xdc>
     312:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <W_step+0x1>
     316:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <W_step>
     31a:	06 c0       	rjmp	.+12     	; 0x328 <PWM_update+0xe8>
	if(W_step < 0) W_step = sinTableSize;
     31c:	99 23       	and	r25, r25
     31e:	24 f4       	brge	.+8      	; 0x328 <PWM_update+0xe8>
     320:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <W_step+0x1>
     324:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <W_step>
	//_delay_us(100);
	OCR5A=pwm_delay;
     328:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <pwm_delay>
     32c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <pwm_delay+0x1>
     330:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     334:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     338:	08 95       	ret

0000033a <__vector_47>:
	SREG = oldSREG;

	return m;
}
ISR(TIMER5_COMPA_vect)//motor update interrupt routine
{
     33a:	1f 92       	push	r1
     33c:	0f 92       	push	r0
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	0f 92       	push	r0
     342:	11 24       	eor	r1, r1
     344:	0b b6       	in	r0, 0x3b	; 59
     346:	0f 92       	push	r0
     348:	2f 93       	push	r18
     34a:	3f 93       	push	r19
     34c:	4f 93       	push	r20
     34e:	5f 93       	push	r21
     350:	6f 93       	push	r22
     352:	7f 93       	push	r23
     354:	8f 93       	push	r24
     356:	9f 93       	push	r25
     358:	af 93       	push	r26
     35a:	bf 93       	push	r27
     35c:	ef 93       	push	r30
	PWM_update();
     35e:	ff 93       	push	r31
}
     360:	6f df       	rcall	.-290    	; 0x240 <PWM_update>
     362:	ff 91       	pop	r31
     364:	ef 91       	pop	r30
     366:	bf 91       	pop	r27
     368:	af 91       	pop	r26
     36a:	9f 91       	pop	r25
     36c:	8f 91       	pop	r24
     36e:	7f 91       	pop	r23
     370:	6f 91       	pop	r22
     372:	5f 91       	pop	r21
     374:	4f 91       	pop	r20
     376:	3f 91       	pop	r19
     378:	2f 91       	pop	r18
     37a:	0f 90       	pop	r0
     37c:	0b be       	out	0x3b, r0	; 59
     37e:	0f 90       	pop	r0
     380:	0f be       	out	0x3f, r0	; 63
     382:	0f 90       	pop	r0
     384:	1f 90       	pop	r1
     386:	18 95       	reti

00000388 <print16>:
	OCR5A=pwm_delay;
}
void print16(uint16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
     394:	2a 97       	sbiw	r28, 0x0a	; 10
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	f8 94       	cli
     39a:	de bf       	out	0x3e, r29	; 62
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     3a0:	4a e0       	ldi	r20, 0x0A	; 10
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5f       	subi	r16, 0xFF	; 255
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	b8 01       	movw	r22, r16
     3aa:	fc 01       	movw	r30, r24
     3ac:	80 81       	ld	r24, Z
     3ae:	91 81       	ldd	r25, Z+1	; 0x01
     3b0:	6a d6       	rcall	.+3284   	; 0x1086 <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     3b2:	1f 93       	push	r17
     3b4:	0f 93       	push	r16
     3b6:	d4 d6       	rcall	.+3496   	; 0x1160 <printf>
	//printf("\n");
}
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	2a 96       	adiw	r28, 0x0a	; 10
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	cd bf       	out	0x3d, r28	; 61
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	0f 91       	pop	r16
     3d0:	08 95       	ret

000003d2 <print16ln>:

void print16ln(uint16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
     3de:	2a 97       	sbiw	r28, 0x0a	; 10
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	f8 94       	cli
     3e4:	de bf       	out	0x3e, r29	; 62
     3e6:	0f be       	out	0x3f, r0	; 63
     3e8:	cd bf       	out	0x3d, r28	; 61
     3ea:	4a e0       	ldi	r20, 0x0A	; 10
     3ec:	8e 01       	movw	r16, r28
     3ee:	0f 5f       	subi	r16, 0xFF	; 255
     3f0:	1f 4f       	sbci	r17, 0xFF	; 255
     3f2:	b8 01       	movw	r22, r16
     3f4:	fc 01       	movw	r30, r24
     3f6:	80 81       	ld	r24, Z
     3f8:	91 81       	ldd	r25, Z+1	; 0x01
     3fa:	45 d6       	rcall	.+3210   	; 0x1086 <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     3fc:	1f 93       	push	r17
     3fe:	0f 93       	push	r16
	printf("\n");
     400:	af d6       	rcall	.+3422   	; 0x1160 <printf>
     402:	8a e0       	ldi	r24, 0x0A	; 10
     404:	90 e0       	ldi	r25, 0x00	; 0
}
     406:	bf d6       	rcall	.+3454   	; 0x1186 <putchar>
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	2a 96       	adiw	r28, 0x0a	; 10
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	de bf       	out	0x3e, r29	; 62
     414:	0f be       	out	0x3f, r0	; 63
     416:	cd bf       	out	0x3d, r28	; 61
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	08 95       	ret

00000422 <main>:
//sizeof(pwmSin)/sizeof(int); // Find lookup table size
uint8_t phase = 60;//sinTableSize / 3;         // Find phase shift and initial A, B C phase values
uint16_t pwm_delay=2000;

int main(void)
{	
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62
     42a:	a9 97       	sbiw	r28, 0x29	; 41
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61
	cli();
	init_gpio();
		#ifdef GYRO
			i2c_init();
     436:	f8 94       	cli
		#endif
	USART_Init(MY_UBRR);
     438:	76 de       	rcall	.-788    	; 0x126 <init_gpio>
     43a:	1a d3       	rcall	.+1588   	; 0xa70 <i2c_init>
     43c:	80 e1       	ldi	r24, 0x10	; 16
	uart_str = fdevopen(uart_putchar, NULL);
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	c8 d3       	rcall	.+1936   	; 0xbd2 <USART_Init>
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	70 e0       	ldi	r23, 0x00	; 0
		
	setup_timer0();
     446:	8f e9       	ldi	r24, 0x9F	; 159
	Enable_timer0_overflow_interrupt();//micros
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	40 d6       	rcall	.+3200   	; 0x10cc <fdevopen>
	
	setup_timer4();//pwm
     44c:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <uart_str+0x1>
	
	setup_timer5();
     450:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <uart_str>
	Enable_timer5_compare_interrupt();//motor
     454:	00 d3       	rcall	.+1536   	; 0xa56 <setup_timer0>
     456:	06 d3       	rcall	.+1548   	; 0xa64 <Enable_timer0_overflow_interrupt>

	OCR5A=4000;
     458:	db d2       	rcall	.+1462   	; 0xa10 <setup_timer4>
     45a:	ee d2       	rcall	.+1500   	; 0xa38 <setup_timer5>
     45c:	f6 d2       	rcall	.+1516   	; 0xa4a <Enable_timer5_compare_interrupt>
     45e:	80 ea       	ldi	r24, 0xA0	; 160
     460:	9f e0       	ldi	r25, 0x0F	; 15
     462:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
		float acc_total_vector=0;
		float angle_pitch_acc=0;
		float angle_roll_acc=0;
		bool set_gyro_angles=false;
			#ifdef CALIBERATED_DATA
				int32_t gyroX_calib=0;
     466:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     46a:	1d 86       	std	Y+13, r1	; 0x0d
				int32_t gyroY_calib=0;
     46c:	1e 86       	std	Y+14, r1	; 0x0e
     46e:	1f 86       	std	Y+15, r1	; 0x0f
     470:	18 8a       	std	Y+16, r1	; 0x10
     472:	19 8a       	std	Y+17, r1	; 0x11
				int32_t gyroZ_calib=0;
     474:	1a 8a       	std	Y+18, r1	; 0x12
     476:	1b 8a       	std	Y+19, r1	; 0x13
     478:	1c 8a       	std	Y+20, r1	; 0x14
				int32_t accelX_calib=0;
				int32_t accelY_calib=0;
				int32_t accelZ_calib=0;
				mpu6050_calibrate_gyro(&gyroX_calib,&gyroY_calib,&gyroZ_calib);
     47a:	1d 8a       	std	Y+21, r1	; 0x15
     47c:	1e 8a       	std	Y+22, r1	; 0x16
     47e:	1f 8a       	std	Y+23, r1	; 0x17
     480:	18 8e       	std	Y+24, r1	; 0x18
     482:	ae 01       	movw	r20, r28
     484:	4b 5e       	subi	r20, 0xEB	; 235
     486:	5f 4f       	sbci	r21, 0xFF	; 255
				//mpu6050_calibrate_accel(&accelX_calib,&accelY_calib,&accelZ_calib);
			#endif
		mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV,7);
     488:	be 01       	movw	r22, r28
     48a:	6f 5e       	subi	r22, 0xEF	; 239
		mpu6050_writeByte(MPU6050_RA_CONFIG,0x00);
     48c:	7f 4f       	sbci	r23, 0xFF	; 255
     48e:	ce 01       	movw	r24, r28
     490:	0d 96       	adiw	r24, 0x0d	; 13
		mpu6050_writeByte(MPU6050_RA_GYRO_CONFIG,0x08);//gyro sensitivity set to 500 o/s
     492:	40 d1       	rcall	.+640    	; 0x714 <mpu6050_calibrate_gyro>
     494:	67 e0       	ldi	r22, 0x07	; 7
     496:	89 e1       	ldi	r24, 0x19	; 25
     498:	f4 d1       	rcall	.+1000   	; 0x882 <mpu6050_writeByte>
		mpu6050_writeByte(MPU6050_RA_ACCEL_CONFIG,0x10);//accel sensitivity -/+ 8g
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	8a e1       	ldi	r24, 0x1A	; 26
     49e:	f1 d1       	rcall	.+994    	; 0x882 <mpu6050_writeByte>
     4a0:	68 e0       	ldi	r22, 0x08	; 8
		mpu6050_writeByte(MPU6050_RA_PWR_MGMT_1,0x01);
     4a2:	8b e1       	ldi	r24, 0x1B	; 27
     4a4:	ee d1       	rcall	.+988    	; 0x882 <mpu6050_writeByte>
     4a6:	60 e1       	ldi	r22, 0x10	; 16
     4a8:	8c e1       	ldi	r24, 0x1C	; 28
	#endif
	/*-----------------end mpu definition -----------------*/
	sei();
     4aa:	eb d1       	rcall	.+982    	; 0x882 <mpu6050_writeByte>
		float angle_pitch=0;
		float angle_roll=0;
		float acc_total_vector=0;
		float angle_pitch_acc=0;
		float angle_roll_acc=0;
		bool set_gyro_angles=false;
     4ac:	61 e0       	ldi	r22, 0x01	; 1
     4ae:	8b e6       	ldi	r24, 0x6B	; 107
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		float angle_pitch=0;
		float angle_roll=0;
     4b0:	e8 d1       	rcall	.+976    	; 0x882 <mpu6050_writeByte>
     4b2:	78 94       	sei
     4b4:	c1 2c       	mov	r12, r1
     4b6:	d1 2c       	mov	r13, r1
		int16_t gyro_y;
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		float angle_pitch=0;
     4b8:	31 2c       	mov	r3, r1
     4ba:	21 2c       	mov	r2, r1
     4bc:	1f a2       	std	Y+39, r1	; 0x27
     4be:	18 a6       	std	Y+40, r1	; 0x28
					 angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;     //Correct the drift of the gyro pitch angle with the accelerometer pitch angle
					 angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;        //Correct the drift of the gyro roll angle with the accelerometer roll angle
				}
				else{                                                                //At first start
					 angle_pitch = angle_pitch_acc;                                     //Set the gyro pitch angle equal to the accelerometer pitch angle
					 angle_roll = angle_roll_acc;                                       //Set the gyro roll angle equal to the accelerometer roll angle
     4c0:	71 2c       	mov	r7, r1
     4c2:	61 2c       	mov	r6, r1
	/*-----------------end mpu definition -----------------*/
	sei();
    while (1) 
    {
		#ifdef GYRO
    		mpu6050_getRawData(&accel_x,&accel_y,&accel_z,&gyro_x,&gyro_y,&gyro_z);//15us to do
     4c4:	51 2c       	mov	r5, r1
     4c6:	41 2c       	mov	r4, r1
     4c8:	5b 8e       	std	Y+27, r5	; 0x1b
     4ca:	49 a6       	std	Y+41, r4	; 0x29
     4cc:	ce 01       	movw	r24, r28
     4ce:	05 96       	adiw	r24, 0x05	; 5
     4d0:	7c 01       	movw	r14, r24
     4d2:	8e 01       	movw	r16, r28
     4d4:	0d 5f       	subi	r16, 0xFD	; 253
     4d6:	1f 4f       	sbci	r17, 0xFF	; 255
     4d8:	9e 01       	movw	r18, r28
     4da:	2f 5f       	subi	r18, 0xFF	; 255
     4dc:	3f 4f       	sbci	r19, 0xFF	; 255
     4de:	ae 01       	movw	r20, r28
     4e0:	45 5f       	subi	r20, 0xF5	; 245
     4e2:	5f 4f       	sbci	r21, 0xFF	; 255
     4e4:	be 01       	movw	r22, r28
		#ifdef GYRO
			#ifdef CALIBERATED_DATA
				accX;
				accY;
				accZ;
				grX;
     4e6:	67 5f       	subi	r22, 0xF7	; 247
     4e8:	7f 4f       	sbci	r23, 0xFF	; 255
     4ea:	02 96       	adiw	r24, 0x02	; 2
     4ec:	26 d2       	rcall	.+1100   	; 0x93a <mpu6050_getRawData>
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	9a 81       	ldd	r25, Y+2	; 0x02
     4f2:	2d 85       	ldd	r18, Y+13	; 0x0d
				grY;
     4f4:	3e 85       	ldd	r19, Y+14	; 0x0e
     4f6:	82 1b       	sub	r24, r18
     4f8:	93 0b       	sbc	r25, r19
     4fa:	9a 83       	std	Y+2, r25	; 0x02
     4fc:	89 83       	std	Y+1, r24	; 0x01
     4fe:	8b 81       	ldd	r24, Y+3	; 0x03
				grZ;
     500:	9c 81       	ldd	r25, Y+4	; 0x04
     502:	29 89       	ldd	r18, Y+17	; 0x11
     504:	3a 89       	ldd	r19, Y+18	; 0x12
     506:	82 1b       	sub	r24, r18
     508:	93 0b       	sbc	r25, r19
     50a:	9c 83       	std	Y+4, r25	; 0x04
     50c:	8b 83       	std	Y+3, r24	; 0x03
			printf("\n");
			/*--------end------*/			
		#else
			
				
				double dt = (double)((micros() - timer1));
     50e:	8d 81       	ldd	r24, Y+5	; 0x05
     510:	9e 81       	ldd	r25, Y+6	; 0x06
     512:	2d 89       	ldd	r18, Y+21	; 0x15
     514:	3e 89       	ldd	r19, Y+22	; 0x16
     516:	82 1b       	sub	r24, r18
     518:	93 0b       	sbc	r25, r19
     51a:	9e 83       	std	Y+6, r25	; 0x06
     51c:	8d 83       	std	Y+5, r24	; 0x05
     51e:	6a de       	rcall	.-812    	; 0x1f4 <micros>
     520:	68 19       	sub	r22, r8
     522:	79 09       	sbc	r23, r9
				timer1=micros();
     524:	8a 09       	sbc	r24, r10
     526:	9b 09       	sbc	r25, r11
     528:	58 d4       	rcall	.+2224   	; 0xdda <__floatunsisf>
				double hz=1000000/dt;
     52a:	6f 8f       	std	Y+31, r22	; 0x1f
     52c:	78 a3       	std	Y+32, r23	; 0x20
     52e:	89 a3       	std	Y+33, r24	; 0x21
     530:	9a a3       	std	Y+34, r25	; 0x22
     532:	60 de       	rcall	.-832    	; 0x1f4 <micros>
     534:	4b 01       	movw	r8, r22
     536:	5c 01       	movw	r10, r24
     538:	2f 8d       	ldd	r18, Y+31	; 0x1f
     53a:	38 a1       	ldd	r19, Y+32	; 0x20
     53c:	49 a1       	ldd	r20, Y+33	; 0x21
     53e:	5a a1       	ldd	r21, Y+34	; 0x22
				double gyroXrate = gyro_x  / 65.5 / hz; // Convert to deg/s
				double gyroYrate = gyro_y  / 65.5 / hz; // Convert to deg/s
				
				angle_pitch += gyroXrate; //Calculate the traveled pitch angle and add this to the angle_pitch variable
     540:	60 e0       	ldi	r22, 0x00	; 0
     542:	74 e2       	ldi	r23, 0x24	; 36
     544:	84 e7       	ldi	r24, 0x74	; 116
     546:	99 e4       	ldi	r25, 0x49	; 73
     548:	b4 d3       	rcall	.+1896   	; 0xcb2 <__divsf3>
     54a:	6b a3       	std	Y+35, r22	; 0x23
     54c:	7c a3       	std	Y+36, r23	; 0x24
     54e:	8d a3       	std	Y+37, r24	; 0x25
     550:	9e a3       	std	Y+38, r25	; 0x26
     552:	69 81       	ldd	r22, Y+1	; 0x01
     554:	7a 81       	ldd	r23, Y+2	; 0x02
     556:	07 2e       	mov	r0, r23
     558:	00 0c       	add	r0, r0
     55a:	88 0b       	sbc	r24, r24
     55c:	99 0b       	sbc	r25, r25
     55e:	3f d4       	rcall	.+2174   	; 0xdde <__floatsisf>
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	43 e8       	ldi	r20, 0x83	; 131
     566:	52 e4       	ldi	r21, 0x42	; 66
     568:	a4 d3       	rcall	.+1864   	; 0xcb2 <__divsf3>
     56a:	2b a1       	ldd	r18, Y+35	; 0x23
     56c:	3c a1       	ldd	r19, Y+36	; 0x24
     56e:	4d a1       	ldd	r20, Y+37	; 0x25
     570:	5e a1       	ldd	r21, Y+38	; 0x26
				angle_roll += gyroYrate;  //Calculate the traveled roll angle and add this to the angle_roll variable
     572:	9f d3       	rcall	.+1854   	; 0xcb2 <__divsf3>
     574:	23 2d       	mov	r18, r3
     576:	32 2d       	mov	r19, r2
     578:	4b 8d       	ldd	r20, Y+27	; 0x1b
     57a:	59 a5       	ldd	r21, Y+41	; 0x29
     57c:	36 d3       	rcall	.+1644   	; 0xbea <__addsf3>
     57e:	6b 8f       	std	Y+27, r22	; 0x1b
     580:	7c 8f       	std	Y+28, r23	; 0x1c
     582:	8d 8f       	std	Y+29, r24	; 0x1d
     584:	9e 8f       	std	Y+30, r25	; 0x1e
     586:	6b 81       	ldd	r22, Y+3	; 0x03
     588:	7c 81       	ldd	r23, Y+4	; 0x04
     58a:	07 2e       	mov	r0, r23
     58c:	00 0c       	add	r0, r0
     58e:	88 0b       	sbc	r24, r24
     590:	99 0b       	sbc	r25, r25
     592:	25 d4       	rcall	.+2122   	; 0xdde <__floatsisf>
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	43 e8       	ldi	r20, 0x83	; 131
     59a:	52 e4       	ldi	r21, 0x42	; 66
     59c:	8a d3       	rcall	.+1812   	; 0xcb2 <__divsf3>
				////57.296 = 1 / (3.142 / 180) The Arduino asin function is in radians
				//acc_total_vector*=100;
				//angle_pitch_acc = asin((float)accel_y/acc_total_vector)* 57.296;       //Calculate the pitch angle
				//angle_roll_acc = asin((float)accel_x/acc_total_vector)* -57.296;       //Calculate the roll angle
				
				uint16_t reg=angle_pitch;
     59e:	2b a1       	ldd	r18, Y+35	; 0x23
     5a0:	3c a1       	ldd	r19, Y+36	; 0x24
     5a2:	4d a1       	ldd	r20, Y+37	; 0x25
     5a4:	5e a1       	ldd	r21, Y+38	; 0x26
     5a6:	85 d3       	rcall	.+1802   	; 0xcb2 <__divsf3>
				printf(" ");
     5a8:	27 2d       	mov	r18, r7
     5aa:	36 2d       	mov	r19, r6
     5ac:	4f a1       	ldd	r20, Y+39	; 0x27
				printf("gyrox_angle= ");
     5ae:	58 a5       	ldd	r21, Y+40	; 0x28
     5b0:	1c d3       	rcall	.+1592   	; 0xbea <__addsf3>
     5b2:	2b 01       	movw	r4, r22
     5b4:	3c 01       	movw	r6, r24
     5b6:	6b 8d       	ldd	r22, Y+27	; 0x1b
				print16(&reg);
     5b8:	7c 8d       	ldd	r23, Y+28	; 0x1c
     5ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
     5bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
				reg=angle_roll;
     5be:	e1 d3       	rcall	.+1986   	; 0xd82 <__fixunssfsi>
     5c0:	7a 8f       	std	Y+26, r23	; 0x1a
     5c2:	69 8f       	std	Y+25, r22	; 0x19
     5c4:	80 e2       	ldi	r24, 0x20	; 32
     5c6:	90 e0       	ldi	r25, 0x00	; 0
				printf(" ");
     5c8:	de d5       	rcall	.+3004   	; 0x1186 <putchar>
     5ca:	80 e1       	ldi	r24, 0x10	; 16
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	9f 93       	push	r25
				printf("gyroy_angle= ");
     5d0:	8f 93       	push	r24
     5d2:	c6 d5       	rcall	.+2956   	; 0x1160 <printf>
     5d4:	ce 01       	movw	r24, r28
     5d6:	49 96       	adiw	r24, 0x19	; 25
     5d8:	d7 de       	rcall	.-594    	; 0x388 <print16>
     5da:	c3 01       	movw	r24, r6
				print16(&reg);
     5dc:	b2 01       	movw	r22, r4
     5de:	d1 d3       	rcall	.+1954   	; 0xd82 <__fixunssfsi>
     5e0:	7a 8f       	std	Y+26, r23	; 0x1a
				reg=final_angle;
				printf(" ");
				printf("final_angleY= ");
				print16(&reg);*/
				
				reg=micros()-timer1;
     5e2:	69 8f       	std	Y+25, r22	; 0x19
				reg=dt;
     5e4:	80 e2       	ldi	r24, 0x20	; 32
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	ce d5       	rcall	.+2972   	; 0x1186 <putchar>
     5ea:	8e e1       	ldi	r24, 0x1E	; 30
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	9f 93       	push	r25
     5f0:	8f 93       	push	r24
				printf(" ");
     5f2:	b6 d5       	rcall	.+2924   	; 0x1160 <printf>
     5f4:	ce 01       	movw	r24, r28
     5f6:	49 96       	adiw	r24, 0x19	; 25
     5f8:	c7 de       	rcall	.-626    	; 0x388 <print16>
				printf("hz= ");
     5fa:	fc dd       	rcall	.-1032   	; 0x1f4 <micros>
     5fc:	6f 8d       	ldd	r22, Y+31	; 0x1f
     5fe:	78 a1       	ldd	r23, Y+32	; 0x20
     600:	89 a1       	ldd	r24, Y+33	; 0x21
     602:	9a a1       	ldd	r25, Y+34	; 0x22
				print16ln(&reg);
     604:	be d3       	rcall	.+1916   	; 0xd82 <__fixunssfsi>
     606:	7a 8f       	std	Y+26, r23	; 0x1a
     608:	69 8f       	std	Y+25, r22	; 0x19
							printf(" no\n");
							sei();
						}					
				#endif	//DRV8313
							 
				if(set_gyro_angles){                                                 //If the IMU is already started
     60a:	80 e2       	ldi	r24, 0x20	; 32
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	bb d5       	rcall	.+2934   	; 0x1186 <putchar>
     610:	8c e2       	ldi	r24, 0x2C	; 44
     612:	92 e0       	ldi	r25, 0x02	; 2
     614:	9f 93       	push	r25
     616:	8f 93       	push	r24
     618:	a3 d5       	rcall	.+2886   	; 0x1160 <printf>
     61a:	ce 01       	movw	r24, r28
					 angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;     //Correct the drift of the gyro pitch angle with the accelerometer pitch angle
     61c:	49 96       	adiw	r24, 0x19	; 25
     61e:	d9 de       	rcall	.-590    	; 0x3d2 <print16ln>
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	c1 14       	cp	r12, r1
     62e:	d1 04       	cpc	r13, r1
     630:	19 f1       	breq	.+70     	; 0x678 <main+0x256>
     632:	29 ec       	ldi	r18, 0xC9	; 201
     634:	35 ee       	ldi	r19, 0xE5	; 229
     636:	4f e7       	ldi	r20, 0x7F	; 127
     638:	5f e3       	ldi	r21, 0x3F	; 63
     63a:	6b 8d       	ldd	r22, Y+27	; 0x1b
     63c:	7c 8d       	ldd	r23, Y+28	; 0x1c
     63e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     640:	9e 8d       	ldd	r25, Y+30	; 0x1e
     642:	59 d4       	rcall	.+2226   	; 0xef6 <__mulsf3>
					 angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;        //Correct the drift of the gyro roll angle with the accelerometer roll angle
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	40 e0       	ldi	r20, 0x00	; 0
     64a:	50 e0       	ldi	r21, 0x00	; 0
     64c:	ce d2       	rcall	.+1436   	; 0xbea <__addsf3>
     64e:	36 2e       	mov	r3, r22
     650:	27 2e       	mov	r2, r23
     652:	8b 8f       	std	Y+27, r24	; 0x1b
     654:	99 a7       	std	Y+41, r25	; 0x29
     656:	29 ec       	ldi	r18, 0xC9	; 201
     658:	35 ee       	ldi	r19, 0xE5	; 229
     65a:	4f e7       	ldi	r20, 0x7F	; 127
     65c:	5f e3       	ldi	r21, 0x3F	; 63
     65e:	c3 01       	movw	r24, r6
     660:	b2 01       	movw	r22, r4
     662:	49 d4       	rcall	.+2194   	; 0xef6 <__mulsf3>
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	40 e0       	ldi	r20, 0x00	; 0
				}
				else{                                                                //At first start
					 angle_pitch = angle_pitch_acc;                                     //Set the gyro pitch angle equal to the accelerometer pitch angle
					 angle_roll = angle_roll_acc;                                       //Set the gyro roll angle equal to the accelerometer roll angle
					 set_gyro_angles = true;                                            //Set the IMU started flag
     66a:	50 e0       	ldi	r21, 0x00	; 0
     66c:	be d2       	rcall	.+1404   	; 0xbea <__addsf3>
     66e:	76 2e       	mov	r7, r22
					 angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;     //Correct the drift of the gyro pitch angle with the accelerometer pitch angle
					 angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;        //Correct the drift of the gyro roll angle with the accelerometer roll angle
				}
				else{                                                                //At first start
					 angle_pitch = angle_pitch_acc;                                     //Set the gyro pitch angle equal to the accelerometer pitch angle
					 angle_roll = angle_roll_acc;                                       //Set the gyro roll angle equal to the accelerometer roll angle
     670:	67 2e       	mov	r6, r23
     672:	8f a3       	std	Y+39, r24	; 0x27
     674:	98 a7       	std	Y+40, r25	; 0x28
     676:	2a cf       	rjmp	.-428    	; 0x4cc <main+0xaa>
				if(set_gyro_angles){                                                 //If the IMU is already started
					 angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;     //Correct the drift of the gyro pitch angle with the accelerometer pitch angle
					 angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;        //Correct the drift of the gyro roll angle with the accelerometer roll angle
				}
				else{                                                                //At first start
					 angle_pitch = angle_pitch_acc;                                     //Set the gyro pitch angle equal to the accelerometer pitch angle
     678:	cc 24       	eor	r12, r12
     67a:	c3 94       	inc	r12
     67c:	d1 2c       	mov	r13, r1
     67e:	71 2c       	mov	r7, r1
			#endif //PRINT_RAW_DATA			
		#endif //GYRO
		//while(micros()-timer1<4000);
		//timer1=micros();
		
	}
     680:	61 2c       	mov	r6, r1
     682:	1f a2       	std	Y+39, r1	; 0x27
     684:	18 a6       	std	Y+40, r1	; 0x28
     686:	31 2c       	mov	r3, r1
     688:	21 2c       	mov	r2, r1
     68a:	1b 8e       	std	Y+27, r1	; 0x1b
     68c:	19 a6       	std	Y+41, r1	; 0x29
     68e:	1e cf       	rjmp	.-452    	; 0x4cc <main+0xaa>

00000690 <mpu6050_readByte>:
	printf("  ");
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/
}
     690:	cf 93       	push	r28
     692:	c8 2f       	mov	r28, r24
     694:	80 ed       	ldi	r24, 0xD0	; 208
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	f1 d1       	rcall	.+994    	; 0xa7c <i2c_start>
     69a:	8c 2f       	mov	r24, r28
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	44 d2       	rcall	.+1160   	; 0xb28 <i2c_write>
     6a0:	33 d2       	rcall	.+1126   	; 0xb08 <i2c_stop>
     6a2:	81 ed       	ldi	r24, 0xD1	; 209
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	ea d1       	rcall	.+980    	; 0xa7c <i2c_start>
     6a8:	7a d2       	rcall	.+1268   	; 0xb9e <i2c_readNak>
     6aa:	c8 2f       	mov	r28, r24
     6ac:	2d d2       	rcall	.+1114   	; 0xb08 <i2c_stop>
     6ae:	8c 2f       	mov	r24, r28
     6b0:	cf 91       	pop	r28
     6b2:	08 95       	ret

000006b4 <mpu6050_read_gyroX>:
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	83 e4       	ldi	r24, 0x43	; 67
     6ba:	ea df       	rcall	.-44     	; 0x690 <mpu6050_readByte>
     6bc:	c8 2f       	mov	r28, r24
     6be:	d0 e0       	ldi	r29, 0x00	; 0
     6c0:	dc 2f       	mov	r29, r28
     6c2:	cc 27       	eor	r28, r28
     6c4:	84 e4       	ldi	r24, 0x44	; 68
     6c6:	e4 df       	rcall	.-56     	; 0x690 <mpu6050_readByte>
     6c8:	9e 01       	movw	r18, r28
     6ca:	28 2b       	or	r18, r24
     6cc:	c9 01       	movw	r24, r18
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	08 95       	ret

000006d4 <mpu6050_read_gyroY>:
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	85 e4       	ldi	r24, 0x45	; 69
     6da:	da df       	rcall	.-76     	; 0x690 <mpu6050_readByte>
     6dc:	c8 2f       	mov	r28, r24
     6de:	d0 e0       	ldi	r29, 0x00	; 0
     6e0:	dc 2f       	mov	r29, r28
     6e2:	cc 27       	eor	r28, r28
     6e4:	86 e4       	ldi	r24, 0x46	; 70
     6e6:	d4 df       	rcall	.-88     	; 0x690 <mpu6050_readByte>
     6e8:	9e 01       	movw	r18, r28
     6ea:	28 2b       	or	r18, r24
     6ec:	c9 01       	movw	r24, r18
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <mpu6050_read_gyroZ>:
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	87 e4       	ldi	r24, 0x47	; 71
     6fa:	ca df       	rcall	.-108    	; 0x690 <mpu6050_readByte>
     6fc:	c8 2f       	mov	r28, r24
     6fe:	d0 e0       	ldi	r29, 0x00	; 0
     700:	dc 2f       	mov	r29, r28
     702:	cc 27       	eor	r28, r28
     704:	88 e4       	ldi	r24, 0x48	; 72
     706:	c4 df       	rcall	.-120    	; 0x690 <mpu6050_readByte>
     708:	9e 01       	movw	r18, r28
     70a:	28 2b       	or	r18, r24
     70c:	c9 01       	movw	r24, r18
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	08 95       	ret

00000714 <mpu6050_calibrate_gyro>:
     714:	cf 92       	push	r12
     716:	df 92       	push	r13
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	6c 01       	movw	r12, r24
     726:	7b 01       	movw	r14, r22
     728:	8a 01       	movw	r16, r20
     72a:	81 e1       	ldi	r24, 0x11	; 17
     72c:	94 e0       	ldi	r25, 0x04	; 4
     72e:	30 d5       	rcall	.+2656   	; 0x1190 <puts>
     730:	c4 e1       	ldi	r28, 0x14	; 20
     732:	d0 e0       	ldi	r29, 0x00	; 0
     734:	bf df       	rcall	.-130    	; 0x6b4 <mpu6050_read_gyroX>
     736:	f6 01       	movw	r30, r12
     738:	40 81       	ld	r20, Z
     73a:	51 81       	ldd	r21, Z+1	; 0x01
     73c:	62 81       	ldd	r22, Z+2	; 0x02
     73e:	73 81       	ldd	r23, Z+3	; 0x03
     740:	48 0f       	add	r20, r24
     742:	59 1f       	adc	r21, r25
     744:	61 1d       	adc	r22, r1
     746:	71 1d       	adc	r23, r1
     748:	40 83       	st	Z, r20
     74a:	51 83       	std	Z+1, r21	; 0x01
     74c:	62 83       	std	Z+2, r22	; 0x02
     74e:	73 83       	std	Z+3, r23	; 0x03
     750:	c1 df       	rcall	.-126    	; 0x6d4 <mpu6050_read_gyroY>
     752:	f7 01       	movw	r30, r14
     754:	40 81       	ld	r20, Z
     756:	51 81       	ldd	r21, Z+1	; 0x01
     758:	62 81       	ldd	r22, Z+2	; 0x02
     75a:	73 81       	ldd	r23, Z+3	; 0x03
     75c:	48 0f       	add	r20, r24
     75e:	59 1f       	adc	r21, r25
     760:	61 1d       	adc	r22, r1
     762:	71 1d       	adc	r23, r1
     764:	40 83       	st	Z, r20
     766:	51 83       	std	Z+1, r21	; 0x01
     768:	62 83       	std	Z+2, r22	; 0x02
     76a:	73 83       	std	Z+3, r23	; 0x03
     76c:	c3 df       	rcall	.-122    	; 0x6f4 <mpu6050_read_gyroZ>
     76e:	f8 01       	movw	r30, r16
     770:	40 81       	ld	r20, Z
     772:	51 81       	ldd	r21, Z+1	; 0x01
     774:	62 81       	ldd	r22, Z+2	; 0x02
     776:	73 81       	ldd	r23, Z+3	; 0x03
     778:	48 0f       	add	r20, r24
     77a:	59 1f       	adc	r21, r25
     77c:	61 1d       	adc	r22, r1
     77e:	71 1d       	adc	r23, r1
     780:	40 83       	st	Z, r20
     782:	51 83       	std	Z+1, r21	; 0x01
     784:	62 83       	std	Z+2, r22	; 0x02
     786:	73 83       	std	Z+3, r23	; 0x03
     788:	21 97       	sbiw	r28, 0x01	; 1
     78a:	a1 f6       	brne	.-88     	; 0x734 <mpu6050_calibrate_gyro+0x20>
     78c:	f6 01       	movw	r30, r12
     78e:	60 81       	ld	r22, Z
     790:	71 81       	ldd	r23, Z+1	; 0x01
     792:	82 81       	ldd	r24, Z+2	; 0x02
     794:	93 81       	ldd	r25, Z+3	; 0x03
     796:	99 23       	and	r25, r25
     798:	ac f4       	brge	.+42     	; 0x7c4 <mpu6050_calibrate_gyro+0xb0>
     79a:	9b 01       	movw	r18, r22
     79c:	77 23       	and	r23, r23
     79e:	24 f4       	brge	.+8      	; 0x7a8 <mpu6050_calibrate_gyro+0x94>
     7a0:	22 27       	eor	r18, r18
     7a2:	33 27       	eor	r19, r19
     7a4:	26 1b       	sub	r18, r22
     7a6:	37 0b       	sbc	r19, r23
     7a8:	c9 01       	movw	r24, r18
     7aa:	64 e1       	ldi	r22, 0x14	; 20
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	06 d4       	rcall	.+2060   	; 0xfbc <__divmodhi4>
     7b0:	cb 01       	movw	r24, r22
     7b2:	77 0f       	add	r23, r23
     7b4:	aa 0b       	sbc	r26, r26
     7b6:	bb 0b       	sbc	r27, r27
     7b8:	f6 01       	movw	r30, r12
     7ba:	80 83       	st	Z, r24
     7bc:	91 83       	std	Z+1, r25	; 0x01
     7be:	a2 83       	std	Z+2, r26	; 0x02
     7c0:	b3 83       	std	Z+3, r27	; 0x03
     7c2:	0a c0       	rjmp	.+20     	; 0x7d8 <mpu6050_calibrate_gyro+0xc4>
     7c4:	24 e1       	ldi	r18, 0x14	; 20
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	40 e0       	ldi	r20, 0x00	; 0
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	0a d4       	rcall	.+2068   	; 0xfe2 <__divmodsi4>
     7ce:	f6 01       	movw	r30, r12
     7d0:	20 83       	st	Z, r18
     7d2:	31 83       	std	Z+1, r19	; 0x01
     7d4:	42 83       	std	Z+2, r20	; 0x02
     7d6:	53 83       	std	Z+3, r21	; 0x03
     7d8:	f7 01       	movw	r30, r14
     7da:	60 81       	ld	r22, Z
     7dc:	71 81       	ldd	r23, Z+1	; 0x01
     7de:	82 81       	ldd	r24, Z+2	; 0x02
     7e0:	93 81       	ldd	r25, Z+3	; 0x03
     7e2:	99 23       	and	r25, r25
     7e4:	ac f4       	brge	.+42     	; 0x810 <mpu6050_calibrate_gyro+0xfc>
     7e6:	9b 01       	movw	r18, r22
     7e8:	77 23       	and	r23, r23
     7ea:	24 f4       	brge	.+8      	; 0x7f4 <mpu6050_calibrate_gyro+0xe0>
     7ec:	22 27       	eor	r18, r18
     7ee:	33 27       	eor	r19, r19
     7f0:	26 1b       	sub	r18, r22
     7f2:	37 0b       	sbc	r19, r23
     7f4:	c9 01       	movw	r24, r18
     7f6:	64 e1       	ldi	r22, 0x14	; 20
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	e0 d3       	rcall	.+1984   	; 0xfbc <__divmodhi4>
     7fc:	cb 01       	movw	r24, r22
     7fe:	77 0f       	add	r23, r23
     800:	aa 0b       	sbc	r26, r26
     802:	bb 0b       	sbc	r27, r27
     804:	f7 01       	movw	r30, r14
     806:	80 83       	st	Z, r24
     808:	91 83       	std	Z+1, r25	; 0x01
     80a:	a2 83       	std	Z+2, r26	; 0x02
     80c:	b3 83       	std	Z+3, r27	; 0x03
     80e:	0a c0       	rjmp	.+20     	; 0x824 <mpu6050_calibrate_gyro+0x110>
     810:	24 e1       	ldi	r18, 0x14	; 20
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	e4 d3       	rcall	.+1992   	; 0xfe2 <__divmodsi4>
     81a:	f7 01       	movw	r30, r14
     81c:	20 83       	st	Z, r18
     81e:	31 83       	std	Z+1, r19	; 0x01
     820:	42 83       	std	Z+2, r20	; 0x02
     822:	53 83       	std	Z+3, r21	; 0x03
     824:	f8 01       	movw	r30, r16
     826:	60 81       	ld	r22, Z
     828:	71 81       	ldd	r23, Z+1	; 0x01
     82a:	82 81       	ldd	r24, Z+2	; 0x02
     82c:	93 81       	ldd	r25, Z+3	; 0x03
     82e:	99 23       	and	r25, r25
     830:	ac f4       	brge	.+42     	; 0x85c <mpu6050_calibrate_gyro+0x148>
     832:	9b 01       	movw	r18, r22
     834:	77 23       	and	r23, r23
     836:	24 f4       	brge	.+8      	; 0x840 <mpu6050_calibrate_gyro+0x12c>
     838:	22 27       	eor	r18, r18
     83a:	33 27       	eor	r19, r19
     83c:	26 1b       	sub	r18, r22
     83e:	37 0b       	sbc	r19, r23
     840:	c9 01       	movw	r24, r18
     842:	64 e1       	ldi	r22, 0x14	; 20
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	ba d3       	rcall	.+1908   	; 0xfbc <__divmodhi4>
     848:	cb 01       	movw	r24, r22
     84a:	77 0f       	add	r23, r23
     84c:	aa 0b       	sbc	r26, r26
     84e:	bb 0b       	sbc	r27, r27
     850:	f8 01       	movw	r30, r16
     852:	80 83       	st	Z, r24
     854:	91 83       	std	Z+1, r25	; 0x01
     856:	a2 83       	std	Z+2, r26	; 0x02
     858:	b3 83       	std	Z+3, r27	; 0x03
     85a:	0a c0       	rjmp	.+20     	; 0x870 <mpu6050_calibrate_gyro+0x15c>
     85c:	24 e1       	ldi	r18, 0x14	; 20
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	40 e0       	ldi	r20, 0x00	; 0
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	be d3       	rcall	.+1916   	; 0xfe2 <__divmodsi4>
     866:	f8 01       	movw	r30, r16
     868:	20 83       	st	Z, r18
     86a:	31 83       	std	Z+1, r19	; 0x01
     86c:	42 83       	std	Z+2, r20	; 0x02
     86e:	53 83       	std	Z+3, r21	; 0x03
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	df 90       	pop	r13
     87e:	cf 90       	pop	r12
     880:	08 95       	ret

00000882 <mpu6050_writeByte>:
	uint8_t byteToReturn=i2c_readNak();
	i2c_stop();
	return byteToReturn;
}
void mpu6050_writeByte(uint8_t wereToWrite,uint8_t byteToWrite)//writebyte
{
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	d8 2f       	mov	r29, r24
     888:	c6 2f       	mov	r28, r22
	i2c_start(MPU6050_WRITE);
     88a:	80 ed       	ldi	r24, 0xD0	; 208
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	f6 d0       	rcall	.+492    	; 0xa7c <i2c_start>
	i2c_write(wereToWrite);
     890:	8d 2f       	mov	r24, r29
     892:	90 e0       	ldi	r25, 0x00	; 0
	i2c_write(byteToWrite);
     894:	49 d1       	rcall	.+658    	; 0xb28 <i2c_write>
     896:	8c 2f       	mov	r24, r28
	i2c_stop();
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	46 d1       	rcall	.+652    	; 0xb28 <i2c_write>
}
     89c:	35 d1       	rcall	.+618    	; 0xb08 <i2c_stop>
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <mpu6050_readBytes>:
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
     8a4:	af 92       	push	r10
     8a6:	bf 92       	push	r11
     8a8:	cf 92       	push	r12
     8aa:	df 92       	push	r13
     8ac:	ff 92       	push	r15
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
     8b6:	66 23       	and	r22, r22
     8b8:	a1 f1       	breq	.+104    	; 0x922 <mpu6050_readBytes+0x7e>
     8ba:	c5 2f       	mov	r28, r21
     8bc:	d4 2f       	mov	r29, r20
     8be:	f6 2e       	mov	r15, r22
     8c0:	18 2f       	mov	r17, r24
		//request register
		i2c_start(MPU6050_WRITE);
     8c2:	80 ed       	ldi	r24, 0xD0	; 208
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	da d0       	rcall	.+436    	; 0xa7c <i2c_start>
		i2c_write(regAddr);
     8c8:	81 2f       	mov	r24, r17
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	2d d1       	rcall	.+602    	; 0xb28 <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8ce:	85 e3       	ldi	r24, 0x35	; 53
     8d0:	8a 95       	dec	r24
     8d2:	f1 f7       	brne	.-4      	; 0x8d0 <mpu6050_readBytes+0x2c>
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
     8d4:	00 00       	nop
     8d6:	81 ed       	ldi	r24, 0xD1	; 209
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	d0 d0       	rcall	.+416    	; 0xa7c <i2c_start>
     8dc:	0d 2f       	mov	r16, r29
     8de:	1c 2f       	mov	r17, r28
     8e0:	cc 24       	eor	r12, r12
     8e2:	ca 94       	dec	r12
     8e4:	cf 0c       	add	r12, r15
     8e6:	d1 2c       	mov	r13, r1
     8e8:	ef ef       	ldi	r30, 0xFF	; 255
     8ea:	ce 1a       	sub	r12, r30
     8ec:	de 0a       	sbc	r13, r30
     8ee:	c0 e0       	ldi	r28, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
     8f0:	d0 e0       	ldi	r29, 0x00	; 0
     8f2:	af 2c       	mov	r10, r15
     8f4:	b1 2c       	mov	r11, r1
     8f6:	f1 e0       	ldi	r31, 0x01	; 1
     8f8:	af 1a       	sub	r10, r31
     8fa:	b1 08       	sbc	r11, r1
     8fc:	ac 16       	cp	r10, r28
			data[i] = i2c_readNak();
     8fe:	bd 06       	cpc	r11, r29
     900:	21 f4       	brne	.+8      	; 0x90a <mpu6050_readBytes+0x66>
     902:	4d d1       	rcall	.+666    	; 0xb9e <i2c_readNak>
     904:	f8 01       	movw	r30, r16
			else
			data[i] = i2c_readAck();
     906:	80 83       	st	Z, r24
     908:	03 c0       	rjmp	.+6      	; 0x910 <mpu6050_readBytes+0x6c>
     90a:	2f d1       	rcall	.+606    	; 0xb6a <i2c_readAck>
     90c:	f8 01       	movw	r30, r16
     90e:	80 83       	st	Z, r24
     910:	21 96       	adiw	r28, 0x01	; 1
		i2c_start(MPU6050_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
		for(i=0; i<length; i++) {
     912:	0f 5f       	subi	r16, 0xFF	; 255
     914:	1f 4f       	sbci	r17, 0xFF	; 255
     916:	cc 15       	cp	r28, r12
     918:	dd 05       	cpc	r29, r13
			if(i==length-1)
			data[i] = i2c_readNak();
			else
			data[i] = i2c_readAck();
		}
		i2c_stop();
     91a:	81 f7       	brne	.-32     	; 0x8fc <mpu6050_readBytes+0x58>
     91c:	cf 2d       	mov	r28, r15
     91e:	f4 d0       	rcall	.+488    	; 0xb08 <i2c_stop>
	i2c_write(byteToWrite);
	i2c_stop();
}
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
	uint8_t i = 0;
	int8_t count = 0;
     920:	01 c0       	rjmp	.+2      	; 0x924 <mpu6050_readBytes+0x80>
			data[i] = i2c_readAck();
		}
		i2c_stop();
	}
	return count;
}
     922:	c0 e0       	ldi	r28, 0x00	; 0
     924:	8c 2f       	mov	r24, r28
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	ff 90       	pop	r15
     930:	df 90       	pop	r13
     932:	cf 90       	pop	r12
     934:	bf 90       	pop	r11
     936:	af 90       	pop	r10
     938:	08 95       	ret

0000093a <mpu6050_getRawData>:
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     93a:	6f 92       	push	r6
     93c:	7f 92       	push	r7
     93e:	8f 92       	push	r8
     940:	9f 92       	push	r9
     942:	af 92       	push	r10
     944:	bf 92       	push	r11
     946:	cf 92       	push	r12
     948:	df 92       	push	r13
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	cd b7       	in	r28, 0x3d	; 61
     958:	de b7       	in	r29, 0x3e	; 62
     95a:	2e 97       	sbiw	r28, 0x0e	; 14
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	de bf       	out	0x3e, r29	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	cd bf       	out	0x3d, r28	; 61
     966:	4c 01       	movw	r8, r24
     968:	5b 01       	movw	r10, r22
     96a:	6a 01       	movw	r12, r20
     96c:	39 01       	movw	r6, r18
	uint8_t buffer[14];
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14,  buffer);
     96e:	ae 01       	movw	r20, r28
     970:	4f 5f       	subi	r20, 0xFF	; 255
     972:	5f 4f       	sbci	r21, 0xFF	; 255
     974:	6e e0       	ldi	r22, 0x0E	; 14
     976:	8b e3       	ldi	r24, 0x3B	; 59
     978:	95 df       	rcall	.-214    	; 0x8a4 <mpu6050_readBytes>
	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     97a:	89 81       	ldd	r24, Y+1	; 0x01
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	98 2f       	mov	r25, r24
     980:	88 27       	eor	r24, r24
     982:	2a 81       	ldd	r18, Y+2	; 0x02
     984:	82 2b       	or	r24, r18
     986:	f4 01       	movw	r30, r8
     988:	91 83       	std	Z+1, r25	; 0x01
     98a:	80 83       	st	Z, r24
	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     98c:	8b 81       	ldd	r24, Y+3	; 0x03
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	98 2f       	mov	r25, r24
     992:	88 27       	eor	r24, r24
     994:	2c 81       	ldd	r18, Y+4	; 0x04
     996:	82 2b       	or	r24, r18
     998:	f5 01       	movw	r30, r10
     99a:	91 83       	std	Z+1, r25	; 0x01
     99c:	80 83       	st	Z, r24
	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
     99e:	8d 81       	ldd	r24, Y+5	; 0x05
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	98 2f       	mov	r25, r24
     9a4:	88 27       	eor	r24, r24
     9a6:	2e 81       	ldd	r18, Y+6	; 0x06
     9a8:	82 2b       	or	r24, r18
     9aa:	f6 01       	movw	r30, r12
     9ac:	91 83       	std	Z+1, r25	; 0x01
     9ae:	80 83       	st	Z, r24
	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     9b0:	89 85       	ldd	r24, Y+9	; 0x09
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	98 2f       	mov	r25, r24
     9b6:	88 27       	eor	r24, r24
     9b8:	2a 85       	ldd	r18, Y+10	; 0x0a
     9ba:	82 2b       	or	r24, r18
     9bc:	f3 01       	movw	r30, r6
     9be:	91 83       	std	Z+1, r25	; 0x01
     9c0:	80 83       	st	Z, r24
	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     9c2:	8b 85       	ldd	r24, Y+11	; 0x0b
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	98 2f       	mov	r25, r24
     9c8:	88 27       	eor	r24, r24
     9ca:	2c 85       	ldd	r18, Y+12	; 0x0c
     9cc:	82 2b       	or	r24, r18
     9ce:	f8 01       	movw	r30, r16
     9d0:	91 83       	std	Z+1, r25	; 0x01
     9d2:	80 83       	st	Z, r24
	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     9d4:	8d 85       	ldd	r24, Y+13	; 0x0d
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	98 2f       	mov	r25, r24
     9da:	88 27       	eor	r24, r24
     9dc:	2e 85       	ldd	r18, Y+14	; 0x0e
     9de:	82 2b       	or	r24, r18
     9e0:	f7 01       	movw	r30, r14
     9e2:	91 83       	std	Z+1, r25	; 0x01
     9e4:	80 83       	st	Z, r24
     9e6:	2e 96       	adiw	r28, 0x0e	; 14
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	ff 90       	pop	r15
     9fc:	ef 90       	pop	r14
     9fe:	df 90       	pop	r13
     a00:	cf 90       	pop	r12
     a02:	bf 90       	pop	r11
     a04:	af 90       	pop	r10
     a06:	9f 90       	pop	r9
     a08:	8f 90       	pop	r8
     a0a:	7f 90       	pop	r7
     a0c:	6f 90       	pop	r6
     a0e:	08 95       	ret

00000a10 <setup_timer4>:

#define clockCyclesPerMicrosecond () ( F_CPU / 1000000L )

/*-----------Timter 1-----------*/
void setup_timer4(void){
    sbi (TCCR4B, CS40);//prescakaer 256
     a10:	e1 ea       	ldi	r30, 0xA1	; 161
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	80 81       	ld	r24, Z
     a16:	81 60       	ori	r24, 0x01	; 1
     a18:	80 83       	st	Z, r24
    sbi (TCCR4A, WGM40);//8 bit phase correct PWM
     a1a:	e0 ea       	ldi	r30, 0xA0	; 160
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	80 81       	ld	r24, Z
     a20:	81 60       	ori	r24, 0x01	; 1
     a22:	80 83       	st	Z, r24
	
	//sbi (TCCR4A,COM4A0);
	sbi (TCCR4A,COM4A1);
     a24:	80 81       	ld	r24, Z
     a26:	80 68       	ori	r24, 0x80	; 128
     a28:	80 83       	st	Z, r24
	//sbi (TCCR4A,COM4B0);
	sbi (TCCR4A,COM4B1);
     a2a:	80 81       	ld	r24, Z
     a2c:	80 62       	ori	r24, 0x20	; 32
     a2e:	80 83       	st	Z, r24
	//sbi (TCCR4A,COM4C0);
	sbi (TCCR4A,COM4C1);
     a30:	80 81       	ld	r24, Z
     a32:	88 60       	ori	r24, 0x08	; 8
     a34:	80 83       	st	Z, r24
     a36:	08 95       	ret

00000a38 <setup_timer5>:
}


/*-----------Timter 5-----------*/
void setup_timer5(void){
	sbi (TCCR5B, CS50);//only this 8
     a38:	e1 e2       	ldi	r30, 0x21	; 33
     a3a:	f1 e0       	ldi	r31, 0x01	; 1
     a3c:	80 81       	ld	r24, Z
     a3e:	81 60       	ori	r24, 0x01	; 1
     a40:	80 83       	st	Z, r24
	//sbi (TCCR5B, CS52);//only this 256
	sbi (TCCR5B, WGM52);//OCR4A compare interrupt
     a42:	80 81       	ld	r24, Z
     a44:	88 60       	ori	r24, 0x08	; 8
     a46:	80 83       	st	Z, r24
     a48:	08 95       	ret

00000a4a <Enable_timer5_compare_interrupt>:
	
}
void Enable_timer5_compare_interrupt(){
	sbi (TIMSK5, OCIE5A);
     a4a:	e3 e7       	ldi	r30, 0x73	; 115
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 81       	ld	r24, Z
     a50:	82 60       	ori	r24, 0x02	; 2
     a52:	80 83       	st	Z, r24
     a54:	08 95       	ret

00000a56 <setup_timer0>:
}
/*-----------Timter 2-----------*/
void setup_timer0(void){
	sbi(TCCR0B,CS00);
     a56:	85 b5       	in	r24, 0x25	; 37
     a58:	81 60       	ori	r24, 0x01	; 1
     a5a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B,CS01);;//prescaler 64 , 250khz timer
     a5c:	85 b5       	in	r24, 0x25	; 37
     a5e:	82 60       	ori	r24, 0x02	; 2
     a60:	85 bd       	out	0x25, r24	; 37
     a62:	08 95       	ret

00000a64 <Enable_timer0_overflow_interrupt>:
}
void Enable_timer0_overflow_interrupt(){
	sbi(TIMSK0,TOIE0);
     a64:	ee e6       	ldi	r30, 0x6E	; 110
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	81 60       	ori	r24, 0x01	; 1
     a6c:	80 83       	st	Z, r24
     a6e:	08 95       	ret

00000a70 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     a70:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     a74:	8c e0       	ldi	r24, 0x0C	; 12
     a76:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     a7a:	08 95       	ret

00000a7c <i2c_start>:
     a7c:	94 ea       	ldi	r25, 0xA4	; 164
     a7e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     a82:	4f ef       	ldi	r20, 0xFF	; 255
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	ec eb       	ldi	r30, 0xBC	; 188
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	90 81       	ld	r25, Z
     a90:	99 23       	and	r25, r25
     a92:	34 f0       	brlt	.+12     	; 0xaa0 <i2c_start+0x24>
     a94:	41 50       	subi	r20, 0x01	; 1
     a96:	51 09       	sbc	r21, r1
     a98:	61 09       	sbc	r22, r1
     a9a:	71 09       	sbc	r23, r1
     a9c:	c0 f7       	brcc	.-16     	; 0xa8e <i2c_start+0x12>
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <i2c_start+0x2c>
     aa0:	45 2b       	or	r20, r21
     aa2:	46 2b       	or	r20, r22
     aa4:	47 2b       	or	r20, r23
     aa6:	41 f1       	breq	.+80     	; 0xaf8 <i2c_start+0x7c>
     aa8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     aac:	98 7f       	andi	r25, 0xF8	; 248
     aae:	98 30       	cpi	r25, 0x08	; 8
     ab0:	11 f0       	breq	.+4      	; 0xab6 <i2c_start+0x3a>
     ab2:	90 31       	cpi	r25, 0x10	; 16
     ab4:	19 f5       	brne	.+70     	; 0xafc <i2c_start+0x80>
     ab6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     aba:	84 e8       	ldi	r24, 0x84	; 132
     abc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     ac0:	8f ef       	ldi	r24, 0xFF	; 255
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	ec eb       	ldi	r30, 0xBC	; 188
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	20 81       	ld	r18, Z
     ace:	22 23       	and	r18, r18
     ad0:	2c f0       	brlt	.+10     	; 0xadc <i2c_start+0x60>
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	a1 09       	sbc	r26, r1
     ad6:	b1 09       	sbc	r27, r1
     ad8:	c8 f7       	brcc	.-14     	; 0xacc <i2c_start+0x50>
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <i2c_start+0x68>
     adc:	89 2b       	or	r24, r25
     ade:	8a 2b       	or	r24, r26
     ae0:	8b 2b       	or	r24, r27
     ae2:	71 f0       	breq	.+28     	; 0xb00 <i2c_start+0x84>
     ae4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     ae8:	98 7f       	andi	r25, 0xF8	; 248
     aea:	98 31       	cpi	r25, 0x18	; 24
     aec:	59 f0       	breq	.+22     	; 0xb04 <i2c_start+0x88>
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	90 34       	cpi	r25, 0x40	; 64
     af2:	49 f4       	brne	.+18     	; 0xb06 <i2c_start+0x8a>
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	08 95       	ret
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	08 95       	ret
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	08 95       	ret
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	08 95       	ret
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	08 95       	ret

00000b08 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     b08:	84 e9       	ldi	r24, 0x94	; 148
     b0a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	ec eb       	ldi	r30, 0xBC	; 188
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	20 81       	ld	r18, Z
     b18:	24 ff       	sbrs	r18, 4
     b1a:	05 c0       	rjmp	.+10     	; 0xb26 <i2c_stop+0x1e>
     b1c:	01 96       	adiw	r24, 0x01	; 1
     b1e:	81 15       	cp	r24, r1
     b20:	21 e0       	ldi	r18, 0x01	; 1
     b22:	92 07       	cpc	r25, r18
     b24:	c1 f7       	brne	.-16     	; 0xb16 <i2c_stop+0xe>
     b26:	08 95       	ret

00000b28 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     b28:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     b2c:	84 e8       	ldi	r24, 0x84	; 132
     b2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     b32:	8f ef       	ldi	r24, 0xFF	; 255
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	a0 e0       	ldi	r26, 0x00	; 0
     b38:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     b3a:	ec eb       	ldi	r30, 0xBC	; 188
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	20 81       	ld	r18, Z
     b40:	22 23       	and	r18, r18
     b42:	2c f0       	brlt	.+10     	; 0xb4e <i2c_write+0x26>
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	a1 09       	sbc	r26, r1
     b48:	b1 09       	sbc	r27, r1
     b4a:	c8 f7       	brcc	.-14     	; 0xb3e <i2c_write+0x16>
     b4c:	04 c0       	rjmp	.+8      	; 0xb56 <i2c_write+0x2e>
	if(i2c_timer == 0)
     b4e:	89 2b       	or	r24, r25
     b50:	8a 2b       	or	r24, r26
     b52:	8b 2b       	or	r24, r27
     b54:	41 f0       	breq	.+16     	; 0xb66 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     b56:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     b5a:	98 7f       	andi	r25, 0xF8	; 248
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	98 32       	cpi	r25, 0x28	; 40
     b60:	19 f4       	brne	.+6      	; 0xb68 <i2c_write+0x40>
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	08 95       	ret
     b66:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     b68:	08 95       	ret

00000b6a <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     b6a:	84 ec       	ldi	r24, 0xC4	; 196
     b6c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
     b70:	8f ef       	ldi	r24, 0xFF	; 255
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	a0 e0       	ldi	r26, 0x00	; 0
     b76:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     b78:	ec eb       	ldi	r30, 0xBC	; 188
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	20 81       	ld	r18, Z
     b7e:	22 23       	and	r18, r18
     b80:	2c f0       	brlt	.+10     	; 0xb8c <i2c_readAck+0x22>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	c8 f7       	brcc	.-14     	; 0xb7c <i2c_readAck+0x12>
     b8a:	04 c0       	rjmp	.+8      	; 0xb94 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     b8c:	89 2b       	or	r24, r25
     b8e:	8a 2b       	or	r24, r26
     b90:	8b 2b       	or	r24, r27
     b92:	19 f0       	breq	.+6      	; 0xb9a <i2c_readAck+0x30>
		return 0;

    return TWDR;
     b94:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     b98:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     b9a:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     b9c:	08 95       	ret

00000b9e <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     b9e:	84 e8       	ldi	r24, 0x84	; 132
     ba0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
     ba4:	8f ef       	ldi	r24, 0xFF	; 255
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     bac:	ec eb       	ldi	r30, 0xBC	; 188
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	20 81       	ld	r18, Z
     bb2:	22 23       	and	r18, r18
     bb4:	2c f0       	brlt	.+10     	; 0xbc0 <i2c_readNak+0x22>
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	a1 09       	sbc	r26, r1
     bba:	b1 09       	sbc	r27, r1
     bbc:	c8 f7       	brcc	.-14     	; 0xbb0 <i2c_readNak+0x12>
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     bc0:	89 2b       	or	r24, r25
     bc2:	8a 2b       	or	r24, r26
     bc4:	8b 2b       	or	r24, r27
     bc6:	19 f0       	breq	.+6      	; 0xbce <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     bc8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     bcc:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     bce:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     bd0:	08 95       	ret

00000bd2 <USART_Init>:
#include <avr/io.h>
#include <stdio.h>
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     bd2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;
     bd6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	UCSR0B = (1<<TXEN0);// | (1<<TXCIE0);
     bda:	88 e0       	ldi	r24, 0x08	; 8
     bdc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);//2 stop bit 8 bit
     be0:	8e e0       	ldi	r24, 0x0E	; 14
     be2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     be6:	08 95       	ret

00000be8 <__subsf3>:
     be8:	50 58       	subi	r21, 0x80	; 128

00000bea <__addsf3>:
     bea:	bb 27       	eor	r27, r27
     bec:	aa 27       	eor	r26, r26
     bee:	0e d0       	rcall	.+28     	; 0xc0c <__addsf3x>
     bf0:	48 c1       	rjmp	.+656    	; 0xe82 <__fp_round>
     bf2:	39 d1       	rcall	.+626    	; 0xe66 <__fp_pscA>
     bf4:	30 f0       	brcs	.+12     	; 0xc02 <__addsf3+0x18>
     bf6:	3e d1       	rcall	.+636    	; 0xe74 <__fp_pscB>
     bf8:	20 f0       	brcs	.+8      	; 0xc02 <__addsf3+0x18>
     bfa:	31 f4       	brne	.+12     	; 0xc08 <__addsf3+0x1e>
     bfc:	9f 3f       	cpi	r25, 0xFF	; 255
     bfe:	11 f4       	brne	.+4      	; 0xc04 <__addsf3+0x1a>
     c00:	1e f4       	brtc	.+6      	; 0xc08 <__addsf3+0x1e>
     c02:	2e c1       	rjmp	.+604    	; 0xe60 <__fp_nan>
     c04:	0e f4       	brtc	.+2      	; 0xc08 <__addsf3+0x1e>
     c06:	e0 95       	com	r30
     c08:	e7 fb       	bst	r30, 7
     c0a:	24 c1       	rjmp	.+584    	; 0xe54 <__fp_inf>

00000c0c <__addsf3x>:
     c0c:	e9 2f       	mov	r30, r25
     c0e:	4a d1       	rcall	.+660    	; 0xea4 <__fp_split3>
     c10:	80 f3       	brcs	.-32     	; 0xbf2 <__addsf3+0x8>
     c12:	ba 17       	cp	r27, r26
     c14:	62 07       	cpc	r22, r18
     c16:	73 07       	cpc	r23, r19
     c18:	84 07       	cpc	r24, r20
     c1a:	95 07       	cpc	r25, r21
     c1c:	18 f0       	brcs	.+6      	; 0xc24 <__addsf3x+0x18>
     c1e:	71 f4       	brne	.+28     	; 0xc3c <__addsf3x+0x30>
     c20:	9e f5       	brtc	.+102    	; 0xc88 <__addsf3x+0x7c>
     c22:	62 c1       	rjmp	.+708    	; 0xee8 <__fp_zero>
     c24:	0e f4       	brtc	.+2      	; 0xc28 <__addsf3x+0x1c>
     c26:	e0 95       	com	r30
     c28:	0b 2e       	mov	r0, r27
     c2a:	ba 2f       	mov	r27, r26
     c2c:	a0 2d       	mov	r26, r0
     c2e:	0b 01       	movw	r0, r22
     c30:	b9 01       	movw	r22, r18
     c32:	90 01       	movw	r18, r0
     c34:	0c 01       	movw	r0, r24
     c36:	ca 01       	movw	r24, r20
     c38:	a0 01       	movw	r20, r0
     c3a:	11 24       	eor	r1, r1
     c3c:	ff 27       	eor	r31, r31
     c3e:	59 1b       	sub	r21, r25
     c40:	99 f0       	breq	.+38     	; 0xc68 <__addsf3x+0x5c>
     c42:	59 3f       	cpi	r21, 0xF9	; 249
     c44:	50 f4       	brcc	.+20     	; 0xc5a <__addsf3x+0x4e>
     c46:	50 3e       	cpi	r21, 0xE0	; 224
     c48:	68 f1       	brcs	.+90     	; 0xca4 <__addsf3x+0x98>
     c4a:	1a 16       	cp	r1, r26
     c4c:	f0 40       	sbci	r31, 0x00	; 0
     c4e:	a2 2f       	mov	r26, r18
     c50:	23 2f       	mov	r18, r19
     c52:	34 2f       	mov	r19, r20
     c54:	44 27       	eor	r20, r20
     c56:	58 5f       	subi	r21, 0xF8	; 248
     c58:	f3 cf       	rjmp	.-26     	; 0xc40 <__addsf3x+0x34>
     c5a:	46 95       	lsr	r20
     c5c:	37 95       	ror	r19
     c5e:	27 95       	ror	r18
     c60:	a7 95       	ror	r26
     c62:	f0 40       	sbci	r31, 0x00	; 0
     c64:	53 95       	inc	r21
     c66:	c9 f7       	brne	.-14     	; 0xc5a <__addsf3x+0x4e>
     c68:	7e f4       	brtc	.+30     	; 0xc88 <__addsf3x+0x7c>
     c6a:	1f 16       	cp	r1, r31
     c6c:	ba 0b       	sbc	r27, r26
     c6e:	62 0b       	sbc	r22, r18
     c70:	73 0b       	sbc	r23, r19
     c72:	84 0b       	sbc	r24, r20
     c74:	ba f0       	brmi	.+46     	; 0xca4 <__addsf3x+0x98>
     c76:	91 50       	subi	r25, 0x01	; 1
     c78:	a1 f0       	breq	.+40     	; 0xca2 <__addsf3x+0x96>
     c7a:	ff 0f       	add	r31, r31
     c7c:	bb 1f       	adc	r27, r27
     c7e:	66 1f       	adc	r22, r22
     c80:	77 1f       	adc	r23, r23
     c82:	88 1f       	adc	r24, r24
     c84:	c2 f7       	brpl	.-16     	; 0xc76 <__addsf3x+0x6a>
     c86:	0e c0       	rjmp	.+28     	; 0xca4 <__addsf3x+0x98>
     c88:	ba 0f       	add	r27, r26
     c8a:	62 1f       	adc	r22, r18
     c8c:	73 1f       	adc	r23, r19
     c8e:	84 1f       	adc	r24, r20
     c90:	48 f4       	brcc	.+18     	; 0xca4 <__addsf3x+0x98>
     c92:	87 95       	ror	r24
     c94:	77 95       	ror	r23
     c96:	67 95       	ror	r22
     c98:	b7 95       	ror	r27
     c9a:	f7 95       	ror	r31
     c9c:	9e 3f       	cpi	r25, 0xFE	; 254
     c9e:	08 f0       	brcs	.+2      	; 0xca2 <__addsf3x+0x96>
     ca0:	b3 cf       	rjmp	.-154    	; 0xc08 <__addsf3+0x1e>
     ca2:	93 95       	inc	r25
     ca4:	88 0f       	add	r24, r24
     ca6:	08 f0       	brcs	.+2      	; 0xcaa <__addsf3x+0x9e>
     ca8:	99 27       	eor	r25, r25
     caa:	ee 0f       	add	r30, r30
     cac:	97 95       	ror	r25
     cae:	87 95       	ror	r24
     cb0:	08 95       	ret

00000cb2 <__divsf3>:
     cb2:	0c d0       	rcall	.+24     	; 0xccc <__divsf3x>
     cb4:	e6 c0       	rjmp	.+460    	; 0xe82 <__fp_round>
     cb6:	de d0       	rcall	.+444    	; 0xe74 <__fp_pscB>
     cb8:	40 f0       	brcs	.+16     	; 0xcca <__divsf3+0x18>
     cba:	d5 d0       	rcall	.+426    	; 0xe66 <__fp_pscA>
     cbc:	30 f0       	brcs	.+12     	; 0xcca <__divsf3+0x18>
     cbe:	21 f4       	brne	.+8      	; 0xcc8 <__divsf3+0x16>
     cc0:	5f 3f       	cpi	r21, 0xFF	; 255
     cc2:	19 f0       	breq	.+6      	; 0xcca <__divsf3+0x18>
     cc4:	c7 c0       	rjmp	.+398    	; 0xe54 <__fp_inf>
     cc6:	51 11       	cpse	r21, r1
     cc8:	10 c1       	rjmp	.+544    	; 0xeea <__fp_szero>
     cca:	ca c0       	rjmp	.+404    	; 0xe60 <__fp_nan>

00000ccc <__divsf3x>:
     ccc:	eb d0       	rcall	.+470    	; 0xea4 <__fp_split3>
     cce:	98 f3       	brcs	.-26     	; 0xcb6 <__divsf3+0x4>

00000cd0 <__divsf3_pse>:
     cd0:	99 23       	and	r25, r25
     cd2:	c9 f3       	breq	.-14     	; 0xcc6 <__divsf3+0x14>
     cd4:	55 23       	and	r21, r21
     cd6:	b1 f3       	breq	.-20     	; 0xcc4 <__divsf3+0x12>
     cd8:	95 1b       	sub	r25, r21
     cda:	55 0b       	sbc	r21, r21
     cdc:	bb 27       	eor	r27, r27
     cde:	aa 27       	eor	r26, r26
     ce0:	62 17       	cp	r22, r18
     ce2:	73 07       	cpc	r23, r19
     ce4:	84 07       	cpc	r24, r20
     ce6:	38 f0       	brcs	.+14     	; 0xcf6 <__divsf3_pse+0x26>
     ce8:	9f 5f       	subi	r25, 0xFF	; 255
     cea:	5f 4f       	sbci	r21, 0xFF	; 255
     cec:	22 0f       	add	r18, r18
     cee:	33 1f       	adc	r19, r19
     cf0:	44 1f       	adc	r20, r20
     cf2:	aa 1f       	adc	r26, r26
     cf4:	a9 f3       	breq	.-22     	; 0xce0 <__divsf3_pse+0x10>
     cf6:	33 d0       	rcall	.+102    	; 0xd5e <__divsf3_pse+0x8e>
     cf8:	0e 2e       	mov	r0, r30
     cfa:	3a f0       	brmi	.+14     	; 0xd0a <__divsf3_pse+0x3a>
     cfc:	e0 e8       	ldi	r30, 0x80	; 128
     cfe:	30 d0       	rcall	.+96     	; 0xd60 <__divsf3_pse+0x90>
     d00:	91 50       	subi	r25, 0x01	; 1
     d02:	50 40       	sbci	r21, 0x00	; 0
     d04:	e6 95       	lsr	r30
     d06:	00 1c       	adc	r0, r0
     d08:	ca f7       	brpl	.-14     	; 0xcfc <__divsf3_pse+0x2c>
     d0a:	29 d0       	rcall	.+82     	; 0xd5e <__divsf3_pse+0x8e>
     d0c:	fe 2f       	mov	r31, r30
     d0e:	27 d0       	rcall	.+78     	; 0xd5e <__divsf3_pse+0x8e>
     d10:	66 0f       	add	r22, r22
     d12:	77 1f       	adc	r23, r23
     d14:	88 1f       	adc	r24, r24
     d16:	bb 1f       	adc	r27, r27
     d18:	26 17       	cp	r18, r22
     d1a:	37 07       	cpc	r19, r23
     d1c:	48 07       	cpc	r20, r24
     d1e:	ab 07       	cpc	r26, r27
     d20:	b0 e8       	ldi	r27, 0x80	; 128
     d22:	09 f0       	breq	.+2      	; 0xd26 <__divsf3_pse+0x56>
     d24:	bb 0b       	sbc	r27, r27
     d26:	80 2d       	mov	r24, r0
     d28:	bf 01       	movw	r22, r30
     d2a:	ff 27       	eor	r31, r31
     d2c:	93 58       	subi	r25, 0x83	; 131
     d2e:	5f 4f       	sbci	r21, 0xFF	; 255
     d30:	2a f0       	brmi	.+10     	; 0xd3c <__divsf3_pse+0x6c>
     d32:	9e 3f       	cpi	r25, 0xFE	; 254
     d34:	51 05       	cpc	r21, r1
     d36:	68 f0       	brcs	.+26     	; 0xd52 <__divsf3_pse+0x82>
     d38:	8d c0       	rjmp	.+282    	; 0xe54 <__fp_inf>
     d3a:	d7 c0       	rjmp	.+430    	; 0xeea <__fp_szero>
     d3c:	5f 3f       	cpi	r21, 0xFF	; 255
     d3e:	ec f3       	brlt	.-6      	; 0xd3a <__divsf3_pse+0x6a>
     d40:	98 3e       	cpi	r25, 0xE8	; 232
     d42:	dc f3       	brlt	.-10     	; 0xd3a <__divsf3_pse+0x6a>
     d44:	86 95       	lsr	r24
     d46:	77 95       	ror	r23
     d48:	67 95       	ror	r22
     d4a:	b7 95       	ror	r27
     d4c:	f7 95       	ror	r31
     d4e:	9f 5f       	subi	r25, 0xFF	; 255
     d50:	c9 f7       	brne	.-14     	; 0xd44 <__divsf3_pse+0x74>
     d52:	88 0f       	add	r24, r24
     d54:	91 1d       	adc	r25, r1
     d56:	96 95       	lsr	r25
     d58:	87 95       	ror	r24
     d5a:	97 f9       	bld	r25, 7
     d5c:	08 95       	ret
     d5e:	e1 e0       	ldi	r30, 0x01	; 1
     d60:	66 0f       	add	r22, r22
     d62:	77 1f       	adc	r23, r23
     d64:	88 1f       	adc	r24, r24
     d66:	bb 1f       	adc	r27, r27
     d68:	62 17       	cp	r22, r18
     d6a:	73 07       	cpc	r23, r19
     d6c:	84 07       	cpc	r24, r20
     d6e:	ba 07       	cpc	r27, r26
     d70:	20 f0       	brcs	.+8      	; 0xd7a <__divsf3_pse+0xaa>
     d72:	62 1b       	sub	r22, r18
     d74:	73 0b       	sbc	r23, r19
     d76:	84 0b       	sbc	r24, r20
     d78:	ba 0b       	sbc	r27, r26
     d7a:	ee 1f       	adc	r30, r30
     d7c:	88 f7       	brcc	.-30     	; 0xd60 <__divsf3_pse+0x90>
     d7e:	e0 95       	com	r30
     d80:	08 95       	ret

00000d82 <__fixunssfsi>:
     d82:	98 d0       	rcall	.+304    	; 0xeb4 <__fp_splitA>
     d84:	88 f0       	brcs	.+34     	; 0xda8 <__fixunssfsi+0x26>
     d86:	9f 57       	subi	r25, 0x7F	; 127
     d88:	90 f0       	brcs	.+36     	; 0xdae <__fixunssfsi+0x2c>
     d8a:	b9 2f       	mov	r27, r25
     d8c:	99 27       	eor	r25, r25
     d8e:	b7 51       	subi	r27, 0x17	; 23
     d90:	a0 f0       	brcs	.+40     	; 0xdba <__fixunssfsi+0x38>
     d92:	d1 f0       	breq	.+52     	; 0xdc8 <__fixunssfsi+0x46>
     d94:	66 0f       	add	r22, r22
     d96:	77 1f       	adc	r23, r23
     d98:	88 1f       	adc	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	1a f0       	brmi	.+6      	; 0xda4 <__fixunssfsi+0x22>
     d9e:	ba 95       	dec	r27
     da0:	c9 f7       	brne	.-14     	; 0xd94 <__fixunssfsi+0x12>
     da2:	12 c0       	rjmp	.+36     	; 0xdc8 <__fixunssfsi+0x46>
     da4:	b1 30       	cpi	r27, 0x01	; 1
     da6:	81 f0       	breq	.+32     	; 0xdc8 <__fixunssfsi+0x46>
     da8:	9f d0       	rcall	.+318    	; 0xee8 <__fp_zero>
     daa:	b1 e0       	ldi	r27, 0x01	; 1
     dac:	08 95       	ret
     dae:	9c c0       	rjmp	.+312    	; 0xee8 <__fp_zero>
     db0:	67 2f       	mov	r22, r23
     db2:	78 2f       	mov	r23, r24
     db4:	88 27       	eor	r24, r24
     db6:	b8 5f       	subi	r27, 0xF8	; 248
     db8:	39 f0       	breq	.+14     	; 0xdc8 <__fixunssfsi+0x46>
     dba:	b9 3f       	cpi	r27, 0xF9	; 249
     dbc:	cc f3       	brlt	.-14     	; 0xdb0 <__fixunssfsi+0x2e>
     dbe:	86 95       	lsr	r24
     dc0:	77 95       	ror	r23
     dc2:	67 95       	ror	r22
     dc4:	b3 95       	inc	r27
     dc6:	d9 f7       	brne	.-10     	; 0xdbe <__fixunssfsi+0x3c>
     dc8:	3e f4       	brtc	.+14     	; 0xdd8 <__fixunssfsi+0x56>
     dca:	90 95       	com	r25
     dcc:	80 95       	com	r24
     dce:	70 95       	com	r23
     dd0:	61 95       	neg	r22
     dd2:	7f 4f       	sbci	r23, 0xFF	; 255
     dd4:	8f 4f       	sbci	r24, 0xFF	; 255
     dd6:	9f 4f       	sbci	r25, 0xFF	; 255
     dd8:	08 95       	ret

00000dda <__floatunsisf>:
     dda:	e8 94       	clt
     ddc:	09 c0       	rjmp	.+18     	; 0xdf0 <__floatsisf+0x12>

00000dde <__floatsisf>:
     dde:	97 fb       	bst	r25, 7
     de0:	3e f4       	brtc	.+14     	; 0xdf0 <__floatsisf+0x12>
     de2:	90 95       	com	r25
     de4:	80 95       	com	r24
     de6:	70 95       	com	r23
     de8:	61 95       	neg	r22
     dea:	7f 4f       	sbci	r23, 0xFF	; 255
     dec:	8f 4f       	sbci	r24, 0xFF	; 255
     dee:	9f 4f       	sbci	r25, 0xFF	; 255
     df0:	99 23       	and	r25, r25
     df2:	a9 f0       	breq	.+42     	; 0xe1e <__floatsisf+0x40>
     df4:	f9 2f       	mov	r31, r25
     df6:	96 e9       	ldi	r25, 0x96	; 150
     df8:	bb 27       	eor	r27, r27
     dfa:	93 95       	inc	r25
     dfc:	f6 95       	lsr	r31
     dfe:	87 95       	ror	r24
     e00:	77 95       	ror	r23
     e02:	67 95       	ror	r22
     e04:	b7 95       	ror	r27
     e06:	f1 11       	cpse	r31, r1
     e08:	f8 cf       	rjmp	.-16     	; 0xdfa <__floatsisf+0x1c>
     e0a:	fa f4       	brpl	.+62     	; 0xe4a <__floatsisf+0x6c>
     e0c:	bb 0f       	add	r27, r27
     e0e:	11 f4       	brne	.+4      	; 0xe14 <__floatsisf+0x36>
     e10:	60 ff       	sbrs	r22, 0
     e12:	1b c0       	rjmp	.+54     	; 0xe4a <__floatsisf+0x6c>
     e14:	6f 5f       	subi	r22, 0xFF	; 255
     e16:	7f 4f       	sbci	r23, 0xFF	; 255
     e18:	8f 4f       	sbci	r24, 0xFF	; 255
     e1a:	9f 4f       	sbci	r25, 0xFF	; 255
     e1c:	16 c0       	rjmp	.+44     	; 0xe4a <__floatsisf+0x6c>
     e1e:	88 23       	and	r24, r24
     e20:	11 f0       	breq	.+4      	; 0xe26 <__floatsisf+0x48>
     e22:	96 e9       	ldi	r25, 0x96	; 150
     e24:	11 c0       	rjmp	.+34     	; 0xe48 <__floatsisf+0x6a>
     e26:	77 23       	and	r23, r23
     e28:	21 f0       	breq	.+8      	; 0xe32 <__floatsisf+0x54>
     e2a:	9e e8       	ldi	r25, 0x8E	; 142
     e2c:	87 2f       	mov	r24, r23
     e2e:	76 2f       	mov	r23, r22
     e30:	05 c0       	rjmp	.+10     	; 0xe3c <__floatsisf+0x5e>
     e32:	66 23       	and	r22, r22
     e34:	71 f0       	breq	.+28     	; 0xe52 <__floatsisf+0x74>
     e36:	96 e8       	ldi	r25, 0x86	; 134
     e38:	86 2f       	mov	r24, r22
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	2a f0       	brmi	.+10     	; 0xe4a <__floatsisf+0x6c>
     e40:	9a 95       	dec	r25
     e42:	66 0f       	add	r22, r22
     e44:	77 1f       	adc	r23, r23
     e46:	88 1f       	adc	r24, r24
     e48:	da f7       	brpl	.-10     	; 0xe40 <__floatsisf+0x62>
     e4a:	88 0f       	add	r24, r24
     e4c:	96 95       	lsr	r25
     e4e:	87 95       	ror	r24
     e50:	97 f9       	bld	r25, 7
     e52:	08 95       	ret

00000e54 <__fp_inf>:
     e54:	97 f9       	bld	r25, 7
     e56:	9f 67       	ori	r25, 0x7F	; 127
     e58:	80 e8       	ldi	r24, 0x80	; 128
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	08 95       	ret

00000e60 <__fp_nan>:
     e60:	9f ef       	ldi	r25, 0xFF	; 255
     e62:	80 ec       	ldi	r24, 0xC0	; 192
     e64:	08 95       	ret

00000e66 <__fp_pscA>:
     e66:	00 24       	eor	r0, r0
     e68:	0a 94       	dec	r0
     e6a:	16 16       	cp	r1, r22
     e6c:	17 06       	cpc	r1, r23
     e6e:	18 06       	cpc	r1, r24
     e70:	09 06       	cpc	r0, r25
     e72:	08 95       	ret

00000e74 <__fp_pscB>:
     e74:	00 24       	eor	r0, r0
     e76:	0a 94       	dec	r0
     e78:	12 16       	cp	r1, r18
     e7a:	13 06       	cpc	r1, r19
     e7c:	14 06       	cpc	r1, r20
     e7e:	05 06       	cpc	r0, r21
     e80:	08 95       	ret

00000e82 <__fp_round>:
     e82:	09 2e       	mov	r0, r25
     e84:	03 94       	inc	r0
     e86:	00 0c       	add	r0, r0
     e88:	11 f4       	brne	.+4      	; 0xe8e <__fp_round+0xc>
     e8a:	88 23       	and	r24, r24
     e8c:	52 f0       	brmi	.+20     	; 0xea2 <__fp_round+0x20>
     e8e:	bb 0f       	add	r27, r27
     e90:	40 f4       	brcc	.+16     	; 0xea2 <__fp_round+0x20>
     e92:	bf 2b       	or	r27, r31
     e94:	11 f4       	brne	.+4      	; 0xe9a <__fp_round+0x18>
     e96:	60 ff       	sbrs	r22, 0
     e98:	04 c0       	rjmp	.+8      	; 0xea2 <__fp_round+0x20>
     e9a:	6f 5f       	subi	r22, 0xFF	; 255
     e9c:	7f 4f       	sbci	r23, 0xFF	; 255
     e9e:	8f 4f       	sbci	r24, 0xFF	; 255
     ea0:	9f 4f       	sbci	r25, 0xFF	; 255
     ea2:	08 95       	ret

00000ea4 <__fp_split3>:
     ea4:	57 fd       	sbrc	r21, 7
     ea6:	90 58       	subi	r25, 0x80	; 128
     ea8:	44 0f       	add	r20, r20
     eaa:	55 1f       	adc	r21, r21
     eac:	59 f0       	breq	.+22     	; 0xec4 <__fp_splitA+0x10>
     eae:	5f 3f       	cpi	r21, 0xFF	; 255
     eb0:	71 f0       	breq	.+28     	; 0xece <__fp_splitA+0x1a>
     eb2:	47 95       	ror	r20

00000eb4 <__fp_splitA>:
     eb4:	88 0f       	add	r24, r24
     eb6:	97 fb       	bst	r25, 7
     eb8:	99 1f       	adc	r25, r25
     eba:	61 f0       	breq	.+24     	; 0xed4 <__fp_splitA+0x20>
     ebc:	9f 3f       	cpi	r25, 0xFF	; 255
     ebe:	79 f0       	breq	.+30     	; 0xede <__fp_splitA+0x2a>
     ec0:	87 95       	ror	r24
     ec2:	08 95       	ret
     ec4:	12 16       	cp	r1, r18
     ec6:	13 06       	cpc	r1, r19
     ec8:	14 06       	cpc	r1, r20
     eca:	55 1f       	adc	r21, r21
     ecc:	f2 cf       	rjmp	.-28     	; 0xeb2 <__fp_split3+0xe>
     ece:	46 95       	lsr	r20
     ed0:	f1 df       	rcall	.-30     	; 0xeb4 <__fp_splitA>
     ed2:	08 c0       	rjmp	.+16     	; 0xee4 <__fp_splitA+0x30>
     ed4:	16 16       	cp	r1, r22
     ed6:	17 06       	cpc	r1, r23
     ed8:	18 06       	cpc	r1, r24
     eda:	99 1f       	adc	r25, r25
     edc:	f1 cf       	rjmp	.-30     	; 0xec0 <__fp_splitA+0xc>
     ede:	86 95       	lsr	r24
     ee0:	71 05       	cpc	r23, r1
     ee2:	61 05       	cpc	r22, r1
     ee4:	08 94       	sec
     ee6:	08 95       	ret

00000ee8 <__fp_zero>:
     ee8:	e8 94       	clt

00000eea <__fp_szero>:
     eea:	bb 27       	eor	r27, r27
     eec:	66 27       	eor	r22, r22
     eee:	77 27       	eor	r23, r23
     ef0:	cb 01       	movw	r24, r22
     ef2:	97 f9       	bld	r25, 7
     ef4:	08 95       	ret

00000ef6 <__mulsf3>:
     ef6:	0b d0       	rcall	.+22     	; 0xf0e <__mulsf3x>
     ef8:	c4 cf       	rjmp	.-120    	; 0xe82 <__fp_round>
     efa:	b5 df       	rcall	.-150    	; 0xe66 <__fp_pscA>
     efc:	28 f0       	brcs	.+10     	; 0xf08 <__mulsf3+0x12>
     efe:	ba df       	rcall	.-140    	; 0xe74 <__fp_pscB>
     f00:	18 f0       	brcs	.+6      	; 0xf08 <__mulsf3+0x12>
     f02:	95 23       	and	r25, r21
     f04:	09 f0       	breq	.+2      	; 0xf08 <__mulsf3+0x12>
     f06:	a6 cf       	rjmp	.-180    	; 0xe54 <__fp_inf>
     f08:	ab cf       	rjmp	.-170    	; 0xe60 <__fp_nan>
     f0a:	11 24       	eor	r1, r1
     f0c:	ee cf       	rjmp	.-36     	; 0xeea <__fp_szero>

00000f0e <__mulsf3x>:
     f0e:	ca df       	rcall	.-108    	; 0xea4 <__fp_split3>
     f10:	a0 f3       	brcs	.-24     	; 0xefa <__mulsf3+0x4>

00000f12 <__mulsf3_pse>:
     f12:	95 9f       	mul	r25, r21
     f14:	d1 f3       	breq	.-12     	; 0xf0a <__mulsf3+0x14>
     f16:	95 0f       	add	r25, r21
     f18:	50 e0       	ldi	r21, 0x00	; 0
     f1a:	55 1f       	adc	r21, r21
     f1c:	62 9f       	mul	r22, r18
     f1e:	f0 01       	movw	r30, r0
     f20:	72 9f       	mul	r23, r18
     f22:	bb 27       	eor	r27, r27
     f24:	f0 0d       	add	r31, r0
     f26:	b1 1d       	adc	r27, r1
     f28:	63 9f       	mul	r22, r19
     f2a:	aa 27       	eor	r26, r26
     f2c:	f0 0d       	add	r31, r0
     f2e:	b1 1d       	adc	r27, r1
     f30:	aa 1f       	adc	r26, r26
     f32:	64 9f       	mul	r22, r20
     f34:	66 27       	eor	r22, r22
     f36:	b0 0d       	add	r27, r0
     f38:	a1 1d       	adc	r26, r1
     f3a:	66 1f       	adc	r22, r22
     f3c:	82 9f       	mul	r24, r18
     f3e:	22 27       	eor	r18, r18
     f40:	b0 0d       	add	r27, r0
     f42:	a1 1d       	adc	r26, r1
     f44:	62 1f       	adc	r22, r18
     f46:	73 9f       	mul	r23, r19
     f48:	b0 0d       	add	r27, r0
     f4a:	a1 1d       	adc	r26, r1
     f4c:	62 1f       	adc	r22, r18
     f4e:	83 9f       	mul	r24, r19
     f50:	a0 0d       	add	r26, r0
     f52:	61 1d       	adc	r22, r1
     f54:	22 1f       	adc	r18, r18
     f56:	74 9f       	mul	r23, r20
     f58:	33 27       	eor	r19, r19
     f5a:	a0 0d       	add	r26, r0
     f5c:	61 1d       	adc	r22, r1
     f5e:	23 1f       	adc	r18, r19
     f60:	84 9f       	mul	r24, r20
     f62:	60 0d       	add	r22, r0
     f64:	21 1d       	adc	r18, r1
     f66:	82 2f       	mov	r24, r18
     f68:	76 2f       	mov	r23, r22
     f6a:	6a 2f       	mov	r22, r26
     f6c:	11 24       	eor	r1, r1
     f6e:	9f 57       	subi	r25, 0x7F	; 127
     f70:	50 40       	sbci	r21, 0x00	; 0
     f72:	8a f0       	brmi	.+34     	; 0xf96 <__mulsf3_pse+0x84>
     f74:	e1 f0       	breq	.+56     	; 0xfae <__mulsf3_pse+0x9c>
     f76:	88 23       	and	r24, r24
     f78:	4a f0       	brmi	.+18     	; 0xf8c <__mulsf3_pse+0x7a>
     f7a:	ee 0f       	add	r30, r30
     f7c:	ff 1f       	adc	r31, r31
     f7e:	bb 1f       	adc	r27, r27
     f80:	66 1f       	adc	r22, r22
     f82:	77 1f       	adc	r23, r23
     f84:	88 1f       	adc	r24, r24
     f86:	91 50       	subi	r25, 0x01	; 1
     f88:	50 40       	sbci	r21, 0x00	; 0
     f8a:	a9 f7       	brne	.-22     	; 0xf76 <__mulsf3_pse+0x64>
     f8c:	9e 3f       	cpi	r25, 0xFE	; 254
     f8e:	51 05       	cpc	r21, r1
     f90:	70 f0       	brcs	.+28     	; 0xfae <__mulsf3_pse+0x9c>
     f92:	60 cf       	rjmp	.-320    	; 0xe54 <__fp_inf>
     f94:	aa cf       	rjmp	.-172    	; 0xeea <__fp_szero>
     f96:	5f 3f       	cpi	r21, 0xFF	; 255
     f98:	ec f3       	brlt	.-6      	; 0xf94 <__mulsf3_pse+0x82>
     f9a:	98 3e       	cpi	r25, 0xE8	; 232
     f9c:	dc f3       	brlt	.-10     	; 0xf94 <__mulsf3_pse+0x82>
     f9e:	86 95       	lsr	r24
     fa0:	77 95       	ror	r23
     fa2:	67 95       	ror	r22
     fa4:	b7 95       	ror	r27
     fa6:	f7 95       	ror	r31
     fa8:	e7 95       	ror	r30
     faa:	9f 5f       	subi	r25, 0xFF	; 255
     fac:	c1 f7       	brne	.-16     	; 0xf9e <__mulsf3_pse+0x8c>
     fae:	fe 2b       	or	r31, r30
     fb0:	88 0f       	add	r24, r24
     fb2:	91 1d       	adc	r25, r1
     fb4:	96 95       	lsr	r25
     fb6:	87 95       	ror	r24
     fb8:	97 f9       	bld	r25, 7
     fba:	08 95       	ret

00000fbc <__divmodhi4>:
     fbc:	97 fb       	bst	r25, 7
     fbe:	07 2e       	mov	r0, r23
     fc0:	16 f4       	brtc	.+4      	; 0xfc6 <__divmodhi4+0xa>
     fc2:	00 94       	com	r0
     fc4:	06 d0       	rcall	.+12     	; 0xfd2 <__divmodhi4_neg1>
     fc6:	77 fd       	sbrc	r23, 7
     fc8:	08 d0       	rcall	.+16     	; 0xfda <__divmodhi4_neg2>
     fca:	27 d0       	rcall	.+78     	; 0x101a <__udivmodhi4>
     fcc:	07 fc       	sbrc	r0, 7
     fce:	05 d0       	rcall	.+10     	; 0xfda <__divmodhi4_neg2>
     fd0:	3e f4       	brtc	.+14     	; 0xfe0 <__divmodhi4_exit>

00000fd2 <__divmodhi4_neg1>:
     fd2:	90 95       	com	r25
     fd4:	81 95       	neg	r24
     fd6:	9f 4f       	sbci	r25, 0xFF	; 255
     fd8:	08 95       	ret

00000fda <__divmodhi4_neg2>:
     fda:	70 95       	com	r23
     fdc:	61 95       	neg	r22
     fde:	7f 4f       	sbci	r23, 0xFF	; 255

00000fe0 <__divmodhi4_exit>:
     fe0:	08 95       	ret

00000fe2 <__divmodsi4>:
     fe2:	05 2e       	mov	r0, r21
     fe4:	97 fb       	bst	r25, 7
     fe6:	16 f4       	brtc	.+4      	; 0xfec <__divmodsi4+0xa>
     fe8:	00 94       	com	r0
     fea:	0f d0       	rcall	.+30     	; 0x100a <__negsi2>
     fec:	57 fd       	sbrc	r21, 7
     fee:	05 d0       	rcall	.+10     	; 0xffa <__divmodsi4_neg2>
     ff0:	28 d0       	rcall	.+80     	; 0x1042 <__udivmodsi4>
     ff2:	07 fc       	sbrc	r0, 7
     ff4:	02 d0       	rcall	.+4      	; 0xffa <__divmodsi4_neg2>
     ff6:	46 f4       	brtc	.+16     	; 0x1008 <__divmodsi4_exit>
     ff8:	08 c0       	rjmp	.+16     	; 0x100a <__negsi2>

00000ffa <__divmodsi4_neg2>:
     ffa:	50 95       	com	r21
     ffc:	40 95       	com	r20
     ffe:	30 95       	com	r19
    1000:	21 95       	neg	r18
    1002:	3f 4f       	sbci	r19, 0xFF	; 255
    1004:	4f 4f       	sbci	r20, 0xFF	; 255
    1006:	5f 4f       	sbci	r21, 0xFF	; 255

00001008 <__divmodsi4_exit>:
    1008:	08 95       	ret

0000100a <__negsi2>:
    100a:	90 95       	com	r25
    100c:	80 95       	com	r24
    100e:	70 95       	com	r23
    1010:	61 95       	neg	r22
    1012:	7f 4f       	sbci	r23, 0xFF	; 255
    1014:	8f 4f       	sbci	r24, 0xFF	; 255
    1016:	9f 4f       	sbci	r25, 0xFF	; 255
    1018:	08 95       	ret

0000101a <__udivmodhi4>:
    101a:	aa 1b       	sub	r26, r26
    101c:	bb 1b       	sub	r27, r27
    101e:	51 e1       	ldi	r21, 0x11	; 17
    1020:	07 c0       	rjmp	.+14     	; 0x1030 <__udivmodhi4_ep>

00001022 <__udivmodhi4_loop>:
    1022:	aa 1f       	adc	r26, r26
    1024:	bb 1f       	adc	r27, r27
    1026:	a6 17       	cp	r26, r22
    1028:	b7 07       	cpc	r27, r23
    102a:	10 f0       	brcs	.+4      	; 0x1030 <__udivmodhi4_ep>
    102c:	a6 1b       	sub	r26, r22
    102e:	b7 0b       	sbc	r27, r23

00001030 <__udivmodhi4_ep>:
    1030:	88 1f       	adc	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	5a 95       	dec	r21
    1036:	a9 f7       	brne	.-22     	; 0x1022 <__udivmodhi4_loop>
    1038:	80 95       	com	r24
    103a:	90 95       	com	r25
    103c:	bc 01       	movw	r22, r24
    103e:	cd 01       	movw	r24, r26
    1040:	08 95       	ret

00001042 <__udivmodsi4>:
    1042:	a1 e2       	ldi	r26, 0x21	; 33
    1044:	1a 2e       	mov	r1, r26
    1046:	aa 1b       	sub	r26, r26
    1048:	bb 1b       	sub	r27, r27
    104a:	fd 01       	movw	r30, r26
    104c:	0d c0       	rjmp	.+26     	; 0x1068 <__udivmodsi4_ep>

0000104e <__udivmodsi4_loop>:
    104e:	aa 1f       	adc	r26, r26
    1050:	bb 1f       	adc	r27, r27
    1052:	ee 1f       	adc	r30, r30
    1054:	ff 1f       	adc	r31, r31
    1056:	a2 17       	cp	r26, r18
    1058:	b3 07       	cpc	r27, r19
    105a:	e4 07       	cpc	r30, r20
    105c:	f5 07       	cpc	r31, r21
    105e:	20 f0       	brcs	.+8      	; 0x1068 <__udivmodsi4_ep>
    1060:	a2 1b       	sub	r26, r18
    1062:	b3 0b       	sbc	r27, r19
    1064:	e4 0b       	sbc	r30, r20
    1066:	f5 0b       	sbc	r31, r21

00001068 <__udivmodsi4_ep>:
    1068:	66 1f       	adc	r22, r22
    106a:	77 1f       	adc	r23, r23
    106c:	88 1f       	adc	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	1a 94       	dec	r1
    1072:	69 f7       	brne	.-38     	; 0x104e <__udivmodsi4_loop>
    1074:	60 95       	com	r22
    1076:	70 95       	com	r23
    1078:	80 95       	com	r24
    107a:	90 95       	com	r25
    107c:	9b 01       	movw	r18, r22
    107e:	ac 01       	movw	r20, r24
    1080:	bd 01       	movw	r22, r26
    1082:	cf 01       	movw	r24, r30
    1084:	08 95       	ret

00001086 <__itoa_ncheck>:
    1086:	bb 27       	eor	r27, r27
    1088:	4a 30       	cpi	r20, 0x0A	; 10
    108a:	31 f4       	brne	.+12     	; 0x1098 <__itoa_ncheck+0x12>
    108c:	99 23       	and	r25, r25
    108e:	22 f4       	brpl	.+8      	; 0x1098 <__itoa_ncheck+0x12>
    1090:	bd e2       	ldi	r27, 0x2D	; 45
    1092:	90 95       	com	r25
    1094:	81 95       	neg	r24
    1096:	9f 4f       	sbci	r25, 0xFF	; 255
    1098:	01 c0       	rjmp	.+2      	; 0x109c <__utoa_common>

0000109a <__utoa_ncheck>:
    109a:	bb 27       	eor	r27, r27

0000109c <__utoa_common>:
    109c:	fb 01       	movw	r30, r22
    109e:	55 27       	eor	r21, r21
    10a0:	aa 27       	eor	r26, r26
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	aa 1f       	adc	r26, r26
    10a8:	a4 17       	cp	r26, r20
    10aa:	10 f0       	brcs	.+4      	; 0x10b0 <__utoa_common+0x14>
    10ac:	a4 1b       	sub	r26, r20
    10ae:	83 95       	inc	r24
    10b0:	50 51       	subi	r21, 0x10	; 16
    10b2:	b9 f7       	brne	.-18     	; 0x10a2 <__utoa_common+0x6>
    10b4:	a0 5d       	subi	r26, 0xD0	; 208
    10b6:	aa 33       	cpi	r26, 0x3A	; 58
    10b8:	08 f0       	brcs	.+2      	; 0x10bc <__utoa_common+0x20>
    10ba:	a9 5d       	subi	r26, 0xD9	; 217
    10bc:	a1 93       	st	Z+, r26
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	79 f7       	brne	.-34     	; 0x10a0 <__utoa_common+0x4>
    10c2:	b1 11       	cpse	r27, r1
    10c4:	b1 93       	st	Z+, r27
    10c6:	11 92       	st	Z+, r1
    10c8:	cb 01       	movw	r24, r22
    10ca:	e7 c3       	rjmp	.+1998   	; 0x189a <strrev>

000010cc <fdevopen>:
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	31 f4       	brne	.+12     	; 0x10e4 <fdevopen+0x18>
    10d8:	61 15       	cp	r22, r1
    10da:	71 05       	cpc	r23, r1
    10dc:	19 f4       	brne	.+6      	; 0x10e4 <fdevopen+0x18>
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	39 c0       	rjmp	.+114    	; 0x1156 <fdevopen+0x8a>
    10e4:	8b 01       	movw	r16, r22
    10e6:	ec 01       	movw	r28, r24
    10e8:	6e e0       	ldi	r22, 0x0E	; 14
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	7c d2       	rcall	.+1272   	; 0x15ea <calloc>
    10f2:	fc 01       	movw	r30, r24
    10f4:	89 2b       	or	r24, r25
    10f6:	99 f3       	breq	.-26     	; 0x10de <fdevopen+0x12>
    10f8:	80 e8       	ldi	r24, 0x80	; 128
    10fa:	83 83       	std	Z+3, r24	; 0x03
    10fc:	01 15       	cp	r16, r1
    10fe:	11 05       	cpc	r17, r1
    1100:	71 f0       	breq	.+28     	; 0x111e <fdevopen+0x52>
    1102:	13 87       	std	Z+11, r17	; 0x0b
    1104:	02 87       	std	Z+10, r16	; 0x0a
    1106:	81 e8       	ldi	r24, 0x81	; 129
    1108:	83 83       	std	Z+3, r24	; 0x03
    110a:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <__iob>
    110e:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <__iob+0x1>
    1112:	89 2b       	or	r24, r25
    1114:	21 f4       	brne	.+8      	; 0x111e <fdevopen+0x52>
    1116:	f0 93 60 04 	sts	0x0460, r31	; 0x800460 <__iob+0x1>
    111a:	e0 93 5f 04 	sts	0x045F, r30	; 0x80045f <__iob>
    111e:	20 97       	sbiw	r28, 0x00	; 0
    1120:	c9 f0       	breq	.+50     	; 0x1154 <fdevopen+0x88>
    1122:	d1 87       	std	Z+9, r29	; 0x09
    1124:	c0 87       	std	Z+8, r28	; 0x08
    1126:	83 81       	ldd	r24, Z+3	; 0x03
    1128:	82 60       	ori	r24, 0x02	; 2
    112a:	83 83       	std	Z+3, r24	; 0x03
    112c:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <__iob+0x2>
    1130:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <__iob+0x3>
    1134:	89 2b       	or	r24, r25
    1136:	71 f4       	brne	.+28     	; 0x1154 <fdevopen+0x88>
    1138:	f0 93 62 04 	sts	0x0462, r31	; 0x800462 <__iob+0x3>
    113c:	e0 93 61 04 	sts	0x0461, r30	; 0x800461 <__iob+0x2>
    1140:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <__iob+0x4>
    1144:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <__iob+0x5>
    1148:	89 2b       	or	r24, r25
    114a:	21 f4       	brne	.+8      	; 0x1154 <fdevopen+0x88>
    114c:	f0 93 64 04 	sts	0x0464, r31	; 0x800464 <__iob+0x5>
    1150:	e0 93 63 04 	sts	0x0463, r30	; 0x800463 <__iob+0x4>
    1154:	cf 01       	movw	r24, r30
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	08 95       	ret

00001160 <printf>:
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	ae 01       	movw	r20, r28
    116a:	4a 5f       	subi	r20, 0xFA	; 250
    116c:	5f 4f       	sbci	r21, 0xFF	; 255
    116e:	fa 01       	movw	r30, r20
    1170:	61 91       	ld	r22, Z+
    1172:	71 91       	ld	r23, Z+
    1174:	af 01       	movw	r20, r30
    1176:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <__iob+0x2>
    117a:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <__iob+0x3>
    117e:	38 d0       	rcall	.+112    	; 0x11f0 <vfprintf>
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	08 95       	ret

00001186 <putchar>:
    1186:	60 91 61 04 	lds	r22, 0x0461	; 0x800461 <__iob+0x2>
    118a:	70 91 62 04 	lds	r23, 0x0462	; 0x800462 <__iob+0x3>
    118e:	95 c3       	rjmp	.+1834   	; 0x18ba <fputc>

00001190 <puts>:
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	e0 91 61 04 	lds	r30, 0x0461	; 0x800461 <__iob+0x2>
    119c:	f0 91 62 04 	lds	r31, 0x0462	; 0x800462 <__iob+0x3>
    11a0:	23 81       	ldd	r18, Z+3	; 0x03
    11a2:	21 ff       	sbrs	r18, 1
    11a4:	1b c0       	rjmp	.+54     	; 0x11dc <puts+0x4c>
    11a6:	8c 01       	movw	r16, r24
    11a8:	d0 e0       	ldi	r29, 0x00	; 0
    11aa:	c0 e0       	ldi	r28, 0x00	; 0
    11ac:	f8 01       	movw	r30, r16
    11ae:	81 91       	ld	r24, Z+
    11b0:	8f 01       	movw	r16, r30
    11b2:	60 91 61 04 	lds	r22, 0x0461	; 0x800461 <__iob+0x2>
    11b6:	70 91 62 04 	lds	r23, 0x0462	; 0x800462 <__iob+0x3>
    11ba:	db 01       	movw	r26, r22
    11bc:	18 96       	adiw	r26, 0x08	; 8
    11be:	ed 91       	ld	r30, X+
    11c0:	fc 91       	ld	r31, X
    11c2:	19 97       	sbiw	r26, 0x09	; 9
    11c4:	88 23       	and	r24, r24
    11c6:	31 f0       	breq	.+12     	; 0x11d4 <puts+0x44>
    11c8:	19 95       	eicall
    11ca:	89 2b       	or	r24, r25
    11cc:	79 f3       	breq	.-34     	; 0x11ac <puts+0x1c>
    11ce:	df ef       	ldi	r29, 0xFF	; 255
    11d0:	cf ef       	ldi	r28, 0xFF	; 255
    11d2:	ec cf       	rjmp	.-40     	; 0x11ac <puts+0x1c>
    11d4:	8a e0       	ldi	r24, 0x0A	; 10
    11d6:	19 95       	eicall
    11d8:	89 2b       	or	r24, r25
    11da:	19 f0       	breq	.+6      	; 0x11e2 <puts+0x52>
    11dc:	8f ef       	ldi	r24, 0xFF	; 255
    11de:	9f ef       	ldi	r25, 0xFF	; 255
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <puts+0x56>
    11e2:	8d 2f       	mov	r24, r29
    11e4:	9c 2f       	mov	r25, r28
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	08 95       	ret

000011f0 <vfprintf>:
    11f0:	2f 92       	push	r2
    11f2:	3f 92       	push	r3
    11f4:	4f 92       	push	r4
    11f6:	5f 92       	push	r5
    11f8:	6f 92       	push	r6
    11fa:	7f 92       	push	r7
    11fc:	8f 92       	push	r8
    11fe:	9f 92       	push	r9
    1200:	af 92       	push	r10
    1202:	bf 92       	push	r11
    1204:	cf 92       	push	r12
    1206:	df 92       	push	r13
    1208:	ef 92       	push	r14
    120a:	ff 92       	push	r15
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	2b 97       	sbiw	r28, 0x0b	; 11
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	de bf       	out	0x3e, r29	; 62
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	cd bf       	out	0x3d, r28	; 61
    1224:	6c 01       	movw	r12, r24
    1226:	7b 01       	movw	r14, r22
    1228:	8a 01       	movw	r16, r20
    122a:	fc 01       	movw	r30, r24
    122c:	17 82       	std	Z+7, r1	; 0x07
    122e:	16 82       	std	Z+6, r1	; 0x06
    1230:	83 81       	ldd	r24, Z+3	; 0x03
    1232:	81 ff       	sbrs	r24, 1
    1234:	bf c1       	rjmp	.+894    	; 0x15b4 <vfprintf+0x3c4>
    1236:	ce 01       	movw	r24, r28
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	3c 01       	movw	r6, r24
    123c:	f6 01       	movw	r30, r12
    123e:	93 81       	ldd	r25, Z+3	; 0x03
    1240:	f7 01       	movw	r30, r14
    1242:	93 fd       	sbrc	r25, 3
    1244:	85 91       	lpm	r24, Z+
    1246:	93 ff       	sbrs	r25, 3
    1248:	81 91       	ld	r24, Z+
    124a:	7f 01       	movw	r14, r30
    124c:	88 23       	and	r24, r24
    124e:	09 f4       	brne	.+2      	; 0x1252 <vfprintf+0x62>
    1250:	ad c1       	rjmp	.+858    	; 0x15ac <vfprintf+0x3bc>
    1252:	85 32       	cpi	r24, 0x25	; 37
    1254:	39 f4       	brne	.+14     	; 0x1264 <vfprintf+0x74>
    1256:	93 fd       	sbrc	r25, 3
    1258:	85 91       	lpm	r24, Z+
    125a:	93 ff       	sbrs	r25, 3
    125c:	81 91       	ld	r24, Z+
    125e:	7f 01       	movw	r14, r30
    1260:	85 32       	cpi	r24, 0x25	; 37
    1262:	21 f4       	brne	.+8      	; 0x126c <vfprintf+0x7c>
    1264:	b6 01       	movw	r22, r12
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	28 d3       	rcall	.+1616   	; 0x18ba <fputc>
    126a:	e8 cf       	rjmp	.-48     	; 0x123c <vfprintf+0x4c>
    126c:	91 2c       	mov	r9, r1
    126e:	21 2c       	mov	r2, r1
    1270:	31 2c       	mov	r3, r1
    1272:	ff e1       	ldi	r31, 0x1F	; 31
    1274:	f3 15       	cp	r31, r3
    1276:	d8 f0       	brcs	.+54     	; 0x12ae <vfprintf+0xbe>
    1278:	8b 32       	cpi	r24, 0x2B	; 43
    127a:	79 f0       	breq	.+30     	; 0x129a <vfprintf+0xaa>
    127c:	38 f4       	brcc	.+14     	; 0x128c <vfprintf+0x9c>
    127e:	80 32       	cpi	r24, 0x20	; 32
    1280:	79 f0       	breq	.+30     	; 0x12a0 <vfprintf+0xb0>
    1282:	83 32       	cpi	r24, 0x23	; 35
    1284:	a1 f4       	brne	.+40     	; 0x12ae <vfprintf+0xbe>
    1286:	23 2d       	mov	r18, r3
    1288:	20 61       	ori	r18, 0x10	; 16
    128a:	1d c0       	rjmp	.+58     	; 0x12c6 <vfprintf+0xd6>
    128c:	8d 32       	cpi	r24, 0x2D	; 45
    128e:	61 f0       	breq	.+24     	; 0x12a8 <vfprintf+0xb8>
    1290:	80 33       	cpi	r24, 0x30	; 48
    1292:	69 f4       	brne	.+26     	; 0x12ae <vfprintf+0xbe>
    1294:	23 2d       	mov	r18, r3
    1296:	21 60       	ori	r18, 0x01	; 1
    1298:	16 c0       	rjmp	.+44     	; 0x12c6 <vfprintf+0xd6>
    129a:	83 2d       	mov	r24, r3
    129c:	82 60       	ori	r24, 0x02	; 2
    129e:	38 2e       	mov	r3, r24
    12a0:	e3 2d       	mov	r30, r3
    12a2:	e4 60       	ori	r30, 0x04	; 4
    12a4:	3e 2e       	mov	r3, r30
    12a6:	2a c0       	rjmp	.+84     	; 0x12fc <vfprintf+0x10c>
    12a8:	f3 2d       	mov	r31, r3
    12aa:	f8 60       	ori	r31, 0x08	; 8
    12ac:	1d c0       	rjmp	.+58     	; 0x12e8 <vfprintf+0xf8>
    12ae:	37 fc       	sbrc	r3, 7
    12b0:	2d c0       	rjmp	.+90     	; 0x130c <vfprintf+0x11c>
    12b2:	20 ed       	ldi	r18, 0xD0	; 208
    12b4:	28 0f       	add	r18, r24
    12b6:	2a 30       	cpi	r18, 0x0A	; 10
    12b8:	40 f0       	brcs	.+16     	; 0x12ca <vfprintf+0xda>
    12ba:	8e 32       	cpi	r24, 0x2E	; 46
    12bc:	b9 f4       	brne	.+46     	; 0x12ec <vfprintf+0xfc>
    12be:	36 fc       	sbrc	r3, 6
    12c0:	75 c1       	rjmp	.+746    	; 0x15ac <vfprintf+0x3bc>
    12c2:	23 2d       	mov	r18, r3
    12c4:	20 64       	ori	r18, 0x40	; 64
    12c6:	32 2e       	mov	r3, r18
    12c8:	19 c0       	rjmp	.+50     	; 0x12fc <vfprintf+0x10c>
    12ca:	36 fe       	sbrs	r3, 6
    12cc:	06 c0       	rjmp	.+12     	; 0x12da <vfprintf+0xea>
    12ce:	8a e0       	ldi	r24, 0x0A	; 10
    12d0:	98 9e       	mul	r9, r24
    12d2:	20 0d       	add	r18, r0
    12d4:	11 24       	eor	r1, r1
    12d6:	92 2e       	mov	r9, r18
    12d8:	11 c0       	rjmp	.+34     	; 0x12fc <vfprintf+0x10c>
    12da:	ea e0       	ldi	r30, 0x0A	; 10
    12dc:	2e 9e       	mul	r2, r30
    12de:	20 0d       	add	r18, r0
    12e0:	11 24       	eor	r1, r1
    12e2:	22 2e       	mov	r2, r18
    12e4:	f3 2d       	mov	r31, r3
    12e6:	f0 62       	ori	r31, 0x20	; 32
    12e8:	3f 2e       	mov	r3, r31
    12ea:	08 c0       	rjmp	.+16     	; 0x12fc <vfprintf+0x10c>
    12ec:	8c 36       	cpi	r24, 0x6C	; 108
    12ee:	21 f4       	brne	.+8      	; 0x12f8 <vfprintf+0x108>
    12f0:	83 2d       	mov	r24, r3
    12f2:	80 68       	ori	r24, 0x80	; 128
    12f4:	38 2e       	mov	r3, r24
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <vfprintf+0x10c>
    12f8:	88 36       	cpi	r24, 0x68	; 104
    12fa:	41 f4       	brne	.+16     	; 0x130c <vfprintf+0x11c>
    12fc:	f7 01       	movw	r30, r14
    12fe:	93 fd       	sbrc	r25, 3
    1300:	85 91       	lpm	r24, Z+
    1302:	93 ff       	sbrs	r25, 3
    1304:	81 91       	ld	r24, Z+
    1306:	7f 01       	movw	r14, r30
    1308:	81 11       	cpse	r24, r1
    130a:	b3 cf       	rjmp	.-154    	; 0x1272 <vfprintf+0x82>
    130c:	98 2f       	mov	r25, r24
    130e:	9f 7d       	andi	r25, 0xDF	; 223
    1310:	95 54       	subi	r25, 0x45	; 69
    1312:	93 30       	cpi	r25, 0x03	; 3
    1314:	28 f4       	brcc	.+10     	; 0x1320 <vfprintf+0x130>
    1316:	0c 5f       	subi	r16, 0xFC	; 252
    1318:	1f 4f       	sbci	r17, 0xFF	; 255
    131a:	9f e3       	ldi	r25, 0x3F	; 63
    131c:	99 83       	std	Y+1, r25	; 0x01
    131e:	0d c0       	rjmp	.+26     	; 0x133a <vfprintf+0x14a>
    1320:	83 36       	cpi	r24, 0x63	; 99
    1322:	31 f0       	breq	.+12     	; 0x1330 <vfprintf+0x140>
    1324:	83 37       	cpi	r24, 0x73	; 115
    1326:	71 f0       	breq	.+28     	; 0x1344 <vfprintf+0x154>
    1328:	83 35       	cpi	r24, 0x53	; 83
    132a:	09 f0       	breq	.+2      	; 0x132e <vfprintf+0x13e>
    132c:	55 c0       	rjmp	.+170    	; 0x13d8 <vfprintf+0x1e8>
    132e:	20 c0       	rjmp	.+64     	; 0x1370 <vfprintf+0x180>
    1330:	f8 01       	movw	r30, r16
    1332:	80 81       	ld	r24, Z
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	0e 5f       	subi	r16, 0xFE	; 254
    1338:	1f 4f       	sbci	r17, 0xFF	; 255
    133a:	88 24       	eor	r8, r8
    133c:	83 94       	inc	r8
    133e:	91 2c       	mov	r9, r1
    1340:	53 01       	movw	r10, r6
    1342:	12 c0       	rjmp	.+36     	; 0x1368 <vfprintf+0x178>
    1344:	28 01       	movw	r4, r16
    1346:	f2 e0       	ldi	r31, 0x02	; 2
    1348:	4f 0e       	add	r4, r31
    134a:	51 1c       	adc	r5, r1
    134c:	f8 01       	movw	r30, r16
    134e:	a0 80       	ld	r10, Z
    1350:	b1 80       	ldd	r11, Z+1	; 0x01
    1352:	36 fe       	sbrs	r3, 6
    1354:	03 c0       	rjmp	.+6      	; 0x135c <vfprintf+0x16c>
    1356:	69 2d       	mov	r22, r9
    1358:	70 e0       	ldi	r23, 0x00	; 0
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <vfprintf+0x170>
    135c:	6f ef       	ldi	r22, 0xFF	; 255
    135e:	7f ef       	ldi	r23, 0xFF	; 255
    1360:	c5 01       	movw	r24, r10
    1362:	90 d2       	rcall	.+1312   	; 0x1884 <strnlen>
    1364:	4c 01       	movw	r8, r24
    1366:	82 01       	movw	r16, r4
    1368:	f3 2d       	mov	r31, r3
    136a:	ff 77       	andi	r31, 0x7F	; 127
    136c:	3f 2e       	mov	r3, r31
    136e:	15 c0       	rjmp	.+42     	; 0x139a <vfprintf+0x1aa>
    1370:	28 01       	movw	r4, r16
    1372:	22 e0       	ldi	r18, 0x02	; 2
    1374:	42 0e       	add	r4, r18
    1376:	51 1c       	adc	r5, r1
    1378:	f8 01       	movw	r30, r16
    137a:	a0 80       	ld	r10, Z
    137c:	b1 80       	ldd	r11, Z+1	; 0x01
    137e:	36 fe       	sbrs	r3, 6
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <vfprintf+0x198>
    1382:	69 2d       	mov	r22, r9
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	02 c0       	rjmp	.+4      	; 0x138c <vfprintf+0x19c>
    1388:	6f ef       	ldi	r22, 0xFF	; 255
    138a:	7f ef       	ldi	r23, 0xFF	; 255
    138c:	c5 01       	movw	r24, r10
    138e:	68 d2       	rcall	.+1232   	; 0x1860 <strnlen_P>
    1390:	4c 01       	movw	r8, r24
    1392:	f3 2d       	mov	r31, r3
    1394:	f0 68       	ori	r31, 0x80	; 128
    1396:	3f 2e       	mov	r3, r31
    1398:	82 01       	movw	r16, r4
    139a:	33 fc       	sbrc	r3, 3
    139c:	19 c0       	rjmp	.+50     	; 0x13d0 <vfprintf+0x1e0>
    139e:	82 2d       	mov	r24, r2
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	88 16       	cp	r8, r24
    13a4:	99 06       	cpc	r9, r25
    13a6:	a0 f4       	brcc	.+40     	; 0x13d0 <vfprintf+0x1e0>
    13a8:	b6 01       	movw	r22, r12
    13aa:	80 e2       	ldi	r24, 0x20	; 32
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	85 d2       	rcall	.+1290   	; 0x18ba <fputc>
    13b0:	2a 94       	dec	r2
    13b2:	f5 cf       	rjmp	.-22     	; 0x139e <vfprintf+0x1ae>
    13b4:	f5 01       	movw	r30, r10
    13b6:	37 fc       	sbrc	r3, 7
    13b8:	85 91       	lpm	r24, Z+
    13ba:	37 fe       	sbrs	r3, 7
    13bc:	81 91       	ld	r24, Z+
    13be:	5f 01       	movw	r10, r30
    13c0:	b6 01       	movw	r22, r12
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	7a d2       	rcall	.+1268   	; 0x18ba <fputc>
    13c6:	21 10       	cpse	r2, r1
    13c8:	2a 94       	dec	r2
    13ca:	21 e0       	ldi	r18, 0x01	; 1
    13cc:	82 1a       	sub	r8, r18
    13ce:	91 08       	sbc	r9, r1
    13d0:	81 14       	cp	r8, r1
    13d2:	91 04       	cpc	r9, r1
    13d4:	79 f7       	brne	.-34     	; 0x13b4 <vfprintf+0x1c4>
    13d6:	e1 c0       	rjmp	.+450    	; 0x159a <vfprintf+0x3aa>
    13d8:	84 36       	cpi	r24, 0x64	; 100
    13da:	11 f0       	breq	.+4      	; 0x13e0 <vfprintf+0x1f0>
    13dc:	89 36       	cpi	r24, 0x69	; 105
    13de:	39 f5       	brne	.+78     	; 0x142e <vfprintf+0x23e>
    13e0:	f8 01       	movw	r30, r16
    13e2:	37 fe       	sbrs	r3, 7
    13e4:	07 c0       	rjmp	.+14     	; 0x13f4 <vfprintf+0x204>
    13e6:	60 81       	ld	r22, Z
    13e8:	71 81       	ldd	r23, Z+1	; 0x01
    13ea:	82 81       	ldd	r24, Z+2	; 0x02
    13ec:	93 81       	ldd	r25, Z+3	; 0x03
    13ee:	0c 5f       	subi	r16, 0xFC	; 252
    13f0:	1f 4f       	sbci	r17, 0xFF	; 255
    13f2:	08 c0       	rjmp	.+16     	; 0x1404 <vfprintf+0x214>
    13f4:	60 81       	ld	r22, Z
    13f6:	71 81       	ldd	r23, Z+1	; 0x01
    13f8:	07 2e       	mov	r0, r23
    13fa:	00 0c       	add	r0, r0
    13fc:	88 0b       	sbc	r24, r24
    13fe:	99 0b       	sbc	r25, r25
    1400:	0e 5f       	subi	r16, 0xFE	; 254
    1402:	1f 4f       	sbci	r17, 0xFF	; 255
    1404:	f3 2d       	mov	r31, r3
    1406:	ff 76       	andi	r31, 0x6F	; 111
    1408:	3f 2e       	mov	r3, r31
    140a:	97 ff       	sbrs	r25, 7
    140c:	09 c0       	rjmp	.+18     	; 0x1420 <vfprintf+0x230>
    140e:	90 95       	com	r25
    1410:	80 95       	com	r24
    1412:	70 95       	com	r23
    1414:	61 95       	neg	r22
    1416:	7f 4f       	sbci	r23, 0xFF	; 255
    1418:	8f 4f       	sbci	r24, 0xFF	; 255
    141a:	9f 4f       	sbci	r25, 0xFF	; 255
    141c:	f0 68       	ori	r31, 0x80	; 128
    141e:	3f 2e       	mov	r3, r31
    1420:	2a e0       	ldi	r18, 0x0A	; 10
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	a3 01       	movw	r20, r6
    1426:	85 d2       	rcall	.+1290   	; 0x1932 <__ultoa_invert>
    1428:	88 2e       	mov	r8, r24
    142a:	86 18       	sub	r8, r6
    142c:	44 c0       	rjmp	.+136    	; 0x14b6 <vfprintf+0x2c6>
    142e:	85 37       	cpi	r24, 0x75	; 117
    1430:	31 f4       	brne	.+12     	; 0x143e <vfprintf+0x24e>
    1432:	23 2d       	mov	r18, r3
    1434:	2f 7e       	andi	r18, 0xEF	; 239
    1436:	b2 2e       	mov	r11, r18
    1438:	2a e0       	ldi	r18, 0x0A	; 10
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	25 c0       	rjmp	.+74     	; 0x1488 <vfprintf+0x298>
    143e:	93 2d       	mov	r25, r3
    1440:	99 7f       	andi	r25, 0xF9	; 249
    1442:	b9 2e       	mov	r11, r25
    1444:	8f 36       	cpi	r24, 0x6F	; 111
    1446:	c1 f0       	breq	.+48     	; 0x1478 <vfprintf+0x288>
    1448:	18 f4       	brcc	.+6      	; 0x1450 <vfprintf+0x260>
    144a:	88 35       	cpi	r24, 0x58	; 88
    144c:	79 f0       	breq	.+30     	; 0x146c <vfprintf+0x27c>
    144e:	ae c0       	rjmp	.+348    	; 0x15ac <vfprintf+0x3bc>
    1450:	80 37       	cpi	r24, 0x70	; 112
    1452:	19 f0       	breq	.+6      	; 0x145a <vfprintf+0x26a>
    1454:	88 37       	cpi	r24, 0x78	; 120
    1456:	21 f0       	breq	.+8      	; 0x1460 <vfprintf+0x270>
    1458:	a9 c0       	rjmp	.+338    	; 0x15ac <vfprintf+0x3bc>
    145a:	e9 2f       	mov	r30, r25
    145c:	e0 61       	ori	r30, 0x10	; 16
    145e:	be 2e       	mov	r11, r30
    1460:	b4 fe       	sbrs	r11, 4
    1462:	0d c0       	rjmp	.+26     	; 0x147e <vfprintf+0x28e>
    1464:	fb 2d       	mov	r31, r11
    1466:	f4 60       	ori	r31, 0x04	; 4
    1468:	bf 2e       	mov	r11, r31
    146a:	09 c0       	rjmp	.+18     	; 0x147e <vfprintf+0x28e>
    146c:	34 fe       	sbrs	r3, 4
    146e:	0a c0       	rjmp	.+20     	; 0x1484 <vfprintf+0x294>
    1470:	29 2f       	mov	r18, r25
    1472:	26 60       	ori	r18, 0x06	; 6
    1474:	b2 2e       	mov	r11, r18
    1476:	06 c0       	rjmp	.+12     	; 0x1484 <vfprintf+0x294>
    1478:	28 e0       	ldi	r18, 0x08	; 8
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	05 c0       	rjmp	.+10     	; 0x1488 <vfprintf+0x298>
    147e:	20 e1       	ldi	r18, 0x10	; 16
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <vfprintf+0x298>
    1484:	20 e1       	ldi	r18, 0x10	; 16
    1486:	32 e0       	ldi	r19, 0x02	; 2
    1488:	f8 01       	movw	r30, r16
    148a:	b7 fe       	sbrs	r11, 7
    148c:	07 c0       	rjmp	.+14     	; 0x149c <vfprintf+0x2ac>
    148e:	60 81       	ld	r22, Z
    1490:	71 81       	ldd	r23, Z+1	; 0x01
    1492:	82 81       	ldd	r24, Z+2	; 0x02
    1494:	93 81       	ldd	r25, Z+3	; 0x03
    1496:	0c 5f       	subi	r16, 0xFC	; 252
    1498:	1f 4f       	sbci	r17, 0xFF	; 255
    149a:	06 c0       	rjmp	.+12     	; 0x14a8 <vfprintf+0x2b8>
    149c:	60 81       	ld	r22, Z
    149e:	71 81       	ldd	r23, Z+1	; 0x01
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 5f       	subi	r16, 0xFE	; 254
    14a6:	1f 4f       	sbci	r17, 0xFF	; 255
    14a8:	a3 01       	movw	r20, r6
    14aa:	43 d2       	rcall	.+1158   	; 0x1932 <__ultoa_invert>
    14ac:	88 2e       	mov	r8, r24
    14ae:	86 18       	sub	r8, r6
    14b0:	fb 2d       	mov	r31, r11
    14b2:	ff 77       	andi	r31, 0x7F	; 127
    14b4:	3f 2e       	mov	r3, r31
    14b6:	36 fe       	sbrs	r3, 6
    14b8:	0d c0       	rjmp	.+26     	; 0x14d4 <vfprintf+0x2e4>
    14ba:	23 2d       	mov	r18, r3
    14bc:	2e 7f       	andi	r18, 0xFE	; 254
    14be:	a2 2e       	mov	r10, r18
    14c0:	89 14       	cp	r8, r9
    14c2:	58 f4       	brcc	.+22     	; 0x14da <vfprintf+0x2ea>
    14c4:	34 fe       	sbrs	r3, 4
    14c6:	0b c0       	rjmp	.+22     	; 0x14de <vfprintf+0x2ee>
    14c8:	32 fc       	sbrc	r3, 2
    14ca:	09 c0       	rjmp	.+18     	; 0x14de <vfprintf+0x2ee>
    14cc:	83 2d       	mov	r24, r3
    14ce:	8e 7e       	andi	r24, 0xEE	; 238
    14d0:	a8 2e       	mov	r10, r24
    14d2:	05 c0       	rjmp	.+10     	; 0x14de <vfprintf+0x2ee>
    14d4:	b8 2c       	mov	r11, r8
    14d6:	a3 2c       	mov	r10, r3
    14d8:	03 c0       	rjmp	.+6      	; 0x14e0 <vfprintf+0x2f0>
    14da:	b8 2c       	mov	r11, r8
    14dc:	01 c0       	rjmp	.+2      	; 0x14e0 <vfprintf+0x2f0>
    14de:	b9 2c       	mov	r11, r9
    14e0:	a4 fe       	sbrs	r10, 4
    14e2:	0f c0       	rjmp	.+30     	; 0x1502 <vfprintf+0x312>
    14e4:	fe 01       	movw	r30, r28
    14e6:	e8 0d       	add	r30, r8
    14e8:	f1 1d       	adc	r31, r1
    14ea:	80 81       	ld	r24, Z
    14ec:	80 33       	cpi	r24, 0x30	; 48
    14ee:	21 f4       	brne	.+8      	; 0x14f8 <vfprintf+0x308>
    14f0:	9a 2d       	mov	r25, r10
    14f2:	99 7e       	andi	r25, 0xE9	; 233
    14f4:	a9 2e       	mov	r10, r25
    14f6:	09 c0       	rjmp	.+18     	; 0x150a <vfprintf+0x31a>
    14f8:	a2 fe       	sbrs	r10, 2
    14fa:	06 c0       	rjmp	.+12     	; 0x1508 <vfprintf+0x318>
    14fc:	b3 94       	inc	r11
    14fe:	b3 94       	inc	r11
    1500:	04 c0       	rjmp	.+8      	; 0x150a <vfprintf+0x31a>
    1502:	8a 2d       	mov	r24, r10
    1504:	86 78       	andi	r24, 0x86	; 134
    1506:	09 f0       	breq	.+2      	; 0x150a <vfprintf+0x31a>
    1508:	b3 94       	inc	r11
    150a:	a3 fc       	sbrc	r10, 3
    150c:	10 c0       	rjmp	.+32     	; 0x152e <vfprintf+0x33e>
    150e:	a0 fe       	sbrs	r10, 0
    1510:	06 c0       	rjmp	.+12     	; 0x151e <vfprintf+0x32e>
    1512:	b2 14       	cp	r11, r2
    1514:	80 f4       	brcc	.+32     	; 0x1536 <vfprintf+0x346>
    1516:	28 0c       	add	r2, r8
    1518:	92 2c       	mov	r9, r2
    151a:	9b 18       	sub	r9, r11
    151c:	0d c0       	rjmp	.+26     	; 0x1538 <vfprintf+0x348>
    151e:	b2 14       	cp	r11, r2
    1520:	58 f4       	brcc	.+22     	; 0x1538 <vfprintf+0x348>
    1522:	b6 01       	movw	r22, r12
    1524:	80 e2       	ldi	r24, 0x20	; 32
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	c8 d1       	rcall	.+912    	; 0x18ba <fputc>
    152a:	b3 94       	inc	r11
    152c:	f8 cf       	rjmp	.-16     	; 0x151e <vfprintf+0x32e>
    152e:	b2 14       	cp	r11, r2
    1530:	18 f4       	brcc	.+6      	; 0x1538 <vfprintf+0x348>
    1532:	2b 18       	sub	r2, r11
    1534:	02 c0       	rjmp	.+4      	; 0x153a <vfprintf+0x34a>
    1536:	98 2c       	mov	r9, r8
    1538:	21 2c       	mov	r2, r1
    153a:	a4 fe       	sbrs	r10, 4
    153c:	0f c0       	rjmp	.+30     	; 0x155c <vfprintf+0x36c>
    153e:	b6 01       	movw	r22, r12
    1540:	80 e3       	ldi	r24, 0x30	; 48
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	ba d1       	rcall	.+884    	; 0x18ba <fputc>
    1546:	a2 fe       	sbrs	r10, 2
    1548:	16 c0       	rjmp	.+44     	; 0x1576 <vfprintf+0x386>
    154a:	a1 fc       	sbrc	r10, 1
    154c:	03 c0       	rjmp	.+6      	; 0x1554 <vfprintf+0x364>
    154e:	88 e7       	ldi	r24, 0x78	; 120
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <vfprintf+0x368>
    1554:	88 e5       	ldi	r24, 0x58	; 88
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	b6 01       	movw	r22, r12
    155a:	0c c0       	rjmp	.+24     	; 0x1574 <vfprintf+0x384>
    155c:	8a 2d       	mov	r24, r10
    155e:	86 78       	andi	r24, 0x86	; 134
    1560:	51 f0       	breq	.+20     	; 0x1576 <vfprintf+0x386>
    1562:	a1 fe       	sbrs	r10, 1
    1564:	02 c0       	rjmp	.+4      	; 0x156a <vfprintf+0x37a>
    1566:	8b e2       	ldi	r24, 0x2B	; 43
    1568:	01 c0       	rjmp	.+2      	; 0x156c <vfprintf+0x37c>
    156a:	80 e2       	ldi	r24, 0x20	; 32
    156c:	a7 fc       	sbrc	r10, 7
    156e:	8d e2       	ldi	r24, 0x2D	; 45
    1570:	b6 01       	movw	r22, r12
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	a2 d1       	rcall	.+836    	; 0x18ba <fputc>
    1576:	89 14       	cp	r8, r9
    1578:	30 f4       	brcc	.+12     	; 0x1586 <vfprintf+0x396>
    157a:	b6 01       	movw	r22, r12
    157c:	80 e3       	ldi	r24, 0x30	; 48
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	9c d1       	rcall	.+824    	; 0x18ba <fputc>
    1582:	9a 94       	dec	r9
    1584:	f8 cf       	rjmp	.-16     	; 0x1576 <vfprintf+0x386>
    1586:	8a 94       	dec	r8
    1588:	f3 01       	movw	r30, r6
    158a:	e8 0d       	add	r30, r8
    158c:	f1 1d       	adc	r31, r1
    158e:	80 81       	ld	r24, Z
    1590:	b6 01       	movw	r22, r12
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	92 d1       	rcall	.+804    	; 0x18ba <fputc>
    1596:	81 10       	cpse	r8, r1
    1598:	f6 cf       	rjmp	.-20     	; 0x1586 <vfprintf+0x396>
    159a:	22 20       	and	r2, r2
    159c:	09 f4       	brne	.+2      	; 0x15a0 <vfprintf+0x3b0>
    159e:	4e ce       	rjmp	.-868    	; 0x123c <vfprintf+0x4c>
    15a0:	b6 01       	movw	r22, r12
    15a2:	80 e2       	ldi	r24, 0x20	; 32
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	89 d1       	rcall	.+786    	; 0x18ba <fputc>
    15a8:	2a 94       	dec	r2
    15aa:	f7 cf       	rjmp	.-18     	; 0x159a <vfprintf+0x3aa>
    15ac:	f6 01       	movw	r30, r12
    15ae:	86 81       	ldd	r24, Z+6	; 0x06
    15b0:	97 81       	ldd	r25, Z+7	; 0x07
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <vfprintf+0x3c8>
    15b4:	8f ef       	ldi	r24, 0xFF	; 255
    15b6:	9f ef       	ldi	r25, 0xFF	; 255
    15b8:	2b 96       	adiw	r28, 0x0b	; 11
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	1f 91       	pop	r17
    15ca:	0f 91       	pop	r16
    15cc:	ff 90       	pop	r15
    15ce:	ef 90       	pop	r14
    15d0:	df 90       	pop	r13
    15d2:	cf 90       	pop	r12
    15d4:	bf 90       	pop	r11
    15d6:	af 90       	pop	r10
    15d8:	9f 90       	pop	r9
    15da:	8f 90       	pop	r8
    15dc:	7f 90       	pop	r7
    15de:	6f 90       	pop	r6
    15e0:	5f 90       	pop	r5
    15e2:	4f 90       	pop	r4
    15e4:	3f 90       	pop	r3
    15e6:	2f 90       	pop	r2
    15e8:	08 95       	ret

000015ea <calloc>:
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	86 9f       	mul	r24, r22
    15f4:	80 01       	movw	r16, r0
    15f6:	87 9f       	mul	r24, r23
    15f8:	10 0d       	add	r17, r0
    15fa:	96 9f       	mul	r25, r22
    15fc:	10 0d       	add	r17, r0
    15fe:	11 24       	eor	r1, r1
    1600:	c8 01       	movw	r24, r16
    1602:	0d d0       	rcall	.+26     	; 0x161e <malloc>
    1604:	ec 01       	movw	r28, r24
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	21 f0       	breq	.+8      	; 0x1612 <calloc+0x28>
    160a:	a8 01       	movw	r20, r16
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	32 d1       	rcall	.+612    	; 0x1876 <memset>
    1612:	ce 01       	movw	r24, r28
    1614:	df 91       	pop	r29
    1616:	cf 91       	pop	r28
    1618:	1f 91       	pop	r17
    161a:	0f 91       	pop	r16
    161c:	08 95       	ret

0000161e <malloc>:
    161e:	0f 93       	push	r16
    1620:	1f 93       	push	r17
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	82 30       	cpi	r24, 0x02	; 2
    1628:	91 05       	cpc	r25, r1
    162a:	10 f4       	brcc	.+4      	; 0x1630 <malloc+0x12>
    162c:	82 e0       	ldi	r24, 0x02	; 2
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	e0 91 67 04 	lds	r30, 0x0467	; 0x800467 <__flp>
    1634:	f0 91 68 04 	lds	r31, 0x0468	; 0x800468 <__flp+0x1>
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	a0 e0       	ldi	r26, 0x00	; 0
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	30 97       	sbiw	r30, 0x00	; 0
    1642:	19 f1       	breq	.+70     	; 0x168a <malloc+0x6c>
    1644:	40 81       	ld	r20, Z
    1646:	51 81       	ldd	r21, Z+1	; 0x01
    1648:	02 81       	ldd	r16, Z+2	; 0x02
    164a:	13 81       	ldd	r17, Z+3	; 0x03
    164c:	48 17       	cp	r20, r24
    164e:	59 07       	cpc	r21, r25
    1650:	c8 f0       	brcs	.+50     	; 0x1684 <malloc+0x66>
    1652:	84 17       	cp	r24, r20
    1654:	95 07       	cpc	r25, r21
    1656:	69 f4       	brne	.+26     	; 0x1672 <malloc+0x54>
    1658:	10 97       	sbiw	r26, 0x00	; 0
    165a:	31 f0       	breq	.+12     	; 0x1668 <malloc+0x4a>
    165c:	12 96       	adiw	r26, 0x02	; 2
    165e:	0c 93       	st	X, r16
    1660:	12 97       	sbiw	r26, 0x02	; 2
    1662:	13 96       	adiw	r26, 0x03	; 3
    1664:	1c 93       	st	X, r17
    1666:	27 c0       	rjmp	.+78     	; 0x16b6 <malloc+0x98>
    1668:	00 93 67 04 	sts	0x0467, r16	; 0x800467 <__flp>
    166c:	10 93 68 04 	sts	0x0468, r17	; 0x800468 <__flp+0x1>
    1670:	22 c0       	rjmp	.+68     	; 0x16b6 <malloc+0x98>
    1672:	21 15       	cp	r18, r1
    1674:	31 05       	cpc	r19, r1
    1676:	19 f0       	breq	.+6      	; 0x167e <malloc+0x60>
    1678:	42 17       	cp	r20, r18
    167a:	53 07       	cpc	r21, r19
    167c:	18 f4       	brcc	.+6      	; 0x1684 <malloc+0x66>
    167e:	9a 01       	movw	r18, r20
    1680:	bd 01       	movw	r22, r26
    1682:	ef 01       	movw	r28, r30
    1684:	df 01       	movw	r26, r30
    1686:	f8 01       	movw	r30, r16
    1688:	db cf       	rjmp	.-74     	; 0x1640 <malloc+0x22>
    168a:	21 15       	cp	r18, r1
    168c:	31 05       	cpc	r19, r1
    168e:	f9 f0       	breq	.+62     	; 0x16ce <malloc+0xb0>
    1690:	28 1b       	sub	r18, r24
    1692:	39 0b       	sbc	r19, r25
    1694:	24 30       	cpi	r18, 0x04	; 4
    1696:	31 05       	cpc	r19, r1
    1698:	80 f4       	brcc	.+32     	; 0x16ba <malloc+0x9c>
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	9b 81       	ldd	r25, Y+3	; 0x03
    169e:	61 15       	cp	r22, r1
    16a0:	71 05       	cpc	r23, r1
    16a2:	21 f0       	breq	.+8      	; 0x16ac <malloc+0x8e>
    16a4:	fb 01       	movw	r30, r22
    16a6:	93 83       	std	Z+3, r25	; 0x03
    16a8:	82 83       	std	Z+2, r24	; 0x02
    16aa:	04 c0       	rjmp	.+8      	; 0x16b4 <malloc+0x96>
    16ac:	90 93 68 04 	sts	0x0468, r25	; 0x800468 <__flp+0x1>
    16b0:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <__flp>
    16b4:	fe 01       	movw	r30, r28
    16b6:	32 96       	adiw	r30, 0x02	; 2
    16b8:	44 c0       	rjmp	.+136    	; 0x1742 <malloc+0x124>
    16ba:	fe 01       	movw	r30, r28
    16bc:	e2 0f       	add	r30, r18
    16be:	f3 1f       	adc	r31, r19
    16c0:	81 93       	st	Z+, r24
    16c2:	91 93       	st	Z+, r25
    16c4:	22 50       	subi	r18, 0x02	; 2
    16c6:	31 09       	sbc	r19, r1
    16c8:	39 83       	std	Y+1, r19	; 0x01
    16ca:	28 83       	st	Y, r18
    16cc:	3a c0       	rjmp	.+116    	; 0x1742 <malloc+0x124>
    16ce:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <__brkval>
    16d2:	30 91 66 04 	lds	r19, 0x0466	; 0x800466 <__brkval+0x1>
    16d6:	23 2b       	or	r18, r19
    16d8:	41 f4       	brne	.+16     	; 0x16ea <malloc+0xcc>
    16da:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    16de:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    16e2:	30 93 66 04 	sts	0x0466, r19	; 0x800466 <__brkval+0x1>
    16e6:	20 93 65 04 	sts	0x0465, r18	; 0x800465 <__brkval>
    16ea:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    16ee:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    16f2:	21 15       	cp	r18, r1
    16f4:	31 05       	cpc	r19, r1
    16f6:	41 f4       	brne	.+16     	; 0x1708 <malloc+0xea>
    16f8:	2d b7       	in	r18, 0x3d	; 61
    16fa:	3e b7       	in	r19, 0x3e	; 62
    16fc:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1700:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1704:	24 1b       	sub	r18, r20
    1706:	35 0b       	sbc	r19, r21
    1708:	e0 91 65 04 	lds	r30, 0x0465	; 0x800465 <__brkval>
    170c:	f0 91 66 04 	lds	r31, 0x0466	; 0x800466 <__brkval+0x1>
    1710:	e2 17       	cp	r30, r18
    1712:	f3 07       	cpc	r31, r19
    1714:	a0 f4       	brcc	.+40     	; 0x173e <malloc+0x120>
    1716:	2e 1b       	sub	r18, r30
    1718:	3f 0b       	sbc	r19, r31
    171a:	28 17       	cp	r18, r24
    171c:	39 07       	cpc	r19, r25
    171e:	78 f0       	brcs	.+30     	; 0x173e <malloc+0x120>
    1720:	ac 01       	movw	r20, r24
    1722:	4e 5f       	subi	r20, 0xFE	; 254
    1724:	5f 4f       	sbci	r21, 0xFF	; 255
    1726:	24 17       	cp	r18, r20
    1728:	35 07       	cpc	r19, r21
    172a:	48 f0       	brcs	.+18     	; 0x173e <malloc+0x120>
    172c:	4e 0f       	add	r20, r30
    172e:	5f 1f       	adc	r21, r31
    1730:	50 93 66 04 	sts	0x0466, r21	; 0x800466 <__brkval+0x1>
    1734:	40 93 65 04 	sts	0x0465, r20	; 0x800465 <__brkval>
    1738:	81 93       	st	Z+, r24
    173a:	91 93       	st	Z+, r25
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <malloc+0x124>
    173e:	e0 e0       	ldi	r30, 0x00	; 0
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	cf 01       	movw	r24, r30
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	1f 91       	pop	r17
    174a:	0f 91       	pop	r16
    174c:	08 95       	ret

0000174e <free>:
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	09 f4       	brne	.+2      	; 0x1758 <free+0xa>
    1756:	81 c0       	rjmp	.+258    	; 0x185a <free+0x10c>
    1758:	fc 01       	movw	r30, r24
    175a:	32 97       	sbiw	r30, 0x02	; 2
    175c:	13 82       	std	Z+3, r1	; 0x03
    175e:	12 82       	std	Z+2, r1	; 0x02
    1760:	a0 91 67 04 	lds	r26, 0x0467	; 0x800467 <__flp>
    1764:	b0 91 68 04 	lds	r27, 0x0468	; 0x800468 <__flp+0x1>
    1768:	10 97       	sbiw	r26, 0x00	; 0
    176a:	81 f4       	brne	.+32     	; 0x178c <free+0x3e>
    176c:	20 81       	ld	r18, Z
    176e:	31 81       	ldd	r19, Z+1	; 0x01
    1770:	82 0f       	add	r24, r18
    1772:	93 1f       	adc	r25, r19
    1774:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <__brkval>
    1778:	30 91 66 04 	lds	r19, 0x0466	; 0x800466 <__brkval+0x1>
    177c:	28 17       	cp	r18, r24
    177e:	39 07       	cpc	r19, r25
    1780:	51 f5       	brne	.+84     	; 0x17d6 <free+0x88>
    1782:	f0 93 66 04 	sts	0x0466, r31	; 0x800466 <__brkval+0x1>
    1786:	e0 93 65 04 	sts	0x0465, r30	; 0x800465 <__brkval>
    178a:	67 c0       	rjmp	.+206    	; 0x185a <free+0x10c>
    178c:	ed 01       	movw	r28, r26
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	ce 17       	cp	r28, r30
    1794:	df 07       	cpc	r29, r31
    1796:	40 f4       	brcc	.+16     	; 0x17a8 <free+0x5a>
    1798:	4a 81       	ldd	r20, Y+2	; 0x02
    179a:	5b 81       	ldd	r21, Y+3	; 0x03
    179c:	9e 01       	movw	r18, r28
    179e:	41 15       	cp	r20, r1
    17a0:	51 05       	cpc	r21, r1
    17a2:	f1 f0       	breq	.+60     	; 0x17e0 <free+0x92>
    17a4:	ea 01       	movw	r28, r20
    17a6:	f5 cf       	rjmp	.-22     	; 0x1792 <free+0x44>
    17a8:	d3 83       	std	Z+3, r29	; 0x03
    17aa:	c2 83       	std	Z+2, r28	; 0x02
    17ac:	40 81       	ld	r20, Z
    17ae:	51 81       	ldd	r21, Z+1	; 0x01
    17b0:	84 0f       	add	r24, r20
    17b2:	95 1f       	adc	r25, r21
    17b4:	c8 17       	cp	r28, r24
    17b6:	d9 07       	cpc	r29, r25
    17b8:	59 f4       	brne	.+22     	; 0x17d0 <free+0x82>
    17ba:	88 81       	ld	r24, Y
    17bc:	99 81       	ldd	r25, Y+1	; 0x01
    17be:	84 0f       	add	r24, r20
    17c0:	95 1f       	adc	r25, r21
    17c2:	02 96       	adiw	r24, 0x02	; 2
    17c4:	91 83       	std	Z+1, r25	; 0x01
    17c6:	80 83       	st	Z, r24
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	9b 81       	ldd	r25, Y+3	; 0x03
    17cc:	93 83       	std	Z+3, r25	; 0x03
    17ce:	82 83       	std	Z+2, r24	; 0x02
    17d0:	21 15       	cp	r18, r1
    17d2:	31 05       	cpc	r19, r1
    17d4:	29 f4       	brne	.+10     	; 0x17e0 <free+0x92>
    17d6:	f0 93 68 04 	sts	0x0468, r31	; 0x800468 <__flp+0x1>
    17da:	e0 93 67 04 	sts	0x0467, r30	; 0x800467 <__flp>
    17de:	3d c0       	rjmp	.+122    	; 0x185a <free+0x10c>
    17e0:	e9 01       	movw	r28, r18
    17e2:	fb 83       	std	Y+3, r31	; 0x03
    17e4:	ea 83       	std	Y+2, r30	; 0x02
    17e6:	49 91       	ld	r20, Y+
    17e8:	59 91       	ld	r21, Y+
    17ea:	c4 0f       	add	r28, r20
    17ec:	d5 1f       	adc	r29, r21
    17ee:	ec 17       	cp	r30, r28
    17f0:	fd 07       	cpc	r31, r29
    17f2:	61 f4       	brne	.+24     	; 0x180c <free+0xbe>
    17f4:	80 81       	ld	r24, Z
    17f6:	91 81       	ldd	r25, Z+1	; 0x01
    17f8:	84 0f       	add	r24, r20
    17fa:	95 1f       	adc	r25, r21
    17fc:	02 96       	adiw	r24, 0x02	; 2
    17fe:	e9 01       	movw	r28, r18
    1800:	99 83       	std	Y+1, r25	; 0x01
    1802:	88 83       	st	Y, r24
    1804:	82 81       	ldd	r24, Z+2	; 0x02
    1806:	93 81       	ldd	r25, Z+3	; 0x03
    1808:	9b 83       	std	Y+3, r25	; 0x03
    180a:	8a 83       	std	Y+2, r24	; 0x02
    180c:	e0 e0       	ldi	r30, 0x00	; 0
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	12 96       	adiw	r26, 0x02	; 2
    1812:	8d 91       	ld	r24, X+
    1814:	9c 91       	ld	r25, X
    1816:	13 97       	sbiw	r26, 0x03	; 3
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	19 f0       	breq	.+6      	; 0x1822 <free+0xd4>
    181c:	fd 01       	movw	r30, r26
    181e:	dc 01       	movw	r26, r24
    1820:	f7 cf       	rjmp	.-18     	; 0x1810 <free+0xc2>
    1822:	8d 91       	ld	r24, X+
    1824:	9c 91       	ld	r25, X
    1826:	11 97       	sbiw	r26, 0x01	; 1
    1828:	9d 01       	movw	r18, r26
    182a:	2e 5f       	subi	r18, 0xFE	; 254
    182c:	3f 4f       	sbci	r19, 0xFF	; 255
    182e:	82 0f       	add	r24, r18
    1830:	93 1f       	adc	r25, r19
    1832:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <__brkval>
    1836:	30 91 66 04 	lds	r19, 0x0466	; 0x800466 <__brkval+0x1>
    183a:	28 17       	cp	r18, r24
    183c:	39 07       	cpc	r19, r25
    183e:	69 f4       	brne	.+26     	; 0x185a <free+0x10c>
    1840:	30 97       	sbiw	r30, 0x00	; 0
    1842:	29 f4       	brne	.+10     	; 0x184e <free+0x100>
    1844:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <__flp+0x1>
    1848:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <__flp>
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <free+0x104>
    184e:	13 82       	std	Z+3, r1	; 0x03
    1850:	12 82       	std	Z+2, r1	; 0x02
    1852:	b0 93 66 04 	sts	0x0466, r27	; 0x800466 <__brkval+0x1>
    1856:	a0 93 65 04 	sts	0x0465, r26	; 0x800465 <__brkval>
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	08 95       	ret

00001860 <strnlen_P>:
    1860:	fc 01       	movw	r30, r24
    1862:	05 90       	lpm	r0, Z+
    1864:	61 50       	subi	r22, 0x01	; 1
    1866:	70 40       	sbci	r23, 0x00	; 0
    1868:	01 10       	cpse	r0, r1
    186a:	d8 f7       	brcc	.-10     	; 0x1862 <strnlen_P+0x2>
    186c:	80 95       	com	r24
    186e:	90 95       	com	r25
    1870:	8e 0f       	add	r24, r30
    1872:	9f 1f       	adc	r25, r31
    1874:	08 95       	ret

00001876 <memset>:
    1876:	dc 01       	movw	r26, r24
    1878:	01 c0       	rjmp	.+2      	; 0x187c <memset+0x6>
    187a:	6d 93       	st	X+, r22
    187c:	41 50       	subi	r20, 0x01	; 1
    187e:	50 40       	sbci	r21, 0x00	; 0
    1880:	e0 f7       	brcc	.-8      	; 0x187a <memset+0x4>
    1882:	08 95       	ret

00001884 <strnlen>:
    1884:	fc 01       	movw	r30, r24
    1886:	61 50       	subi	r22, 0x01	; 1
    1888:	70 40       	sbci	r23, 0x00	; 0
    188a:	01 90       	ld	r0, Z+
    188c:	01 10       	cpse	r0, r1
    188e:	d8 f7       	brcc	.-10     	; 0x1886 <strnlen+0x2>
    1890:	80 95       	com	r24
    1892:	90 95       	com	r25
    1894:	8e 0f       	add	r24, r30
    1896:	9f 1f       	adc	r25, r31
    1898:	08 95       	ret

0000189a <strrev>:
    189a:	dc 01       	movw	r26, r24
    189c:	fc 01       	movw	r30, r24
    189e:	67 2f       	mov	r22, r23
    18a0:	71 91       	ld	r23, Z+
    18a2:	77 23       	and	r23, r23
    18a4:	e1 f7       	brne	.-8      	; 0x189e <strrev+0x4>
    18a6:	32 97       	sbiw	r30, 0x02	; 2
    18a8:	04 c0       	rjmp	.+8      	; 0x18b2 <strrev+0x18>
    18aa:	7c 91       	ld	r23, X
    18ac:	6d 93       	st	X+, r22
    18ae:	70 83       	st	Z, r23
    18b0:	62 91       	ld	r22, -Z
    18b2:	ae 17       	cp	r26, r30
    18b4:	bf 07       	cpc	r27, r31
    18b6:	c8 f3       	brcs	.-14     	; 0x18aa <strrev+0x10>
    18b8:	08 95       	ret

000018ba <fputc>:
    18ba:	0f 93       	push	r16
    18bc:	1f 93       	push	r17
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	fb 01       	movw	r30, r22
    18c4:	23 81       	ldd	r18, Z+3	; 0x03
    18c6:	21 fd       	sbrc	r18, 1
    18c8:	03 c0       	rjmp	.+6      	; 0x18d0 <fputc+0x16>
    18ca:	8f ef       	ldi	r24, 0xFF	; 255
    18cc:	9f ef       	ldi	r25, 0xFF	; 255
    18ce:	2c c0       	rjmp	.+88     	; 0x1928 <fputc+0x6e>
    18d0:	22 ff       	sbrs	r18, 2
    18d2:	16 c0       	rjmp	.+44     	; 0x1900 <fputc+0x46>
    18d4:	46 81       	ldd	r20, Z+6	; 0x06
    18d6:	57 81       	ldd	r21, Z+7	; 0x07
    18d8:	24 81       	ldd	r18, Z+4	; 0x04
    18da:	35 81       	ldd	r19, Z+5	; 0x05
    18dc:	42 17       	cp	r20, r18
    18de:	53 07       	cpc	r21, r19
    18e0:	44 f4       	brge	.+16     	; 0x18f2 <fputc+0x38>
    18e2:	a0 81       	ld	r26, Z
    18e4:	b1 81       	ldd	r27, Z+1	; 0x01
    18e6:	9d 01       	movw	r18, r26
    18e8:	2f 5f       	subi	r18, 0xFF	; 255
    18ea:	3f 4f       	sbci	r19, 0xFF	; 255
    18ec:	31 83       	std	Z+1, r19	; 0x01
    18ee:	20 83       	st	Z, r18
    18f0:	8c 93       	st	X, r24
    18f2:	26 81       	ldd	r18, Z+6	; 0x06
    18f4:	37 81       	ldd	r19, Z+7	; 0x07
    18f6:	2f 5f       	subi	r18, 0xFF	; 255
    18f8:	3f 4f       	sbci	r19, 0xFF	; 255
    18fa:	37 83       	std	Z+7, r19	; 0x07
    18fc:	26 83       	std	Z+6, r18	; 0x06
    18fe:	14 c0       	rjmp	.+40     	; 0x1928 <fputc+0x6e>
    1900:	8b 01       	movw	r16, r22
    1902:	ec 01       	movw	r28, r24
    1904:	fb 01       	movw	r30, r22
    1906:	00 84       	ldd	r0, Z+8	; 0x08
    1908:	f1 85       	ldd	r31, Z+9	; 0x09
    190a:	e0 2d       	mov	r30, r0
    190c:	19 95       	eicall
    190e:	89 2b       	or	r24, r25
    1910:	e1 f6       	brne	.-72     	; 0x18ca <fputc+0x10>
    1912:	d8 01       	movw	r26, r16
    1914:	16 96       	adiw	r26, 0x06	; 6
    1916:	8d 91       	ld	r24, X+
    1918:	9c 91       	ld	r25, X
    191a:	17 97       	sbiw	r26, 0x07	; 7
    191c:	01 96       	adiw	r24, 0x01	; 1
    191e:	17 96       	adiw	r26, 0x07	; 7
    1920:	9c 93       	st	X, r25
    1922:	8e 93       	st	-X, r24
    1924:	16 97       	sbiw	r26, 0x06	; 6
    1926:	ce 01       	movw	r24, r28
    1928:	df 91       	pop	r29
    192a:	cf 91       	pop	r28
    192c:	1f 91       	pop	r17
    192e:	0f 91       	pop	r16
    1930:	08 95       	ret

00001932 <__ultoa_invert>:
    1932:	fa 01       	movw	r30, r20
    1934:	aa 27       	eor	r26, r26
    1936:	28 30       	cpi	r18, 0x08	; 8
    1938:	51 f1       	breq	.+84     	; 0x198e <__ultoa_invert+0x5c>
    193a:	20 31       	cpi	r18, 0x10	; 16
    193c:	81 f1       	breq	.+96     	; 0x199e <__ultoa_invert+0x6c>
    193e:	e8 94       	clt
    1940:	6f 93       	push	r22
    1942:	6e 7f       	andi	r22, 0xFE	; 254
    1944:	6e 5f       	subi	r22, 0xFE	; 254
    1946:	7f 4f       	sbci	r23, 0xFF	; 255
    1948:	8f 4f       	sbci	r24, 0xFF	; 255
    194a:	9f 4f       	sbci	r25, 0xFF	; 255
    194c:	af 4f       	sbci	r26, 0xFF	; 255
    194e:	b1 e0       	ldi	r27, 0x01	; 1
    1950:	3e d0       	rcall	.+124    	; 0x19ce <__ultoa_invert+0x9c>
    1952:	b4 e0       	ldi	r27, 0x04	; 4
    1954:	3c d0       	rcall	.+120    	; 0x19ce <__ultoa_invert+0x9c>
    1956:	67 0f       	add	r22, r23
    1958:	78 1f       	adc	r23, r24
    195a:	89 1f       	adc	r24, r25
    195c:	9a 1f       	adc	r25, r26
    195e:	a1 1d       	adc	r26, r1
    1960:	68 0f       	add	r22, r24
    1962:	79 1f       	adc	r23, r25
    1964:	8a 1f       	adc	r24, r26
    1966:	91 1d       	adc	r25, r1
    1968:	a1 1d       	adc	r26, r1
    196a:	6a 0f       	add	r22, r26
    196c:	71 1d       	adc	r23, r1
    196e:	81 1d       	adc	r24, r1
    1970:	91 1d       	adc	r25, r1
    1972:	a1 1d       	adc	r26, r1
    1974:	20 d0       	rcall	.+64     	; 0x19b6 <__ultoa_invert+0x84>
    1976:	09 f4       	brne	.+2      	; 0x197a <__ultoa_invert+0x48>
    1978:	68 94       	set
    197a:	3f 91       	pop	r19
    197c:	2a e0       	ldi	r18, 0x0A	; 10
    197e:	26 9f       	mul	r18, r22
    1980:	11 24       	eor	r1, r1
    1982:	30 19       	sub	r19, r0
    1984:	30 5d       	subi	r19, 0xD0	; 208
    1986:	31 93       	st	Z+, r19
    1988:	de f6       	brtc	.-74     	; 0x1940 <__ultoa_invert+0xe>
    198a:	cf 01       	movw	r24, r30
    198c:	08 95       	ret
    198e:	46 2f       	mov	r20, r22
    1990:	47 70       	andi	r20, 0x07	; 7
    1992:	40 5d       	subi	r20, 0xD0	; 208
    1994:	41 93       	st	Z+, r20
    1996:	b3 e0       	ldi	r27, 0x03	; 3
    1998:	0f d0       	rcall	.+30     	; 0x19b8 <__ultoa_invert+0x86>
    199a:	c9 f7       	brne	.-14     	; 0x198e <__ultoa_invert+0x5c>
    199c:	f6 cf       	rjmp	.-20     	; 0x198a <__ultoa_invert+0x58>
    199e:	46 2f       	mov	r20, r22
    19a0:	4f 70       	andi	r20, 0x0F	; 15
    19a2:	40 5d       	subi	r20, 0xD0	; 208
    19a4:	4a 33       	cpi	r20, 0x3A	; 58
    19a6:	18 f0       	brcs	.+6      	; 0x19ae <__ultoa_invert+0x7c>
    19a8:	49 5d       	subi	r20, 0xD9	; 217
    19aa:	31 fd       	sbrc	r19, 1
    19ac:	40 52       	subi	r20, 0x20	; 32
    19ae:	41 93       	st	Z+, r20
    19b0:	02 d0       	rcall	.+4      	; 0x19b6 <__ultoa_invert+0x84>
    19b2:	a9 f7       	brne	.-22     	; 0x199e <__ultoa_invert+0x6c>
    19b4:	ea cf       	rjmp	.-44     	; 0x198a <__ultoa_invert+0x58>
    19b6:	b4 e0       	ldi	r27, 0x04	; 4
    19b8:	a6 95       	lsr	r26
    19ba:	97 95       	ror	r25
    19bc:	87 95       	ror	r24
    19be:	77 95       	ror	r23
    19c0:	67 95       	ror	r22
    19c2:	ba 95       	dec	r27
    19c4:	c9 f7       	brne	.-14     	; 0x19b8 <__ultoa_invert+0x86>
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	61 05       	cpc	r22, r1
    19ca:	71 05       	cpc	r23, r1
    19cc:	08 95       	ret
    19ce:	9b 01       	movw	r18, r22
    19d0:	ac 01       	movw	r20, r24
    19d2:	0a 2e       	mov	r0, r26
    19d4:	06 94       	lsr	r0
    19d6:	57 95       	ror	r21
    19d8:	47 95       	ror	r20
    19da:	37 95       	ror	r19
    19dc:	27 95       	ror	r18
    19de:	ba 95       	dec	r27
    19e0:	c9 f7       	brne	.-14     	; 0x19d4 <__ultoa_invert+0xa2>
    19e2:	62 0f       	add	r22, r18
    19e4:	73 1f       	adc	r23, r19
    19e6:	84 1f       	adc	r24, r20
    19e8:	95 1f       	adc	r25, r21
    19ea:	a0 1d       	adc	r26, r0
    19ec:	08 95       	ret

000019ee <_exit>:
    19ee:	f8 94       	cli

000019f0 <__stop_program>:
    19f0:	ff cf       	rjmp	.-2      	; 0x19f0 <__stop_program>
