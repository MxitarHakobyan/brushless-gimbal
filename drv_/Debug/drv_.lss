
drv_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017c  00800200  000021c8  0000225c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000053  0080037c  0080037c  000023d8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000023d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00002474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d64  00000000  00000000  000026b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001711  00000000  00000000  00005418  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001535  00000000  00000000  00006b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d0  00000000  00000000  00008060  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ba1  00000000  00000000  00008730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e36  00000000  00000000  000092d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000b107  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b5 c0       	rjmp	.+362    	; 0x16c <__ctors_end>
       2:	00 00       	nop
       4:	d3 c0       	rjmp	.+422    	; 0x1ac <__bad_interrupt>
       6:	00 00       	nop
       8:	d1 c0       	rjmp	.+418    	; 0x1ac <__bad_interrupt>
       a:	00 00       	nop
       c:	cf c0       	rjmp	.+414    	; 0x1ac <__bad_interrupt>
       e:	00 00       	nop
      10:	cd c0       	rjmp	.+410    	; 0x1ac <__bad_interrupt>
      12:	00 00       	nop
      14:	cb c0       	rjmp	.+406    	; 0x1ac <__bad_interrupt>
      16:	00 00       	nop
      18:	c9 c0       	rjmp	.+402    	; 0x1ac <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c7 c0       	rjmp	.+398    	; 0x1ac <__bad_interrupt>
      1e:	00 00       	nop
      20:	c5 c0       	rjmp	.+394    	; 0x1ac <__bad_interrupt>
      22:	00 00       	nop
      24:	c3 c0       	rjmp	.+390    	; 0x1ac <__bad_interrupt>
      26:	00 00       	nop
      28:	c1 c0       	rjmp	.+386    	; 0x1ac <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bf c0       	rjmp	.+382    	; 0x1ac <__bad_interrupt>
      2e:	00 00       	nop
      30:	bd c0       	rjmp	.+378    	; 0x1ac <__bad_interrupt>
      32:	00 00       	nop
      34:	bb c0       	rjmp	.+374    	; 0x1ac <__bad_interrupt>
      36:	00 00       	nop
      38:	b9 c0       	rjmp	.+370    	; 0x1ac <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b7 c0       	rjmp	.+366    	; 0x1ac <__bad_interrupt>
      3e:	00 00       	nop
      40:	b5 c0       	rjmp	.+362    	; 0x1ac <__bad_interrupt>
      42:	00 00       	nop
      44:	b3 c0       	rjmp	.+358    	; 0x1ac <__bad_interrupt>
      46:	00 00       	nop
      48:	b1 c0       	rjmp	.+354    	; 0x1ac <__bad_interrupt>
      4a:	00 00       	nop
      4c:	af c0       	rjmp	.+350    	; 0x1ac <__bad_interrupt>
      4e:	00 00       	nop
      50:	ad c0       	rjmp	.+346    	; 0x1ac <__bad_interrupt>
      52:	00 00       	nop
      54:	ab c0       	rjmp	.+342    	; 0x1ac <__bad_interrupt>
      56:	00 00       	nop
      58:	a9 c0       	rjmp	.+338    	; 0x1ac <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a0 c6       	rjmp	.+3392   	; 0xd9e <__vector_23>
      5e:	00 00       	nop
      60:	a5 c0       	rjmp	.+330    	; 0x1ac <__bad_interrupt>
      62:	00 00       	nop
      64:	a3 c0       	rjmp	.+326    	; 0x1ac <__bad_interrupt>
      66:	00 00       	nop
      68:	a1 c0       	rjmp	.+322    	; 0x1ac <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9f c0       	rjmp	.+318    	; 0x1ac <__bad_interrupt>
      6e:	00 00       	nop
      70:	9d c0       	rjmp	.+314    	; 0x1ac <__bad_interrupt>
      72:	00 00       	nop
      74:	9b c0       	rjmp	.+310    	; 0x1ac <__bad_interrupt>
      76:	00 00       	nop
      78:	99 c0       	rjmp	.+306    	; 0x1ac <__bad_interrupt>
      7a:	00 00       	nop
      7c:	97 c0       	rjmp	.+302    	; 0x1ac <__bad_interrupt>
      7e:	00 00       	nop
      80:	95 c0       	rjmp	.+298    	; 0x1ac <__bad_interrupt>
      82:	00 00       	nop
      84:	93 c0       	rjmp	.+294    	; 0x1ac <__bad_interrupt>
      86:	00 00       	nop
      88:	91 c0       	rjmp	.+290    	; 0x1ac <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8f c0       	rjmp	.+286    	; 0x1ac <__bad_interrupt>
      8e:	00 00       	nop
      90:	8d c0       	rjmp	.+282    	; 0x1ac <__bad_interrupt>
      92:	00 00       	nop
      94:	8b c0       	rjmp	.+278    	; 0x1ac <__bad_interrupt>
      96:	00 00       	nop
      98:	89 c0       	rjmp	.+274    	; 0x1ac <__bad_interrupt>
      9a:	00 00       	nop
      9c:	87 c0       	rjmp	.+270    	; 0x1ac <__bad_interrupt>
      9e:	00 00       	nop
      a0:	85 c0       	rjmp	.+266    	; 0x1ac <__bad_interrupt>
      a2:	00 00       	nop
      a4:	83 c0       	rjmp	.+262    	; 0x1ac <__bad_interrupt>
      a6:	00 00       	nop
      a8:	81 c0       	rjmp	.+258    	; 0x1ac <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7f c0       	rjmp	.+254    	; 0x1ac <__bad_interrupt>
      ae:	00 00       	nop
      b0:	7d c0       	rjmp	.+250    	; 0x1ac <__bad_interrupt>
      b2:	00 00       	nop
      b4:	7b c0       	rjmp	.+246    	; 0x1ac <__bad_interrupt>
      b6:	00 00       	nop
      b8:	79 c0       	rjmp	.+242    	; 0x1ac <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ba c6       	rjmp	.+3444   	; 0xe32 <__vector_47>
      be:	00 00       	nop
      c0:	75 c0       	rjmp	.+234    	; 0x1ac <__bad_interrupt>
      c2:	00 00       	nop
      c4:	73 c0       	rjmp	.+230    	; 0x1ac <__bad_interrupt>
      c6:	00 00       	nop
      c8:	71 c0       	rjmp	.+226    	; 0x1ac <__bad_interrupt>
      ca:	00 00       	nop
      cc:	6f c0       	rjmp	.+222    	; 0x1ac <__bad_interrupt>
      ce:	00 00       	nop
      d0:	6d c0       	rjmp	.+218    	; 0x1ac <__bad_interrupt>
      d2:	00 00       	nop
      d4:	6b c0       	rjmp	.+214    	; 0x1ac <__bad_interrupt>
      d6:	00 00       	nop
      d8:	69 c0       	rjmp	.+210    	; 0x1ac <__bad_interrupt>
      da:	00 00       	nop
      dc:	67 c0       	rjmp	.+206    	; 0x1ac <__bad_interrupt>
      de:	00 00       	nop
      e0:	65 c0       	rjmp	.+202    	; 0x1ac <__bad_interrupt>
      e2:	00 00       	nop
      e4:	03 6e       	ori	r16, 0xE3	; 227
      e6:	db 36       	cpi	r29, 0x6B	; 107
      e8:	3d 9a       	sbi	0x07, 5	; 7
      ea:	99 99       	sbic	0x13, 1	; 19
      ec:	99 3d       	cpi	r25, 0xD9	; 217
      ee:	ab aa       	std	Y+51, r10	; 0x33
      f0:	aa 2a       	or	r10, r26
      f2:	3e 00       	.word	0x003e	; ????
      f4:	00 00       	nop
      f6:	80 3f       	cpi	r24, 0xF0	; 240
      f8:	08 4a       	sbci	r16, 0xA8	; 168
      fa:	d7 3b       	cpi	r29, 0xB7	; 183
      fc:	3b ce       	rjmp	.-906    	; 0xfffffd74 <__eeprom_end+0xff7efd74>
      fe:	01 6e       	ori	r16, 0xE1	; 225
     100:	84 bc       	out	0x24, r8	; 36
     102:	bf fd       	.word	0xfdbf	; ????
     104:	c1 2f       	mov	r28, r17
     106:	3d 6c       	ori	r19, 0xCD	; 205
     108:	74 31       	cpi	r23, 0x14	; 20
     10a:	9a bd       	out	0x2a, r25	; 42
     10c:	56 83       	std	Z+6, r21	; 0x06
     10e:	3d da       	rcall	.-2950   	; 0xfffff58a <__eeprom_end+0xff7ef58a>
     110:	3d 00       	.word	0x003d	; ????
     112:	c7 7f       	andi	r28, 0xF7	; 247
     114:	11 be       	out	0x31, r1	; 49
     116:	d9 e4       	ldi	r29, 0x49	; 73
     118:	bb 4c       	sbci	r27, 0xCB	; 203
     11a:	3e 91       	ld	r19, -X
     11c:	6b aa       	std	Y+51, r6	; 0x33
     11e:	aa be       	out	0x3a, r10	; 58
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	3f 07       	cpc	r19, r31
     126:	2c 7a       	andi	r18, 0xAC	; 172
     128:	a5 ba       	out	0x15, r10	; 21
     12a:	6c c5       	rjmp	.+2776   	; 0xc04 <mpu6050_readBytes+0x78>
     12c:	90 da       	rcall	.-2784   	; 0xfffff64e <__eeprom_end+0xff7ef64e>
     12e:	3b 93       	.word	0x933b	; ????
     130:	65 fc       	sbrc	r6, 5
     132:	8b bc       	out	0x2b, r8	; 43
     134:	53 f8       	bld	r5, 3
     136:	10 fd       	sbrc	r17, 0
     138:	3c 56       	subi	r19, 0x6C	; 108
     13a:	92 83       	std	Z+2, r25	; 0x02
     13c:	4d bd       	out	0x2d, r20	; 45
     13e:	87 9d       	mul	r24, r7
     140:	3a b6       	in	r3, 0x3a	; 58
     142:	3d cb       	rjmp	.-2438   	; 0xfffff7be <__eeprom_end+0xff7ef7be>
     144:	c9 bf       	out	0x39, r28	; 57
     146:	5b be       	out	0x3b, r5	; 59
     148:	73 da       	rcall	.-2842   	; 0xfffff630 <__eeprom_end+0xff7ef630>
     14a:	0f c9       	rjmp	.-3554   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
     14c:	3f 05       	cpc	r19, r15
     14e:	a8 4c       	sbci	r26, 0xC8	; 200
     150:	cd b2       	in	r12, 0x1d	; 29
     152:	d4 4e       	sbci	r29, 0xE4	; 228
     154:	b9 38       	cpi	r27, 0x89	; 137
     156:	36 a9       	ldd	r19, Z+54	; 0x36
     158:	02 0c       	add	r0, r2
     15a:	50 b9       	out	0x00, r21	; 0
     15c:	91 86       	std	Z+9, r9	; 0x09
     15e:	88 08       	sbc	r8, r8
     160:	3c a6       	std	Y+44, r3	; 0x2c
     162:	aa aa       	std	Y+50, r10	; 0x32
     164:	2a be       	out	0x3a, r2	; 58
     166:	00 00       	nop
     168:	00 80       	ld	r0, Z
     16a:	3f 00       	.word	0x003f	; ????

0000016c <__ctors_end>:
     16c:	11 24       	eor	r1, r1
     16e:	1f be       	out	0x3f, r1	; 63
     170:	cf ef       	ldi	r28, 0xFF	; 255
     172:	d1 e2       	ldi	r29, 0x21	; 33
     174:	de bf       	out	0x3e, r29	; 62
     176:	cd bf       	out	0x3d, r28	; 61
     178:	00 e0       	ldi	r16, 0x00	; 0
     17a:	0c bf       	out	0x3c, r16	; 60

0000017c <__do_copy_data>:
     17c:	13 e0       	ldi	r17, 0x03	; 3
     17e:	a0 e0       	ldi	r26, 0x00	; 0
     180:	b2 e0       	ldi	r27, 0x02	; 2
     182:	e8 ec       	ldi	r30, 0xC8	; 200
     184:	f1 e2       	ldi	r31, 0x21	; 33
     186:	00 e0       	ldi	r16, 0x00	; 0
     188:	0b bf       	out	0x3b, r16	; 59
     18a:	02 c0       	rjmp	.+4      	; 0x190 <__do_copy_data+0x14>
     18c:	07 90       	elpm	r0, Z+
     18e:	0d 92       	st	X+, r0
     190:	ac 37       	cpi	r26, 0x7C	; 124
     192:	b1 07       	cpc	r27, r17
     194:	d9 f7       	brne	.-10     	; 0x18c <__do_copy_data+0x10>

00000196 <__do_clear_bss>:
     196:	23 e0       	ldi	r18, 0x03	; 3
     198:	ac e7       	ldi	r26, 0x7C	; 124
     19a:	b3 e0       	ldi	r27, 0x03	; 3
     19c:	01 c0       	rjmp	.+2      	; 0x1a0 <.do_clear_bss_start>

0000019e <.do_clear_bss_loop>:
     19e:	1d 92       	st	X+, r1

000001a0 <.do_clear_bss_start>:
     1a0:	af 3c       	cpi	r26, 0xCF	; 207
     1a2:	b2 07       	cpc	r27, r18
     1a4:	e1 f7       	brne	.-8      	; 0x19e <.do_clear_bss_loop>
     1a6:	6c d2       	rcall	.+1240   	; 0x680 <main>
     1a8:	0c 94 e2 10 	jmp	0x21c4	; 0x21c4 <_exit>

000001ac <__bad_interrupt>:
     1ac:	29 cf       	rjmp	.-430    	; 0x0 <__vectors>

000001ae <init_gpio>:
{
	if (a>b && a>c) return a;
	if (b>a && b>c) return b;
	if (c>a && c>b) return c;
	return a;
}
     1ae:	e1 e0       	ldi	r30, 0x01	; 1
     1b0:	f1 e0       	ldi	r31, 0x01	; 1
     1b2:	80 81       	ld	r24, Z
     1b4:	88 60       	ori	r24, 0x08	; 8
     1b6:	80 83       	st	Z, r24
     1b8:	80 81       	ld	r24, Z
     1ba:	80 61       	ori	r24, 0x10	; 16
     1bc:	80 83       	st	Z, r24
     1be:	80 81       	ld	r24, Z
     1c0:	80 62       	ori	r24, 0x20	; 32
     1c2:	80 83       	st	Z, r24
     1c4:	08 95       	ret

000001c6 <PWM_update>:
void PWM_update()//motor pwm update
{
	U_PWM=pwmSin[U_step];
     1c6:	e0 91 7c 03 	lds	r30, 0x037C	; 0x80037c <__data_end>
     1ca:	f0 91 7d 03 	lds	r31, 0x037D	; 0x80037d <__data_end+0x1>
     1ce:	ea 5f       	subi	r30, 0xFA	; 250
     1d0:	fd 4f       	sbci	r31, 0xFD	; 253
     1d2:	80 81       	ld	r24, Z
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     1da:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
	V_PWM=pwmSin[V_step];
     1de:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <V_step>
     1e2:	f0 91 72 03 	lds	r31, 0x0372	; 0x800372 <V_step+0x1>
     1e6:	ea 5f       	subi	r30, 0xFA	; 250
     1e8:	fd 4f       	sbci	r31, 0xFD	; 253
     1ea:	80 81       	ld	r24, Z
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     1f2:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
	W_PWM=pwmSin[W_step];
     1f6:	e0 91 6f 03 	lds	r30, 0x036F	; 0x80036f <W_step>
     1fa:	f0 91 70 03 	lds	r31, 0x0370	; 0x800370 <W_step+0x1>
     1fe:	ea 5f       	subi	r30, 0xFA	; 250
     200:	fd 4f       	sbci	r31, 0xFD	; 253
     202:	80 81       	ld	r24, Z
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
     20a:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
	U_step=U_step+incr;
     20e:	60 91 8b 03 	lds	r22, 0x038B	; 0x80038b <incr>
     212:	70 91 8c 03 	lds	r23, 0x038C	; 0x80038c <incr+0x1>
     216:	40 91 7c 03 	lds	r20, 0x037C	; 0x80037c <__data_end>
     21a:	50 91 7d 03 	lds	r21, 0x037D	; 0x80037d <__data_end+0x1>
     21e:	46 0f       	add	r20, r22
     220:	57 1f       	adc	r21, r23
     222:	50 93 7d 03 	sts	0x037D, r21	; 0x80037d <__data_end+0x1>
     226:	40 93 7c 03 	sts	0x037C, r20	; 0x80037c <__data_end>
	V_step=V_step+incr;
     22a:	20 91 71 03 	lds	r18, 0x0371	; 0x800371 <V_step>
     22e:	30 91 72 03 	lds	r19, 0x0372	; 0x800372 <V_step+0x1>
     232:	26 0f       	add	r18, r22
     234:	37 1f       	adc	r19, r23
     236:	30 93 72 03 	sts	0x0372, r19	; 0x800372 <V_step+0x1>
     23a:	20 93 71 03 	sts	0x0371, r18	; 0x800371 <V_step>
	W_step=W_step+incr;
     23e:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <W_step>
     242:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <W_step+0x1>
     246:	86 0f       	add	r24, r22
     248:	97 1f       	adc	r25, r23
     24a:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <W_step+0x1>
     24e:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <W_step>
	if(U_step > SINE_TABLE_SZ)
     252:	49 36       	cpi	r20, 0x69	; 105
     254:	61 e0       	ldi	r22, 0x01	; 1
     256:	56 07       	cpc	r21, r22
     258:	2c f0       	brlt	.+10     	; 0x264 <PWM_update+0x9e>
	U_step = 0;
     25a:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <__data_end+0x1>
     25e:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <__data_end>
     262:	08 c0       	rjmp	.+16     	; 0x274 <PWM_update+0xae>
	if(U_step < 0)
     264:	55 23       	and	r21, r21
     266:	34 f4       	brge	.+12     	; 0x274 <PWM_update+0xae>
	U_step = SINE_TABLE_SZ;
     268:	48 e6       	ldi	r20, 0x68	; 104
     26a:	51 e0       	ldi	r21, 0x01	; 1
     26c:	50 93 7d 03 	sts	0x037D, r21	; 0x80037d <__data_end+0x1>
     270:	40 93 7c 03 	sts	0x037C, r20	; 0x80037c <__data_end>
	
	if(V_step > SINE_TABLE_SZ)
     274:	29 36       	cpi	r18, 0x69	; 105
     276:	41 e0       	ldi	r20, 0x01	; 1
     278:	34 07       	cpc	r19, r20
     27a:	2c f0       	brlt	.+10     	; 0x286 <PWM_update+0xc0>
	V_step = 0;
     27c:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <V_step+0x1>
     280:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <V_step>
     284:	08 c0       	rjmp	.+16     	; 0x296 <PWM_update+0xd0>
	if(V_step < 0)
     286:	33 23       	and	r19, r19
     288:	34 f4       	brge	.+12     	; 0x296 <PWM_update+0xd0>
	V_step = SINE_TABLE_SZ;
     28a:	28 e6       	ldi	r18, 0x68	; 104
     28c:	31 e0       	ldi	r19, 0x01	; 1
     28e:	30 93 72 03 	sts	0x0372, r19	; 0x800372 <V_step+0x1>
     292:	20 93 71 03 	sts	0x0371, r18	; 0x800371 <V_step>
	
	if(W_step > SINE_TABLE_SZ)
     296:	89 36       	cpi	r24, 0x69	; 105
     298:	61 e0       	ldi	r22, 0x01	; 1
     29a:	96 07       	cpc	r25, r22
     29c:	2c f0       	brlt	.+10     	; 0x2a8 <PWM_update+0xe2>
	W_step = 0;
     29e:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <W_step+0x1>
     2a2:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <W_step>
     2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <PWM_update+0xf2>
	if(W_step < 0)
     2a8:	99 23       	and	r25, r25
     2aa:	34 f4       	brge	.+12     	; 0x2b8 <PWM_update+0xf2>
	W_step = SINE_TABLE_SZ;
     2ac:	88 e6       	ldi	r24, 0x68	; 104
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <W_step+0x1>
     2b4:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <W_step>
	//_delay_us(100);
	OCR5A=pwm_delay;
     2b8:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <pwm_delay>
     2bc:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <pwm_delay+0x1>
     2c0:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     2c4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     2c8:	08 95       	ret

000002ca <getAngle>:
#include "KALMAN.h"

float getAngle(float newAngle, float newRate, float dt) {
     2ca:	4f 92       	push	r4
     2cc:	5f 92       	push	r5
     2ce:	6f 92       	push	r6
     2d0:	7f 92       	push	r7
     2d2:	8f 92       	push	r8
     2d4:	9f 92       	push	r9
     2d6:	af 92       	push	r10
     2d8:	bf 92       	push	r11
     2da:	cf 92       	push	r12
     2dc:	df 92       	push	r13
     2de:	ef 92       	push	r14
     2e0:	ff 92       	push	r15
     2e2:	0f 93       	push	r16
     2e4:	1f 93       	push	r17
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
     2ee:	6c 97       	sbiw	r28, 0x1c	; 28
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	69 8b       	std	Y+17, r22	; 0x11
     2fc:	7a 8b       	std	Y+18, r23	; 0x12
     2fe:	8b 8b       	std	Y+19, r24	; 0x13
     300:	9c 8b       	std	Y+20, r25	; 0x14
     302:	ca 01       	movw	r24, r20
     304:	b9 01       	movw	r22, r18
     306:	e9 82       	std	Y+1, r14	; 0x01
     308:	fa 82       	std	Y+2, r15	; 0x02
     30a:	0b 83       	std	Y+3, r16	; 0x03
     30c:	1c 83       	std	Y+4, r17	; 0x04
	// See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

	// Discrete Kalman filter time update equations - Time Update ("Predict")
	// Update xhat - Project the state ahead
	/* Step 1 */
	rate = newRate - bias;
     30e:	c0 90 99 03 	lds	r12, 0x0399	; 0x800399 <bias>
     312:	d0 90 9a 03 	lds	r13, 0x039A	; 0x80039a <bias+0x1>
     316:	e0 90 9b 03 	lds	r14, 0x039B	; 0x80039b <bias+0x2>
     31a:	f0 90 9c 03 	lds	r15, 0x039C	; 0x80039c <bias+0x3>
     31e:	a7 01       	movw	r20, r14
     320:	96 01       	movw	r18, r12
     322:	f2 d6       	rcall	.+3556   	; 0x1108 <__subsf3>
     324:	60 93 91 03 	sts	0x0391, r22	; 0x800391 <rate>
     328:	70 93 92 03 	sts	0x0392, r23	; 0x800392 <rate+0x1>
     32c:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <rate+0x2>
     330:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <rate+0x3>
	angle += dt * rate;
     334:	29 81       	ldd	r18, Y+1	; 0x01
     336:	3a 81       	ldd	r19, Y+2	; 0x02
     338:	4b 81       	ldd	r20, Y+3	; 0x03
     33a:	5c 81       	ldd	r21, Y+4	; 0x04
     33c:	0e 94 0d 0b 	call	0x161a	; 0x161a <__mulsf3>
     340:	20 91 a1 03 	lds	r18, 0x03A1	; 0x8003a1 <angle>
     344:	30 91 a2 03 	lds	r19, 0x03A2	; 0x8003a2 <angle+0x1>
     348:	40 91 a3 03 	lds	r20, 0x03A3	; 0x8003a3 <angle+0x2>
     34c:	50 91 a4 03 	lds	r21, 0x03A4	; 0x8003a4 <angle+0x3>
     350:	dc d6       	rcall	.+3512   	; 0x110a <__addsf3>
     352:	6d 8b       	std	Y+21, r22	; 0x15
     354:	7e 8b       	std	Y+22, r23	; 0x16
     356:	8f 8b       	std	Y+23, r24	; 0x17
     358:	98 8f       	std	Y+24, r25	; 0x18

	// Update estimation error covariance - Project the error covariance ahead
	/* Step 2 */
	P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
     35a:	80 90 b1 03 	lds	r8, 0x03B1	; 0x8003b1 <P+0xc>
     35e:	90 90 b2 03 	lds	r9, 0x03B2	; 0x8003b2 <P+0xd>
     362:	a0 90 b3 03 	lds	r10, 0x03B3	; 0x8003b3 <P+0xe>
     366:	b0 90 b4 03 	lds	r11, 0x03B4	; 0x8003b4 <P+0xf>
     36a:	a5 01       	movw	r20, r10
     36c:	94 01       	movw	r18, r8
     36e:	69 81       	ldd	r22, Y+1	; 0x01
     370:	7a 81       	ldd	r23, Y+2	; 0x02
     372:	8b 81       	ldd	r24, Y+3	; 0x03
     374:	9c 81       	ldd	r25, Y+4	; 0x04
     376:	0e 94 0d 0b 	call	0x161a	; 0x161a <__mulsf3>
     37a:	6d 83       	std	Y+5, r22	; 0x05
     37c:	7e 83       	std	Y+6, r23	; 0x06
     37e:	8f 83       	std	Y+7, r24	; 0x07
     380:	98 87       	std	Y+8, r25	; 0x08
     382:	40 90 a9 03 	lds	r4, 0x03A9	; 0x8003a9 <P+0x4>
     386:	50 90 aa 03 	lds	r5, 0x03AA	; 0x8003aa <P+0x5>
     38a:	60 90 ab 03 	lds	r6, 0x03AB	; 0x8003ab <P+0x6>
     38e:	70 90 ac 03 	lds	r7, 0x03AC	; 0x8003ac <P+0x7>
     392:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <P+0x8>
     396:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <P+0x9>
     39a:	a0 91 af 03 	lds	r26, 0x03AF	; 0x8003af <P+0xa>
     39e:	b0 91 b0 03 	lds	r27, 0x03B0	; 0x8003b0 <P+0xb>
     3a2:	8d 87       	std	Y+13, r24	; 0x0d
     3a4:	9e 87       	std	Y+14, r25	; 0x0e
     3a6:	af 87       	std	Y+15, r26	; 0x0f
     3a8:	b8 8b       	std	Y+16, r27	; 0x10
     3aa:	a3 01       	movw	r20, r6
     3ac:	92 01       	movw	r18, r4
     3ae:	6d 81       	ldd	r22, Y+5	; 0x05
     3b0:	7e 81       	ldd	r23, Y+6	; 0x06
     3b2:	8f 81       	ldd	r24, Y+7	; 0x07
     3b4:	98 85       	ldd	r25, Y+8	; 0x08
     3b6:	a8 d6       	rcall	.+3408   	; 0x1108 <__subsf3>
     3b8:	2d 85       	ldd	r18, Y+13	; 0x0d
     3ba:	3e 85       	ldd	r19, Y+14	; 0x0e
     3bc:	4f 85       	ldd	r20, Y+15	; 0x0f
     3be:	58 89       	ldd	r21, Y+16	; 0x10
     3c0:	a3 d6       	rcall	.+3398   	; 0x1108 <__subsf3>
     3c2:	20 91 95 03 	lds	r18, 0x0395	; 0x800395 <Q_angle>
     3c6:	30 91 96 03 	lds	r19, 0x0396	; 0x800396 <Q_angle+0x1>
     3ca:	40 91 97 03 	lds	r20, 0x0397	; 0x800397 <Q_angle+0x2>
     3ce:	50 91 98 03 	lds	r21, 0x0398	; 0x800398 <Q_angle+0x3>
     3d2:	9b d6       	rcall	.+3382   	; 0x110a <__addsf3>
     3d4:	29 81       	ldd	r18, Y+1	; 0x01
     3d6:	3a 81       	ldd	r19, Y+2	; 0x02
     3d8:	4b 81       	ldd	r20, Y+3	; 0x03
     3da:	5c 81       	ldd	r21, Y+4	; 0x04
     3dc:	0e 94 0d 0b 	call	0x161a	; 0x161a <__mulsf3>
     3e0:	a5 ea       	ldi	r26, 0xA5	; 165
     3e2:	b3 e0       	ldi	r27, 0x03	; 3
     3e4:	2d 91       	ld	r18, X+
     3e6:	3d 91       	ld	r19, X+
     3e8:	4d 91       	ld	r20, X+
     3ea:	5c 91       	ld	r21, X
     3ec:	8e d6       	rcall	.+3356   	; 0x110a <__addsf3>
     3ee:	69 87       	std	Y+9, r22	; 0x09
     3f0:	7a 87       	std	Y+10, r23	; 0x0a
     3f2:	8b 87       	std	Y+11, r24	; 0x0b
	P[0][1] -= dt * P[1][1];
     3f4:	9c 87       	std	Y+12, r25	; 0x0c
     3f6:	2d 81       	ldd	r18, Y+5	; 0x05
     3f8:	3e 81       	ldd	r19, Y+6	; 0x06
     3fa:	4f 81       	ldd	r20, Y+7	; 0x07
     3fc:	58 85       	ldd	r21, Y+8	; 0x08
     3fe:	c3 01       	movw	r24, r6
     400:	b2 01       	movw	r22, r4
     402:	82 d6       	rcall	.+3332   	; 0x1108 <__subsf3>
     404:	2b 01       	movw	r4, r22
	P[1][0] -= dt * P[1][1];
     406:	3c 01       	movw	r6, r24
     408:	2d 81       	ldd	r18, Y+5	; 0x05
     40a:	3e 81       	ldd	r19, Y+6	; 0x06
     40c:	4f 81       	ldd	r20, Y+7	; 0x07
     40e:	58 85       	ldd	r21, Y+8	; 0x08
     410:	6d 85       	ldd	r22, Y+13	; 0x0d
     412:	7e 85       	ldd	r23, Y+14	; 0x0e
     414:	8f 85       	ldd	r24, Y+15	; 0x0f
     416:	98 89       	ldd	r25, Y+16	; 0x10
     418:	77 d6       	rcall	.+3310   	; 0x1108 <__subsf3>
     41a:	6d 87       	std	Y+13, r22	; 0x0d
     41c:	7e 87       	std	Y+14, r23	; 0x0e
     41e:	8f 87       	std	Y+15, r24	; 0x0f
	P[1][1] += Q_bias * dt;
     420:	98 8b       	std	Y+16, r25	; 0x10
     422:	20 91 8d 03 	lds	r18, 0x038D	; 0x80038d <Q_bias>
     426:	30 91 8e 03 	lds	r19, 0x038E	; 0x80038e <Q_bias+0x1>
     42a:	40 91 8f 03 	lds	r20, 0x038F	; 0x80038f <Q_bias+0x2>
     42e:	50 91 90 03 	lds	r21, 0x0390	; 0x800390 <Q_bias+0x3>
     432:	69 81       	ldd	r22, Y+1	; 0x01
     434:	7a 81       	ldd	r23, Y+2	; 0x02
     436:	8b 81       	ldd	r24, Y+3	; 0x03
     438:	9c 81       	ldd	r25, Y+4	; 0x04
     43a:	0e 94 0d 0b 	call	0x161a	; 0x161a <__mulsf3>
     43e:	a5 01       	movw	r20, r10
     440:	94 01       	movw	r18, r8
     442:	63 d6       	rcall	.+3270   	; 0x110a <__addsf3>
     444:	69 8f       	std	Y+25, r22	; 0x19
     446:	7a 8f       	std	Y+26, r23	; 0x1a
     448:	8b 8f       	std	Y+27, r24	; 0x1b

	// Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
	// Calculate Kalman gain - Compute the Kalman gain
	/* Step 4 */
	float S = P[0][0] + R_measure; // Estimate error
     44a:	9c 8f       	std	Y+28, r25	; 0x1c
     44c:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <R_measure>
     450:	30 91 9e 03 	lds	r19, 0x039E	; 0x80039e <R_measure+0x1>
     454:	40 91 9f 03 	lds	r20, 0x039F	; 0x80039f <R_measure+0x2>
     458:	50 91 a0 03 	lds	r21, 0x03A0	; 0x8003a0 <R_measure+0x3>
     45c:	69 85       	ldd	r22, Y+9	; 0x09
     45e:	7a 85       	ldd	r23, Y+10	; 0x0a
     460:	8b 85       	ldd	r24, Y+11	; 0x0b
     462:	9c 85       	ldd	r25, Y+12	; 0x0c
     464:	52 d6       	rcall	.+3236   	; 0x110a <__addsf3>
	/* Step 5 */
	float K[2]; // Kalman gain - This is a 2x1 vector
	K[0] = P[0][0] / S;
     466:	4b 01       	movw	r8, r22
     468:	5c 01       	movw	r10, r24
     46a:	9b 01       	movw	r18, r22
     46c:	ac 01       	movw	r20, r24
     46e:	69 85       	ldd	r22, Y+9	; 0x09
     470:	7a 85       	ldd	r23, Y+10	; 0x0a
     472:	8b 85       	ldd	r24, Y+11	; 0x0b
     474:	9c 85       	ldd	r25, Y+12	; 0x0c
     476:	2a d7       	rcall	.+3668   	; 0x12cc <__divsf3>
     478:	69 83       	std	Y+1, r22	; 0x01
     47a:	7a 83       	std	Y+2, r23	; 0x02
	K[1] = P[1][0] / S;
     47c:	8b 83       	std	Y+3, r24	; 0x03
     47e:	9c 83       	std	Y+4, r25	; 0x04
     480:	a5 01       	movw	r20, r10
     482:	94 01       	movw	r18, r8
     484:	6d 85       	ldd	r22, Y+13	; 0x0d
     486:	7e 85       	ldd	r23, Y+14	; 0x0e
     488:	8f 85       	ldd	r24, Y+15	; 0x0f
     48a:	98 89       	ldd	r25, Y+16	; 0x10
     48c:	1f d7       	rcall	.+3646   	; 0x12cc <__divsf3>
     48e:	6d 83       	std	Y+5, r22	; 0x05
     490:	7e 83       	std	Y+6, r23	; 0x06

	// Calculate angle and bias - Update estimate with measurement zk (newAngle)
	/* Step 3 */
	float y = newAngle - angle; // Angle difference
     492:	8f 83       	std	Y+7, r24	; 0x07
     494:	98 87       	std	Y+8, r25	; 0x08
     496:	2d 89       	ldd	r18, Y+21	; 0x15
     498:	3e 89       	ldd	r19, Y+22	; 0x16
     49a:	4f 89       	ldd	r20, Y+23	; 0x17
     49c:	58 8d       	ldd	r21, Y+24	; 0x18
     49e:	69 89       	ldd	r22, Y+17	; 0x11
     4a0:	7a 89       	ldd	r23, Y+18	; 0x12
     4a2:	8b 89       	ldd	r24, Y+19	; 0x13
     4a4:	9c 89       	ldd	r25, Y+20	; 0x14
     4a6:	30 d6       	rcall	.+3168   	; 0x1108 <__subsf3>
     4a8:	69 8b       	std	Y+17, r22	; 0x11
     4aa:	7a 8b       	std	Y+18, r23	; 0x12
	/* Step 6 */
	angle += K[0] * y;
     4ac:	8b 8b       	std	Y+19, r24	; 0x13
     4ae:	9c 8b       	std	Y+20, r25	; 0x14
     4b0:	9b 01       	movw	r18, r22
     4b2:	ac 01       	movw	r20, r24
     4b4:	69 81       	ldd	r22, Y+1	; 0x01
     4b6:	7a 81       	ldd	r23, Y+2	; 0x02
     4b8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ba:	9c 81       	ldd	r25, Y+4	; 0x04
     4bc:	0e 94 0d 0b 	call	0x161a	; 0x161a <__mulsf3>
     4c0:	2d 89       	ldd	r18, Y+21	; 0x15
     4c2:	3e 89       	ldd	r19, Y+22	; 0x16
     4c4:	4f 89       	ldd	r20, Y+23	; 0x17
     4c6:	58 8d       	ldd	r21, Y+24	; 0x18
     4c8:	20 d6       	rcall	.+3136   	; 0x110a <__addsf3>
     4ca:	4b 01       	movw	r8, r22
     4cc:	5c 01       	movw	r10, r24
     4ce:	60 93 a1 03 	sts	0x03A1, r22	; 0x8003a1 <angle>
     4d2:	70 93 a2 03 	sts	0x03A2, r23	; 0x8003a2 <angle+0x1>
     4d6:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <angle+0x2>
	bias += K[1] * y;
     4da:	90 93 a4 03 	sts	0x03A4, r25	; 0x8003a4 <angle+0x3>
     4de:	29 89       	ldd	r18, Y+17	; 0x11
     4e0:	3a 89       	ldd	r19, Y+18	; 0x12
     4e2:	4b 89       	ldd	r20, Y+19	; 0x13
     4e4:	5c 89       	ldd	r21, Y+20	; 0x14
     4e6:	6d 81       	ldd	r22, Y+5	; 0x05
     4e8:	7e 81       	ldd	r23, Y+6	; 0x06
     4ea:	8f 81       	ldd	r24, Y+7	; 0x07
     4ec:	98 85       	ldd	r25, Y+8	; 0x08
     4ee:	0e 94 0d 0b 	call	0x161a	; 0x161a <__mulsf3>
     4f2:	a7 01       	movw	r20, r14
     4f4:	96 01       	movw	r18, r12
     4f6:	09 d6       	rcall	.+3090   	; 0x110a <__addsf3>
     4f8:	60 93 99 03 	sts	0x0399, r22	; 0x800399 <bias>
     4fc:	70 93 9a 03 	sts	0x039A, r23	; 0x80039a <bias+0x1>
     500:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <bias+0x2>
     504:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <bias+0x3>
	// Calculate estimation error covariance - Update the error covariance
	/* Step 7 */
	float P00_temp = P[0][0];
	float P01_temp = P[0][1];

	P[0][0] -= K[0] * P00_temp;
     508:	29 81       	ldd	r18, Y+1	; 0x01
     50a:	3a 81       	ldd	r19, Y+2	; 0x02
     50c:	4b 81       	ldd	r20, Y+3	; 0x03
     50e:	5c 81       	ldd	r21, Y+4	; 0x04
     510:	69 85       	ldd	r22, Y+9	; 0x09
     512:	7a 85       	ldd	r23, Y+10	; 0x0a
     514:	8b 85       	ldd	r24, Y+11	; 0x0b
     516:	9c 85       	ldd	r25, Y+12	; 0x0c
     518:	0e 94 0d 0b 	call	0x161a	; 0x161a <__mulsf3>
     51c:	9b 01       	movw	r18, r22
     51e:	ac 01       	movw	r20, r24
     520:	69 85       	ldd	r22, Y+9	; 0x09
     522:	7a 85       	ldd	r23, Y+10	; 0x0a
     524:	8b 85       	ldd	r24, Y+11	; 0x0b
     526:	9c 85       	ldd	r25, Y+12	; 0x0c
     528:	ef d5       	rcall	.+3038   	; 0x1108 <__subsf3>
     52a:	e5 ea       	ldi	r30, 0xA5	; 165
     52c:	f3 e0       	ldi	r31, 0x03	; 3
     52e:	60 83       	st	Z, r22
     530:	71 83       	std	Z+1, r23	; 0x01
	P[0][1] -= K[0] * P01_temp;
     532:	82 83       	std	Z+2, r24	; 0x02
     534:	93 83       	std	Z+3, r25	; 0x03
     536:	29 81       	ldd	r18, Y+1	; 0x01
     538:	3a 81       	ldd	r19, Y+2	; 0x02
     53a:	4b 81       	ldd	r20, Y+3	; 0x03
     53c:	5c 81       	ldd	r21, Y+4	; 0x04
     53e:	c3 01       	movw	r24, r6
     540:	b2 01       	movw	r22, r4
     542:	0e 94 0d 0b 	call	0x161a	; 0x161a <__mulsf3>
     546:	9b 01       	movw	r18, r22
     548:	ac 01       	movw	r20, r24
     54a:	c3 01       	movw	r24, r6
     54c:	b2 01       	movw	r22, r4
     54e:	dc d5       	rcall	.+3000   	; 0x1108 <__subsf3>
     550:	60 93 a9 03 	sts	0x03A9, r22	; 0x8003a9 <P+0x4>
     554:	70 93 aa 03 	sts	0x03AA, r23	; 0x8003aa <P+0x5>
     558:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <P+0x6>
	P[1][0] -= K[1] * P00_temp;
     55c:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <P+0x7>
     560:	2d 81       	ldd	r18, Y+5	; 0x05
     562:	3e 81       	ldd	r19, Y+6	; 0x06
     564:	4f 81       	ldd	r20, Y+7	; 0x07
     566:	58 85       	ldd	r21, Y+8	; 0x08
     568:	69 85       	ldd	r22, Y+9	; 0x09
     56a:	7a 85       	ldd	r23, Y+10	; 0x0a
     56c:	8b 85       	ldd	r24, Y+11	; 0x0b
     56e:	9c 85       	ldd	r25, Y+12	; 0x0c
     570:	0e 94 0d 0b 	call	0x161a	; 0x161a <__mulsf3>
     574:	9b 01       	movw	r18, r22
     576:	ac 01       	movw	r20, r24
     578:	6d 85       	ldd	r22, Y+13	; 0x0d
     57a:	7e 85       	ldd	r23, Y+14	; 0x0e
     57c:	8f 85       	ldd	r24, Y+15	; 0x0f
     57e:	98 89       	ldd	r25, Y+16	; 0x10
     580:	c3 d5       	rcall	.+2950   	; 0x1108 <__subsf3>
     582:	60 93 ad 03 	sts	0x03AD, r22	; 0x8003ad <P+0x8>
     586:	70 93 ae 03 	sts	0x03AE, r23	; 0x8003ae <P+0x9>
     58a:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <P+0xa>
	P[1][1] -= K[1] * P01_temp;
     58e:	90 93 b0 03 	sts	0x03B0, r25	; 0x8003b0 <P+0xb>
     592:	2d 81       	ldd	r18, Y+5	; 0x05
     594:	3e 81       	ldd	r19, Y+6	; 0x06
     596:	4f 81       	ldd	r20, Y+7	; 0x07
     598:	58 85       	ldd	r21, Y+8	; 0x08
     59a:	c3 01       	movw	r24, r6
     59c:	b2 01       	movw	r22, r4
     59e:	0e 94 0d 0b 	call	0x161a	; 0x161a <__mulsf3>
     5a2:	9b 01       	movw	r18, r22
     5a4:	ac 01       	movw	r20, r24
     5a6:	69 8d       	ldd	r22, Y+25	; 0x19
     5a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     5aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5ae:	ac d5       	rcall	.+2904   	; 0x1108 <__subsf3>
     5b0:	60 93 b1 03 	sts	0x03B1, r22	; 0x8003b1 <P+0xc>
     5b4:	70 93 b2 03 	sts	0x03B2, r23	; 0x8003b2 <P+0xd>
     5b8:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <P+0xe>
     5bc:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <P+0xf>

	return angle;
};
     5c0:	c5 01       	movw	r24, r10
     5c2:	b4 01       	movw	r22, r8
     5c4:	6c 96       	adiw	r28, 0x1c	; 28
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	de bf       	out	0x3e, r29	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	cd bf       	out	0x3d, r28	; 61
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	ff 90       	pop	r15
     5da:	ef 90       	pop	r14
     5dc:	df 90       	pop	r13
     5de:	cf 90       	pop	r12
     5e0:	bf 90       	pop	r11
     5e2:	af 90       	pop	r10
     5e4:	9f 90       	pop	r9
     5e6:	8f 90       	pop	r8
     5e8:	7f 90       	pop	r7
     5ea:	6f 90       	pop	r6
     5ec:	5f 90       	pop	r5
     5ee:	4f 90       	pop	r4
     5f0:	08 95       	ret

000005f2 <Kalman_init>:
void Kalman_init() {
	/* We will set the variables like so, these can also be tuned by the user */
	Q_angle = 0.001f;
     5f2:	8f e6       	ldi	r24, 0x6F	; 111
     5f4:	92 e1       	ldi	r25, 0x12	; 18
     5f6:	a3 e8       	ldi	r26, 0x83	; 131
     5f8:	ba e3       	ldi	r27, 0x3A	; 58
     5fa:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <Q_angle>
     5fe:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <Q_angle+0x1>
     602:	a0 93 97 03 	sts	0x0397, r26	; 0x800397 <Q_angle+0x2>
     606:	b0 93 98 03 	sts	0x0398, r27	; 0x800398 <Q_angle+0x3>
	Q_bias = 0.003f;
     60a:	86 ea       	ldi	r24, 0xA6	; 166
     60c:	9b e9       	ldi	r25, 0x9B	; 155
     60e:	a4 e4       	ldi	r26, 0x44	; 68
     610:	bb e3       	ldi	r27, 0x3B	; 59
     612:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <Q_bias>
     616:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <Q_bias+0x1>
     61a:	a0 93 8f 03 	sts	0x038F, r26	; 0x80038f <Q_bias+0x2>
     61e:	b0 93 90 03 	sts	0x0390, r27	; 0x800390 <Q_bias+0x3>
	R_measure = 0.03f;
     622:	8f e8       	ldi	r24, 0x8F	; 143
     624:	92 ec       	ldi	r25, 0xC2	; 194
     626:	a5 ef       	ldi	r26, 0xF5	; 245
     628:	bc e3       	ldi	r27, 0x3C	; 60
     62a:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <R_measure>
     62e:	90 93 9e 03 	sts	0x039E, r25	; 0x80039e <R_measure+0x1>
     632:	a0 93 9f 03 	sts	0x039F, r26	; 0x80039f <R_measure+0x2>
     636:	b0 93 a0 03 	sts	0x03A0, r27	; 0x8003a0 <R_measure+0x3>

	angle = 0.0f; // Reset the angle
     63a:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <angle>
     63e:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <angle+0x1>
     642:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <angle+0x2>
     646:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <angle+0x3>
	bias = 0.0f; // Reset bias
     64a:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <bias>
     64e:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <bias+0x1>
     652:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <bias+0x2>
     656:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <bias+0x3>

	P[0][0] = 0.0f; // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so - see: http://en.wikipedia.org/wiki/Kalman_filter#Example_application.2C_technical
     65a:	e5 ea       	ldi	r30, 0xA5	; 165
     65c:	f3 e0       	ldi	r31, 0x03	; 3
     65e:	10 82       	st	Z, r1
     660:	11 82       	std	Z+1, r1	; 0x01
     662:	12 82       	std	Z+2, r1	; 0x02
     664:	13 82       	std	Z+3, r1	; 0x03
	P[0][1] = 0.0f;
     666:	14 82       	std	Z+4, r1	; 0x04
     668:	15 82       	std	Z+5, r1	; 0x05
     66a:	16 82       	std	Z+6, r1	; 0x06
     66c:	17 82       	std	Z+7, r1	; 0x07
	P[1][0] = 0.0f;
     66e:	10 86       	std	Z+8, r1	; 0x08
     670:	11 86       	std	Z+9, r1	; 0x09
     672:	12 86       	std	Z+10, r1	; 0x0a
     674:	13 86       	std	Z+11, r1	; 0x0b
	P[1][1] = 0.0f;
     676:	14 86       	std	Z+12, r1	; 0x0c
     678:	15 86       	std	Z+13, r1	; 0x0d
     67a:	16 86       	std	Z+14, r1	; 0x0e
     67c:	17 86       	std	Z+15, r1	; 0x0f
     67e:	08 95       	ret

00000680 <main>:
#include <time.h>
uint8_t buffer[14];
bool loop_bool=true;
/*-----------------------------------start of main----------------------------------*/
int main(void)
{	
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
     688:	a8 97       	sbiw	r28, 0x28	; 40
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	f8 94       	cli
     68e:	de bf       	out	0x3e, r29	; 62
     690:	0f be       	out	0x3f, r0	; 63
     692:	cd bf       	out	0x3d, r28	; 61
	U_step=U_step_predefine;
     694:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <__data_end+0x1>
     698:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <__data_end>
	V_step=V_step_predefine;
     69c:	88 e7       	ldi	r24, 0x78	; 120
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <V_step+0x1>
     6a4:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <V_step>
	W_step=W_step_predefine;
     6a8:	80 ef       	ldi	r24, 0xF0	; 240
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <W_step+0x1>
     6b0:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <W_step>
	incr=-1;
     6b4:	8f ef       	ldi	r24, 0xFF	; 255
     6b6:	9f ef       	ldi	r25, 0xFF	; 255
     6b8:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <incr+0x1>
     6bc:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <incr>
	pwm_delay=2000;
     6c0:	80 ed       	ldi	r24, 0xD0	; 208
     6c2:	97 e0       	ldi	r25, 0x07	; 7
     6c4:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <pwm_delay+0x1>
     6c8:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <pwm_delay>
	cli();
	init_gpio();
		#ifdef GYRO
			i2c_init();
     6cc:	f8 94       	cli
		#endif
	USART_Init(MY_UBRR);
     6ce:	6f dd       	rcall	.-1314   	; 0x1ae <init_gpio>
     6d0:	d7 d3       	rcall	.+1966   	; 0xe80 <i2c_init>
     6d2:	80 e1       	ldi	r24, 0x10	; 16
	uart_str = fdevopen(uart_putchar, NULL);
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	85 d4       	rcall	.+2314   	; 0xfe2 <USART_Init>
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	70 e0       	ldi	r23, 0x00	; 0
     6dc:	81 e2       	ldi	r24, 0x21	; 33
     6de:	98 e0       	ldi	r25, 0x08	; 8
	setup_timer0();
	Enable_timer0_overflow_interrupt();//micros
     6e0:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <fdevopen>
	setup_timer4();//pwm
     6e4:	90 93 b6 03 	sts	0x03B6, r25	; 0x8003b6 <uart_str+0x1>
	setup_timer5();
     6e8:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <uart_str>
	Enable_timer5_compare_interrupt();//motor
	OCR5A=4000;
     6ec:	25 d3       	rcall	.+1610   	; 0xd38 <setup_timer0>
     6ee:	2b d3       	rcall	.+1622   	; 0xd46 <Enable_timer0_overflow_interrupt>
     6f0:	00 d3       	rcall	.+1536   	; 0xcf2 <setup_timer4>
     6f2:	13 d3       	rcall	.+1574   	; 0xd1a <setup_timer5>
	unsigned long timer1=micros();
     6f4:	1b d3       	rcall	.+1590   	; 0xd2c <Enable_timer5_compare_interrupt>
     6f6:	80 ea       	ldi	r24, 0xA0	; 160
				int16_t gyroZ_calib=gyro_offset_z;
				int16_t accelX_calib=accel_offset_x;
				int16_t accelY_calib=accel_offset_y;
				int16_t accelZ_calib=accel_offset_z;
			#endif
		mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV,7);
     6f8:	9f e0       	ldi	r25, 0x0F	; 15
     6fa:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
		mpu6050_writeByte(MPU6050_RA_CONFIG,0x00);
     6fe:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		mpu6050_writeByte(MPU6050_RA_GYRO_CONFIG,0x08);//gyro sensitivity set to 500 o/s
     702:	27 d3       	rcall	.+1614   	; 0xd52 <micros>
     704:	2b 01       	movw	r4, r22
     706:	3c 01       	movw	r6, r24
     708:	67 e0       	ldi	r22, 0x07	; 7
		mpu6050_writeByte(MPU6050_RA_ACCEL_CONFIG,0x10);//accel sensitivity -/+ 8g
     70a:	89 e1       	ldi	r24, 0x19	; 25
     70c:	31 d2       	rcall	.+1122   	; 0xb70 <mpu6050_writeByte>
     70e:	60 e0       	ldi	r22, 0x00	; 0
		mpu6050_writeByte(MPU6050_RA_PWR_MGMT_1,0x01);
     710:	8a e1       	ldi	r24, 0x1A	; 26
     712:	2e d2       	rcall	.+1116   	; 0xb70 <mpu6050_writeByte>
     714:	68 e0       	ldi	r22, 0x08	; 8
     716:	8b e1       	ldi	r24, 0x1B	; 27
		double gyroXangle;
		double gyroYangle;
		double compAngleX;
		double compAngleY;
	#endif  
	Kalman_init();
     718:	2b d2       	rcall	.+1110   	; 0xb70 <mpu6050_writeByte>
	double angle_roll_kalman=0;
	double roll  = atan2(accel_y, accel_z) * RAD_TO_DEG;
     71a:	60 e1       	ldi	r22, 0x10	; 16
     71c:	8c e1       	ldi	r24, 0x1C	; 28
     71e:	28 d2       	rcall	.+1104   	; 0xb70 <mpu6050_writeByte>
     720:	61 e0       	ldi	r22, 0x01	; 1
     722:	8b e6       	ldi	r24, 0x6B	; 107
     724:	25 d2       	rcall	.+1098   	; 0xb70 <mpu6050_writeByte>
     726:	65 df       	rcall	.-310    	; 0x5f2 <Kalman_init>
     728:	6b 85       	ldd	r22, Y+11	; 0x0b
     72a:	7c 85       	ldd	r23, Y+12	; 0x0c
     72c:	07 2e       	mov	r0, r23
     72e:	00 0c       	add	r0, r0
     730:	88 0b       	sbc	r24, r24
     732:	99 0b       	sbc	r25, r25
     734:	66 d6       	rcall	.+3276   	; 0x1402 <__floatsisf>
     736:	6b 01       	movw	r12, r22
     738:	7c 01       	movw	r14, r24
     73a:	69 85       	ldd	r22, Y+9	; 0x09
     73c:	7a 85       	ldd	r23, Y+10	; 0x0a
     73e:	07 2e       	mov	r0, r23
	angle=roll;//set starting angle
     740:	00 0c       	add	r0, r0
     742:	88 0b       	sbc	r24, r24
     744:	99 0b       	sbc	r25, r25
     746:	5d d6       	rcall	.+3258   	; 0x1402 <__floatsisf>
     748:	a7 01       	movw	r20, r14
     74a:	96 01       	movw	r18, r12
     74c:	68 d5       	rcall	.+2768   	; 0x121e <atan2>
     74e:	25 e3       	ldi	r18, 0x35	; 53
     750:	3a ef       	ldi	r19, 0xFA	; 250
     752:	4e e8       	ldi	r20, 0x8E	; 142
     754:	5c e3       	ldi	r21, 0x3C	; 60
     756:	61 d7       	rcall	.+3778   	; 0x161a <__mulsf3>
     758:	60 93 a1 03 	sts	0x03A1, r22	; 0x8003a1 <angle>
	sei();
     75c:	70 93 a2 03 	sts	0x03A2, r23	; 0x8003a2 <angle+0x1>
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		double angle_pitch=0;
		double angle_roll=0;
     760:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <angle+0x2>
     764:	90 93 a4 03 	sts	0x03A4, r25	; 0x8003a4 <angle+0x3>
		int16_t gyro_y;
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		double angle_pitch=0;
     768:	78 94       	sei
     76a:	19 8a       	std	Y+17, r1	; 0x11
			printSI("",reg);
			printf("\n");		
			#ifdef DRV8313
				int absoulute_y=abs(kalman_angle);
				uint16_t learing_rate=500;				
				uint16_t local_motor_delay=(32735-(absoulute_y*learing_rate));
     76c:	1a 8a       	std	Y+18, r1	; 0x12
     76e:	1b 8a       	std	Y+19, r1	; 0x13
     770:	1c 8a       	std	Y+20, r1	; 0x14
     772:	19 8e       	std	Y+25, r1	; 0x19
     774:	1a 8e       	std	Y+26, r1	; 0x1a
     776:	1b 8e       	std	Y+27, r1	; 0x1b
	double roll  = atan2(accel_y, accel_z) * RAD_TO_DEG;
	angle=roll;//set starting angle
	sei();
    while (1) /*---------------------------while(1)---------------------------------*/
    {
		double f=34.2312;
     778:	1c 8e       	std	Y+28, r1	; 0x1c
     77a:	0f 2e       	mov	r0, r31
     77c:	ff ed       	ldi	r31, 0xDF	; 223
     77e:	2f 2e       	mov	r2, r31
     780:	ff e7       	ldi	r31, 0x7F	; 127
     782:	3f 2e       	mov	r3, r31
     784:	f0 2d       	mov	r31, r0
     786:	80 ec       	ldi	r24, 0xC0	; 192
		printDouble(&f);
     788:	9c ee       	ldi	r25, 0xEC	; 236
     78a:	a8 e0       	ldi	r26, 0x08	; 8
     78c:	b2 e4       	ldi	r27, 0x42	; 66
		#ifdef GYRO
    		mpu6050_getRawData(&accel_x,&accel_y,&accel_z,&gyro_x,&gyro_y,&gyro_z);//15us to do
     78e:	8d 87       	std	Y+13, r24	; 0x0d
     790:	9e 87       	std	Y+14, r25	; 0x0e
     792:	af 87       	std	Y+15, r26	; 0x0f
     794:	b8 8b       	std	Y+16, r27	; 0x10
     796:	ce 01       	movw	r24, r28
     798:	0d 96       	adiw	r24, 0x0d	; 13
     79a:	80 d4       	rcall	.+2304   	; 0x109c <printDouble>
     79c:	de 01       	movw	r26, r28
     79e:	15 96       	adiw	r26, 0x05	; 5
     7a0:	7d 01       	movw	r14, r26
     7a2:	8e 01       	movw	r16, r28
     7a4:	0d 5f       	subi	r16, 0xFD	; 253
     7a6:	1f 4f       	sbci	r17, 0xFF	; 255
     7a8:	9e 01       	movw	r18, r28
     7aa:	2f 5f       	subi	r18, 0xFF	; 255
     7ac:	3f 4f       	sbci	r19, 0xFF	; 255
     7ae:	ae 01       	movw	r20, r28
     7b0:	45 5f       	subi	r20, 0xF5	; 245
     7b2:	5f 4f       	sbci	r21, 0xFF	; 255
			accel_x-=accelX_calib;
     7b4:	be 01       	movw	r22, r28
     7b6:	67 5f       	subi	r22, 0xF7	; 247
     7b8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ba:	ce 01       	movw	r24, r28
     7bc:	07 96       	adiw	r24, 0x07	; 7
     7be:	2e d2       	rcall	.+1116   	; 0xc1c <mpu6050_getRawData>
			accel_y-=accelY_calib;
     7c0:	8f 81       	ldd	r24, Y+7	; 0x07
     7c2:	98 85       	ldd	r25, Y+8	; 0x08
     7c4:	86 5d       	subi	r24, 0xD6	; 214
     7c6:	9e 4f       	sbci	r25, 0xFE	; 254
     7c8:	98 87       	std	Y+8, r25	; 0x08
     7ca:	8f 83       	std	Y+7, r24	; 0x07
			accel_z-=accelZ_calib;
     7cc:	89 85       	ldd	r24, Y+9	; 0x09
     7ce:	9a 85       	ldd	r25, Y+10	; 0x0a
     7d0:	82 52       	subi	r24, 0x22	; 34
     7d2:	95 4f       	sbci	r25, 0xF5	; 245
     7d4:	9a 87       	std	Y+10, r25	; 0x0a
			gyro_x-=gyroX_calib;
     7d6:	89 87       	std	Y+9, r24	; 0x09
     7d8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7da:	9c 85       	ldd	r25, Y+12	; 0x0c
     7dc:	86 55       	subi	r24, 0x56	; 86
     7de:	98 40       	sbci	r25, 0x08	; 8
			gyro_y-=gyroY_calib;
     7e0:	9c 87       	std	Y+12, r25	; 0x0c
     7e2:	8b 87       	std	Y+11, r24	; 0x0b
     7e4:	89 81       	ldd	r24, Y+1	; 0x01
     7e6:	9a 81       	ldd	r25, Y+2	; 0x02
			gyro_z-=gyroZ_calib;
     7e8:	89 58       	subi	r24, 0x89	; 137
     7ea:	9f 4f       	sbci	r25, 0xFF	; 255
     7ec:	9a 83       	std	Y+2, r25	; 0x02
     7ee:	89 83       	std	Y+1, r24	; 0x01
     7f0:	8b 81       	ldd	r24, Y+3	; 0x03
			printSI("ay=",accel_y);
			printSI("az=",accel_z);
			printf("\n");
			/*--------end------*/			
		#else
			double dt = ((double)(micros() - timer1))/1000000;
     7f2:	9c 81       	ldd	r25, Y+4	; 0x04
     7f4:	8c 51       	subi	r24, 0x1C	; 28
     7f6:	9f 4f       	sbci	r25, 0xFF	; 255
     7f8:	9c 83       	std	Y+4, r25	; 0x04
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	8d 81       	ldd	r24, Y+5	; 0x05
     7fe:	9e 81       	ldd	r25, Y+6	; 0x06
     800:	8c 51       	subi	r24, 0x1C	; 28
     802:	9f 4f       	sbci	r25, 0xFF	; 255
     804:	9e 83       	std	Y+6, r25	; 0x06
     806:	8d 83       	std	Y+5, r24	; 0x05
     808:	a4 d2       	rcall	.+1352   	; 0xd52 <micros>
     80a:	64 19       	sub	r22, r4
     80c:	75 09       	sbc	r23, r5
     80e:	86 09       	sbc	r24, r6
     810:	97 09       	sbc	r25, r7
			timer1=micros();
     812:	f5 d5       	rcall	.+3050   	; 0x13fe <__floatunsisf>
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	34 e2       	ldi	r19, 0x24	; 36
     818:	44 e7       	ldi	r20, 0x74	; 116
			double gyroXrate = gyro_x/65.5;// deg/s 
			double gyroYrate = gyro_y/65.5;// deg/s
     81a:	59 e4       	ldi	r21, 0x49	; 73
     81c:	57 d5       	rcall	.+2734   	; 0x12cc <__divsf3>
     81e:	6d 8f       	std	Y+29, r22	; 0x1d
     820:	7e 8f       	std	Y+30, r23	; 0x1e
     822:	8f 8f       	std	Y+31, r24	; 0x1f
     824:	98 a3       	std	Y+32, r25	; 0x20
     826:	95 d2       	rcall	.+1322   	; 0xd52 <micros>
     828:	2b 01       	movw	r4, r22
     82a:	3c 01       	movw	r6, r24
     82c:	6b 81       	ldd	r22, Y+3	; 0x03
     82e:	7c 81       	ldd	r23, Y+4	; 0x04
     830:	07 2e       	mov	r0, r23
     832:	00 0c       	add	r0, r0
     834:	88 0b       	sbc	r24, r24
     836:	99 0b       	sbc	r25, r25
			if (!loop_bool) {
     838:	e4 d5       	rcall	.+3016   	; 0x1402 <__floatsisf>
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	43 e8       	ldi	r20, 0x83	; 131
     840:	52 e4       	ldi	r21, 0x42	; 66
				angle_pitch += gyroXrate*dt; //Calculate the traveled pitch angle and add this to the angle_pitch variable
     842:	44 d5       	rcall	.+2696   	; 0x12cc <__divsf3>
     844:	6d a3       	std	Y+37, r22	; 0x25
     846:	7e a3       	std	Y+38, r23	; 0x26
     848:	8f a3       	std	Y+39, r24	; 0x27
     84a:	98 a7       	std	Y+40, r25	; 0x28
     84c:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <loop_bool>
     850:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <loop_bool+0x1>
     854:	89 2b       	or	r24, r25
     856:	89 f5       	brne	.+98     	; 0x8ba <main+0x23a>
     858:	69 81       	ldd	r22, Y+1	; 0x01
     85a:	7a 81       	ldd	r23, Y+2	; 0x02
     85c:	07 2e       	mov	r0, r23
     85e:	00 0c       	add	r0, r0
     860:	88 0b       	sbc	r24, r24
     862:	99 0b       	sbc	r25, r25
     864:	ce d5       	rcall	.+2972   	; 0x1402 <__floatsisf>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	43 e8       	ldi	r20, 0x83	; 131
     86c:	52 e4       	ldi	r21, 0x42	; 66
     86e:	2e d5       	rcall	.+2652   	; 0x12cc <__divsf3>
     870:	2d 8d       	ldd	r18, Y+29	; 0x1d
     872:	3e 8d       	ldd	r19, Y+30	; 0x1e
     874:	4f 8d       	ldd	r20, Y+31	; 0x1f
     876:	58 a1       	ldd	r21, Y+32	; 0x20
     878:	d0 d6       	rcall	.+3488   	; 0x161a <__mulsf3>
     87a:	9b 01       	movw	r18, r22
     87c:	ac 01       	movw	r20, r24
				angle_roll += gyroYrate*dt;  //Calculate the traveled roll angle and add this to the angle_roll variable			
     87e:	69 8d       	ldd	r22, Y+25	; 0x19
     880:	7a 8d       	ldd	r23, Y+26	; 0x1a
     882:	8b 8d       	ldd	r24, Y+27	; 0x1b
     884:	9c 8d       	ldd	r25, Y+28	; 0x1c
     886:	41 d4       	rcall	.+2178   	; 0x110a <__addsf3>
     888:	69 8f       	std	Y+25, r22	; 0x19
     88a:	7a 8f       	std	Y+26, r23	; 0x1a
     88c:	8b 8f       	std	Y+27, r24	; 0x1b
     88e:	9c 8f       	std	Y+28, r25	; 0x1c
     890:	2d a1       	ldd	r18, Y+37	; 0x25
     892:	3e a1       	ldd	r19, Y+38	; 0x26
     894:	4f a1       	ldd	r20, Y+39	; 0x27
     896:	58 a5       	ldd	r21, Y+40	; 0x28
     898:	6d 8d       	ldd	r22, Y+29	; 0x1d
     89a:	7e 8d       	ldd	r23, Y+30	; 0x1e
     89c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     89e:	98 a1       	ldd	r25, Y+32	; 0x20
     8a0:	bc d6       	rcall	.+3448   	; 0x161a <__mulsf3>
     8a2:	9b 01       	movw	r18, r22
			}
			else loop_bool=false;	
     8a4:	ac 01       	movw	r20, r24
     8a6:	69 89       	ldd	r22, Y+17	; 0x11
			angle_pitch += angle_roll * sin(gyro_z * (dt/65.5*pi/180));               //If the IMU has yawed transfer the roll angle to the pitch angel
     8a8:	7a 89       	ldd	r23, Y+18	; 0x12
     8aa:	8b 89       	ldd	r24, Y+19	; 0x13
     8ac:	9c 89       	ldd	r25, Y+20	; 0x14
     8ae:	2d d4       	rcall	.+2138   	; 0x110a <__addsf3>
     8b0:	69 8b       	std	Y+17, r22	; 0x11
     8b2:	7a 8b       	std	Y+18, r23	; 0x12
     8b4:	8b 8b       	std	Y+19, r24	; 0x13
     8b6:	9c 8b       	std	Y+20, r25	; 0x14
     8b8:	04 c0       	rjmp	.+8      	; 0x8c2 <main+0x242>
     8ba:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <loop_bool+0x1>
     8be:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <loop_bool>
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	43 e8       	ldi	r20, 0x83	; 131
     8c8:	52 e4       	ldi	r21, 0x42	; 66
     8ca:	6d 8d       	ldd	r22, Y+29	; 0x1d
     8cc:	7e 8d       	ldd	r23, Y+30	; 0x1e
     8ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8d0:	98 a1       	ldd	r25, Y+32	; 0x20
     8d2:	fc d4       	rcall	.+2552   	; 0x12cc <__divsf3>
     8d4:	2b ed       	ldi	r18, 0xDB	; 219
     8d6:	3f e0       	ldi	r19, 0x0F	; 15
     8d8:	49 e4       	ldi	r20, 0x49	; 73
     8da:	50 e4       	ldi	r21, 0x40	; 64
     8dc:	9e d6       	rcall	.+3388   	; 0x161a <__mulsf3>
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	44 e3       	ldi	r20, 0x34	; 52
     8e4:	53 e4       	ldi	r21, 0x43	; 67
     8e6:	f2 d4       	rcall	.+2532   	; 0x12cc <__divsf3>
     8e8:	6b 01       	movw	r12, r22
     8ea:	7c 01       	movw	r14, r24
     8ec:	6d 81       	ldd	r22, Y+5	; 0x05
     8ee:	7e 81       	ldd	r23, Y+6	; 0x06
     8f0:	07 2e       	mov	r0, r23
     8f2:	00 0c       	add	r0, r0
     8f4:	88 0b       	sbc	r24, r24
     8f6:	99 0b       	sbc	r25, r25
     8f8:	84 d5       	rcall	.+2824   	; 0x1402 <__floatsisf>
     8fa:	9b 01       	movw	r18, r22
     8fc:	ac 01       	movw	r20, r24
     8fe:	c7 01       	movw	r24, r14
     900:	b6 01       	movw	r22, r12
     902:	8b d6       	rcall	.+3350   	; 0x161a <__mulsf3>
     904:	ed d6       	rcall	.+3546   	; 0x16e0 <sin>
     906:	6b 01       	movw	r12, r22
     908:	7c 01       	movw	r14, r24
     90a:	9b 01       	movw	r18, r22
     90c:	ac 01       	movw	r20, r24
     90e:	69 89       	ldd	r22, Y+17	; 0x11
     910:	7a 89       	ldd	r23, Y+18	; 0x12
			angle_roll -= angle_pitch * sin(gyro_z * (dt/65.5*pi/180));               //If the IMU has yawed transfer the pitch angle to the roll angel
     912:	8b 89       	ldd	r24, Y+19	; 0x13
     914:	9c 89       	ldd	r25, Y+20	; 0x14
     916:	81 d6       	rcall	.+3330   	; 0x161a <__mulsf3>
     918:	9b 01       	movw	r18, r22
     91a:	ac 01       	movw	r20, r24
     91c:	69 8d       	ldd	r22, Y+25	; 0x19
     91e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     920:	8b 8d       	ldd	r24, Y+27	; 0x1b
     922:	9c 8d       	ldd	r25, Y+28	; 0x1c
     924:	f2 d3       	rcall	.+2020   	; 0x110a <__addsf3>
     926:	69 8f       	std	Y+25, r22	; 0x19
     928:	7a 8f       	std	Y+26, r23	; 0x1a
     92a:	8b 8f       	std	Y+27, r24	; 0x1b
     92c:	9c 8f       	std	Y+28, r25	; 0x1c
     92e:	9b 01       	movw	r18, r22
     930:	ac 01       	movw	r20, r24
			
			double temporar_accel_x=accel_x/100;
     932:	c7 01       	movw	r24, r14
     934:	b6 01       	movw	r22, r12
     936:	71 d6       	rcall	.+3298   	; 0x161a <__mulsf3>
     938:	9b 01       	movw	r18, r22
     93a:	ac 01       	movw	r20, r24
     93c:	69 89       	ldd	r22, Y+17	; 0x11
     93e:	7a 89       	ldd	r23, Y+18	; 0x12
     940:	8b 89       	ldd	r24, Y+19	; 0x13
     942:	9c 89       	ldd	r25, Y+20	; 0x14
     944:	e1 d3       	rcall	.+1986   	; 0x1108 <__subsf3>
     946:	69 8b       	std	Y+17, r22	; 0x11
     948:	7a 8b       	std	Y+18, r23	; 0x12
     94a:	8b 8b       	std	Y+19, r24	; 0x13
			double temporar_accel_y=accel_y/100;
     94c:	9c 8b       	std	Y+20, r25	; 0x14
     94e:	0f 81       	ldd	r16, Y+7	; 0x07
     950:	18 85       	ldd	r17, Y+8	; 0x08
     952:	c8 01       	movw	r24, r16
     954:	64 e6       	ldi	r22, 0x64	; 100
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	5c d7       	rcall	.+3768   	; 0x1812 <__divmodhi4>
     95a:	07 2e       	mov	r0, r23
     95c:	00 0c       	add	r0, r0
     95e:	88 0b       	sbc	r24, r24
     960:	99 0b       	sbc	r25, r25
     962:	4f d5       	rcall	.+2718   	; 0x1402 <__floatsisf>
     964:	4b 01       	movw	r8, r22
     966:	5c 01       	movw	r10, r24
			double temporar_accel_z=accel_z/100;	
     968:	89 85       	ldd	r24, Y+9	; 0x09
     96a:	9a 85       	ldd	r25, Y+10	; 0x0a
     96c:	64 e6       	ldi	r22, 0x64	; 100
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	50 d7       	rcall	.+3744   	; 0x1812 <__divmodhi4>
     972:	07 2e       	mov	r0, r23
     974:	00 0c       	add	r0, r0
     976:	88 0b       	sbc	r24, r24
     978:	99 0b       	sbc	r25, r25
     97a:	43 d5       	rcall	.+2694   	; 0x1402 <__floatsisf>
     97c:	6d 8b       	std	Y+21, r22	; 0x15
     97e:	7e 8b       	std	Y+22, r23	; 0x16
			acc_total_vector = sqrt((temporar_accel_x*temporar_accel_x)+(temporar_accel_y*temporar_accel_y)+(temporar_accel_z*temporar_accel_z));  //Calculate the total accelerometer vector
     980:	8f 8b       	std	Y+23, r24	; 0x17
     982:	98 8f       	std	Y+24, r25	; 0x18
     984:	8b 85       	ldd	r24, Y+11	; 0x0b
     986:	9c 85       	ldd	r25, Y+12	; 0x0c
     988:	64 e6       	ldi	r22, 0x64	; 100
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	42 d7       	rcall	.+3716   	; 0x1812 <__divmodhi4>
     98e:	07 2e       	mov	r0, r23
     990:	00 0c       	add	r0, r0
     992:	88 0b       	sbc	r24, r24
     994:	99 0b       	sbc	r25, r25
     996:	35 d5       	rcall	.+2666   	; 0x1402 <__floatsisf>
     998:	6b 01       	movw	r12, r22
     99a:	7c 01       	movw	r14, r24
     99c:	a5 01       	movw	r20, r10
     99e:	94 01       	movw	r18, r8
     9a0:	c5 01       	movw	r24, r10
     9a2:	b4 01       	movw	r22, r8
     9a4:	3a d6       	rcall	.+3188   	; 0x161a <__mulsf3>
     9a6:	69 a3       	std	Y+33, r22	; 0x21
     9a8:	7a a3       	std	Y+34, r23	; 0x22
     9aa:	8b a3       	std	Y+35, r24	; 0x23
     9ac:	9c a3       	std	Y+36, r25	; 0x24
     9ae:	2d 89       	ldd	r18, Y+21	; 0x15
     9b0:	3e 89       	ldd	r19, Y+22	; 0x16
     9b2:	4f 89       	ldd	r20, Y+23	; 0x17
     9b4:	58 8d       	ldd	r21, Y+24	; 0x18
     9b6:	ca 01       	movw	r24, r20
     9b8:	b9 01       	movw	r22, r18
     9ba:	2f d6       	rcall	.+3166   	; 0x161a <__mulsf3>
     9bc:	9b 01       	movw	r18, r22
     9be:	ac 01       	movw	r20, r24
     9c0:	69 a1       	ldd	r22, Y+33	; 0x21
     9c2:	7a a1       	ldd	r23, Y+34	; 0x22
     9c4:	8b a1       	ldd	r24, Y+35	; 0x23
     9c6:	9c a1       	ldd	r25, Y+36	; 0x24
     9c8:	a0 d3       	rcall	.+1856   	; 0x110a <__addsf3>
     9ca:	69 a3       	std	Y+33, r22	; 0x21
     9cc:	7a a3       	std	Y+34, r23	; 0x22
     9ce:	8b a3       	std	Y+35, r24	; 0x23
     9d0:	9c a3       	std	Y+36, r25	; 0x24
     9d2:	a5 01       	movw	r20, r10
     9d4:	94 01       	movw	r18, r8
     9d6:	c5 01       	movw	r24, r10
     9d8:	b4 01       	movw	r22, r8
     9da:	1f d6       	rcall	.+3134   	; 0x161a <__mulsf3>
     9dc:	4b 01       	movw	r8, r22
     9de:	5c 01       	movw	r10, r24
     9e0:	2d 89       	ldd	r18, Y+21	; 0x15
     9e2:	3e 89       	ldd	r19, Y+22	; 0x16
     9e4:	4f 89       	ldd	r20, Y+23	; 0x17
     9e6:	58 8d       	ldd	r21, Y+24	; 0x18
     9e8:	ca 01       	movw	r24, r20
     9ea:	b9 01       	movw	r22, r18
     9ec:	16 d6       	rcall	.+3116   	; 0x161a <__mulsf3>
     9ee:	9b 01       	movw	r18, r22
     9f0:	ac 01       	movw	r20, r24
			acc_total_vector*=100;
		    angle_pitch_acc = asin((double)accel_y/acc_total_vector)* 57.296;       //Calculate the pitch angle
			angle_roll_acc = asin((double)accel_x/acc_total_vector)* -57.296;       //Calculate the roll angle
     9f2:	c5 01       	movw	r24, r10
     9f4:	b4 01       	movw	r22, r8
     9f6:	89 d3       	rcall	.+1810   	; 0x110a <__addsf3>
     9f8:	4b 01       	movw	r8, r22
     9fa:	5c 01       	movw	r10, r24
     9fc:	a7 01       	movw	r20, r14
     9fe:	96 01       	movw	r18, r12
     a00:	c7 01       	movw	r24, r14
     a02:	b6 01       	movw	r22, r12
     a04:	0a d6       	rcall	.+3092   	; 0x161a <__mulsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	c5 01       	movw	r24, r10
     a0c:	b4 01       	movw	r22, r8
     a0e:	7d d3       	rcall	.+1786   	; 0x110a <__addsf3>
     a10:	71 d6       	rcall	.+3298   	; 0x16f4 <sqrt>
     a12:	4b 01       	movw	r8, r22
     a14:	5c 01       	movw	r10, r24
     a16:	b8 01       	movw	r22, r16
     a18:	11 0f       	add	r17, r17
     a1a:	88 0b       	sbc	r24, r24
				
			//kalman
			double roll  = atan2(accel_y, accel_z) * RAD_TO_DEG;
			double pitch = atan(-accel_x / sqrt(accel_y * accel_y + accel_z * accel_z)) * RAD_TO_DEG;
			//angle=roll;
			float kalman_angle=getAngle(angle_roll,gyroYrate,dt);
     a1c:	99 0b       	sbc	r25, r25
     a1e:	f1 d4       	rcall	.+2530   	; 0x1402 <__floatsisf>
     a20:	6b 01       	movw	r12, r22
     a22:	7c 01       	movw	r14, r24
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	48 ec       	ldi	r20, 0xC8	; 200
     a2a:	52 e4       	ldi	r21, 0x42	; 66
     a2c:	c5 01       	movw	r24, r10
     a2e:	b4 01       	movw	r22, r8
     a30:	f4 d5       	rcall	.+3048   	; 0x161a <__mulsf3>
     a32:	9b 01       	movw	r18, r22
			
			int16_t reg;
			reg=kalman_angle;
     a34:	ac 01       	movw	r20, r24
     a36:	c7 01       	movw	r24, r14
     a38:	b6 01       	movw	r22, r12
     a3a:	48 d4       	rcall	.+2192   	; 0x12cc <__divsf3>
			printSI("",reg);
     a3c:	ca d3       	rcall	.+1940   	; 0x11d2 <asin>
     a3e:	4b 01       	movw	r8, r22
     a40:	5c 01       	movw	r10, r24
     a42:	ed 8c       	ldd	r14, Y+29	; 0x1d
			reg=angle_roll;
			printSI("",reg);
     a44:	fe 8c       	ldd	r15, Y+30	; 0x1e
     a46:	0f 8d       	ldd	r16, Y+31	; 0x1f
     a48:	18 a1       	ldd	r17, Y+32	; 0x20
     a4a:	2d a1       	ldd	r18, Y+37	; 0x25
     a4c:	3e a1       	ldd	r19, Y+38	; 0x26
     a4e:	4f a1       	ldd	r20, Y+39	; 0x27
     a50:	58 a5       	ldd	r21, Y+40	; 0x28
     a52:	69 89       	ldd	r22, Y+17	; 0x11
     a54:	7a 89       	ldd	r23, Y+18	; 0x12
     a56:	8b 89       	ldd	r24, Y+19	; 0x13
				
			double xff=angle_roll_acc;
			double final_angleY=(angle_roll*0.996)+(xff*0.004);
     a58:	9c 89       	ldd	r25, Y+20	; 0x14
     a5a:	37 dc       	rcall	.-1938   	; 0x2ca <getAngle>
     a5c:	9f d4       	rcall	.+2366   	; 0x139c <__fixsfsi>
     a5e:	6b 01       	movw	r12, r22
     a60:	7c 01       	movw	r14, r24
     a62:	87 e7       	ldi	r24, 0x77	; 119
     a64:	93 e0       	ldi	r25, 0x03	; 3
     a66:	fe d2       	rcall	.+1532   	; 0x1064 <printSI>
     a68:	69 89       	ldd	r22, Y+17	; 0x11
     a6a:	7a 89       	ldd	r23, Y+18	; 0x12
     a6c:	8b 89       	ldd	r24, Y+19	; 0x13
     a6e:	9c 89       	ldd	r25, Y+20	; 0x14
     a70:	95 d4       	rcall	.+2346   	; 0x139c <__fixsfsi>
     a72:	87 e7       	ldi	r24, 0x77	; 119
     a74:	93 e0       	ldi	r25, 0x03	; 3
     a76:	f6 d2       	rcall	.+1516   	; 0x1064 <printSI>
     a78:	2b e1       	ldi	r18, 0x1B	; 27
     a7a:	3f e2       	ldi	r19, 0x2F	; 47
     a7c:	45 e6       	ldi	r20, 0x65	; 101
     a7e:	52 ec       	ldi	r21, 0xC2	; 194
     a80:	c5 01       	movw	r24, r10
     a82:	b4 01       	movw	r22, r8
     a84:	ca d5       	rcall	.+2964   	; 0x161a <__mulsf3>
     a86:	2f e6       	ldi	r18, 0x6F	; 111
     a88:	32 e1       	ldi	r19, 0x12	; 18
     a8a:	43 e8       	ldi	r20, 0x83	; 131
     a8c:	5b e3       	ldi	r21, 0x3B	; 59
     a8e:	c5 d5       	rcall	.+2954   	; 0x161a <__mulsf3>
     a90:	4b 01       	movw	r8, r22
     a92:	5c 01       	movw	r10, r24
			reg=final_angleY;
			printSI("",reg);
     a94:	2b ed       	ldi	r18, 0xDB	; 219
     a96:	39 ef       	ldi	r19, 0xF9	; 249
     a98:	4e e7       	ldi	r20, 0x7E	; 126
     a9a:	5f e3       	ldi	r21, 0x3F	; 63
     a9c:	69 89       	ldd	r22, Y+17	; 0x11
     a9e:	7a 89       	ldd	r23, Y+18	; 0x12
			printf("\n");		
     aa0:	8b 89       	ldd	r24, Y+19	; 0x13
     aa2:	9c 89       	ldd	r25, Y+20	; 0x14
     aa4:	ba d5       	rcall	.+2932   	; 0x161a <__mulsf3>
     aa6:	9b 01       	movw	r18, r22
			#ifdef DRV8313
				int absoulute_y=abs(kalman_angle);
     aa8:	ac 01       	movw	r20, r24
     aaa:	c5 01       	movw	r24, r10
     aac:	b4 01       	movw	r22, r8
     aae:	2d d3       	rcall	.+1626   	; 0x110a <__addsf3>
     ab0:	4b 01       	movw	r8, r22
     ab2:	5c 01       	movw	r10, r24
     ab4:	73 d4       	rcall	.+2278   	; 0x139c <__fixsfsi>
				uint16_t learing_rate=500;				
				uint16_t local_motor_delay=(32735-(absoulute_y*learing_rate));
     ab6:	87 e7       	ldi	r24, 0x77	; 119
     ab8:	93 e0       	ldi	r25, 0x03	; 3
     aba:	d4 d2       	rcall	.+1448   	; 0x1064 <printSI>
     abc:	8a e0       	ldi	r24, 0x0A	; 10
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	4f d7       	rcall	.+3742   	; 0x1960 <putchar>
     ac2:	c6 01       	movw	r24, r12
     ac4:	99 23       	and	r25, r25
     ac6:	24 f4       	brge	.+8      	; 0xad0 <main+0x450>
     ac8:	88 27       	eor	r24, r24
     aca:	99 27       	eor	r25, r25
				if (local_motor_delay>2000)
     acc:	8c 19       	sub	r24, r12
     ace:	9d 09       	sbc	r25, r13
     ad0:	bc 01       	movw	r22, r24
     ad2:	44 ef       	ldi	r20, 0xF4	; 244
				{
					pwm_delay=local_motor_delay;
     ad4:	51 e0       	ldi	r21, 0x01	; 1
     ad6:	84 9f       	mul	r24, r20
     ad8:	90 01       	movw	r18, r0
     ada:	85 9f       	mul	r24, r21
				}
				int16_t reg_ = local_motor_delay;
				//printSI("ocr=",reg_);
				if ((absoulute_y<=0.8) || (final_angleY >90))
     adc:	30 0d       	add	r19, r0
     ade:	94 9f       	mul	r25, r20
     ae0:	30 0d       	add	r19, r0
     ae2:	11 24       	eor	r1, r1
     ae4:	c1 01       	movw	r24, r2
     ae6:	82 1b       	sub	r24, r18
     ae8:	93 0b       	sbc	r25, r19
     aea:	81 3d       	cpi	r24, 0xD1	; 209
     aec:	57 e0       	ldi	r21, 0x07	; 7
     aee:	95 07       	cpc	r25, r21
     af0:	20 f0       	brcs	.+8      	; 0xafa <main+0x47a>
     af2:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <pwm_delay+0x1>
     af6:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <pwm_delay>
     afa:	07 2e       	mov	r0, r23
     afc:	00 0c       	add	r0, r0
     afe:	88 0b       	sbc	r24, r24
     b00:	99 0b       	sbc	r25, r25
     b02:	7f d4       	rcall	.+2302   	; 0x1402 <__floatsisf>
     b04:	2d ec       	ldi	r18, 0xCD	; 205
     b06:	3c ec       	ldi	r19, 0xCC	; 204
     b08:	4c e4       	ldi	r20, 0x4C	; 76
     b0a:	5f e3       	ldi	r21, 0x3F	; 63
				{
					incr=0;
     b0c:	db d3       	rcall	.+1974   	; 0x12c4 <__cmpsf2>
     b0e:	18 16       	cp	r1, r24
     b10:	4c f4       	brge	.+18     	; 0xb24 <main+0x4a4>
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
					//printf("\n");	
				}
				else 
					if (final_angleY>0.8)
     b16:	44 eb       	ldi	r20, 0xB4	; 180
     b18:	52 e4       	ldi	r21, 0x42	; 66
     b1a:	c5 01       	movw	r24, r10
     b1c:	b4 01       	movw	r22, r8
     b1e:	72 d5       	rcall	.+2788   	; 0x1604 <__gesf2>
     b20:	18 16       	cp	r1, r24
     b22:	2c f4       	brge	.+10     	; 0xb2e <main+0x4ae>
     b24:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <incr+0x1>
     b28:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <incr>
					{
						cli();
						incr=1;
     b2c:	2c ce       	rjmp	.-936    	; 0x786 <main+0x106>
     b2e:	2d ec       	ldi	r18, 0xCD	; 205
     b30:	3c ec       	ldi	r19, 0xCC	; 204
     b32:	4c e4       	ldi	r20, 0x4C	; 76
     b34:	5f e3       	ldi	r21, 0x3F	; 63
     b36:	c5 01       	movw	r24, r10
						printf(" ");
     b38:	b4 01       	movw	r22, r8
     b3a:	64 d5       	rcall	.+2760   	; 0x1604 <__gesf2>
     b3c:	18 16       	cp	r1, r24
     b3e:	64 f4       	brge	.+24     	; 0xb58 <main+0x4d8>
						int16_t val=pwmSin[U_step];
						//print16(&val);
						//printf(" yes\n");					
						sei();
     b40:	f8 94       	cli
     b42:	81 e0       	ldi	r24, 0x01	; 1
					}
					else
					{	cli();
     b44:	90 e0       	ldi	r25, 0x00	; 0
						incr=-1;
     b46:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <incr+0x1>
     b4a:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <incr>
     b4e:	80 e2       	ldi	r24, 0x20	; 32
     b50:	90 e0       	ldi	r25, 0x00	; 0
						printf(" ");
     b52:	06 d7       	rcall	.+3596   	; 0x1960 <putchar>
     b54:	78 94       	sei
     b56:	17 ce       	rjmp	.-978    	; 0x786 <main+0x106>
     b58:	f8 94       	cli
						int16_t val=pwmSin[U_step];
						//print16(&val);
						//printf(" no\n");
						sei();
     b5a:	af ef       	ldi	r26, 0xFF	; 255
			//	 angle_roll = angle_roll_acc;                                       //Set the gyro roll angle equal to the accelerometer roll angle
			//	 set_gyro_angles = true;                                            //Set the IMU started flag
			//}			
			#endif //PRINT_RAW_DATA			
		#endif //GYRO
	}
     b5c:	bf ef       	ldi	r27, 0xFF	; 255
     b5e:	b0 93 8c 03 	sts	0x038C, r27	; 0x80038c <incr+0x1>
     b62:	a0 93 8b 03 	sts	0x038B, r26	; 0x80038b <incr>
     b66:	80 e2       	ldi	r24, 0x20	; 32
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	fa d6       	rcall	.+3572   	; 0x1960 <putchar>
     b6c:	78 94       	sei
     b6e:	0b ce       	rjmp	.-1002   	; 0x786 <main+0x106>

00000b70 <mpu6050_writeByte>:
	uint8_t byteToReturn=i2c_readNak();
	i2c_stop();
	return byteToReturn;
}
void mpu6050_writeByte(uint8_t wereToWrite,uint8_t byteToWrite)//writebyte
{
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	d8 2f       	mov	r29, r24
     b76:	c6 2f       	mov	r28, r22
	i2c_start(MPU6050_WRITE);
     b78:	80 ed       	ldi	r24, 0xD0	; 208
	i2c_write(wereToWrite);
	i2c_write(byteToWrite);
     b7a:	88 d1       	rcall	.+784    	; 0xe8c <i2c_start>
     b7c:	8d 2f       	mov	r24, r29
	i2c_stop();
     b7e:	dc d1       	rcall	.+952    	; 0xf38 <i2c_write>
     b80:	8c 2f       	mov	r24, r28
}
     b82:	da d1       	rcall	.+948    	; 0xf38 <i2c_write>
     b84:	c9 d1       	rcall	.+914    	; 0xf18 <i2c_stop>
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	08 95       	ret

00000b8c <mpu6050_readBytes>:
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
     b8c:	af 92       	push	r10
     b8e:	bf 92       	push	r11
     b90:	cf 92       	push	r12
     b92:	df 92       	push	r13
     b94:	ff 92       	push	r15
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
     b9e:	66 23       	and	r22, r22
     ba0:	89 f1       	breq	.+98     	; 0xc04 <mpu6050_readBytes+0x78>
     ba2:	c5 2f       	mov	r28, r21
     ba4:	d4 2f       	mov	r29, r20
     ba6:	f6 2e       	mov	r15, r22
     ba8:	18 2f       	mov	r17, r24
		//request register
		i2c_start(MPU6050_WRITE);
     baa:	80 ed       	ldi	r24, 0xD0	; 208
		i2c_write(regAddr);
     bac:	6f d1       	rcall	.+734    	; 0xe8c <i2c_start>
     bae:	81 2f       	mov	r24, r17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bb0:	c3 d1       	rcall	.+902    	; 0xf38 <i2c_write>
     bb2:	85 e3       	ldi	r24, 0x35	; 53
     bb4:	8a 95       	dec	r24
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
     bb6:	f1 f7       	brne	.-4      	; 0xbb4 <mpu6050_readBytes+0x28>
     bb8:	00 00       	nop
     bba:	81 ed       	ldi	r24, 0xD1	; 209
     bbc:	67 d1       	rcall	.+718    	; 0xe8c <i2c_start>
     bbe:	0d 2f       	mov	r16, r29
     bc0:	1c 2f       	mov	r17, r28
     bc2:	cc 24       	eor	r12, r12
     bc4:	ca 94       	dec	r12
     bc6:	cf 0c       	add	r12, r15
     bc8:	d1 2c       	mov	r13, r1
     bca:	ef ef       	ldi	r30, 0xFF	; 255
     bcc:	ce 1a       	sub	r12, r30
     bce:	de 0a       	sbc	r13, r30
     bd0:	c0 e0       	ldi	r28, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
     bd2:	d0 e0       	ldi	r29, 0x00	; 0
     bd4:	af 2c       	mov	r10, r15
     bd6:	b1 2c       	mov	r11, r1
     bd8:	f1 e0       	ldi	r31, 0x01	; 1
     bda:	af 1a       	sub	r10, r31
     bdc:	b1 08       	sbc	r11, r1
     bde:	ac 16       	cp	r10, r28
			data[i] = i2c_readNak();
     be0:	bd 06       	cpc	r11, r29
     be2:	21 f4       	brne	.+8      	; 0xbec <mpu6050_readBytes+0x60>
     be4:	e4 d1       	rcall	.+968    	; 0xfae <i2c_readNak>
     be6:	f8 01       	movw	r30, r16
			else
			data[i] = i2c_readAck();
     be8:	80 83       	st	Z, r24
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <mpu6050_readBytes+0x66>
     bec:	c6 d1       	rcall	.+908    	; 0xf7a <i2c_readAck>
     bee:	f8 01       	movw	r30, r16
     bf0:	80 83       	st	Z, r24
     bf2:	21 96       	adiw	r28, 0x01	; 1
		i2c_start(MPU6050_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
		for(i=0; i<length; i++) {
     bf4:	0f 5f       	subi	r16, 0xFF	; 255
     bf6:	1f 4f       	sbci	r17, 0xFF	; 255
     bf8:	cc 15       	cp	r28, r12
     bfa:	dd 05       	cpc	r29, r13
			if(i==length-1)
			data[i] = i2c_readNak();
			else
			data[i] = i2c_readAck();
		}
		i2c_stop();
     bfc:	81 f7       	brne	.-32     	; 0xbde <mpu6050_readBytes+0x52>
     bfe:	cf 2d       	mov	r28, r15
     c00:	8b d1       	rcall	.+790    	; 0xf18 <i2c_stop>
	i2c_write(byteToWrite);
	i2c_stop();
}
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
	uint8_t i = 0;
	int8_t count = 0;
     c02:	01 c0       	rjmp	.+2      	; 0xc06 <mpu6050_readBytes+0x7a>
			data[i] = i2c_readAck();
		}
		i2c_stop();
	}
	return count;
}
     c04:	c0 e0       	ldi	r28, 0x00	; 0
     c06:	8c 2f       	mov	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	df 90       	pop	r13
     c14:	cf 90       	pop	r12
     c16:	bf 90       	pop	r11
     c18:	af 90       	pop	r10
     c1a:	08 95       	ret

00000c1c <mpu6050_getRawData>:
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	2e 97       	sbiw	r28, 0x0e	; 14
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
     c48:	4c 01       	movw	r8, r24
     c4a:	5b 01       	movw	r10, r22
     c4c:	6a 01       	movw	r12, r20
     c4e:	39 01       	movw	r6, r18
	uint8_t buffer[14];
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14,  buffer);
     c50:	ae 01       	movw	r20, r28
     c52:	4f 5f       	subi	r20, 0xFF	; 255
     c54:	5f 4f       	sbci	r21, 0xFF	; 255
     c56:	6e e0       	ldi	r22, 0x0E	; 14
     c58:	8b e3       	ldi	r24, 0x3B	; 59
     c5a:	98 df       	rcall	.-208    	; 0xb8c <mpu6050_readBytes>
	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	98 2f       	mov	r25, r24
     c62:	88 27       	eor	r24, r24
     c64:	2a 81       	ldd	r18, Y+2	; 0x02
     c66:	82 2b       	or	r24, r18
     c68:	f4 01       	movw	r30, r8
     c6a:	91 83       	std	Z+1, r25	; 0x01
     c6c:	80 83       	st	Z, r24
	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	98 2f       	mov	r25, r24
     c74:	88 27       	eor	r24, r24
     c76:	2c 81       	ldd	r18, Y+4	; 0x04
     c78:	82 2b       	or	r24, r18
     c7a:	f5 01       	movw	r30, r10
     c7c:	91 83       	std	Z+1, r25	; 0x01
     c7e:	80 83       	st	Z, r24
	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
     c80:	8d 81       	ldd	r24, Y+5	; 0x05
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	98 2f       	mov	r25, r24
     c86:	88 27       	eor	r24, r24
     c88:	2e 81       	ldd	r18, Y+6	; 0x06
     c8a:	82 2b       	or	r24, r18
     c8c:	f6 01       	movw	r30, r12
     c8e:	91 83       	std	Z+1, r25	; 0x01
     c90:	80 83       	st	Z, r24
	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     c92:	89 85       	ldd	r24, Y+9	; 0x09
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	98 2f       	mov	r25, r24
     c98:	88 27       	eor	r24, r24
     c9a:	2a 85       	ldd	r18, Y+10	; 0x0a
     c9c:	82 2b       	or	r24, r18
     c9e:	f3 01       	movw	r30, r6
     ca0:	91 83       	std	Z+1, r25	; 0x01
     ca2:	80 83       	st	Z, r24
	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     ca4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	98 2f       	mov	r25, r24
     caa:	88 27       	eor	r24, r24
     cac:	2c 85       	ldd	r18, Y+12	; 0x0c
     cae:	82 2b       	or	r24, r18
     cb0:	f8 01       	movw	r30, r16
     cb2:	91 83       	std	Z+1, r25	; 0x01
     cb4:	80 83       	st	Z, r24
	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     cb6:	8d 85       	ldd	r24, Y+13	; 0x0d
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	98 2f       	mov	r25, r24
     cbc:	88 27       	eor	r24, r24
     cbe:	2e 85       	ldd	r18, Y+14	; 0x0e
     cc0:	82 2b       	or	r24, r18
     cc2:	f7 01       	movw	r30, r14
     cc4:	91 83       	std	Z+1, r25	; 0x01
     cc6:	80 83       	st	Z, r24
     cc8:	2e 96       	adiw	r28, 0x0e	; 14
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	ff 90       	pop	r15
     cde:	ef 90       	pop	r14
     ce0:	df 90       	pop	r13
     ce2:	cf 90       	pop	r12
     ce4:	bf 90       	pop	r11
     ce6:	af 90       	pop	r10
     ce8:	9f 90       	pop	r9
     cea:	8f 90       	pop	r8
     cec:	7f 90       	pop	r7
     cee:	6f 90       	pop	r6
     cf0:	08 95       	ret

00000cf2 <setup_timer4>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     cf2:	e1 ea       	ldi	r30, 0xA1	; 161
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	81 60       	ori	r24, 0x01	; 1
     cfa:	80 83       	st	Z, r24
     cfc:	e0 ea       	ldi	r30, 0xA0	; 160
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	81 60       	ori	r24, 0x01	; 1
     d04:	80 83       	st	Z, r24
     d06:	80 81       	ld	r24, Z
     d08:	80 68       	ori	r24, 0x80	; 128
     d0a:	80 83       	st	Z, r24
     d0c:	80 81       	ld	r24, Z
     d0e:	80 62       	ori	r24, 0x20	; 32
     d10:	80 83       	st	Z, r24
     d12:	80 81       	ld	r24, Z
     d14:	88 60       	ori	r24, 0x08	; 8
     d16:	80 83       	st	Z, r24
     d18:	08 95       	ret

00000d1a <setup_timer5>:
     d1a:	e1 e2       	ldi	r30, 0x21	; 33
     d1c:	f1 e0       	ldi	r31, 0x01	; 1
     d1e:	80 81       	ld	r24, Z
     d20:	81 60       	ori	r24, 0x01	; 1
     d22:	80 83       	st	Z, r24
     d24:	80 81       	ld	r24, Z
     d26:	88 60       	ori	r24, 0x08	; 8
     d28:	80 83       	st	Z, r24
     d2a:	08 95       	ret

00000d2c <Enable_timer5_compare_interrupt>:
     d2c:	e3 e7       	ldi	r30, 0x73	; 115
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	82 60       	ori	r24, 0x02	; 2
     d34:	80 83       	st	Z, r24
     d36:	08 95       	ret

00000d38 <setup_timer0>:
     d38:	85 b5       	in	r24, 0x25	; 37
     d3a:	81 60       	ori	r24, 0x01	; 1
     d3c:	85 bd       	out	0x25, r24	; 37
     d3e:	85 b5       	in	r24, 0x25	; 37
     d40:	82 60       	ori	r24, 0x02	; 2
     d42:	85 bd       	out	0x25, r24	; 37
     d44:	08 95       	ret

00000d46 <Enable_timer0_overflow_interrupt>:
     d46:	ee e6       	ldi	r30, 0x6E	; 110
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	81 60       	ori	r24, 0x01	; 1
     d4e:	80 83       	st	Z, r24
     d50:	08 95       	ret

00000d52 <micros>:
     d52:	3f b7       	in	r19, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <timer0_overflow_count>
     d5a:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <timer0_overflow_count+0x1>
     d5e:	a0 91 85 03 	lds	r26, 0x0385	; 0x800385 <timer0_overflow_count+0x2>
     d62:	b0 91 86 03 	lds	r27, 0x0386	; 0x800386 <timer0_overflow_count+0x3>
     d66:	26 b5       	in	r18, 0x26	; 38
     d68:	a8 9b       	sbis	0x15, 0	; 21
     d6a:	05 c0       	rjmp	.+10     	; 0xd76 <micros+0x24>
     d6c:	2f 3f       	cpi	r18, 0xFF	; 255
     d6e:	19 f0       	breq	.+6      	; 0xd76 <micros+0x24>
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	a1 1d       	adc	r26, r1
     d74:	b1 1d       	adc	r27, r1
     d76:	3f bf       	out	0x3f, r19	; 63
     d78:	ba 2f       	mov	r27, r26
     d7a:	a9 2f       	mov	r26, r25
     d7c:	98 2f       	mov	r25, r24
     d7e:	88 27       	eor	r24, r24
     d80:	82 0f       	add	r24, r18
     d82:	91 1d       	adc	r25, r1
     d84:	a1 1d       	adc	r26, r1
     d86:	b1 1d       	adc	r27, r1
     d88:	bc 01       	movw	r22, r24
     d8a:	cd 01       	movw	r24, r26
     d8c:	66 0f       	add	r22, r22
     d8e:	77 1f       	adc	r23, r23
     d90:	88 1f       	adc	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	66 0f       	add	r22, r22
     d96:	77 1f       	adc	r23, r23
     d98:	88 1f       	adc	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	08 95       	ret

00000d9e <__vector_23>:
ISR(TIMER0_OVF_vect)//10 microsecconed timer interrupt
{
     d9e:	1f 92       	push	r1
     da0:	0f 92       	push	r0
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	0f 92       	push	r0
     da6:	11 24       	eor	r1, r1
     da8:	2f 93       	push	r18
     daa:	3f 93       	push	r19
     dac:	8f 93       	push	r24
     dae:	9f 93       	push	r25
     db0:	af 93       	push	r26
     db2:	bf 93       	push	r27
	unsigned long m = timer0_millis;
     db4:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <timer0_millis>
     db8:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <timer0_millis+0x1>
     dbc:	a0 91 81 03 	lds	r26, 0x0381	; 0x800381 <timer0_millis+0x2>
     dc0:	b0 91 82 03 	lds	r27, 0x0382	; 0x800382 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     dc4:	30 91 7e 03 	lds	r19, 0x037E	; 0x80037e <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     dc8:	23 e0       	ldi	r18, 0x03	; 3
     dca:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     dcc:	2d 37       	cpi	r18, 0x7D	; 125
     dce:	20 f4       	brcc	.+8      	; 0xdd8 <__vector_23+0x3a>
ISR(TIMER0_OVF_vect)//10 microsecconed timer interrupt
{
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	a1 1d       	adc	r26, r1
     dd4:	b1 1d       	adc	r27, r1
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     dd8:	26 e8       	ldi	r18, 0x86	; 134
     dda:	23 0f       	add	r18, r19
		m += 1;
     ddc:	02 96       	adiw	r24, 0x02	; 2
     dde:	a1 1d       	adc	r26, r1
     de0:	b1 1d       	adc	r27, r1
	}


	timer0_fract = f;
     de2:	20 93 7e 03 	sts	0x037E, r18	; 0x80037e <timer0_fract>
	timer0_millis = m;
     de6:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <timer0_millis>
     dea:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <timer0_millis+0x1>
     dee:	a0 93 81 03 	sts	0x0381, r26	; 0x800381 <timer0_millis+0x2>
     df2:	b0 93 82 03 	sts	0x0382, r27	; 0x800382 <timer0_millis+0x3>
	timer0_overflow_count++;
     df6:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <timer0_overflow_count>
     dfa:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <timer0_overflow_count+0x1>
     dfe:	a0 91 85 03 	lds	r26, 0x0385	; 0x800385 <timer0_overflow_count+0x2>
     e02:	b0 91 86 03 	lds	r27, 0x0386	; 0x800386 <timer0_overflow_count+0x3>
     e06:	01 96       	adiw	r24, 0x01	; 1
     e08:	a1 1d       	adc	r26, r1
     e0a:	b1 1d       	adc	r27, r1
     e0c:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <timer0_overflow_count>
     e10:	90 93 84 03 	sts	0x0384, r25	; 0x800384 <timer0_overflow_count+0x1>
     e14:	a0 93 85 03 	sts	0x0385, r26	; 0x800385 <timer0_overflow_count+0x2>
     e18:	b0 93 86 03 	sts	0x0386, r27	; 0x800386 <timer0_overflow_count+0x3>
}
     e1c:	bf 91       	pop	r27
     e1e:	af 91       	pop	r26
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	3f 91       	pop	r19
     e26:	2f 91       	pop	r18
     e28:	0f 90       	pop	r0
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	0f 90       	pop	r0
     e2e:	1f 90       	pop	r1
     e30:	18 95       	reti

00000e32 <__vector_47>:

ISR(TIMER5_COMPA_vect)//motor update interrupt routine
{
     e32:	1f 92       	push	r1
     e34:	0f 92       	push	r0
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	0f 92       	push	r0
     e3a:	11 24       	eor	r1, r1
     e3c:	0b b6       	in	r0, 0x3b	; 59
     e3e:	0f 92       	push	r0
     e40:	2f 93       	push	r18
     e42:	3f 93       	push	r19
     e44:	4f 93       	push	r20
     e46:	5f 93       	push	r21
     e48:	6f 93       	push	r22
     e4a:	7f 93       	push	r23
     e4c:	8f 93       	push	r24
     e4e:	9f 93       	push	r25
     e50:	af 93       	push	r26
     e52:	bf 93       	push	r27
     e54:	ef 93       	push	r30
	PWM_update();
     e56:	ff 93       	push	r31
     e58:	b6 d9       	rcall	.-3220   	; 0x1c6 <PWM_update>
     e5a:	ff 91       	pop	r31
     e5c:	ef 91       	pop	r30
     e5e:	bf 91       	pop	r27
     e60:	af 91       	pop	r26
     e62:	9f 91       	pop	r25
     e64:	8f 91       	pop	r24
     e66:	7f 91       	pop	r23
     e68:	6f 91       	pop	r22
     e6a:	5f 91       	pop	r21
     e6c:	4f 91       	pop	r20
     e6e:	3f 91       	pop	r19
     e70:	2f 91       	pop	r18
     e72:	0f 90       	pop	r0
     e74:	0b be       	out	0x3b, r0	; 59
     e76:	0f 90       	pop	r0
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	0f 90       	pop	r0
     e7c:	1f 90       	pop	r1
     e7e:	18 95       	reti

00000e80 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     e80:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     e84:	8c e0       	ldi	r24, 0x0C	; 12
     e86:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     e8a:	08 95       	ret

00000e8c <i2c_start>:
     e8c:	94 ea       	ldi	r25, 0xA4	; 164
     e8e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     e92:	4f ef       	ldi	r20, 0xFF	; 255
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	ec eb       	ldi	r30, 0xBC	; 188
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	90 81       	ld	r25, Z
     ea0:	99 23       	and	r25, r25
     ea2:	34 f0       	brlt	.+12     	; 0xeb0 <i2c_start+0x24>
     ea4:	41 50       	subi	r20, 0x01	; 1
     ea6:	51 09       	sbc	r21, r1
     ea8:	61 09       	sbc	r22, r1
     eaa:	71 09       	sbc	r23, r1
     eac:	c0 f7       	brcc	.-16     	; 0xe9e <i2c_start+0x12>
     eae:	04 c0       	rjmp	.+8      	; 0xeb8 <i2c_start+0x2c>
     eb0:	45 2b       	or	r20, r21
     eb2:	46 2b       	or	r20, r22
     eb4:	47 2b       	or	r20, r23
     eb6:	41 f1       	breq	.+80     	; 0xf08 <i2c_start+0x7c>
     eb8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     ebc:	98 7f       	andi	r25, 0xF8	; 248
     ebe:	98 30       	cpi	r25, 0x08	; 8
     ec0:	11 f0       	breq	.+4      	; 0xec6 <i2c_start+0x3a>
     ec2:	90 31       	cpi	r25, 0x10	; 16
     ec4:	19 f5       	brne	.+70     	; 0xf0c <i2c_start+0x80>
     ec6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     eca:	84 e8       	ldi	r24, 0x84	; 132
     ecc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     ed0:	8f ef       	ldi	r24, 0xFF	; 255
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	a0 e0       	ldi	r26, 0x00	; 0
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	ec eb       	ldi	r30, 0xBC	; 188
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	20 81       	ld	r18, Z
     ede:	22 23       	and	r18, r18
     ee0:	2c f0       	brlt	.+10     	; 0xeec <i2c_start+0x60>
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	a1 09       	sbc	r26, r1
     ee6:	b1 09       	sbc	r27, r1
     ee8:	c8 f7       	brcc	.-14     	; 0xedc <i2c_start+0x50>
     eea:	04 c0       	rjmp	.+8      	; 0xef4 <i2c_start+0x68>
     eec:	89 2b       	or	r24, r25
     eee:	8a 2b       	or	r24, r26
     ef0:	8b 2b       	or	r24, r27
     ef2:	71 f0       	breq	.+28     	; 0xf10 <i2c_start+0x84>
     ef4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     ef8:	98 7f       	andi	r25, 0xF8	; 248
     efa:	98 31       	cpi	r25, 0x18	; 24
     efc:	59 f0       	breq	.+22     	; 0xf14 <i2c_start+0x88>
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 34       	cpi	r25, 0x40	; 64
     f02:	49 f4       	brne	.+18     	; 0xf16 <i2c_start+0x8a>
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	08 95       	ret
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	08 95       	ret
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	08 95       	ret
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	08 95       	ret
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	08 95       	ret

00000f18 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     f18:	84 e9       	ldi	r24, 0x94	; 148
     f1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	ec eb       	ldi	r30, 0xBC	; 188
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	20 81       	ld	r18, Z
     f28:	24 ff       	sbrs	r18, 4
     f2a:	05 c0       	rjmp	.+10     	; 0xf36 <i2c_stop+0x1e>
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	81 15       	cp	r24, r1
     f30:	21 e0       	ldi	r18, 0x01	; 1
     f32:	92 07       	cpc	r25, r18
     f34:	c1 f7       	brne	.-16     	; 0xf26 <i2c_stop+0xe>
     f36:	08 95       	ret

00000f38 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     f38:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     f3c:	84 e8       	ldi	r24, 0x84	; 132
     f3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     f42:	8f ef       	ldi	r24, 0xFF	; 255
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	a0 e0       	ldi	r26, 0x00	; 0
     f48:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     f4a:	ec eb       	ldi	r30, 0xBC	; 188
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	20 81       	ld	r18, Z
     f50:	22 23       	and	r18, r18
     f52:	2c f0       	brlt	.+10     	; 0xf5e <i2c_write+0x26>
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	a1 09       	sbc	r26, r1
     f58:	b1 09       	sbc	r27, r1
     f5a:	c8 f7       	brcc	.-14     	; 0xf4e <i2c_write+0x16>
     f5c:	04 c0       	rjmp	.+8      	; 0xf66 <i2c_write+0x2e>
	if(i2c_timer == 0)
     f5e:	89 2b       	or	r24, r25
     f60:	8a 2b       	or	r24, r26
     f62:	8b 2b       	or	r24, r27
     f64:	41 f0       	breq	.+16     	; 0xf76 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     f66:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     f6a:	98 7f       	andi	r25, 0xF8	; 248
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	98 32       	cpi	r25, 0x28	; 40
     f70:	19 f4       	brne	.+6      	; 0xf78 <i2c_write+0x40>
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	08 95       	ret
     f76:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     f78:	08 95       	ret

00000f7a <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     f7a:	84 ec       	ldi	r24, 0xC4	; 196
     f7c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
     f80:	8f ef       	ldi	r24, 0xFF	; 255
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	a0 e0       	ldi	r26, 0x00	; 0
     f86:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     f88:	ec eb       	ldi	r30, 0xBC	; 188
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	20 81       	ld	r18, Z
     f8e:	22 23       	and	r18, r18
     f90:	2c f0       	brlt	.+10     	; 0xf9c <i2c_readAck+0x22>
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	a1 09       	sbc	r26, r1
     f96:	b1 09       	sbc	r27, r1
     f98:	c8 f7       	brcc	.-14     	; 0xf8c <i2c_readAck+0x12>
     f9a:	04 c0       	rjmp	.+8      	; 0xfa4 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     f9c:	89 2b       	or	r24, r25
     f9e:	8a 2b       	or	r24, r26
     fa0:	8b 2b       	or	r24, r27
     fa2:	19 f0       	breq	.+6      	; 0xfaa <i2c_readAck+0x30>
		return 0;

    return TWDR;
     fa4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     fa8:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     faa:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     fac:	08 95       	ret

00000fae <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     fae:	84 e8       	ldi	r24, 0x84	; 132
     fb0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
     fb4:	8f ef       	ldi	r24, 0xFF	; 255
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a0 e0       	ldi	r26, 0x00	; 0
     fba:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     fbc:	ec eb       	ldi	r30, 0xBC	; 188
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	20 81       	ld	r18, Z
     fc2:	22 23       	and	r18, r18
     fc4:	2c f0       	brlt	.+10     	; 0xfd0 <i2c_readNak+0x22>
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	a1 09       	sbc	r26, r1
     fca:	b1 09       	sbc	r27, r1
     fcc:	c8 f7       	brcc	.-14     	; 0xfc0 <i2c_readNak+0x12>
     fce:	04 c0       	rjmp	.+8      	; 0xfd8 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     fd0:	89 2b       	or	r24, r25
     fd2:	8a 2b       	or	r24, r26
     fd4:	8b 2b       	or	r24, r27
     fd6:	19 f0       	breq	.+6      	; 0xfde <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     fd8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     fdc:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     fde:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     fe0:	08 95       	ret

00000fe2 <USART_Init>:
{
	char c[10];
	itoa(*value, c, 10);
	printf(c);
	printf("\n");
}
     fe2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     fe6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     fea:	88 e0       	ldi	r24, 0x08	; 8
     fec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     ff0:	8e e0       	ldi	r24, 0x0E	; 14
     ff2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     ff6:	08 95       	ret

00000ff8 <print16>:
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	2a 97       	sbiw	r28, 0x0a	; 10
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
    1010:	4a e0       	ldi	r20, 0x0A	; 10
    1012:	8e 01       	movw	r16, r28
    1014:	0f 5f       	subi	r16, 0xFF	; 255
    1016:	1f 4f       	sbci	r17, 0xFF	; 255
    1018:	b8 01       	movw	r22, r16
    101a:	fc 01       	movw	r30, r24
    101c:	80 81       	ld	r24, Z
    101e:	91 81       	ldd	r25, Z+1	; 0x01
    1020:	1f d4       	rcall	.+2110   	; 0x1860 <__itoa_ncheck>
    1022:	1f 93       	push	r17
    1024:	0f 93       	push	r16
    1026:	89 d4       	rcall	.+2322   	; 0x193a <printf>
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	2a 96       	adiw	r28, 0x0a	; 10
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	1f 91       	pop	r17
    103e:	0f 91       	pop	r16
    1040:	08 95       	ret

00001042 <uart_putchar>:

int uart_putchar(char c, FILE *stream)
{
    1042:	cf 93       	push	r28
    1044:	c8 2f       	mov	r28, r24
	if (c == '\n')
    1046:	8a 30       	cpi	r24, 0x0A	; 10
    1048:	11 f4       	brne	.+4      	; 0x104e <uart_putchar+0xc>
	uart_putchar('\r', stream);
    104a:	8d e0       	ldi	r24, 0x0D	; 13
    104c:	fa df       	rcall	.-12     	; 0x1042 <uart_putchar>
	while (!( UCSR0A & (1<<UDRE0)));
    104e:	e0 ec       	ldi	r30, 0xC0	; 192
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	85 ff       	sbrs	r24, 5
    1056:	fd cf       	rjmp	.-6      	; 0x1052 <uart_putchar+0x10>

	UDR0 = c;
    1058:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	return 0;
}
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret

00001064 <printSI>:
void printSI(char c[20],int16_t intToPrint)
{
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	1f 92       	push	r1
    106a:	1f 92       	push	r1
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	7a 83       	std	Y+2, r23	; 0x02
    1072:	69 83       	std	Y+1, r22	; 0x01
	printf(c);
    1074:	9f 93       	push	r25
    1076:	8f 93       	push	r24
    1078:	60 d4       	rcall	.+2240   	; 0x193a <printf>
	//printf(" ");
	print16(&intToPrint);
    107a:	ce 01       	movw	r24, r28
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	bc df       	rcall	.-136    	; 0xff8 <print16>
	printf("  ");
    1080:	85 e7       	ldi	r24, 0x75	; 117
    1082:	93 e0       	ldi	r25, 0x03	; 3
    1084:	9f 93       	push	r25
    1086:	8f 93       	push	r24
    1088:	58 d4       	rcall	.+2224   	; 0x193a <printf>
}
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	08 95       	ret

0000109c <printDouble>:
void printDouble(double *value)
{
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	64 97       	sbiw	r28, 0x14	; 20
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
	char c[20]={0};
    10b4:	8e 01       	movw	r16, r28
    10b6:	0f 5f       	subi	r16, 0xFF	; 255
    10b8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ba:	84 e1       	ldi	r24, 0x14	; 20
    10bc:	f8 01       	movw	r30, r16
    10be:	11 92       	st	Z+, r1
    10c0:	8a 95       	dec	r24
    10c2:	e9 f7       	brne	.-6      	; 0x10be <printDouble+0x22>
	double val=90.2312;     // string to print to and transmit
	sprintf(c, "%f", val);
    10c4:	82 e4       	ldi	r24, 0x42	; 66
    10c6:	8f 93       	push	r24
    10c8:	84 eb       	ldi	r24, 0xB4	; 180
    10ca:	8f 93       	push	r24
    10cc:	86 e7       	ldi	r24, 0x76	; 118
    10ce:	8f 93       	push	r24
    10d0:	80 e6       	ldi	r24, 0x60	; 96
    10d2:	8f 93       	push	r24
    10d4:	88 e7       	ldi	r24, 0x78	; 120
    10d6:	93 e0       	ldi	r25, 0x03	; 3
    10d8:	9f 93       	push	r25
    10da:	8f 93       	push	r24
    10dc:	1f 93       	push	r17
    10de:	0f 93       	push	r16
    10e0:	44 d4       	rcall	.+2184   	; 0x196a <sprintf>
	printf(c);
    10e2:	1f 93       	push	r17
    10e4:	0f 93       	push	r16
    10e6:	29 d4       	rcall	.+2130   	; 0x193a <printf>
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	f8 94       	cli
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	cd bf       	out	0x3d, r28	; 61
    10f2:	64 96       	adiw	r28, 0x14	; 20
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	cd bf       	out	0x3d, r28	; 61
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	1f 91       	pop	r17
    1104:	0f 91       	pop	r16
    1106:	08 95       	ret

00001108 <__subsf3>:
    1108:	50 58       	subi	r21, 0x80	; 128

0000110a <__addsf3>:
    110a:	bb 27       	eor	r27, r27
    110c:	aa 27       	eor	r26, r26
    110e:	0e d0       	rcall	.+28     	; 0x112c <__addsf3x>
    1110:	3f c2       	rjmp	.+1150   	; 0x1590 <__fp_round>
    1112:	30 d2       	rcall	.+1120   	; 0x1574 <__fp_pscA>
    1114:	30 f0       	brcs	.+12     	; 0x1122 <__addsf3+0x18>
    1116:	35 d2       	rcall	.+1130   	; 0x1582 <__fp_pscB>
    1118:	20 f0       	brcs	.+8      	; 0x1122 <__addsf3+0x18>
    111a:	31 f4       	brne	.+12     	; 0x1128 <__addsf3+0x1e>
    111c:	9f 3f       	cpi	r25, 0xFF	; 255
    111e:	11 f4       	brne	.+4      	; 0x1124 <__addsf3+0x1a>
    1120:	1e f4       	brtc	.+6      	; 0x1128 <__addsf3+0x1e>
    1122:	ef c1       	rjmp	.+990    	; 0x1502 <__fp_nan>
    1124:	0e f4       	brtc	.+2      	; 0x1128 <__addsf3+0x1e>
    1126:	e0 95       	com	r30
    1128:	e7 fb       	bst	r30, 7
    112a:	e5 c1       	rjmp	.+970    	; 0x14f6 <__fp_inf>

0000112c <__addsf3x>:
    112c:	e9 2f       	mov	r30, r25
    112e:	41 d2       	rcall	.+1154   	; 0x15b2 <__fp_split3>
    1130:	80 f3       	brcs	.-32     	; 0x1112 <__addsf3+0x8>
    1132:	ba 17       	cp	r27, r26
    1134:	62 07       	cpc	r22, r18
    1136:	73 07       	cpc	r23, r19
    1138:	84 07       	cpc	r24, r20
    113a:	95 07       	cpc	r25, r21
    113c:	18 f0       	brcs	.+6      	; 0x1144 <__addsf3x+0x18>
    113e:	71 f4       	brne	.+28     	; 0x115c <__addsf3x+0x30>
    1140:	9e f5       	brtc	.+102    	; 0x11a8 <__addsf3x+0x7c>
    1142:	59 c2       	rjmp	.+1202   	; 0x15f6 <__fp_zero>
    1144:	0e f4       	brtc	.+2      	; 0x1148 <__addsf3x+0x1c>
    1146:	e0 95       	com	r30
    1148:	0b 2e       	mov	r0, r27
    114a:	ba 2f       	mov	r27, r26
    114c:	a0 2d       	mov	r26, r0
    114e:	0b 01       	movw	r0, r22
    1150:	b9 01       	movw	r22, r18
    1152:	90 01       	movw	r18, r0
    1154:	0c 01       	movw	r0, r24
    1156:	ca 01       	movw	r24, r20
    1158:	a0 01       	movw	r20, r0
    115a:	11 24       	eor	r1, r1
    115c:	ff 27       	eor	r31, r31
    115e:	59 1b       	sub	r21, r25
    1160:	99 f0       	breq	.+38     	; 0x1188 <__addsf3x+0x5c>
    1162:	59 3f       	cpi	r21, 0xF9	; 249
    1164:	50 f4       	brcc	.+20     	; 0x117a <__addsf3x+0x4e>
    1166:	50 3e       	cpi	r21, 0xE0	; 224
    1168:	68 f1       	brcs	.+90     	; 0x11c4 <__addsf3x+0x98>
    116a:	1a 16       	cp	r1, r26
    116c:	f0 40       	sbci	r31, 0x00	; 0
    116e:	a2 2f       	mov	r26, r18
    1170:	23 2f       	mov	r18, r19
    1172:	34 2f       	mov	r19, r20
    1174:	44 27       	eor	r20, r20
    1176:	58 5f       	subi	r21, 0xF8	; 248
    1178:	f3 cf       	rjmp	.-26     	; 0x1160 <__addsf3x+0x34>
    117a:	46 95       	lsr	r20
    117c:	37 95       	ror	r19
    117e:	27 95       	ror	r18
    1180:	a7 95       	ror	r26
    1182:	f0 40       	sbci	r31, 0x00	; 0
    1184:	53 95       	inc	r21
    1186:	c9 f7       	brne	.-14     	; 0x117a <__addsf3x+0x4e>
    1188:	7e f4       	brtc	.+30     	; 0x11a8 <__addsf3x+0x7c>
    118a:	1f 16       	cp	r1, r31
    118c:	ba 0b       	sbc	r27, r26
    118e:	62 0b       	sbc	r22, r18
    1190:	73 0b       	sbc	r23, r19
    1192:	84 0b       	sbc	r24, r20
    1194:	ba f0       	brmi	.+46     	; 0x11c4 <__addsf3x+0x98>
    1196:	91 50       	subi	r25, 0x01	; 1
    1198:	a1 f0       	breq	.+40     	; 0x11c2 <__addsf3x+0x96>
    119a:	ff 0f       	add	r31, r31
    119c:	bb 1f       	adc	r27, r27
    119e:	66 1f       	adc	r22, r22
    11a0:	77 1f       	adc	r23, r23
    11a2:	88 1f       	adc	r24, r24
    11a4:	c2 f7       	brpl	.-16     	; 0x1196 <__addsf3x+0x6a>
    11a6:	0e c0       	rjmp	.+28     	; 0x11c4 <__addsf3x+0x98>
    11a8:	ba 0f       	add	r27, r26
    11aa:	62 1f       	adc	r22, r18
    11ac:	73 1f       	adc	r23, r19
    11ae:	84 1f       	adc	r24, r20
    11b0:	48 f4       	brcc	.+18     	; 0x11c4 <__addsf3x+0x98>
    11b2:	87 95       	ror	r24
    11b4:	77 95       	ror	r23
    11b6:	67 95       	ror	r22
    11b8:	b7 95       	ror	r27
    11ba:	f7 95       	ror	r31
    11bc:	9e 3f       	cpi	r25, 0xFE	; 254
    11be:	08 f0       	brcs	.+2      	; 0x11c2 <__addsf3x+0x96>
    11c0:	b3 cf       	rjmp	.-154    	; 0x1128 <__addsf3+0x1e>
    11c2:	93 95       	inc	r25
    11c4:	88 0f       	add	r24, r24
    11c6:	08 f0       	brcs	.+2      	; 0x11ca <__addsf3x+0x9e>
    11c8:	99 27       	eor	r25, r25
    11ca:	ee 0f       	add	r30, r30
    11cc:	97 95       	ror	r25
    11ce:	87 95       	ror	r24
    11d0:	08 95       	ret

000011d2 <asin>:
    11d2:	9f 93       	push	r25
    11d4:	9f 77       	andi	r25, 0x7F	; 127
    11d6:	ee e3       	ldi	r30, 0x3E	; 62
    11d8:	89 37       	cpi	r24, 0x79	; 121
    11da:	9e 07       	cpc	r25, r30
    11dc:	20 f4       	brcc	.+8      	; 0x11e6 <asin+0x14>
    11de:	e4 ee       	ldi	r30, 0xE4	; 228
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	b7 d1       	rcall	.+878    	; 0x1552 <__fp_powsodd>
    11e4:	09 c0       	rjmp	.+18     	; 0x11f8 <asin+0x26>
    11e6:	48 d1       	rcall	.+656    	; 0x1478 <__fp_arccos>
    11e8:	90 58       	subi	r25, 0x80	; 128
    11ea:	a2 ea       	ldi	r26, 0xA2	; 162
    11ec:	2a ed       	ldi	r18, 0xDA	; 218
    11ee:	3f e0       	ldi	r19, 0x0F	; 15
    11f0:	49 ec       	ldi	r20, 0xC9	; 201
    11f2:	5f e3       	ldi	r21, 0x3F	; 63
    11f4:	9b df       	rcall	.-202    	; 0x112c <__addsf3x>
    11f6:	cc d1       	rcall	.+920    	; 0x1590 <__fp_round>
    11f8:	0f 90       	pop	r0
    11fa:	07 fc       	sbrc	r0, 7
    11fc:	90 58       	subi	r25, 0x80	; 128
    11fe:	08 95       	ret
    1200:	b9 d1       	rcall	.+882    	; 0x1574 <__fp_pscA>
    1202:	58 f0       	brcs	.+22     	; 0x121a <asin+0x48>
    1204:	80 e8       	ldi	r24, 0x80	; 128
    1206:	91 e0       	ldi	r25, 0x01	; 1
    1208:	09 f4       	brne	.+2      	; 0x120c <asin+0x3a>
    120a:	9e ef       	ldi	r25, 0xFE	; 254
    120c:	ba d1       	rcall	.+884    	; 0x1582 <__fp_pscB>
    120e:	28 f0       	brcs	.+10     	; 0x121a <asin+0x48>
    1210:	40 e8       	ldi	r20, 0x80	; 128
    1212:	51 e0       	ldi	r21, 0x01	; 1
    1214:	59 f4       	brne	.+22     	; 0x122c <atan2+0xe>
    1216:	5e ef       	ldi	r21, 0xFE	; 254
    1218:	09 c0       	rjmp	.+18     	; 0x122c <atan2+0xe>
    121a:	73 c1       	rjmp	.+742    	; 0x1502 <__fp_nan>
    121c:	ec c1       	rjmp	.+984    	; 0x15f6 <__fp_zero>

0000121e <atan2>:
    121e:	e9 2f       	mov	r30, r25
    1220:	e0 78       	andi	r30, 0x80	; 128
    1222:	c7 d1       	rcall	.+910    	; 0x15b2 <__fp_split3>
    1224:	68 f3       	brcs	.-38     	; 0x1200 <asin+0x2e>
    1226:	09 2e       	mov	r0, r25
    1228:	05 2a       	or	r0, r21
    122a:	c1 f3       	breq	.-16     	; 0x121c <asin+0x4a>
    122c:	26 17       	cp	r18, r22
    122e:	37 07       	cpc	r19, r23
    1230:	48 07       	cpc	r20, r24
    1232:	59 07       	cpc	r21, r25
    1234:	38 f0       	brcs	.+14     	; 0x1244 <atan2+0x26>
    1236:	0e 2e       	mov	r0, r30
    1238:	07 f8       	bld	r0, 7
    123a:	e0 25       	eor	r30, r0
    123c:	69 f0       	breq	.+26     	; 0x1258 <atan2+0x3a>
    123e:	e0 25       	eor	r30, r0
    1240:	e0 64       	ori	r30, 0x40	; 64
    1242:	0a c0       	rjmp	.+20     	; 0x1258 <atan2+0x3a>
    1244:	ef 63       	ori	r30, 0x3F	; 63
    1246:	07 f8       	bld	r0, 7
    1248:	00 94       	com	r0
    124a:	07 fa       	bst	r0, 7
    124c:	db 01       	movw	r26, r22
    124e:	b9 01       	movw	r22, r18
    1250:	9d 01       	movw	r18, r26
    1252:	dc 01       	movw	r26, r24
    1254:	ca 01       	movw	r24, r20
    1256:	ad 01       	movw	r20, r26
    1258:	ef 93       	push	r30
    125a:	47 d0       	rcall	.+142    	; 0x12ea <__divsf3_pse>
    125c:	99 d1       	rcall	.+818    	; 0x1590 <__fp_round>
    125e:	0a d0       	rcall	.+20     	; 0x1274 <atan>
    1260:	5f 91       	pop	r21
    1262:	55 23       	and	r21, r21
    1264:	31 f0       	breq	.+12     	; 0x1272 <atan2+0x54>
    1266:	2b ed       	ldi	r18, 0xDB	; 219
    1268:	3f e0       	ldi	r19, 0x0F	; 15
    126a:	49 e4       	ldi	r20, 0x49	; 73
    126c:	50 fd       	sbrc	r21, 0
    126e:	49 ec       	ldi	r20, 0xC9	; 201
    1270:	4c cf       	rjmp	.-360    	; 0x110a <__addsf3>
    1272:	08 95       	ret

00001274 <atan>:
    1274:	df 93       	push	r29
    1276:	dd 27       	eor	r29, r29
    1278:	b9 2f       	mov	r27, r25
    127a:	bf 77       	andi	r27, 0x7F	; 127
    127c:	40 e8       	ldi	r20, 0x80	; 128
    127e:	5f e3       	ldi	r21, 0x3F	; 63
    1280:	16 16       	cp	r1, r22
    1282:	17 06       	cpc	r1, r23
    1284:	48 07       	cpc	r20, r24
    1286:	5b 07       	cpc	r21, r27
    1288:	10 f4       	brcc	.+4      	; 0x128e <atan+0x1a>
    128a:	d9 2f       	mov	r29, r25
    128c:	bf d1       	rcall	.+894    	; 0x160c <inverse>
    128e:	9f 93       	push	r25
    1290:	8f 93       	push	r24
    1292:	7f 93       	push	r23
    1294:	6f 93       	push	r22
    1296:	6c d2       	rcall	.+1240   	; 0x1770 <square>
    1298:	e8 ef       	ldi	r30, 0xF8	; 248
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	35 d1       	rcall	.+618    	; 0x1508 <__fp_powser>
    129e:	78 d1       	rcall	.+752    	; 0x1590 <__fp_round>
    12a0:	2f 91       	pop	r18
    12a2:	3f 91       	pop	r19
    12a4:	4f 91       	pop	r20
    12a6:	5f 91       	pop	r21
    12a8:	c4 d1       	rcall	.+904    	; 0x1632 <__mulsf3x>
    12aa:	dd 23       	and	r29, r29
    12ac:	49 f0       	breq	.+18     	; 0x12c0 <atan+0x4c>
    12ae:	90 58       	subi	r25, 0x80	; 128
    12b0:	a2 ea       	ldi	r26, 0xA2	; 162
    12b2:	2a ed       	ldi	r18, 0xDA	; 218
    12b4:	3f e0       	ldi	r19, 0x0F	; 15
    12b6:	49 ec       	ldi	r20, 0xC9	; 201
    12b8:	5f e3       	ldi	r21, 0x3F	; 63
    12ba:	d0 78       	andi	r29, 0x80	; 128
    12bc:	5d 27       	eor	r21, r29
    12be:	36 df       	rcall	.-404    	; 0x112c <__addsf3x>
    12c0:	df 91       	pop	r29
    12c2:	66 c1       	rjmp	.+716    	; 0x1590 <__fp_round>

000012c4 <__cmpsf2>:
    12c4:	f4 d0       	rcall	.+488    	; 0x14ae <__fp_cmp>
    12c6:	08 f4       	brcc	.+2      	; 0x12ca <__cmpsf2+0x6>
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	08 95       	ret

000012cc <__divsf3>:
    12cc:	0c d0       	rcall	.+24     	; 0x12e6 <__divsf3x>
    12ce:	60 c1       	rjmp	.+704    	; 0x1590 <__fp_round>
    12d0:	58 d1       	rcall	.+688    	; 0x1582 <__fp_pscB>
    12d2:	40 f0       	brcs	.+16     	; 0x12e4 <__divsf3+0x18>
    12d4:	4f d1       	rcall	.+670    	; 0x1574 <__fp_pscA>
    12d6:	30 f0       	brcs	.+12     	; 0x12e4 <__divsf3+0x18>
    12d8:	21 f4       	brne	.+8      	; 0x12e2 <__divsf3+0x16>
    12da:	5f 3f       	cpi	r21, 0xFF	; 255
    12dc:	19 f0       	breq	.+6      	; 0x12e4 <__divsf3+0x18>
    12de:	0b c1       	rjmp	.+534    	; 0x14f6 <__fp_inf>
    12e0:	51 11       	cpse	r21, r1
    12e2:	8a c1       	rjmp	.+788    	; 0x15f8 <__fp_szero>
    12e4:	0e c1       	rjmp	.+540    	; 0x1502 <__fp_nan>

000012e6 <__divsf3x>:
    12e6:	65 d1       	rcall	.+714    	; 0x15b2 <__fp_split3>
    12e8:	98 f3       	brcs	.-26     	; 0x12d0 <__divsf3+0x4>

000012ea <__divsf3_pse>:
    12ea:	99 23       	and	r25, r25
    12ec:	c9 f3       	breq	.-14     	; 0x12e0 <__divsf3+0x14>
    12ee:	55 23       	and	r21, r21
    12f0:	b1 f3       	breq	.-20     	; 0x12de <__divsf3+0x12>
    12f2:	95 1b       	sub	r25, r21
    12f4:	55 0b       	sbc	r21, r21
    12f6:	bb 27       	eor	r27, r27
    12f8:	aa 27       	eor	r26, r26
    12fa:	62 17       	cp	r22, r18
    12fc:	73 07       	cpc	r23, r19
    12fe:	84 07       	cpc	r24, r20
    1300:	38 f0       	brcs	.+14     	; 0x1310 <__divsf3_pse+0x26>
    1302:	9f 5f       	subi	r25, 0xFF	; 255
    1304:	5f 4f       	sbci	r21, 0xFF	; 255
    1306:	22 0f       	add	r18, r18
    1308:	33 1f       	adc	r19, r19
    130a:	44 1f       	adc	r20, r20
    130c:	aa 1f       	adc	r26, r26
    130e:	a9 f3       	breq	.-22     	; 0x12fa <__divsf3_pse+0x10>
    1310:	33 d0       	rcall	.+102    	; 0x1378 <__divsf3_pse+0x8e>
    1312:	0e 2e       	mov	r0, r30
    1314:	3a f0       	brmi	.+14     	; 0x1324 <__divsf3_pse+0x3a>
    1316:	e0 e8       	ldi	r30, 0x80	; 128
    1318:	30 d0       	rcall	.+96     	; 0x137a <__divsf3_pse+0x90>
    131a:	91 50       	subi	r25, 0x01	; 1
    131c:	50 40       	sbci	r21, 0x00	; 0
    131e:	e6 95       	lsr	r30
    1320:	00 1c       	adc	r0, r0
    1322:	ca f7       	brpl	.-14     	; 0x1316 <__divsf3_pse+0x2c>
    1324:	29 d0       	rcall	.+82     	; 0x1378 <__divsf3_pse+0x8e>
    1326:	fe 2f       	mov	r31, r30
    1328:	27 d0       	rcall	.+78     	; 0x1378 <__divsf3_pse+0x8e>
    132a:	66 0f       	add	r22, r22
    132c:	77 1f       	adc	r23, r23
    132e:	88 1f       	adc	r24, r24
    1330:	bb 1f       	adc	r27, r27
    1332:	26 17       	cp	r18, r22
    1334:	37 07       	cpc	r19, r23
    1336:	48 07       	cpc	r20, r24
    1338:	ab 07       	cpc	r26, r27
    133a:	b0 e8       	ldi	r27, 0x80	; 128
    133c:	09 f0       	breq	.+2      	; 0x1340 <__divsf3_pse+0x56>
    133e:	bb 0b       	sbc	r27, r27
    1340:	80 2d       	mov	r24, r0
    1342:	bf 01       	movw	r22, r30
    1344:	ff 27       	eor	r31, r31
    1346:	93 58       	subi	r25, 0x83	; 131
    1348:	5f 4f       	sbci	r21, 0xFF	; 255
    134a:	2a f0       	brmi	.+10     	; 0x1356 <__divsf3_pse+0x6c>
    134c:	9e 3f       	cpi	r25, 0xFE	; 254
    134e:	51 05       	cpc	r21, r1
    1350:	68 f0       	brcs	.+26     	; 0x136c <__divsf3_pse+0x82>
    1352:	d1 c0       	rjmp	.+418    	; 0x14f6 <__fp_inf>
    1354:	51 c1       	rjmp	.+674    	; 0x15f8 <__fp_szero>
    1356:	5f 3f       	cpi	r21, 0xFF	; 255
    1358:	ec f3       	brlt	.-6      	; 0x1354 <__divsf3_pse+0x6a>
    135a:	98 3e       	cpi	r25, 0xE8	; 232
    135c:	dc f3       	brlt	.-10     	; 0x1354 <__divsf3_pse+0x6a>
    135e:	86 95       	lsr	r24
    1360:	77 95       	ror	r23
    1362:	67 95       	ror	r22
    1364:	b7 95       	ror	r27
    1366:	f7 95       	ror	r31
    1368:	9f 5f       	subi	r25, 0xFF	; 255
    136a:	c9 f7       	brne	.-14     	; 0x135e <__divsf3_pse+0x74>
    136c:	88 0f       	add	r24, r24
    136e:	91 1d       	adc	r25, r1
    1370:	96 95       	lsr	r25
    1372:	87 95       	ror	r24
    1374:	97 f9       	bld	r25, 7
    1376:	08 95       	ret
    1378:	e1 e0       	ldi	r30, 0x01	; 1
    137a:	66 0f       	add	r22, r22
    137c:	77 1f       	adc	r23, r23
    137e:	88 1f       	adc	r24, r24
    1380:	bb 1f       	adc	r27, r27
    1382:	62 17       	cp	r22, r18
    1384:	73 07       	cpc	r23, r19
    1386:	84 07       	cpc	r24, r20
    1388:	ba 07       	cpc	r27, r26
    138a:	20 f0       	brcs	.+8      	; 0x1394 <__divsf3_pse+0xaa>
    138c:	62 1b       	sub	r22, r18
    138e:	73 0b       	sbc	r23, r19
    1390:	84 0b       	sbc	r24, r20
    1392:	ba 0b       	sbc	r27, r26
    1394:	ee 1f       	adc	r30, r30
    1396:	88 f7       	brcc	.-30     	; 0x137a <__divsf3_pse+0x90>
    1398:	e0 95       	com	r30
    139a:	08 95       	ret

0000139c <__fixsfsi>:
    139c:	04 d0       	rcall	.+8      	; 0x13a6 <__fixunssfsi>
    139e:	68 94       	set
    13a0:	b1 11       	cpse	r27, r1
    13a2:	2a c1       	rjmp	.+596    	; 0x15f8 <__fp_szero>
    13a4:	08 95       	ret

000013a6 <__fixunssfsi>:
    13a6:	0d d1       	rcall	.+538    	; 0x15c2 <__fp_splitA>
    13a8:	88 f0       	brcs	.+34     	; 0x13cc <__fixunssfsi+0x26>
    13aa:	9f 57       	subi	r25, 0x7F	; 127
    13ac:	90 f0       	brcs	.+36     	; 0x13d2 <__fixunssfsi+0x2c>
    13ae:	b9 2f       	mov	r27, r25
    13b0:	99 27       	eor	r25, r25
    13b2:	b7 51       	subi	r27, 0x17	; 23
    13b4:	a0 f0       	brcs	.+40     	; 0x13de <__fixunssfsi+0x38>
    13b6:	d1 f0       	breq	.+52     	; 0x13ec <__fixunssfsi+0x46>
    13b8:	66 0f       	add	r22, r22
    13ba:	77 1f       	adc	r23, r23
    13bc:	88 1f       	adc	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	1a f0       	brmi	.+6      	; 0x13c8 <__fixunssfsi+0x22>
    13c2:	ba 95       	dec	r27
    13c4:	c9 f7       	brne	.-14     	; 0x13b8 <__fixunssfsi+0x12>
    13c6:	12 c0       	rjmp	.+36     	; 0x13ec <__fixunssfsi+0x46>
    13c8:	b1 30       	cpi	r27, 0x01	; 1
    13ca:	81 f0       	breq	.+32     	; 0x13ec <__fixunssfsi+0x46>
    13cc:	14 d1       	rcall	.+552    	; 0x15f6 <__fp_zero>
    13ce:	b1 e0       	ldi	r27, 0x01	; 1
    13d0:	08 95       	ret
    13d2:	11 c1       	rjmp	.+546    	; 0x15f6 <__fp_zero>
    13d4:	67 2f       	mov	r22, r23
    13d6:	78 2f       	mov	r23, r24
    13d8:	88 27       	eor	r24, r24
    13da:	b8 5f       	subi	r27, 0xF8	; 248
    13dc:	39 f0       	breq	.+14     	; 0x13ec <__fixunssfsi+0x46>
    13de:	b9 3f       	cpi	r27, 0xF9	; 249
    13e0:	cc f3       	brlt	.-14     	; 0x13d4 <__fixunssfsi+0x2e>
    13e2:	86 95       	lsr	r24
    13e4:	77 95       	ror	r23
    13e6:	67 95       	ror	r22
    13e8:	b3 95       	inc	r27
    13ea:	d9 f7       	brne	.-10     	; 0x13e2 <__fixunssfsi+0x3c>
    13ec:	3e f4       	brtc	.+14     	; 0x13fc <__fixunssfsi+0x56>
    13ee:	90 95       	com	r25
    13f0:	80 95       	com	r24
    13f2:	70 95       	com	r23
    13f4:	61 95       	neg	r22
    13f6:	7f 4f       	sbci	r23, 0xFF	; 255
    13f8:	8f 4f       	sbci	r24, 0xFF	; 255
    13fa:	9f 4f       	sbci	r25, 0xFF	; 255
    13fc:	08 95       	ret

000013fe <__floatunsisf>:
    13fe:	e8 94       	clt
    1400:	09 c0       	rjmp	.+18     	; 0x1414 <__floatsisf+0x12>

00001402 <__floatsisf>:
    1402:	97 fb       	bst	r25, 7
    1404:	3e f4       	brtc	.+14     	; 0x1414 <__floatsisf+0x12>
    1406:	90 95       	com	r25
    1408:	80 95       	com	r24
    140a:	70 95       	com	r23
    140c:	61 95       	neg	r22
    140e:	7f 4f       	sbci	r23, 0xFF	; 255
    1410:	8f 4f       	sbci	r24, 0xFF	; 255
    1412:	9f 4f       	sbci	r25, 0xFF	; 255
    1414:	99 23       	and	r25, r25
    1416:	a9 f0       	breq	.+42     	; 0x1442 <__floatsisf+0x40>
    1418:	f9 2f       	mov	r31, r25
    141a:	96 e9       	ldi	r25, 0x96	; 150
    141c:	bb 27       	eor	r27, r27
    141e:	93 95       	inc	r25
    1420:	f6 95       	lsr	r31
    1422:	87 95       	ror	r24
    1424:	77 95       	ror	r23
    1426:	67 95       	ror	r22
    1428:	b7 95       	ror	r27
    142a:	f1 11       	cpse	r31, r1
    142c:	f8 cf       	rjmp	.-16     	; 0x141e <__floatsisf+0x1c>
    142e:	fa f4       	brpl	.+62     	; 0x146e <__floatsisf+0x6c>
    1430:	bb 0f       	add	r27, r27
    1432:	11 f4       	brne	.+4      	; 0x1438 <__floatsisf+0x36>
    1434:	60 ff       	sbrs	r22, 0
    1436:	1b c0       	rjmp	.+54     	; 0x146e <__floatsisf+0x6c>
    1438:	6f 5f       	subi	r22, 0xFF	; 255
    143a:	7f 4f       	sbci	r23, 0xFF	; 255
    143c:	8f 4f       	sbci	r24, 0xFF	; 255
    143e:	9f 4f       	sbci	r25, 0xFF	; 255
    1440:	16 c0       	rjmp	.+44     	; 0x146e <__floatsisf+0x6c>
    1442:	88 23       	and	r24, r24
    1444:	11 f0       	breq	.+4      	; 0x144a <__floatsisf+0x48>
    1446:	96 e9       	ldi	r25, 0x96	; 150
    1448:	11 c0       	rjmp	.+34     	; 0x146c <__floatsisf+0x6a>
    144a:	77 23       	and	r23, r23
    144c:	21 f0       	breq	.+8      	; 0x1456 <__floatsisf+0x54>
    144e:	9e e8       	ldi	r25, 0x8E	; 142
    1450:	87 2f       	mov	r24, r23
    1452:	76 2f       	mov	r23, r22
    1454:	05 c0       	rjmp	.+10     	; 0x1460 <__floatsisf+0x5e>
    1456:	66 23       	and	r22, r22
    1458:	71 f0       	breq	.+28     	; 0x1476 <__floatsisf+0x74>
    145a:	96 e8       	ldi	r25, 0x86	; 134
    145c:	86 2f       	mov	r24, r22
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	2a f0       	brmi	.+10     	; 0x146e <__floatsisf+0x6c>
    1464:	9a 95       	dec	r25
    1466:	66 0f       	add	r22, r22
    1468:	77 1f       	adc	r23, r23
    146a:	88 1f       	adc	r24, r24
    146c:	da f7       	brpl	.-10     	; 0x1464 <__floatsisf+0x62>
    146e:	88 0f       	add	r24, r24
    1470:	96 95       	lsr	r25
    1472:	87 95       	ror	r24
    1474:	97 f9       	bld	r25, 7
    1476:	08 95       	ret

00001478 <__fp_arccos>:
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	1f 93       	push	r17
    147e:	0f 93       	push	r16
    1480:	8b 01       	movw	r16, r22
    1482:	ec 01       	movw	r28, r24
    1484:	e5 e2       	ldi	r30, 0x25	; 37
    1486:	f1 e0       	ldi	r31, 0x01	; 1
    1488:	3f d0       	rcall	.+126    	; 0x1508 <__fp_powser>
    148a:	82 d0       	rcall	.+260    	; 0x1590 <__fp_round>
    148c:	98 01       	movw	r18, r16
    148e:	ae 01       	movw	r20, r28
    1490:	8b 01       	movw	r16, r22
    1492:	ec 01       	movw	r28, r24
    1494:	60 e0       	ldi	r22, 0x00	; 0
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	80 e8       	ldi	r24, 0x80	; 128
    149a:	9f e3       	ldi	r25, 0x3F	; 63
    149c:	35 de       	rcall	.-918    	; 0x1108 <__subsf3>
    149e:	2a d1       	rcall	.+596    	; 0x16f4 <sqrt>
    14a0:	98 01       	movw	r18, r16
    14a2:	ae 01       	movw	r20, r28
    14a4:	0f 91       	pop	r16
    14a6:	1f 91       	pop	r17
    14a8:	cf 91       	pop	r28
    14aa:	df 91       	pop	r29
    14ac:	c2 c0       	rjmp	.+388    	; 0x1632 <__mulsf3x>

000014ae <__fp_cmp>:
    14ae:	99 0f       	add	r25, r25
    14b0:	00 08       	sbc	r0, r0
    14b2:	55 0f       	add	r21, r21
    14b4:	aa 0b       	sbc	r26, r26
    14b6:	e0 e8       	ldi	r30, 0x80	; 128
    14b8:	fe ef       	ldi	r31, 0xFE	; 254
    14ba:	16 16       	cp	r1, r22
    14bc:	17 06       	cpc	r1, r23
    14be:	e8 07       	cpc	r30, r24
    14c0:	f9 07       	cpc	r31, r25
    14c2:	c0 f0       	brcs	.+48     	; 0x14f4 <__fp_cmp+0x46>
    14c4:	12 16       	cp	r1, r18
    14c6:	13 06       	cpc	r1, r19
    14c8:	e4 07       	cpc	r30, r20
    14ca:	f5 07       	cpc	r31, r21
    14cc:	98 f0       	brcs	.+38     	; 0x14f4 <__fp_cmp+0x46>
    14ce:	62 1b       	sub	r22, r18
    14d0:	73 0b       	sbc	r23, r19
    14d2:	84 0b       	sbc	r24, r20
    14d4:	95 0b       	sbc	r25, r21
    14d6:	39 f4       	brne	.+14     	; 0x14e6 <__fp_cmp+0x38>
    14d8:	0a 26       	eor	r0, r26
    14da:	61 f0       	breq	.+24     	; 0x14f4 <__fp_cmp+0x46>
    14dc:	23 2b       	or	r18, r19
    14de:	24 2b       	or	r18, r20
    14e0:	25 2b       	or	r18, r21
    14e2:	21 f4       	brne	.+8      	; 0x14ec <__fp_cmp+0x3e>
    14e4:	08 95       	ret
    14e6:	0a 26       	eor	r0, r26
    14e8:	09 f4       	brne	.+2      	; 0x14ec <__fp_cmp+0x3e>
    14ea:	a1 40       	sbci	r26, 0x01	; 1
    14ec:	a6 95       	lsr	r26
    14ee:	8f ef       	ldi	r24, 0xFF	; 255
    14f0:	81 1d       	adc	r24, r1
    14f2:	81 1d       	adc	r24, r1
    14f4:	08 95       	ret

000014f6 <__fp_inf>:
    14f6:	97 f9       	bld	r25, 7
    14f8:	9f 67       	ori	r25, 0x7F	; 127
    14fa:	80 e8       	ldi	r24, 0x80	; 128
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	08 95       	ret

00001502 <__fp_nan>:
    1502:	9f ef       	ldi	r25, 0xFF	; 255
    1504:	80 ec       	ldi	r24, 0xC0	; 192
    1506:	08 95       	ret

00001508 <__fp_powser>:
    1508:	df 93       	push	r29
    150a:	cf 93       	push	r28
    150c:	1f 93       	push	r17
    150e:	0f 93       	push	r16
    1510:	ff 92       	push	r15
    1512:	ef 92       	push	r14
    1514:	df 92       	push	r13
    1516:	7b 01       	movw	r14, r22
    1518:	8c 01       	movw	r16, r24
    151a:	68 94       	set
    151c:	05 c0       	rjmp	.+10     	; 0x1528 <__fp_powser+0x20>
    151e:	da 2e       	mov	r13, r26
    1520:	ef 01       	movw	r28, r30
    1522:	87 d0       	rcall	.+270    	; 0x1632 <__mulsf3x>
    1524:	fe 01       	movw	r30, r28
    1526:	e8 94       	clt
    1528:	a5 91       	lpm	r26, Z+
    152a:	25 91       	lpm	r18, Z+
    152c:	35 91       	lpm	r19, Z+
    152e:	45 91       	lpm	r20, Z+
    1530:	55 91       	lpm	r21, Z+
    1532:	ae f3       	brts	.-22     	; 0x151e <__fp_powser+0x16>
    1534:	ef 01       	movw	r28, r30
    1536:	fa dd       	rcall	.-1036   	; 0x112c <__addsf3x>
    1538:	fe 01       	movw	r30, r28
    153a:	97 01       	movw	r18, r14
    153c:	a8 01       	movw	r20, r16
    153e:	da 94       	dec	r13
    1540:	79 f7       	brne	.-34     	; 0x1520 <__fp_powser+0x18>
    1542:	df 90       	pop	r13
    1544:	ef 90       	pop	r14
    1546:	ff 90       	pop	r15
    1548:	0f 91       	pop	r16
    154a:	1f 91       	pop	r17
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <__fp_powsodd>:
    1552:	9f 93       	push	r25
    1554:	8f 93       	push	r24
    1556:	7f 93       	push	r23
    1558:	6f 93       	push	r22
    155a:	ff 93       	push	r31
    155c:	ef 93       	push	r30
    155e:	9b 01       	movw	r18, r22
    1560:	ac 01       	movw	r20, r24
    1562:	5b d0       	rcall	.+182    	; 0x161a <__mulsf3>
    1564:	ef 91       	pop	r30
    1566:	ff 91       	pop	r31
    1568:	cf df       	rcall	.-98     	; 0x1508 <__fp_powser>
    156a:	2f 91       	pop	r18
    156c:	3f 91       	pop	r19
    156e:	4f 91       	pop	r20
    1570:	5f 91       	pop	r21
    1572:	53 c0       	rjmp	.+166    	; 0x161a <__mulsf3>

00001574 <__fp_pscA>:
    1574:	00 24       	eor	r0, r0
    1576:	0a 94       	dec	r0
    1578:	16 16       	cp	r1, r22
    157a:	17 06       	cpc	r1, r23
    157c:	18 06       	cpc	r1, r24
    157e:	09 06       	cpc	r0, r25
    1580:	08 95       	ret

00001582 <__fp_pscB>:
    1582:	00 24       	eor	r0, r0
    1584:	0a 94       	dec	r0
    1586:	12 16       	cp	r1, r18
    1588:	13 06       	cpc	r1, r19
    158a:	14 06       	cpc	r1, r20
    158c:	05 06       	cpc	r0, r21
    158e:	08 95       	ret

00001590 <__fp_round>:
    1590:	09 2e       	mov	r0, r25
    1592:	03 94       	inc	r0
    1594:	00 0c       	add	r0, r0
    1596:	11 f4       	brne	.+4      	; 0x159c <__fp_round+0xc>
    1598:	88 23       	and	r24, r24
    159a:	52 f0       	brmi	.+20     	; 0x15b0 <__fp_round+0x20>
    159c:	bb 0f       	add	r27, r27
    159e:	40 f4       	brcc	.+16     	; 0x15b0 <__fp_round+0x20>
    15a0:	bf 2b       	or	r27, r31
    15a2:	11 f4       	brne	.+4      	; 0x15a8 <__fp_round+0x18>
    15a4:	60 ff       	sbrs	r22, 0
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <__fp_round+0x20>
    15a8:	6f 5f       	subi	r22, 0xFF	; 255
    15aa:	7f 4f       	sbci	r23, 0xFF	; 255
    15ac:	8f 4f       	sbci	r24, 0xFF	; 255
    15ae:	9f 4f       	sbci	r25, 0xFF	; 255
    15b0:	08 95       	ret

000015b2 <__fp_split3>:
    15b2:	57 fd       	sbrc	r21, 7
    15b4:	90 58       	subi	r25, 0x80	; 128
    15b6:	44 0f       	add	r20, r20
    15b8:	55 1f       	adc	r21, r21
    15ba:	59 f0       	breq	.+22     	; 0x15d2 <__fp_splitA+0x10>
    15bc:	5f 3f       	cpi	r21, 0xFF	; 255
    15be:	71 f0       	breq	.+28     	; 0x15dc <__fp_splitA+0x1a>
    15c0:	47 95       	ror	r20

000015c2 <__fp_splitA>:
    15c2:	88 0f       	add	r24, r24
    15c4:	97 fb       	bst	r25, 7
    15c6:	99 1f       	adc	r25, r25
    15c8:	61 f0       	breq	.+24     	; 0x15e2 <__fp_splitA+0x20>
    15ca:	9f 3f       	cpi	r25, 0xFF	; 255
    15cc:	79 f0       	breq	.+30     	; 0x15ec <__fp_splitA+0x2a>
    15ce:	87 95       	ror	r24
    15d0:	08 95       	ret
    15d2:	12 16       	cp	r1, r18
    15d4:	13 06       	cpc	r1, r19
    15d6:	14 06       	cpc	r1, r20
    15d8:	55 1f       	adc	r21, r21
    15da:	f2 cf       	rjmp	.-28     	; 0x15c0 <__fp_split3+0xe>
    15dc:	46 95       	lsr	r20
    15de:	f1 df       	rcall	.-30     	; 0x15c2 <__fp_splitA>
    15e0:	08 c0       	rjmp	.+16     	; 0x15f2 <__fp_splitA+0x30>
    15e2:	16 16       	cp	r1, r22
    15e4:	17 06       	cpc	r1, r23
    15e6:	18 06       	cpc	r1, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	f1 cf       	rjmp	.-30     	; 0x15ce <__fp_splitA+0xc>
    15ec:	86 95       	lsr	r24
    15ee:	71 05       	cpc	r23, r1
    15f0:	61 05       	cpc	r22, r1
    15f2:	08 94       	sec
    15f4:	08 95       	ret

000015f6 <__fp_zero>:
    15f6:	e8 94       	clt

000015f8 <__fp_szero>:
    15f8:	bb 27       	eor	r27, r27
    15fa:	66 27       	eor	r22, r22
    15fc:	77 27       	eor	r23, r23
    15fe:	cb 01       	movw	r24, r22
    1600:	97 f9       	bld	r25, 7
    1602:	08 95       	ret

00001604 <__gesf2>:
    1604:	54 df       	rcall	.-344    	; 0x14ae <__fp_cmp>
    1606:	08 f4       	brcc	.+2      	; 0x160a <__gesf2+0x6>
    1608:	8f ef       	ldi	r24, 0xFF	; 255
    160a:	08 95       	ret

0000160c <inverse>:
    160c:	9b 01       	movw	r18, r22
    160e:	ac 01       	movw	r20, r24
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	70 e0       	ldi	r23, 0x00	; 0
    1614:	80 e8       	ldi	r24, 0x80	; 128
    1616:	9f e3       	ldi	r25, 0x3F	; 63
    1618:	59 ce       	rjmp	.-846    	; 0x12cc <__divsf3>

0000161a <__mulsf3>:
    161a:	0b d0       	rcall	.+22     	; 0x1632 <__mulsf3x>
    161c:	b9 cf       	rjmp	.-142    	; 0x1590 <__fp_round>
    161e:	aa df       	rcall	.-172    	; 0x1574 <__fp_pscA>
    1620:	28 f0       	brcs	.+10     	; 0x162c <__mulsf3+0x12>
    1622:	af df       	rcall	.-162    	; 0x1582 <__fp_pscB>
    1624:	18 f0       	brcs	.+6      	; 0x162c <__mulsf3+0x12>
    1626:	95 23       	and	r25, r21
    1628:	09 f0       	breq	.+2      	; 0x162c <__mulsf3+0x12>
    162a:	65 cf       	rjmp	.-310    	; 0x14f6 <__fp_inf>
    162c:	6a cf       	rjmp	.-300    	; 0x1502 <__fp_nan>
    162e:	11 24       	eor	r1, r1
    1630:	e3 cf       	rjmp	.-58     	; 0x15f8 <__fp_szero>

00001632 <__mulsf3x>:
    1632:	bf df       	rcall	.-130    	; 0x15b2 <__fp_split3>
    1634:	a0 f3       	brcs	.-24     	; 0x161e <__mulsf3+0x4>

00001636 <__mulsf3_pse>:
    1636:	95 9f       	mul	r25, r21
    1638:	d1 f3       	breq	.-12     	; 0x162e <__mulsf3+0x14>
    163a:	95 0f       	add	r25, r21
    163c:	50 e0       	ldi	r21, 0x00	; 0
    163e:	55 1f       	adc	r21, r21
    1640:	62 9f       	mul	r22, r18
    1642:	f0 01       	movw	r30, r0
    1644:	72 9f       	mul	r23, r18
    1646:	bb 27       	eor	r27, r27
    1648:	f0 0d       	add	r31, r0
    164a:	b1 1d       	adc	r27, r1
    164c:	63 9f       	mul	r22, r19
    164e:	aa 27       	eor	r26, r26
    1650:	f0 0d       	add	r31, r0
    1652:	b1 1d       	adc	r27, r1
    1654:	aa 1f       	adc	r26, r26
    1656:	64 9f       	mul	r22, r20
    1658:	66 27       	eor	r22, r22
    165a:	b0 0d       	add	r27, r0
    165c:	a1 1d       	adc	r26, r1
    165e:	66 1f       	adc	r22, r22
    1660:	82 9f       	mul	r24, r18
    1662:	22 27       	eor	r18, r18
    1664:	b0 0d       	add	r27, r0
    1666:	a1 1d       	adc	r26, r1
    1668:	62 1f       	adc	r22, r18
    166a:	73 9f       	mul	r23, r19
    166c:	b0 0d       	add	r27, r0
    166e:	a1 1d       	adc	r26, r1
    1670:	62 1f       	adc	r22, r18
    1672:	83 9f       	mul	r24, r19
    1674:	a0 0d       	add	r26, r0
    1676:	61 1d       	adc	r22, r1
    1678:	22 1f       	adc	r18, r18
    167a:	74 9f       	mul	r23, r20
    167c:	33 27       	eor	r19, r19
    167e:	a0 0d       	add	r26, r0
    1680:	61 1d       	adc	r22, r1
    1682:	23 1f       	adc	r18, r19
    1684:	84 9f       	mul	r24, r20
    1686:	60 0d       	add	r22, r0
    1688:	21 1d       	adc	r18, r1
    168a:	82 2f       	mov	r24, r18
    168c:	76 2f       	mov	r23, r22
    168e:	6a 2f       	mov	r22, r26
    1690:	11 24       	eor	r1, r1
    1692:	9f 57       	subi	r25, 0x7F	; 127
    1694:	50 40       	sbci	r21, 0x00	; 0
    1696:	8a f0       	brmi	.+34     	; 0x16ba <__mulsf3_pse+0x84>
    1698:	e1 f0       	breq	.+56     	; 0x16d2 <__mulsf3_pse+0x9c>
    169a:	88 23       	and	r24, r24
    169c:	4a f0       	brmi	.+18     	; 0x16b0 <__mulsf3_pse+0x7a>
    169e:	ee 0f       	add	r30, r30
    16a0:	ff 1f       	adc	r31, r31
    16a2:	bb 1f       	adc	r27, r27
    16a4:	66 1f       	adc	r22, r22
    16a6:	77 1f       	adc	r23, r23
    16a8:	88 1f       	adc	r24, r24
    16aa:	91 50       	subi	r25, 0x01	; 1
    16ac:	50 40       	sbci	r21, 0x00	; 0
    16ae:	a9 f7       	brne	.-22     	; 0x169a <__mulsf3_pse+0x64>
    16b0:	9e 3f       	cpi	r25, 0xFE	; 254
    16b2:	51 05       	cpc	r21, r1
    16b4:	70 f0       	brcs	.+28     	; 0x16d2 <__mulsf3_pse+0x9c>
    16b6:	1f cf       	rjmp	.-450    	; 0x14f6 <__fp_inf>
    16b8:	9f cf       	rjmp	.-194    	; 0x15f8 <__fp_szero>
    16ba:	5f 3f       	cpi	r21, 0xFF	; 255
    16bc:	ec f3       	brlt	.-6      	; 0x16b8 <__mulsf3_pse+0x82>
    16be:	98 3e       	cpi	r25, 0xE8	; 232
    16c0:	dc f3       	brlt	.-10     	; 0x16b8 <__mulsf3_pse+0x82>
    16c2:	86 95       	lsr	r24
    16c4:	77 95       	ror	r23
    16c6:	67 95       	ror	r22
    16c8:	b7 95       	ror	r27
    16ca:	f7 95       	ror	r31
    16cc:	e7 95       	ror	r30
    16ce:	9f 5f       	subi	r25, 0xFF	; 255
    16d0:	c1 f7       	brne	.-16     	; 0x16c2 <__mulsf3_pse+0x8c>
    16d2:	fe 2b       	or	r31, r30
    16d4:	88 0f       	add	r24, r24
    16d6:	91 1d       	adc	r25, r1
    16d8:	96 95       	lsr	r25
    16da:	87 95       	ror	r24
    16dc:	97 f9       	bld	r25, 7
    16de:	08 95       	ret

000016e0 <sin>:
    16e0:	9f 93       	push	r25
    16e2:	5f d0       	rcall	.+190    	; 0x17a2 <__fp_rempio2>
    16e4:	0f 90       	pop	r0
    16e6:	07 fc       	sbrc	r0, 7
    16e8:	ee 5f       	subi	r30, 0xFE	; 254
    16ea:	82 c0       	rjmp	.+260    	; 0x17f0 <__fp_sinus>
    16ec:	11 f4       	brne	.+4      	; 0x16f2 <sin+0x12>
    16ee:	0e f4       	brtc	.+2      	; 0x16f2 <sin+0x12>
    16f0:	08 cf       	rjmp	.-496    	; 0x1502 <__fp_nan>
    16f2:	41 c0       	rjmp	.+130    	; 0x1776 <__fp_mpack>

000016f4 <sqrt>:
    16f4:	66 df       	rcall	.-308    	; 0x15c2 <__fp_splitA>
    16f6:	d0 f3       	brcs	.-12     	; 0x16ec <sin+0xc>
    16f8:	99 23       	and	r25, r25
    16fa:	d9 f3       	breq	.-10     	; 0x16f2 <sin+0x12>
    16fc:	ce f3       	brts	.-14     	; 0x16f0 <sin+0x10>
    16fe:	9f 57       	subi	r25, 0x7F	; 127
    1700:	55 0b       	sbc	r21, r21
    1702:	87 ff       	sbrs	r24, 7
    1704:	46 d0       	rcall	.+140    	; 0x1792 <__fp_norm2>
    1706:	00 24       	eor	r0, r0
    1708:	a0 e6       	ldi	r26, 0x60	; 96
    170a:	40 ea       	ldi	r20, 0xA0	; 160
    170c:	90 01       	movw	r18, r0
    170e:	80 58       	subi	r24, 0x80	; 128
    1710:	56 95       	lsr	r21
    1712:	97 95       	ror	r25
    1714:	28 f4       	brcc	.+10     	; 0x1720 <sqrt+0x2c>
    1716:	80 5c       	subi	r24, 0xC0	; 192
    1718:	66 0f       	add	r22, r22
    171a:	77 1f       	adc	r23, r23
    171c:	88 1f       	adc	r24, r24
    171e:	20 f0       	brcs	.+8      	; 0x1728 <sqrt+0x34>
    1720:	26 17       	cp	r18, r22
    1722:	37 07       	cpc	r19, r23
    1724:	48 07       	cpc	r20, r24
    1726:	30 f4       	brcc	.+12     	; 0x1734 <sqrt+0x40>
    1728:	62 1b       	sub	r22, r18
    172a:	73 0b       	sbc	r23, r19
    172c:	84 0b       	sbc	r24, r20
    172e:	20 29       	or	r18, r0
    1730:	31 29       	or	r19, r1
    1732:	4a 2b       	or	r20, r26
    1734:	a6 95       	lsr	r26
    1736:	17 94       	ror	r1
    1738:	07 94       	ror	r0
    173a:	20 25       	eor	r18, r0
    173c:	31 25       	eor	r19, r1
    173e:	4a 27       	eor	r20, r26
    1740:	58 f7       	brcc	.-42     	; 0x1718 <sqrt+0x24>
    1742:	66 0f       	add	r22, r22
    1744:	77 1f       	adc	r23, r23
    1746:	88 1f       	adc	r24, r24
    1748:	20 f0       	brcs	.+8      	; 0x1752 <sqrt+0x5e>
    174a:	26 17       	cp	r18, r22
    174c:	37 07       	cpc	r19, r23
    174e:	48 07       	cpc	r20, r24
    1750:	30 f4       	brcc	.+12     	; 0x175e <sqrt+0x6a>
    1752:	62 0b       	sbc	r22, r18
    1754:	73 0b       	sbc	r23, r19
    1756:	84 0b       	sbc	r24, r20
    1758:	20 0d       	add	r18, r0
    175a:	31 1d       	adc	r19, r1
    175c:	41 1d       	adc	r20, r1
    175e:	a0 95       	com	r26
    1760:	81 f7       	brne	.-32     	; 0x1742 <sqrt+0x4e>
    1762:	b9 01       	movw	r22, r18
    1764:	84 2f       	mov	r24, r20
    1766:	91 58       	subi	r25, 0x81	; 129
    1768:	88 0f       	add	r24, r24
    176a:	96 95       	lsr	r25
    176c:	87 95       	ror	r24
    176e:	08 95       	ret

00001770 <square>:
    1770:	9b 01       	movw	r18, r22
    1772:	ac 01       	movw	r20, r24
    1774:	52 cf       	rjmp	.-348    	; 0x161a <__mulsf3>

00001776 <__fp_mpack>:
    1776:	9f 3f       	cpi	r25, 0xFF	; 255
    1778:	31 f0       	breq	.+12     	; 0x1786 <__fp_mpack_finite+0xc>

0000177a <__fp_mpack_finite>:
    177a:	91 50       	subi	r25, 0x01	; 1
    177c:	20 f4       	brcc	.+8      	; 0x1786 <__fp_mpack_finite+0xc>
    177e:	87 95       	ror	r24
    1780:	77 95       	ror	r23
    1782:	67 95       	ror	r22
    1784:	b7 95       	ror	r27
    1786:	88 0f       	add	r24, r24
    1788:	91 1d       	adc	r25, r1
    178a:	96 95       	lsr	r25
    178c:	87 95       	ror	r24
    178e:	97 f9       	bld	r25, 7
    1790:	08 95       	ret

00001792 <__fp_norm2>:
    1792:	91 50       	subi	r25, 0x01	; 1
    1794:	50 40       	sbci	r21, 0x00	; 0
    1796:	66 0f       	add	r22, r22
    1798:	77 1f       	adc	r23, r23
    179a:	88 1f       	adc	r24, r24
    179c:	d2 f7       	brpl	.-12     	; 0x1792 <__fp_norm2>
    179e:	08 95       	ret
    17a0:	b0 ce       	rjmp	.-672    	; 0x1502 <__fp_nan>

000017a2 <__fp_rempio2>:
    17a2:	0f df       	rcall	.-482    	; 0x15c2 <__fp_splitA>
    17a4:	e8 f3       	brcs	.-6      	; 0x17a0 <__fp_norm2+0xe>
    17a6:	e8 94       	clt
    17a8:	e0 e0       	ldi	r30, 0x00	; 0
    17aa:	bb 27       	eor	r27, r27
    17ac:	9f 57       	subi	r25, 0x7F	; 127
    17ae:	f0 f0       	brcs	.+60     	; 0x17ec <__fp_rempio2+0x4a>
    17b0:	2a ed       	ldi	r18, 0xDA	; 218
    17b2:	3f e0       	ldi	r19, 0x0F	; 15
    17b4:	49 ec       	ldi	r20, 0xC9	; 201
    17b6:	06 c0       	rjmp	.+12     	; 0x17c4 <__fp_rempio2+0x22>
    17b8:	ee 0f       	add	r30, r30
    17ba:	bb 0f       	add	r27, r27
    17bc:	66 1f       	adc	r22, r22
    17be:	77 1f       	adc	r23, r23
    17c0:	88 1f       	adc	r24, r24
    17c2:	28 f0       	brcs	.+10     	; 0x17ce <__fp_rempio2+0x2c>
    17c4:	b2 3a       	cpi	r27, 0xA2	; 162
    17c6:	62 07       	cpc	r22, r18
    17c8:	73 07       	cpc	r23, r19
    17ca:	84 07       	cpc	r24, r20
    17cc:	28 f0       	brcs	.+10     	; 0x17d8 <__fp_rempio2+0x36>
    17ce:	b2 5a       	subi	r27, 0xA2	; 162
    17d0:	62 0b       	sbc	r22, r18
    17d2:	73 0b       	sbc	r23, r19
    17d4:	84 0b       	sbc	r24, r20
    17d6:	e3 95       	inc	r30
    17d8:	9a 95       	dec	r25
    17da:	72 f7       	brpl	.-36     	; 0x17b8 <__fp_rempio2+0x16>
    17dc:	80 38       	cpi	r24, 0x80	; 128
    17de:	30 f4       	brcc	.+12     	; 0x17ec <__fp_rempio2+0x4a>
    17e0:	9a 95       	dec	r25
    17e2:	bb 0f       	add	r27, r27
    17e4:	66 1f       	adc	r22, r22
    17e6:	77 1f       	adc	r23, r23
    17e8:	88 1f       	adc	r24, r24
    17ea:	d2 f7       	brpl	.-12     	; 0x17e0 <__fp_rempio2+0x3e>
    17ec:	90 48       	sbci	r25, 0x80	; 128
    17ee:	c5 cf       	rjmp	.-118    	; 0x177a <__fp_mpack_finite>

000017f0 <__fp_sinus>:
    17f0:	ef 93       	push	r30
    17f2:	e0 ff       	sbrs	r30, 0
    17f4:	06 c0       	rjmp	.+12     	; 0x1802 <__fp_sinus+0x12>
    17f6:	a2 ea       	ldi	r26, 0xA2	; 162
    17f8:	2a ed       	ldi	r18, 0xDA	; 218
    17fa:	3f e0       	ldi	r19, 0x0F	; 15
    17fc:	49 ec       	ldi	r20, 0xC9	; 201
    17fe:	5f eb       	ldi	r21, 0xBF	; 191
    1800:	95 dc       	rcall	.-1750   	; 0x112c <__addsf3x>
    1802:	c6 de       	rcall	.-628    	; 0x1590 <__fp_round>
    1804:	0f 90       	pop	r0
    1806:	03 94       	inc	r0
    1808:	01 fc       	sbrc	r0, 1
    180a:	90 58       	subi	r25, 0x80	; 128
    180c:	ed e4       	ldi	r30, 0x4D	; 77
    180e:	f1 e0       	ldi	r31, 0x01	; 1
    1810:	a0 ce       	rjmp	.-704    	; 0x1552 <__fp_powsodd>

00001812 <__divmodhi4>:
    1812:	97 fb       	bst	r25, 7
    1814:	07 2e       	mov	r0, r23
    1816:	16 f4       	brtc	.+4      	; 0x181c <__divmodhi4+0xa>
    1818:	00 94       	com	r0
    181a:	06 d0       	rcall	.+12     	; 0x1828 <__divmodhi4_neg1>
    181c:	77 fd       	sbrc	r23, 7
    181e:	08 d0       	rcall	.+16     	; 0x1830 <__divmodhi4_neg2>
    1820:	0b d0       	rcall	.+22     	; 0x1838 <__udivmodhi4>
    1822:	07 fc       	sbrc	r0, 7
    1824:	05 d0       	rcall	.+10     	; 0x1830 <__divmodhi4_neg2>
    1826:	3e f4       	brtc	.+14     	; 0x1836 <__divmodhi4_exit>

00001828 <__divmodhi4_neg1>:
    1828:	90 95       	com	r25
    182a:	81 95       	neg	r24
    182c:	9f 4f       	sbci	r25, 0xFF	; 255
    182e:	08 95       	ret

00001830 <__divmodhi4_neg2>:
    1830:	70 95       	com	r23
    1832:	61 95       	neg	r22
    1834:	7f 4f       	sbci	r23, 0xFF	; 255

00001836 <__divmodhi4_exit>:
    1836:	08 95       	ret

00001838 <__udivmodhi4>:
    1838:	aa 1b       	sub	r26, r26
    183a:	bb 1b       	sub	r27, r27
    183c:	51 e1       	ldi	r21, 0x11	; 17
    183e:	07 c0       	rjmp	.+14     	; 0x184e <__udivmodhi4_ep>

00001840 <__udivmodhi4_loop>:
    1840:	aa 1f       	adc	r26, r26
    1842:	bb 1f       	adc	r27, r27
    1844:	a6 17       	cp	r26, r22
    1846:	b7 07       	cpc	r27, r23
    1848:	10 f0       	brcs	.+4      	; 0x184e <__udivmodhi4_ep>
    184a:	a6 1b       	sub	r26, r22
    184c:	b7 0b       	sbc	r27, r23

0000184e <__udivmodhi4_ep>:
    184e:	88 1f       	adc	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	5a 95       	dec	r21
    1854:	a9 f7       	brne	.-22     	; 0x1840 <__udivmodhi4_loop>
    1856:	80 95       	com	r24
    1858:	90 95       	com	r25
    185a:	bc 01       	movw	r22, r24
    185c:	cd 01       	movw	r24, r26
    185e:	08 95       	ret

00001860 <__itoa_ncheck>:
    1860:	bb 27       	eor	r27, r27
    1862:	4a 30       	cpi	r20, 0x0A	; 10
    1864:	31 f4       	brne	.+12     	; 0x1872 <__itoa_ncheck+0x12>
    1866:	99 23       	and	r25, r25
    1868:	22 f4       	brpl	.+8      	; 0x1872 <__itoa_ncheck+0x12>
    186a:	bd e2       	ldi	r27, 0x2D	; 45
    186c:	90 95       	com	r25
    186e:	81 95       	neg	r24
    1870:	9f 4f       	sbci	r25, 0xFF	; 255
    1872:	01 c0       	rjmp	.+2      	; 0x1876 <__utoa_common>

00001874 <__utoa_ncheck>:
    1874:	bb 27       	eor	r27, r27

00001876 <__utoa_common>:
    1876:	fb 01       	movw	r30, r22
    1878:	55 27       	eor	r21, r21
    187a:	aa 27       	eor	r26, r26
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	aa 1f       	adc	r26, r26
    1882:	a4 17       	cp	r26, r20
    1884:	10 f0       	brcs	.+4      	; 0x188a <__utoa_common+0x14>
    1886:	a4 1b       	sub	r26, r20
    1888:	83 95       	inc	r24
    188a:	50 51       	subi	r21, 0x10	; 16
    188c:	b9 f7       	brne	.-18     	; 0x187c <__utoa_common+0x6>
    188e:	a0 5d       	subi	r26, 0xD0	; 208
    1890:	aa 33       	cpi	r26, 0x3A	; 58
    1892:	08 f0       	brcs	.+2      	; 0x1896 <__utoa_common+0x20>
    1894:	a9 5d       	subi	r26, 0xD9	; 217
    1896:	a1 93       	st	Z+, r26
    1898:	00 97       	sbiw	r24, 0x00	; 0
    189a:	79 f7       	brne	.-34     	; 0x187a <__utoa_common+0x4>
    189c:	b1 11       	cpse	r27, r1
    189e:	b1 93       	st	Z+, r27
    18a0:	11 92       	st	Z+, r1
    18a2:	cb 01       	movw	r24, r22
    18a4:	e5 c3       	rjmp	.+1994   	; 0x2070 <strrev>

000018a6 <fdevopen>:
    18a6:	0f 93       	push	r16
    18a8:	1f 93       	push	r17
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	31 f4       	brne	.+12     	; 0x18be <fdevopen+0x18>
    18b2:	61 15       	cp	r22, r1
    18b4:	71 05       	cpc	r23, r1
    18b6:	19 f4       	brne	.+6      	; 0x18be <fdevopen+0x18>
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	39 c0       	rjmp	.+114    	; 0x1930 <fdevopen+0x8a>
    18be:	8b 01       	movw	r16, r22
    18c0:	ec 01       	movw	r28, r24
    18c2:	6e e0       	ldi	r22, 0x0E	; 14
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	7a d2       	rcall	.+1268   	; 0x1dc0 <calloc>
    18cc:	fc 01       	movw	r30, r24
    18ce:	89 2b       	or	r24, r25
    18d0:	99 f3       	breq	.-26     	; 0x18b8 <fdevopen+0x12>
    18d2:	80 e8       	ldi	r24, 0x80	; 128
    18d4:	83 83       	std	Z+3, r24	; 0x03
    18d6:	01 15       	cp	r16, r1
    18d8:	11 05       	cpc	r17, r1
    18da:	71 f0       	breq	.+28     	; 0x18f8 <fdevopen+0x52>
    18dc:	13 87       	std	Z+11, r17	; 0x0b
    18de:	02 87       	std	Z+10, r16	; 0x0a
    18e0:	81 e8       	ldi	r24, 0x81	; 129
    18e2:	83 83       	std	Z+3, r24	; 0x03
    18e4:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <__iob>
    18e8:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <__iob+0x1>
    18ec:	89 2b       	or	r24, r25
    18ee:	21 f4       	brne	.+8      	; 0x18f8 <fdevopen+0x52>
    18f0:	f0 93 c6 03 	sts	0x03C6, r31	; 0x8003c6 <__iob+0x1>
    18f4:	e0 93 c5 03 	sts	0x03C5, r30	; 0x8003c5 <__iob>
    18f8:	20 97       	sbiw	r28, 0x00	; 0
    18fa:	c9 f0       	breq	.+50     	; 0x192e <fdevopen+0x88>
    18fc:	d1 87       	std	Z+9, r29	; 0x09
    18fe:	c0 87       	std	Z+8, r28	; 0x08
    1900:	83 81       	ldd	r24, Z+3	; 0x03
    1902:	82 60       	ori	r24, 0x02	; 2
    1904:	83 83       	std	Z+3, r24	; 0x03
    1906:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <__iob+0x2>
    190a:	90 91 c8 03 	lds	r25, 0x03C8	; 0x8003c8 <__iob+0x3>
    190e:	89 2b       	or	r24, r25
    1910:	71 f4       	brne	.+28     	; 0x192e <fdevopen+0x88>
    1912:	f0 93 c8 03 	sts	0x03C8, r31	; 0x8003c8 <__iob+0x3>
    1916:	e0 93 c7 03 	sts	0x03C7, r30	; 0x8003c7 <__iob+0x2>
    191a:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <__iob+0x4>
    191e:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <__iob+0x5>
    1922:	89 2b       	or	r24, r25
    1924:	21 f4       	brne	.+8      	; 0x192e <fdevopen+0x88>
    1926:	f0 93 ca 03 	sts	0x03CA, r31	; 0x8003ca <__iob+0x5>
    192a:	e0 93 c9 03 	sts	0x03C9, r30	; 0x8003c9 <__iob+0x4>
    192e:	cf 01       	movw	r24, r30
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	1f 91       	pop	r17
    1936:	0f 91       	pop	r16
    1938:	08 95       	ret

0000193a <printf>:
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	ae 01       	movw	r20, r28
    1944:	4a 5f       	subi	r20, 0xFA	; 250
    1946:	5f 4f       	sbci	r21, 0xFF	; 255
    1948:	fa 01       	movw	r30, r20
    194a:	61 91       	ld	r22, Z+
    194c:	71 91       	ld	r23, Z+
    194e:	af 01       	movw	r20, r30
    1950:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <__iob+0x2>
    1954:	90 91 c8 03 	lds	r25, 0x03C8	; 0x8003c8 <__iob+0x3>
    1958:	36 d0       	rcall	.+108    	; 0x19c6 <vfprintf>
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	08 95       	ret

00001960 <putchar>:
    1960:	60 91 c7 03 	lds	r22, 0x03C7	; 0x8003c7 <__iob+0x2>
    1964:	70 91 c8 03 	lds	r23, 0x03C8	; 0x8003c8 <__iob+0x3>
    1968:	93 c3       	rjmp	.+1830   	; 0x2090 <fputc>

0000196a <sprintf>:
    196a:	0f 93       	push	r16
    196c:	1f 93       	push	r17
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	2e 97       	sbiw	r28, 0x0e	; 14
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	0e 89       	ldd	r16, Y+22	; 0x16
    1984:	1f 89       	ldd	r17, Y+23	; 0x17
    1986:	86 e0       	ldi	r24, 0x06	; 6
    1988:	8c 83       	std	Y+4, r24	; 0x04
    198a:	1a 83       	std	Y+2, r17	; 0x02
    198c:	09 83       	std	Y+1, r16	; 0x01
    198e:	8f ef       	ldi	r24, 0xFF	; 255
    1990:	9f e7       	ldi	r25, 0x7F	; 127
    1992:	9e 83       	std	Y+6, r25	; 0x06
    1994:	8d 83       	std	Y+5, r24	; 0x05
    1996:	ae 01       	movw	r20, r28
    1998:	46 5e       	subi	r20, 0xE6	; 230
    199a:	5f 4f       	sbci	r21, 0xFF	; 255
    199c:	68 8d       	ldd	r22, Y+24	; 0x18
    199e:	79 8d       	ldd	r23, Y+25	; 0x19
    19a0:	ce 01       	movw	r24, r28
    19a2:	01 96       	adiw	r24, 0x01	; 1
    19a4:	10 d0       	rcall	.+32     	; 0x19c6 <vfprintf>
    19a6:	ef 81       	ldd	r30, Y+7	; 0x07
    19a8:	f8 85       	ldd	r31, Y+8	; 0x08
    19aa:	e0 0f       	add	r30, r16
    19ac:	f1 1f       	adc	r31, r17
    19ae:	10 82       	st	Z, r1
    19b0:	2e 96       	adiw	r28, 0x0e	; 14
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	1f 91       	pop	r17
    19c2:	0f 91       	pop	r16
    19c4:	08 95       	ret

000019c6 <vfprintf>:
    19c6:	2f 92       	push	r2
    19c8:	3f 92       	push	r3
    19ca:	4f 92       	push	r4
    19cc:	5f 92       	push	r5
    19ce:	6f 92       	push	r6
    19d0:	7f 92       	push	r7
    19d2:	8f 92       	push	r8
    19d4:	9f 92       	push	r9
    19d6:	af 92       	push	r10
    19d8:	bf 92       	push	r11
    19da:	cf 92       	push	r12
    19dc:	df 92       	push	r13
    19de:	ef 92       	push	r14
    19e0:	ff 92       	push	r15
    19e2:	0f 93       	push	r16
    19e4:	1f 93       	push	r17
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	2b 97       	sbiw	r28, 0x0b	; 11
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	6c 01       	movw	r12, r24
    19fc:	7b 01       	movw	r14, r22
    19fe:	8a 01       	movw	r16, r20
    1a00:	fc 01       	movw	r30, r24
    1a02:	17 82       	std	Z+7, r1	; 0x07
    1a04:	16 82       	std	Z+6, r1	; 0x06
    1a06:	83 81       	ldd	r24, Z+3	; 0x03
    1a08:	81 ff       	sbrs	r24, 1
    1a0a:	bf c1       	rjmp	.+894    	; 0x1d8a <vfprintf+0x3c4>
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	3c 01       	movw	r6, r24
    1a12:	f6 01       	movw	r30, r12
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	f7 01       	movw	r30, r14
    1a18:	93 fd       	sbrc	r25, 3
    1a1a:	85 91       	lpm	r24, Z+
    1a1c:	93 ff       	sbrs	r25, 3
    1a1e:	81 91       	ld	r24, Z+
    1a20:	7f 01       	movw	r14, r30
    1a22:	88 23       	and	r24, r24
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <vfprintf+0x62>
    1a26:	ad c1       	rjmp	.+858    	; 0x1d82 <vfprintf+0x3bc>
    1a28:	85 32       	cpi	r24, 0x25	; 37
    1a2a:	39 f4       	brne	.+14     	; 0x1a3a <vfprintf+0x74>
    1a2c:	93 fd       	sbrc	r25, 3
    1a2e:	85 91       	lpm	r24, Z+
    1a30:	93 ff       	sbrs	r25, 3
    1a32:	81 91       	ld	r24, Z+
    1a34:	7f 01       	movw	r14, r30
    1a36:	85 32       	cpi	r24, 0x25	; 37
    1a38:	21 f4       	brne	.+8      	; 0x1a42 <vfprintf+0x7c>
    1a3a:	b6 01       	movw	r22, r12
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	28 d3       	rcall	.+1616   	; 0x2090 <fputc>
    1a40:	e8 cf       	rjmp	.-48     	; 0x1a12 <vfprintf+0x4c>
    1a42:	91 2c       	mov	r9, r1
    1a44:	21 2c       	mov	r2, r1
    1a46:	31 2c       	mov	r3, r1
    1a48:	ff e1       	ldi	r31, 0x1F	; 31
    1a4a:	f3 15       	cp	r31, r3
    1a4c:	d8 f0       	brcs	.+54     	; 0x1a84 <vfprintf+0xbe>
    1a4e:	8b 32       	cpi	r24, 0x2B	; 43
    1a50:	79 f0       	breq	.+30     	; 0x1a70 <vfprintf+0xaa>
    1a52:	38 f4       	brcc	.+14     	; 0x1a62 <vfprintf+0x9c>
    1a54:	80 32       	cpi	r24, 0x20	; 32
    1a56:	79 f0       	breq	.+30     	; 0x1a76 <vfprintf+0xb0>
    1a58:	83 32       	cpi	r24, 0x23	; 35
    1a5a:	a1 f4       	brne	.+40     	; 0x1a84 <vfprintf+0xbe>
    1a5c:	23 2d       	mov	r18, r3
    1a5e:	20 61       	ori	r18, 0x10	; 16
    1a60:	1d c0       	rjmp	.+58     	; 0x1a9c <vfprintf+0xd6>
    1a62:	8d 32       	cpi	r24, 0x2D	; 45
    1a64:	61 f0       	breq	.+24     	; 0x1a7e <vfprintf+0xb8>
    1a66:	80 33       	cpi	r24, 0x30	; 48
    1a68:	69 f4       	brne	.+26     	; 0x1a84 <vfprintf+0xbe>
    1a6a:	23 2d       	mov	r18, r3
    1a6c:	21 60       	ori	r18, 0x01	; 1
    1a6e:	16 c0       	rjmp	.+44     	; 0x1a9c <vfprintf+0xd6>
    1a70:	83 2d       	mov	r24, r3
    1a72:	82 60       	ori	r24, 0x02	; 2
    1a74:	38 2e       	mov	r3, r24
    1a76:	e3 2d       	mov	r30, r3
    1a78:	e4 60       	ori	r30, 0x04	; 4
    1a7a:	3e 2e       	mov	r3, r30
    1a7c:	2a c0       	rjmp	.+84     	; 0x1ad2 <vfprintf+0x10c>
    1a7e:	f3 2d       	mov	r31, r3
    1a80:	f8 60       	ori	r31, 0x08	; 8
    1a82:	1d c0       	rjmp	.+58     	; 0x1abe <vfprintf+0xf8>
    1a84:	37 fc       	sbrc	r3, 7
    1a86:	2d c0       	rjmp	.+90     	; 0x1ae2 <vfprintf+0x11c>
    1a88:	20 ed       	ldi	r18, 0xD0	; 208
    1a8a:	28 0f       	add	r18, r24
    1a8c:	2a 30       	cpi	r18, 0x0A	; 10
    1a8e:	40 f0       	brcs	.+16     	; 0x1aa0 <vfprintf+0xda>
    1a90:	8e 32       	cpi	r24, 0x2E	; 46
    1a92:	b9 f4       	brne	.+46     	; 0x1ac2 <vfprintf+0xfc>
    1a94:	36 fc       	sbrc	r3, 6
    1a96:	75 c1       	rjmp	.+746    	; 0x1d82 <vfprintf+0x3bc>
    1a98:	23 2d       	mov	r18, r3
    1a9a:	20 64       	ori	r18, 0x40	; 64
    1a9c:	32 2e       	mov	r3, r18
    1a9e:	19 c0       	rjmp	.+50     	; 0x1ad2 <vfprintf+0x10c>
    1aa0:	36 fe       	sbrs	r3, 6
    1aa2:	06 c0       	rjmp	.+12     	; 0x1ab0 <vfprintf+0xea>
    1aa4:	8a e0       	ldi	r24, 0x0A	; 10
    1aa6:	98 9e       	mul	r9, r24
    1aa8:	20 0d       	add	r18, r0
    1aaa:	11 24       	eor	r1, r1
    1aac:	92 2e       	mov	r9, r18
    1aae:	11 c0       	rjmp	.+34     	; 0x1ad2 <vfprintf+0x10c>
    1ab0:	ea e0       	ldi	r30, 0x0A	; 10
    1ab2:	2e 9e       	mul	r2, r30
    1ab4:	20 0d       	add	r18, r0
    1ab6:	11 24       	eor	r1, r1
    1ab8:	22 2e       	mov	r2, r18
    1aba:	f3 2d       	mov	r31, r3
    1abc:	f0 62       	ori	r31, 0x20	; 32
    1abe:	3f 2e       	mov	r3, r31
    1ac0:	08 c0       	rjmp	.+16     	; 0x1ad2 <vfprintf+0x10c>
    1ac2:	8c 36       	cpi	r24, 0x6C	; 108
    1ac4:	21 f4       	brne	.+8      	; 0x1ace <vfprintf+0x108>
    1ac6:	83 2d       	mov	r24, r3
    1ac8:	80 68       	ori	r24, 0x80	; 128
    1aca:	38 2e       	mov	r3, r24
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <vfprintf+0x10c>
    1ace:	88 36       	cpi	r24, 0x68	; 104
    1ad0:	41 f4       	brne	.+16     	; 0x1ae2 <vfprintf+0x11c>
    1ad2:	f7 01       	movw	r30, r14
    1ad4:	93 fd       	sbrc	r25, 3
    1ad6:	85 91       	lpm	r24, Z+
    1ad8:	93 ff       	sbrs	r25, 3
    1ada:	81 91       	ld	r24, Z+
    1adc:	7f 01       	movw	r14, r30
    1ade:	81 11       	cpse	r24, r1
    1ae0:	b3 cf       	rjmp	.-154    	; 0x1a48 <vfprintf+0x82>
    1ae2:	98 2f       	mov	r25, r24
    1ae4:	9f 7d       	andi	r25, 0xDF	; 223
    1ae6:	95 54       	subi	r25, 0x45	; 69
    1ae8:	93 30       	cpi	r25, 0x03	; 3
    1aea:	28 f4       	brcc	.+10     	; 0x1af6 <vfprintf+0x130>
    1aec:	0c 5f       	subi	r16, 0xFC	; 252
    1aee:	1f 4f       	sbci	r17, 0xFF	; 255
    1af0:	9f e3       	ldi	r25, 0x3F	; 63
    1af2:	99 83       	std	Y+1, r25	; 0x01
    1af4:	0d c0       	rjmp	.+26     	; 0x1b10 <vfprintf+0x14a>
    1af6:	83 36       	cpi	r24, 0x63	; 99
    1af8:	31 f0       	breq	.+12     	; 0x1b06 <vfprintf+0x140>
    1afa:	83 37       	cpi	r24, 0x73	; 115
    1afc:	71 f0       	breq	.+28     	; 0x1b1a <vfprintf+0x154>
    1afe:	83 35       	cpi	r24, 0x53	; 83
    1b00:	09 f0       	breq	.+2      	; 0x1b04 <vfprintf+0x13e>
    1b02:	55 c0       	rjmp	.+170    	; 0x1bae <vfprintf+0x1e8>
    1b04:	20 c0       	rjmp	.+64     	; 0x1b46 <vfprintf+0x180>
    1b06:	f8 01       	movw	r30, r16
    1b08:	80 81       	ld	r24, Z
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    1b0c:	0e 5f       	subi	r16, 0xFE	; 254
    1b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b10:	88 24       	eor	r8, r8
    1b12:	83 94       	inc	r8
    1b14:	91 2c       	mov	r9, r1
    1b16:	53 01       	movw	r10, r6
    1b18:	12 c0       	rjmp	.+36     	; 0x1b3e <vfprintf+0x178>
    1b1a:	28 01       	movw	r4, r16
    1b1c:	f2 e0       	ldi	r31, 0x02	; 2
    1b1e:	4f 0e       	add	r4, r31
    1b20:	51 1c       	adc	r5, r1
    1b22:	f8 01       	movw	r30, r16
    1b24:	a0 80       	ld	r10, Z
    1b26:	b1 80       	ldd	r11, Z+1	; 0x01
    1b28:	36 fe       	sbrs	r3, 6
    1b2a:	03 c0       	rjmp	.+6      	; 0x1b32 <vfprintf+0x16c>
    1b2c:	69 2d       	mov	r22, r9
    1b2e:	70 e0       	ldi	r23, 0x00	; 0
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <vfprintf+0x170>
    1b32:	6f ef       	ldi	r22, 0xFF	; 255
    1b34:	7f ef       	ldi	r23, 0xFF	; 255
    1b36:	c5 01       	movw	r24, r10
    1b38:	90 d2       	rcall	.+1312   	; 0x205a <strnlen>
    1b3a:	4c 01       	movw	r8, r24
    1b3c:	82 01       	movw	r16, r4
    1b3e:	f3 2d       	mov	r31, r3
    1b40:	ff 77       	andi	r31, 0x7F	; 127
    1b42:	3f 2e       	mov	r3, r31
    1b44:	15 c0       	rjmp	.+42     	; 0x1b70 <vfprintf+0x1aa>
    1b46:	28 01       	movw	r4, r16
    1b48:	22 e0       	ldi	r18, 0x02	; 2
    1b4a:	42 0e       	add	r4, r18
    1b4c:	51 1c       	adc	r5, r1
    1b4e:	f8 01       	movw	r30, r16
    1b50:	a0 80       	ld	r10, Z
    1b52:	b1 80       	ldd	r11, Z+1	; 0x01
    1b54:	36 fe       	sbrs	r3, 6
    1b56:	03 c0       	rjmp	.+6      	; 0x1b5e <vfprintf+0x198>
    1b58:	69 2d       	mov	r22, r9
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <vfprintf+0x19c>
    1b5e:	6f ef       	ldi	r22, 0xFF	; 255
    1b60:	7f ef       	ldi	r23, 0xFF	; 255
    1b62:	c5 01       	movw	r24, r10
    1b64:	68 d2       	rcall	.+1232   	; 0x2036 <strnlen_P>
    1b66:	4c 01       	movw	r8, r24
    1b68:	f3 2d       	mov	r31, r3
    1b6a:	f0 68       	ori	r31, 0x80	; 128
    1b6c:	3f 2e       	mov	r3, r31
    1b6e:	82 01       	movw	r16, r4
    1b70:	33 fc       	sbrc	r3, 3
    1b72:	19 c0       	rjmp	.+50     	; 0x1ba6 <vfprintf+0x1e0>
    1b74:	82 2d       	mov	r24, r2
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	88 16       	cp	r8, r24
    1b7a:	99 06       	cpc	r9, r25
    1b7c:	a0 f4       	brcc	.+40     	; 0x1ba6 <vfprintf+0x1e0>
    1b7e:	b6 01       	movw	r22, r12
    1b80:	80 e2       	ldi	r24, 0x20	; 32
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	85 d2       	rcall	.+1290   	; 0x2090 <fputc>
    1b86:	2a 94       	dec	r2
    1b88:	f5 cf       	rjmp	.-22     	; 0x1b74 <vfprintf+0x1ae>
    1b8a:	f5 01       	movw	r30, r10
    1b8c:	37 fc       	sbrc	r3, 7
    1b8e:	85 91       	lpm	r24, Z+
    1b90:	37 fe       	sbrs	r3, 7
    1b92:	81 91       	ld	r24, Z+
    1b94:	5f 01       	movw	r10, r30
    1b96:	b6 01       	movw	r22, r12
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	7a d2       	rcall	.+1268   	; 0x2090 <fputc>
    1b9c:	21 10       	cpse	r2, r1
    1b9e:	2a 94       	dec	r2
    1ba0:	21 e0       	ldi	r18, 0x01	; 1
    1ba2:	82 1a       	sub	r8, r18
    1ba4:	91 08       	sbc	r9, r1
    1ba6:	81 14       	cp	r8, r1
    1ba8:	91 04       	cpc	r9, r1
    1baa:	79 f7       	brne	.-34     	; 0x1b8a <vfprintf+0x1c4>
    1bac:	e1 c0       	rjmp	.+450    	; 0x1d70 <vfprintf+0x3aa>
    1bae:	84 36       	cpi	r24, 0x64	; 100
    1bb0:	11 f0       	breq	.+4      	; 0x1bb6 <vfprintf+0x1f0>
    1bb2:	89 36       	cpi	r24, 0x69	; 105
    1bb4:	39 f5       	brne	.+78     	; 0x1c04 <vfprintf+0x23e>
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	37 fe       	sbrs	r3, 7
    1bba:	07 c0       	rjmp	.+14     	; 0x1bca <vfprintf+0x204>
    1bbc:	60 81       	ld	r22, Z
    1bbe:	71 81       	ldd	r23, Z+1	; 0x01
    1bc0:	82 81       	ldd	r24, Z+2	; 0x02
    1bc2:	93 81       	ldd	r25, Z+3	; 0x03
    1bc4:	0c 5f       	subi	r16, 0xFC	; 252
    1bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc8:	08 c0       	rjmp	.+16     	; 0x1bda <vfprintf+0x214>
    1bca:	60 81       	ld	r22, Z
    1bcc:	71 81       	ldd	r23, Z+1	; 0x01
    1bce:	07 2e       	mov	r0, r23
    1bd0:	00 0c       	add	r0, r0
    1bd2:	88 0b       	sbc	r24, r24
    1bd4:	99 0b       	sbc	r25, r25
    1bd6:	0e 5f       	subi	r16, 0xFE	; 254
    1bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bda:	f3 2d       	mov	r31, r3
    1bdc:	ff 76       	andi	r31, 0x6F	; 111
    1bde:	3f 2e       	mov	r3, r31
    1be0:	97 ff       	sbrs	r25, 7
    1be2:	09 c0       	rjmp	.+18     	; 0x1bf6 <vfprintf+0x230>
    1be4:	90 95       	com	r25
    1be6:	80 95       	com	r24
    1be8:	70 95       	com	r23
    1bea:	61 95       	neg	r22
    1bec:	7f 4f       	sbci	r23, 0xFF	; 255
    1bee:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf2:	f0 68       	ori	r31, 0x80	; 128
    1bf4:	3f 2e       	mov	r3, r31
    1bf6:	2a e0       	ldi	r18, 0x0A	; 10
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	a3 01       	movw	r20, r6
    1bfc:	85 d2       	rcall	.+1290   	; 0x2108 <__ultoa_invert>
    1bfe:	88 2e       	mov	r8, r24
    1c00:	86 18       	sub	r8, r6
    1c02:	44 c0       	rjmp	.+136    	; 0x1c8c <vfprintf+0x2c6>
    1c04:	85 37       	cpi	r24, 0x75	; 117
    1c06:	31 f4       	brne	.+12     	; 0x1c14 <vfprintf+0x24e>
    1c08:	23 2d       	mov	r18, r3
    1c0a:	2f 7e       	andi	r18, 0xEF	; 239
    1c0c:	b2 2e       	mov	r11, r18
    1c0e:	2a e0       	ldi	r18, 0x0A	; 10
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	25 c0       	rjmp	.+74     	; 0x1c5e <vfprintf+0x298>
    1c14:	93 2d       	mov	r25, r3
    1c16:	99 7f       	andi	r25, 0xF9	; 249
    1c18:	b9 2e       	mov	r11, r25
    1c1a:	8f 36       	cpi	r24, 0x6F	; 111
    1c1c:	c1 f0       	breq	.+48     	; 0x1c4e <vfprintf+0x288>
    1c1e:	18 f4       	brcc	.+6      	; 0x1c26 <vfprintf+0x260>
    1c20:	88 35       	cpi	r24, 0x58	; 88
    1c22:	79 f0       	breq	.+30     	; 0x1c42 <vfprintf+0x27c>
    1c24:	ae c0       	rjmp	.+348    	; 0x1d82 <vfprintf+0x3bc>
    1c26:	80 37       	cpi	r24, 0x70	; 112
    1c28:	19 f0       	breq	.+6      	; 0x1c30 <vfprintf+0x26a>
    1c2a:	88 37       	cpi	r24, 0x78	; 120
    1c2c:	21 f0       	breq	.+8      	; 0x1c36 <vfprintf+0x270>
    1c2e:	a9 c0       	rjmp	.+338    	; 0x1d82 <vfprintf+0x3bc>
    1c30:	e9 2f       	mov	r30, r25
    1c32:	e0 61       	ori	r30, 0x10	; 16
    1c34:	be 2e       	mov	r11, r30
    1c36:	b4 fe       	sbrs	r11, 4
    1c38:	0d c0       	rjmp	.+26     	; 0x1c54 <vfprintf+0x28e>
    1c3a:	fb 2d       	mov	r31, r11
    1c3c:	f4 60       	ori	r31, 0x04	; 4
    1c3e:	bf 2e       	mov	r11, r31
    1c40:	09 c0       	rjmp	.+18     	; 0x1c54 <vfprintf+0x28e>
    1c42:	34 fe       	sbrs	r3, 4
    1c44:	0a c0       	rjmp	.+20     	; 0x1c5a <vfprintf+0x294>
    1c46:	29 2f       	mov	r18, r25
    1c48:	26 60       	ori	r18, 0x06	; 6
    1c4a:	b2 2e       	mov	r11, r18
    1c4c:	06 c0       	rjmp	.+12     	; 0x1c5a <vfprintf+0x294>
    1c4e:	28 e0       	ldi	r18, 0x08	; 8
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	05 c0       	rjmp	.+10     	; 0x1c5e <vfprintf+0x298>
    1c54:	20 e1       	ldi	r18, 0x10	; 16
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <vfprintf+0x298>
    1c5a:	20 e1       	ldi	r18, 0x10	; 16
    1c5c:	32 e0       	ldi	r19, 0x02	; 2
    1c5e:	f8 01       	movw	r30, r16
    1c60:	b7 fe       	sbrs	r11, 7
    1c62:	07 c0       	rjmp	.+14     	; 0x1c72 <vfprintf+0x2ac>
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	0c 5f       	subi	r16, 0xFC	; 252
    1c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c70:	06 c0       	rjmp	.+12     	; 0x1c7e <vfprintf+0x2b8>
    1c72:	60 81       	ld	r22, Z
    1c74:	71 81       	ldd	r23, Z+1	; 0x01
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	0e 5f       	subi	r16, 0xFE	; 254
    1c7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7e:	a3 01       	movw	r20, r6
    1c80:	43 d2       	rcall	.+1158   	; 0x2108 <__ultoa_invert>
    1c82:	88 2e       	mov	r8, r24
    1c84:	86 18       	sub	r8, r6
    1c86:	fb 2d       	mov	r31, r11
    1c88:	ff 77       	andi	r31, 0x7F	; 127
    1c8a:	3f 2e       	mov	r3, r31
    1c8c:	36 fe       	sbrs	r3, 6
    1c8e:	0d c0       	rjmp	.+26     	; 0x1caa <vfprintf+0x2e4>
    1c90:	23 2d       	mov	r18, r3
    1c92:	2e 7f       	andi	r18, 0xFE	; 254
    1c94:	a2 2e       	mov	r10, r18
    1c96:	89 14       	cp	r8, r9
    1c98:	58 f4       	brcc	.+22     	; 0x1cb0 <vfprintf+0x2ea>
    1c9a:	34 fe       	sbrs	r3, 4
    1c9c:	0b c0       	rjmp	.+22     	; 0x1cb4 <vfprintf+0x2ee>
    1c9e:	32 fc       	sbrc	r3, 2
    1ca0:	09 c0       	rjmp	.+18     	; 0x1cb4 <vfprintf+0x2ee>
    1ca2:	83 2d       	mov	r24, r3
    1ca4:	8e 7e       	andi	r24, 0xEE	; 238
    1ca6:	a8 2e       	mov	r10, r24
    1ca8:	05 c0       	rjmp	.+10     	; 0x1cb4 <vfprintf+0x2ee>
    1caa:	b8 2c       	mov	r11, r8
    1cac:	a3 2c       	mov	r10, r3
    1cae:	03 c0       	rjmp	.+6      	; 0x1cb6 <vfprintf+0x2f0>
    1cb0:	b8 2c       	mov	r11, r8
    1cb2:	01 c0       	rjmp	.+2      	; 0x1cb6 <vfprintf+0x2f0>
    1cb4:	b9 2c       	mov	r11, r9
    1cb6:	a4 fe       	sbrs	r10, 4
    1cb8:	0f c0       	rjmp	.+30     	; 0x1cd8 <vfprintf+0x312>
    1cba:	fe 01       	movw	r30, r28
    1cbc:	e8 0d       	add	r30, r8
    1cbe:	f1 1d       	adc	r31, r1
    1cc0:	80 81       	ld	r24, Z
    1cc2:	80 33       	cpi	r24, 0x30	; 48
    1cc4:	21 f4       	brne	.+8      	; 0x1cce <vfprintf+0x308>
    1cc6:	9a 2d       	mov	r25, r10
    1cc8:	99 7e       	andi	r25, 0xE9	; 233
    1cca:	a9 2e       	mov	r10, r25
    1ccc:	09 c0       	rjmp	.+18     	; 0x1ce0 <vfprintf+0x31a>
    1cce:	a2 fe       	sbrs	r10, 2
    1cd0:	06 c0       	rjmp	.+12     	; 0x1cde <vfprintf+0x318>
    1cd2:	b3 94       	inc	r11
    1cd4:	b3 94       	inc	r11
    1cd6:	04 c0       	rjmp	.+8      	; 0x1ce0 <vfprintf+0x31a>
    1cd8:	8a 2d       	mov	r24, r10
    1cda:	86 78       	andi	r24, 0x86	; 134
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <vfprintf+0x31a>
    1cde:	b3 94       	inc	r11
    1ce0:	a3 fc       	sbrc	r10, 3
    1ce2:	10 c0       	rjmp	.+32     	; 0x1d04 <vfprintf+0x33e>
    1ce4:	a0 fe       	sbrs	r10, 0
    1ce6:	06 c0       	rjmp	.+12     	; 0x1cf4 <vfprintf+0x32e>
    1ce8:	b2 14       	cp	r11, r2
    1cea:	80 f4       	brcc	.+32     	; 0x1d0c <vfprintf+0x346>
    1cec:	28 0c       	add	r2, r8
    1cee:	92 2c       	mov	r9, r2
    1cf0:	9b 18       	sub	r9, r11
    1cf2:	0d c0       	rjmp	.+26     	; 0x1d0e <vfprintf+0x348>
    1cf4:	b2 14       	cp	r11, r2
    1cf6:	58 f4       	brcc	.+22     	; 0x1d0e <vfprintf+0x348>
    1cf8:	b6 01       	movw	r22, r12
    1cfa:	80 e2       	ldi	r24, 0x20	; 32
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	c8 d1       	rcall	.+912    	; 0x2090 <fputc>
    1d00:	b3 94       	inc	r11
    1d02:	f8 cf       	rjmp	.-16     	; 0x1cf4 <vfprintf+0x32e>
    1d04:	b2 14       	cp	r11, r2
    1d06:	18 f4       	brcc	.+6      	; 0x1d0e <vfprintf+0x348>
    1d08:	2b 18       	sub	r2, r11
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <vfprintf+0x34a>
    1d0c:	98 2c       	mov	r9, r8
    1d0e:	21 2c       	mov	r2, r1
    1d10:	a4 fe       	sbrs	r10, 4
    1d12:	0f c0       	rjmp	.+30     	; 0x1d32 <vfprintf+0x36c>
    1d14:	b6 01       	movw	r22, r12
    1d16:	80 e3       	ldi	r24, 0x30	; 48
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	ba d1       	rcall	.+884    	; 0x2090 <fputc>
    1d1c:	a2 fe       	sbrs	r10, 2
    1d1e:	16 c0       	rjmp	.+44     	; 0x1d4c <vfprintf+0x386>
    1d20:	a1 fc       	sbrc	r10, 1
    1d22:	03 c0       	rjmp	.+6      	; 0x1d2a <vfprintf+0x364>
    1d24:	88 e7       	ldi	r24, 0x78	; 120
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <vfprintf+0x368>
    1d2a:	88 e5       	ldi	r24, 0x58	; 88
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	b6 01       	movw	r22, r12
    1d30:	0c c0       	rjmp	.+24     	; 0x1d4a <vfprintf+0x384>
    1d32:	8a 2d       	mov	r24, r10
    1d34:	86 78       	andi	r24, 0x86	; 134
    1d36:	51 f0       	breq	.+20     	; 0x1d4c <vfprintf+0x386>
    1d38:	a1 fe       	sbrs	r10, 1
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <vfprintf+0x37a>
    1d3c:	8b e2       	ldi	r24, 0x2B	; 43
    1d3e:	01 c0       	rjmp	.+2      	; 0x1d42 <vfprintf+0x37c>
    1d40:	80 e2       	ldi	r24, 0x20	; 32
    1d42:	a7 fc       	sbrc	r10, 7
    1d44:	8d e2       	ldi	r24, 0x2D	; 45
    1d46:	b6 01       	movw	r22, r12
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	a2 d1       	rcall	.+836    	; 0x2090 <fputc>
    1d4c:	89 14       	cp	r8, r9
    1d4e:	30 f4       	brcc	.+12     	; 0x1d5c <vfprintf+0x396>
    1d50:	b6 01       	movw	r22, r12
    1d52:	80 e3       	ldi	r24, 0x30	; 48
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	9c d1       	rcall	.+824    	; 0x2090 <fputc>
    1d58:	9a 94       	dec	r9
    1d5a:	f8 cf       	rjmp	.-16     	; 0x1d4c <vfprintf+0x386>
    1d5c:	8a 94       	dec	r8
    1d5e:	f3 01       	movw	r30, r6
    1d60:	e8 0d       	add	r30, r8
    1d62:	f1 1d       	adc	r31, r1
    1d64:	80 81       	ld	r24, Z
    1d66:	b6 01       	movw	r22, r12
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	92 d1       	rcall	.+804    	; 0x2090 <fputc>
    1d6c:	81 10       	cpse	r8, r1
    1d6e:	f6 cf       	rjmp	.-20     	; 0x1d5c <vfprintf+0x396>
    1d70:	22 20       	and	r2, r2
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <vfprintf+0x3b0>
    1d74:	4e ce       	rjmp	.-868    	; 0x1a12 <vfprintf+0x4c>
    1d76:	b6 01       	movw	r22, r12
    1d78:	80 e2       	ldi	r24, 0x20	; 32
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	89 d1       	rcall	.+786    	; 0x2090 <fputc>
    1d7e:	2a 94       	dec	r2
    1d80:	f7 cf       	rjmp	.-18     	; 0x1d70 <vfprintf+0x3aa>
    1d82:	f6 01       	movw	r30, r12
    1d84:	86 81       	ldd	r24, Z+6	; 0x06
    1d86:	97 81       	ldd	r25, Z+7	; 0x07
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <vfprintf+0x3c8>
    1d8a:	8f ef       	ldi	r24, 0xFF	; 255
    1d8c:	9f ef       	ldi	r25, 0xFF	; 255
    1d8e:	2b 96       	adiw	r28, 0x0b	; 11
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	ff 90       	pop	r15
    1da4:	ef 90       	pop	r14
    1da6:	df 90       	pop	r13
    1da8:	cf 90       	pop	r12
    1daa:	bf 90       	pop	r11
    1dac:	af 90       	pop	r10
    1dae:	9f 90       	pop	r9
    1db0:	8f 90       	pop	r8
    1db2:	7f 90       	pop	r7
    1db4:	6f 90       	pop	r6
    1db6:	5f 90       	pop	r5
    1db8:	4f 90       	pop	r4
    1dba:	3f 90       	pop	r3
    1dbc:	2f 90       	pop	r2
    1dbe:	08 95       	ret

00001dc0 <calloc>:
    1dc0:	0f 93       	push	r16
    1dc2:	1f 93       	push	r17
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	86 9f       	mul	r24, r22
    1dca:	80 01       	movw	r16, r0
    1dcc:	87 9f       	mul	r24, r23
    1dce:	10 0d       	add	r17, r0
    1dd0:	96 9f       	mul	r25, r22
    1dd2:	10 0d       	add	r17, r0
    1dd4:	11 24       	eor	r1, r1
    1dd6:	c8 01       	movw	r24, r16
    1dd8:	0d d0       	rcall	.+26     	; 0x1df4 <malloc>
    1dda:	ec 01       	movw	r28, r24
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	21 f0       	breq	.+8      	; 0x1de8 <calloc+0x28>
    1de0:	a8 01       	movw	r20, r16
    1de2:	60 e0       	ldi	r22, 0x00	; 0
    1de4:	70 e0       	ldi	r23, 0x00	; 0
    1de6:	32 d1       	rcall	.+612    	; 0x204c <memset>
    1de8:	ce 01       	movw	r24, r28
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	1f 91       	pop	r17
    1df0:	0f 91       	pop	r16
    1df2:	08 95       	ret

00001df4 <malloc>:
    1df4:	0f 93       	push	r16
    1df6:	1f 93       	push	r17
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	82 30       	cpi	r24, 0x02	; 2
    1dfe:	91 05       	cpc	r25, r1
    1e00:	10 f4       	brcc	.+4      	; 0x1e06 <malloc+0x12>
    1e02:	82 e0       	ldi	r24, 0x02	; 2
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <__flp>
    1e0a:	f0 91 ce 03 	lds	r31, 0x03CE	; 0x8003ce <__flp+0x1>
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	a0 e0       	ldi	r26, 0x00	; 0
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	30 97       	sbiw	r30, 0x00	; 0
    1e18:	19 f1       	breq	.+70     	; 0x1e60 <malloc+0x6c>
    1e1a:	40 81       	ld	r20, Z
    1e1c:	51 81       	ldd	r21, Z+1	; 0x01
    1e1e:	02 81       	ldd	r16, Z+2	; 0x02
    1e20:	13 81       	ldd	r17, Z+3	; 0x03
    1e22:	48 17       	cp	r20, r24
    1e24:	59 07       	cpc	r21, r25
    1e26:	c8 f0       	brcs	.+50     	; 0x1e5a <malloc+0x66>
    1e28:	84 17       	cp	r24, r20
    1e2a:	95 07       	cpc	r25, r21
    1e2c:	69 f4       	brne	.+26     	; 0x1e48 <malloc+0x54>
    1e2e:	10 97       	sbiw	r26, 0x00	; 0
    1e30:	31 f0       	breq	.+12     	; 0x1e3e <malloc+0x4a>
    1e32:	12 96       	adiw	r26, 0x02	; 2
    1e34:	0c 93       	st	X, r16
    1e36:	12 97       	sbiw	r26, 0x02	; 2
    1e38:	13 96       	adiw	r26, 0x03	; 3
    1e3a:	1c 93       	st	X, r17
    1e3c:	27 c0       	rjmp	.+78     	; 0x1e8c <malloc+0x98>
    1e3e:	00 93 cd 03 	sts	0x03CD, r16	; 0x8003cd <__flp>
    1e42:	10 93 ce 03 	sts	0x03CE, r17	; 0x8003ce <__flp+0x1>
    1e46:	22 c0       	rjmp	.+68     	; 0x1e8c <malloc+0x98>
    1e48:	21 15       	cp	r18, r1
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	19 f0       	breq	.+6      	; 0x1e54 <malloc+0x60>
    1e4e:	42 17       	cp	r20, r18
    1e50:	53 07       	cpc	r21, r19
    1e52:	18 f4       	brcc	.+6      	; 0x1e5a <malloc+0x66>
    1e54:	9a 01       	movw	r18, r20
    1e56:	bd 01       	movw	r22, r26
    1e58:	ef 01       	movw	r28, r30
    1e5a:	df 01       	movw	r26, r30
    1e5c:	f8 01       	movw	r30, r16
    1e5e:	db cf       	rjmp	.-74     	; 0x1e16 <malloc+0x22>
    1e60:	21 15       	cp	r18, r1
    1e62:	31 05       	cpc	r19, r1
    1e64:	f9 f0       	breq	.+62     	; 0x1ea4 <malloc+0xb0>
    1e66:	28 1b       	sub	r18, r24
    1e68:	39 0b       	sbc	r19, r25
    1e6a:	24 30       	cpi	r18, 0x04	; 4
    1e6c:	31 05       	cpc	r19, r1
    1e6e:	80 f4       	brcc	.+32     	; 0x1e90 <malloc+0x9c>
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	9b 81       	ldd	r25, Y+3	; 0x03
    1e74:	61 15       	cp	r22, r1
    1e76:	71 05       	cpc	r23, r1
    1e78:	21 f0       	breq	.+8      	; 0x1e82 <malloc+0x8e>
    1e7a:	fb 01       	movw	r30, r22
    1e7c:	93 83       	std	Z+3, r25	; 0x03
    1e7e:	82 83       	std	Z+2, r24	; 0x02
    1e80:	04 c0       	rjmp	.+8      	; 0x1e8a <malloc+0x96>
    1e82:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <__flp+0x1>
    1e86:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <__flp>
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	32 96       	adiw	r30, 0x02	; 2
    1e8e:	44 c0       	rjmp	.+136    	; 0x1f18 <malloc+0x124>
    1e90:	fe 01       	movw	r30, r28
    1e92:	e2 0f       	add	r30, r18
    1e94:	f3 1f       	adc	r31, r19
    1e96:	81 93       	st	Z+, r24
    1e98:	91 93       	st	Z+, r25
    1e9a:	22 50       	subi	r18, 0x02	; 2
    1e9c:	31 09       	sbc	r19, r1
    1e9e:	39 83       	std	Y+1, r19	; 0x01
    1ea0:	28 83       	st	Y, r18
    1ea2:	3a c0       	rjmp	.+116    	; 0x1f18 <malloc+0x124>
    1ea4:	20 91 cb 03 	lds	r18, 0x03CB	; 0x8003cb <__brkval>
    1ea8:	30 91 cc 03 	lds	r19, 0x03CC	; 0x8003cc <__brkval+0x1>
    1eac:	23 2b       	or	r18, r19
    1eae:	41 f4       	brne	.+16     	; 0x1ec0 <malloc+0xcc>
    1eb0:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1eb4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1eb8:	30 93 cc 03 	sts	0x03CC, r19	; 0x8003cc <__brkval+0x1>
    1ebc:	20 93 cb 03 	sts	0x03CB, r18	; 0x8003cb <__brkval>
    1ec0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1ec4:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1ec8:	21 15       	cp	r18, r1
    1eca:	31 05       	cpc	r19, r1
    1ecc:	41 f4       	brne	.+16     	; 0x1ede <malloc+0xea>
    1ece:	2d b7       	in	r18, 0x3d	; 61
    1ed0:	3e b7       	in	r19, 0x3e	; 62
    1ed2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1ed6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1eda:	24 1b       	sub	r18, r20
    1edc:	35 0b       	sbc	r19, r21
    1ede:	e0 91 cb 03 	lds	r30, 0x03CB	; 0x8003cb <__brkval>
    1ee2:	f0 91 cc 03 	lds	r31, 0x03CC	; 0x8003cc <__brkval+0x1>
    1ee6:	e2 17       	cp	r30, r18
    1ee8:	f3 07       	cpc	r31, r19
    1eea:	a0 f4       	brcc	.+40     	; 0x1f14 <malloc+0x120>
    1eec:	2e 1b       	sub	r18, r30
    1eee:	3f 0b       	sbc	r19, r31
    1ef0:	28 17       	cp	r18, r24
    1ef2:	39 07       	cpc	r19, r25
    1ef4:	78 f0       	brcs	.+30     	; 0x1f14 <malloc+0x120>
    1ef6:	ac 01       	movw	r20, r24
    1ef8:	4e 5f       	subi	r20, 0xFE	; 254
    1efa:	5f 4f       	sbci	r21, 0xFF	; 255
    1efc:	24 17       	cp	r18, r20
    1efe:	35 07       	cpc	r19, r21
    1f00:	48 f0       	brcs	.+18     	; 0x1f14 <malloc+0x120>
    1f02:	4e 0f       	add	r20, r30
    1f04:	5f 1f       	adc	r21, r31
    1f06:	50 93 cc 03 	sts	0x03CC, r21	; 0x8003cc <__brkval+0x1>
    1f0a:	40 93 cb 03 	sts	0x03CB, r20	; 0x8003cb <__brkval>
    1f0e:	81 93       	st	Z+, r24
    1f10:	91 93       	st	Z+, r25
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <malloc+0x124>
    1f14:	e0 e0       	ldi	r30, 0x00	; 0
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	cf 01       	movw	r24, r30
    1f1a:	df 91       	pop	r29
    1f1c:	cf 91       	pop	r28
    1f1e:	1f 91       	pop	r17
    1f20:	0f 91       	pop	r16
    1f22:	08 95       	ret

00001f24 <free>:
    1f24:	cf 93       	push	r28
    1f26:	df 93       	push	r29
    1f28:	00 97       	sbiw	r24, 0x00	; 0
    1f2a:	09 f4       	brne	.+2      	; 0x1f2e <free+0xa>
    1f2c:	81 c0       	rjmp	.+258    	; 0x2030 <free+0x10c>
    1f2e:	fc 01       	movw	r30, r24
    1f30:	32 97       	sbiw	r30, 0x02	; 2
    1f32:	13 82       	std	Z+3, r1	; 0x03
    1f34:	12 82       	std	Z+2, r1	; 0x02
    1f36:	a0 91 cd 03 	lds	r26, 0x03CD	; 0x8003cd <__flp>
    1f3a:	b0 91 ce 03 	lds	r27, 0x03CE	; 0x8003ce <__flp+0x1>
    1f3e:	10 97       	sbiw	r26, 0x00	; 0
    1f40:	81 f4       	brne	.+32     	; 0x1f62 <free+0x3e>
    1f42:	20 81       	ld	r18, Z
    1f44:	31 81       	ldd	r19, Z+1	; 0x01
    1f46:	82 0f       	add	r24, r18
    1f48:	93 1f       	adc	r25, r19
    1f4a:	20 91 cb 03 	lds	r18, 0x03CB	; 0x8003cb <__brkval>
    1f4e:	30 91 cc 03 	lds	r19, 0x03CC	; 0x8003cc <__brkval+0x1>
    1f52:	28 17       	cp	r18, r24
    1f54:	39 07       	cpc	r19, r25
    1f56:	51 f5       	brne	.+84     	; 0x1fac <free+0x88>
    1f58:	f0 93 cc 03 	sts	0x03CC, r31	; 0x8003cc <__brkval+0x1>
    1f5c:	e0 93 cb 03 	sts	0x03CB, r30	; 0x8003cb <__brkval>
    1f60:	67 c0       	rjmp	.+206    	; 0x2030 <free+0x10c>
    1f62:	ed 01       	movw	r28, r26
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	ce 17       	cp	r28, r30
    1f6a:	df 07       	cpc	r29, r31
    1f6c:	40 f4       	brcc	.+16     	; 0x1f7e <free+0x5a>
    1f6e:	4a 81       	ldd	r20, Y+2	; 0x02
    1f70:	5b 81       	ldd	r21, Y+3	; 0x03
    1f72:	9e 01       	movw	r18, r28
    1f74:	41 15       	cp	r20, r1
    1f76:	51 05       	cpc	r21, r1
    1f78:	f1 f0       	breq	.+60     	; 0x1fb6 <free+0x92>
    1f7a:	ea 01       	movw	r28, r20
    1f7c:	f5 cf       	rjmp	.-22     	; 0x1f68 <free+0x44>
    1f7e:	d3 83       	std	Z+3, r29	; 0x03
    1f80:	c2 83       	std	Z+2, r28	; 0x02
    1f82:	40 81       	ld	r20, Z
    1f84:	51 81       	ldd	r21, Z+1	; 0x01
    1f86:	84 0f       	add	r24, r20
    1f88:	95 1f       	adc	r25, r21
    1f8a:	c8 17       	cp	r28, r24
    1f8c:	d9 07       	cpc	r29, r25
    1f8e:	59 f4       	brne	.+22     	; 0x1fa6 <free+0x82>
    1f90:	88 81       	ld	r24, Y
    1f92:	99 81       	ldd	r25, Y+1	; 0x01
    1f94:	84 0f       	add	r24, r20
    1f96:	95 1f       	adc	r25, r21
    1f98:	02 96       	adiw	r24, 0x02	; 2
    1f9a:	91 83       	std	Z+1, r25	; 0x01
    1f9c:	80 83       	st	Z, r24
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa2:	93 83       	std	Z+3, r25	; 0x03
    1fa4:	82 83       	std	Z+2, r24	; 0x02
    1fa6:	21 15       	cp	r18, r1
    1fa8:	31 05       	cpc	r19, r1
    1faa:	29 f4       	brne	.+10     	; 0x1fb6 <free+0x92>
    1fac:	f0 93 ce 03 	sts	0x03CE, r31	; 0x8003ce <__flp+0x1>
    1fb0:	e0 93 cd 03 	sts	0x03CD, r30	; 0x8003cd <__flp>
    1fb4:	3d c0       	rjmp	.+122    	; 0x2030 <free+0x10c>
    1fb6:	e9 01       	movw	r28, r18
    1fb8:	fb 83       	std	Y+3, r31	; 0x03
    1fba:	ea 83       	std	Y+2, r30	; 0x02
    1fbc:	49 91       	ld	r20, Y+
    1fbe:	59 91       	ld	r21, Y+
    1fc0:	c4 0f       	add	r28, r20
    1fc2:	d5 1f       	adc	r29, r21
    1fc4:	ec 17       	cp	r30, r28
    1fc6:	fd 07       	cpc	r31, r29
    1fc8:	61 f4       	brne	.+24     	; 0x1fe2 <free+0xbe>
    1fca:	80 81       	ld	r24, Z
    1fcc:	91 81       	ldd	r25, Z+1	; 0x01
    1fce:	84 0f       	add	r24, r20
    1fd0:	95 1f       	adc	r25, r21
    1fd2:	02 96       	adiw	r24, 0x02	; 2
    1fd4:	e9 01       	movw	r28, r18
    1fd6:	99 83       	std	Y+1, r25	; 0x01
    1fd8:	88 83       	st	Y, r24
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	93 81       	ldd	r25, Z+3	; 0x03
    1fde:	9b 83       	std	Y+3, r25	; 0x03
    1fe0:	8a 83       	std	Y+2, r24	; 0x02
    1fe2:	e0 e0       	ldi	r30, 0x00	; 0
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	12 96       	adiw	r26, 0x02	; 2
    1fe8:	8d 91       	ld	r24, X+
    1fea:	9c 91       	ld	r25, X
    1fec:	13 97       	sbiw	r26, 0x03	; 3
    1fee:	00 97       	sbiw	r24, 0x00	; 0
    1ff0:	19 f0       	breq	.+6      	; 0x1ff8 <free+0xd4>
    1ff2:	fd 01       	movw	r30, r26
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	f7 cf       	rjmp	.-18     	; 0x1fe6 <free+0xc2>
    1ff8:	8d 91       	ld	r24, X+
    1ffa:	9c 91       	ld	r25, X
    1ffc:	11 97       	sbiw	r26, 0x01	; 1
    1ffe:	9d 01       	movw	r18, r26
    2000:	2e 5f       	subi	r18, 0xFE	; 254
    2002:	3f 4f       	sbci	r19, 0xFF	; 255
    2004:	82 0f       	add	r24, r18
    2006:	93 1f       	adc	r25, r19
    2008:	20 91 cb 03 	lds	r18, 0x03CB	; 0x8003cb <__brkval>
    200c:	30 91 cc 03 	lds	r19, 0x03CC	; 0x8003cc <__brkval+0x1>
    2010:	28 17       	cp	r18, r24
    2012:	39 07       	cpc	r19, r25
    2014:	69 f4       	brne	.+26     	; 0x2030 <free+0x10c>
    2016:	30 97       	sbiw	r30, 0x00	; 0
    2018:	29 f4       	brne	.+10     	; 0x2024 <free+0x100>
    201a:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <__flp+0x1>
    201e:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <__flp>
    2022:	02 c0       	rjmp	.+4      	; 0x2028 <free+0x104>
    2024:	13 82       	std	Z+3, r1	; 0x03
    2026:	12 82       	std	Z+2, r1	; 0x02
    2028:	b0 93 cc 03 	sts	0x03CC, r27	; 0x8003cc <__brkval+0x1>
    202c:	a0 93 cb 03 	sts	0x03CB, r26	; 0x8003cb <__brkval>
    2030:	df 91       	pop	r29
    2032:	cf 91       	pop	r28
    2034:	08 95       	ret

00002036 <strnlen_P>:
    2036:	fc 01       	movw	r30, r24
    2038:	05 90       	lpm	r0, Z+
    203a:	61 50       	subi	r22, 0x01	; 1
    203c:	70 40       	sbci	r23, 0x00	; 0
    203e:	01 10       	cpse	r0, r1
    2040:	d8 f7       	brcc	.-10     	; 0x2038 <strnlen_P+0x2>
    2042:	80 95       	com	r24
    2044:	90 95       	com	r25
    2046:	8e 0f       	add	r24, r30
    2048:	9f 1f       	adc	r25, r31
    204a:	08 95       	ret

0000204c <memset>:
    204c:	dc 01       	movw	r26, r24
    204e:	01 c0       	rjmp	.+2      	; 0x2052 <memset+0x6>
    2050:	6d 93       	st	X+, r22
    2052:	41 50       	subi	r20, 0x01	; 1
    2054:	50 40       	sbci	r21, 0x00	; 0
    2056:	e0 f7       	brcc	.-8      	; 0x2050 <memset+0x4>
    2058:	08 95       	ret

0000205a <strnlen>:
    205a:	fc 01       	movw	r30, r24
    205c:	61 50       	subi	r22, 0x01	; 1
    205e:	70 40       	sbci	r23, 0x00	; 0
    2060:	01 90       	ld	r0, Z+
    2062:	01 10       	cpse	r0, r1
    2064:	d8 f7       	brcc	.-10     	; 0x205c <strnlen+0x2>
    2066:	80 95       	com	r24
    2068:	90 95       	com	r25
    206a:	8e 0f       	add	r24, r30
    206c:	9f 1f       	adc	r25, r31
    206e:	08 95       	ret

00002070 <strrev>:
    2070:	dc 01       	movw	r26, r24
    2072:	fc 01       	movw	r30, r24
    2074:	67 2f       	mov	r22, r23
    2076:	71 91       	ld	r23, Z+
    2078:	77 23       	and	r23, r23
    207a:	e1 f7       	brne	.-8      	; 0x2074 <strrev+0x4>
    207c:	32 97       	sbiw	r30, 0x02	; 2
    207e:	04 c0       	rjmp	.+8      	; 0x2088 <strrev+0x18>
    2080:	7c 91       	ld	r23, X
    2082:	6d 93       	st	X+, r22
    2084:	70 83       	st	Z, r23
    2086:	62 91       	ld	r22, -Z
    2088:	ae 17       	cp	r26, r30
    208a:	bf 07       	cpc	r27, r31
    208c:	c8 f3       	brcs	.-14     	; 0x2080 <strrev+0x10>
    208e:	08 95       	ret

00002090 <fputc>:
    2090:	0f 93       	push	r16
    2092:	1f 93       	push	r17
    2094:	cf 93       	push	r28
    2096:	df 93       	push	r29
    2098:	fb 01       	movw	r30, r22
    209a:	23 81       	ldd	r18, Z+3	; 0x03
    209c:	21 fd       	sbrc	r18, 1
    209e:	03 c0       	rjmp	.+6      	; 0x20a6 <fputc+0x16>
    20a0:	8f ef       	ldi	r24, 0xFF	; 255
    20a2:	9f ef       	ldi	r25, 0xFF	; 255
    20a4:	2c c0       	rjmp	.+88     	; 0x20fe <fputc+0x6e>
    20a6:	22 ff       	sbrs	r18, 2
    20a8:	16 c0       	rjmp	.+44     	; 0x20d6 <fputc+0x46>
    20aa:	46 81       	ldd	r20, Z+6	; 0x06
    20ac:	57 81       	ldd	r21, Z+7	; 0x07
    20ae:	24 81       	ldd	r18, Z+4	; 0x04
    20b0:	35 81       	ldd	r19, Z+5	; 0x05
    20b2:	42 17       	cp	r20, r18
    20b4:	53 07       	cpc	r21, r19
    20b6:	44 f4       	brge	.+16     	; 0x20c8 <fputc+0x38>
    20b8:	a0 81       	ld	r26, Z
    20ba:	b1 81       	ldd	r27, Z+1	; 0x01
    20bc:	9d 01       	movw	r18, r26
    20be:	2f 5f       	subi	r18, 0xFF	; 255
    20c0:	3f 4f       	sbci	r19, 0xFF	; 255
    20c2:	31 83       	std	Z+1, r19	; 0x01
    20c4:	20 83       	st	Z, r18
    20c6:	8c 93       	st	X, r24
    20c8:	26 81       	ldd	r18, Z+6	; 0x06
    20ca:	37 81       	ldd	r19, Z+7	; 0x07
    20cc:	2f 5f       	subi	r18, 0xFF	; 255
    20ce:	3f 4f       	sbci	r19, 0xFF	; 255
    20d0:	37 83       	std	Z+7, r19	; 0x07
    20d2:	26 83       	std	Z+6, r18	; 0x06
    20d4:	14 c0       	rjmp	.+40     	; 0x20fe <fputc+0x6e>
    20d6:	8b 01       	movw	r16, r22
    20d8:	ec 01       	movw	r28, r24
    20da:	fb 01       	movw	r30, r22
    20dc:	00 84       	ldd	r0, Z+8	; 0x08
    20de:	f1 85       	ldd	r31, Z+9	; 0x09
    20e0:	e0 2d       	mov	r30, r0
    20e2:	19 95       	eicall
    20e4:	89 2b       	or	r24, r25
    20e6:	e1 f6       	brne	.-72     	; 0x20a0 <fputc+0x10>
    20e8:	d8 01       	movw	r26, r16
    20ea:	16 96       	adiw	r26, 0x06	; 6
    20ec:	8d 91       	ld	r24, X+
    20ee:	9c 91       	ld	r25, X
    20f0:	17 97       	sbiw	r26, 0x07	; 7
    20f2:	01 96       	adiw	r24, 0x01	; 1
    20f4:	17 96       	adiw	r26, 0x07	; 7
    20f6:	9c 93       	st	X, r25
    20f8:	8e 93       	st	-X, r24
    20fa:	16 97       	sbiw	r26, 0x06	; 6
    20fc:	ce 01       	movw	r24, r28
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	1f 91       	pop	r17
    2104:	0f 91       	pop	r16
    2106:	08 95       	ret

00002108 <__ultoa_invert>:
    2108:	fa 01       	movw	r30, r20
    210a:	aa 27       	eor	r26, r26
    210c:	28 30       	cpi	r18, 0x08	; 8
    210e:	51 f1       	breq	.+84     	; 0x2164 <__ultoa_invert+0x5c>
    2110:	20 31       	cpi	r18, 0x10	; 16
    2112:	81 f1       	breq	.+96     	; 0x2174 <__ultoa_invert+0x6c>
    2114:	e8 94       	clt
    2116:	6f 93       	push	r22
    2118:	6e 7f       	andi	r22, 0xFE	; 254
    211a:	6e 5f       	subi	r22, 0xFE	; 254
    211c:	7f 4f       	sbci	r23, 0xFF	; 255
    211e:	8f 4f       	sbci	r24, 0xFF	; 255
    2120:	9f 4f       	sbci	r25, 0xFF	; 255
    2122:	af 4f       	sbci	r26, 0xFF	; 255
    2124:	b1 e0       	ldi	r27, 0x01	; 1
    2126:	3e d0       	rcall	.+124    	; 0x21a4 <__ultoa_invert+0x9c>
    2128:	b4 e0       	ldi	r27, 0x04	; 4
    212a:	3c d0       	rcall	.+120    	; 0x21a4 <__ultoa_invert+0x9c>
    212c:	67 0f       	add	r22, r23
    212e:	78 1f       	adc	r23, r24
    2130:	89 1f       	adc	r24, r25
    2132:	9a 1f       	adc	r25, r26
    2134:	a1 1d       	adc	r26, r1
    2136:	68 0f       	add	r22, r24
    2138:	79 1f       	adc	r23, r25
    213a:	8a 1f       	adc	r24, r26
    213c:	91 1d       	adc	r25, r1
    213e:	a1 1d       	adc	r26, r1
    2140:	6a 0f       	add	r22, r26
    2142:	71 1d       	adc	r23, r1
    2144:	81 1d       	adc	r24, r1
    2146:	91 1d       	adc	r25, r1
    2148:	a1 1d       	adc	r26, r1
    214a:	20 d0       	rcall	.+64     	; 0x218c <__ultoa_invert+0x84>
    214c:	09 f4       	brne	.+2      	; 0x2150 <__ultoa_invert+0x48>
    214e:	68 94       	set
    2150:	3f 91       	pop	r19
    2152:	2a e0       	ldi	r18, 0x0A	; 10
    2154:	26 9f       	mul	r18, r22
    2156:	11 24       	eor	r1, r1
    2158:	30 19       	sub	r19, r0
    215a:	30 5d       	subi	r19, 0xD0	; 208
    215c:	31 93       	st	Z+, r19
    215e:	de f6       	brtc	.-74     	; 0x2116 <__ultoa_invert+0xe>
    2160:	cf 01       	movw	r24, r30
    2162:	08 95       	ret
    2164:	46 2f       	mov	r20, r22
    2166:	47 70       	andi	r20, 0x07	; 7
    2168:	40 5d       	subi	r20, 0xD0	; 208
    216a:	41 93       	st	Z+, r20
    216c:	b3 e0       	ldi	r27, 0x03	; 3
    216e:	0f d0       	rcall	.+30     	; 0x218e <__ultoa_invert+0x86>
    2170:	c9 f7       	brne	.-14     	; 0x2164 <__ultoa_invert+0x5c>
    2172:	f6 cf       	rjmp	.-20     	; 0x2160 <__ultoa_invert+0x58>
    2174:	46 2f       	mov	r20, r22
    2176:	4f 70       	andi	r20, 0x0F	; 15
    2178:	40 5d       	subi	r20, 0xD0	; 208
    217a:	4a 33       	cpi	r20, 0x3A	; 58
    217c:	18 f0       	brcs	.+6      	; 0x2184 <__ultoa_invert+0x7c>
    217e:	49 5d       	subi	r20, 0xD9	; 217
    2180:	31 fd       	sbrc	r19, 1
    2182:	40 52       	subi	r20, 0x20	; 32
    2184:	41 93       	st	Z+, r20
    2186:	02 d0       	rcall	.+4      	; 0x218c <__ultoa_invert+0x84>
    2188:	a9 f7       	brne	.-22     	; 0x2174 <__ultoa_invert+0x6c>
    218a:	ea cf       	rjmp	.-44     	; 0x2160 <__ultoa_invert+0x58>
    218c:	b4 e0       	ldi	r27, 0x04	; 4
    218e:	a6 95       	lsr	r26
    2190:	97 95       	ror	r25
    2192:	87 95       	ror	r24
    2194:	77 95       	ror	r23
    2196:	67 95       	ror	r22
    2198:	ba 95       	dec	r27
    219a:	c9 f7       	brne	.-14     	; 0x218e <__ultoa_invert+0x86>
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	61 05       	cpc	r22, r1
    21a0:	71 05       	cpc	r23, r1
    21a2:	08 95       	ret
    21a4:	9b 01       	movw	r18, r22
    21a6:	ac 01       	movw	r20, r24
    21a8:	0a 2e       	mov	r0, r26
    21aa:	06 94       	lsr	r0
    21ac:	57 95       	ror	r21
    21ae:	47 95       	ror	r20
    21b0:	37 95       	ror	r19
    21b2:	27 95       	ror	r18
    21b4:	ba 95       	dec	r27
    21b6:	c9 f7       	brne	.-14     	; 0x21aa <__ultoa_invert+0xa2>
    21b8:	62 0f       	add	r22, r18
    21ba:	73 1f       	adc	r23, r19
    21bc:	84 1f       	adc	r24, r20
    21be:	95 1f       	adc	r25, r21
    21c0:	a0 1d       	adc	r26, r0
    21c2:	08 95       	ret

000021c4 <_exit>:
    21c4:	f8 94       	cli

000021c6 <__stop_program>:
    21c6:	ff cf       	rjmp	.-2      	; 0x21c6 <__stop_program>
