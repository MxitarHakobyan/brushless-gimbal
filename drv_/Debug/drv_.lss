
drv_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001fa  00800200  00001f82  00002016  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  008003fa  008003fa  00002210  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002210  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000226c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  000022ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028d8  00000000  00000000  0000247c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013c3  00000000  00000000  00004d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012bb  00000000  00000000  00006117  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d4  00000000  00000000  000073d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b7e  00000000  00000000  000079a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001af3  00000000  00000000  00008526  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000a019  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9e c0       	rjmp	.+316    	; 0x13e <__ctors_end>
       2:	00 00       	nop
       4:	bc c0       	rjmp	.+376    	; 0x17e <__bad_interrupt>
       6:	00 00       	nop
       8:	ba c0       	rjmp	.+372    	; 0x17e <__bad_interrupt>
       a:	00 00       	nop
       c:	b8 c0       	rjmp	.+368    	; 0x17e <__bad_interrupt>
       e:	00 00       	nop
      10:	b6 c0       	rjmp	.+364    	; 0x17e <__bad_interrupt>
      12:	00 00       	nop
      14:	b4 c0       	rjmp	.+360    	; 0x17e <__bad_interrupt>
      16:	00 00       	nop
      18:	b2 c0       	rjmp	.+356    	; 0x17e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b0 c0       	rjmp	.+352    	; 0x17e <__bad_interrupt>
      1e:	00 00       	nop
      20:	ae c0       	rjmp	.+348    	; 0x17e <__bad_interrupt>
      22:	00 00       	nop
      24:	ac c0       	rjmp	.+344    	; 0x17e <__bad_interrupt>
      26:	00 00       	nop
      28:	aa c0       	rjmp	.+340    	; 0x17e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a8 c0       	rjmp	.+336    	; 0x17e <__bad_interrupt>
      2e:	00 00       	nop
      30:	a6 c0       	rjmp	.+332    	; 0x17e <__bad_interrupt>
      32:	00 00       	nop
      34:	a4 c0       	rjmp	.+328    	; 0x17e <__bad_interrupt>
      36:	00 00       	nop
      38:	a2 c0       	rjmp	.+324    	; 0x17e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a0 c0       	rjmp	.+320    	; 0x17e <__bad_interrupt>
      3e:	00 00       	nop
      40:	9e c0       	rjmp	.+316    	; 0x17e <__bad_interrupt>
      42:	00 00       	nop
      44:	9c c0       	rjmp	.+312    	; 0x17e <__bad_interrupt>
      46:	00 00       	nop
      48:	9a c0       	rjmp	.+308    	; 0x17e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	98 c0       	rjmp	.+304    	; 0x17e <__bad_interrupt>
      4e:	00 00       	nop
      50:	96 c0       	rjmp	.+300    	; 0x17e <__bad_interrupt>
      52:	00 00       	nop
      54:	94 c0       	rjmp	.+296    	; 0x17e <__bad_interrupt>
      56:	00 00       	nop
      58:	92 c0       	rjmp	.+292    	; 0x17e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ae c0       	rjmp	.+348    	; 0x1ba <__vector_23>
      5e:	00 00       	nop
      60:	8e c0       	rjmp	.+284    	; 0x17e <__bad_interrupt>
      62:	00 00       	nop
      64:	8c c0       	rjmp	.+280    	; 0x17e <__bad_interrupt>
      66:	00 00       	nop
      68:	8a c0       	rjmp	.+276    	; 0x17e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	88 c0       	rjmp	.+272    	; 0x17e <__bad_interrupt>
      6e:	00 00       	nop
      70:	86 c0       	rjmp	.+268    	; 0x17e <__bad_interrupt>
      72:	00 00       	nop
      74:	84 c0       	rjmp	.+264    	; 0x17e <__bad_interrupt>
      76:	00 00       	nop
      78:	82 c0       	rjmp	.+260    	; 0x17e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	80 c0       	rjmp	.+256    	; 0x17e <__bad_interrupt>
      7e:	00 00       	nop
      80:	7e c0       	rjmp	.+252    	; 0x17e <__bad_interrupt>
      82:	00 00       	nop
      84:	7c c0       	rjmp	.+248    	; 0x17e <__bad_interrupt>
      86:	00 00       	nop
      88:	7a c0       	rjmp	.+244    	; 0x17e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	78 c0       	rjmp	.+240    	; 0x17e <__bad_interrupt>
      8e:	00 00       	nop
      90:	76 c0       	rjmp	.+236    	; 0x17e <__bad_interrupt>
      92:	00 00       	nop
      94:	74 c0       	rjmp	.+232    	; 0x17e <__bad_interrupt>
      96:	00 00       	nop
      98:	72 c0       	rjmp	.+228    	; 0x17e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	70 c0       	rjmp	.+224    	; 0x17e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6e c0       	rjmp	.+220    	; 0x17e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6c c0       	rjmp	.+216    	; 0x17e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6a c0       	rjmp	.+212    	; 0x17e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	68 c0       	rjmp	.+208    	; 0x17e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	66 c0       	rjmp	.+204    	; 0x17e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	64 c0       	rjmp	.+200    	; 0x17e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	62 c0       	rjmp	.+196    	; 0x17e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	70 c1       	rjmp	.+736    	; 0x39e <__vector_47>
      be:	00 00       	nop
      c0:	5e c0       	rjmp	.+188    	; 0x17e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	5c c0       	rjmp	.+184    	; 0x17e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	5a c0       	rjmp	.+180    	; 0x17e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	58 c0       	rjmp	.+176    	; 0x17e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	56 c0       	rjmp	.+172    	; 0x17e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	54 c0       	rjmp	.+168    	; 0x17e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	52 c0       	rjmp	.+164    	; 0x17e <__bad_interrupt>
      da:	00 00       	nop
      dc:	50 c0       	rjmp	.+160    	; 0x17e <__bad_interrupt>
      de:	00 00       	nop
      e0:	4e c0       	rjmp	.+156    	; 0x17e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	03 6e       	ori	r16, 0xE3	; 227
      e6:	db 36       	cpi	r29, 0x6B	; 107
      e8:	3d 9a       	sbi	0x07, 5	; 7
      ea:	99 99       	sbic	0x13, 1	; 19
      ec:	99 3d       	cpi	r25, 0xD9	; 217
      ee:	ab aa       	std	Y+51, r10	; 0x33
      f0:	aa 2a       	or	r10, r26
      f2:	3e 00       	.word	0x003e	; ????
      f4:	00 00       	nop
      f6:	80 3f       	cpi	r24, 0xF0	; 240
      f8:	07 2c       	mov	r0, r7
      fa:	7a a5       	ldd	r23, Y+42	; 0x2a
      fc:	ba 6c       	ori	r27, 0xCA	; 202
      fe:	c5 90       	lpm	r12, Z+
     100:	da 3b       	cpi	r29, 0xBA	; 186
     102:	93 65       	ori	r25, 0x53	; 83
     104:	fc 8b       	std	Y+20, r31	; 0x14
     106:	bc 53       	subi	r27, 0x3C	; 60
     108:	f8 10       	cpse	r15, r8
     10a:	fd 3c       	cpi	r31, 0xCD	; 205
     10c:	56 92       	lac	Z, r5
     10e:	83 4d       	sbci	r24, 0xD3	; 211
     110:	bd 87       	std	Y+13, r27	; 0x0d
     112:	9d 3a       	cpi	r25, 0xAD	; 173
     114:	b6 3d       	cpi	r27, 0xD6	; 214
     116:	cb c9       	rjmp	.-3178   	; 0xfffff4ae <__eeprom_end+0xff7ef4ae>
     118:	bf 5b       	subi	r27, 0xBF	; 191
     11a:	be 73       	andi	r27, 0x3E	; 62
     11c:	da 0f       	add	r29, r26
     11e:	c9 3f       	cpi	r28, 0xF9	; 249
     120:	05 a8       	ldd	r0, Z+53	; 0x35
     122:	4c cd       	rjmp	.-1384   	; 0xfffffbbc <__eeprom_end+0xff7efbbc>
     124:	b2 d4       	rcall	.+2404   	; 0xa8a <mpu6050_calibrate_gyro+0x94>
     126:	4e b9       	out	0x0e, r20	; 14
     128:	38 36       	cpi	r19, 0x68	; 104
     12a:	a9 02       	muls	r26, r25
     12c:	0c 50       	subi	r16, 0x0C	; 12
     12e:	b9 91       	ld	r27, Y+
     130:	86 88       	ldd	r8, Z+22	; 0x16
     132:	08 3c       	cpi	r16, 0xC8	; 200
     134:	a6 aa       	std	Z+54, r10	; 0x36
     136:	aa 2a       	or	r10, r26
     138:	be 00       	.word	0x00be	; ????
     13a:	00 00       	nop
     13c:	80 3f       	cpi	r24, 0xF0	; 240

0000013e <__ctors_end>:
     13e:	11 24       	eor	r1, r1
     140:	1f be       	out	0x3f, r1	; 63
     142:	cf ef       	ldi	r28, 0xFF	; 255
     144:	d1 e2       	ldi	r29, 0x21	; 33
     146:	de bf       	out	0x3e, r29	; 62
     148:	cd bf       	out	0x3d, r28	; 61
     14a:	00 e0       	ldi	r16, 0x00	; 0
     14c:	0c bf       	out	0x3c, r16	; 60

0000014e <__do_copy_data>:
     14e:	13 e0       	ldi	r17, 0x03	; 3
     150:	a0 e0       	ldi	r26, 0x00	; 0
     152:	b2 e0       	ldi	r27, 0x02	; 2
     154:	e2 e8       	ldi	r30, 0x82	; 130
     156:	ff e1       	ldi	r31, 0x1F	; 31
     158:	00 e0       	ldi	r16, 0x00	; 0
     15a:	0b bf       	out	0x3b, r16	; 59
     15c:	02 c0       	rjmp	.+4      	; 0x162 <__do_copy_data+0x14>
     15e:	07 90       	elpm	r0, Z+
     160:	0d 92       	st	X+, r0
     162:	aa 3f       	cpi	r26, 0xFA	; 250
     164:	b1 07       	cpc	r27, r17
     166:	d9 f7       	brne	.-10     	; 0x15e <__do_copy_data+0x10>

00000168 <__do_clear_bss>:
     168:	24 e0       	ldi	r18, 0x04	; 4
     16a:	aa ef       	ldi	r26, 0xFA	; 250
     16c:	b3 e0       	ldi	r27, 0x03	; 3
     16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
     170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
     172:	a1 32       	cpi	r26, 0x21	; 33
     174:	b2 07       	cpc	r27, r18
     176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
     178:	60 d1       	rcall	.+704    	; 0x43a <main>
     17a:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <_exit>

0000017e <__bad_interrupt>:
     17e:	40 cf       	rjmp	.-384    	; 0x0 <__vectors>

00000180 <init_gpio>:
	*/
	//DDRB|=(1<<PB5);//LED13
	//sbi(DDRB,4);//digital 10
	//sbi(DDRB,5);//digital 11
	//sbi(DDRB,6);//digital 12
	sbi(DDRH,3);//digital 6 OC4A
     180:	e1 e0       	ldi	r30, 0x01	; 1
     182:	f1 e0       	ldi	r31, 0x01	; 1
     184:	80 81       	ld	r24, Z
     186:	88 60       	ori	r24, 0x08	; 8
     188:	80 83       	st	Z, r24
	sbi(DDRH,4);//digital 7 OC4B
     18a:	80 81       	ld	r24, Z
     18c:	80 61       	ori	r24, 0x10	; 16
     18e:	80 83       	st	Z, r24
	sbi(DDRH,5);//digital 8 OC4C
     190:	80 81       	ld	r24, Z
     192:	80 62       	ori	r24, 0x20	; 32
     194:	80 83       	st	Z, r24
     196:	08 95       	ret

00000198 <uart_putchar>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     198:	cf 93       	push	r28
     19a:	c8 2f       	mov	r28, r24
     19c:	8a 30       	cpi	r24, 0x0A	; 10
     19e:	11 f4       	brne	.+4      	; 0x1a4 <uart_putchar+0xc>
     1a0:	8d e0       	ldi	r24, 0x0D	; 13
     1a2:	fa df       	rcall	.-12     	; 0x198 <uart_putchar>
     1a4:	e0 ec       	ldi	r30, 0xC0	; 192
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	85 ff       	sbrs	r24, 5
     1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <uart_putchar+0x10>
     1ae:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <__vector_23>:
     1ba:	1f 92       	push	r1
     1bc:	0f 92       	push	r0
     1be:	0f b6       	in	r0, 0x3f	; 63
     1c0:	0f 92       	push	r0
     1c2:	11 24       	eor	r1, r1
     1c4:	2f 93       	push	r18
     1c6:	3f 93       	push	r19
     1c8:	8f 93       	push	r24
     1ca:	9f 93       	push	r25
     1cc:	af 93       	push	r26
     1ce:	bf 93       	push	r27
     1d0:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <timer0_millis>
     1d4:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <timer0_millis+0x1>
     1d8:	a0 91 ff 03 	lds	r26, 0x03FF	; 0x8003ff <timer0_millis+0x2>
     1dc:	b0 91 00 04 	lds	r27, 0x0400	; 0x800400 <timer0_millis+0x3>
     1e0:	30 91 fc 03 	lds	r19, 0x03FC	; 0x8003fc <timer0_fract>
     1e4:	23 e0       	ldi	r18, 0x03	; 3
     1e6:	23 0f       	add	r18, r19
     1e8:	2d 37       	cpi	r18, 0x7D	; 125
     1ea:	20 f4       	brcc	.+8      	; 0x1f4 <__vector_23+0x3a>
     1ec:	01 96       	adiw	r24, 0x01	; 1
     1ee:	a1 1d       	adc	r26, r1
     1f0:	b1 1d       	adc	r27, r1
     1f2:	05 c0       	rjmp	.+10     	; 0x1fe <__vector_23+0x44>
     1f4:	26 e8       	ldi	r18, 0x86	; 134
     1f6:	23 0f       	add	r18, r19
     1f8:	02 96       	adiw	r24, 0x02	; 2
     1fa:	a1 1d       	adc	r26, r1
     1fc:	b1 1d       	adc	r27, r1
     1fe:	20 93 fc 03 	sts	0x03FC, r18	; 0x8003fc <timer0_fract>
     202:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <timer0_millis>
     206:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <timer0_millis+0x1>
     20a:	a0 93 ff 03 	sts	0x03FF, r26	; 0x8003ff <timer0_millis+0x2>
     20e:	b0 93 00 04 	sts	0x0400, r27	; 0x800400 <timer0_millis+0x3>
     212:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <timer0_overflow_count>
     216:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <timer0_overflow_count+0x1>
     21a:	a0 91 03 04 	lds	r26, 0x0403	; 0x800403 <timer0_overflow_count+0x2>
     21e:	b0 91 04 04 	lds	r27, 0x0404	; 0x800404 <timer0_overflow_count+0x3>
     222:	01 96       	adiw	r24, 0x01	; 1
     224:	a1 1d       	adc	r26, r1
     226:	b1 1d       	adc	r27, r1
     228:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <timer0_overflow_count>
     22c:	90 93 02 04 	sts	0x0402, r25	; 0x800402 <timer0_overflow_count+0x1>
     230:	a0 93 03 04 	sts	0x0403, r26	; 0x800403 <timer0_overflow_count+0x2>
     234:	b0 93 04 04 	sts	0x0404, r27	; 0x800404 <timer0_overflow_count+0x3>
     238:	bf 91       	pop	r27
     23a:	af 91       	pop	r26
     23c:	9f 91       	pop	r25
     23e:	8f 91       	pop	r24
     240:	3f 91       	pop	r19
     242:	2f 91       	pop	r18
     244:	0f 90       	pop	r0
     246:	0f be       	out	0x3f, r0	; 63
     248:	0f 90       	pop	r0
     24a:	1f 90       	pop	r1
     24c:	18 95       	reti

0000024e <micros>:
     24e:	3f b7       	in	r19, 0x3f	; 63
     250:	f8 94       	cli
     252:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <timer0_overflow_count>
     256:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <timer0_overflow_count+0x1>
     25a:	a0 91 03 04 	lds	r26, 0x0403	; 0x800403 <timer0_overflow_count+0x2>
     25e:	b0 91 04 04 	lds	r27, 0x0404	; 0x800404 <timer0_overflow_count+0x3>
     262:	26 b5       	in	r18, 0x26	; 38
     264:	a8 9b       	sbis	0x15, 0	; 21
     266:	05 c0       	rjmp	.+10     	; 0x272 <micros+0x24>
     268:	2f 3f       	cpi	r18, 0xFF	; 255
     26a:	19 f0       	breq	.+6      	; 0x272 <micros+0x24>
     26c:	01 96       	adiw	r24, 0x01	; 1
     26e:	a1 1d       	adc	r26, r1
     270:	b1 1d       	adc	r27, r1
     272:	3f bf       	out	0x3f, r19	; 63
     274:	ba 2f       	mov	r27, r26
     276:	a9 2f       	mov	r26, r25
     278:	98 2f       	mov	r25, r24
     27a:	88 27       	eor	r24, r24
     27c:	82 0f       	add	r24, r18
     27e:	91 1d       	adc	r25, r1
     280:	a1 1d       	adc	r26, r1
     282:	b1 1d       	adc	r27, r1
     284:	bc 01       	movw	r22, r24
     286:	cd 01       	movw	r24, r26
     288:	66 0f       	add	r22, r22
     28a:	77 1f       	adc	r23, r23
     28c:	88 1f       	adc	r24, r24
     28e:	99 1f       	adc	r25, r25
     290:	66 0f       	add	r22, r22
     292:	77 1f       	adc	r23, r23
     294:	88 1f       	adc	r24, r24
     296:	99 1f       	adc	r25, r25
     298:	08 95       	ret

0000029a <PWM_update>:
{
	PWM_update();
}
void PWM_update()//motor pwm update 
{
	U_PWM=pwmSin[U_step];
     29a:	e0 91 fa 03 	lds	r30, 0x03FA	; 0x8003fa <__data_end>
     29e:	f0 91 fb 03 	lds	r31, 0x03FB	; 0x8003fb <__data_end+0x1>
     2a2:	ea 5f       	subi	r30, 0xFA	; 250
     2a4:	fd 4f       	sbci	r31, 0xFD	; 253
     2a6:	80 81       	ld	r24, Z
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     2ae:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
	V_PWM=pwmSin[V_step];
     2b2:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <V_step>
     2b6:	f0 91 72 03 	lds	r31, 0x0372	; 0x800372 <V_step+0x1>
     2ba:	ea 5f       	subi	r30, 0xFA	; 250
     2bc:	fd 4f       	sbci	r31, 0xFD	; 253
     2be:	80 81       	ld	r24, Z
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     2c6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
	W_PWM=pwmSin[W_step];
     2ca:	e0 91 6f 03 	lds	r30, 0x036F	; 0x80036f <W_step>
     2ce:	f0 91 70 03 	lds	r31, 0x0370	; 0x800370 <W_step+0x1>
     2d2:	ea 5f       	subi	r30, 0xFA	; 250
     2d4:	fd 4f       	sbci	r31, 0xFD	; 253
     2d6:	80 81       	ld	r24, Z
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
     2de:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
	U_step=U_step+incr;
     2e2:	60 91 77 03 	lds	r22, 0x0377	; 0x800377 <incr>
     2e6:	70 91 78 03 	lds	r23, 0x0378	; 0x800378 <incr+0x1>
     2ea:	40 91 fa 03 	lds	r20, 0x03FA	; 0x8003fa <__data_end>
     2ee:	50 91 fb 03 	lds	r21, 0x03FB	; 0x8003fb <__data_end+0x1>
     2f2:	46 0f       	add	r20, r22
     2f4:	57 1f       	adc	r21, r23
     2f6:	50 93 fb 03 	sts	0x03FB, r21	; 0x8003fb <__data_end+0x1>
     2fa:	40 93 fa 03 	sts	0x03FA, r20	; 0x8003fa <__data_end>
	V_step=V_step+incr;
     2fe:	20 91 71 03 	lds	r18, 0x0371	; 0x800371 <V_step>
     302:	30 91 72 03 	lds	r19, 0x0372	; 0x800372 <V_step+0x1>
     306:	26 0f       	add	r18, r22
     308:	37 1f       	adc	r19, r23
     30a:	30 93 72 03 	sts	0x0372, r19	; 0x800372 <V_step+0x1>
     30e:	20 93 71 03 	sts	0x0371, r18	; 0x800371 <V_step>
	W_step=W_step+incr;
     312:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <W_step>
     316:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <W_step+0x1>
     31a:	86 0f       	add	r24, r22
     31c:	97 1f       	adc	r25, r23
     31e:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <W_step+0x1>
     322:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <W_step>
	if(U_step > SINE_TABLE_SZ)  
     326:	49 36       	cpi	r20, 0x69	; 105
     328:	61 e0       	ldi	r22, 0x01	; 1
     32a:	56 07       	cpc	r21, r22
     32c:	2c f0       	brlt	.+10     	; 0x338 <PWM_update+0x9e>
		U_step = 0;
     32e:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <__data_end+0x1>
     332:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <__data_end>
     336:	08 c0       	rjmp	.+16     	; 0x348 <PWM_update+0xae>
	if(U_step < 0)  
     338:	55 23       	and	r21, r21
     33a:	34 f4       	brge	.+12     	; 0x348 <PWM_update+0xae>
		U_step = SINE_TABLE_SZ;
     33c:	48 e6       	ldi	r20, 0x68	; 104
     33e:	51 e0       	ldi	r21, 0x01	; 1
     340:	50 93 fb 03 	sts	0x03FB, r21	; 0x8003fb <__data_end+0x1>
     344:	40 93 fa 03 	sts	0x03FA, r20	; 0x8003fa <__data_end>
	
	if(V_step > SINE_TABLE_SZ)  
     348:	29 36       	cpi	r18, 0x69	; 105
     34a:	41 e0       	ldi	r20, 0x01	; 1
     34c:	34 07       	cpc	r19, r20
     34e:	2c f0       	brlt	.+10     	; 0x35a <PWM_update+0xc0>
		V_step = 0;
     350:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <V_step+0x1>
     354:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <V_step>
     358:	08 c0       	rjmp	.+16     	; 0x36a <PWM_update+0xd0>
	if(V_step < 0)  
     35a:	33 23       	and	r19, r19
     35c:	34 f4       	brge	.+12     	; 0x36a <PWM_update+0xd0>
		V_step = SINE_TABLE_SZ;
     35e:	28 e6       	ldi	r18, 0x68	; 104
     360:	31 e0       	ldi	r19, 0x01	; 1
     362:	30 93 72 03 	sts	0x0372, r19	; 0x800372 <V_step+0x1>
     366:	20 93 71 03 	sts	0x0371, r18	; 0x800371 <V_step>
	
	if(W_step > SINE_TABLE_SZ)  
     36a:	89 36       	cpi	r24, 0x69	; 105
     36c:	61 e0       	ldi	r22, 0x01	; 1
     36e:	96 07       	cpc	r25, r22
     370:	2c f0       	brlt	.+10     	; 0x37c <PWM_update+0xe2>
		W_step = 0;
     372:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <W_step+0x1>
     376:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <W_step>
     37a:	08 c0       	rjmp	.+16     	; 0x38c <PWM_update+0xf2>
	if(W_step < 0) 
     37c:	99 23       	and	r25, r25
     37e:	34 f4       	brge	.+12     	; 0x38c <PWM_update+0xf2>
		W_step = SINE_TABLE_SZ;
     380:	88 e6       	ldi	r24, 0x68	; 104
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <W_step+0x1>
     388:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <W_step>
	//_delay_us(100);
	OCR5A=pwm_delay;
     38c:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <pwm_delay>
     390:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <pwm_delay+0x1>
     394:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     398:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     39c:	08 95       	ret

0000039e <__vector_47>:
	SREG = oldSREG;

	return m;
}
ISR(TIMER5_COMPA_vect)//motor update interrupt routine
{
     39e:	1f 92       	push	r1
     3a0:	0f 92       	push	r0
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	0f 92       	push	r0
     3a6:	11 24       	eor	r1, r1
     3a8:	0b b6       	in	r0, 0x3b	; 59
     3aa:	0f 92       	push	r0
     3ac:	2f 93       	push	r18
     3ae:	3f 93       	push	r19
     3b0:	4f 93       	push	r20
     3b2:	5f 93       	push	r21
     3b4:	6f 93       	push	r22
     3b6:	7f 93       	push	r23
     3b8:	8f 93       	push	r24
     3ba:	9f 93       	push	r25
     3bc:	af 93       	push	r26
     3be:	bf 93       	push	r27
     3c0:	ef 93       	push	r30
	PWM_update();
     3c2:	ff 93       	push	r31
}
     3c4:	6a df       	rcall	.-300    	; 0x29a <PWM_update>
     3c6:	ff 91       	pop	r31
     3c8:	ef 91       	pop	r30
     3ca:	bf 91       	pop	r27
     3cc:	af 91       	pop	r26
     3ce:	9f 91       	pop	r25
     3d0:	8f 91       	pop	r24
     3d2:	7f 91       	pop	r23
     3d4:	6f 91       	pop	r22
     3d6:	5f 91       	pop	r21
     3d8:	4f 91       	pop	r20
     3da:	3f 91       	pop	r19
     3dc:	2f 91       	pop	r18
     3de:	0f 90       	pop	r0
     3e0:	0b be       	out	0x3b, r0	; 59
     3e2:	0f 90       	pop	r0
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	0f 90       	pop	r0
     3e8:	1f 90       	pop	r1
     3ea:	18 95       	reti

000003ec <print16>:
	OCR5A=pwm_delay;
}
void print16(int16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     3ec:	0f 93       	push	r16
     3ee:	1f 93       	push	r17
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
     3f8:	2a 97       	sbiw	r28, 0x0a	; 10
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     404:	4a e0       	ldi	r20, 0x0A	; 10
     406:	8e 01       	movw	r16, r28
     408:	0f 5f       	subi	r16, 0xFF	; 255
     40a:	1f 4f       	sbci	r17, 0xFF	; 255
     40c:	b8 01       	movw	r22, r16
     40e:	fc 01       	movw	r30, r24
     410:	80 81       	ld	r24, Z
     412:	91 81       	ldd	r25, Z+1	; 0x01
     414:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     418:	1f 93       	push	r17
     41a:	0f 93       	push	r16
     41c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <printf>
	//printf("\n");
}
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	2a 96       	adiw	r28, 0x0a	; 10
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	08 95       	ret

0000043a <main>:
#endif
//uint8_t pwmSin[] = {128, 132, 136, 140, 143, 147, 151, 155, 159, 162, 166, 170, 174, 178, 181, 185, 189, 192, 196, 200, 203, 207, 211, 214, 218, 221, 225, 228, 232, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 248, 249, 250, 250, 251, 252, 252, 253, 253, 253, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 253, 253, 253, 252, 252, 251, 250, 250, 249, 248, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 248, 249, 250, 250, 251, 252, 252, 253, 253, 253, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 253, 253, 253, 252, 252, 251, 250, 250, 249, 248, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 235, 232, 228, 225, 221, 218, 214, 211, 207, 203, 200, 196, 192, 189, 185, 181, 178, 174, 170, 166, 162, 159, 155, 151, 147, 143, 140, 136, 132, 128, 124, 120, 116, 113, 109, 105, 101, 97, 94, 90, 86, 82, 78, 75, 71, 67, 64, 60, 56, 53, 49, 45, 42, 38, 35, 31, 28, 24, 21, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 8, 7, 6, 6, 5, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 8, 7, 6, 6, 5, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 24, 28, 31, 35, 38, 42, 45, 49, 53, 56, 60, 64, 67, 71, 75, 78, 82, 86, 90, 94, 97, 101, 105, 109, 113, 116, 120, 124};

/*-----------------------------------start of main----------------------------------*/
int main(void)
{				
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	e2 97       	sbiw	r28, 0x32	; 50
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
		
	cli();
	init_gpio();
		#ifdef GYRO
			i2c_init();
     44e:	f8 94       	cli
		#endif
	USART_Init(MY_UBRR);
     450:	97 de       	rcall	.-722    	; 0x180 <init_gpio>
     452:	a7 d4       	rcall	.+2382   	; 0xda2 <i2c_init>
     454:	80 e1       	ldi	r24, 0x10	; 16
	uart_str = fdevopen(uart_putchar, NULL);	
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	55 d5       	rcall	.+2730   	; 0xf04 <USART_Init>
     45a:	60 e0       	ldi	r22, 0x00	; 0
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	8c ec       	ldi	r24, 0xCC	; 204
     460:	90 e0       	ldi	r25, 0x00	; 0
	setup_timer0();
	Enable_timer0_overflow_interrupt();//micros
     462:	0e 94 2e 0b 	call	0x165c	; 0x165c <fdevopen>
	setup_timer4();//pwm
     466:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <uart_str+0x1>
	setup_timer5();
     46a:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <uart_str>
	Enable_timer5_compare_interrupt();//motor
     46e:	8c d4       	rcall	.+2328   	; 0xd88 <setup_timer0>
     470:	92 d4       	rcall	.+2340   	; 0xd96 <Enable_timer0_overflow_interrupt>
	OCR5A=4000;
     472:	67 d4       	rcall	.+2254   	; 0xd42 <setup_timer4>
     474:	7a d4       	rcall	.+2292   	; 0xd6a <setup_timer5>
     476:	82 d4       	rcall	.+2308   	; 0xd7c <Enable_timer5_compare_interrupt>
     478:	80 ea       	ldi	r24, 0xA0	; 160
     47a:	9f e0       	ldi	r25, 0x0F	; 15
     47c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
		double acc_total_vector=0;
		double angle_pitch_acc=0;
		double angle_roll_acc=0;
		bool set_gyro_angles=false;
			#ifdef CALIBERATED_DATA
				int32_t gyroX_calib_=0;
     480:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     484:	1d 86       	std	Y+13, r1	; 0x0d
				int32_t gyroY_calib_=0;
     486:	1e 86       	std	Y+14, r1	; 0x0e
     488:	1f 86       	std	Y+15, r1	; 0x0f
     48a:	18 8a       	std	Y+16, r1	; 0x10
     48c:	19 8a       	std	Y+17, r1	; 0x11
				int32_t gyroZ_calib_=0;
     48e:	1a 8a       	std	Y+18, r1	; 0x12
     490:	1b 8a       	std	Y+19, r1	; 0x13
     492:	1c 8a       	std	Y+20, r1	; 0x14
				int32_t accelY_calib_=0;
				int32_t accelZ_calib_=0;				
				//uint16_t gyroX_angle_calib=0; 
				uint16_t gyroY_angle_calib=0; 
				//uint16_t gyroZ_angle_calib=0; 				
				mpu6050_calibrate_gyro(&gyroX_calib_,&gyroY_calib_,&gyroZ_calib_);
     494:	1d 8a       	std	Y+21, r1	; 0x15
     496:	1e 8a       	std	Y+22, r1	; 0x16
     498:	1f 8a       	std	Y+23, r1	; 0x17
     49a:	18 8e       	std	Y+24, r1	; 0x18
     49c:	ae 01       	movw	r20, r28
     49e:	4b 5e       	subi	r20, 0xEB	; 235
     4a0:	5f 4f       	sbci	r21, 0xFF	; 255
     4a2:	be 01       	movw	r22, r28
     4a4:	6f 5e       	subi	r22, 0xEF	; 239
				int16_t gyroX_calib=gyroX_calib_;
     4a6:	7f 4f       	sbci	r23, 0xFF	; 255
     4a8:	ce 01       	movw	r24, r28
				int16_t gyroY_calib=gyroY_calib_;
     4aa:	0d 96       	adiw	r24, 0x0d	; 13
     4ac:	a4 d2       	rcall	.+1352   	; 0x9f6 <mpu6050_calibrate_gyro>
				int16_t gyroZ_calib=gyroZ_calib_;
     4ae:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b0:	3e 84       	ldd	r3, Y+14	; 0x0e
				int16_t accelX_calib=accelX_calib_;
				int16_t accelY_calib=accelY_calib_;
				int16_t accelZ_calib=accelZ_calib_;				
				//mpu6050_calibrate_accel(&accelX_calib,&accelY_calib,&accelZ_calib);
			#endif
		mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV,7);
     4b2:	29 89       	ldd	r18, Y+17	; 0x11
     4b4:	3a 89       	ldd	r19, Y+18	; 0x12
     4b6:	38 ab       	std	Y+48, r19	; 0x30
		mpu6050_writeByte(MPU6050_RA_CONFIG,0x00);
     4b8:	2f a7       	std	Y+47, r18	; 0x2f
     4ba:	8d 89       	ldd	r24, Y+21	; 0x15
     4bc:	9e 89       	ldd	r25, Y+22	; 0x16
		mpu6050_writeByte(MPU6050_RA_GYRO_CONFIG,0x08);//gyro sensitivity set to 500 o/s
     4be:	9a ab       	std	Y+50, r25	; 0x32
     4c0:	89 ab       	std	Y+49, r24	; 0x31
     4c2:	67 e0       	ldi	r22, 0x07	; 7
     4c4:	89 e1       	ldi	r24, 0x19	; 25
		mpu6050_writeByte(MPU6050_RA_ACCEL_CONFIG,0x10);//accel sensitivity -/+ 8g
     4c6:	76 d3       	rcall	.+1772   	; 0xbb4 <mpu6050_writeByte>
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	8a e1       	ldi	r24, 0x1A	; 26
     4cc:	73 d3       	rcall	.+1766   	; 0xbb4 <mpu6050_writeByte>
		mpu6050_writeByte(MPU6050_RA_PWR_MGMT_1,0x01);
     4ce:	68 e0       	ldi	r22, 0x08	; 8
     4d0:	8b e1       	ldi	r24, 0x1B	; 27
     4d2:	70 d3       	rcall	.+1760   	; 0xbb4 <mpu6050_writeByte>
     4d4:	60 e1       	ldi	r22, 0x10	; 16
		double gyroXangle;
		double gyroYangle;
		double compAngleX;
		double compAngleY;
	#endif  
	sei();
     4d6:	8c e1       	ldi	r24, 0x1C	; 28
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		double angle_pitch=0;
		double angle_roll=0;
     4d8:	6d d3       	rcall	.+1754   	; 0xbb4 <mpu6050_writeByte>
     4da:	61 e0       	ldi	r22, 0x01	; 1
     4dc:	8b e6       	ldi	r24, 0x6B	; 107
     4de:	6a d3       	rcall	.+1748   	; 0xbb4 <mpu6050_writeByte>
		int16_t gyro_y;
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		double angle_pitch=0;
     4e0:	78 94       	sei
     4e2:	1f 8e       	std	Y+31, r1	; 0x1f
     4e4:	18 a2       	std	Y+32, r1	; 0x20
     4e6:	19 a2       	std	Y+33, r1	; 0x21
	#endif  
	sei();
    while (1) /*---------------------------while(1)---------------------------------*/
    {
		#ifdef GYRO
    		mpu6050_getRawData(&accel_x,&accel_y,&accel_z,&gyro_x,&gyro_y,&gyro_z);//15us to do
     4e8:	1a a2       	std	Y+34, r1	; 0x22
     4ea:	1b a2       	std	Y+35, r1	; 0x23
     4ec:	1c a2       	std	Y+36, r1	; 0x24
     4ee:	1d a2       	std	Y+37, r1	; 0x25
     4f0:	1e a2       	std	Y+38, r1	; 0x26
     4f2:	9e 01       	movw	r18, r28
     4f4:	2b 5f       	subi	r18, 0xFB	; 251
     4f6:	3f 4f       	sbci	r19, 0xFF	; 255
     4f8:	79 01       	movw	r14, r18
     4fa:	8e 01       	movw	r16, r28
     4fc:	0d 5f       	subi	r16, 0xFD	; 253
     4fe:	1f 4f       	sbci	r17, 0xFF	; 255
     500:	24 50       	subi	r18, 0x04	; 4
     502:	31 09       	sbc	r19, r1
     504:	ae 01       	movw	r20, r28
     506:	45 5f       	subi	r20, 0xF5	; 245
     508:	5f 4f       	sbci	r21, 0xFF	; 255
     50a:	be 01       	movw	r22, r28
		#ifdef GYRO
			#ifdef CALIBERATED_DATA
				accX;
				accY;
				accZ;
				grX;
     50c:	67 5f       	subi	r22, 0xF7	; 247
     50e:	7f 4f       	sbci	r23, 0xFF	; 255
     510:	ce 01       	movw	r24, r28
     512:	07 96       	adiw	r24, 0x07	; 7
     514:	ab d3       	rcall	.+1878   	; 0xc6c <mpu6050_getRawData>
     516:	89 81       	ldd	r24, Y+1	; 0x01
				grY;
     518:	9a 81       	ldd	r25, Y+2	; 0x02
     51a:	82 19       	sub	r24, r2
     51c:	93 09       	sbc	r25, r3
     51e:	9a 83       	std	Y+2, r25	; 0x02
     520:	89 83       	std	Y+1, r24	; 0x01
     522:	8b 81       	ldd	r24, Y+3	; 0x03
				grZ;
     524:	9c 81       	ldd	r25, Y+4	; 0x04
     526:	2f a5       	ldd	r18, Y+47	; 0x2f
     528:	38 a9       	ldd	r19, Y+48	; 0x30
     52a:	82 1b       	sub	r24, r18
     52c:	93 0b       	sbc	r25, r19
     52e:	9c 83       	std	Y+4, r25	; 0x04
     530:	8b 83       	std	Y+3, r24	; 0x03
			printf("  ");
			printf("\n");
			/*--------end------*/			
		#else
			
			double dt = (double)((micros() - timer1));
     532:	8d 81       	ldd	r24, Y+5	; 0x05
     534:	9e 81       	ldd	r25, Y+6	; 0x06
     536:	29 a9       	ldd	r18, Y+49	; 0x31
     538:	3a a9       	ldd	r19, Y+50	; 0x32
     53a:	82 1b       	sub	r24, r18
     53c:	93 0b       	sbc	r25, r19
     53e:	9e 83       	std	Y+6, r25	; 0x06
     540:	8d 83       	std	Y+5, r24	; 0x05
			timer1=micros();
     542:	85 de       	rcall	.-758    	; 0x24e <micros>
     544:	64 19       	sub	r22, r4
     546:	75 09       	sbc	r23, r5
     548:	86 09       	sbc	r24, r6
			//double hz=1000000/dt;
			double pop=1/(65.5*1000000/dt);
     54a:	97 09       	sbc	r25, r7
     54c:	ff d5       	rcall	.+3070   	; 0x114c <__floatunsisf>
     54e:	6b 01       	movw	r12, r22
     550:	7c 01       	movw	r14, r24
     552:	7d de       	rcall	.-774    	; 0x24e <micros>
     554:	2b 01       	movw	r4, r22
     556:	3c 01       	movw	r6, r24
     558:	a7 01       	movw	r20, r14
     55a:	96 01       	movw	r18, r12
     55c:	68 ed       	ldi	r22, 0xD8	; 216
     55e:	7c ed       	ldi	r23, 0xDC	; 220
     560:	89 e7       	ldi	r24, 0x79	; 121
     562:	9c e4       	ldi	r25, 0x4C	; 76
     564:	5a d5       	rcall	.+2740   	; 0x101a <__divsf3>
     566:	9b 01       	movw	r18, r22
     568:	ac 01       	movw	r20, r24
			//if(loop_bool)
			//{
			//	gyroYrate-=tpel;
			//	loop_bool=false;
			//}
			if (!loop_bool)
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	80 e8       	ldi	r24, 0x80	; 128
     570:	9f e3       	ldi	r25, 0x3F	; 63
     572:	53 d5       	rcall	.+2726   	; 0x101a <__divsf3>
			{
				angle_pitch += gyroXrate; //Calculate the traveled pitch angle and add this to the angle_pitch variable
     574:	6b 01       	movw	r12, r22
     576:	7c 01       	movw	r14, r24
     578:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <loop_bool>
     57c:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <loop_bool+0x1>
     580:	89 2b       	or	r24, r25
     582:	59 f5       	brne	.+86     	; 0x5da <main+0x1a0>
     584:	69 81       	ldd	r22, Y+1	; 0x01
     586:	7a 81       	ldd	r23, Y+2	; 0x02
     588:	07 2e       	mov	r0, r23
     58a:	00 0c       	add	r0, r0
     58c:	88 0b       	sbc	r24, r24
     58e:	99 0b       	sbc	r25, r25
     590:	df d5       	rcall	.+3006   	; 0x1150 <__floatsisf>
     592:	a7 01       	movw	r20, r14
     594:	96 01       	movw	r18, r12
     596:	e1 d6       	rcall	.+3522   	; 0x135a <__mulsf3>
     598:	9b 01       	movw	r18, r22
     59a:	ac 01       	movw	r20, r24
     59c:	6b a1       	ldd	r22, Y+35	; 0x23
				angle_roll += gyroYrate;  //Calculate the traveled roll angle and add this to the angle_roll variable			
     59e:	7c a1       	ldd	r23, Y+36	; 0x24
     5a0:	8d a1       	ldd	r24, Y+37	; 0x25
     5a2:	9e a1       	ldd	r25, Y+38	; 0x26
     5a4:	bb d4       	rcall	.+2422   	; 0xf1c <__addsf3>
     5a6:	6b a3       	std	Y+35, r22	; 0x23
     5a8:	7c a3       	std	Y+36, r23	; 0x24
     5aa:	8d a3       	std	Y+37, r24	; 0x25
     5ac:	9e a3       	std	Y+38, r25	; 0x26
     5ae:	6b 81       	ldd	r22, Y+3	; 0x03
     5b0:	7c 81       	ldd	r23, Y+4	; 0x04
     5b2:	07 2e       	mov	r0, r23
     5b4:	00 0c       	add	r0, r0
     5b6:	88 0b       	sbc	r24, r24
     5b8:	99 0b       	sbc	r25, r25
     5ba:	ca d5       	rcall	.+2964   	; 0x1150 <__floatsisf>
     5bc:	a7 01       	movw	r20, r14
     5be:	96 01       	movw	r18, r12
     5c0:	cc d6       	rcall	.+3480   	; 0x135a <__mulsf3>
     5c2:	9b 01       	movw	r18, r22
     5c4:	ac 01       	movw	r20, r24
     5c6:	6f 8d       	ldd	r22, Y+31	; 0x1f
			}
			else
			{
				loop_bool=false;
     5c8:	78 a1       	ldd	r23, Y+32	; 0x20
     5ca:	89 a1       	ldd	r24, Y+33	; 0x21
     5cc:	9a a1       	ldd	r25, Y+34	; 0x22
     5ce:	a6 d4       	rcall	.+2380   	; 0xf1c <__addsf3>
			}					
					//0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
			pop*=(3.142/180);	
			angle_pitch += angle_roll * sin(gyro_z * pop);               //If the IMU has yawed transfer the roll angle to the pitch angel
     5d0:	6f 8f       	std	Y+31, r22	; 0x1f
     5d2:	78 a3       	std	Y+32, r23	; 0x20
     5d4:	89 a3       	std	Y+33, r24	; 0x21
     5d6:	9a a3       	std	Y+34, r25	; 0x22
     5d8:	04 c0       	rjmp	.+8      	; 0x5e2 <main+0x1a8>
     5da:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <loop_bool+0x1>
     5de:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <loop_bool>
     5e2:	6d 81       	ldd	r22, Y+5	; 0x05
     5e4:	7e 81       	ldd	r23, Y+6	; 0x06
     5e6:	07 2e       	mov	r0, r23
     5e8:	00 0c       	add	r0, r0
     5ea:	88 0b       	sbc	r24, r24
     5ec:	99 0b       	sbc	r25, r25
     5ee:	b0 d5       	rcall	.+2912   	; 0x1150 <__floatsisf>
     5f0:	4b 01       	movw	r8, r22
     5f2:	5c 01       	movw	r10, r24
     5f4:	24 ef       	ldi	r18, 0xF4	; 244
     5f6:	3e ef       	ldi	r19, 0xFE	; 254
     5f8:	4e e8       	ldi	r20, 0x8E	; 142
     5fa:	5c e3       	ldi	r21, 0x3C	; 60
     5fc:	c7 01       	movw	r24, r14
     5fe:	b6 01       	movw	r22, r12
     600:	ac d6       	rcall	.+3416   	; 0x135a <__mulsf3>
     602:	9b 01       	movw	r18, r22
     604:	ac 01       	movw	r20, r24
     606:	c5 01       	movw	r24, r10
     608:	b4 01       	movw	r22, r8
     60a:	a7 d6       	rcall	.+3406   	; 0x135a <__mulsf3>
     60c:	09 d7       	rcall	.+3602   	; 0x1420 <sin>
     60e:	6b 01       	movw	r12, r22
     610:	7c 01       	movw	r14, r24
     612:	9b 01       	movw	r18, r22
     614:	ac 01       	movw	r20, r24
     616:	6f 8d       	ldd	r22, Y+31	; 0x1f
     618:	78 a1       	ldd	r23, Y+32	; 0x20
     61a:	89 a1       	ldd	r24, Y+33	; 0x21
     61c:	9a a1       	ldd	r25, Y+34	; 0x22
     61e:	9d d6       	rcall	.+3386   	; 0x135a <__mulsf3>
     620:	9b 01       	movw	r18, r22
     622:	ac 01       	movw	r20, r24
			angle_roll -= angle_pitch * sin(gyro_z * pop);               //If the IMU has yawed transfer the pitch angle to the roll angel
     624:	6b a1       	ldd	r22, Y+35	; 0x23
     626:	7c a1       	ldd	r23, Y+36	; 0x24
     628:	8d a1       	ldd	r24, Y+37	; 0x25
     62a:	9e a1       	ldd	r25, Y+38	; 0x26
     62c:	77 d4       	rcall	.+2286   	; 0xf1c <__addsf3>
     62e:	6b a3       	std	Y+35, r22	; 0x23
     630:	7c a3       	std	Y+36, r23	; 0x24
     632:	8d a3       	std	Y+37, r24	; 0x25
     634:	9e a3       	std	Y+38, r25	; 0x26
     636:	9b 01       	movw	r18, r22
     638:	ac 01       	movw	r20, r24
     63a:	c7 01       	movw	r24, r14
     63c:	b6 01       	movw	r22, r12
     63e:	8d d6       	rcall	.+3354   	; 0x135a <__mulsf3>
     640:	9b 01       	movw	r18, r22
			
			double temporar_accel_x=accel_x/100;
     642:	ac 01       	movw	r20, r24
     644:	6f 8d       	ldd	r22, Y+31	; 0x1f
     646:	78 a1       	ldd	r23, Y+32	; 0x20
     648:	89 a1       	ldd	r24, Y+33	; 0x21
     64a:	9a a1       	ldd	r25, Y+34	; 0x22
     64c:	66 d4       	rcall	.+2252   	; 0xf1a <__subsf3>
     64e:	6f 8f       	std	Y+31, r22	; 0x1f
     650:	78 a3       	std	Y+32, r23	; 0x20
     652:	89 a3       	std	Y+33, r24	; 0x21
     654:	9a a3       	std	Y+34, r25	; 0x22
     656:	0f 81       	ldd	r16, Y+7	; 0x07
     658:	18 85       	ldd	r17, Y+8	; 0x08
     65a:	c8 01       	movw	r24, r16
			double temporar_accel_y=accel_y/100;
     65c:	64 e6       	ldi	r22, 0x64	; 100
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	75 d7       	rcall	.+3818   	; 0x154c <__divmodhi4>
     662:	07 2e       	mov	r0, r23
     664:	00 0c       	add	r0, r0
     666:	88 0b       	sbc	r24, r24
     668:	99 0b       	sbc	r25, r25
     66a:	72 d5       	rcall	.+2788   	; 0x1150 <__floatsisf>
     66c:	4b 01       	movw	r8, r22
     66e:	5c 01       	movw	r10, r24
     670:	89 85       	ldd	r24, Y+9	; 0x09
     672:	9a 85       	ldd	r25, Y+10	; 0x0a
     674:	64 e6       	ldi	r22, 0x64	; 100
     676:	70 e0       	ldi	r23, 0x00	; 0
			double temporar_accel_z=accel_z/100;
     678:	69 d7       	rcall	.+3794   	; 0x154c <__divmodhi4>
     67a:	07 2e       	mov	r0, r23
     67c:	00 0c       	add	r0, r0
     67e:	88 0b       	sbc	r24, r24
     680:	99 0b       	sbc	r25, r25
     682:	66 d5       	rcall	.+2764   	; 0x1150 <__floatsisf>
     684:	6f a3       	std	Y+39, r22	; 0x27
     686:	78 a7       	std	Y+40, r23	; 0x28
     688:	89 a7       	std	Y+41, r24	; 0x29
     68a:	9a a7       	std	Y+42, r25	; 0x2a
     68c:	8b 85       	ldd	r24, Y+11	; 0x0b
     68e:	9c 85       	ldd	r25, Y+12	; 0x0c
     690:	64 e6       	ldi	r22, 0x64	; 100
			
			acc_total_vector = sqrt((temporar_accel_x*temporar_accel_x)+(temporar_accel_y*temporar_accel_y)+(temporar_accel_z*temporar_accel_z));  //Calculate the total accelerometer vector
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	5b d7       	rcall	.+3766   	; 0x154c <__divmodhi4>
     696:	07 2e       	mov	r0, r23
     698:	00 0c       	add	r0, r0
     69a:	88 0b       	sbc	r24, r24
     69c:	99 0b       	sbc	r25, r25
     69e:	58 d5       	rcall	.+2736   	; 0x1150 <__floatsisf>
     6a0:	6b 01       	movw	r12, r22
     6a2:	7c 01       	movw	r14, r24
     6a4:	a5 01       	movw	r20, r10
     6a6:	94 01       	movw	r18, r8
     6a8:	c5 01       	movw	r24, r10
     6aa:	b4 01       	movw	r22, r8
     6ac:	56 d6       	rcall	.+3244   	; 0x135a <__mulsf3>
     6ae:	6b a7       	std	Y+43, r22	; 0x2b
     6b0:	7c a7       	std	Y+44, r23	; 0x2c
     6b2:	8d a7       	std	Y+45, r24	; 0x2d
     6b4:	9e a7       	std	Y+46, r25	; 0x2e
     6b6:	2f a1       	ldd	r18, Y+39	; 0x27
     6b8:	38 a5       	ldd	r19, Y+40	; 0x28
     6ba:	49 a5       	ldd	r20, Y+41	; 0x29
     6bc:	5a a5       	ldd	r21, Y+42	; 0x2a
     6be:	ca 01       	movw	r24, r20
     6c0:	b9 01       	movw	r22, r18
     6c2:	4b d6       	rcall	.+3222   	; 0x135a <__mulsf3>
     6c4:	9b 01       	movw	r18, r22
     6c6:	ac 01       	movw	r20, r24
     6c8:	6b a5       	ldd	r22, Y+43	; 0x2b
     6ca:	7c a5       	ldd	r23, Y+44	; 0x2c
     6cc:	8d a5       	ldd	r24, Y+45	; 0x2d
     6ce:	9e a5       	ldd	r25, Y+46	; 0x2e
     6d0:	25 d4       	rcall	.+2122   	; 0xf1c <__addsf3>
     6d2:	6b a7       	std	Y+43, r22	; 0x2b
     6d4:	7c a7       	std	Y+44, r23	; 0x2c
     6d6:	8d a7       	std	Y+45, r24	; 0x2d
     6d8:	9e a7       	std	Y+46, r25	; 0x2e
     6da:	a5 01       	movw	r20, r10
     6dc:	94 01       	movw	r18, r8
     6de:	c5 01       	movw	r24, r10
     6e0:	b4 01       	movw	r22, r8
     6e2:	3b d6       	rcall	.+3190   	; 0x135a <__mulsf3>
     6e4:	4b 01       	movw	r8, r22
     6e6:	5c 01       	movw	r10, r24
     6e8:	2f a1       	ldd	r18, Y+39	; 0x27
     6ea:	38 a5       	ldd	r19, Y+40	; 0x28
     6ec:	49 a5       	ldd	r20, Y+41	; 0x29
     6ee:	5a a5       	ldd	r21, Y+42	; 0x2a
     6f0:	ca 01       	movw	r24, r20
     6f2:	b9 01       	movw	r22, r18
     6f4:	32 d6       	rcall	.+3172   	; 0x135a <__mulsf3>
     6f6:	9b 01       	movw	r18, r22
     6f8:	ac 01       	movw	r20, r24
     6fa:	c5 01       	movw	r24, r10
     6fc:	b4 01       	movw	r22, r8
     6fe:	0e d4       	rcall	.+2076   	; 0xf1c <__addsf3>
					//57.296 = 1 / (3.142 / 180) The Arduino asin function is in radians
			acc_total_vector*=100;
		    angle_pitch_acc = asin((double)accel_y/acc_total_vector)* 57.296;       //Calculate the pitch angle
			angle_roll_acc = asin((double)accel_x/acc_total_vector)* -57.296;       //Calculate the roll angle
     700:	4b 01       	movw	r8, r22
     702:	5c 01       	movw	r10, r24
     704:	a7 01       	movw	r20, r14
     706:	96 01       	movw	r18, r12
     708:	c7 01       	movw	r24, r14
     70a:	b6 01       	movw	r22, r12
     70c:	26 d6       	rcall	.+3148   	; 0x135a <__mulsf3>
     70e:	9b 01       	movw	r18, r22
     710:	ac 01       	movw	r20, r24
     712:	c5 01       	movw	r24, r10
     714:	b4 01       	movw	r22, r8
     716:	02 d4       	rcall	.+2052   	; 0xf1c <__addsf3>
     718:	8d d6       	rcall	.+3354   	; 0x1434 <sqrt>
     71a:	6b 01       	movw	r12, r22
     71c:	7c 01       	movw	r14, r24
     71e:	b8 01       	movw	r22, r16
     720:	11 0f       	add	r17, r17
     722:	88 0b       	sbc	r24, r24
     724:	99 0b       	sbc	r25, r25
     726:	14 d5       	rcall	.+2600   	; 0x1150 <__floatsisf>
     728:	4b 01       	movw	r8, r22
     72a:	5c 01       	movw	r10, r24
				compAngleY = 0.93 * (compAngleY + gyroYrate * dt) + 0.07 * pitch;
			#endif
			
			
					
			uint16_t reg=angle_pitch;
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	48 ec       	ldi	r20, 0xC8	; 200
     732:	52 e4       	ldi	r21, 0x42	; 66
     734:	c7 01       	movw	r24, r14
     736:	b6 01       	movw	r22, r12
     738:	10 d6       	rcall	.+3104   	; 0x135a <__mulsf3>
			printf(" ");
     73a:	9b 01       	movw	r18, r22
     73c:	ac 01       	movw	r20, r24
     73e:	c5 01       	movw	r24, r10
			printf("gyroX_angle= ");
     740:	b4 01       	movw	r22, r8
     742:	6b d4       	rcall	.+2262   	; 0x101a <__divsf3>
     744:	4f d4       	rcall	.+2206   	; 0xfe4 <asin>
			print16(&reg);
     746:	6b 01       	movw	r12, r22
     748:	7c 01       	movw	r14, r24
     74a:	6b a1       	ldd	r22, Y+35	; 0x23
			reg=angle_roll;
     74c:	7c a1       	ldd	r23, Y+36	; 0x24
     74e:	8d a1       	ldd	r24, Y+37	; 0x25
     750:	9e a1       	ldd	r25, Y+38	; 0x26
     752:	d0 d4       	rcall	.+2464   	; 0x10f4 <__fixunssfsi>
     754:	7e 8f       	std	Y+30, r23	; 0x1e
     756:	6d 8f       	std	Y+29, r22	; 0x1d
     758:	80 e2       	ldi	r24, 0x20	; 32
			printf(" ");
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	dc d7       	rcall	.+4024   	; 0x1716 <putchar>
     75e:	89 e7       	ldi	r24, 0x79	; 121
     760:	93 e0       	ldi	r25, 0x03	; 3
			printf("gyroY_angle= ");
     762:	9f 93       	push	r25
     764:	8f 93       	push	r24
     766:	c4 d7       	rcall	.+3976   	; 0x16f0 <printf>
     768:	ce 01       	movw	r24, r28
			print16(&reg);
     76a:	4d 96       	adiw	r24, 0x1d	; 29
     76c:	3f de       	rcall	.-898    	; 0x3ec <print16>
     76e:	6f 8d       	ldd	r22, Y+31	; 0x1f
     770:	78 a1       	ldd	r23, Y+32	; 0x20
			
			double xff=angle_roll_acc;
			double final_angleY=(angle_roll*0.996)+(xff*0.004);
     772:	89 a1       	ldd	r24, Y+33	; 0x21
     774:	9a a1       	ldd	r25, Y+34	; 0x22
     776:	be d4       	rcall	.+2428   	; 0x10f4 <__fixunssfsi>
     778:	7e 8f       	std	Y+30, r23	; 0x1e
     77a:	6d 8f       	std	Y+29, r22	; 0x1d
     77c:	80 e2       	ldi	r24, 0x20	; 32
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	ca d7       	rcall	.+3988   	; 0x1716 <putchar>
     782:	87 e8       	ldi	r24, 0x87	; 135
     784:	93 e0       	ldi	r25, 0x03	; 3
     786:	9f 93       	push	r25
     788:	8f 93       	push	r24
     78a:	b2 d7       	rcall	.+3940   	; 0x16f0 <printf>
     78c:	ce 01       	movw	r24, r28
     78e:	4d 96       	adiw	r24, 0x1d	; 29
     790:	2d de       	rcall	.-934    	; 0x3ec <print16>
     792:	2b e1       	ldi	r18, 0x1B	; 27
     794:	3f e2       	ldi	r19, 0x2F	; 47
     796:	45 e6       	ldi	r20, 0x65	; 101
     798:	52 ec       	ldi	r21, 0xC2	; 194
     79a:	c7 01       	movw	r24, r14
     79c:	b6 01       	movw	r22, r12
     79e:	dd d5       	rcall	.+3002   	; 0x135a <__mulsf3>
     7a0:	2f e6       	ldi	r18, 0x6F	; 111
     7a2:	32 e1       	ldi	r19, 0x12	; 18
     7a4:	43 e8       	ldi	r20, 0x83	; 131
     7a6:	5b e3       	ldi	r21, 0x3B	; 59
     7a8:	d8 d5       	rcall	.+2992   	; 0x135a <__mulsf3>
     7aa:	6b 01       	movw	r12, r22
     7ac:	7c 01       	movw	r14, r24
     7ae:	2b ed       	ldi	r18, 0xDB	; 219
     7b0:	39 ef       	ldi	r19, 0xF9	; 249
			reg=final_angleY;
     7b2:	4e e7       	ldi	r20, 0x7E	; 126
     7b4:	5f e3       	ldi	r21, 0x3F	; 63
     7b6:	6f 8d       	ldd	r22, Y+31	; 0x1f
     7b8:	78 a1       	ldd	r23, Y+32	; 0x20
			printf(" ");	
     7ba:	89 a1       	ldd	r24, Y+33	; 0x21
     7bc:	9a a1       	ldd	r25, Y+34	; 0x22
     7be:	cd d5       	rcall	.+2970   	; 0x135a <__mulsf3>
     7c0:	9b 01       	movw	r18, r22
			printf("final_angleY= ");
     7c2:	ac 01       	movw	r20, r24
     7c4:	c7 01       	movw	r24, r14
     7c6:	b6 01       	movw	r22, r12
     7c8:	a9 d3       	rcall	.+1874   	; 0xf1c <__addsf3>
     7ca:	6b 01       	movw	r12, r22
			print16(&reg);
     7cc:	7c 01       	movw	r14, r24
     7ce:	92 d4       	rcall	.+2340   	; 0x10f4 <__fixunssfsi>
     7d0:	7e 8f       	std	Y+30, r23	; 0x1e
     7d2:	6d 8f       	std	Y+29, r22	; 0x1d
						
			#ifdef DRV8313
				uint16_t reg_print=final_angleY;
				int absoulute_y=abs(final_angleY);
				uint16_t learing_rate=500;				
				uint16_t local_motor_delay=(32735-(absoulute_y*learing_rate));
     7d4:	80 e2       	ldi	r24, 0x20	; 32
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	9e d7       	rcall	.+3900   	; 0x1716 <putchar>
     7da:	85 e9       	ldi	r24, 0x95	; 149
     7dc:	93 e0       	ldi	r25, 0x03	; 3
     7de:	9f 93       	push	r25
     7e0:	8f 93       	push	r24
     7e2:	86 d7       	rcall	.+3852   	; 0x16f0 <printf>
     7e4:	ce 01       	movw	r24, r28
     7e6:	4d 96       	adiw	r24, 0x1d	; 29
     7e8:	01 de       	rcall	.-1022   	; 0x3ec <print16>
     7ea:	c7 01       	movw	r24, r14
     7ec:	b6 01       	movw	r22, r12
     7ee:	7d d4       	rcall	.+2298   	; 0x10ea <__fixsfsi>
     7f0:	fb 01       	movw	r30, r22
     7f2:	ff 23       	and	r31, r31
     7f4:	24 f4       	brge	.+8      	; 0x7fe <main+0x3c4>
     7f6:	ee 27       	eor	r30, r30
     7f8:	ff 27       	eor	r31, r31
     7fa:	e6 1b       	sub	r30, r22
     7fc:	f7 0b       	sbc	r31, r23
				if (local_motor_delay>2000)
     7fe:	44 ef       	ldi	r20, 0xF4	; 244
     800:	51 e0       	ldi	r21, 0x01	; 1
     802:	e4 9f       	mul	r30, r20
     804:	90 01       	movw	r18, r0
     806:	e5 9f       	mul	r30, r21
     808:	30 0d       	add	r19, r0
     80a:	f4 9f       	mul	r31, r20
     80c:	30 0d       	add	r19, r0
     80e:	11 24       	eor	r1, r1
				{
					pwm_delay=local_motor_delay;
     810:	8f ed       	ldi	r24, 0xDF	; 223
     812:	9f e7       	ldi	r25, 0x7F	; 127
     814:	82 1b       	sub	r24, r18
     816:	93 0b       	sbc	r25, r19
				}
				uint16_t reg_ = local_motor_delay;
     818:	0f 90       	pop	r0
				printf("  ");
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	81 3d       	cpi	r24, 0xD1	; 209
				printf("ocr= ");
     826:	37 e0       	ldi	r19, 0x07	; 7
     828:	93 07       	cpc	r25, r19
     82a:	20 f0       	brcs	.+8      	; 0x834 <main+0x3fa>
     82c:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <pwm_delay+0x1>
				print16(&reg_);
     830:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <pwm_delay>
     834:	9c 8f       	std	Y+28, r25	; 0x1c
     836:	8b 8f       	std	Y+27, r24	; 0x1b
				if (final_angleY>=-0.8 && final_angleY<=0.8  || final_angleY >90)
     838:	84 ea       	ldi	r24, 0xA4	; 164
     83a:	93 e0       	ldi	r25, 0x03	; 3
     83c:	9f 93       	push	r25
     83e:	8f 93       	push	r24
     840:	57 d7       	rcall	.+3758   	; 0x16f0 <printf>
     842:	87 ea       	ldi	r24, 0xA7	; 167
     844:	93 e0       	ldi	r25, 0x03	; 3
     846:	9f 93       	push	r25
     848:	8f 93       	push	r24
     84a:	52 d7       	rcall	.+3748   	; 0x16f0 <printf>
     84c:	ce 01       	movw	r24, r28
     84e:	4b 96       	adiw	r24, 0x1b	; 27
     850:	cd dd       	rcall	.-1126   	; 0x3ec <print16>
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	2d ec       	ldi	r18, 0xCD	; 205
     85c:	3c ec       	ldi	r19, 0xCC	; 204
     85e:	4c e4       	ldi	r20, 0x4C	; 76
     860:	5f eb       	ldi	r21, 0xBF	; 191
     862:	c7 01       	movw	r24, r14
     864:	b6 01       	movw	r22, r12
     866:	75 d5       	rcall	.+2794   	; 0x1352 <__gesf2>
     868:	88 23       	and	r24, r24
     86a:	4c f0       	brlt	.+18     	; 0x87e <main+0x444>
     86c:	2d ec       	ldi	r18, 0xCD	; 205
     86e:	3c ec       	ldi	r19, 0xCC	; 204
     870:	4c e4       	ldi	r20, 0x4C	; 76
     872:	5f e3       	ldi	r21, 0x3F	; 63
     874:	c7 01       	movw	r24, r14
				{
					incr=0;
     876:	b6 01       	movw	r22, r12
     878:	cc d3       	rcall	.+1944   	; 0x1012 <__cmpsf2>
     87a:	18 16       	cp	r1, r24
					printf("\n");	
     87c:	4c f4       	brge	.+18     	; 0x890 <main+0x456>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	44 eb       	ldi	r20, 0xB4	; 180
				}
				else 
					if (final_angleY>0.8)
     884:	52 e4       	ldi	r21, 0x42	; 66
     886:	c7 01       	movw	r24, r14
     888:	b6 01       	movw	r22, r12
     88a:	63 d5       	rcall	.+2758   	; 0x1352 <__gesf2>
     88c:	18 16       	cp	r1, r24
     88e:	44 f4       	brge	.+16     	; 0x8a0 <main+0x466>
     890:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <incr+0x1>
     894:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <incr>
					{
						cli();
     898:	8a e0       	ldi	r24, 0x0A	; 10
						incr=1;
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	3c d7       	rcall	.+3704   	; 0x1716 <putchar>
     89e:	29 ce       	rjmp	.-942    	; 0x4f2 <main+0xb8>
     8a0:	2d ec       	ldi	r18, 0xCD	; 205
     8a2:	3c ec       	ldi	r19, 0xCC	; 204
     8a4:	4c e4       	ldi	r20, 0x4C	; 76
						printf(" ");
     8a6:	5f e3       	ldi	r21, 0x3F	; 63
     8a8:	c7 01       	movw	r24, r14
     8aa:	b6 01       	movw	r22, r12
     8ac:	52 d5       	rcall	.+2724   	; 0x1352 <__gesf2>
						uint16_t val=pwmSin[U_step];
     8ae:	18 16       	cp	r1, r24
     8b0:	e4 f4       	brge	.+56     	; 0x8ea <main+0x4b0>
     8b2:	f8 94       	cli
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	90 93 78 03 	sts	0x0378, r25	; 0x800378 <incr+0x1>
     8bc:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <incr>
     8c0:	80 e2       	ldi	r24, 0x20	; 32
						print16(&val);
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	28 d7       	rcall	.+3664   	; 0x1716 <putchar>
     8c6:	e0 91 fa 03 	lds	r30, 0x03FA	; 0x8003fa <__data_end>
						printf(" yes\n");
     8ca:	f0 91 fb 03 	lds	r31, 0x03FB	; 0x8003fb <__data_end+0x1>
     8ce:	ea 5f       	subi	r30, 0xFA	; 250
     8d0:	fd 4f       	sbci	r31, 0xFD	; 253
						
						sei();
     8d2:	80 81       	ld	r24, Z
     8d4:	90 e0       	ldi	r25, 0x00	; 0
					}
					else
					{	cli();
     8d6:	9a 8f       	std	Y+26, r25	; 0x1a
						incr=-1;
     8d8:	89 8f       	std	Y+25, r24	; 0x19
     8da:	ce 01       	movw	r24, r28
     8dc:	49 96       	adiw	r24, 0x19	; 25
     8de:	86 dd       	rcall	.-1268   	; 0x3ec <print16>
     8e0:	8d ea       	ldi	r24, 0xAD	; 173
     8e2:	93 e0       	ldi	r25, 0x03	; 3
						printf(" ");
     8e4:	1d d7       	rcall	.+3642   	; 0x1720 <puts>
     8e6:	78 94       	sei
     8e8:	04 ce       	rjmp	.-1016   	; 0x4f2 <main+0xb8>
     8ea:	f8 94       	cli
						uint16_t val=pwmSin[U_step];
     8ec:	8f ef       	ldi	r24, 0xFF	; 255
     8ee:	9f ef       	ldi	r25, 0xFF	; 255
     8f0:	90 93 78 03 	sts	0x0378, r25	; 0x800378 <incr+0x1>
     8f4:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <incr>
     8f8:	80 e2       	ldi	r24, 0x20	; 32
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0c d7       	rcall	.+3608   	; 0x1716 <putchar>
     8fe:	e0 91 fa 03 	lds	r30, 0x03FA	; 0x8003fa <__data_end>
						print16(&val);
     902:	f0 91 fb 03 	lds	r31, 0x03FB	; 0x8003fb <__data_end+0x1>
     906:	ea 5f       	subi	r30, 0xFA	; 250
						printf(" no\n");
     908:	fd 4f       	sbci	r31, 0xFD	; 253
     90a:	80 81       	ld	r24, Z
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	9a 8f       	std	Y+26, r25	; 0x1a
						sei();
     910:	89 8f       	std	Y+25, r24	; 0x19
			//	 set_gyro_angles = true;                                            //Set the IMU started flag
			//}
			
			#endif //PRINT_RAW_DATA			
		#endif //GYRO
	}
     912:	ce 01       	movw	r24, r28
     914:	49 96       	adiw	r24, 0x19	; 25
     916:	6a dd       	rcall	.-1324   	; 0x3ec <print16>
     918:	82 eb       	ldi	r24, 0xB2	; 178
     91a:	93 e0       	ldi	r25, 0x03	; 3
     91c:	01 d7       	rcall	.+3586   	; 0x1720 <puts>
     91e:	78 94       	sei
     920:	e8 cd       	rjmp	.-1072   	; 0x4f2 <main+0xb8>

00000922 <print16ln>:
}

void print16ln(int16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	2a 97       	sbiw	r28, 0x0a	; 10
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	de bf       	out	0x3e, r29	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	cd bf       	out	0x3d, r28	; 61
     93a:	4a e0       	ldi	r20, 0x0A	; 10
     93c:	8e 01       	movw	r16, r28
     93e:	0f 5f       	subi	r16, 0xFF	; 255
     940:	1f 4f       	sbci	r17, 0xFF	; 255
     942:	b8 01       	movw	r22, r16
     944:	fc 01       	movw	r30, r24
     946:	80 81       	ld	r24, Z
     948:	91 81       	ldd	r25, Z+1	; 0x01
     94a:	65 d6       	rcall	.+3274   	; 0x1616 <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     94c:	1f 93       	push	r17
     94e:	0f 93       	push	r16
	printf("\n");
     950:	cf d6       	rcall	.+3486   	; 0x16f0 <printf>
     952:	8a e0       	ldi	r24, 0x0A	; 10
     954:	90 e0       	ldi	r25, 0x00	; 0
}
     956:	df d6       	rcall	.+3518   	; 0x1716 <putchar>
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	2a 96       	adiw	r28, 0x0a	; 10
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	de bf       	out	0x3e, r29	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	cd bf       	out	0x3d, r28	; 61
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	08 95       	ret

00000972 <mpu6050_readByte>:
	printf("  ");
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/
}
     972:	cf 93       	push	r28
     974:	c8 2f       	mov	r28, r24
     976:	80 ed       	ldi	r24, 0xD0	; 208
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	19 d2       	rcall	.+1074   	; 0xdae <i2c_start>
     97c:	8c 2f       	mov	r24, r28
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	6c d2       	rcall	.+1240   	; 0xe5a <i2c_write>
     982:	5b d2       	rcall	.+1206   	; 0xe3a <i2c_stop>
     984:	81 ed       	ldi	r24, 0xD1	; 209
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	12 d2       	rcall	.+1060   	; 0xdae <i2c_start>
     98a:	a2 d2       	rcall	.+1348   	; 0xed0 <i2c_readNak>
     98c:	c8 2f       	mov	r28, r24
     98e:	55 d2       	rcall	.+1194   	; 0xe3a <i2c_stop>
     990:	8c 2f       	mov	r24, r28
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <mpu6050_read_gyroX>:
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	83 e4       	ldi	r24, 0x43	; 67
     99c:	ea df       	rcall	.-44     	; 0x972 <mpu6050_readByte>
     99e:	c8 2f       	mov	r28, r24
     9a0:	d0 e0       	ldi	r29, 0x00	; 0
     9a2:	dc 2f       	mov	r29, r28
     9a4:	cc 27       	eor	r28, r28
     9a6:	84 e4       	ldi	r24, 0x44	; 68
     9a8:	e4 df       	rcall	.-56     	; 0x972 <mpu6050_readByte>
     9aa:	9e 01       	movw	r18, r28
     9ac:	28 2b       	or	r18, r24
     9ae:	c9 01       	movw	r24, r18
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <mpu6050_read_gyroY>:
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	85 e4       	ldi	r24, 0x45	; 69
     9bc:	da df       	rcall	.-76     	; 0x972 <mpu6050_readByte>
     9be:	c8 2f       	mov	r28, r24
     9c0:	d0 e0       	ldi	r29, 0x00	; 0
     9c2:	dc 2f       	mov	r29, r28
     9c4:	cc 27       	eor	r28, r28
     9c6:	86 e4       	ldi	r24, 0x46	; 70
     9c8:	d4 df       	rcall	.-88     	; 0x972 <mpu6050_readByte>
     9ca:	9e 01       	movw	r18, r28
     9cc:	28 2b       	or	r18, r24
     9ce:	c9 01       	movw	r24, r18
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	08 95       	ret

000009d6 <mpu6050_read_gyroZ>:
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	87 e4       	ldi	r24, 0x47	; 71
     9dc:	ca df       	rcall	.-108    	; 0x972 <mpu6050_readByte>
     9de:	c8 2f       	mov	r28, r24
     9e0:	d0 e0       	ldi	r29, 0x00	; 0
     9e2:	dc 2f       	mov	r29, r28
     9e4:	cc 27       	eor	r28, r28
     9e6:	88 e4       	ldi	r24, 0x48	; 72
     9e8:	c4 df       	rcall	.-120    	; 0x972 <mpu6050_readByte>
     9ea:	9e 01       	movw	r18, r28
     9ec:	28 2b       	or	r18, r24
     9ee:	c9 01       	movw	r24, r18
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <mpu6050_calibrate_gyro>:
     9f6:	cf 92       	push	r12
     9f8:	df 92       	push	r13
     9fa:	ef 92       	push	r14
     9fc:	ff 92       	push	r15
     9fe:	0f 93       	push	r16
     a00:	1f 93       	push	r17
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	6c 01       	movw	r12, r24
     a08:	7b 01       	movw	r14, r22
     a0a:	8a 01       	movw	r16, r20
     a0c:	86 eb       	ldi	r24, 0xB6	; 182
     a0e:	93 e0       	ldi	r25, 0x03	; 3
     a10:	87 d6       	rcall	.+3342   	; 0x1720 <puts>
     a12:	c8 ec       	ldi	r28, 0xC8	; 200
     a14:	d0 e0       	ldi	r29, 0x00	; 0
     a16:	bf df       	rcall	.-130    	; 0x996 <mpu6050_read_gyroX>
     a18:	f6 01       	movw	r30, r12
     a1a:	40 81       	ld	r20, Z
     a1c:	51 81       	ldd	r21, Z+1	; 0x01
     a1e:	62 81       	ldd	r22, Z+2	; 0x02
     a20:	73 81       	ldd	r23, Z+3	; 0x03
     a22:	48 0f       	add	r20, r24
     a24:	59 1f       	adc	r21, r25
     a26:	61 1d       	adc	r22, r1
     a28:	71 1d       	adc	r23, r1
     a2a:	40 83       	st	Z, r20
     a2c:	51 83       	std	Z+1, r21	; 0x01
     a2e:	62 83       	std	Z+2, r22	; 0x02
     a30:	73 83       	std	Z+3, r23	; 0x03
     a32:	c1 df       	rcall	.-126    	; 0x9b6 <mpu6050_read_gyroY>
     a34:	f7 01       	movw	r30, r14
     a36:	40 81       	ld	r20, Z
     a38:	51 81       	ldd	r21, Z+1	; 0x01
     a3a:	62 81       	ldd	r22, Z+2	; 0x02
     a3c:	73 81       	ldd	r23, Z+3	; 0x03
     a3e:	48 0f       	add	r20, r24
     a40:	59 1f       	adc	r21, r25
     a42:	61 1d       	adc	r22, r1
     a44:	71 1d       	adc	r23, r1
     a46:	40 83       	st	Z, r20
     a48:	51 83       	std	Z+1, r21	; 0x01
     a4a:	62 83       	std	Z+2, r22	; 0x02
     a4c:	73 83       	std	Z+3, r23	; 0x03
     a4e:	c3 df       	rcall	.-122    	; 0x9d6 <mpu6050_read_gyroZ>
     a50:	f8 01       	movw	r30, r16
     a52:	40 81       	ld	r20, Z
     a54:	51 81       	ldd	r21, Z+1	; 0x01
     a56:	62 81       	ldd	r22, Z+2	; 0x02
     a58:	73 81       	ldd	r23, Z+3	; 0x03
     a5a:	48 0f       	add	r20, r24
     a5c:	59 1f       	adc	r21, r25
     a5e:	61 1d       	adc	r22, r1
     a60:	71 1d       	adc	r23, r1
     a62:	40 83       	st	Z, r20
     a64:	51 83       	std	Z+1, r21	; 0x01
     a66:	62 83       	std	Z+2, r22	; 0x02
     a68:	73 83       	std	Z+3, r23	; 0x03
     a6a:	8f e3       	ldi	r24, 0x3F	; 63
     a6c:	9f e1       	ldi	r25, 0x1F	; 31
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	f1 f7       	brne	.-4      	; 0xa6e <mpu6050_calibrate_gyro+0x78>
     a72:	00 c0       	rjmp	.+0      	; 0xa74 <mpu6050_calibrate_gyro+0x7e>
     a74:	00 00       	nop
     a76:	21 97       	sbiw	r28, 0x01	; 1
     a78:	71 f6       	brne	.-100    	; 0xa16 <mpu6050_calibrate_gyro+0x20>
     a7a:	f6 01       	movw	r30, r12
     a7c:	60 81       	ld	r22, Z
     a7e:	71 81       	ldd	r23, Z+1	; 0x01
     a80:	82 81       	ldd	r24, Z+2	; 0x02
     a82:	93 81       	ldd	r25, Z+3	; 0x03
     a84:	99 23       	and	r25, r25
     a86:	ac f4       	brge	.+42     	; 0xab2 <mpu6050_calibrate_gyro+0xbc>
     a88:	9b 01       	movw	r18, r22
     a8a:	77 23       	and	r23, r23
     a8c:	24 f4       	brge	.+8      	; 0xa96 <mpu6050_calibrate_gyro+0xa0>
     a8e:	22 27       	eor	r18, r18
     a90:	33 27       	eor	r19, r19
     a92:	26 1b       	sub	r18, r22
     a94:	37 0b       	sbc	r19, r23
     a96:	c9 01       	movw	r24, r18
     a98:	68 ec       	ldi	r22, 0xC8	; 200
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	57 d5       	rcall	.+2734   	; 0x154c <__divmodhi4>
     a9e:	cb 01       	movw	r24, r22
     aa0:	77 0f       	add	r23, r23
     aa2:	aa 0b       	sbc	r26, r26
     aa4:	bb 0b       	sbc	r27, r27
     aa6:	f6 01       	movw	r30, r12
     aa8:	80 83       	st	Z, r24
     aaa:	91 83       	std	Z+1, r25	; 0x01
     aac:	a2 83       	std	Z+2, r26	; 0x02
     aae:	b3 83       	std	Z+3, r27	; 0x03
     ab0:	0a c0       	rjmp	.+20     	; 0xac6 <mpu6050_calibrate_gyro+0xd0>
     ab2:	28 ec       	ldi	r18, 0xC8	; 200
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	5b d5       	rcall	.+2742   	; 0x1572 <__divmodsi4>
     abc:	f6 01       	movw	r30, r12
     abe:	20 83       	st	Z, r18
     ac0:	31 83       	std	Z+1, r19	; 0x01
     ac2:	42 83       	std	Z+2, r20	; 0x02
     ac4:	53 83       	std	Z+3, r21	; 0x03
     ac6:	f7 01       	movw	r30, r14
     ac8:	60 81       	ld	r22, Z
     aca:	71 81       	ldd	r23, Z+1	; 0x01
     acc:	82 81       	ldd	r24, Z+2	; 0x02
     ace:	93 81       	ldd	r25, Z+3	; 0x03
     ad0:	99 23       	and	r25, r25
     ad2:	ac f4       	brge	.+42     	; 0xafe <mpu6050_calibrate_gyro+0x108>
     ad4:	9b 01       	movw	r18, r22
     ad6:	77 23       	and	r23, r23
     ad8:	24 f4       	brge	.+8      	; 0xae2 <mpu6050_calibrate_gyro+0xec>
     ada:	22 27       	eor	r18, r18
     adc:	33 27       	eor	r19, r19
     ade:	26 1b       	sub	r18, r22
     ae0:	37 0b       	sbc	r19, r23
     ae2:	c9 01       	movw	r24, r18
     ae4:	68 ec       	ldi	r22, 0xC8	; 200
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	31 d5       	rcall	.+2658   	; 0x154c <__divmodhi4>
     aea:	cb 01       	movw	r24, r22
     aec:	77 0f       	add	r23, r23
     aee:	aa 0b       	sbc	r26, r26
     af0:	bb 0b       	sbc	r27, r27
     af2:	f7 01       	movw	r30, r14
     af4:	80 83       	st	Z, r24
     af6:	91 83       	std	Z+1, r25	; 0x01
     af8:	a2 83       	std	Z+2, r26	; 0x02
     afa:	b3 83       	std	Z+3, r27	; 0x03
     afc:	0a c0       	rjmp	.+20     	; 0xb12 <mpu6050_calibrate_gyro+0x11c>
     afe:	28 ec       	ldi	r18, 0xC8	; 200
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	35 d5       	rcall	.+2666   	; 0x1572 <__divmodsi4>
     b08:	f7 01       	movw	r30, r14
     b0a:	20 83       	st	Z, r18
     b0c:	31 83       	std	Z+1, r19	; 0x01
     b0e:	42 83       	std	Z+2, r20	; 0x02
     b10:	53 83       	std	Z+3, r21	; 0x03
     b12:	f8 01       	movw	r30, r16
     b14:	60 81       	ld	r22, Z
     b16:	71 81       	ldd	r23, Z+1	; 0x01
     b18:	82 81       	ldd	r24, Z+2	; 0x02
     b1a:	93 81       	ldd	r25, Z+3	; 0x03
     b1c:	99 23       	and	r25, r25
     b1e:	ac f4       	brge	.+42     	; 0xb4a <mpu6050_calibrate_gyro+0x154>
     b20:	9b 01       	movw	r18, r22
     b22:	77 23       	and	r23, r23
     b24:	24 f4       	brge	.+8      	; 0xb2e <mpu6050_calibrate_gyro+0x138>
     b26:	22 27       	eor	r18, r18
     b28:	33 27       	eor	r19, r19
     b2a:	26 1b       	sub	r18, r22
     b2c:	37 0b       	sbc	r19, r23
     b2e:	c9 01       	movw	r24, r18
     b30:	68 ec       	ldi	r22, 0xC8	; 200
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	0b d5       	rcall	.+2582   	; 0x154c <__divmodhi4>
     b36:	cb 01       	movw	r24, r22
     b38:	77 0f       	add	r23, r23
     b3a:	aa 0b       	sbc	r26, r26
     b3c:	bb 0b       	sbc	r27, r27
     b3e:	f8 01       	movw	r30, r16
     b40:	80 83       	st	Z, r24
     b42:	91 83       	std	Z+1, r25	; 0x01
     b44:	a2 83       	std	Z+2, r26	; 0x02
     b46:	b3 83       	std	Z+3, r27	; 0x03
     b48:	0a c0       	rjmp	.+20     	; 0xb5e <mpu6050_calibrate_gyro+0x168>
     b4a:	28 ec       	ldi	r18, 0xC8	; 200
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	0f d5       	rcall	.+2590   	; 0x1572 <__divmodsi4>
     b54:	f8 01       	movw	r30, r16
     b56:	20 83       	st	Z, r18
     b58:	31 83       	std	Z+1, r19	; 0x01
     b5a:	42 83       	std	Z+2, r20	; 0x02
     b5c:	53 83       	std	Z+3, r21	; 0x03
     b5e:	8c ec       	ldi	r24, 0xCC	; 204
     b60:	93 e0       	ldi	r25, 0x03	; 3
     b62:	9f 93       	push	r25
     b64:	8f 93       	push	r24
     b66:	c4 d5       	rcall	.+2952   	; 0x16f0 <printf>
     b68:	c6 01       	movw	r24, r12
     b6a:	40 dc       	rcall	.-1920   	; 0x3ec <print16>
     b6c:	c4 ea       	ldi	r28, 0xA4	; 164
     b6e:	d3 e0       	ldi	r29, 0x03	; 3
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	bd d5       	rcall	.+2938   	; 0x16f0 <printf>
     b76:	c7 01       	movw	r24, r14
     b78:	39 dc       	rcall	.-1934   	; 0x3ec <print16>
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	b8 d5       	rcall	.+2928   	; 0x16f0 <printf>
     b80:	c8 01       	movw	r24, r16
     b82:	cf de       	rcall	.-610    	; 0x922 <print16ln>
     b84:	ef ef       	ldi	r30, 0xFF	; 255
     b86:	f3 ed       	ldi	r31, 0xD3	; 211
     b88:	20 e3       	ldi	r18, 0x30	; 48
     b8a:	e1 50       	subi	r30, 0x01	; 1
     b8c:	f0 40       	sbci	r31, 0x00	; 0
     b8e:	20 40       	sbci	r18, 0x00	; 0
     b90:	e1 f7       	brne	.-8      	; 0xb8a <mpu6050_calibrate_gyro+0x194>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <mpu6050_calibrate_gyro+0x19e>
     b94:	00 00       	nop
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	cf 90       	pop	r12
     bb2:	08 95       	ret

00000bb4 <mpu6050_writeByte>:
	uint8_t byteToReturn=i2c_readNak();
	i2c_stop();
	return byteToReturn;
}
void mpu6050_writeByte(uint8_t wereToWrite,uint8_t byteToWrite)//writebyte
{
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	d8 2f       	mov	r29, r24
     bba:	c6 2f       	mov	r28, r22
	i2c_start(MPU6050_WRITE);
     bbc:	80 ed       	ldi	r24, 0xD0	; 208
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	f6 d0       	rcall	.+492    	; 0xdae <i2c_start>
	i2c_write(wereToWrite);
     bc2:	8d 2f       	mov	r24, r29
     bc4:	90 e0       	ldi	r25, 0x00	; 0
	i2c_write(byteToWrite);
     bc6:	49 d1       	rcall	.+658    	; 0xe5a <i2c_write>
     bc8:	8c 2f       	mov	r24, r28
	i2c_stop();
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	46 d1       	rcall	.+652    	; 0xe5a <i2c_write>
}
     bce:	35 d1       	rcall	.+618    	; 0xe3a <i2c_stop>
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <mpu6050_readBytes>:
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
     bd6:	af 92       	push	r10
     bd8:	bf 92       	push	r11
     bda:	cf 92       	push	r12
     bdc:	df 92       	push	r13
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
     be8:	66 23       	and	r22, r22
     bea:	a1 f1       	breq	.+104    	; 0xc54 <mpu6050_readBytes+0x7e>
     bec:	c5 2f       	mov	r28, r21
     bee:	d4 2f       	mov	r29, r20
     bf0:	f6 2e       	mov	r15, r22
     bf2:	18 2f       	mov	r17, r24
		//request register
		i2c_start(MPU6050_WRITE);
     bf4:	80 ed       	ldi	r24, 0xD0	; 208
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	da d0       	rcall	.+436    	; 0xdae <i2c_start>
		i2c_write(regAddr);
     bfa:	81 2f       	mov	r24, r17
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	2d d1       	rcall	.+602    	; 0xe5a <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c00:	85 e3       	ldi	r24, 0x35	; 53
     c02:	8a 95       	dec	r24
     c04:	f1 f7       	brne	.-4      	; 0xc02 <mpu6050_readBytes+0x2c>
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
     c06:	00 00       	nop
     c08:	81 ed       	ldi	r24, 0xD1	; 209
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	d0 d0       	rcall	.+416    	; 0xdae <i2c_start>
     c0e:	0d 2f       	mov	r16, r29
     c10:	1c 2f       	mov	r17, r28
     c12:	cc 24       	eor	r12, r12
     c14:	ca 94       	dec	r12
     c16:	cf 0c       	add	r12, r15
     c18:	d1 2c       	mov	r13, r1
     c1a:	ef ef       	ldi	r30, 0xFF	; 255
     c1c:	ce 1a       	sub	r12, r30
     c1e:	de 0a       	sbc	r13, r30
     c20:	c0 e0       	ldi	r28, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
     c22:	d0 e0       	ldi	r29, 0x00	; 0
     c24:	af 2c       	mov	r10, r15
     c26:	b1 2c       	mov	r11, r1
     c28:	f1 e0       	ldi	r31, 0x01	; 1
     c2a:	af 1a       	sub	r10, r31
     c2c:	b1 08       	sbc	r11, r1
     c2e:	ac 16       	cp	r10, r28
			data[i] = i2c_readNak();
     c30:	bd 06       	cpc	r11, r29
     c32:	21 f4       	brne	.+8      	; 0xc3c <mpu6050_readBytes+0x66>
     c34:	4d d1       	rcall	.+666    	; 0xed0 <i2c_readNak>
     c36:	f8 01       	movw	r30, r16
			else
			data[i] = i2c_readAck();
     c38:	80 83       	st	Z, r24
     c3a:	03 c0       	rjmp	.+6      	; 0xc42 <mpu6050_readBytes+0x6c>
     c3c:	2f d1       	rcall	.+606    	; 0xe9c <i2c_readAck>
     c3e:	f8 01       	movw	r30, r16
     c40:	80 83       	st	Z, r24
     c42:	21 96       	adiw	r28, 0x01	; 1
		i2c_start(MPU6050_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
		for(i=0; i<length; i++) {
     c44:	0f 5f       	subi	r16, 0xFF	; 255
     c46:	1f 4f       	sbci	r17, 0xFF	; 255
     c48:	cc 15       	cp	r28, r12
     c4a:	dd 05       	cpc	r29, r13
			if(i==length-1)
			data[i] = i2c_readNak();
			else
			data[i] = i2c_readAck();
		}
		i2c_stop();
     c4c:	81 f7       	brne	.-32     	; 0xc2e <mpu6050_readBytes+0x58>
     c4e:	cf 2d       	mov	r28, r15
     c50:	f4 d0       	rcall	.+488    	; 0xe3a <i2c_stop>
	i2c_write(byteToWrite);
	i2c_stop();
}
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
	uint8_t i = 0;
	int8_t count = 0;
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <mpu6050_readBytes+0x80>
			data[i] = i2c_readAck();
		}
		i2c_stop();
	}
	return count;
}
     c54:	c0 e0       	ldi	r28, 0x00	; 0
     c56:	8c 2f       	mov	r24, r28
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	ff 90       	pop	r15
     c62:	df 90       	pop	r13
     c64:	cf 90       	pop	r12
     c66:	bf 90       	pop	r11
     c68:	af 90       	pop	r10
     c6a:	08 95       	ret

00000c6c <mpu6050_getRawData>:
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     c6c:	6f 92       	push	r6
     c6e:	7f 92       	push	r7
     c70:	8f 92       	push	r8
     c72:	9f 92       	push	r9
     c74:	af 92       	push	r10
     c76:	bf 92       	push	r11
     c78:	cf 92       	push	r12
     c7a:	df 92       	push	r13
     c7c:	ef 92       	push	r14
     c7e:	ff 92       	push	r15
     c80:	0f 93       	push	r16
     c82:	1f 93       	push	r17
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	2e 97       	sbiw	r28, 0x0e	; 14
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	f8 94       	cli
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	cd bf       	out	0x3d, r28	; 61
     c98:	4c 01       	movw	r8, r24
     c9a:	5b 01       	movw	r10, r22
     c9c:	6a 01       	movw	r12, r20
     c9e:	39 01       	movw	r6, r18
	uint8_t buffer[14];
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14,  buffer);
     ca0:	ae 01       	movw	r20, r28
     ca2:	4f 5f       	subi	r20, 0xFF	; 255
     ca4:	5f 4f       	sbci	r21, 0xFF	; 255
     ca6:	6e e0       	ldi	r22, 0x0E	; 14
     ca8:	8b e3       	ldi	r24, 0x3B	; 59
     caa:	95 df       	rcall	.-214    	; 0xbd6 <mpu6050_readBytes>
	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	98 2f       	mov	r25, r24
     cb2:	88 27       	eor	r24, r24
     cb4:	2a 81       	ldd	r18, Y+2	; 0x02
     cb6:	82 2b       	or	r24, r18
     cb8:	f4 01       	movw	r30, r8
     cba:	91 83       	std	Z+1, r25	; 0x01
     cbc:	80 83       	st	Z, r24
	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	98 2f       	mov	r25, r24
     cc4:	88 27       	eor	r24, r24
     cc6:	2c 81       	ldd	r18, Y+4	; 0x04
     cc8:	82 2b       	or	r24, r18
     cca:	f5 01       	movw	r30, r10
     ccc:	91 83       	std	Z+1, r25	; 0x01
     cce:	80 83       	st	Z, r24
	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
     cd0:	8d 81       	ldd	r24, Y+5	; 0x05
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	98 2f       	mov	r25, r24
     cd6:	88 27       	eor	r24, r24
     cd8:	2e 81       	ldd	r18, Y+6	; 0x06
     cda:	82 2b       	or	r24, r18
     cdc:	f6 01       	movw	r30, r12
     cde:	91 83       	std	Z+1, r25	; 0x01
     ce0:	80 83       	st	Z, r24
	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     ce2:	89 85       	ldd	r24, Y+9	; 0x09
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	98 2f       	mov	r25, r24
     ce8:	88 27       	eor	r24, r24
     cea:	2a 85       	ldd	r18, Y+10	; 0x0a
     cec:	82 2b       	or	r24, r18
     cee:	f3 01       	movw	r30, r6
     cf0:	91 83       	std	Z+1, r25	; 0x01
     cf2:	80 83       	st	Z, r24
	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     cf4:	8b 85       	ldd	r24, Y+11	; 0x0b
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	98 2f       	mov	r25, r24
     cfa:	88 27       	eor	r24, r24
     cfc:	2c 85       	ldd	r18, Y+12	; 0x0c
     cfe:	82 2b       	or	r24, r18
     d00:	f8 01       	movw	r30, r16
     d02:	91 83       	std	Z+1, r25	; 0x01
     d04:	80 83       	st	Z, r24
	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     d06:	8d 85       	ldd	r24, Y+13	; 0x0d
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	98 2f       	mov	r25, r24
     d0c:	88 27       	eor	r24, r24
     d0e:	2e 85       	ldd	r18, Y+14	; 0x0e
     d10:	82 2b       	or	r24, r18
     d12:	f7 01       	movw	r30, r14
     d14:	91 83       	std	Z+1, r25	; 0x01
     d16:	80 83       	st	Z, r24
     d18:	2e 96       	adiw	r28, 0x0e	; 14
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	1f 91       	pop	r17
     d2a:	0f 91       	pop	r16
     d2c:	ff 90       	pop	r15
     d2e:	ef 90       	pop	r14
     d30:	df 90       	pop	r13
     d32:	cf 90       	pop	r12
     d34:	bf 90       	pop	r11
     d36:	af 90       	pop	r10
     d38:	9f 90       	pop	r9
     d3a:	8f 90       	pop	r8
     d3c:	7f 90       	pop	r7
     d3e:	6f 90       	pop	r6
     d40:	08 95       	ret

00000d42 <setup_timer4>:

#define clockCyclesPerMicrosecond () ( F_CPU / 1000000L )

/*-----------Timter 1-----------*/
void setup_timer4(void){
    sbi (TCCR4B, CS40);//prescakaer 256
     d42:	e1 ea       	ldi	r30, 0xA1	; 161
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	81 60       	ori	r24, 0x01	; 1
     d4a:	80 83       	st	Z, r24
    sbi (TCCR4A, WGM40);//8 bit phase correct PWM
     d4c:	e0 ea       	ldi	r30, 0xA0	; 160
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	81 60       	ori	r24, 0x01	; 1
     d54:	80 83       	st	Z, r24
	
	//sbi (TCCR4A,COM4A0);
	sbi (TCCR4A,COM4A1);
     d56:	80 81       	ld	r24, Z
     d58:	80 68       	ori	r24, 0x80	; 128
     d5a:	80 83       	st	Z, r24
	//sbi (TCCR4A,COM4B0);
	sbi (TCCR4A,COM4B1);
     d5c:	80 81       	ld	r24, Z
     d5e:	80 62       	ori	r24, 0x20	; 32
     d60:	80 83       	st	Z, r24
	//sbi (TCCR4A,COM4C0);
	sbi (TCCR4A,COM4C1);
     d62:	80 81       	ld	r24, Z
     d64:	88 60       	ori	r24, 0x08	; 8
     d66:	80 83       	st	Z, r24
     d68:	08 95       	ret

00000d6a <setup_timer5>:
}


/*-----------Timter 5-----------*/
void setup_timer5(void){
	sbi (TCCR5B, CS50);//only this 8
     d6a:	e1 e2       	ldi	r30, 0x21	; 33
     d6c:	f1 e0       	ldi	r31, 0x01	; 1
     d6e:	80 81       	ld	r24, Z
     d70:	81 60       	ori	r24, 0x01	; 1
     d72:	80 83       	st	Z, r24
	//sbi (TCCR5B, CS52);//only this 256
	sbi (TCCR5B, WGM52);//OCR4A compare interrupt
     d74:	80 81       	ld	r24, Z
     d76:	88 60       	ori	r24, 0x08	; 8
     d78:	80 83       	st	Z, r24
     d7a:	08 95       	ret

00000d7c <Enable_timer5_compare_interrupt>:
	
}
void Enable_timer5_compare_interrupt(){
	sbi (TIMSK5, OCIE5A);
     d7c:	e3 e7       	ldi	r30, 0x73	; 115
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	82 60       	ori	r24, 0x02	; 2
     d84:	80 83       	st	Z, r24
     d86:	08 95       	ret

00000d88 <setup_timer0>:
}
/*-----------Timter 2-----------*/
void setup_timer0(void){
	sbi(TCCR0B,CS00);
     d88:	85 b5       	in	r24, 0x25	; 37
     d8a:	81 60       	ori	r24, 0x01	; 1
     d8c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B,CS01);;//prescaler 64 , 250khz timer
     d8e:	85 b5       	in	r24, 0x25	; 37
     d90:	82 60       	ori	r24, 0x02	; 2
     d92:	85 bd       	out	0x25, r24	; 37
     d94:	08 95       	ret

00000d96 <Enable_timer0_overflow_interrupt>:
}
void Enable_timer0_overflow_interrupt(){
	sbi(TIMSK0,TOIE0);
     d96:	ee e6       	ldi	r30, 0x6E	; 110
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	81 60       	ori	r24, 0x01	; 1
     d9e:	80 83       	st	Z, r24
     da0:	08 95       	ret

00000da2 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     da2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     da6:	8c e0       	ldi	r24, 0x0C	; 12
     da8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     dac:	08 95       	ret

00000dae <i2c_start>:
     dae:	94 ea       	ldi	r25, 0xA4	; 164
     db0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     db4:	4f ef       	ldi	r20, 0xFF	; 255
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	ec eb       	ldi	r30, 0xBC	; 188
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	90 81       	ld	r25, Z
     dc2:	99 23       	and	r25, r25
     dc4:	34 f0       	brlt	.+12     	; 0xdd2 <i2c_start+0x24>
     dc6:	41 50       	subi	r20, 0x01	; 1
     dc8:	51 09       	sbc	r21, r1
     dca:	61 09       	sbc	r22, r1
     dcc:	71 09       	sbc	r23, r1
     dce:	c0 f7       	brcc	.-16     	; 0xdc0 <i2c_start+0x12>
     dd0:	04 c0       	rjmp	.+8      	; 0xdda <i2c_start+0x2c>
     dd2:	45 2b       	or	r20, r21
     dd4:	46 2b       	or	r20, r22
     dd6:	47 2b       	or	r20, r23
     dd8:	41 f1       	breq	.+80     	; 0xe2a <i2c_start+0x7c>
     dda:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     dde:	98 7f       	andi	r25, 0xF8	; 248
     de0:	98 30       	cpi	r25, 0x08	; 8
     de2:	11 f0       	breq	.+4      	; 0xde8 <i2c_start+0x3a>
     de4:	90 31       	cpi	r25, 0x10	; 16
     de6:	19 f5       	brne	.+70     	; 0xe2e <i2c_start+0x80>
     de8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     dec:	84 e8       	ldi	r24, 0x84	; 132
     dee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     df2:	8f ef       	ldi	r24, 0xFF	; 255
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	a0 e0       	ldi	r26, 0x00	; 0
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	ec eb       	ldi	r30, 0xBC	; 188
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	20 81       	ld	r18, Z
     e00:	22 23       	and	r18, r18
     e02:	2c f0       	brlt	.+10     	; 0xe0e <i2c_start+0x60>
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	a1 09       	sbc	r26, r1
     e08:	b1 09       	sbc	r27, r1
     e0a:	c8 f7       	brcc	.-14     	; 0xdfe <i2c_start+0x50>
     e0c:	04 c0       	rjmp	.+8      	; 0xe16 <i2c_start+0x68>
     e0e:	89 2b       	or	r24, r25
     e10:	8a 2b       	or	r24, r26
     e12:	8b 2b       	or	r24, r27
     e14:	71 f0       	breq	.+28     	; 0xe32 <i2c_start+0x84>
     e16:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     e1a:	98 7f       	andi	r25, 0xF8	; 248
     e1c:	98 31       	cpi	r25, 0x18	; 24
     e1e:	59 f0       	breq	.+22     	; 0xe36 <i2c_start+0x88>
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 34       	cpi	r25, 0x40	; 64
     e24:	49 f4       	brne	.+18     	; 0xe38 <i2c_start+0x8a>
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	08 95       	ret
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	08 95       	ret
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	08 95       	ret
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	08 95       	ret
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	08 95       	ret

00000e3a <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     e3a:	84 e9       	ldi	r24, 0x94	; 148
     e3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	ec eb       	ldi	r30, 0xBC	; 188
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	20 81       	ld	r18, Z
     e4a:	24 ff       	sbrs	r18, 4
     e4c:	05 c0       	rjmp	.+10     	; 0xe58 <i2c_stop+0x1e>
     e4e:	01 96       	adiw	r24, 0x01	; 1
     e50:	81 15       	cp	r24, r1
     e52:	21 e0       	ldi	r18, 0x01	; 1
     e54:	92 07       	cpc	r25, r18
     e56:	c1 f7       	brne	.-16     	; 0xe48 <i2c_stop+0xe>
     e58:	08 95       	ret

00000e5a <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     e5a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     e5e:	84 e8       	ldi	r24, 0x84	; 132
     e60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     e64:	8f ef       	ldi	r24, 0xFF	; 255
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	a0 e0       	ldi	r26, 0x00	; 0
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     e6c:	ec eb       	ldi	r30, 0xBC	; 188
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	20 81       	ld	r18, Z
     e72:	22 23       	and	r18, r18
     e74:	2c f0       	brlt	.+10     	; 0xe80 <i2c_write+0x26>
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	a1 09       	sbc	r26, r1
     e7a:	b1 09       	sbc	r27, r1
     e7c:	c8 f7       	brcc	.-14     	; 0xe70 <i2c_write+0x16>
     e7e:	04 c0       	rjmp	.+8      	; 0xe88 <i2c_write+0x2e>
	if(i2c_timer == 0)
     e80:	89 2b       	or	r24, r25
     e82:	8a 2b       	or	r24, r26
     e84:	8b 2b       	or	r24, r27
     e86:	41 f0       	breq	.+16     	; 0xe98 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     e88:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     e8c:	98 7f       	andi	r25, 0xF8	; 248
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	98 32       	cpi	r25, 0x28	; 40
     e92:	19 f4       	brne	.+6      	; 0xe9a <i2c_write+0x40>
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	08 95       	ret
     e98:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     e9a:	08 95       	ret

00000e9c <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     e9c:	84 ec       	ldi	r24, 0xC4	; 196
     e9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
     ea2:	8f ef       	ldi	r24, 0xFF	; 255
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	a0 e0       	ldi	r26, 0x00	; 0
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     eaa:	ec eb       	ldi	r30, 0xBC	; 188
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	20 81       	ld	r18, Z
     eb0:	22 23       	and	r18, r18
     eb2:	2c f0       	brlt	.+10     	; 0xebe <i2c_readAck+0x22>
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	a1 09       	sbc	r26, r1
     eb8:	b1 09       	sbc	r27, r1
     eba:	c8 f7       	brcc	.-14     	; 0xeae <i2c_readAck+0x12>
     ebc:	04 c0       	rjmp	.+8      	; 0xec6 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     ebe:	89 2b       	or	r24, r25
     ec0:	8a 2b       	or	r24, r26
     ec2:	8b 2b       	or	r24, r27
     ec4:	19 f0       	breq	.+6      	; 0xecc <i2c_readAck+0x30>
		return 0;

    return TWDR;
     ec6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     eca:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     ecc:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     ece:	08 95       	ret

00000ed0 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     ed0:	84 e8       	ldi	r24, 0x84	; 132
     ed2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	a0 e0       	ldi	r26, 0x00	; 0
     edc:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     ede:	ec eb       	ldi	r30, 0xBC	; 188
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	20 81       	ld	r18, Z
     ee4:	22 23       	and	r18, r18
     ee6:	2c f0       	brlt	.+10     	; 0xef2 <i2c_readNak+0x22>
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	a1 09       	sbc	r26, r1
     eec:	b1 09       	sbc	r27, r1
     eee:	c8 f7       	brcc	.-14     	; 0xee2 <i2c_readNak+0x12>
     ef0:	04 c0       	rjmp	.+8      	; 0xefa <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     ef2:	89 2b       	or	r24, r25
     ef4:	8a 2b       	or	r24, r26
     ef6:	8b 2b       	or	r24, r27
     ef8:	19 f0       	breq	.+6      	; 0xf00 <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     efa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     efe:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     f00:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     f02:	08 95       	ret

00000f04 <USART_Init>:
#include <avr/io.h>
#include <stdio.h>
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     f04:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;
     f08:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	UCSR0B = (1<<TXEN0);// | (1<<TXCIE0);
     f0c:	88 e0       	ldi	r24, 0x08	; 8
     f0e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);//2 stop bit 8 bit
     f12:	8e e0       	ldi	r24, 0x0E	; 14
     f14:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     f18:	08 95       	ret

00000f1a <__subsf3>:
     f1a:	50 58       	subi	r21, 0x80	; 128

00000f1c <__addsf3>:
     f1c:	bb 27       	eor	r27, r27
     f1e:	aa 27       	eor	r26, r26
     f20:	0e d0       	rcall	.+28     	; 0xf3e <__addsf3x>
     f22:	dd c1       	rjmp	.+954    	; 0x12de <__fp_round>
     f24:	ce d1       	rcall	.+924    	; 0x12c2 <__fp_pscA>
     f26:	30 f0       	brcs	.+12     	; 0xf34 <__addsf3+0x18>
     f28:	d3 d1       	rcall	.+934    	; 0x12d0 <__fp_pscB>
     f2a:	20 f0       	brcs	.+8      	; 0xf34 <__addsf3+0x18>
     f2c:	31 f4       	brne	.+12     	; 0xf3a <__addsf3+0x1e>
     f2e:	9f 3f       	cpi	r25, 0xFF	; 255
     f30:	11 f4       	brne	.+4      	; 0xf36 <__addsf3+0x1a>
     f32:	1e f4       	brtc	.+6      	; 0xf3a <__addsf3+0x1e>
     f34:	8d c1       	rjmp	.+794    	; 0x1250 <__fp_nan>
     f36:	0e f4       	brtc	.+2      	; 0xf3a <__addsf3+0x1e>
     f38:	e0 95       	com	r30
     f3a:	e7 fb       	bst	r30, 7
     f3c:	83 c1       	rjmp	.+774    	; 0x1244 <__fp_inf>

00000f3e <__addsf3x>:
     f3e:	e9 2f       	mov	r30, r25
     f40:	df d1       	rcall	.+958    	; 0x1300 <__fp_split3>
     f42:	80 f3       	brcs	.-32     	; 0xf24 <__addsf3+0x8>
     f44:	ba 17       	cp	r27, r26
     f46:	62 07       	cpc	r22, r18
     f48:	73 07       	cpc	r23, r19
     f4a:	84 07       	cpc	r24, r20
     f4c:	95 07       	cpc	r25, r21
     f4e:	18 f0       	brcs	.+6      	; 0xf56 <__addsf3x+0x18>
     f50:	71 f4       	brne	.+28     	; 0xf6e <__addsf3x+0x30>
     f52:	9e f5       	brtc	.+102    	; 0xfba <__addsf3x+0x7c>
     f54:	f7 c1       	rjmp	.+1006   	; 0x1344 <__fp_zero>
     f56:	0e f4       	brtc	.+2      	; 0xf5a <__addsf3x+0x1c>
     f58:	e0 95       	com	r30
     f5a:	0b 2e       	mov	r0, r27
     f5c:	ba 2f       	mov	r27, r26
     f5e:	a0 2d       	mov	r26, r0
     f60:	0b 01       	movw	r0, r22
     f62:	b9 01       	movw	r22, r18
     f64:	90 01       	movw	r18, r0
     f66:	0c 01       	movw	r0, r24
     f68:	ca 01       	movw	r24, r20
     f6a:	a0 01       	movw	r20, r0
     f6c:	11 24       	eor	r1, r1
     f6e:	ff 27       	eor	r31, r31
     f70:	59 1b       	sub	r21, r25
     f72:	99 f0       	breq	.+38     	; 0xf9a <__addsf3x+0x5c>
     f74:	59 3f       	cpi	r21, 0xF9	; 249
     f76:	50 f4       	brcc	.+20     	; 0xf8c <__addsf3x+0x4e>
     f78:	50 3e       	cpi	r21, 0xE0	; 224
     f7a:	68 f1       	brcs	.+90     	; 0xfd6 <__addsf3x+0x98>
     f7c:	1a 16       	cp	r1, r26
     f7e:	f0 40       	sbci	r31, 0x00	; 0
     f80:	a2 2f       	mov	r26, r18
     f82:	23 2f       	mov	r18, r19
     f84:	34 2f       	mov	r19, r20
     f86:	44 27       	eor	r20, r20
     f88:	58 5f       	subi	r21, 0xF8	; 248
     f8a:	f3 cf       	rjmp	.-26     	; 0xf72 <__addsf3x+0x34>
     f8c:	46 95       	lsr	r20
     f8e:	37 95       	ror	r19
     f90:	27 95       	ror	r18
     f92:	a7 95       	ror	r26
     f94:	f0 40       	sbci	r31, 0x00	; 0
     f96:	53 95       	inc	r21
     f98:	c9 f7       	brne	.-14     	; 0xf8c <__addsf3x+0x4e>
     f9a:	7e f4       	brtc	.+30     	; 0xfba <__addsf3x+0x7c>
     f9c:	1f 16       	cp	r1, r31
     f9e:	ba 0b       	sbc	r27, r26
     fa0:	62 0b       	sbc	r22, r18
     fa2:	73 0b       	sbc	r23, r19
     fa4:	84 0b       	sbc	r24, r20
     fa6:	ba f0       	brmi	.+46     	; 0xfd6 <__addsf3x+0x98>
     fa8:	91 50       	subi	r25, 0x01	; 1
     faa:	a1 f0       	breq	.+40     	; 0xfd4 <__addsf3x+0x96>
     fac:	ff 0f       	add	r31, r31
     fae:	bb 1f       	adc	r27, r27
     fb0:	66 1f       	adc	r22, r22
     fb2:	77 1f       	adc	r23, r23
     fb4:	88 1f       	adc	r24, r24
     fb6:	c2 f7       	brpl	.-16     	; 0xfa8 <__addsf3x+0x6a>
     fb8:	0e c0       	rjmp	.+28     	; 0xfd6 <__addsf3x+0x98>
     fba:	ba 0f       	add	r27, r26
     fbc:	62 1f       	adc	r22, r18
     fbe:	73 1f       	adc	r23, r19
     fc0:	84 1f       	adc	r24, r20
     fc2:	48 f4       	brcc	.+18     	; 0xfd6 <__addsf3x+0x98>
     fc4:	87 95       	ror	r24
     fc6:	77 95       	ror	r23
     fc8:	67 95       	ror	r22
     fca:	b7 95       	ror	r27
     fcc:	f7 95       	ror	r31
     fce:	9e 3f       	cpi	r25, 0xFE	; 254
     fd0:	08 f0       	brcs	.+2      	; 0xfd4 <__addsf3x+0x96>
     fd2:	b3 cf       	rjmp	.-154    	; 0xf3a <__addsf3+0x1e>
     fd4:	93 95       	inc	r25
     fd6:	88 0f       	add	r24, r24
     fd8:	08 f0       	brcs	.+2      	; 0xfdc <__addsf3x+0x9e>
     fda:	99 27       	eor	r25, r25
     fdc:	ee 0f       	add	r30, r30
     fde:	97 95       	ror	r25
     fe0:	87 95       	ror	r24
     fe2:	08 95       	ret

00000fe4 <asin>:
     fe4:	9f 93       	push	r25
     fe6:	9f 77       	andi	r25, 0x7F	; 127
     fe8:	ee e3       	ldi	r30, 0x3E	; 62
     fea:	89 37       	cpi	r24, 0x79	; 121
     fec:	9e 07       	cpc	r25, r30
     fee:	20 f4       	brcc	.+8      	; 0xff8 <asin+0x14>
     ff0:	e4 ee       	ldi	r30, 0xE4	; 228
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	55 d1       	rcall	.+682    	; 0x12a0 <__fp_powsodd>
     ff6:	09 c0       	rjmp	.+18     	; 0x100a <asin+0x26>
     ff8:	e6 d0       	rcall	.+460    	; 0x11c6 <__fp_arccos>
     ffa:	90 58       	subi	r25, 0x80	; 128
     ffc:	a2 ea       	ldi	r26, 0xA2	; 162
     ffe:	2a ed       	ldi	r18, 0xDA	; 218
    1000:	3f e0       	ldi	r19, 0x0F	; 15
    1002:	49 ec       	ldi	r20, 0xC9	; 201
    1004:	5f e3       	ldi	r21, 0x3F	; 63
    1006:	9b df       	rcall	.-202    	; 0xf3e <__addsf3x>
    1008:	6a d1       	rcall	.+724    	; 0x12de <__fp_round>
    100a:	0f 90       	pop	r0
    100c:	07 fc       	sbrc	r0, 7
    100e:	90 58       	subi	r25, 0x80	; 128
    1010:	08 95       	ret

00001012 <__cmpsf2>:
    1012:	f4 d0       	rcall	.+488    	; 0x11fc <__fp_cmp>
    1014:	08 f4       	brcc	.+2      	; 0x1018 <__cmpsf2+0x6>
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	08 95       	ret

0000101a <__divsf3>:
    101a:	0c d0       	rcall	.+24     	; 0x1034 <__divsf3x>
    101c:	60 c1       	rjmp	.+704    	; 0x12de <__fp_round>
    101e:	58 d1       	rcall	.+688    	; 0x12d0 <__fp_pscB>
    1020:	40 f0       	brcs	.+16     	; 0x1032 <__divsf3+0x18>
    1022:	4f d1       	rcall	.+670    	; 0x12c2 <__fp_pscA>
    1024:	30 f0       	brcs	.+12     	; 0x1032 <__divsf3+0x18>
    1026:	21 f4       	brne	.+8      	; 0x1030 <__divsf3+0x16>
    1028:	5f 3f       	cpi	r21, 0xFF	; 255
    102a:	19 f0       	breq	.+6      	; 0x1032 <__divsf3+0x18>
    102c:	0b c1       	rjmp	.+534    	; 0x1244 <__fp_inf>
    102e:	51 11       	cpse	r21, r1
    1030:	8a c1       	rjmp	.+788    	; 0x1346 <__fp_szero>
    1032:	0e c1       	rjmp	.+540    	; 0x1250 <__fp_nan>

00001034 <__divsf3x>:
    1034:	65 d1       	rcall	.+714    	; 0x1300 <__fp_split3>
    1036:	98 f3       	brcs	.-26     	; 0x101e <__divsf3+0x4>

00001038 <__divsf3_pse>:
    1038:	99 23       	and	r25, r25
    103a:	c9 f3       	breq	.-14     	; 0x102e <__divsf3+0x14>
    103c:	55 23       	and	r21, r21
    103e:	b1 f3       	breq	.-20     	; 0x102c <__divsf3+0x12>
    1040:	95 1b       	sub	r25, r21
    1042:	55 0b       	sbc	r21, r21
    1044:	bb 27       	eor	r27, r27
    1046:	aa 27       	eor	r26, r26
    1048:	62 17       	cp	r22, r18
    104a:	73 07       	cpc	r23, r19
    104c:	84 07       	cpc	r24, r20
    104e:	38 f0       	brcs	.+14     	; 0x105e <__divsf3_pse+0x26>
    1050:	9f 5f       	subi	r25, 0xFF	; 255
    1052:	5f 4f       	sbci	r21, 0xFF	; 255
    1054:	22 0f       	add	r18, r18
    1056:	33 1f       	adc	r19, r19
    1058:	44 1f       	adc	r20, r20
    105a:	aa 1f       	adc	r26, r26
    105c:	a9 f3       	breq	.-22     	; 0x1048 <__divsf3_pse+0x10>
    105e:	33 d0       	rcall	.+102    	; 0x10c6 <__divsf3_pse+0x8e>
    1060:	0e 2e       	mov	r0, r30
    1062:	3a f0       	brmi	.+14     	; 0x1072 <__divsf3_pse+0x3a>
    1064:	e0 e8       	ldi	r30, 0x80	; 128
    1066:	30 d0       	rcall	.+96     	; 0x10c8 <__divsf3_pse+0x90>
    1068:	91 50       	subi	r25, 0x01	; 1
    106a:	50 40       	sbci	r21, 0x00	; 0
    106c:	e6 95       	lsr	r30
    106e:	00 1c       	adc	r0, r0
    1070:	ca f7       	brpl	.-14     	; 0x1064 <__divsf3_pse+0x2c>
    1072:	29 d0       	rcall	.+82     	; 0x10c6 <__divsf3_pse+0x8e>
    1074:	fe 2f       	mov	r31, r30
    1076:	27 d0       	rcall	.+78     	; 0x10c6 <__divsf3_pse+0x8e>
    1078:	66 0f       	add	r22, r22
    107a:	77 1f       	adc	r23, r23
    107c:	88 1f       	adc	r24, r24
    107e:	bb 1f       	adc	r27, r27
    1080:	26 17       	cp	r18, r22
    1082:	37 07       	cpc	r19, r23
    1084:	48 07       	cpc	r20, r24
    1086:	ab 07       	cpc	r26, r27
    1088:	b0 e8       	ldi	r27, 0x80	; 128
    108a:	09 f0       	breq	.+2      	; 0x108e <__divsf3_pse+0x56>
    108c:	bb 0b       	sbc	r27, r27
    108e:	80 2d       	mov	r24, r0
    1090:	bf 01       	movw	r22, r30
    1092:	ff 27       	eor	r31, r31
    1094:	93 58       	subi	r25, 0x83	; 131
    1096:	5f 4f       	sbci	r21, 0xFF	; 255
    1098:	2a f0       	brmi	.+10     	; 0x10a4 <__divsf3_pse+0x6c>
    109a:	9e 3f       	cpi	r25, 0xFE	; 254
    109c:	51 05       	cpc	r21, r1
    109e:	68 f0       	brcs	.+26     	; 0x10ba <__divsf3_pse+0x82>
    10a0:	d1 c0       	rjmp	.+418    	; 0x1244 <__fp_inf>
    10a2:	51 c1       	rjmp	.+674    	; 0x1346 <__fp_szero>
    10a4:	5f 3f       	cpi	r21, 0xFF	; 255
    10a6:	ec f3       	brlt	.-6      	; 0x10a2 <__divsf3_pse+0x6a>
    10a8:	98 3e       	cpi	r25, 0xE8	; 232
    10aa:	dc f3       	brlt	.-10     	; 0x10a2 <__divsf3_pse+0x6a>
    10ac:	86 95       	lsr	r24
    10ae:	77 95       	ror	r23
    10b0:	67 95       	ror	r22
    10b2:	b7 95       	ror	r27
    10b4:	f7 95       	ror	r31
    10b6:	9f 5f       	subi	r25, 0xFF	; 255
    10b8:	c9 f7       	brne	.-14     	; 0x10ac <__divsf3_pse+0x74>
    10ba:	88 0f       	add	r24, r24
    10bc:	91 1d       	adc	r25, r1
    10be:	96 95       	lsr	r25
    10c0:	87 95       	ror	r24
    10c2:	97 f9       	bld	r25, 7
    10c4:	08 95       	ret
    10c6:	e1 e0       	ldi	r30, 0x01	; 1
    10c8:	66 0f       	add	r22, r22
    10ca:	77 1f       	adc	r23, r23
    10cc:	88 1f       	adc	r24, r24
    10ce:	bb 1f       	adc	r27, r27
    10d0:	62 17       	cp	r22, r18
    10d2:	73 07       	cpc	r23, r19
    10d4:	84 07       	cpc	r24, r20
    10d6:	ba 07       	cpc	r27, r26
    10d8:	20 f0       	brcs	.+8      	; 0x10e2 <__divsf3_pse+0xaa>
    10da:	62 1b       	sub	r22, r18
    10dc:	73 0b       	sbc	r23, r19
    10de:	84 0b       	sbc	r24, r20
    10e0:	ba 0b       	sbc	r27, r26
    10e2:	ee 1f       	adc	r30, r30
    10e4:	88 f7       	brcc	.-30     	; 0x10c8 <__divsf3_pse+0x90>
    10e6:	e0 95       	com	r30
    10e8:	08 95       	ret

000010ea <__fixsfsi>:
    10ea:	04 d0       	rcall	.+8      	; 0x10f4 <__fixunssfsi>
    10ec:	68 94       	set
    10ee:	b1 11       	cpse	r27, r1
    10f0:	2a c1       	rjmp	.+596    	; 0x1346 <__fp_szero>
    10f2:	08 95       	ret

000010f4 <__fixunssfsi>:
    10f4:	0d d1       	rcall	.+538    	; 0x1310 <__fp_splitA>
    10f6:	88 f0       	brcs	.+34     	; 0x111a <__fixunssfsi+0x26>
    10f8:	9f 57       	subi	r25, 0x7F	; 127
    10fa:	90 f0       	brcs	.+36     	; 0x1120 <__fixunssfsi+0x2c>
    10fc:	b9 2f       	mov	r27, r25
    10fe:	99 27       	eor	r25, r25
    1100:	b7 51       	subi	r27, 0x17	; 23
    1102:	a0 f0       	brcs	.+40     	; 0x112c <__fixunssfsi+0x38>
    1104:	d1 f0       	breq	.+52     	; 0x113a <__fixunssfsi+0x46>
    1106:	66 0f       	add	r22, r22
    1108:	77 1f       	adc	r23, r23
    110a:	88 1f       	adc	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	1a f0       	brmi	.+6      	; 0x1116 <__fixunssfsi+0x22>
    1110:	ba 95       	dec	r27
    1112:	c9 f7       	brne	.-14     	; 0x1106 <__fixunssfsi+0x12>
    1114:	12 c0       	rjmp	.+36     	; 0x113a <__fixunssfsi+0x46>
    1116:	b1 30       	cpi	r27, 0x01	; 1
    1118:	81 f0       	breq	.+32     	; 0x113a <__fixunssfsi+0x46>
    111a:	14 d1       	rcall	.+552    	; 0x1344 <__fp_zero>
    111c:	b1 e0       	ldi	r27, 0x01	; 1
    111e:	08 95       	ret
    1120:	11 c1       	rjmp	.+546    	; 0x1344 <__fp_zero>
    1122:	67 2f       	mov	r22, r23
    1124:	78 2f       	mov	r23, r24
    1126:	88 27       	eor	r24, r24
    1128:	b8 5f       	subi	r27, 0xF8	; 248
    112a:	39 f0       	breq	.+14     	; 0x113a <__fixunssfsi+0x46>
    112c:	b9 3f       	cpi	r27, 0xF9	; 249
    112e:	cc f3       	brlt	.-14     	; 0x1122 <__fixunssfsi+0x2e>
    1130:	86 95       	lsr	r24
    1132:	77 95       	ror	r23
    1134:	67 95       	ror	r22
    1136:	b3 95       	inc	r27
    1138:	d9 f7       	brne	.-10     	; 0x1130 <__fixunssfsi+0x3c>
    113a:	3e f4       	brtc	.+14     	; 0x114a <__fixunssfsi+0x56>
    113c:	90 95       	com	r25
    113e:	80 95       	com	r24
    1140:	70 95       	com	r23
    1142:	61 95       	neg	r22
    1144:	7f 4f       	sbci	r23, 0xFF	; 255
    1146:	8f 4f       	sbci	r24, 0xFF	; 255
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	08 95       	ret

0000114c <__floatunsisf>:
    114c:	e8 94       	clt
    114e:	09 c0       	rjmp	.+18     	; 0x1162 <__floatsisf+0x12>

00001150 <__floatsisf>:
    1150:	97 fb       	bst	r25, 7
    1152:	3e f4       	brtc	.+14     	; 0x1162 <__floatsisf+0x12>
    1154:	90 95       	com	r25
    1156:	80 95       	com	r24
    1158:	70 95       	com	r23
    115a:	61 95       	neg	r22
    115c:	7f 4f       	sbci	r23, 0xFF	; 255
    115e:	8f 4f       	sbci	r24, 0xFF	; 255
    1160:	9f 4f       	sbci	r25, 0xFF	; 255
    1162:	99 23       	and	r25, r25
    1164:	a9 f0       	breq	.+42     	; 0x1190 <__floatsisf+0x40>
    1166:	f9 2f       	mov	r31, r25
    1168:	96 e9       	ldi	r25, 0x96	; 150
    116a:	bb 27       	eor	r27, r27
    116c:	93 95       	inc	r25
    116e:	f6 95       	lsr	r31
    1170:	87 95       	ror	r24
    1172:	77 95       	ror	r23
    1174:	67 95       	ror	r22
    1176:	b7 95       	ror	r27
    1178:	f1 11       	cpse	r31, r1
    117a:	f8 cf       	rjmp	.-16     	; 0x116c <__floatsisf+0x1c>
    117c:	fa f4       	brpl	.+62     	; 0x11bc <__floatsisf+0x6c>
    117e:	bb 0f       	add	r27, r27
    1180:	11 f4       	brne	.+4      	; 0x1186 <__floatsisf+0x36>
    1182:	60 ff       	sbrs	r22, 0
    1184:	1b c0       	rjmp	.+54     	; 0x11bc <__floatsisf+0x6c>
    1186:	6f 5f       	subi	r22, 0xFF	; 255
    1188:	7f 4f       	sbci	r23, 0xFF	; 255
    118a:	8f 4f       	sbci	r24, 0xFF	; 255
    118c:	9f 4f       	sbci	r25, 0xFF	; 255
    118e:	16 c0       	rjmp	.+44     	; 0x11bc <__floatsisf+0x6c>
    1190:	88 23       	and	r24, r24
    1192:	11 f0       	breq	.+4      	; 0x1198 <__floatsisf+0x48>
    1194:	96 e9       	ldi	r25, 0x96	; 150
    1196:	11 c0       	rjmp	.+34     	; 0x11ba <__floatsisf+0x6a>
    1198:	77 23       	and	r23, r23
    119a:	21 f0       	breq	.+8      	; 0x11a4 <__floatsisf+0x54>
    119c:	9e e8       	ldi	r25, 0x8E	; 142
    119e:	87 2f       	mov	r24, r23
    11a0:	76 2f       	mov	r23, r22
    11a2:	05 c0       	rjmp	.+10     	; 0x11ae <__floatsisf+0x5e>
    11a4:	66 23       	and	r22, r22
    11a6:	71 f0       	breq	.+28     	; 0x11c4 <__floatsisf+0x74>
    11a8:	96 e8       	ldi	r25, 0x86	; 134
    11aa:	86 2f       	mov	r24, r22
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	2a f0       	brmi	.+10     	; 0x11bc <__floatsisf+0x6c>
    11b2:	9a 95       	dec	r25
    11b4:	66 0f       	add	r22, r22
    11b6:	77 1f       	adc	r23, r23
    11b8:	88 1f       	adc	r24, r24
    11ba:	da f7       	brpl	.-10     	; 0x11b2 <__floatsisf+0x62>
    11bc:	88 0f       	add	r24, r24
    11be:	96 95       	lsr	r25
    11c0:	87 95       	ror	r24
    11c2:	97 f9       	bld	r25, 7
    11c4:	08 95       	ret

000011c6 <__fp_arccos>:
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	1f 93       	push	r17
    11cc:	0f 93       	push	r16
    11ce:	8b 01       	movw	r16, r22
    11d0:	ec 01       	movw	r28, r24
    11d2:	e8 ef       	ldi	r30, 0xF8	; 248
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	3f d0       	rcall	.+126    	; 0x1256 <__fp_powser>
    11d8:	82 d0       	rcall	.+260    	; 0x12de <__fp_round>
    11da:	98 01       	movw	r18, r16
    11dc:	ae 01       	movw	r20, r28
    11de:	8b 01       	movw	r16, r22
    11e0:	ec 01       	movw	r28, r24
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	80 e8       	ldi	r24, 0x80	; 128
    11e8:	9f e3       	ldi	r25, 0x3F	; 63
    11ea:	97 de       	rcall	.-722    	; 0xf1a <__subsf3>
    11ec:	23 d1       	rcall	.+582    	; 0x1434 <sqrt>
    11ee:	98 01       	movw	r18, r16
    11f0:	ae 01       	movw	r20, r28
    11f2:	0f 91       	pop	r16
    11f4:	1f 91       	pop	r17
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	bb c0       	rjmp	.+374    	; 0x1372 <__mulsf3x>

000011fc <__fp_cmp>:
    11fc:	99 0f       	add	r25, r25
    11fe:	00 08       	sbc	r0, r0
    1200:	55 0f       	add	r21, r21
    1202:	aa 0b       	sbc	r26, r26
    1204:	e0 e8       	ldi	r30, 0x80	; 128
    1206:	fe ef       	ldi	r31, 0xFE	; 254
    1208:	16 16       	cp	r1, r22
    120a:	17 06       	cpc	r1, r23
    120c:	e8 07       	cpc	r30, r24
    120e:	f9 07       	cpc	r31, r25
    1210:	c0 f0       	brcs	.+48     	; 0x1242 <__fp_cmp+0x46>
    1212:	12 16       	cp	r1, r18
    1214:	13 06       	cpc	r1, r19
    1216:	e4 07       	cpc	r30, r20
    1218:	f5 07       	cpc	r31, r21
    121a:	98 f0       	brcs	.+38     	; 0x1242 <__fp_cmp+0x46>
    121c:	62 1b       	sub	r22, r18
    121e:	73 0b       	sbc	r23, r19
    1220:	84 0b       	sbc	r24, r20
    1222:	95 0b       	sbc	r25, r21
    1224:	39 f4       	brne	.+14     	; 0x1234 <__fp_cmp+0x38>
    1226:	0a 26       	eor	r0, r26
    1228:	61 f0       	breq	.+24     	; 0x1242 <__fp_cmp+0x46>
    122a:	23 2b       	or	r18, r19
    122c:	24 2b       	or	r18, r20
    122e:	25 2b       	or	r18, r21
    1230:	21 f4       	brne	.+8      	; 0x123a <__fp_cmp+0x3e>
    1232:	08 95       	ret
    1234:	0a 26       	eor	r0, r26
    1236:	09 f4       	brne	.+2      	; 0x123a <__fp_cmp+0x3e>
    1238:	a1 40       	sbci	r26, 0x01	; 1
    123a:	a6 95       	lsr	r26
    123c:	8f ef       	ldi	r24, 0xFF	; 255
    123e:	81 1d       	adc	r24, r1
    1240:	81 1d       	adc	r24, r1
    1242:	08 95       	ret

00001244 <__fp_inf>:
    1244:	97 f9       	bld	r25, 7
    1246:	9f 67       	ori	r25, 0x7F	; 127
    1248:	80 e8       	ldi	r24, 0x80	; 128
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	08 95       	ret

00001250 <__fp_nan>:
    1250:	9f ef       	ldi	r25, 0xFF	; 255
    1252:	80 ec       	ldi	r24, 0xC0	; 192
    1254:	08 95       	ret

00001256 <__fp_powser>:
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	1f 93       	push	r17
    125c:	0f 93       	push	r16
    125e:	ff 92       	push	r15
    1260:	ef 92       	push	r14
    1262:	df 92       	push	r13
    1264:	7b 01       	movw	r14, r22
    1266:	8c 01       	movw	r16, r24
    1268:	68 94       	set
    126a:	05 c0       	rjmp	.+10     	; 0x1276 <__fp_powser+0x20>
    126c:	da 2e       	mov	r13, r26
    126e:	ef 01       	movw	r28, r30
    1270:	80 d0       	rcall	.+256    	; 0x1372 <__mulsf3x>
    1272:	fe 01       	movw	r30, r28
    1274:	e8 94       	clt
    1276:	a5 91       	lpm	r26, Z+
    1278:	25 91       	lpm	r18, Z+
    127a:	35 91       	lpm	r19, Z+
    127c:	45 91       	lpm	r20, Z+
    127e:	55 91       	lpm	r21, Z+
    1280:	ae f3       	brts	.-22     	; 0x126c <__fp_powser+0x16>
    1282:	ef 01       	movw	r28, r30
    1284:	5c de       	rcall	.-840    	; 0xf3e <__addsf3x>
    1286:	fe 01       	movw	r30, r28
    1288:	97 01       	movw	r18, r14
    128a:	a8 01       	movw	r20, r16
    128c:	da 94       	dec	r13
    128e:	79 f7       	brne	.-34     	; 0x126e <__fp_powser+0x18>
    1290:	df 90       	pop	r13
    1292:	ef 90       	pop	r14
    1294:	ff 90       	pop	r15
    1296:	0f 91       	pop	r16
    1298:	1f 91       	pop	r17
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <__fp_powsodd>:
    12a0:	9f 93       	push	r25
    12a2:	8f 93       	push	r24
    12a4:	7f 93       	push	r23
    12a6:	6f 93       	push	r22
    12a8:	ff 93       	push	r31
    12aa:	ef 93       	push	r30
    12ac:	9b 01       	movw	r18, r22
    12ae:	ac 01       	movw	r20, r24
    12b0:	54 d0       	rcall	.+168    	; 0x135a <__mulsf3>
    12b2:	ef 91       	pop	r30
    12b4:	ff 91       	pop	r31
    12b6:	cf df       	rcall	.-98     	; 0x1256 <__fp_powser>
    12b8:	2f 91       	pop	r18
    12ba:	3f 91       	pop	r19
    12bc:	4f 91       	pop	r20
    12be:	5f 91       	pop	r21
    12c0:	4c c0       	rjmp	.+152    	; 0x135a <__mulsf3>

000012c2 <__fp_pscA>:
    12c2:	00 24       	eor	r0, r0
    12c4:	0a 94       	dec	r0
    12c6:	16 16       	cp	r1, r22
    12c8:	17 06       	cpc	r1, r23
    12ca:	18 06       	cpc	r1, r24
    12cc:	09 06       	cpc	r0, r25
    12ce:	08 95       	ret

000012d0 <__fp_pscB>:
    12d0:	00 24       	eor	r0, r0
    12d2:	0a 94       	dec	r0
    12d4:	12 16       	cp	r1, r18
    12d6:	13 06       	cpc	r1, r19
    12d8:	14 06       	cpc	r1, r20
    12da:	05 06       	cpc	r0, r21
    12dc:	08 95       	ret

000012de <__fp_round>:
    12de:	09 2e       	mov	r0, r25
    12e0:	03 94       	inc	r0
    12e2:	00 0c       	add	r0, r0
    12e4:	11 f4       	brne	.+4      	; 0x12ea <__fp_round+0xc>
    12e6:	88 23       	and	r24, r24
    12e8:	52 f0       	brmi	.+20     	; 0x12fe <__fp_round+0x20>
    12ea:	bb 0f       	add	r27, r27
    12ec:	40 f4       	brcc	.+16     	; 0x12fe <__fp_round+0x20>
    12ee:	bf 2b       	or	r27, r31
    12f0:	11 f4       	brne	.+4      	; 0x12f6 <__fp_round+0x18>
    12f2:	60 ff       	sbrs	r22, 0
    12f4:	04 c0       	rjmp	.+8      	; 0x12fe <__fp_round+0x20>
    12f6:	6f 5f       	subi	r22, 0xFF	; 255
    12f8:	7f 4f       	sbci	r23, 0xFF	; 255
    12fa:	8f 4f       	sbci	r24, 0xFF	; 255
    12fc:	9f 4f       	sbci	r25, 0xFF	; 255
    12fe:	08 95       	ret

00001300 <__fp_split3>:
    1300:	57 fd       	sbrc	r21, 7
    1302:	90 58       	subi	r25, 0x80	; 128
    1304:	44 0f       	add	r20, r20
    1306:	55 1f       	adc	r21, r21
    1308:	59 f0       	breq	.+22     	; 0x1320 <__fp_splitA+0x10>
    130a:	5f 3f       	cpi	r21, 0xFF	; 255
    130c:	71 f0       	breq	.+28     	; 0x132a <__fp_splitA+0x1a>
    130e:	47 95       	ror	r20

00001310 <__fp_splitA>:
    1310:	88 0f       	add	r24, r24
    1312:	97 fb       	bst	r25, 7
    1314:	99 1f       	adc	r25, r25
    1316:	61 f0       	breq	.+24     	; 0x1330 <__fp_splitA+0x20>
    1318:	9f 3f       	cpi	r25, 0xFF	; 255
    131a:	79 f0       	breq	.+30     	; 0x133a <__fp_splitA+0x2a>
    131c:	87 95       	ror	r24
    131e:	08 95       	ret
    1320:	12 16       	cp	r1, r18
    1322:	13 06       	cpc	r1, r19
    1324:	14 06       	cpc	r1, r20
    1326:	55 1f       	adc	r21, r21
    1328:	f2 cf       	rjmp	.-28     	; 0x130e <__fp_split3+0xe>
    132a:	46 95       	lsr	r20
    132c:	f1 df       	rcall	.-30     	; 0x1310 <__fp_splitA>
    132e:	08 c0       	rjmp	.+16     	; 0x1340 <__fp_splitA+0x30>
    1330:	16 16       	cp	r1, r22
    1332:	17 06       	cpc	r1, r23
    1334:	18 06       	cpc	r1, r24
    1336:	99 1f       	adc	r25, r25
    1338:	f1 cf       	rjmp	.-30     	; 0x131c <__fp_splitA+0xc>
    133a:	86 95       	lsr	r24
    133c:	71 05       	cpc	r23, r1
    133e:	61 05       	cpc	r22, r1
    1340:	08 94       	sec
    1342:	08 95       	ret

00001344 <__fp_zero>:
    1344:	e8 94       	clt

00001346 <__fp_szero>:
    1346:	bb 27       	eor	r27, r27
    1348:	66 27       	eor	r22, r22
    134a:	77 27       	eor	r23, r23
    134c:	cb 01       	movw	r24, r22
    134e:	97 f9       	bld	r25, 7
    1350:	08 95       	ret

00001352 <__gesf2>:
    1352:	54 df       	rcall	.-344    	; 0x11fc <__fp_cmp>
    1354:	08 f4       	brcc	.+2      	; 0x1358 <__gesf2+0x6>
    1356:	8f ef       	ldi	r24, 0xFF	; 255
    1358:	08 95       	ret

0000135a <__mulsf3>:
    135a:	0b d0       	rcall	.+22     	; 0x1372 <__mulsf3x>
    135c:	c0 cf       	rjmp	.-128    	; 0x12de <__fp_round>
    135e:	b1 df       	rcall	.-158    	; 0x12c2 <__fp_pscA>
    1360:	28 f0       	brcs	.+10     	; 0x136c <__mulsf3+0x12>
    1362:	b6 df       	rcall	.-148    	; 0x12d0 <__fp_pscB>
    1364:	18 f0       	brcs	.+6      	; 0x136c <__mulsf3+0x12>
    1366:	95 23       	and	r25, r21
    1368:	09 f0       	breq	.+2      	; 0x136c <__mulsf3+0x12>
    136a:	6c cf       	rjmp	.-296    	; 0x1244 <__fp_inf>
    136c:	71 cf       	rjmp	.-286    	; 0x1250 <__fp_nan>
    136e:	11 24       	eor	r1, r1
    1370:	ea cf       	rjmp	.-44     	; 0x1346 <__fp_szero>

00001372 <__mulsf3x>:
    1372:	c6 df       	rcall	.-116    	; 0x1300 <__fp_split3>
    1374:	a0 f3       	brcs	.-24     	; 0x135e <__mulsf3+0x4>

00001376 <__mulsf3_pse>:
    1376:	95 9f       	mul	r25, r21
    1378:	d1 f3       	breq	.-12     	; 0x136e <__mulsf3+0x14>
    137a:	95 0f       	add	r25, r21
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	55 1f       	adc	r21, r21
    1380:	62 9f       	mul	r22, r18
    1382:	f0 01       	movw	r30, r0
    1384:	72 9f       	mul	r23, r18
    1386:	bb 27       	eor	r27, r27
    1388:	f0 0d       	add	r31, r0
    138a:	b1 1d       	adc	r27, r1
    138c:	63 9f       	mul	r22, r19
    138e:	aa 27       	eor	r26, r26
    1390:	f0 0d       	add	r31, r0
    1392:	b1 1d       	adc	r27, r1
    1394:	aa 1f       	adc	r26, r26
    1396:	64 9f       	mul	r22, r20
    1398:	66 27       	eor	r22, r22
    139a:	b0 0d       	add	r27, r0
    139c:	a1 1d       	adc	r26, r1
    139e:	66 1f       	adc	r22, r22
    13a0:	82 9f       	mul	r24, r18
    13a2:	22 27       	eor	r18, r18
    13a4:	b0 0d       	add	r27, r0
    13a6:	a1 1d       	adc	r26, r1
    13a8:	62 1f       	adc	r22, r18
    13aa:	73 9f       	mul	r23, r19
    13ac:	b0 0d       	add	r27, r0
    13ae:	a1 1d       	adc	r26, r1
    13b0:	62 1f       	adc	r22, r18
    13b2:	83 9f       	mul	r24, r19
    13b4:	a0 0d       	add	r26, r0
    13b6:	61 1d       	adc	r22, r1
    13b8:	22 1f       	adc	r18, r18
    13ba:	74 9f       	mul	r23, r20
    13bc:	33 27       	eor	r19, r19
    13be:	a0 0d       	add	r26, r0
    13c0:	61 1d       	adc	r22, r1
    13c2:	23 1f       	adc	r18, r19
    13c4:	84 9f       	mul	r24, r20
    13c6:	60 0d       	add	r22, r0
    13c8:	21 1d       	adc	r18, r1
    13ca:	82 2f       	mov	r24, r18
    13cc:	76 2f       	mov	r23, r22
    13ce:	6a 2f       	mov	r22, r26
    13d0:	11 24       	eor	r1, r1
    13d2:	9f 57       	subi	r25, 0x7F	; 127
    13d4:	50 40       	sbci	r21, 0x00	; 0
    13d6:	8a f0       	brmi	.+34     	; 0x13fa <__mulsf3_pse+0x84>
    13d8:	e1 f0       	breq	.+56     	; 0x1412 <__mulsf3_pse+0x9c>
    13da:	88 23       	and	r24, r24
    13dc:	4a f0       	brmi	.+18     	; 0x13f0 <__mulsf3_pse+0x7a>
    13de:	ee 0f       	add	r30, r30
    13e0:	ff 1f       	adc	r31, r31
    13e2:	bb 1f       	adc	r27, r27
    13e4:	66 1f       	adc	r22, r22
    13e6:	77 1f       	adc	r23, r23
    13e8:	88 1f       	adc	r24, r24
    13ea:	91 50       	subi	r25, 0x01	; 1
    13ec:	50 40       	sbci	r21, 0x00	; 0
    13ee:	a9 f7       	brne	.-22     	; 0x13da <__mulsf3_pse+0x64>
    13f0:	9e 3f       	cpi	r25, 0xFE	; 254
    13f2:	51 05       	cpc	r21, r1
    13f4:	70 f0       	brcs	.+28     	; 0x1412 <__mulsf3_pse+0x9c>
    13f6:	26 cf       	rjmp	.-436    	; 0x1244 <__fp_inf>
    13f8:	a6 cf       	rjmp	.-180    	; 0x1346 <__fp_szero>
    13fa:	5f 3f       	cpi	r21, 0xFF	; 255
    13fc:	ec f3       	brlt	.-6      	; 0x13f8 <__mulsf3_pse+0x82>
    13fe:	98 3e       	cpi	r25, 0xE8	; 232
    1400:	dc f3       	brlt	.-10     	; 0x13f8 <__mulsf3_pse+0x82>
    1402:	86 95       	lsr	r24
    1404:	77 95       	ror	r23
    1406:	67 95       	ror	r22
    1408:	b7 95       	ror	r27
    140a:	f7 95       	ror	r31
    140c:	e7 95       	ror	r30
    140e:	9f 5f       	subi	r25, 0xFF	; 255
    1410:	c1 f7       	brne	.-16     	; 0x1402 <__mulsf3_pse+0x8c>
    1412:	fe 2b       	or	r31, r30
    1414:	88 0f       	add	r24, r24
    1416:	91 1d       	adc	r25, r1
    1418:	96 95       	lsr	r25
    141a:	87 95       	ror	r24
    141c:	97 f9       	bld	r25, 7
    141e:	08 95       	ret

00001420 <sin>:
    1420:	9f 93       	push	r25
    1422:	5c d0       	rcall	.+184    	; 0x14dc <__fp_rempio2>
    1424:	0f 90       	pop	r0
    1426:	07 fc       	sbrc	r0, 7
    1428:	ee 5f       	subi	r30, 0xFE	; 254
    142a:	7f c0       	rjmp	.+254    	; 0x152a <__fp_sinus>
    142c:	11 f4       	brne	.+4      	; 0x1432 <sin+0x12>
    142e:	0e f4       	brtc	.+2      	; 0x1432 <sin+0x12>
    1430:	0f cf       	rjmp	.-482    	; 0x1250 <__fp_nan>
    1432:	3e c0       	rjmp	.+124    	; 0x14b0 <__fp_mpack>

00001434 <sqrt>:
    1434:	6d df       	rcall	.-294    	; 0x1310 <__fp_splitA>
    1436:	d0 f3       	brcs	.-12     	; 0x142c <sin+0xc>
    1438:	99 23       	and	r25, r25
    143a:	d9 f3       	breq	.-10     	; 0x1432 <sin+0x12>
    143c:	ce f3       	brts	.-14     	; 0x1430 <sin+0x10>
    143e:	9f 57       	subi	r25, 0x7F	; 127
    1440:	55 0b       	sbc	r21, r21
    1442:	87 ff       	sbrs	r24, 7
    1444:	43 d0       	rcall	.+134    	; 0x14cc <__fp_norm2>
    1446:	00 24       	eor	r0, r0
    1448:	a0 e6       	ldi	r26, 0x60	; 96
    144a:	40 ea       	ldi	r20, 0xA0	; 160
    144c:	90 01       	movw	r18, r0
    144e:	80 58       	subi	r24, 0x80	; 128
    1450:	56 95       	lsr	r21
    1452:	97 95       	ror	r25
    1454:	28 f4       	brcc	.+10     	; 0x1460 <sqrt+0x2c>
    1456:	80 5c       	subi	r24, 0xC0	; 192
    1458:	66 0f       	add	r22, r22
    145a:	77 1f       	adc	r23, r23
    145c:	88 1f       	adc	r24, r24
    145e:	20 f0       	brcs	.+8      	; 0x1468 <sqrt+0x34>
    1460:	26 17       	cp	r18, r22
    1462:	37 07       	cpc	r19, r23
    1464:	48 07       	cpc	r20, r24
    1466:	30 f4       	brcc	.+12     	; 0x1474 <sqrt+0x40>
    1468:	62 1b       	sub	r22, r18
    146a:	73 0b       	sbc	r23, r19
    146c:	84 0b       	sbc	r24, r20
    146e:	20 29       	or	r18, r0
    1470:	31 29       	or	r19, r1
    1472:	4a 2b       	or	r20, r26
    1474:	a6 95       	lsr	r26
    1476:	17 94       	ror	r1
    1478:	07 94       	ror	r0
    147a:	20 25       	eor	r18, r0
    147c:	31 25       	eor	r19, r1
    147e:	4a 27       	eor	r20, r26
    1480:	58 f7       	brcc	.-42     	; 0x1458 <sqrt+0x24>
    1482:	66 0f       	add	r22, r22
    1484:	77 1f       	adc	r23, r23
    1486:	88 1f       	adc	r24, r24
    1488:	20 f0       	brcs	.+8      	; 0x1492 <sqrt+0x5e>
    148a:	26 17       	cp	r18, r22
    148c:	37 07       	cpc	r19, r23
    148e:	48 07       	cpc	r20, r24
    1490:	30 f4       	brcc	.+12     	; 0x149e <sqrt+0x6a>
    1492:	62 0b       	sbc	r22, r18
    1494:	73 0b       	sbc	r23, r19
    1496:	84 0b       	sbc	r24, r20
    1498:	20 0d       	add	r18, r0
    149a:	31 1d       	adc	r19, r1
    149c:	41 1d       	adc	r20, r1
    149e:	a0 95       	com	r26
    14a0:	81 f7       	brne	.-32     	; 0x1482 <sqrt+0x4e>
    14a2:	b9 01       	movw	r22, r18
    14a4:	84 2f       	mov	r24, r20
    14a6:	91 58       	subi	r25, 0x81	; 129
    14a8:	88 0f       	add	r24, r24
    14aa:	96 95       	lsr	r25
    14ac:	87 95       	ror	r24
    14ae:	08 95       	ret

000014b0 <__fp_mpack>:
    14b0:	9f 3f       	cpi	r25, 0xFF	; 255
    14b2:	31 f0       	breq	.+12     	; 0x14c0 <__fp_mpack_finite+0xc>

000014b4 <__fp_mpack_finite>:
    14b4:	91 50       	subi	r25, 0x01	; 1
    14b6:	20 f4       	brcc	.+8      	; 0x14c0 <__fp_mpack_finite+0xc>
    14b8:	87 95       	ror	r24
    14ba:	77 95       	ror	r23
    14bc:	67 95       	ror	r22
    14be:	b7 95       	ror	r27
    14c0:	88 0f       	add	r24, r24
    14c2:	91 1d       	adc	r25, r1
    14c4:	96 95       	lsr	r25
    14c6:	87 95       	ror	r24
    14c8:	97 f9       	bld	r25, 7
    14ca:	08 95       	ret

000014cc <__fp_norm2>:
    14cc:	91 50       	subi	r25, 0x01	; 1
    14ce:	50 40       	sbci	r21, 0x00	; 0
    14d0:	66 0f       	add	r22, r22
    14d2:	77 1f       	adc	r23, r23
    14d4:	88 1f       	adc	r24, r24
    14d6:	d2 f7       	brpl	.-12     	; 0x14cc <__fp_norm2>
    14d8:	08 95       	ret
    14da:	ba ce       	rjmp	.-652    	; 0x1250 <__fp_nan>

000014dc <__fp_rempio2>:
    14dc:	19 df       	rcall	.-462    	; 0x1310 <__fp_splitA>
    14de:	e8 f3       	brcs	.-6      	; 0x14da <__fp_norm2+0xe>
    14e0:	e8 94       	clt
    14e2:	e0 e0       	ldi	r30, 0x00	; 0
    14e4:	bb 27       	eor	r27, r27
    14e6:	9f 57       	subi	r25, 0x7F	; 127
    14e8:	f0 f0       	brcs	.+60     	; 0x1526 <__fp_rempio2+0x4a>
    14ea:	2a ed       	ldi	r18, 0xDA	; 218
    14ec:	3f e0       	ldi	r19, 0x0F	; 15
    14ee:	49 ec       	ldi	r20, 0xC9	; 201
    14f0:	06 c0       	rjmp	.+12     	; 0x14fe <__fp_rempio2+0x22>
    14f2:	ee 0f       	add	r30, r30
    14f4:	bb 0f       	add	r27, r27
    14f6:	66 1f       	adc	r22, r22
    14f8:	77 1f       	adc	r23, r23
    14fa:	88 1f       	adc	r24, r24
    14fc:	28 f0       	brcs	.+10     	; 0x1508 <__fp_rempio2+0x2c>
    14fe:	b2 3a       	cpi	r27, 0xA2	; 162
    1500:	62 07       	cpc	r22, r18
    1502:	73 07       	cpc	r23, r19
    1504:	84 07       	cpc	r24, r20
    1506:	28 f0       	brcs	.+10     	; 0x1512 <__fp_rempio2+0x36>
    1508:	b2 5a       	subi	r27, 0xA2	; 162
    150a:	62 0b       	sbc	r22, r18
    150c:	73 0b       	sbc	r23, r19
    150e:	84 0b       	sbc	r24, r20
    1510:	e3 95       	inc	r30
    1512:	9a 95       	dec	r25
    1514:	72 f7       	brpl	.-36     	; 0x14f2 <__fp_rempio2+0x16>
    1516:	80 38       	cpi	r24, 0x80	; 128
    1518:	30 f4       	brcc	.+12     	; 0x1526 <__fp_rempio2+0x4a>
    151a:	9a 95       	dec	r25
    151c:	bb 0f       	add	r27, r27
    151e:	66 1f       	adc	r22, r22
    1520:	77 1f       	adc	r23, r23
    1522:	88 1f       	adc	r24, r24
    1524:	d2 f7       	brpl	.-12     	; 0x151a <__fp_rempio2+0x3e>
    1526:	90 48       	sbci	r25, 0x80	; 128
    1528:	c5 cf       	rjmp	.-118    	; 0x14b4 <__fp_mpack_finite>

0000152a <__fp_sinus>:
    152a:	ef 93       	push	r30
    152c:	e0 ff       	sbrs	r30, 0
    152e:	06 c0       	rjmp	.+12     	; 0x153c <__fp_sinus+0x12>
    1530:	a2 ea       	ldi	r26, 0xA2	; 162
    1532:	2a ed       	ldi	r18, 0xDA	; 218
    1534:	3f e0       	ldi	r19, 0x0F	; 15
    1536:	49 ec       	ldi	r20, 0xC9	; 201
    1538:	5f eb       	ldi	r21, 0xBF	; 191
    153a:	01 dd       	rcall	.-1534   	; 0xf3e <__addsf3x>
    153c:	d0 de       	rcall	.-608    	; 0x12de <__fp_round>
    153e:	0f 90       	pop	r0
    1540:	03 94       	inc	r0
    1542:	01 fc       	sbrc	r0, 1
    1544:	90 58       	subi	r25, 0x80	; 128
    1546:	e0 e2       	ldi	r30, 0x20	; 32
    1548:	f1 e0       	ldi	r31, 0x01	; 1
    154a:	aa ce       	rjmp	.-684    	; 0x12a0 <__fp_powsodd>

0000154c <__divmodhi4>:
    154c:	97 fb       	bst	r25, 7
    154e:	07 2e       	mov	r0, r23
    1550:	16 f4       	brtc	.+4      	; 0x1556 <__divmodhi4+0xa>
    1552:	00 94       	com	r0
    1554:	06 d0       	rcall	.+12     	; 0x1562 <__divmodhi4_neg1>
    1556:	77 fd       	sbrc	r23, 7
    1558:	08 d0       	rcall	.+16     	; 0x156a <__divmodhi4_neg2>
    155a:	27 d0       	rcall	.+78     	; 0x15aa <__udivmodhi4>
    155c:	07 fc       	sbrc	r0, 7
    155e:	05 d0       	rcall	.+10     	; 0x156a <__divmodhi4_neg2>
    1560:	3e f4       	brtc	.+14     	; 0x1570 <__divmodhi4_exit>

00001562 <__divmodhi4_neg1>:
    1562:	90 95       	com	r25
    1564:	81 95       	neg	r24
    1566:	9f 4f       	sbci	r25, 0xFF	; 255
    1568:	08 95       	ret

0000156a <__divmodhi4_neg2>:
    156a:	70 95       	com	r23
    156c:	61 95       	neg	r22
    156e:	7f 4f       	sbci	r23, 0xFF	; 255

00001570 <__divmodhi4_exit>:
    1570:	08 95       	ret

00001572 <__divmodsi4>:
    1572:	05 2e       	mov	r0, r21
    1574:	97 fb       	bst	r25, 7
    1576:	16 f4       	brtc	.+4      	; 0x157c <__divmodsi4+0xa>
    1578:	00 94       	com	r0
    157a:	0f d0       	rcall	.+30     	; 0x159a <__negsi2>
    157c:	57 fd       	sbrc	r21, 7
    157e:	05 d0       	rcall	.+10     	; 0x158a <__divmodsi4_neg2>
    1580:	28 d0       	rcall	.+80     	; 0x15d2 <__udivmodsi4>
    1582:	07 fc       	sbrc	r0, 7
    1584:	02 d0       	rcall	.+4      	; 0x158a <__divmodsi4_neg2>
    1586:	46 f4       	brtc	.+16     	; 0x1598 <__divmodsi4_exit>
    1588:	08 c0       	rjmp	.+16     	; 0x159a <__negsi2>

0000158a <__divmodsi4_neg2>:
    158a:	50 95       	com	r21
    158c:	40 95       	com	r20
    158e:	30 95       	com	r19
    1590:	21 95       	neg	r18
    1592:	3f 4f       	sbci	r19, 0xFF	; 255
    1594:	4f 4f       	sbci	r20, 0xFF	; 255
    1596:	5f 4f       	sbci	r21, 0xFF	; 255

00001598 <__divmodsi4_exit>:
    1598:	08 95       	ret

0000159a <__negsi2>:
    159a:	90 95       	com	r25
    159c:	80 95       	com	r24
    159e:	70 95       	com	r23
    15a0:	61 95       	neg	r22
    15a2:	7f 4f       	sbci	r23, 0xFF	; 255
    15a4:	8f 4f       	sbci	r24, 0xFF	; 255
    15a6:	9f 4f       	sbci	r25, 0xFF	; 255
    15a8:	08 95       	ret

000015aa <__udivmodhi4>:
    15aa:	aa 1b       	sub	r26, r26
    15ac:	bb 1b       	sub	r27, r27
    15ae:	51 e1       	ldi	r21, 0x11	; 17
    15b0:	07 c0       	rjmp	.+14     	; 0x15c0 <__udivmodhi4_ep>

000015b2 <__udivmodhi4_loop>:
    15b2:	aa 1f       	adc	r26, r26
    15b4:	bb 1f       	adc	r27, r27
    15b6:	a6 17       	cp	r26, r22
    15b8:	b7 07       	cpc	r27, r23
    15ba:	10 f0       	brcs	.+4      	; 0x15c0 <__udivmodhi4_ep>
    15bc:	a6 1b       	sub	r26, r22
    15be:	b7 0b       	sbc	r27, r23

000015c0 <__udivmodhi4_ep>:
    15c0:	88 1f       	adc	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	5a 95       	dec	r21
    15c6:	a9 f7       	brne	.-22     	; 0x15b2 <__udivmodhi4_loop>
    15c8:	80 95       	com	r24
    15ca:	90 95       	com	r25
    15cc:	bc 01       	movw	r22, r24
    15ce:	cd 01       	movw	r24, r26
    15d0:	08 95       	ret

000015d2 <__udivmodsi4>:
    15d2:	a1 e2       	ldi	r26, 0x21	; 33
    15d4:	1a 2e       	mov	r1, r26
    15d6:	aa 1b       	sub	r26, r26
    15d8:	bb 1b       	sub	r27, r27
    15da:	fd 01       	movw	r30, r26
    15dc:	0d c0       	rjmp	.+26     	; 0x15f8 <__udivmodsi4_ep>

000015de <__udivmodsi4_loop>:
    15de:	aa 1f       	adc	r26, r26
    15e0:	bb 1f       	adc	r27, r27
    15e2:	ee 1f       	adc	r30, r30
    15e4:	ff 1f       	adc	r31, r31
    15e6:	a2 17       	cp	r26, r18
    15e8:	b3 07       	cpc	r27, r19
    15ea:	e4 07       	cpc	r30, r20
    15ec:	f5 07       	cpc	r31, r21
    15ee:	20 f0       	brcs	.+8      	; 0x15f8 <__udivmodsi4_ep>
    15f0:	a2 1b       	sub	r26, r18
    15f2:	b3 0b       	sbc	r27, r19
    15f4:	e4 0b       	sbc	r30, r20
    15f6:	f5 0b       	sbc	r31, r21

000015f8 <__udivmodsi4_ep>:
    15f8:	66 1f       	adc	r22, r22
    15fa:	77 1f       	adc	r23, r23
    15fc:	88 1f       	adc	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	1a 94       	dec	r1
    1602:	69 f7       	brne	.-38     	; 0x15de <__udivmodsi4_loop>
    1604:	60 95       	com	r22
    1606:	70 95       	com	r23
    1608:	80 95       	com	r24
    160a:	90 95       	com	r25
    160c:	9b 01       	movw	r18, r22
    160e:	ac 01       	movw	r20, r24
    1610:	bd 01       	movw	r22, r26
    1612:	cf 01       	movw	r24, r30
    1614:	08 95       	ret

00001616 <__itoa_ncheck>:
    1616:	bb 27       	eor	r27, r27
    1618:	4a 30       	cpi	r20, 0x0A	; 10
    161a:	31 f4       	brne	.+12     	; 0x1628 <__itoa_ncheck+0x12>
    161c:	99 23       	and	r25, r25
    161e:	22 f4       	brpl	.+8      	; 0x1628 <__itoa_ncheck+0x12>
    1620:	bd e2       	ldi	r27, 0x2D	; 45
    1622:	90 95       	com	r25
    1624:	81 95       	neg	r24
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	01 c0       	rjmp	.+2      	; 0x162c <__utoa_common>

0000162a <__utoa_ncheck>:
    162a:	bb 27       	eor	r27, r27

0000162c <__utoa_common>:
    162c:	fb 01       	movw	r30, r22
    162e:	55 27       	eor	r21, r21
    1630:	aa 27       	eor	r26, r26
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	aa 1f       	adc	r26, r26
    1638:	a4 17       	cp	r26, r20
    163a:	10 f0       	brcs	.+4      	; 0x1640 <__utoa_common+0x14>
    163c:	a4 1b       	sub	r26, r20
    163e:	83 95       	inc	r24
    1640:	50 51       	subi	r21, 0x10	; 16
    1642:	b9 f7       	brne	.-18     	; 0x1632 <__utoa_common+0x6>
    1644:	a0 5d       	subi	r26, 0xD0	; 208
    1646:	aa 33       	cpi	r26, 0x3A	; 58
    1648:	08 f0       	brcs	.+2      	; 0x164c <__utoa_common+0x20>
    164a:	a9 5d       	subi	r26, 0xD9	; 217
    164c:	a1 93       	st	Z+, r26
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	79 f7       	brne	.-34     	; 0x1630 <__utoa_common+0x4>
    1652:	b1 11       	cpse	r27, r1
    1654:	b1 93       	st	Z+, r27
    1656:	11 92       	st	Z+, r1
    1658:	cb 01       	movw	r24, r22
    165a:	e7 c3       	rjmp	.+1998   	; 0x1e2a <strrev>

0000165c <fdevopen>:
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	31 f4       	brne	.+12     	; 0x1674 <fdevopen+0x18>
    1668:	61 15       	cp	r22, r1
    166a:	71 05       	cpc	r23, r1
    166c:	19 f4       	brne	.+6      	; 0x1674 <fdevopen+0x18>
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	39 c0       	rjmp	.+114    	; 0x16e6 <fdevopen+0x8a>
    1674:	8b 01       	movw	r16, r22
    1676:	ec 01       	movw	r28, r24
    1678:	6e e0       	ldi	r22, 0x0E	; 14
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	7c d2       	rcall	.+1272   	; 0x1b7a <calloc>
    1682:	fc 01       	movw	r30, r24
    1684:	89 2b       	or	r24, r25
    1686:	99 f3       	breq	.-26     	; 0x166e <fdevopen+0x12>
    1688:	80 e8       	ldi	r24, 0x80	; 128
    168a:	83 83       	std	Z+3, r24	; 0x03
    168c:	01 15       	cp	r16, r1
    168e:	11 05       	cpc	r17, r1
    1690:	71 f0       	breq	.+28     	; 0x16ae <fdevopen+0x52>
    1692:	13 87       	std	Z+11, r17	; 0x0b
    1694:	02 87       	std	Z+10, r16	; 0x0a
    1696:	81 e8       	ldi	r24, 0x81	; 129
    1698:	83 83       	std	Z+3, r24	; 0x03
    169a:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <__iob>
    169e:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <__iob+0x1>
    16a2:	89 2b       	or	r24, r25
    16a4:	21 f4       	brne	.+8      	; 0x16ae <fdevopen+0x52>
    16a6:	f0 93 18 04 	sts	0x0418, r31	; 0x800418 <__iob+0x1>
    16aa:	e0 93 17 04 	sts	0x0417, r30	; 0x800417 <__iob>
    16ae:	20 97       	sbiw	r28, 0x00	; 0
    16b0:	c9 f0       	breq	.+50     	; 0x16e4 <fdevopen+0x88>
    16b2:	d1 87       	std	Z+9, r29	; 0x09
    16b4:	c0 87       	std	Z+8, r28	; 0x08
    16b6:	83 81       	ldd	r24, Z+3	; 0x03
    16b8:	82 60       	ori	r24, 0x02	; 2
    16ba:	83 83       	std	Z+3, r24	; 0x03
    16bc:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <__iob+0x2>
    16c0:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <__iob+0x3>
    16c4:	89 2b       	or	r24, r25
    16c6:	71 f4       	brne	.+28     	; 0x16e4 <fdevopen+0x88>
    16c8:	f0 93 1a 04 	sts	0x041A, r31	; 0x80041a <__iob+0x3>
    16cc:	e0 93 19 04 	sts	0x0419, r30	; 0x800419 <__iob+0x2>
    16d0:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <__iob+0x4>
    16d4:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <__iob+0x5>
    16d8:	89 2b       	or	r24, r25
    16da:	21 f4       	brne	.+8      	; 0x16e4 <fdevopen+0x88>
    16dc:	f0 93 1c 04 	sts	0x041C, r31	; 0x80041c <__iob+0x5>
    16e0:	e0 93 1b 04 	sts	0x041B, r30	; 0x80041b <__iob+0x4>
    16e4:	cf 01       	movw	r24, r30
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	0f 91       	pop	r16
    16ee:	08 95       	ret

000016f0 <printf>:
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	ae 01       	movw	r20, r28
    16fa:	4a 5f       	subi	r20, 0xFA	; 250
    16fc:	5f 4f       	sbci	r21, 0xFF	; 255
    16fe:	fa 01       	movw	r30, r20
    1700:	61 91       	ld	r22, Z+
    1702:	71 91       	ld	r23, Z+
    1704:	af 01       	movw	r20, r30
    1706:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <__iob+0x2>
    170a:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <__iob+0x3>
    170e:	38 d0       	rcall	.+112    	; 0x1780 <vfprintf>
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	08 95       	ret

00001716 <putchar>:
    1716:	60 91 19 04 	lds	r22, 0x0419	; 0x800419 <__iob+0x2>
    171a:	70 91 1a 04 	lds	r23, 0x041A	; 0x80041a <__iob+0x3>
    171e:	95 c3       	rjmp	.+1834   	; 0x1e4a <fputc>

00001720 <puts>:
    1720:	0f 93       	push	r16
    1722:	1f 93       	push	r17
    1724:	cf 93       	push	r28
    1726:	df 93       	push	r29
    1728:	e0 91 19 04 	lds	r30, 0x0419	; 0x800419 <__iob+0x2>
    172c:	f0 91 1a 04 	lds	r31, 0x041A	; 0x80041a <__iob+0x3>
    1730:	23 81       	ldd	r18, Z+3	; 0x03
    1732:	21 ff       	sbrs	r18, 1
    1734:	1b c0       	rjmp	.+54     	; 0x176c <puts+0x4c>
    1736:	8c 01       	movw	r16, r24
    1738:	d0 e0       	ldi	r29, 0x00	; 0
    173a:	c0 e0       	ldi	r28, 0x00	; 0
    173c:	f8 01       	movw	r30, r16
    173e:	81 91       	ld	r24, Z+
    1740:	8f 01       	movw	r16, r30
    1742:	60 91 19 04 	lds	r22, 0x0419	; 0x800419 <__iob+0x2>
    1746:	70 91 1a 04 	lds	r23, 0x041A	; 0x80041a <__iob+0x3>
    174a:	db 01       	movw	r26, r22
    174c:	18 96       	adiw	r26, 0x08	; 8
    174e:	ed 91       	ld	r30, X+
    1750:	fc 91       	ld	r31, X
    1752:	19 97       	sbiw	r26, 0x09	; 9
    1754:	88 23       	and	r24, r24
    1756:	31 f0       	breq	.+12     	; 0x1764 <puts+0x44>
    1758:	19 95       	eicall
    175a:	89 2b       	or	r24, r25
    175c:	79 f3       	breq	.-34     	; 0x173c <puts+0x1c>
    175e:	df ef       	ldi	r29, 0xFF	; 255
    1760:	cf ef       	ldi	r28, 0xFF	; 255
    1762:	ec cf       	rjmp	.-40     	; 0x173c <puts+0x1c>
    1764:	8a e0       	ldi	r24, 0x0A	; 10
    1766:	19 95       	eicall
    1768:	89 2b       	or	r24, r25
    176a:	19 f0       	breq	.+6      	; 0x1772 <puts+0x52>
    176c:	8f ef       	ldi	r24, 0xFF	; 255
    176e:	9f ef       	ldi	r25, 0xFF	; 255
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <puts+0x56>
    1772:	8d 2f       	mov	r24, r29
    1774:	9c 2f       	mov	r25, r28
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	08 95       	ret

00001780 <vfprintf>:
    1780:	2f 92       	push	r2
    1782:	3f 92       	push	r3
    1784:	4f 92       	push	r4
    1786:	5f 92       	push	r5
    1788:	6f 92       	push	r6
    178a:	7f 92       	push	r7
    178c:	8f 92       	push	r8
    178e:	9f 92       	push	r9
    1790:	af 92       	push	r10
    1792:	bf 92       	push	r11
    1794:	cf 92       	push	r12
    1796:	df 92       	push	r13
    1798:	ef 92       	push	r14
    179a:	ff 92       	push	r15
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	2b 97       	sbiw	r28, 0x0b	; 11
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	6c 01       	movw	r12, r24
    17b6:	7b 01       	movw	r14, r22
    17b8:	8a 01       	movw	r16, r20
    17ba:	fc 01       	movw	r30, r24
    17bc:	17 82       	std	Z+7, r1	; 0x07
    17be:	16 82       	std	Z+6, r1	; 0x06
    17c0:	83 81       	ldd	r24, Z+3	; 0x03
    17c2:	81 ff       	sbrs	r24, 1
    17c4:	bf c1       	rjmp	.+894    	; 0x1b44 <vfprintf+0x3c4>
    17c6:	ce 01       	movw	r24, r28
    17c8:	01 96       	adiw	r24, 0x01	; 1
    17ca:	3c 01       	movw	r6, r24
    17cc:	f6 01       	movw	r30, r12
    17ce:	93 81       	ldd	r25, Z+3	; 0x03
    17d0:	f7 01       	movw	r30, r14
    17d2:	93 fd       	sbrc	r25, 3
    17d4:	85 91       	lpm	r24, Z+
    17d6:	93 ff       	sbrs	r25, 3
    17d8:	81 91       	ld	r24, Z+
    17da:	7f 01       	movw	r14, r30
    17dc:	88 23       	and	r24, r24
    17de:	09 f4       	brne	.+2      	; 0x17e2 <vfprintf+0x62>
    17e0:	ad c1       	rjmp	.+858    	; 0x1b3c <vfprintf+0x3bc>
    17e2:	85 32       	cpi	r24, 0x25	; 37
    17e4:	39 f4       	brne	.+14     	; 0x17f4 <vfprintf+0x74>
    17e6:	93 fd       	sbrc	r25, 3
    17e8:	85 91       	lpm	r24, Z+
    17ea:	93 ff       	sbrs	r25, 3
    17ec:	81 91       	ld	r24, Z+
    17ee:	7f 01       	movw	r14, r30
    17f0:	85 32       	cpi	r24, 0x25	; 37
    17f2:	21 f4       	brne	.+8      	; 0x17fc <vfprintf+0x7c>
    17f4:	b6 01       	movw	r22, r12
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	28 d3       	rcall	.+1616   	; 0x1e4a <fputc>
    17fa:	e8 cf       	rjmp	.-48     	; 0x17cc <vfprintf+0x4c>
    17fc:	91 2c       	mov	r9, r1
    17fe:	21 2c       	mov	r2, r1
    1800:	31 2c       	mov	r3, r1
    1802:	ff e1       	ldi	r31, 0x1F	; 31
    1804:	f3 15       	cp	r31, r3
    1806:	d8 f0       	brcs	.+54     	; 0x183e <vfprintf+0xbe>
    1808:	8b 32       	cpi	r24, 0x2B	; 43
    180a:	79 f0       	breq	.+30     	; 0x182a <vfprintf+0xaa>
    180c:	38 f4       	brcc	.+14     	; 0x181c <vfprintf+0x9c>
    180e:	80 32       	cpi	r24, 0x20	; 32
    1810:	79 f0       	breq	.+30     	; 0x1830 <vfprintf+0xb0>
    1812:	83 32       	cpi	r24, 0x23	; 35
    1814:	a1 f4       	brne	.+40     	; 0x183e <vfprintf+0xbe>
    1816:	23 2d       	mov	r18, r3
    1818:	20 61       	ori	r18, 0x10	; 16
    181a:	1d c0       	rjmp	.+58     	; 0x1856 <vfprintf+0xd6>
    181c:	8d 32       	cpi	r24, 0x2D	; 45
    181e:	61 f0       	breq	.+24     	; 0x1838 <vfprintf+0xb8>
    1820:	80 33       	cpi	r24, 0x30	; 48
    1822:	69 f4       	brne	.+26     	; 0x183e <vfprintf+0xbe>
    1824:	23 2d       	mov	r18, r3
    1826:	21 60       	ori	r18, 0x01	; 1
    1828:	16 c0       	rjmp	.+44     	; 0x1856 <vfprintf+0xd6>
    182a:	83 2d       	mov	r24, r3
    182c:	82 60       	ori	r24, 0x02	; 2
    182e:	38 2e       	mov	r3, r24
    1830:	e3 2d       	mov	r30, r3
    1832:	e4 60       	ori	r30, 0x04	; 4
    1834:	3e 2e       	mov	r3, r30
    1836:	2a c0       	rjmp	.+84     	; 0x188c <vfprintf+0x10c>
    1838:	f3 2d       	mov	r31, r3
    183a:	f8 60       	ori	r31, 0x08	; 8
    183c:	1d c0       	rjmp	.+58     	; 0x1878 <vfprintf+0xf8>
    183e:	37 fc       	sbrc	r3, 7
    1840:	2d c0       	rjmp	.+90     	; 0x189c <vfprintf+0x11c>
    1842:	20 ed       	ldi	r18, 0xD0	; 208
    1844:	28 0f       	add	r18, r24
    1846:	2a 30       	cpi	r18, 0x0A	; 10
    1848:	40 f0       	brcs	.+16     	; 0x185a <vfprintf+0xda>
    184a:	8e 32       	cpi	r24, 0x2E	; 46
    184c:	b9 f4       	brne	.+46     	; 0x187c <vfprintf+0xfc>
    184e:	36 fc       	sbrc	r3, 6
    1850:	75 c1       	rjmp	.+746    	; 0x1b3c <vfprintf+0x3bc>
    1852:	23 2d       	mov	r18, r3
    1854:	20 64       	ori	r18, 0x40	; 64
    1856:	32 2e       	mov	r3, r18
    1858:	19 c0       	rjmp	.+50     	; 0x188c <vfprintf+0x10c>
    185a:	36 fe       	sbrs	r3, 6
    185c:	06 c0       	rjmp	.+12     	; 0x186a <vfprintf+0xea>
    185e:	8a e0       	ldi	r24, 0x0A	; 10
    1860:	98 9e       	mul	r9, r24
    1862:	20 0d       	add	r18, r0
    1864:	11 24       	eor	r1, r1
    1866:	92 2e       	mov	r9, r18
    1868:	11 c0       	rjmp	.+34     	; 0x188c <vfprintf+0x10c>
    186a:	ea e0       	ldi	r30, 0x0A	; 10
    186c:	2e 9e       	mul	r2, r30
    186e:	20 0d       	add	r18, r0
    1870:	11 24       	eor	r1, r1
    1872:	22 2e       	mov	r2, r18
    1874:	f3 2d       	mov	r31, r3
    1876:	f0 62       	ori	r31, 0x20	; 32
    1878:	3f 2e       	mov	r3, r31
    187a:	08 c0       	rjmp	.+16     	; 0x188c <vfprintf+0x10c>
    187c:	8c 36       	cpi	r24, 0x6C	; 108
    187e:	21 f4       	brne	.+8      	; 0x1888 <vfprintf+0x108>
    1880:	83 2d       	mov	r24, r3
    1882:	80 68       	ori	r24, 0x80	; 128
    1884:	38 2e       	mov	r3, r24
    1886:	02 c0       	rjmp	.+4      	; 0x188c <vfprintf+0x10c>
    1888:	88 36       	cpi	r24, 0x68	; 104
    188a:	41 f4       	brne	.+16     	; 0x189c <vfprintf+0x11c>
    188c:	f7 01       	movw	r30, r14
    188e:	93 fd       	sbrc	r25, 3
    1890:	85 91       	lpm	r24, Z+
    1892:	93 ff       	sbrs	r25, 3
    1894:	81 91       	ld	r24, Z+
    1896:	7f 01       	movw	r14, r30
    1898:	81 11       	cpse	r24, r1
    189a:	b3 cf       	rjmp	.-154    	; 0x1802 <vfprintf+0x82>
    189c:	98 2f       	mov	r25, r24
    189e:	9f 7d       	andi	r25, 0xDF	; 223
    18a0:	95 54       	subi	r25, 0x45	; 69
    18a2:	93 30       	cpi	r25, 0x03	; 3
    18a4:	28 f4       	brcc	.+10     	; 0x18b0 <vfprintf+0x130>
    18a6:	0c 5f       	subi	r16, 0xFC	; 252
    18a8:	1f 4f       	sbci	r17, 0xFF	; 255
    18aa:	9f e3       	ldi	r25, 0x3F	; 63
    18ac:	99 83       	std	Y+1, r25	; 0x01
    18ae:	0d c0       	rjmp	.+26     	; 0x18ca <vfprintf+0x14a>
    18b0:	83 36       	cpi	r24, 0x63	; 99
    18b2:	31 f0       	breq	.+12     	; 0x18c0 <vfprintf+0x140>
    18b4:	83 37       	cpi	r24, 0x73	; 115
    18b6:	71 f0       	breq	.+28     	; 0x18d4 <vfprintf+0x154>
    18b8:	83 35       	cpi	r24, 0x53	; 83
    18ba:	09 f0       	breq	.+2      	; 0x18be <vfprintf+0x13e>
    18bc:	55 c0       	rjmp	.+170    	; 0x1968 <vfprintf+0x1e8>
    18be:	20 c0       	rjmp	.+64     	; 0x1900 <vfprintf+0x180>
    18c0:	f8 01       	movw	r30, r16
    18c2:	80 81       	ld	r24, Z
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	0e 5f       	subi	r16, 0xFE	; 254
    18c8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ca:	88 24       	eor	r8, r8
    18cc:	83 94       	inc	r8
    18ce:	91 2c       	mov	r9, r1
    18d0:	53 01       	movw	r10, r6
    18d2:	12 c0       	rjmp	.+36     	; 0x18f8 <vfprintf+0x178>
    18d4:	28 01       	movw	r4, r16
    18d6:	f2 e0       	ldi	r31, 0x02	; 2
    18d8:	4f 0e       	add	r4, r31
    18da:	51 1c       	adc	r5, r1
    18dc:	f8 01       	movw	r30, r16
    18de:	a0 80       	ld	r10, Z
    18e0:	b1 80       	ldd	r11, Z+1	; 0x01
    18e2:	36 fe       	sbrs	r3, 6
    18e4:	03 c0       	rjmp	.+6      	; 0x18ec <vfprintf+0x16c>
    18e6:	69 2d       	mov	r22, r9
    18e8:	70 e0       	ldi	r23, 0x00	; 0
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <vfprintf+0x170>
    18ec:	6f ef       	ldi	r22, 0xFF	; 255
    18ee:	7f ef       	ldi	r23, 0xFF	; 255
    18f0:	c5 01       	movw	r24, r10
    18f2:	90 d2       	rcall	.+1312   	; 0x1e14 <strnlen>
    18f4:	4c 01       	movw	r8, r24
    18f6:	82 01       	movw	r16, r4
    18f8:	f3 2d       	mov	r31, r3
    18fa:	ff 77       	andi	r31, 0x7F	; 127
    18fc:	3f 2e       	mov	r3, r31
    18fe:	15 c0       	rjmp	.+42     	; 0x192a <vfprintf+0x1aa>
    1900:	28 01       	movw	r4, r16
    1902:	22 e0       	ldi	r18, 0x02	; 2
    1904:	42 0e       	add	r4, r18
    1906:	51 1c       	adc	r5, r1
    1908:	f8 01       	movw	r30, r16
    190a:	a0 80       	ld	r10, Z
    190c:	b1 80       	ldd	r11, Z+1	; 0x01
    190e:	36 fe       	sbrs	r3, 6
    1910:	03 c0       	rjmp	.+6      	; 0x1918 <vfprintf+0x198>
    1912:	69 2d       	mov	r22, r9
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	02 c0       	rjmp	.+4      	; 0x191c <vfprintf+0x19c>
    1918:	6f ef       	ldi	r22, 0xFF	; 255
    191a:	7f ef       	ldi	r23, 0xFF	; 255
    191c:	c5 01       	movw	r24, r10
    191e:	68 d2       	rcall	.+1232   	; 0x1df0 <strnlen_P>
    1920:	4c 01       	movw	r8, r24
    1922:	f3 2d       	mov	r31, r3
    1924:	f0 68       	ori	r31, 0x80	; 128
    1926:	3f 2e       	mov	r3, r31
    1928:	82 01       	movw	r16, r4
    192a:	33 fc       	sbrc	r3, 3
    192c:	19 c0       	rjmp	.+50     	; 0x1960 <vfprintf+0x1e0>
    192e:	82 2d       	mov	r24, r2
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	88 16       	cp	r8, r24
    1934:	99 06       	cpc	r9, r25
    1936:	a0 f4       	brcc	.+40     	; 0x1960 <vfprintf+0x1e0>
    1938:	b6 01       	movw	r22, r12
    193a:	80 e2       	ldi	r24, 0x20	; 32
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	85 d2       	rcall	.+1290   	; 0x1e4a <fputc>
    1940:	2a 94       	dec	r2
    1942:	f5 cf       	rjmp	.-22     	; 0x192e <vfprintf+0x1ae>
    1944:	f5 01       	movw	r30, r10
    1946:	37 fc       	sbrc	r3, 7
    1948:	85 91       	lpm	r24, Z+
    194a:	37 fe       	sbrs	r3, 7
    194c:	81 91       	ld	r24, Z+
    194e:	5f 01       	movw	r10, r30
    1950:	b6 01       	movw	r22, r12
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	7a d2       	rcall	.+1268   	; 0x1e4a <fputc>
    1956:	21 10       	cpse	r2, r1
    1958:	2a 94       	dec	r2
    195a:	21 e0       	ldi	r18, 0x01	; 1
    195c:	82 1a       	sub	r8, r18
    195e:	91 08       	sbc	r9, r1
    1960:	81 14       	cp	r8, r1
    1962:	91 04       	cpc	r9, r1
    1964:	79 f7       	brne	.-34     	; 0x1944 <vfprintf+0x1c4>
    1966:	e1 c0       	rjmp	.+450    	; 0x1b2a <vfprintf+0x3aa>
    1968:	84 36       	cpi	r24, 0x64	; 100
    196a:	11 f0       	breq	.+4      	; 0x1970 <vfprintf+0x1f0>
    196c:	89 36       	cpi	r24, 0x69	; 105
    196e:	39 f5       	brne	.+78     	; 0x19be <vfprintf+0x23e>
    1970:	f8 01       	movw	r30, r16
    1972:	37 fe       	sbrs	r3, 7
    1974:	07 c0       	rjmp	.+14     	; 0x1984 <vfprintf+0x204>
    1976:	60 81       	ld	r22, Z
    1978:	71 81       	ldd	r23, Z+1	; 0x01
    197a:	82 81       	ldd	r24, Z+2	; 0x02
    197c:	93 81       	ldd	r25, Z+3	; 0x03
    197e:	0c 5f       	subi	r16, 0xFC	; 252
    1980:	1f 4f       	sbci	r17, 0xFF	; 255
    1982:	08 c0       	rjmp	.+16     	; 0x1994 <vfprintf+0x214>
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
    1988:	07 2e       	mov	r0, r23
    198a:	00 0c       	add	r0, r0
    198c:	88 0b       	sbc	r24, r24
    198e:	99 0b       	sbc	r25, r25
    1990:	0e 5f       	subi	r16, 0xFE	; 254
    1992:	1f 4f       	sbci	r17, 0xFF	; 255
    1994:	f3 2d       	mov	r31, r3
    1996:	ff 76       	andi	r31, 0x6F	; 111
    1998:	3f 2e       	mov	r3, r31
    199a:	97 ff       	sbrs	r25, 7
    199c:	09 c0       	rjmp	.+18     	; 0x19b0 <vfprintf+0x230>
    199e:	90 95       	com	r25
    19a0:	80 95       	com	r24
    19a2:	70 95       	com	r23
    19a4:	61 95       	neg	r22
    19a6:	7f 4f       	sbci	r23, 0xFF	; 255
    19a8:	8f 4f       	sbci	r24, 0xFF	; 255
    19aa:	9f 4f       	sbci	r25, 0xFF	; 255
    19ac:	f0 68       	ori	r31, 0x80	; 128
    19ae:	3f 2e       	mov	r3, r31
    19b0:	2a e0       	ldi	r18, 0x0A	; 10
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	a3 01       	movw	r20, r6
    19b6:	85 d2       	rcall	.+1290   	; 0x1ec2 <__ultoa_invert>
    19b8:	88 2e       	mov	r8, r24
    19ba:	86 18       	sub	r8, r6
    19bc:	44 c0       	rjmp	.+136    	; 0x1a46 <vfprintf+0x2c6>
    19be:	85 37       	cpi	r24, 0x75	; 117
    19c0:	31 f4       	brne	.+12     	; 0x19ce <vfprintf+0x24e>
    19c2:	23 2d       	mov	r18, r3
    19c4:	2f 7e       	andi	r18, 0xEF	; 239
    19c6:	b2 2e       	mov	r11, r18
    19c8:	2a e0       	ldi	r18, 0x0A	; 10
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	25 c0       	rjmp	.+74     	; 0x1a18 <vfprintf+0x298>
    19ce:	93 2d       	mov	r25, r3
    19d0:	99 7f       	andi	r25, 0xF9	; 249
    19d2:	b9 2e       	mov	r11, r25
    19d4:	8f 36       	cpi	r24, 0x6F	; 111
    19d6:	c1 f0       	breq	.+48     	; 0x1a08 <vfprintf+0x288>
    19d8:	18 f4       	brcc	.+6      	; 0x19e0 <vfprintf+0x260>
    19da:	88 35       	cpi	r24, 0x58	; 88
    19dc:	79 f0       	breq	.+30     	; 0x19fc <vfprintf+0x27c>
    19de:	ae c0       	rjmp	.+348    	; 0x1b3c <vfprintf+0x3bc>
    19e0:	80 37       	cpi	r24, 0x70	; 112
    19e2:	19 f0       	breq	.+6      	; 0x19ea <vfprintf+0x26a>
    19e4:	88 37       	cpi	r24, 0x78	; 120
    19e6:	21 f0       	breq	.+8      	; 0x19f0 <vfprintf+0x270>
    19e8:	a9 c0       	rjmp	.+338    	; 0x1b3c <vfprintf+0x3bc>
    19ea:	e9 2f       	mov	r30, r25
    19ec:	e0 61       	ori	r30, 0x10	; 16
    19ee:	be 2e       	mov	r11, r30
    19f0:	b4 fe       	sbrs	r11, 4
    19f2:	0d c0       	rjmp	.+26     	; 0x1a0e <vfprintf+0x28e>
    19f4:	fb 2d       	mov	r31, r11
    19f6:	f4 60       	ori	r31, 0x04	; 4
    19f8:	bf 2e       	mov	r11, r31
    19fa:	09 c0       	rjmp	.+18     	; 0x1a0e <vfprintf+0x28e>
    19fc:	34 fe       	sbrs	r3, 4
    19fe:	0a c0       	rjmp	.+20     	; 0x1a14 <vfprintf+0x294>
    1a00:	29 2f       	mov	r18, r25
    1a02:	26 60       	ori	r18, 0x06	; 6
    1a04:	b2 2e       	mov	r11, r18
    1a06:	06 c0       	rjmp	.+12     	; 0x1a14 <vfprintf+0x294>
    1a08:	28 e0       	ldi	r18, 0x08	; 8
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	05 c0       	rjmp	.+10     	; 0x1a18 <vfprintf+0x298>
    1a0e:	20 e1       	ldi	r18, 0x10	; 16
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <vfprintf+0x298>
    1a14:	20 e1       	ldi	r18, 0x10	; 16
    1a16:	32 e0       	ldi	r19, 0x02	; 2
    1a18:	f8 01       	movw	r30, r16
    1a1a:	b7 fe       	sbrs	r11, 7
    1a1c:	07 c0       	rjmp	.+14     	; 0x1a2c <vfprintf+0x2ac>
    1a1e:	60 81       	ld	r22, Z
    1a20:	71 81       	ldd	r23, Z+1	; 0x01
    1a22:	82 81       	ldd	r24, Z+2	; 0x02
    1a24:	93 81       	ldd	r25, Z+3	; 0x03
    1a26:	0c 5f       	subi	r16, 0xFC	; 252
    1a28:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2a:	06 c0       	rjmp	.+12     	; 0x1a38 <vfprintf+0x2b8>
    1a2c:	60 81       	ld	r22, Z
    1a2e:	71 81       	ldd	r23, Z+1	; 0x01
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	0e 5f       	subi	r16, 0xFE	; 254
    1a36:	1f 4f       	sbci	r17, 0xFF	; 255
    1a38:	a3 01       	movw	r20, r6
    1a3a:	43 d2       	rcall	.+1158   	; 0x1ec2 <__ultoa_invert>
    1a3c:	88 2e       	mov	r8, r24
    1a3e:	86 18       	sub	r8, r6
    1a40:	fb 2d       	mov	r31, r11
    1a42:	ff 77       	andi	r31, 0x7F	; 127
    1a44:	3f 2e       	mov	r3, r31
    1a46:	36 fe       	sbrs	r3, 6
    1a48:	0d c0       	rjmp	.+26     	; 0x1a64 <vfprintf+0x2e4>
    1a4a:	23 2d       	mov	r18, r3
    1a4c:	2e 7f       	andi	r18, 0xFE	; 254
    1a4e:	a2 2e       	mov	r10, r18
    1a50:	89 14       	cp	r8, r9
    1a52:	58 f4       	brcc	.+22     	; 0x1a6a <vfprintf+0x2ea>
    1a54:	34 fe       	sbrs	r3, 4
    1a56:	0b c0       	rjmp	.+22     	; 0x1a6e <vfprintf+0x2ee>
    1a58:	32 fc       	sbrc	r3, 2
    1a5a:	09 c0       	rjmp	.+18     	; 0x1a6e <vfprintf+0x2ee>
    1a5c:	83 2d       	mov	r24, r3
    1a5e:	8e 7e       	andi	r24, 0xEE	; 238
    1a60:	a8 2e       	mov	r10, r24
    1a62:	05 c0       	rjmp	.+10     	; 0x1a6e <vfprintf+0x2ee>
    1a64:	b8 2c       	mov	r11, r8
    1a66:	a3 2c       	mov	r10, r3
    1a68:	03 c0       	rjmp	.+6      	; 0x1a70 <vfprintf+0x2f0>
    1a6a:	b8 2c       	mov	r11, r8
    1a6c:	01 c0       	rjmp	.+2      	; 0x1a70 <vfprintf+0x2f0>
    1a6e:	b9 2c       	mov	r11, r9
    1a70:	a4 fe       	sbrs	r10, 4
    1a72:	0f c0       	rjmp	.+30     	; 0x1a92 <vfprintf+0x312>
    1a74:	fe 01       	movw	r30, r28
    1a76:	e8 0d       	add	r30, r8
    1a78:	f1 1d       	adc	r31, r1
    1a7a:	80 81       	ld	r24, Z
    1a7c:	80 33       	cpi	r24, 0x30	; 48
    1a7e:	21 f4       	brne	.+8      	; 0x1a88 <vfprintf+0x308>
    1a80:	9a 2d       	mov	r25, r10
    1a82:	99 7e       	andi	r25, 0xE9	; 233
    1a84:	a9 2e       	mov	r10, r25
    1a86:	09 c0       	rjmp	.+18     	; 0x1a9a <vfprintf+0x31a>
    1a88:	a2 fe       	sbrs	r10, 2
    1a8a:	06 c0       	rjmp	.+12     	; 0x1a98 <vfprintf+0x318>
    1a8c:	b3 94       	inc	r11
    1a8e:	b3 94       	inc	r11
    1a90:	04 c0       	rjmp	.+8      	; 0x1a9a <vfprintf+0x31a>
    1a92:	8a 2d       	mov	r24, r10
    1a94:	86 78       	andi	r24, 0x86	; 134
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <vfprintf+0x31a>
    1a98:	b3 94       	inc	r11
    1a9a:	a3 fc       	sbrc	r10, 3
    1a9c:	10 c0       	rjmp	.+32     	; 0x1abe <vfprintf+0x33e>
    1a9e:	a0 fe       	sbrs	r10, 0
    1aa0:	06 c0       	rjmp	.+12     	; 0x1aae <vfprintf+0x32e>
    1aa2:	b2 14       	cp	r11, r2
    1aa4:	80 f4       	brcc	.+32     	; 0x1ac6 <vfprintf+0x346>
    1aa6:	28 0c       	add	r2, r8
    1aa8:	92 2c       	mov	r9, r2
    1aaa:	9b 18       	sub	r9, r11
    1aac:	0d c0       	rjmp	.+26     	; 0x1ac8 <vfprintf+0x348>
    1aae:	b2 14       	cp	r11, r2
    1ab0:	58 f4       	brcc	.+22     	; 0x1ac8 <vfprintf+0x348>
    1ab2:	b6 01       	movw	r22, r12
    1ab4:	80 e2       	ldi	r24, 0x20	; 32
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	c8 d1       	rcall	.+912    	; 0x1e4a <fputc>
    1aba:	b3 94       	inc	r11
    1abc:	f8 cf       	rjmp	.-16     	; 0x1aae <vfprintf+0x32e>
    1abe:	b2 14       	cp	r11, r2
    1ac0:	18 f4       	brcc	.+6      	; 0x1ac8 <vfprintf+0x348>
    1ac2:	2b 18       	sub	r2, r11
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <vfprintf+0x34a>
    1ac6:	98 2c       	mov	r9, r8
    1ac8:	21 2c       	mov	r2, r1
    1aca:	a4 fe       	sbrs	r10, 4
    1acc:	0f c0       	rjmp	.+30     	; 0x1aec <vfprintf+0x36c>
    1ace:	b6 01       	movw	r22, r12
    1ad0:	80 e3       	ldi	r24, 0x30	; 48
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	ba d1       	rcall	.+884    	; 0x1e4a <fputc>
    1ad6:	a2 fe       	sbrs	r10, 2
    1ad8:	16 c0       	rjmp	.+44     	; 0x1b06 <vfprintf+0x386>
    1ada:	a1 fc       	sbrc	r10, 1
    1adc:	03 c0       	rjmp	.+6      	; 0x1ae4 <vfprintf+0x364>
    1ade:	88 e7       	ldi	r24, 0x78	; 120
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <vfprintf+0x368>
    1ae4:	88 e5       	ldi	r24, 0x58	; 88
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	b6 01       	movw	r22, r12
    1aea:	0c c0       	rjmp	.+24     	; 0x1b04 <vfprintf+0x384>
    1aec:	8a 2d       	mov	r24, r10
    1aee:	86 78       	andi	r24, 0x86	; 134
    1af0:	51 f0       	breq	.+20     	; 0x1b06 <vfprintf+0x386>
    1af2:	a1 fe       	sbrs	r10, 1
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <vfprintf+0x37a>
    1af6:	8b e2       	ldi	r24, 0x2B	; 43
    1af8:	01 c0       	rjmp	.+2      	; 0x1afc <vfprintf+0x37c>
    1afa:	80 e2       	ldi	r24, 0x20	; 32
    1afc:	a7 fc       	sbrc	r10, 7
    1afe:	8d e2       	ldi	r24, 0x2D	; 45
    1b00:	b6 01       	movw	r22, r12
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a2 d1       	rcall	.+836    	; 0x1e4a <fputc>
    1b06:	89 14       	cp	r8, r9
    1b08:	30 f4       	brcc	.+12     	; 0x1b16 <vfprintf+0x396>
    1b0a:	b6 01       	movw	r22, r12
    1b0c:	80 e3       	ldi	r24, 0x30	; 48
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	9c d1       	rcall	.+824    	; 0x1e4a <fputc>
    1b12:	9a 94       	dec	r9
    1b14:	f8 cf       	rjmp	.-16     	; 0x1b06 <vfprintf+0x386>
    1b16:	8a 94       	dec	r8
    1b18:	f3 01       	movw	r30, r6
    1b1a:	e8 0d       	add	r30, r8
    1b1c:	f1 1d       	adc	r31, r1
    1b1e:	80 81       	ld	r24, Z
    1b20:	b6 01       	movw	r22, r12
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	92 d1       	rcall	.+804    	; 0x1e4a <fputc>
    1b26:	81 10       	cpse	r8, r1
    1b28:	f6 cf       	rjmp	.-20     	; 0x1b16 <vfprintf+0x396>
    1b2a:	22 20       	and	r2, r2
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <vfprintf+0x3b0>
    1b2e:	4e ce       	rjmp	.-868    	; 0x17cc <vfprintf+0x4c>
    1b30:	b6 01       	movw	r22, r12
    1b32:	80 e2       	ldi	r24, 0x20	; 32
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	89 d1       	rcall	.+786    	; 0x1e4a <fputc>
    1b38:	2a 94       	dec	r2
    1b3a:	f7 cf       	rjmp	.-18     	; 0x1b2a <vfprintf+0x3aa>
    1b3c:	f6 01       	movw	r30, r12
    1b3e:	86 81       	ldd	r24, Z+6	; 0x06
    1b40:	97 81       	ldd	r25, Z+7	; 0x07
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <vfprintf+0x3c8>
    1b44:	8f ef       	ldi	r24, 0xFF	; 255
    1b46:	9f ef       	ldi	r25, 0xFF	; 255
    1b48:	2b 96       	adiw	r28, 0x0b	; 11
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	1f 91       	pop	r17
    1b5a:	0f 91       	pop	r16
    1b5c:	ff 90       	pop	r15
    1b5e:	ef 90       	pop	r14
    1b60:	df 90       	pop	r13
    1b62:	cf 90       	pop	r12
    1b64:	bf 90       	pop	r11
    1b66:	af 90       	pop	r10
    1b68:	9f 90       	pop	r9
    1b6a:	8f 90       	pop	r8
    1b6c:	7f 90       	pop	r7
    1b6e:	6f 90       	pop	r6
    1b70:	5f 90       	pop	r5
    1b72:	4f 90       	pop	r4
    1b74:	3f 90       	pop	r3
    1b76:	2f 90       	pop	r2
    1b78:	08 95       	ret

00001b7a <calloc>:
    1b7a:	0f 93       	push	r16
    1b7c:	1f 93       	push	r17
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	86 9f       	mul	r24, r22
    1b84:	80 01       	movw	r16, r0
    1b86:	87 9f       	mul	r24, r23
    1b88:	10 0d       	add	r17, r0
    1b8a:	96 9f       	mul	r25, r22
    1b8c:	10 0d       	add	r17, r0
    1b8e:	11 24       	eor	r1, r1
    1b90:	c8 01       	movw	r24, r16
    1b92:	0d d0       	rcall	.+26     	; 0x1bae <malloc>
    1b94:	ec 01       	movw	r28, r24
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	21 f0       	breq	.+8      	; 0x1ba2 <calloc+0x28>
    1b9a:	a8 01       	movw	r20, r16
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	70 e0       	ldi	r23, 0x00	; 0
    1ba0:	32 d1       	rcall	.+612    	; 0x1e06 <memset>
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	df 91       	pop	r29
    1ba6:	cf 91       	pop	r28
    1ba8:	1f 91       	pop	r17
    1baa:	0f 91       	pop	r16
    1bac:	08 95       	ret

00001bae <malloc>:
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	82 30       	cpi	r24, 0x02	; 2
    1bb8:	91 05       	cpc	r25, r1
    1bba:	10 f4       	brcc	.+4      	; 0x1bc0 <malloc+0x12>
    1bbc:	82 e0       	ldi	r24, 0x02	; 2
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	e0 91 1f 04 	lds	r30, 0x041F	; 0x80041f <__flp>
    1bc4:	f0 91 20 04 	lds	r31, 0x0420	; 0x800420 <__flp+0x1>
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	a0 e0       	ldi	r26, 0x00	; 0
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	30 97       	sbiw	r30, 0x00	; 0
    1bd2:	19 f1       	breq	.+70     	; 0x1c1a <malloc+0x6c>
    1bd4:	40 81       	ld	r20, Z
    1bd6:	51 81       	ldd	r21, Z+1	; 0x01
    1bd8:	02 81       	ldd	r16, Z+2	; 0x02
    1bda:	13 81       	ldd	r17, Z+3	; 0x03
    1bdc:	48 17       	cp	r20, r24
    1bde:	59 07       	cpc	r21, r25
    1be0:	c8 f0       	brcs	.+50     	; 0x1c14 <malloc+0x66>
    1be2:	84 17       	cp	r24, r20
    1be4:	95 07       	cpc	r25, r21
    1be6:	69 f4       	brne	.+26     	; 0x1c02 <malloc+0x54>
    1be8:	10 97       	sbiw	r26, 0x00	; 0
    1bea:	31 f0       	breq	.+12     	; 0x1bf8 <malloc+0x4a>
    1bec:	12 96       	adiw	r26, 0x02	; 2
    1bee:	0c 93       	st	X, r16
    1bf0:	12 97       	sbiw	r26, 0x02	; 2
    1bf2:	13 96       	adiw	r26, 0x03	; 3
    1bf4:	1c 93       	st	X, r17
    1bf6:	27 c0       	rjmp	.+78     	; 0x1c46 <malloc+0x98>
    1bf8:	00 93 1f 04 	sts	0x041F, r16	; 0x80041f <__flp>
    1bfc:	10 93 20 04 	sts	0x0420, r17	; 0x800420 <__flp+0x1>
    1c00:	22 c0       	rjmp	.+68     	; 0x1c46 <malloc+0x98>
    1c02:	21 15       	cp	r18, r1
    1c04:	31 05       	cpc	r19, r1
    1c06:	19 f0       	breq	.+6      	; 0x1c0e <malloc+0x60>
    1c08:	42 17       	cp	r20, r18
    1c0a:	53 07       	cpc	r21, r19
    1c0c:	18 f4       	brcc	.+6      	; 0x1c14 <malloc+0x66>
    1c0e:	9a 01       	movw	r18, r20
    1c10:	bd 01       	movw	r22, r26
    1c12:	ef 01       	movw	r28, r30
    1c14:	df 01       	movw	r26, r30
    1c16:	f8 01       	movw	r30, r16
    1c18:	db cf       	rjmp	.-74     	; 0x1bd0 <malloc+0x22>
    1c1a:	21 15       	cp	r18, r1
    1c1c:	31 05       	cpc	r19, r1
    1c1e:	f9 f0       	breq	.+62     	; 0x1c5e <malloc+0xb0>
    1c20:	28 1b       	sub	r18, r24
    1c22:	39 0b       	sbc	r19, r25
    1c24:	24 30       	cpi	r18, 0x04	; 4
    1c26:	31 05       	cpc	r19, r1
    1c28:	80 f4       	brcc	.+32     	; 0x1c4a <malloc+0x9c>
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2e:	61 15       	cp	r22, r1
    1c30:	71 05       	cpc	r23, r1
    1c32:	21 f0       	breq	.+8      	; 0x1c3c <malloc+0x8e>
    1c34:	fb 01       	movw	r30, r22
    1c36:	93 83       	std	Z+3, r25	; 0x03
    1c38:	82 83       	std	Z+2, r24	; 0x02
    1c3a:	04 c0       	rjmp	.+8      	; 0x1c44 <malloc+0x96>
    1c3c:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <__flp+0x1>
    1c40:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <__flp>
    1c44:	fe 01       	movw	r30, r28
    1c46:	32 96       	adiw	r30, 0x02	; 2
    1c48:	44 c0       	rjmp	.+136    	; 0x1cd2 <malloc+0x124>
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e2 0f       	add	r30, r18
    1c4e:	f3 1f       	adc	r31, r19
    1c50:	81 93       	st	Z+, r24
    1c52:	91 93       	st	Z+, r25
    1c54:	22 50       	subi	r18, 0x02	; 2
    1c56:	31 09       	sbc	r19, r1
    1c58:	39 83       	std	Y+1, r19	; 0x01
    1c5a:	28 83       	st	Y, r18
    1c5c:	3a c0       	rjmp	.+116    	; 0x1cd2 <malloc+0x124>
    1c5e:	20 91 1d 04 	lds	r18, 0x041D	; 0x80041d <__brkval>
    1c62:	30 91 1e 04 	lds	r19, 0x041E	; 0x80041e <__brkval+0x1>
    1c66:	23 2b       	or	r18, r19
    1c68:	41 f4       	brne	.+16     	; 0x1c7a <malloc+0xcc>
    1c6a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1c6e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1c72:	30 93 1e 04 	sts	0x041E, r19	; 0x80041e <__brkval+0x1>
    1c76:	20 93 1d 04 	sts	0x041D, r18	; 0x80041d <__brkval>
    1c7a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1c7e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1c82:	21 15       	cp	r18, r1
    1c84:	31 05       	cpc	r19, r1
    1c86:	41 f4       	brne	.+16     	; 0x1c98 <malloc+0xea>
    1c88:	2d b7       	in	r18, 0x3d	; 61
    1c8a:	3e b7       	in	r19, 0x3e	; 62
    1c8c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1c90:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1c94:	24 1b       	sub	r18, r20
    1c96:	35 0b       	sbc	r19, r21
    1c98:	e0 91 1d 04 	lds	r30, 0x041D	; 0x80041d <__brkval>
    1c9c:	f0 91 1e 04 	lds	r31, 0x041E	; 0x80041e <__brkval+0x1>
    1ca0:	e2 17       	cp	r30, r18
    1ca2:	f3 07       	cpc	r31, r19
    1ca4:	a0 f4       	brcc	.+40     	; 0x1cce <malloc+0x120>
    1ca6:	2e 1b       	sub	r18, r30
    1ca8:	3f 0b       	sbc	r19, r31
    1caa:	28 17       	cp	r18, r24
    1cac:	39 07       	cpc	r19, r25
    1cae:	78 f0       	brcs	.+30     	; 0x1cce <malloc+0x120>
    1cb0:	ac 01       	movw	r20, r24
    1cb2:	4e 5f       	subi	r20, 0xFE	; 254
    1cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb6:	24 17       	cp	r18, r20
    1cb8:	35 07       	cpc	r19, r21
    1cba:	48 f0       	brcs	.+18     	; 0x1cce <malloc+0x120>
    1cbc:	4e 0f       	add	r20, r30
    1cbe:	5f 1f       	adc	r21, r31
    1cc0:	50 93 1e 04 	sts	0x041E, r21	; 0x80041e <__brkval+0x1>
    1cc4:	40 93 1d 04 	sts	0x041D, r20	; 0x80041d <__brkval>
    1cc8:	81 93       	st	Z+, r24
    1cca:	91 93       	st	Z+, r25
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <malloc+0x124>
    1cce:	e0 e0       	ldi	r30, 0x00	; 0
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	cf 01       	movw	r24, r30
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	08 95       	ret

00001cde <free>:
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <free+0xa>
    1ce6:	81 c0       	rjmp	.+258    	; 0x1dea <free+0x10c>
    1ce8:	fc 01       	movw	r30, r24
    1cea:	32 97       	sbiw	r30, 0x02	; 2
    1cec:	13 82       	std	Z+3, r1	; 0x03
    1cee:	12 82       	std	Z+2, r1	; 0x02
    1cf0:	a0 91 1f 04 	lds	r26, 0x041F	; 0x80041f <__flp>
    1cf4:	b0 91 20 04 	lds	r27, 0x0420	; 0x800420 <__flp+0x1>
    1cf8:	10 97       	sbiw	r26, 0x00	; 0
    1cfa:	81 f4       	brne	.+32     	; 0x1d1c <free+0x3e>
    1cfc:	20 81       	ld	r18, Z
    1cfe:	31 81       	ldd	r19, Z+1	; 0x01
    1d00:	82 0f       	add	r24, r18
    1d02:	93 1f       	adc	r25, r19
    1d04:	20 91 1d 04 	lds	r18, 0x041D	; 0x80041d <__brkval>
    1d08:	30 91 1e 04 	lds	r19, 0x041E	; 0x80041e <__brkval+0x1>
    1d0c:	28 17       	cp	r18, r24
    1d0e:	39 07       	cpc	r19, r25
    1d10:	51 f5       	brne	.+84     	; 0x1d66 <free+0x88>
    1d12:	f0 93 1e 04 	sts	0x041E, r31	; 0x80041e <__brkval+0x1>
    1d16:	e0 93 1d 04 	sts	0x041D, r30	; 0x80041d <__brkval>
    1d1a:	67 c0       	rjmp	.+206    	; 0x1dea <free+0x10c>
    1d1c:	ed 01       	movw	r28, r26
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	ce 17       	cp	r28, r30
    1d24:	df 07       	cpc	r29, r31
    1d26:	40 f4       	brcc	.+16     	; 0x1d38 <free+0x5a>
    1d28:	4a 81       	ldd	r20, Y+2	; 0x02
    1d2a:	5b 81       	ldd	r21, Y+3	; 0x03
    1d2c:	9e 01       	movw	r18, r28
    1d2e:	41 15       	cp	r20, r1
    1d30:	51 05       	cpc	r21, r1
    1d32:	f1 f0       	breq	.+60     	; 0x1d70 <free+0x92>
    1d34:	ea 01       	movw	r28, r20
    1d36:	f5 cf       	rjmp	.-22     	; 0x1d22 <free+0x44>
    1d38:	d3 83       	std	Z+3, r29	; 0x03
    1d3a:	c2 83       	std	Z+2, r28	; 0x02
    1d3c:	40 81       	ld	r20, Z
    1d3e:	51 81       	ldd	r21, Z+1	; 0x01
    1d40:	84 0f       	add	r24, r20
    1d42:	95 1f       	adc	r25, r21
    1d44:	c8 17       	cp	r28, r24
    1d46:	d9 07       	cpc	r29, r25
    1d48:	59 f4       	brne	.+22     	; 0x1d60 <free+0x82>
    1d4a:	88 81       	ld	r24, Y
    1d4c:	99 81       	ldd	r25, Y+1	; 0x01
    1d4e:	84 0f       	add	r24, r20
    1d50:	95 1f       	adc	r25, r21
    1d52:	02 96       	adiw	r24, 0x02	; 2
    1d54:	91 83       	std	Z+1, r25	; 0x01
    1d56:	80 83       	st	Z, r24
    1d58:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5c:	93 83       	std	Z+3, r25	; 0x03
    1d5e:	82 83       	std	Z+2, r24	; 0x02
    1d60:	21 15       	cp	r18, r1
    1d62:	31 05       	cpc	r19, r1
    1d64:	29 f4       	brne	.+10     	; 0x1d70 <free+0x92>
    1d66:	f0 93 20 04 	sts	0x0420, r31	; 0x800420 <__flp+0x1>
    1d6a:	e0 93 1f 04 	sts	0x041F, r30	; 0x80041f <__flp>
    1d6e:	3d c0       	rjmp	.+122    	; 0x1dea <free+0x10c>
    1d70:	e9 01       	movw	r28, r18
    1d72:	fb 83       	std	Y+3, r31	; 0x03
    1d74:	ea 83       	std	Y+2, r30	; 0x02
    1d76:	49 91       	ld	r20, Y+
    1d78:	59 91       	ld	r21, Y+
    1d7a:	c4 0f       	add	r28, r20
    1d7c:	d5 1f       	adc	r29, r21
    1d7e:	ec 17       	cp	r30, r28
    1d80:	fd 07       	cpc	r31, r29
    1d82:	61 f4       	brne	.+24     	; 0x1d9c <free+0xbe>
    1d84:	80 81       	ld	r24, Z
    1d86:	91 81       	ldd	r25, Z+1	; 0x01
    1d88:	84 0f       	add	r24, r20
    1d8a:	95 1f       	adc	r25, r21
    1d8c:	02 96       	adiw	r24, 0x02	; 2
    1d8e:	e9 01       	movw	r28, r18
    1d90:	99 83       	std	Y+1, r25	; 0x01
    1d92:	88 83       	st	Y, r24
    1d94:	82 81       	ldd	r24, Z+2	; 0x02
    1d96:	93 81       	ldd	r25, Z+3	; 0x03
    1d98:	9b 83       	std	Y+3, r25	; 0x03
    1d9a:	8a 83       	std	Y+2, r24	; 0x02
    1d9c:	e0 e0       	ldi	r30, 0x00	; 0
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	12 96       	adiw	r26, 0x02	; 2
    1da2:	8d 91       	ld	r24, X+
    1da4:	9c 91       	ld	r25, X
    1da6:	13 97       	sbiw	r26, 0x03	; 3
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	19 f0       	breq	.+6      	; 0x1db2 <free+0xd4>
    1dac:	fd 01       	movw	r30, r26
    1dae:	dc 01       	movw	r26, r24
    1db0:	f7 cf       	rjmp	.-18     	; 0x1da0 <free+0xc2>
    1db2:	8d 91       	ld	r24, X+
    1db4:	9c 91       	ld	r25, X
    1db6:	11 97       	sbiw	r26, 0x01	; 1
    1db8:	9d 01       	movw	r18, r26
    1dba:	2e 5f       	subi	r18, 0xFE	; 254
    1dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dbe:	82 0f       	add	r24, r18
    1dc0:	93 1f       	adc	r25, r19
    1dc2:	20 91 1d 04 	lds	r18, 0x041D	; 0x80041d <__brkval>
    1dc6:	30 91 1e 04 	lds	r19, 0x041E	; 0x80041e <__brkval+0x1>
    1dca:	28 17       	cp	r18, r24
    1dcc:	39 07       	cpc	r19, r25
    1dce:	69 f4       	brne	.+26     	; 0x1dea <free+0x10c>
    1dd0:	30 97       	sbiw	r30, 0x00	; 0
    1dd2:	29 f4       	brne	.+10     	; 0x1dde <free+0x100>
    1dd4:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__flp+0x1>
    1dd8:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <__flp>
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <free+0x104>
    1dde:	13 82       	std	Z+3, r1	; 0x03
    1de0:	12 82       	std	Z+2, r1	; 0x02
    1de2:	b0 93 1e 04 	sts	0x041E, r27	; 0x80041e <__brkval+0x1>
    1de6:	a0 93 1d 04 	sts	0x041D, r26	; 0x80041d <__brkval>
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	08 95       	ret

00001df0 <strnlen_P>:
    1df0:	fc 01       	movw	r30, r24
    1df2:	05 90       	lpm	r0, Z+
    1df4:	61 50       	subi	r22, 0x01	; 1
    1df6:	70 40       	sbci	r23, 0x00	; 0
    1df8:	01 10       	cpse	r0, r1
    1dfa:	d8 f7       	brcc	.-10     	; 0x1df2 <strnlen_P+0x2>
    1dfc:	80 95       	com	r24
    1dfe:	90 95       	com	r25
    1e00:	8e 0f       	add	r24, r30
    1e02:	9f 1f       	adc	r25, r31
    1e04:	08 95       	ret

00001e06 <memset>:
    1e06:	dc 01       	movw	r26, r24
    1e08:	01 c0       	rjmp	.+2      	; 0x1e0c <memset+0x6>
    1e0a:	6d 93       	st	X+, r22
    1e0c:	41 50       	subi	r20, 0x01	; 1
    1e0e:	50 40       	sbci	r21, 0x00	; 0
    1e10:	e0 f7       	brcc	.-8      	; 0x1e0a <memset+0x4>
    1e12:	08 95       	ret

00001e14 <strnlen>:
    1e14:	fc 01       	movw	r30, r24
    1e16:	61 50       	subi	r22, 0x01	; 1
    1e18:	70 40       	sbci	r23, 0x00	; 0
    1e1a:	01 90       	ld	r0, Z+
    1e1c:	01 10       	cpse	r0, r1
    1e1e:	d8 f7       	brcc	.-10     	; 0x1e16 <strnlen+0x2>
    1e20:	80 95       	com	r24
    1e22:	90 95       	com	r25
    1e24:	8e 0f       	add	r24, r30
    1e26:	9f 1f       	adc	r25, r31
    1e28:	08 95       	ret

00001e2a <strrev>:
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	67 2f       	mov	r22, r23
    1e30:	71 91       	ld	r23, Z+
    1e32:	77 23       	and	r23, r23
    1e34:	e1 f7       	brne	.-8      	; 0x1e2e <strrev+0x4>
    1e36:	32 97       	sbiw	r30, 0x02	; 2
    1e38:	04 c0       	rjmp	.+8      	; 0x1e42 <strrev+0x18>
    1e3a:	7c 91       	ld	r23, X
    1e3c:	6d 93       	st	X+, r22
    1e3e:	70 83       	st	Z, r23
    1e40:	62 91       	ld	r22, -Z
    1e42:	ae 17       	cp	r26, r30
    1e44:	bf 07       	cpc	r27, r31
    1e46:	c8 f3       	brcs	.-14     	; 0x1e3a <strrev+0x10>
    1e48:	08 95       	ret

00001e4a <fputc>:
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	fb 01       	movw	r30, r22
    1e54:	23 81       	ldd	r18, Z+3	; 0x03
    1e56:	21 fd       	sbrc	r18, 1
    1e58:	03 c0       	rjmp	.+6      	; 0x1e60 <fputc+0x16>
    1e5a:	8f ef       	ldi	r24, 0xFF	; 255
    1e5c:	9f ef       	ldi	r25, 0xFF	; 255
    1e5e:	2c c0       	rjmp	.+88     	; 0x1eb8 <fputc+0x6e>
    1e60:	22 ff       	sbrs	r18, 2
    1e62:	16 c0       	rjmp	.+44     	; 0x1e90 <fputc+0x46>
    1e64:	46 81       	ldd	r20, Z+6	; 0x06
    1e66:	57 81       	ldd	r21, Z+7	; 0x07
    1e68:	24 81       	ldd	r18, Z+4	; 0x04
    1e6a:	35 81       	ldd	r19, Z+5	; 0x05
    1e6c:	42 17       	cp	r20, r18
    1e6e:	53 07       	cpc	r21, r19
    1e70:	44 f4       	brge	.+16     	; 0x1e82 <fputc+0x38>
    1e72:	a0 81       	ld	r26, Z
    1e74:	b1 81       	ldd	r27, Z+1	; 0x01
    1e76:	9d 01       	movw	r18, r26
    1e78:	2f 5f       	subi	r18, 0xFF	; 255
    1e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7c:	31 83       	std	Z+1, r19	; 0x01
    1e7e:	20 83       	st	Z, r18
    1e80:	8c 93       	st	X, r24
    1e82:	26 81       	ldd	r18, Z+6	; 0x06
    1e84:	37 81       	ldd	r19, Z+7	; 0x07
    1e86:	2f 5f       	subi	r18, 0xFF	; 255
    1e88:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8a:	37 83       	std	Z+7, r19	; 0x07
    1e8c:	26 83       	std	Z+6, r18	; 0x06
    1e8e:	14 c0       	rjmp	.+40     	; 0x1eb8 <fputc+0x6e>
    1e90:	8b 01       	movw	r16, r22
    1e92:	ec 01       	movw	r28, r24
    1e94:	fb 01       	movw	r30, r22
    1e96:	00 84       	ldd	r0, Z+8	; 0x08
    1e98:	f1 85       	ldd	r31, Z+9	; 0x09
    1e9a:	e0 2d       	mov	r30, r0
    1e9c:	19 95       	eicall
    1e9e:	89 2b       	or	r24, r25
    1ea0:	e1 f6       	brne	.-72     	; 0x1e5a <fputc+0x10>
    1ea2:	d8 01       	movw	r26, r16
    1ea4:	16 96       	adiw	r26, 0x06	; 6
    1ea6:	8d 91       	ld	r24, X+
    1ea8:	9c 91       	ld	r25, X
    1eaa:	17 97       	sbiw	r26, 0x07	; 7
    1eac:	01 96       	adiw	r24, 0x01	; 1
    1eae:	17 96       	adiw	r26, 0x07	; 7
    1eb0:	9c 93       	st	X, r25
    1eb2:	8e 93       	st	-X, r24
    1eb4:	16 97       	sbiw	r26, 0x06	; 6
    1eb6:	ce 01       	movw	r24, r28
    1eb8:	df 91       	pop	r29
    1eba:	cf 91       	pop	r28
    1ebc:	1f 91       	pop	r17
    1ebe:	0f 91       	pop	r16
    1ec0:	08 95       	ret

00001ec2 <__ultoa_invert>:
    1ec2:	fa 01       	movw	r30, r20
    1ec4:	aa 27       	eor	r26, r26
    1ec6:	28 30       	cpi	r18, 0x08	; 8
    1ec8:	51 f1       	breq	.+84     	; 0x1f1e <__ultoa_invert+0x5c>
    1eca:	20 31       	cpi	r18, 0x10	; 16
    1ecc:	81 f1       	breq	.+96     	; 0x1f2e <__ultoa_invert+0x6c>
    1ece:	e8 94       	clt
    1ed0:	6f 93       	push	r22
    1ed2:	6e 7f       	andi	r22, 0xFE	; 254
    1ed4:	6e 5f       	subi	r22, 0xFE	; 254
    1ed6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed8:	8f 4f       	sbci	r24, 0xFF	; 255
    1eda:	9f 4f       	sbci	r25, 0xFF	; 255
    1edc:	af 4f       	sbci	r26, 0xFF	; 255
    1ede:	b1 e0       	ldi	r27, 0x01	; 1
    1ee0:	3e d0       	rcall	.+124    	; 0x1f5e <__ultoa_invert+0x9c>
    1ee2:	b4 e0       	ldi	r27, 0x04	; 4
    1ee4:	3c d0       	rcall	.+120    	; 0x1f5e <__ultoa_invert+0x9c>
    1ee6:	67 0f       	add	r22, r23
    1ee8:	78 1f       	adc	r23, r24
    1eea:	89 1f       	adc	r24, r25
    1eec:	9a 1f       	adc	r25, r26
    1eee:	a1 1d       	adc	r26, r1
    1ef0:	68 0f       	add	r22, r24
    1ef2:	79 1f       	adc	r23, r25
    1ef4:	8a 1f       	adc	r24, r26
    1ef6:	91 1d       	adc	r25, r1
    1ef8:	a1 1d       	adc	r26, r1
    1efa:	6a 0f       	add	r22, r26
    1efc:	71 1d       	adc	r23, r1
    1efe:	81 1d       	adc	r24, r1
    1f00:	91 1d       	adc	r25, r1
    1f02:	a1 1d       	adc	r26, r1
    1f04:	20 d0       	rcall	.+64     	; 0x1f46 <__ultoa_invert+0x84>
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <__ultoa_invert+0x48>
    1f08:	68 94       	set
    1f0a:	3f 91       	pop	r19
    1f0c:	2a e0       	ldi	r18, 0x0A	; 10
    1f0e:	26 9f       	mul	r18, r22
    1f10:	11 24       	eor	r1, r1
    1f12:	30 19       	sub	r19, r0
    1f14:	30 5d       	subi	r19, 0xD0	; 208
    1f16:	31 93       	st	Z+, r19
    1f18:	de f6       	brtc	.-74     	; 0x1ed0 <__ultoa_invert+0xe>
    1f1a:	cf 01       	movw	r24, r30
    1f1c:	08 95       	ret
    1f1e:	46 2f       	mov	r20, r22
    1f20:	47 70       	andi	r20, 0x07	; 7
    1f22:	40 5d       	subi	r20, 0xD0	; 208
    1f24:	41 93       	st	Z+, r20
    1f26:	b3 e0       	ldi	r27, 0x03	; 3
    1f28:	0f d0       	rcall	.+30     	; 0x1f48 <__ultoa_invert+0x86>
    1f2a:	c9 f7       	brne	.-14     	; 0x1f1e <__ultoa_invert+0x5c>
    1f2c:	f6 cf       	rjmp	.-20     	; 0x1f1a <__ultoa_invert+0x58>
    1f2e:	46 2f       	mov	r20, r22
    1f30:	4f 70       	andi	r20, 0x0F	; 15
    1f32:	40 5d       	subi	r20, 0xD0	; 208
    1f34:	4a 33       	cpi	r20, 0x3A	; 58
    1f36:	18 f0       	brcs	.+6      	; 0x1f3e <__ultoa_invert+0x7c>
    1f38:	49 5d       	subi	r20, 0xD9	; 217
    1f3a:	31 fd       	sbrc	r19, 1
    1f3c:	40 52       	subi	r20, 0x20	; 32
    1f3e:	41 93       	st	Z+, r20
    1f40:	02 d0       	rcall	.+4      	; 0x1f46 <__ultoa_invert+0x84>
    1f42:	a9 f7       	brne	.-22     	; 0x1f2e <__ultoa_invert+0x6c>
    1f44:	ea cf       	rjmp	.-44     	; 0x1f1a <__ultoa_invert+0x58>
    1f46:	b4 e0       	ldi	r27, 0x04	; 4
    1f48:	a6 95       	lsr	r26
    1f4a:	97 95       	ror	r25
    1f4c:	87 95       	ror	r24
    1f4e:	77 95       	ror	r23
    1f50:	67 95       	ror	r22
    1f52:	ba 95       	dec	r27
    1f54:	c9 f7       	brne	.-14     	; 0x1f48 <__ultoa_invert+0x86>
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	61 05       	cpc	r22, r1
    1f5a:	71 05       	cpc	r23, r1
    1f5c:	08 95       	ret
    1f5e:	9b 01       	movw	r18, r22
    1f60:	ac 01       	movw	r20, r24
    1f62:	0a 2e       	mov	r0, r26
    1f64:	06 94       	lsr	r0
    1f66:	57 95       	ror	r21
    1f68:	47 95       	ror	r20
    1f6a:	37 95       	ror	r19
    1f6c:	27 95       	ror	r18
    1f6e:	ba 95       	dec	r27
    1f70:	c9 f7       	brne	.-14     	; 0x1f64 <__ultoa_invert+0xa2>
    1f72:	62 0f       	add	r22, r18
    1f74:	73 1f       	adc	r23, r19
    1f76:	84 1f       	adc	r24, r20
    1f78:	95 1f       	adc	r25, r21
    1f7a:	a0 1d       	adc	r26, r0
    1f7c:	08 95       	ret

00001f7e <_exit>:
    1f7e:	f8 94       	cli

00001f80 <__stop_program>:
    1f80:	ff cf       	rjmp	.-2      	; 0x1f80 <__stop_program>
