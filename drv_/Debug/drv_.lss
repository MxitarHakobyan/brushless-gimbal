
drv_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000cc  00800200  00002322  000023b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002322  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018f  008002cc  008002cc  00002482  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002482  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00002520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a7e  00000000  00000000  000026f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013d5  00000000  00000000  0000516e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001301  00000000  00000000  00006543  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d4  00000000  00000000  00007844  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b98  00000000  00000000  00007e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b6d  00000000  00000000  000089b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000a51d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9e c0       	rjmp	.+316    	; 0x13e <__ctors_end>
       2:	00 00       	nop
       4:	bc c0       	rjmp	.+376    	; 0x17e <__bad_interrupt>
       6:	00 00       	nop
       8:	ba c0       	rjmp	.+372    	; 0x17e <__bad_interrupt>
       a:	00 00       	nop
       c:	b8 c0       	rjmp	.+368    	; 0x17e <__bad_interrupt>
       e:	00 00       	nop
      10:	b6 c0       	rjmp	.+364    	; 0x17e <__bad_interrupt>
      12:	00 00       	nop
      14:	b4 c0       	rjmp	.+360    	; 0x17e <__bad_interrupt>
      16:	00 00       	nop
      18:	b2 c0       	rjmp	.+356    	; 0x17e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b0 c0       	rjmp	.+352    	; 0x17e <__bad_interrupt>
      1e:	00 00       	nop
      20:	ae c0       	rjmp	.+348    	; 0x17e <__bad_interrupt>
      22:	00 00       	nop
      24:	ac c0       	rjmp	.+344    	; 0x17e <__bad_interrupt>
      26:	00 00       	nop
      28:	aa c0       	rjmp	.+340    	; 0x17e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a8 c0       	rjmp	.+336    	; 0x17e <__bad_interrupt>
      2e:	00 00       	nop
      30:	a6 c0       	rjmp	.+332    	; 0x17e <__bad_interrupt>
      32:	00 00       	nop
      34:	a4 c0       	rjmp	.+328    	; 0x17e <__bad_interrupt>
      36:	00 00       	nop
      38:	a2 c0       	rjmp	.+324    	; 0x17e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a0 c0       	rjmp	.+320    	; 0x17e <__bad_interrupt>
      3e:	00 00       	nop
      40:	9e c0       	rjmp	.+316    	; 0x17e <__bad_interrupt>
      42:	00 00       	nop
      44:	9c c0       	rjmp	.+312    	; 0x17e <__bad_interrupt>
      46:	00 00       	nop
      48:	9a c0       	rjmp	.+308    	; 0x17e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	98 c0       	rjmp	.+304    	; 0x17e <__bad_interrupt>
      4e:	00 00       	nop
      50:	96 c0       	rjmp	.+300    	; 0x17e <__bad_interrupt>
      52:	00 00       	nop
      54:	94 c0       	rjmp	.+296    	; 0x17e <__bad_interrupt>
      56:	00 00       	nop
      58:	92 c0       	rjmp	.+292    	; 0x17e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	45 c2       	rjmp	.+1162   	; 0x4e8 <__vector_23>
      5e:	00 00       	nop
      60:	8e c0       	rjmp	.+284    	; 0x17e <__bad_interrupt>
      62:	00 00       	nop
      64:	8c c0       	rjmp	.+280    	; 0x17e <__bad_interrupt>
      66:	00 00       	nop
      68:	8a c0       	rjmp	.+276    	; 0x17e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	88 c0       	rjmp	.+272    	; 0x17e <__bad_interrupt>
      6e:	00 00       	nop
      70:	86 c0       	rjmp	.+268    	; 0x17e <__bad_interrupt>
      72:	00 00       	nop
      74:	84 c0       	rjmp	.+264    	; 0x17e <__bad_interrupt>
      76:	00 00       	nop
      78:	82 c0       	rjmp	.+260    	; 0x17e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	80 c0       	rjmp	.+256    	; 0x17e <__bad_interrupt>
      7e:	00 00       	nop
      80:	7e c0       	rjmp	.+252    	; 0x17e <__bad_interrupt>
      82:	00 00       	nop
      84:	7c c0       	rjmp	.+248    	; 0x17e <__bad_interrupt>
      86:	00 00       	nop
      88:	7a c0       	rjmp	.+244    	; 0x17e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	78 c0       	rjmp	.+240    	; 0x17e <__bad_interrupt>
      8e:	00 00       	nop
      90:	76 c0       	rjmp	.+236    	; 0x17e <__bad_interrupt>
      92:	00 00       	nop
      94:	74 c0       	rjmp	.+232    	; 0x17e <__bad_interrupt>
      96:	00 00       	nop
      98:	72 c0       	rjmp	.+228    	; 0x17e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	70 c0       	rjmp	.+224    	; 0x17e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6e c0       	rjmp	.+220    	; 0x17e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6c c0       	rjmp	.+216    	; 0x17e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6a c0       	rjmp	.+212    	; 0x17e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	68 c0       	rjmp	.+208    	; 0x17e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	66 c0       	rjmp	.+204    	; 0x17e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	64 c0       	rjmp	.+200    	; 0x17e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	62 c0       	rjmp	.+196    	; 0x17e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	07 c3       	rjmp	.+1550   	; 0x6cc <__vector_47>
      be:	00 00       	nop
      c0:	5e c0       	rjmp	.+188    	; 0x17e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	5c c0       	rjmp	.+184    	; 0x17e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	5a c0       	rjmp	.+180    	; 0x17e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	58 c0       	rjmp	.+176    	; 0x17e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	56 c0       	rjmp	.+172    	; 0x17e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	54 c0       	rjmp	.+168    	; 0x17e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	52 c0       	rjmp	.+164    	; 0x17e <__bad_interrupt>
      da:	00 00       	nop
      dc:	50 c0       	rjmp	.+160    	; 0x17e <__bad_interrupt>
      de:	00 00       	nop
      e0:	4e c0       	rjmp	.+156    	; 0x17e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	03 6e       	ori	r16, 0xE3	; 227
      e6:	db 36       	cpi	r29, 0x6B	; 107
      e8:	3d 9a       	sbi	0x07, 5	; 7
      ea:	99 99       	sbic	0x13, 1	; 19
      ec:	99 3d       	cpi	r25, 0xD9	; 217
      ee:	ab aa       	std	Y+51, r10	; 0x33
      f0:	aa 2a       	or	r10, r26
      f2:	3e 00       	.word	0x003e	; ????
      f4:	00 00       	nop
      f6:	80 3f       	cpi	r24, 0xF0	; 240
      f8:	07 2c       	mov	r0, r7
      fa:	7a a5       	ldd	r23, Y+42	; 0x2a
      fc:	ba 6c       	ori	r27, 0xCA	; 202
      fe:	c5 90       	lpm	r12, Z+
     100:	da 3b       	cpi	r29, 0xBA	; 186
     102:	93 65       	ori	r25, 0x53	; 83
     104:	fc 8b       	std	Y+20, r31	; 0x14
     106:	bc 53       	subi	r27, 0x3C	; 60
     108:	f8 10       	cpse	r15, r8
     10a:	fd 3c       	cpi	r31, 0xCD	; 205
     10c:	56 92       	lac	Z, r5
     10e:	83 4d       	sbci	r24, 0xD3	; 211
     110:	bd 87       	std	Y+13, r27	; 0x0d
     112:	9d 3a       	cpi	r25, 0xAD	; 173
     114:	b6 3d       	cpi	r27, 0xD6	; 214
     116:	cb c9       	rjmp	.-3178   	; 0xfffff4ae <__eeprom_end+0xff7ef4ae>
     118:	bf 5b       	subi	r27, 0xBF	; 191
     11a:	be 73       	andi	r27, 0x3E	; 62
     11c:	da 0f       	add	r29, r26
     11e:	c9 3f       	cpi	r28, 0xF9	; 249
     120:	05 a8       	ldd	r0, Z+53	; 0x35
     122:	4c cd       	rjmp	.-1384   	; 0xfffffbbc <__eeprom_end+0xff7efbbc>
     124:	b2 d4       	rcall	.+2404   	; 0xa8a <main+0x2cc>
     126:	4e b9       	out	0x0e, r20	; 14
     128:	38 36       	cpi	r19, 0x68	; 104
     12a:	a9 02       	muls	r26, r25
     12c:	0c 50       	subi	r16, 0x0C	; 12
     12e:	b9 91       	ld	r27, Y+
     130:	86 88       	ldd	r8, Z+22	; 0x16
     132:	08 3c       	cpi	r16, 0xC8	; 200
     134:	a6 aa       	std	Z+54, r10	; 0x36
     136:	aa 2a       	or	r10, r26
     138:	be 00       	.word	0x00be	; ????
     13a:	00 00       	nop
     13c:	80 3f       	cpi	r24, 0xF0	; 240

0000013e <__ctors_end>:
     13e:	11 24       	eor	r1, r1
     140:	1f be       	out	0x3f, r1	; 63
     142:	cf ef       	ldi	r28, 0xFF	; 255
     144:	d1 e2       	ldi	r29, 0x21	; 33
     146:	de bf       	out	0x3e, r29	; 62
     148:	cd bf       	out	0x3d, r28	; 61
     14a:	00 e0       	ldi	r16, 0x00	; 0
     14c:	0c bf       	out	0x3c, r16	; 60

0000014e <__do_copy_data>:
     14e:	12 e0       	ldi	r17, 0x02	; 2
     150:	a0 e0       	ldi	r26, 0x00	; 0
     152:	b2 e0       	ldi	r27, 0x02	; 2
     154:	e2 e2       	ldi	r30, 0x22	; 34
     156:	f3 e2       	ldi	r31, 0x23	; 35
     158:	00 e0       	ldi	r16, 0x00	; 0
     15a:	0b bf       	out	0x3b, r16	; 59
     15c:	02 c0       	rjmp	.+4      	; 0x162 <__do_copy_data+0x14>
     15e:	07 90       	elpm	r0, Z+
     160:	0d 92       	st	X+, r0
     162:	ac 3c       	cpi	r26, 0xCC	; 204
     164:	b1 07       	cpc	r27, r17
     166:	d9 f7       	brne	.-10     	; 0x15e <__do_copy_data+0x10>

00000168 <__do_clear_bss>:
     168:	24 e0       	ldi	r18, 0x04	; 4
     16a:	ac ec       	ldi	r26, 0xCC	; 204
     16c:	b2 e0       	ldi	r27, 0x02	; 2
     16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
     170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
     172:	ab 35       	cpi	r26, 0x5B	; 91
     174:	b2 07       	cpc	r27, r18
     176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
     178:	22 d3       	rcall	.+1604   	; 0x7be <main>
     17a:	0c 94 8f 11 	jmp	0x231e	; 0x231e <_exit>

0000017e <__bad_interrupt>:
     17e:	40 cf       	rjmp	.-384    	; 0x0 <__vectors>

00000180 <init_gpio>:
	*/
	//DDRB|=(1<<PB5);//LED13
	//sbi(DDRB,4);//digital 10
	//sbi(DDRB,5);//digital 11
	//sbi(DDRB,6);//digital 12
	sbi(DDRH,3);//digital 6 OC4A
     180:	e1 e0       	ldi	r30, 0x01	; 1
     182:	f1 e0       	ldi	r31, 0x01	; 1
     184:	80 81       	ld	r24, Z
     186:	88 60       	ori	r24, 0x08	; 8
     188:	80 83       	st	Z, r24
	sbi(DDRH,4);//digital 7 OC4B
     18a:	80 81       	ld	r24, Z
     18c:	80 61       	ori	r24, 0x10	; 16
     18e:	80 83       	st	Z, r24
	sbi(DDRH,5);//digital 8 OC4C
     190:	80 81       	ld	r24, Z
     192:	80 62       	ori	r24, 0x20	; 32
     194:	80 83       	st	Z, r24
     196:	08 95       	ret

00000198 <min>:
		}
	#endif
}

double min (double a,double b, double c)
{
     198:	8f 92       	push	r8
     19a:	9f 92       	push	r9
     19c:	af 92       	push	r10
     19e:	bf 92       	push	r11
     1a0:	cf 92       	push	r12
     1a2:	df 92       	push	r13
     1a4:	ef 92       	push	r14
     1a6:	ff 92       	push	r15
     1a8:	0f 93       	push	r16
     1aa:	1f 93       	push	r17
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	d6 2e       	mov	r13, r22
     1b2:	d7 2f       	mov	r29, r23
     1b4:	c8 2f       	mov	r28, r24
     1b6:	c9 2e       	mov	r12, r25
     1b8:	b2 2e       	mov	r11, r18
     1ba:	a3 2e       	mov	r10, r19
     1bc:	94 2e       	mov	r9, r20
     1be:	85 2e       	mov	r8, r21
	if (a<b && a<c) return a;
     1c0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__cmpsf2>
     1c4:	88 23       	and	r24, r24
     1c6:	64 f4       	brge	.+24     	; 0x1e0 <min+0x48>
     1c8:	2e 2d       	mov	r18, r14
     1ca:	3f 2d       	mov	r19, r15
     1cc:	40 2f       	mov	r20, r16
     1ce:	51 2f       	mov	r21, r17
     1d0:	6d 2d       	mov	r22, r13
     1d2:	7d 2f       	mov	r23, r29
     1d4:	8c 2f       	mov	r24, r28
     1d6:	9c 2d       	mov	r25, r12
     1d8:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__cmpsf2>
     1dc:	88 23       	and	r24, r24
     1de:	8c f1       	brlt	.+98     	; 0x242 <min+0xaa>
	if (b<a && b<c) return b;
     1e0:	2b 2d       	mov	r18, r11
     1e2:	3a 2d       	mov	r19, r10
     1e4:	49 2d       	mov	r20, r9
     1e6:	58 2d       	mov	r21, r8
     1e8:	6d 2d       	mov	r22, r13
     1ea:	7d 2f       	mov	r23, r29
     1ec:	8c 2f       	mov	r24, r28
     1ee:	9c 2d       	mov	r25, r12
     1f0:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__gesf2>
     1f4:	18 16       	cp	r1, r24
     1f6:	64 f4       	brge	.+24     	; 0x210 <min+0x78>
     1f8:	2e 2d       	mov	r18, r14
     1fa:	3f 2d       	mov	r19, r15
     1fc:	40 2f       	mov	r20, r16
     1fe:	51 2f       	mov	r21, r17
     200:	6b 2d       	mov	r22, r11
     202:	7a 2d       	mov	r23, r10
     204:	89 2d       	mov	r24, r9
     206:	98 2d       	mov	r25, r8
     208:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__cmpsf2>
     20c:	88 23       	and	r24, r24
     20e:	e4 f0       	brlt	.+56     	; 0x248 <min+0xb0>
	if (c<a && c<b) return c;
     210:	2e 2d       	mov	r18, r14
     212:	3f 2d       	mov	r19, r15
     214:	40 2f       	mov	r20, r16
     216:	51 2f       	mov	r21, r17
     218:	6d 2d       	mov	r22, r13
     21a:	7d 2f       	mov	r23, r29
     21c:	8c 2f       	mov	r24, r28
     21e:	9c 2d       	mov	r25, r12
     220:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__gesf2>
     224:	18 16       	cp	r1, r24
     226:	64 f4       	brge	.+24     	; 0x240 <min+0xa8>
     228:	2e 2d       	mov	r18, r14
     22a:	3f 2d       	mov	r19, r15
     22c:	40 2f       	mov	r20, r16
     22e:	51 2f       	mov	r21, r17
     230:	6b 2d       	mov	r22, r11
     232:	7a 2d       	mov	r23, r10
     234:	89 2d       	mov	r24, r9
     236:	98 2d       	mov	r25, r8
     238:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__gesf2>
     23c:	18 16       	cp	r1, r24
     23e:	4c f0       	brlt	.+18     	; 0x252 <min+0xba>
}
     240:	0a c0       	rjmp	.+20     	; 0x256 <min+0xbe>
	#endif
}

double min (double a,double b, double c)
{
	if (a<b && a<c) return a;
     242:	ed 2c       	mov	r14, r13
     244:	1c 2d       	mov	r17, r12
     246:	07 c0       	rjmp	.+14     	; 0x256 <min+0xbe>
	if (b<a && b<c) return b;
     248:	eb 2c       	mov	r14, r11
     24a:	da 2d       	mov	r29, r10
     24c:	c9 2d       	mov	r28, r9
     24e:	18 2d       	mov	r17, r8
     250:	02 c0       	rjmp	.+4      	; 0x256 <min+0xbe>
	if (c<a && c<b) return c;
     252:	df 2d       	mov	r29, r15
     254:	c0 2f       	mov	r28, r16
}
     256:	6e 2d       	mov	r22, r14
     258:	7d 2f       	mov	r23, r29
     25a:	8c 2f       	mov	r24, r28
     25c:	91 2f       	mov	r25, r17
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	1f 91       	pop	r17
     264:	0f 91       	pop	r16
     266:	ff 90       	pop	r15
     268:	ef 90       	pop	r14
     26a:	df 90       	pop	r13
     26c:	cf 90       	pop	r12
     26e:	bf 90       	pop	r11
     270:	af 90       	pop	r10
     272:	9f 90       	pop	r9
     274:	8f 90       	pop	r8
     276:	08 95       	ret

00000278 <max>:
double max (double a,double b, double c)
{
     278:	8f 92       	push	r8
     27a:	9f 92       	push	r9
     27c:	af 92       	push	r10
     27e:	bf 92       	push	r11
     280:	cf 92       	push	r12
     282:	df 92       	push	r13
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	d6 2e       	mov	r13, r22
     292:	d7 2f       	mov	r29, r23
     294:	c8 2f       	mov	r28, r24
     296:	c9 2e       	mov	r12, r25
     298:	b2 2e       	mov	r11, r18
     29a:	a3 2e       	mov	r10, r19
     29c:	94 2e       	mov	r9, r20
     29e:	85 2e       	mov	r8, r21
	if (a>b && a>c) return a;
     2a0:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__gesf2>
     2a4:	18 16       	cp	r1, r24
     2a6:	64 f4       	brge	.+24     	; 0x2c0 <max+0x48>
     2a8:	2e 2d       	mov	r18, r14
     2aa:	3f 2d       	mov	r19, r15
     2ac:	40 2f       	mov	r20, r16
     2ae:	51 2f       	mov	r21, r17
     2b0:	6d 2d       	mov	r22, r13
     2b2:	7d 2f       	mov	r23, r29
     2b4:	8c 2f       	mov	r24, r28
     2b6:	9c 2d       	mov	r25, r12
     2b8:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__gesf2>
     2bc:	18 16       	cp	r1, r24
     2be:	8c f1       	brlt	.+98     	; 0x322 <max+0xaa>
	if (b>a && b>c) return b;
     2c0:	2b 2d       	mov	r18, r11
     2c2:	3a 2d       	mov	r19, r10
     2c4:	49 2d       	mov	r20, r9
     2c6:	58 2d       	mov	r21, r8
     2c8:	6d 2d       	mov	r22, r13
     2ca:	7d 2f       	mov	r23, r29
     2cc:	8c 2f       	mov	r24, r28
     2ce:	9c 2d       	mov	r25, r12
     2d0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__cmpsf2>
     2d4:	88 23       	and	r24, r24
     2d6:	64 f4       	brge	.+24     	; 0x2f0 <max+0x78>
     2d8:	2e 2d       	mov	r18, r14
     2da:	3f 2d       	mov	r19, r15
     2dc:	40 2f       	mov	r20, r16
     2de:	51 2f       	mov	r21, r17
     2e0:	6b 2d       	mov	r22, r11
     2e2:	7a 2d       	mov	r23, r10
     2e4:	89 2d       	mov	r24, r9
     2e6:	98 2d       	mov	r25, r8
     2e8:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__gesf2>
     2ec:	18 16       	cp	r1, r24
     2ee:	e4 f0       	brlt	.+56     	; 0x328 <max+0xb0>
	if (c>a && c>b) return c;
     2f0:	2e 2d       	mov	r18, r14
     2f2:	3f 2d       	mov	r19, r15
     2f4:	40 2f       	mov	r20, r16
     2f6:	51 2f       	mov	r21, r17
     2f8:	6d 2d       	mov	r22, r13
     2fa:	7d 2f       	mov	r23, r29
     2fc:	8c 2f       	mov	r24, r28
     2fe:	9c 2d       	mov	r25, r12
     300:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__cmpsf2>
     304:	88 23       	and	r24, r24
     306:	64 f4       	brge	.+24     	; 0x320 <max+0xa8>
     308:	2e 2d       	mov	r18, r14
     30a:	3f 2d       	mov	r19, r15
     30c:	40 2f       	mov	r20, r16
     30e:	51 2f       	mov	r21, r17
     310:	6b 2d       	mov	r22, r11
     312:	7a 2d       	mov	r23, r10
     314:	89 2d       	mov	r24, r9
     316:	98 2d       	mov	r25, r8
     318:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__cmpsf2>
     31c:	88 23       	and	r24, r24
     31e:	4c f0       	brlt	.+18     	; 0x332 <max+0xba>
}
     320:	0a c0       	rjmp	.+20     	; 0x336 <max+0xbe>
	if (b<a && b<c) return b;
	if (c<a && c<b) return c;
}
double max (double a,double b, double c)
{
	if (a>b && a>c) return a;
     322:	ed 2c       	mov	r14, r13
     324:	1c 2d       	mov	r17, r12
     326:	07 c0       	rjmp	.+14     	; 0x336 <max+0xbe>
	if (b>a && b>c) return b;
     328:	eb 2c       	mov	r14, r11
     32a:	da 2d       	mov	r29, r10
     32c:	c9 2d       	mov	r28, r9
     32e:	18 2d       	mov	r17, r8
     330:	02 c0       	rjmp	.+4      	; 0x336 <max+0xbe>
	if (c>a && c>b) return c;
     332:	df 2d       	mov	r29, r15
     334:	c0 2f       	mov	r28, r16
}
     336:	6e 2d       	mov	r22, r14
     338:	7d 2f       	mov	r23, r29
     33a:	8c 2f       	mov	r24, r28
     33c:	91 2f       	mov	r25, r17
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	1f 91       	pop	r17
     344:	0f 91       	pop	r16
     346:	ff 90       	pop	r15
     348:	ef 90       	pop	r14
     34a:	df 90       	pop	r13
     34c:	cf 90       	pop	r12
     34e:	bf 90       	pop	r11
     350:	af 90       	pop	r10
     352:	9f 90       	pop	r9
     354:	8f 90       	pop	r8
     356:	08 95       	ret

00000358 <getSinTable>:
	sbi(DDRH,4);//digital 7 OC4B
	sbi(DDRH,5);//digital 8 OC4C
	//sbi(DDRH,6);//digital 9
}
void getSinTable(uint16_t sinTableSize,uint8_t *pwmSin,uint16_t sineScale)
{
     358:	2f 92       	push	r2
     35a:	3f 92       	push	r3
     35c:	6f 92       	push	r6
     35e:	7f 92       	push	r7
     360:	8f 92       	push	r8
     362:	9f 92       	push	r9
     364:	af 92       	push	r10
     366:	bf 92       	push	r11
     368:	cf 92       	push	r12
     36a:	df 92       	push	r13
     36c:	ef 92       	push	r14
     36e:	ff 92       	push	r15
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	2e 97       	sbiw	r28, 0x0e	; 14
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
	#ifdef SVPWM
		double wave1;
		double wave2;
		double wave3;
		double radWave[SINE_TABLE_SZ];
		for (int i = 0; i < sinTableSize; i++)
     388:	00 97       	sbiw	r24, 0x00	; 0
     38a:	09 f4       	brne	.+2      	; 0x38e <getSinTable+0x36>
     38c:	85 c0       	rjmp	.+266    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     38e:	26 2e       	mov	r2, r22
     390:	37 2e       	mov	r3, r23
     392:	3c 01       	movw	r6, r24
     394:	c1 2c       	mov	r12, r1
     396:	d1 2c       	mov	r13, r1
		{
			wave1=255*sin(i);
     398:	b6 01       	movw	r22, r12
     39a:	0d 2c       	mov	r0, r13
     39c:	00 0c       	add	r0, r0
     39e:	88 0b       	sbc	r24, r24
     3a0:	99 0b       	sbc	r25, r25
     3a2:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__floatsisf>
     3a6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <sin>
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	4f e7       	ldi	r20, 0x7F	; 127
     3b0:	53 e4       	ldi	r21, 0x43	; 67
     3b2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__mulsf3>
     3b6:	4b 01       	movw	r8, r22
     3b8:	5c 01       	movw	r10, r24
			wave2=255*sin(i-phase);
     3ba:	b6 01       	movw	r22, r12
     3bc:	68 57       	subi	r22, 0x78	; 120
     3be:	71 09       	sbc	r23, r1
     3c0:	07 2e       	mov	r0, r23
     3c2:	00 0c       	add	r0, r0
     3c4:	88 0b       	sbc	r24, r24
     3c6:	99 0b       	sbc	r25, r25
     3c8:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__floatsisf>
     3cc:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <sin>
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	4f e7       	ldi	r20, 0x7F	; 127
     3d6:	53 e4       	ldi	r21, 0x43	; 67
     3d8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__mulsf3>
     3dc:	6b 83       	std	Y+3, r22	; 0x03
     3de:	7c 83       	std	Y+4, r23	; 0x04
     3e0:	8d 83       	std	Y+5, r24	; 0x05
     3e2:	9e 83       	std	Y+6, r25	; 0x06
			wave3=255*sin(i+phase);
     3e4:	b6 01       	movw	r22, r12
     3e6:	68 58       	subi	r22, 0x88	; 136
     3e8:	7f 4f       	sbci	r23, 0xFF	; 255
     3ea:	07 2e       	mov	r0, r23
     3ec:	00 0c       	add	r0, r0
     3ee:	88 0b       	sbc	r24, r24
     3f0:	99 0b       	sbc	r25, r25
     3f2:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__floatsisf>
     3f6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <sin>
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	4f e7       	ldi	r20, 0x7F	; 127
     400:	53 e4       	ldi	r21, 0x43	; 67
     402:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__mulsf3>
     406:	6f 83       	std	Y+7, r22	; 0x07
     408:	78 87       	std	Y+8, r23	; 0x08
     40a:	89 87       	std	Y+9, r24	; 0x09
     40c:	9a 87       	std	Y+10, r25	; 0x0a
			radWave[i]=(min(wave1,wave2,wave3)+max(wave1,wave2,wave3))/2;
     40e:	7b 01       	movw	r14, r22
     410:	8c 01       	movw	r16, r24
     412:	2b 81       	ldd	r18, Y+3	; 0x03
     414:	3c 81       	ldd	r19, Y+4	; 0x04
     416:	4d 81       	ldd	r20, Y+5	; 0x05
     418:	5e 81       	ldd	r21, Y+6	; 0x06
     41a:	c5 01       	movw	r24, r10
     41c:	b4 01       	movw	r22, r8
     41e:	bc de       	rcall	.-648    	; 0x198 <min>
     420:	6b 87       	std	Y+11, r22	; 0x0b
     422:	7c 87       	std	Y+12, r23	; 0x0c
     424:	8d 87       	std	Y+13, r24	; 0x0d
     426:	9e 87       	std	Y+14, r25	; 0x0e
     428:	2b 81       	ldd	r18, Y+3	; 0x03
     42a:	3c 81       	ldd	r19, Y+4	; 0x04
     42c:	4d 81       	ldd	r20, Y+5	; 0x05
     42e:	5e 81       	ldd	r21, Y+6	; 0x06
     430:	c5 01       	movw	r24, r10
     432:	b4 01       	movw	r22, r8
     434:	21 df       	rcall	.-446    	; 0x278 <max>
     436:	9b 01       	movw	r18, r22
     438:	ac 01       	movw	r20, r24
			pwmSin[i]=(radWave[i]/2)+128;
     43a:	6b 85       	ldd	r22, Y+11	; 0x0b
     43c:	7c 85       	ldd	r23, Y+12	; 0x0c
     43e:	8d 85       	ldd	r24, Y+13	; 0x0d
     440:	9e 85       	ldd	r25, Y+14	; 0x0e
     442:	3c d7       	rcall	.+3704   	; 0x12bc <__addsf3>
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	40 e0       	ldi	r20, 0x00	; 0
     44a:	5f e3       	ldi	r21, 0x3F	; 63
     44c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__mulsf3>
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	40 e0       	ldi	r20, 0x00	; 0
     456:	5f e3       	ldi	r21, 0x3F	; 63
     458:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__mulsf3>
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	40 e0       	ldi	r20, 0x00	; 0
     462:	53 e4       	ldi	r21, 0x43	; 67
     464:	2b d7       	rcall	.+3670   	; 0x12bc <__addsf3>
     466:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fixunssfsi>
     46a:	f1 01       	movw	r30, r2
     46c:	61 93       	st	Z+, r22
     46e:	1f 01       	movw	r2, r30
			uint16_t reg=wave1;
     470:	c5 01       	movw	r24, r10
     472:	b4 01       	movw	r22, r8
     474:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fixunssfsi>
     478:	7a 83       	std	Y+2, r23	; 0x02
			print16(&reg);
     47a:	69 83       	std	Y+1, r22	; 0x01
     47c:	ce 01       	movw	r24, r28
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	4c d1       	rcall	.+664    	; 0x71a <print16>
			printf("\n");		
     482:	8a e0       	ldi	r24, 0x0A	; 10
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <putchar>
	#ifdef SVPWM
		double wave1;
		double wave2;
		double wave3;
		double radWave[SINE_TABLE_SZ];
		for (int i = 0; i < sinTableSize; i++)
     48a:	ff ef       	ldi	r31, 0xFF	; 255
     48c:	cf 1a       	sub	r12, r31
     48e:	df 0a       	sbc	r13, r31
     490:	c6 14       	cp	r12, r6
     492:	d7 04       	cpc	r13, r7
     494:	09 f0       	breq	.+2      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     496:	80 cf       	rjmp	.-256    	; 0x398 <getSinTable+0x40>
			uint16_t reg=pwmSin[i];
			print16(&reg);
			printf("\n");
		}
	#endif
}
     498:	2e 96       	adiw	r28, 0x0e	; 14
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	cd bf       	out	0x3d, r28	; 61
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
     4ac:	ff 90       	pop	r15
     4ae:	ef 90       	pop	r14
     4b0:	df 90       	pop	r13
     4b2:	cf 90       	pop	r12
     4b4:	bf 90       	pop	r11
     4b6:	af 90       	pop	r10
     4b8:	9f 90       	pop	r9
     4ba:	8f 90       	pop	r8
     4bc:	7f 90       	pop	r7
     4be:	6f 90       	pop	r6
     4c0:	3f 90       	pop	r3
     4c2:	2f 90       	pop	r2
     4c4:	08 95       	ret

000004c6 <uart_putchar>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     4c6:	cf 93       	push	r28
     4c8:	c8 2f       	mov	r28, r24
     4ca:	8a 30       	cpi	r24, 0x0A	; 10
     4cc:	11 f4       	brne	.+4      	; 0x4d2 <uart_putchar+0xc>
     4ce:	8d e0       	ldi	r24, 0x0D	; 13
     4d0:	fa df       	rcall	.-12     	; 0x4c6 <uart_putchar>
     4d2:	e0 ec       	ldi	r30, 0xC0	; 192
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	80 81       	ld	r24, Z
     4d8:	85 ff       	sbrs	r24, 5
     4da:	fd cf       	rjmp	.-6      	; 0x4d6 <uart_putchar+0x10>
     4dc:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <__vector_23>:
     4e8:	1f 92       	push	r1
     4ea:	0f 92       	push	r0
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	0f 92       	push	r0
     4f0:	11 24       	eor	r1, r1
     4f2:	2f 93       	push	r18
     4f4:	3f 93       	push	r19
     4f6:	8f 93       	push	r24
     4f8:	9f 93       	push	r25
     4fa:	af 93       	push	r26
     4fc:	bf 93       	push	r27
     4fe:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <timer0_millis>
     502:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <timer0_millis+0x1>
     506:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <timer0_millis+0x2>
     50a:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <timer0_millis+0x3>
     50e:	30 91 ce 02 	lds	r19, 0x02CE	; 0x8002ce <timer0_fract>
     512:	23 e0       	ldi	r18, 0x03	; 3
     514:	23 0f       	add	r18, r19
     516:	2d 37       	cpi	r18, 0x7D	; 125
     518:	20 f4       	brcc	.+8      	; 0x522 <__vector_23+0x3a>
     51a:	01 96       	adiw	r24, 0x01	; 1
     51c:	a1 1d       	adc	r26, r1
     51e:	b1 1d       	adc	r27, r1
     520:	05 c0       	rjmp	.+10     	; 0x52c <__vector_23+0x44>
     522:	26 e8       	ldi	r18, 0x86	; 134
     524:	23 0f       	add	r18, r19
     526:	02 96       	adiw	r24, 0x02	; 2
     528:	a1 1d       	adc	r26, r1
     52a:	b1 1d       	adc	r27, r1
     52c:	20 93 ce 02 	sts	0x02CE, r18	; 0x8002ce <timer0_fract>
     530:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <timer0_millis>
     534:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <timer0_millis+0x1>
     538:	a0 93 d1 02 	sts	0x02D1, r26	; 0x8002d1 <timer0_millis+0x2>
     53c:	b0 93 d2 02 	sts	0x02D2, r27	; 0x8002d2 <timer0_millis+0x3>
     540:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <timer0_overflow_count>
     544:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <timer0_overflow_count+0x1>
     548:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <timer0_overflow_count+0x2>
     54c:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <timer0_overflow_count+0x3>
     550:	01 96       	adiw	r24, 0x01	; 1
     552:	a1 1d       	adc	r26, r1
     554:	b1 1d       	adc	r27, r1
     556:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <timer0_overflow_count>
     55a:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <timer0_overflow_count+0x1>
     55e:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <timer0_overflow_count+0x2>
     562:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <timer0_overflow_count+0x3>
     566:	bf 91       	pop	r27
     568:	af 91       	pop	r26
     56a:	9f 91       	pop	r25
     56c:	8f 91       	pop	r24
     56e:	3f 91       	pop	r19
     570:	2f 91       	pop	r18
     572:	0f 90       	pop	r0
     574:	0f be       	out	0x3f, r0	; 63
     576:	0f 90       	pop	r0
     578:	1f 90       	pop	r1
     57a:	18 95       	reti

0000057c <micros>:
     57c:	3f b7       	in	r19, 0x3f	; 63
     57e:	f8 94       	cli
     580:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <timer0_overflow_count>
     584:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <timer0_overflow_count+0x1>
     588:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <timer0_overflow_count+0x2>
     58c:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <timer0_overflow_count+0x3>
     590:	26 b5       	in	r18, 0x26	; 38
     592:	a8 9b       	sbis	0x15, 0	; 21
     594:	05 c0       	rjmp	.+10     	; 0x5a0 <micros+0x24>
     596:	2f 3f       	cpi	r18, 0xFF	; 255
     598:	19 f0       	breq	.+6      	; 0x5a0 <micros+0x24>
     59a:	01 96       	adiw	r24, 0x01	; 1
     59c:	a1 1d       	adc	r26, r1
     59e:	b1 1d       	adc	r27, r1
     5a0:	3f bf       	out	0x3f, r19	; 63
     5a2:	ba 2f       	mov	r27, r26
     5a4:	a9 2f       	mov	r26, r25
     5a6:	98 2f       	mov	r25, r24
     5a8:	88 27       	eor	r24, r24
     5aa:	82 0f       	add	r24, r18
     5ac:	91 1d       	adc	r25, r1
     5ae:	a1 1d       	adc	r26, r1
     5b0:	b1 1d       	adc	r27, r1
     5b2:	bc 01       	movw	r22, r24
     5b4:	cd 01       	movw	r24, r26
     5b6:	66 0f       	add	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	88 1f       	adc	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	66 0f       	add	r22, r22
     5c0:	77 1f       	adc	r23, r23
     5c2:	88 1f       	adc	r24, r24
     5c4:	99 1f       	adc	r25, r25
     5c6:	08 95       	ret

000005c8 <PWM_update>:
{
	PWM_update();
}
void PWM_update()//motor pwm update 
{
	U_PWM=pwmSin[U_step];
     5c8:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <__data_end>
     5cc:	f0 91 cd 02 	lds	r31, 0x02CD	; 0x8002cd <__data_end+0x1>
     5d0:	e7 51       	subi	r30, 0x17	; 23
     5d2:	fd 4f       	sbci	r31, 0xFD	; 253
     5d4:	80 81       	ld	r24, Z
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     5dc:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
	V_PWM=pwmSin[V_step];
     5e0:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <V_step>
     5e4:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <V_step+0x1>
     5e8:	e7 51       	subi	r30, 0x17	; 23
     5ea:	fd 4f       	sbci	r31, 0xFD	; 253
     5ec:	80 81       	ld	r24, Z
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     5f4:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
	W_PWM=pwmSin[W_step];
     5f8:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <W_step>
     5fc:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <W_step+0x1>
     600:	e7 51       	subi	r30, 0x17	; 23
     602:	fd 4f       	sbci	r31, 0xFD	; 253
     604:	80 81       	ld	r24, Z
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
     60c:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
	U_step=U_step+incr;
     610:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <incr>
     614:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <incr+0x1>
     618:	40 91 cc 02 	lds	r20, 0x02CC	; 0x8002cc <__data_end>
     61c:	50 91 cd 02 	lds	r21, 0x02CD	; 0x8002cd <__data_end+0x1>
     620:	46 0f       	add	r20, r22
     622:	57 1f       	adc	r21, r23
     624:	50 93 cd 02 	sts	0x02CD, r21	; 0x8002cd <__data_end+0x1>
     628:	40 93 cc 02 	sts	0x02CC, r20	; 0x8002cc <__data_end>
	V_step=V_step+incr;
     62c:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <V_step>
     630:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <V_step+0x1>
     634:	26 0f       	add	r18, r22
     636:	37 1f       	adc	r19, r23
     638:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <V_step+0x1>
     63c:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <V_step>
	W_step=W_step+incr;
     640:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <W_step>
     644:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <W_step+0x1>
     648:	86 0f       	add	r24, r22
     64a:	97 1f       	adc	r25, r23
     64c:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <W_step+0x1>
     650:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <W_step>
	if(U_step > SINE_TABLE_SZ)  
     654:	49 36       	cpi	r20, 0x69	; 105
     656:	61 e0       	ldi	r22, 0x01	; 1
     658:	56 07       	cpc	r21, r22
     65a:	2c f0       	brlt	.+10     	; 0x666 <PWM_update+0x9e>
		U_step = 0;
     65c:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <__data_end+0x1>
     660:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <__data_end>
     664:	08 c0       	rjmp	.+16     	; 0x676 <PWM_update+0xae>
	if(U_step < 0)  
     666:	55 23       	and	r21, r21
     668:	34 f4       	brge	.+12     	; 0x676 <PWM_update+0xae>
		U_step = SINE_TABLE_SZ;
     66a:	48 e6       	ldi	r20, 0x68	; 104
     66c:	51 e0       	ldi	r21, 0x01	; 1
     66e:	50 93 cd 02 	sts	0x02CD, r21	; 0x8002cd <__data_end+0x1>
     672:	40 93 cc 02 	sts	0x02CC, r20	; 0x8002cc <__data_end>
	
	if(V_step > SINE_TABLE_SZ)  
     676:	29 36       	cpi	r18, 0x69	; 105
     678:	41 e0       	ldi	r20, 0x01	; 1
     67a:	34 07       	cpc	r19, r20
     67c:	2c f0       	brlt	.+10     	; 0x688 <PWM_update+0xc0>
		V_step = 0;
     67e:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <V_step+0x1>
     682:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <V_step>
     686:	08 c0       	rjmp	.+16     	; 0x698 <PWM_update+0xd0>
	if(V_step < 0)  
     688:	33 23       	and	r19, r19
     68a:	34 f4       	brge	.+12     	; 0x698 <PWM_update+0xd0>
		V_step = SINE_TABLE_SZ;
     68c:	28 e6       	ldi	r18, 0x68	; 104
     68e:	31 e0       	ldi	r19, 0x01	; 1
     690:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <V_step+0x1>
     694:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <V_step>
	
	if(W_step > SINE_TABLE_SZ)  
     698:	89 36       	cpi	r24, 0x69	; 105
     69a:	61 e0       	ldi	r22, 0x01	; 1
     69c:	96 07       	cpc	r25, r22
     69e:	2c f0       	brlt	.+10     	; 0x6aa <PWM_update+0xe2>
		W_step = 0;
     6a0:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <W_step+0x1>
     6a4:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <W_step>
     6a8:	08 c0       	rjmp	.+16     	; 0x6ba <PWM_update+0xf2>
	if(W_step < 0) 
     6aa:	99 23       	and	r25, r25
     6ac:	34 f4       	brge	.+12     	; 0x6ba <PWM_update+0xf2>
		W_step = SINE_TABLE_SZ;
     6ae:	88 e6       	ldi	r24, 0x68	; 104
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <W_step+0x1>
     6b6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <W_step>
	//_delay_us(100);
	OCR5A=pwm_delay;
     6ba:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <pwm_delay>
     6be:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <pwm_delay+0x1>
     6c2:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     6c6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     6ca:	08 95       	ret

000006cc <__vector_47>:
	SREG = oldSREG;

	return m;
}
ISR(TIMER5_COMPA_vect)//motor update interrupt routine
{
     6cc:	1f 92       	push	r1
     6ce:	0f 92       	push	r0
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	0f 92       	push	r0
     6d4:	11 24       	eor	r1, r1
     6d6:	0b b6       	in	r0, 0x3b	; 59
     6d8:	0f 92       	push	r0
     6da:	2f 93       	push	r18
     6dc:	3f 93       	push	r19
     6de:	4f 93       	push	r20
     6e0:	5f 93       	push	r21
     6e2:	6f 93       	push	r22
     6e4:	7f 93       	push	r23
     6e6:	8f 93       	push	r24
     6e8:	9f 93       	push	r25
     6ea:	af 93       	push	r26
     6ec:	bf 93       	push	r27
     6ee:	ef 93       	push	r30
	PWM_update();
     6f0:	ff 93       	push	r31
}
     6f2:	6a df       	rcall	.-300    	; 0x5c8 <PWM_update>
     6f4:	ff 91       	pop	r31
     6f6:	ef 91       	pop	r30
     6f8:	bf 91       	pop	r27
     6fa:	af 91       	pop	r26
     6fc:	9f 91       	pop	r25
     6fe:	8f 91       	pop	r24
     700:	7f 91       	pop	r23
     702:	6f 91       	pop	r22
     704:	5f 91       	pop	r21
     706:	4f 91       	pop	r20
     708:	3f 91       	pop	r19
     70a:	2f 91       	pop	r18
     70c:	0f 90       	pop	r0
     70e:	0b be       	out	0x3b, r0	; 59
     710:	0f 90       	pop	r0
     712:	0f be       	out	0x3f, r0	; 63
     714:	0f 90       	pop	r0
     716:	1f 90       	pop	r1
     718:	18 95       	reti

0000071a <print16>:
	OCR5A=pwm_delay;
}
void print16(int16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     71a:	0f 93       	push	r16
     71c:	1f 93       	push	r17
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
     726:	2a 97       	sbiw	r28, 0x0a	; 10
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     732:	4a e0       	ldi	r20, 0x0A	; 10
     734:	8e 01       	movw	r16, r28
     736:	0f 5f       	subi	r16, 0xFF	; 255
     738:	1f 4f       	sbci	r17, 0xFF	; 255
     73a:	b8 01       	movw	r22, r16
     73c:	fc 01       	movw	r30, r24
     73e:	80 81       	ld	r24, Z
     740:	91 81       	ldd	r25, Z+1	; 0x01
     742:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     746:	1f 93       	push	r17
     748:	0f 93       	push	r16
     74a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <printf>
	//printf("\n");
}
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	2a 96       	adiw	r28, 0x0a	; 10
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	de bf       	out	0x3e, r29	; 62
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	cd bf       	out	0x3d, r28	; 61
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	08 95       	ret

00000768 <print16ln>:

void print16ln(int16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
     774:	2a 97       	sbiw	r28, 0x0a	; 10
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	de bf       	out	0x3e, r29	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	4a e0       	ldi	r20, 0x0A	; 10
     782:	8e 01       	movw	r16, r28
     784:	0f 5f       	subi	r16, 0xFF	; 255
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	b8 01       	movw	r22, r16
     78a:	fc 01       	movw	r30, r24
     78c:	80 81       	ld	r24, Z
     78e:	91 81       	ldd	r25, Z+1	; 0x01
     790:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     794:	1f 93       	push	r17
     796:	0f 93       	push	r16
     798:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <printf>
	printf("\n");
     79c:	8a e0       	ldi	r24, 0x0A	; 10
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <putchar>
}
     7a4:	0f 90       	pop	r0
     7a6:	0f 90       	pop	r0
     7a8:	2a 96       	adiw	r28, 0x0a	; 10
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	cd bf       	out	0x3d, r28	; 61
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	08 95       	ret

000007be <main>:
//uint8_t pwmSin[] ={128,131,135,138,141,145,148,151,155,158,161,164,168,171,174,177,181,184,187,190,193,197,200,203,206,209,212,215,218,221,224,225,225,226,227,228,229,230,230,231,232,232,233,234,234,235,235,236,236,236,237,237,237,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,237,237,237,236,236,236,235,235,234,234,233,232,232,231,230,230,229,228,227,226,225,225,224,225,225,226,227,228,229,230,230,231,232,232,233,234,234,235,235,236,236,236,237,237,237,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,237,237,237,236,236,236,235,235,234,234,233,232,232,231,230,230,229,228,227,226,225,225,224,221,218,215,212,209,206,203,200,197,193,190,187,184,181,177,174,171,168,164,161,158,155,151,148,145,141,138,135,131,128,125,121,118,115,111,108,105,101,98,95,92,88,85,82,79,75,72,69,66,63,59,56,53,50,47,44,41,38,35,32,31,31,30,29,28,27,26,26,25,24,24,23,22,22,21,21,20,20,20,19,19,19,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,20,20,20,21,21,22,22,23,24,24,25,26,26,27,28,29,30,31,31,32,31,31,30,29,28,27,26,26,25,24,24,23,22,22,21,21,20,20,20,19,19,19,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,20,20,20,21,21,22,22,23,24,24,25,26,26,27,28,29,30,31,31,32,35,38,41,44,47,50,53,56,59,63,66,69,72,75,79,82,85,88,92,95,98,101,105,108,111,115,118,121,125,128};
//uint8_t pwmSin[] = {128, 132, 136, 140, 143, 147, 151, 155, 159, 162, 166, 170, 174, 178, 181, 185, 189, 192, 196, 200, 203, 207, 211, 214, 218, 221, 225, 228, 232, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 248, 249, 250, 250, 251, 252, 252, 253, 253, 253, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 253, 253, 253, 252, 252, 251, 250, 250, 249, 248, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 248, 249, 250, 250, 251, 252, 252, 253, 253, 253, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 253, 253, 253, 252, 252, 251, 250, 250, 249, 248, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 235, 232, 228, 225, 221, 218, 214, 211, 207, 203, 200, 196, 192, 189, 185, 181, 178, 174, 170, 166, 162, 159, 155, 151, 147, 143, 140, 136, 132, 128, 124, 120, 116, 113, 109, 105, 101, 97, 94, 90, 86, 82, 78, 75, 71, 67, 64, 60, 56, 53, 49, 45, 42, 38, 35, 31, 28, 24, 21, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 8, 7, 6, 6, 5, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 8, 7, 6, 6, 5, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 24, 28, 31, 35, 38, 42, 45, 49, 53, 56, 60, 64, 67, 71, 75, 78, 82, 86, 90, 94, 97, 101, 105, 109, 113, 116, 120, 124};

/*-----------------------------------start of main----------------------------------*/
int main(void)
{				
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
     7c6:	e2 97       	sbiw	r28, 0x32	; 50
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	cd bf       	out	0x3d, r28	; 61
		
	cli();
	init_gpio();
		#ifdef GYRO
			i2c_init();
     7d2:	f8 94       	cli
		#endif
	USART_Init(MY_UBRR);
     7d4:	d5 dc       	rcall	.-1622   	; 0x180 <init_gpio>
     7d6:	ad d4       	rcall	.+2394   	; 0x1132 <i2c_init>
     7d8:	80 e1       	ldi	r24, 0x10	; 16
	uart_str = fdevopen(uart_putchar, NULL);	
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	5b d5       	rcall	.+2742   	; 0x1294 <USART_Init>
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	83 e6       	ldi	r24, 0x63	; 99
     7e4:	92 e0       	ldi	r25, 0x02	; 2
	setup_timer0();
	Enable_timer0_overflow_interrupt();//micros
     7e6:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <fdevopen>
	setup_timer4();//pwm
     7ea:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <uart_str+0x1>
	setup_timer5();
     7ee:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <uart_str>
	Enable_timer5_compare_interrupt();//motor
     7f2:	92 d4       	rcall	.+2340   	; 0x1118 <setup_timer0>
     7f4:	98 d4       	rcall	.+2352   	; 0x1126 <Enable_timer0_overflow_interrupt>
	OCR5A=4000;
     7f6:	6d d4       	rcall	.+2266   	; 0x10d2 <setup_timer4>
     7f8:	80 d4       	rcall	.+2304   	; 0x10fa <setup_timer5>
     7fa:	88 d4       	rcall	.+2320   	; 0x110c <Enable_timer5_compare_interrupt>
     7fc:	80 ea       	ldi	r24, 0xA0	; 160
     7fe:	9f e0       	ldi	r25, 0x0F	; 15
     800:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
		double acc_total_vector=0;
		double angle_pitch_acc=0;
		double angle_roll_acc=0;
		bool set_gyro_angles=false;
			#ifdef CALIBERATED_DATA
				int32_t gyroX_calib_=0;
     804:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     808:	1d 86       	std	Y+13, r1	; 0x0d
				int32_t gyroY_calib_=0;
     80a:	1e 86       	std	Y+14, r1	; 0x0e
     80c:	1f 86       	std	Y+15, r1	; 0x0f
     80e:	18 8a       	std	Y+16, r1	; 0x10
     810:	19 8a       	std	Y+17, r1	; 0x11
				int32_t gyroZ_calib_=0;
     812:	1a 8a       	std	Y+18, r1	; 0x12
     814:	1b 8a       	std	Y+19, r1	; 0x13
     816:	1c 8a       	std	Y+20, r1	; 0x14
				int32_t accelY_calib_=0;
				int32_t accelZ_calib_=0;				
				//uint16_t gyroX_angle_calib=0; 
				uint16_t gyroY_angle_calib=0; 
				//uint16_t gyroZ_angle_calib=0; 				
				mpu6050_calibrate_gyro(&gyroX_calib_,&gyroY_calib_,&gyroZ_calib_);
     818:	1d 8a       	std	Y+21, r1	; 0x15
     81a:	1e 8a       	std	Y+22, r1	; 0x16
     81c:	1f 8a       	std	Y+23, r1	; 0x17
     81e:	18 8e       	std	Y+24, r1	; 0x18
     820:	ae 01       	movw	r20, r28
     822:	4b 5e       	subi	r20, 0xEB	; 235
     824:	5f 4f       	sbci	r21, 0xFF	; 255
     826:	be 01       	movw	r22, r28
     828:	6f 5e       	subi	r22, 0xEF	; 239
				int16_t gyroX_calib=gyroX_calib_;
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	ce 01       	movw	r24, r28
				int16_t gyroY_calib=gyroY_calib_;
     82e:	0d 96       	adiw	r24, 0x0d	; 13
     830:	aa d2       	rcall	.+1364   	; 0xd86 <mpu6050_calibrate_gyro>
				int16_t gyroZ_calib=gyroZ_calib_;
     832:	2d 84       	ldd	r2, Y+13	; 0x0d
     834:	3e 84       	ldd	r3, Y+14	; 0x0e
				int16_t accelX_calib=accelX_calib_;
				int16_t accelY_calib=accelY_calib_;
				int16_t accelZ_calib=accelZ_calib_;				
				//mpu6050_calibrate_accel(&accelX_calib,&accelY_calib,&accelZ_calib);
			#endif
		mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV,7);
     836:	29 89       	ldd	r18, Y+17	; 0x11
     838:	3a 89       	ldd	r19, Y+18	; 0x12
     83a:	38 ab       	std	Y+48, r19	; 0x30
		mpu6050_writeByte(MPU6050_RA_CONFIG,0x00);
     83c:	2f a7       	std	Y+47, r18	; 0x2f
     83e:	4d 89       	ldd	r20, Y+21	; 0x15
     840:	5e 89       	ldd	r21, Y+22	; 0x16
		mpu6050_writeByte(MPU6050_RA_GYRO_CONFIG,0x08);//gyro sensitivity set to 500 o/s
     842:	5a ab       	std	Y+50, r21	; 0x32
     844:	49 ab       	std	Y+49, r20	; 0x31
     846:	67 e0       	ldi	r22, 0x07	; 7
		mpu6050_writeByte(MPU6050_RA_ACCEL_CONFIG,0x10);//accel sensitivity -/+ 8g
     848:	89 e1       	ldi	r24, 0x19	; 25
     84a:	7c d3       	rcall	.+1784   	; 0xf44 <mpu6050_writeByte>
     84c:	60 e0       	ldi	r22, 0x00	; 0
		mpu6050_writeByte(MPU6050_RA_PWR_MGMT_1,0x01);
     84e:	8a e1       	ldi	r24, 0x1A	; 26
     850:	79 d3       	rcall	.+1778   	; 0xf44 <mpu6050_writeByte>
     852:	68 e0       	ldi	r22, 0x08	; 8
     854:	8b e1       	ldi	r24, 0x1B	; 27
	#endif
	/*----------------------end mpu definition ----------------------*/
	
	/*----------------------------motor init-------------------------*/
	getSinTable(SINE_TABLE_SZ,pwmSin,sinScale);
     856:	76 d3       	rcall	.+1772   	; 0xf44 <mpu6050_writeByte>
     858:	60 e1       	ldi	r22, 0x10	; 16
     85a:	8c e1       	ldi	r24, 0x1C	; 28
     85c:	73 d3       	rcall	.+1766   	; 0xf44 <mpu6050_writeByte>
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	8b e6       	ldi	r24, 0x6B	; 107
     862:	70 d3       	rcall	.+1760   	; 0xf44 <mpu6050_writeByte>
	printf("U_step_predefine="); print16ln(&U_step);
     864:	4f e7       	ldi	r20, 0x7F	; 127
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	69 ee       	ldi	r22, 0xE9	; 233
     86a:	72 e0       	ldi	r23, 0x02	; 2
     86c:	88 e6       	ldi	r24, 0x68	; 104
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	73 dd       	rcall	.-1306   	; 0x358 <getSinTable>
     872:	80 e1       	ldi	r24, 0x10	; 16
     874:	92 e0       	ldi	r25, 0x02	; 2
	printf("  V_step_predefine="); print16ln(&V_step);
     876:	9f 93       	push	r25
     878:	8f 93       	push	r24
     87a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <printf>
     87e:	8c ec       	ldi	r24, 0xCC	; 204
     880:	92 e0       	ldi	r25, 0x02	; 2
     882:	72 df       	rcall	.-284    	; 0x768 <print16ln>
     884:	82 e2       	ldi	r24, 0x22	; 34
	printf("  W_step_predefine="); print16ln(&W_step);   
     886:	92 e0       	ldi	r25, 0x02	; 2
     888:	9f 93       	push	r25
     88a:	8f 93       	push	r24
     88c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <printf>
     890:	88 e0       	ldi	r24, 0x08	; 8
     892:	92 e0       	ldi	r25, 0x02	; 2
     894:	69 df       	rcall	.-302    	; 0x768 <print16ln>
     896:	86 e3       	ldi	r24, 0x36	; 54
     898:	92 e0       	ldi	r25, 0x02	; 2
	USART_Transmit(0xfe); 
     89a:	9f 93       	push	r25
     89c:	8f 93       	push	r24
     89e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <printf>
	sei();
     8a2:	86 e0       	ldi	r24, 0x06	; 6
     8a4:	92 e0       	ldi	r25, 0x02	; 2
     8a6:	60 df       	rcall	.-320    	; 0x768 <print16ln>
     8a8:	8e ef       	ldi	r24, 0xFE	; 254
     8aa:	ff d4       	rcall	.+2558   	; 0x12aa <USART_Transmit>
     8ac:	78 94       	sei
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		double angle_pitch=0;
		double angle_roll=0;
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
		int16_t gyro_y;
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		double angle_pitch=0;
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	1f 8e       	std	Y+31, r1	; 0x1f
	USART_Transmit(0xfe); 
	sei();
    while (1) /*---------------------------while(1)---------------------------------*/
    {
		#ifdef GYRO
    		mpu6050_getRawData(&accel_x,&accel_y,&accel_z,&gyro_x,&gyro_y,&gyro_z);//15us to do
     8bc:	18 a2       	std	Y+32, r1	; 0x20
     8be:	19 a2       	std	Y+33, r1	; 0x21
     8c0:	1a a2       	std	Y+34, r1	; 0x22
     8c2:	1b a2       	std	Y+35, r1	; 0x23
     8c4:	1c a2       	std	Y+36, r1	; 0x24
     8c6:	1d a2       	std	Y+37, r1	; 0x25
     8c8:	1e a2       	std	Y+38, r1	; 0x26
     8ca:	ce 01       	movw	r24, r28
     8cc:	05 96       	adiw	r24, 0x05	; 5
     8ce:	7c 01       	movw	r14, r24
     8d0:	8e 01       	movw	r16, r28
     8d2:	0d 5f       	subi	r16, 0xFD	; 253
     8d4:	1f 4f       	sbci	r17, 0xFF	; 255
     8d6:	9e 01       	movw	r18, r28
     8d8:	2f 5f       	subi	r18, 0xFF	; 255
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	ae 01       	movw	r20, r28
     8de:	45 5f       	subi	r20, 0xF5	; 245
		#ifdef GYRO
			#ifdef CALIBERATED_DATA
				accX;
				accY;
				accZ;
				grX;
     8e0:	5f 4f       	sbci	r21, 0xFF	; 255
     8e2:	be 01       	movw	r22, r28
     8e4:	67 5f       	subi	r22, 0xF7	; 247
     8e6:	7f 4f       	sbci	r23, 0xFF	; 255
     8e8:	02 96       	adiw	r24, 0x02	; 2
				grY;
     8ea:	88 d3       	rcall	.+1808   	; 0xffc <mpu6050_getRawData>
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	9a 81       	ldd	r25, Y+2	; 0x02
     8f0:	82 19       	sub	r24, r2
     8f2:	93 09       	sbc	r25, r3
     8f4:	9a 83       	std	Y+2, r25	; 0x02
				grZ;
     8f6:	89 83       	std	Y+1, r24	; 0x01
     8f8:	8b 81       	ldd	r24, Y+3	; 0x03
     8fa:	9c 81       	ldd	r25, Y+4	; 0x04
     8fc:	2f a5       	ldd	r18, Y+47	; 0x2f
     8fe:	38 a9       	ldd	r19, Y+48	; 0x30
     900:	82 1b       	sub	r24, r18
     902:	93 0b       	sbc	r25, r19
			printf("  ");
			printf("\n");
			/*--------end------*/			
		#else
			
			double dt = (double)((micros() - timer1));
     904:	9c 83       	std	Y+4, r25	; 0x04
     906:	8b 83       	std	Y+3, r24	; 0x03
     908:	8d 81       	ldd	r24, Y+5	; 0x05
     90a:	9e 81       	ldd	r25, Y+6	; 0x06
     90c:	49 a9       	ldd	r20, Y+49	; 0x31
     90e:	5a a9       	ldd	r21, Y+50	; 0x32
     910:	84 1b       	sub	r24, r20
     912:	95 0b       	sbc	r25, r21
     914:	9e 83       	std	Y+6, r25	; 0x06
			timer1=micros();
     916:	8d 83       	std	Y+5, r24	; 0x05
     918:	31 de       	rcall	.-926    	; 0x57c <micros>
     91a:	64 19       	sub	r22, r4
     91c:	75 09       	sbc	r23, r5
			//double hz=1000000/dt;
			double pop=1/(65.5*1000000/dt);
     91e:	86 09       	sbc	r24, r6
     920:	97 09       	sbc	r25, r7
     922:	e4 d5       	rcall	.+3016   	; 0x14ec <__floatunsisf>
     924:	6b 01       	movw	r12, r22
     926:	7c 01       	movw	r14, r24
     928:	29 de       	rcall	.-942    	; 0x57c <micros>
     92a:	2b 01       	movw	r4, r22
     92c:	3c 01       	movw	r6, r24
     92e:	a7 01       	movw	r20, r14
     930:	96 01       	movw	r18, r12
     932:	68 ed       	ldi	r22, 0xD8	; 216
     934:	7c ed       	ldi	r23, 0xDC	; 220
     936:	89 e7       	ldi	r24, 0x79	; 121
     938:	9c e4       	ldi	r25, 0x4C	; 76
     93a:	3f d5       	rcall	.+2686   	; 0x13ba <__divsf3>
			//if(loop_bool)
			//{
			//	gyroYrate-=tpel;
			//	loop_bool=false;
			//}
			if (!loop_bool)
     93c:	9b 01       	movw	r18, r22
     93e:	ac 01       	movw	r20, r24
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	80 e8       	ldi	r24, 0x80	; 128
     946:	9f e3       	ldi	r25, 0x3F	; 63
			{
				angle_pitch += gyroXrate; //Calculate the traveled pitch angle and add this to the angle_pitch variable
     948:	38 d5       	rcall	.+2672   	; 0x13ba <__divsf3>
     94a:	6b 01       	movw	r12, r22
     94c:	7c 01       	movw	r14, r24
     94e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <loop_bool>
     952:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <loop_bool+0x1>
     956:	89 2b       	or	r24, r25
     958:	59 f5       	brne	.+86     	; 0x9b0 <main+0x1f2>
     95a:	69 81       	ldd	r22, Y+1	; 0x01
     95c:	7a 81       	ldd	r23, Y+2	; 0x02
     95e:	07 2e       	mov	r0, r23
     960:	00 0c       	add	r0, r0
     962:	88 0b       	sbc	r24, r24
     964:	99 0b       	sbc	r25, r25
     966:	c4 d5       	rcall	.+2952   	; 0x14f0 <__floatsisf>
     968:	a7 01       	movw	r20, r14
     96a:	96 01       	movw	r18, r12
     96c:	c6 d6       	rcall	.+3468   	; 0x16fa <__mulsf3>
     96e:	9b 01       	movw	r18, r22
     970:	ac 01       	movw	r20, r24
				angle_roll += gyroYrate;  //Calculate the traveled roll angle and add this to the angle_roll variable			
     972:	6b a1       	ldd	r22, Y+35	; 0x23
     974:	7c a1       	ldd	r23, Y+36	; 0x24
     976:	8d a1       	ldd	r24, Y+37	; 0x25
     978:	9e a1       	ldd	r25, Y+38	; 0x26
     97a:	a0 d4       	rcall	.+2368   	; 0x12bc <__addsf3>
     97c:	6b a3       	std	Y+35, r22	; 0x23
     97e:	7c a3       	std	Y+36, r23	; 0x24
     980:	8d a3       	std	Y+37, r24	; 0x25
     982:	9e a3       	std	Y+38, r25	; 0x26
     984:	6b 81       	ldd	r22, Y+3	; 0x03
     986:	7c 81       	ldd	r23, Y+4	; 0x04
     988:	07 2e       	mov	r0, r23
     98a:	00 0c       	add	r0, r0
     98c:	88 0b       	sbc	r24, r24
     98e:	99 0b       	sbc	r25, r25
     990:	af d5       	rcall	.+2910   	; 0x14f0 <__floatsisf>
     992:	a7 01       	movw	r20, r14
     994:	96 01       	movw	r18, r12
     996:	b1 d6       	rcall	.+3426   	; 0x16fa <__mulsf3>
     998:	9b 01       	movw	r18, r22
     99a:	ac 01       	movw	r20, r24
			}
			else
			{
				loop_bool=false;
     99c:	6f 8d       	ldd	r22, Y+31	; 0x1f
     99e:	78 a1       	ldd	r23, Y+32	; 0x20
     9a0:	89 a1       	ldd	r24, Y+33	; 0x21
			}					
					//0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
			pop*=(3.142/180);	
			angle_pitch += angle_roll * sin(gyro_z * pop);               //If the IMU has yawed transfer the roll angle to the pitch angel
     9a2:	9a a1       	ldd	r25, Y+34	; 0x22
     9a4:	8b d4       	rcall	.+2326   	; 0x12bc <__addsf3>
     9a6:	6f 8f       	std	Y+31, r22	; 0x1f
     9a8:	78 a3       	std	Y+32, r23	; 0x20
     9aa:	89 a3       	std	Y+33, r24	; 0x21
     9ac:	9a a3       	std	Y+34, r25	; 0x22
     9ae:	04 c0       	rjmp	.+8      	; 0x9b8 <main+0x1fa>
     9b0:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <loop_bool+0x1>
     9b4:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <loop_bool>
     9b8:	6d 81       	ldd	r22, Y+5	; 0x05
     9ba:	7e 81       	ldd	r23, Y+6	; 0x06
     9bc:	07 2e       	mov	r0, r23
     9be:	00 0c       	add	r0, r0
     9c0:	88 0b       	sbc	r24, r24
     9c2:	99 0b       	sbc	r25, r25
     9c4:	95 d5       	rcall	.+2858   	; 0x14f0 <__floatsisf>
     9c6:	4b 01       	movw	r8, r22
     9c8:	5c 01       	movw	r10, r24
     9ca:	24 ef       	ldi	r18, 0xF4	; 244
     9cc:	3e ef       	ldi	r19, 0xFE	; 254
     9ce:	4e e8       	ldi	r20, 0x8E	; 142
     9d0:	5c e3       	ldi	r21, 0x3C	; 60
     9d2:	c7 01       	movw	r24, r14
     9d4:	b6 01       	movw	r22, r12
     9d6:	91 d6       	rcall	.+3362   	; 0x16fa <__mulsf3>
     9d8:	9b 01       	movw	r18, r22
     9da:	ac 01       	movw	r20, r24
     9dc:	c5 01       	movw	r24, r10
     9de:	b4 01       	movw	r22, r8
     9e0:	8c d6       	rcall	.+3352   	; 0x16fa <__mulsf3>
     9e2:	ee d6       	rcall	.+3548   	; 0x17c0 <sin>
     9e4:	6b 01       	movw	r12, r22
     9e6:	7c 01       	movw	r14, r24
     9e8:	9b 01       	movw	r18, r22
     9ea:	ac 01       	movw	r20, r24
     9ec:	6f 8d       	ldd	r22, Y+31	; 0x1f
     9ee:	78 a1       	ldd	r23, Y+32	; 0x20
     9f0:	89 a1       	ldd	r24, Y+33	; 0x21
     9f2:	9a a1       	ldd	r25, Y+34	; 0x22
     9f4:	82 d6       	rcall	.+3332   	; 0x16fa <__mulsf3>
			angle_roll -= angle_pitch * sin(gyro_z * pop);               //If the IMU has yawed transfer the pitch angle to the roll angel
     9f6:	9b 01       	movw	r18, r22
     9f8:	ac 01       	movw	r20, r24
     9fa:	6b a1       	ldd	r22, Y+35	; 0x23
     9fc:	7c a1       	ldd	r23, Y+36	; 0x24
     9fe:	8d a1       	ldd	r24, Y+37	; 0x25
     a00:	9e a1       	ldd	r25, Y+38	; 0x26
     a02:	5c d4       	rcall	.+2232   	; 0x12bc <__addsf3>
     a04:	6b a3       	std	Y+35, r22	; 0x23
     a06:	7c a3       	std	Y+36, r23	; 0x24
     a08:	8d a3       	std	Y+37, r24	; 0x25
     a0a:	9e a3       	std	Y+38, r25	; 0x26
     a0c:	9b 01       	movw	r18, r22
     a0e:	ac 01       	movw	r20, r24
     a10:	c7 01       	movw	r24, r14
     a12:	b6 01       	movw	r22, r12
			
			double temporar_accel_x=accel_x/100;
     a14:	72 d6       	rcall	.+3300   	; 0x16fa <__mulsf3>
     a16:	9b 01       	movw	r18, r22
     a18:	ac 01       	movw	r20, r24
     a1a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     a1c:	78 a1       	ldd	r23, Y+32	; 0x20
     a1e:	89 a1       	ldd	r24, Y+33	; 0x21
     a20:	9a a1       	ldd	r25, Y+34	; 0x22
     a22:	4b d4       	rcall	.+2198   	; 0x12ba <__subsf3>
     a24:	6f 8f       	std	Y+31, r22	; 0x1f
     a26:	78 a3       	std	Y+32, r23	; 0x20
     a28:	89 a3       	std	Y+33, r24	; 0x21
     a2a:	9a a3       	std	Y+34, r25	; 0x22
     a2c:	0f 81       	ldd	r16, Y+7	; 0x07
     a2e:	18 85       	ldd	r17, Y+8	; 0x08
			double temporar_accel_y=accel_y/100;
     a30:	c8 01       	movw	r24, r16
     a32:	64 e6       	ldi	r22, 0x64	; 100
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	5a d7       	rcall	.+3764   	; 0x18ec <__divmodhi4>
     a38:	07 2e       	mov	r0, r23
     a3a:	00 0c       	add	r0, r0
     a3c:	88 0b       	sbc	r24, r24
     a3e:	99 0b       	sbc	r25, r25
     a40:	57 d5       	rcall	.+2734   	; 0x14f0 <__floatsisf>
     a42:	4b 01       	movw	r8, r22
     a44:	5c 01       	movw	r10, r24
     a46:	89 85       	ldd	r24, Y+9	; 0x09
     a48:	9a 85       	ldd	r25, Y+10	; 0x0a
     a4a:	64 e6       	ldi	r22, 0x64	; 100
			double temporar_accel_z=accel_z/100;
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	4e d7       	rcall	.+3740   	; 0x18ec <__divmodhi4>
     a50:	07 2e       	mov	r0, r23
     a52:	00 0c       	add	r0, r0
     a54:	88 0b       	sbc	r24, r24
     a56:	99 0b       	sbc	r25, r25
     a58:	4b d5       	rcall	.+2710   	; 0x14f0 <__floatsisf>
     a5a:	6f a3       	std	Y+39, r22	; 0x27
     a5c:	78 a7       	std	Y+40, r23	; 0x28
     a5e:	89 a7       	std	Y+41, r24	; 0x29
     a60:	9a a7       	std	Y+42, r25	; 0x2a
     a62:	8b 85       	ldd	r24, Y+11	; 0x0b
			
			acc_total_vector = sqrt((temporar_accel_x*temporar_accel_x)+(temporar_accel_y*temporar_accel_y)+(temporar_accel_z*temporar_accel_z));  //Calculate the total accelerometer vector
     a64:	9c 85       	ldd	r25, Y+12	; 0x0c
     a66:	64 e6       	ldi	r22, 0x64	; 100
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	40 d7       	rcall	.+3712   	; 0x18ec <__divmodhi4>
     a6c:	07 2e       	mov	r0, r23
     a6e:	00 0c       	add	r0, r0
     a70:	88 0b       	sbc	r24, r24
     a72:	99 0b       	sbc	r25, r25
     a74:	3d d5       	rcall	.+2682   	; 0x14f0 <__floatsisf>
     a76:	6b 01       	movw	r12, r22
     a78:	7c 01       	movw	r14, r24
     a7a:	a5 01       	movw	r20, r10
     a7c:	94 01       	movw	r18, r8
     a7e:	c5 01       	movw	r24, r10
     a80:	b4 01       	movw	r22, r8
     a82:	3b d6       	rcall	.+3190   	; 0x16fa <__mulsf3>
     a84:	6b a7       	std	Y+43, r22	; 0x2b
     a86:	7c a7       	std	Y+44, r23	; 0x2c
     a88:	8d a7       	std	Y+45, r24	; 0x2d
     a8a:	9e a7       	std	Y+46, r25	; 0x2e
     a8c:	2f a1       	ldd	r18, Y+39	; 0x27
     a8e:	38 a5       	ldd	r19, Y+40	; 0x28
     a90:	49 a5       	ldd	r20, Y+41	; 0x29
     a92:	5a a5       	ldd	r21, Y+42	; 0x2a
     a94:	ca 01       	movw	r24, r20
     a96:	b9 01       	movw	r22, r18
     a98:	30 d6       	rcall	.+3168   	; 0x16fa <__mulsf3>
     a9a:	9b 01       	movw	r18, r22
     a9c:	ac 01       	movw	r20, r24
     a9e:	6b a5       	ldd	r22, Y+43	; 0x2b
     aa0:	7c a5       	ldd	r23, Y+44	; 0x2c
     aa2:	8d a5       	ldd	r24, Y+45	; 0x2d
     aa4:	9e a5       	ldd	r25, Y+46	; 0x2e
     aa6:	0a d4       	rcall	.+2068   	; 0x12bc <__addsf3>
     aa8:	6b a7       	std	Y+43, r22	; 0x2b
     aaa:	7c a7       	std	Y+44, r23	; 0x2c
     aac:	8d a7       	std	Y+45, r24	; 0x2d
     aae:	9e a7       	std	Y+46, r25	; 0x2e
     ab0:	a5 01       	movw	r20, r10
     ab2:	94 01       	movw	r18, r8
     ab4:	c5 01       	movw	r24, r10
     ab6:	b4 01       	movw	r22, r8
     ab8:	20 d6       	rcall	.+3136   	; 0x16fa <__mulsf3>
     aba:	4b 01       	movw	r8, r22
     abc:	5c 01       	movw	r10, r24
     abe:	2f a1       	ldd	r18, Y+39	; 0x27
     ac0:	38 a5       	ldd	r19, Y+40	; 0x28
     ac2:	49 a5       	ldd	r20, Y+41	; 0x29
     ac4:	5a a5       	ldd	r21, Y+42	; 0x2a
     ac6:	ca 01       	movw	r24, r20
     ac8:	b9 01       	movw	r22, r18
     aca:	17 d6       	rcall	.+3118   	; 0x16fa <__mulsf3>
     acc:	9b 01       	movw	r18, r22
     ace:	ac 01       	movw	r20, r24
     ad0:	c5 01       	movw	r24, r10
					//57.296 = 1 / (3.142 / 180) The Arduino asin function is in radians
			acc_total_vector*=100;
		    angle_pitch_acc = asin((double)accel_y/acc_total_vector)* 57.296;       //Calculate the pitch angle
			angle_roll_acc = asin((double)accel_x/acc_total_vector)* -57.296;       //Calculate the roll angle
     ad2:	b4 01       	movw	r22, r8
     ad4:	f3 d3       	rcall	.+2022   	; 0x12bc <__addsf3>
     ad6:	4b 01       	movw	r8, r22
     ad8:	5c 01       	movw	r10, r24
     ada:	a7 01       	movw	r20, r14
     adc:	96 01       	movw	r18, r12
     ade:	c7 01       	movw	r24, r14
     ae0:	b6 01       	movw	r22, r12
     ae2:	0b d6       	rcall	.+3094   	; 0x16fa <__mulsf3>
     ae4:	9b 01       	movw	r18, r22
     ae6:	ac 01       	movw	r20, r24
     ae8:	c5 01       	movw	r24, r10
     aea:	b4 01       	movw	r22, r8
     aec:	e7 d3       	rcall	.+1998   	; 0x12bc <__addsf3>
     aee:	72 d6       	rcall	.+3300   	; 0x17d4 <sqrt>
     af0:	6b 01       	movw	r12, r22
     af2:	7c 01       	movw	r14, r24
     af4:	b8 01       	movw	r22, r16
     af6:	11 0f       	add	r17, r17
     af8:	88 0b       	sbc	r24, r24
     afa:	99 0b       	sbc	r25, r25
     afc:	f9 d4       	rcall	.+2546   	; 0x14f0 <__floatsisf>
     afe:	4b 01       	movw	r8, r22
					
			uint16_t reg=angle_pitch;
     b00:	5c 01       	movw	r10, r24
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	48 ec       	ldi	r20, 0xC8	; 200
     b08:	52 e4       	ldi	r21, 0x42	; 66
     b0a:	c7 01       	movw	r24, r14
     b0c:	b6 01       	movw	r22, r12
			printf(" ");
     b0e:	f5 d5       	rcall	.+3050   	; 0x16fa <__mulsf3>
     b10:	9b 01       	movw	r18, r22
     b12:	ac 01       	movw	r20, r24
			printf("gyroX_angle= ");
     b14:	c5 01       	movw	r24, r10
     b16:	b4 01       	movw	r22, r8
     b18:	50 d4       	rcall	.+2208   	; 0x13ba <__divsf3>
			print16(&reg);
     b1a:	34 d4       	rcall	.+2152   	; 0x1384 <asin>
     b1c:	6b 01       	movw	r12, r22
     b1e:	7c 01       	movw	r14, r24
			reg=angle_roll;
     b20:	6b a1       	ldd	r22, Y+35	; 0x23
     b22:	7c a1       	ldd	r23, Y+36	; 0x24
     b24:	8d a1       	ldd	r24, Y+37	; 0x25
     b26:	9e a1       	ldd	r25, Y+38	; 0x26
     b28:	b5 d4       	rcall	.+2410   	; 0x1494 <__fixunssfsi>
     b2a:	7e 8f       	std	Y+30, r23	; 0x1e
     b2c:	6d 8f       	std	Y+29, r22	; 0x1d
			printf(" ");
     b2e:	80 e2       	ldi	r24, 0x20	; 32
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	c1 d7       	rcall	.+3970   	; 0x1ab6 <putchar>
			printf("gyroY_angle= ");
     b34:	8a e4       	ldi	r24, 0x4A	; 74
     b36:	92 e0       	ldi	r25, 0x02	; 2
     b38:	9f 93       	push	r25
     b3a:	8f 93       	push	r24
     b3c:	a9 d7       	rcall	.+3922   	; 0x1a90 <printf>
     b3e:	ce 01       	movw	r24, r28
			print16(&reg);
     b40:	4d 96       	adiw	r24, 0x1d	; 29
     b42:	eb dd       	rcall	.-1066   	; 0x71a <print16>
     b44:	6f 8d       	ldd	r22, Y+31	; 0x1f
     b46:	78 a1       	ldd	r23, Y+32	; 0x20
			
			double xff=angle_roll_acc;
			double final_angleY=(angle_roll*0.996)+(xff*0.004);
     b48:	89 a1       	ldd	r24, Y+33	; 0x21
     b4a:	9a a1       	ldd	r25, Y+34	; 0x22
     b4c:	a3 d4       	rcall	.+2374   	; 0x1494 <__fixunssfsi>
     b4e:	7e 8f       	std	Y+30, r23	; 0x1e
     b50:	6d 8f       	std	Y+29, r22	; 0x1d
     b52:	80 e2       	ldi	r24, 0x20	; 32
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	af d7       	rcall	.+3934   	; 0x1ab6 <putchar>
     b58:	48 e5       	ldi	r20, 0x58	; 88
     b5a:	52 e0       	ldi	r21, 0x02	; 2
     b5c:	5f 93       	push	r21
     b5e:	4f 93       	push	r20
     b60:	97 d7       	rcall	.+3886   	; 0x1a90 <printf>
     b62:	ce 01       	movw	r24, r28
     b64:	4d 96       	adiw	r24, 0x1d	; 29
     b66:	d9 dd       	rcall	.-1102   	; 0x71a <print16>
     b68:	2b e1       	ldi	r18, 0x1B	; 27
     b6a:	3f e2       	ldi	r19, 0x2F	; 47
     b6c:	45 e6       	ldi	r20, 0x65	; 101
     b6e:	52 ec       	ldi	r21, 0xC2	; 194
     b70:	c7 01       	movw	r24, r14
     b72:	b6 01       	movw	r22, r12
     b74:	c2 d5       	rcall	.+2948   	; 0x16fa <__mulsf3>
     b76:	2f e6       	ldi	r18, 0x6F	; 111
     b78:	32 e1       	ldi	r19, 0x12	; 18
     b7a:	43 e8       	ldi	r20, 0x83	; 131
     b7c:	5b e3       	ldi	r21, 0x3B	; 59
     b7e:	bd d5       	rcall	.+2938   	; 0x16fa <__mulsf3>
     b80:	6b 01       	movw	r12, r22
     b82:	7c 01       	movw	r14, r24
     b84:	2b ed       	ldi	r18, 0xDB	; 219
     b86:	39 ef       	ldi	r19, 0xF9	; 249
     b88:	4e e7       	ldi	r20, 0x7E	; 126
			reg=final_angleY;
     b8a:	5f e3       	ldi	r21, 0x3F	; 63
     b8c:	6f 8d       	ldd	r22, Y+31	; 0x1f
     b8e:	78 a1       	ldd	r23, Y+32	; 0x20
			printf(" ");	
     b90:	89 a1       	ldd	r24, Y+33	; 0x21
     b92:	9a a1       	ldd	r25, Y+34	; 0x22
     b94:	b2 d5       	rcall	.+2916   	; 0x16fa <__mulsf3>
			printf("final_angleY= ");
     b96:	9b 01       	movw	r18, r22
     b98:	ac 01       	movw	r20, r24
     b9a:	c7 01       	movw	r24, r14
     b9c:	b6 01       	movw	r22, r12
     b9e:	8e d3       	rcall	.+1820   	; 0x12bc <__addsf3>
     ba0:	6b 01       	movw	r12, r22
			print16(&reg);
     ba2:	7c 01       	movw	r14, r24
     ba4:	77 d4       	rcall	.+2286   	; 0x1494 <__fixunssfsi>
     ba6:	7e 8f       	std	Y+30, r23	; 0x1e
						
			#ifdef DRV8313
				uint16_t reg_print=final_angleY;
				int absoulute_y=abs(final_angleY);
     ba8:	6d 8f       	std	Y+29, r22	; 0x1d
     baa:	80 e2       	ldi	r24, 0x20	; 32
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	83 d7       	rcall	.+3846   	; 0x1ab6 <putchar>
     bb0:	26 e6       	ldi	r18, 0x66	; 102
     bb2:	32 e0       	ldi	r19, 0x02	; 2
     bb4:	3f 93       	push	r19
     bb6:	2f 93       	push	r18
     bb8:	6b d7       	rcall	.+3798   	; 0x1a90 <printf>
     bba:	ce 01       	movw	r24, r28
     bbc:	4d 96       	adiw	r24, 0x1d	; 29
				uint16_t learing_rate=5;				
				uint16_t local_motor_delay=(32735-(absoulute_y*learing_rate));
     bbe:	ad dd       	rcall	.-1190   	; 0x71a <print16>
     bc0:	c7 01       	movw	r24, r14
     bc2:	b6 01       	movw	r22, r12
     bc4:	62 d4       	rcall	.+2244   	; 0x148a <__fixsfsi>
     bc6:	ab 01       	movw	r20, r22
     bc8:	77 23       	and	r23, r23
     bca:	24 f4       	brge	.+8      	; 0xbd4 <main+0x416>
     bcc:	44 27       	eor	r20, r20
     bce:	55 27       	eor	r21, r21
     bd0:	46 1b       	sub	r20, r22
     bd2:	57 0b       	sbc	r21, r23
     bd4:	8a 01       	movw	r16, r20
				if (local_motor_delay>2000)
     bd6:	9a 01       	movw	r18, r20
     bd8:	22 0f       	add	r18, r18
     bda:	33 1f       	adc	r19, r19
     bdc:	22 0f       	add	r18, r18
     bde:	33 1f       	adc	r19, r19
     be0:	c9 01       	movw	r24, r18
     be2:	84 0f       	add	r24, r20
     be4:	95 1f       	adc	r25, r21
				{
					pwm_delay=local_motor_delay;
     be6:	2f ed       	ldi	r18, 0xDF	; 223
     be8:	3f e7       	ldi	r19, 0x7F	; 127
     bea:	a9 01       	movw	r20, r18
				}
				uint16_t reg_ = local_motor_delay;
     bec:	48 1b       	sub	r20, r24
     bee:	59 0b       	sbc	r21, r25
				printf("  ");
     bf0:	ca 01       	movw	r24, r20
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
				printf("ocr= ");
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	81 3d       	cpi	r24, 0xD1	; 209
     c00:	57 e0       	ldi	r21, 0x07	; 7
     c02:	95 07       	cpc	r25, r21
				print16(&reg_);
     c04:	20 f0       	brcs	.+8      	; 0xc0e <main+0x450>
     c06:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <pwm_delay+0x1>
     c0a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <pwm_delay>
				if (final_angleY>=-0.8 && final_angleY<=0.8  || final_angleY >90)
     c0e:	9c 8f       	std	Y+28, r25	; 0x1c
     c10:	8b 8f       	std	Y+27, r24	; 0x1b
     c12:	85 e7       	ldi	r24, 0x75	; 117
     c14:	92 e0       	ldi	r25, 0x02	; 2
     c16:	9f 93       	push	r25
     c18:	8f 93       	push	r24
     c1a:	3a d7       	rcall	.+3700   	; 0x1a90 <printf>
     c1c:	88 e7       	ldi	r24, 0x78	; 120
     c1e:	92 e0       	ldi	r25, 0x02	; 2
     c20:	9f 93       	push	r25
     c22:	8f 93       	push	r24
     c24:	35 d7       	rcall	.+3690   	; 0x1a90 <printf>
     c26:	ce 01       	movw	r24, r28
     c28:	4b 96       	adiw	r24, 0x1b	; 27
     c2a:	77 dd       	rcall	.-1298   	; 0x71a <print16>
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	2d ec       	ldi	r18, 0xCD	; 205
     c36:	3c ec       	ldi	r19, 0xCC	; 204
     c38:	4c e4       	ldi	r20, 0x4C	; 76
     c3a:	5f eb       	ldi	r21, 0xBF	; 191
     c3c:	c7 01       	movw	r24, r14
     c3e:	b6 01       	movw	r22, r12
     c40:	58 d5       	rcall	.+2736   	; 0x16f2 <__gesf2>
     c42:	88 23       	and	r24, r24
     c44:	4c f0       	brlt	.+18     	; 0xc58 <main+0x49a>
				{
					incr=0;
     c46:	2d ec       	ldi	r18, 0xCD	; 205
     c48:	3c ec       	ldi	r19, 0xCC	; 204
     c4a:	4c e4       	ldi	r20, 0x4C	; 76
					printf("\n");	
     c4c:	5f e3       	ldi	r21, 0x3F	; 63
     c4e:	c7 01       	movw	r24, r14
     c50:	b6 01       	movw	r22, r12
     c52:	af d3       	rcall	.+1886   	; 0x13b2 <__cmpsf2>
     c54:	18 16       	cp	r1, r24
				}
				else 
					if (absoulute_y>0.8)
     c56:	4c f4       	brge	.+18     	; 0xc6a <main+0x4ac>
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	44 eb       	ldi	r20, 0xB4	; 180
     c5e:	52 e4       	ldi	r21, 0x42	; 66
     c60:	c7 01       	movw	r24, r14
     c62:	b6 01       	movw	r22, r12
     c64:	46 d5       	rcall	.+2700   	; 0x16f2 <__gesf2>
     c66:	18 16       	cp	r1, r24
     c68:	44 f4       	brge	.+16     	; 0xc7a <main+0x4bc>
     c6a:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <incr+0x1>
     c6e:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <incr>
					{
						cli();
     c72:	8a e0       	ldi	r24, 0x0A	; 10
						incr=1;
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	1f d7       	rcall	.+3646   	; 0x1ab6 <putchar>
     c78:	28 ce       	rjmp	.-944    	; 0x8ca <main+0x10c>
     c7a:	b8 01       	movw	r22, r16
     c7c:	11 0f       	add	r17, r17
     c7e:	88 0b       	sbc	r24, r24
						printf(" ");
     c80:	99 0b       	sbc	r25, r25
     c82:	36 d4       	rcall	.+2156   	; 0x14f0 <__floatsisf>
     c84:	2d ec       	ldi	r18, 0xCD	; 205
     c86:	3c ec       	ldi	r19, 0xCC	; 204
						uint16_t val=pwmSin[U_step];
     c88:	4c e4       	ldi	r20, 0x4C	; 76
     c8a:	5f e3       	ldi	r21, 0x3F	; 63
     c8c:	32 d5       	rcall	.+2660   	; 0x16f2 <__gesf2>
     c8e:	18 16       	cp	r1, r24
     c90:	e4 f4       	brge	.+56     	; 0xcca <main+0x50c>
     c92:	f8 94       	cli
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <incr+0x1>
						print16(&val);
     c9c:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <incr>
     ca0:	80 e2       	ldi	r24, 0x20	; 32
     ca2:	90 e0       	ldi	r25, 0x00	; 0
						printf(" yes\n");
     ca4:	08 d7       	rcall	.+3600   	; 0x1ab6 <putchar>
     ca6:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <__data_end>
     caa:	f0 91 cd 02 	lds	r31, 0x02CD	; 0x8002cd <__data_end+0x1>
						
						sei();
     cae:	e7 51       	subi	r30, 0x17	; 23
					}
					else
					{	cli();
     cb0:	fd 4f       	sbci	r31, 0xFD	; 253
						incr=-1;
     cb2:	80 81       	ld	r24, Z
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	9a 8f       	std	Y+26, r25	; 0x1a
     cb8:	89 8f       	std	Y+25, r24	; 0x19
     cba:	ce 01       	movw	r24, r28
     cbc:	49 96       	adiw	r24, 0x19	; 25
						printf(" ");
     cbe:	2d dd       	rcall	.-1446   	; 0x71a <print16>
     cc0:	8e e7       	ldi	r24, 0x7E	; 126
     cc2:	92 e0       	ldi	r25, 0x02	; 2
     cc4:	fd d6       	rcall	.+3578   	; 0x1ac0 <puts>
						uint16_t val=pwmSin[U_step];
     cc6:	78 94       	sei
     cc8:	00 ce       	rjmp	.-1024   	; 0x8ca <main+0x10c>
     cca:	f8 94       	cli
     ccc:	8f ef       	ldi	r24, 0xFF	; 255
     cce:	9f ef       	ldi	r25, 0xFF	; 255
     cd0:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <incr+0x1>
     cd4:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <incr>
     cd8:	80 e2       	ldi	r24, 0x20	; 32
						print16(&val);
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	ec d6       	rcall	.+3544   	; 0x1ab6 <putchar>
     cde:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <__data_end>
						printf(" no\n");
     ce2:	f0 91 cd 02 	lds	r31, 0x02CD	; 0x8002cd <__data_end+0x1>
     ce6:	e7 51       	subi	r30, 0x17	; 23
     ce8:	fd 4f       	sbci	r31, 0xFD	; 253
						sei();
     cea:	80 81       	ld	r24, Z
			//	 set_gyro_angles = true;                                            //Set the IMU started flag
			//}
			
			#endif //PRINT_RAW_DATA			
		#endif //GYRO
	}
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	9a 8f       	std	Y+26, r25	; 0x1a
     cf0:	89 8f       	std	Y+25, r24	; 0x19
     cf2:	ce 01       	movw	r24, r28
     cf4:	49 96       	adiw	r24, 0x19	; 25
     cf6:	11 dd       	rcall	.-1502   	; 0x71a <print16>
     cf8:	83 e8       	ldi	r24, 0x83	; 131
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	e1 d6       	rcall	.+3522   	; 0x1ac0 <puts>
     cfe:	78 94       	sei
     d00:	e4 cd       	rjmp	.-1080   	; 0x8ca <main+0x10c>

00000d02 <mpu6050_readByte>:
	printf("  ");
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/
}
     d02:	cf 93       	push	r28
     d04:	c8 2f       	mov	r28, r24
     d06:	80 ed       	ldi	r24, 0xD0	; 208
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	19 d2       	rcall	.+1074   	; 0x113e <i2c_start>
     d0c:	8c 2f       	mov	r24, r28
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	6c d2       	rcall	.+1240   	; 0x11ea <i2c_write>
     d12:	5b d2       	rcall	.+1206   	; 0x11ca <i2c_stop>
     d14:	81 ed       	ldi	r24, 0xD1	; 209
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	12 d2       	rcall	.+1060   	; 0x113e <i2c_start>
     d1a:	a2 d2       	rcall	.+1348   	; 0x1260 <i2c_readNak>
     d1c:	c8 2f       	mov	r28, r24
     d1e:	55 d2       	rcall	.+1194   	; 0x11ca <i2c_stop>
     d20:	8c 2f       	mov	r24, r28
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <mpu6050_read_gyroX>:
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	83 e4       	ldi	r24, 0x43	; 67
     d2c:	ea df       	rcall	.-44     	; 0xd02 <mpu6050_readByte>
     d2e:	c8 2f       	mov	r28, r24
     d30:	d0 e0       	ldi	r29, 0x00	; 0
     d32:	dc 2f       	mov	r29, r28
     d34:	cc 27       	eor	r28, r28
     d36:	84 e4       	ldi	r24, 0x44	; 68
     d38:	e4 df       	rcall	.-56     	; 0xd02 <mpu6050_readByte>
     d3a:	9e 01       	movw	r18, r28
     d3c:	28 2b       	or	r18, r24
     d3e:	c9 01       	movw	r24, r18
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <mpu6050_read_gyroY>:
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	85 e4       	ldi	r24, 0x45	; 69
     d4c:	da df       	rcall	.-76     	; 0xd02 <mpu6050_readByte>
     d4e:	c8 2f       	mov	r28, r24
     d50:	d0 e0       	ldi	r29, 0x00	; 0
     d52:	dc 2f       	mov	r29, r28
     d54:	cc 27       	eor	r28, r28
     d56:	86 e4       	ldi	r24, 0x46	; 70
     d58:	d4 df       	rcall	.-88     	; 0xd02 <mpu6050_readByte>
     d5a:	9e 01       	movw	r18, r28
     d5c:	28 2b       	or	r18, r24
     d5e:	c9 01       	movw	r24, r18
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	08 95       	ret

00000d66 <mpu6050_read_gyroZ>:
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	87 e4       	ldi	r24, 0x47	; 71
     d6c:	ca df       	rcall	.-108    	; 0xd02 <mpu6050_readByte>
     d6e:	c8 2f       	mov	r28, r24
     d70:	d0 e0       	ldi	r29, 0x00	; 0
     d72:	dc 2f       	mov	r29, r28
     d74:	cc 27       	eor	r28, r28
     d76:	88 e4       	ldi	r24, 0x48	; 72
     d78:	c4 df       	rcall	.-120    	; 0xd02 <mpu6050_readByte>
     d7a:	9e 01       	movw	r18, r28
     d7c:	28 2b       	or	r18, r24
     d7e:	c9 01       	movw	r24, r18
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	08 95       	ret

00000d86 <mpu6050_calibrate_gyro>:
     d86:	cf 92       	push	r12
     d88:	df 92       	push	r13
     d8a:	ef 92       	push	r14
     d8c:	ff 92       	push	r15
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	6c 01       	movw	r12, r24
     d98:	7b 01       	movw	r14, r22
     d9a:	8a 01       	movw	r16, r20
     d9c:	87 e8       	ldi	r24, 0x87	; 135
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	8f d6       	rcall	.+3358   	; 0x1ac0 <puts>
     da2:	c8 ec       	ldi	r28, 0xC8	; 200
     da4:	d0 e0       	ldi	r29, 0x00	; 0
     da6:	bf df       	rcall	.-130    	; 0xd26 <mpu6050_read_gyroX>
     da8:	f6 01       	movw	r30, r12
     daa:	40 81       	ld	r20, Z
     dac:	51 81       	ldd	r21, Z+1	; 0x01
     dae:	62 81       	ldd	r22, Z+2	; 0x02
     db0:	73 81       	ldd	r23, Z+3	; 0x03
     db2:	48 0f       	add	r20, r24
     db4:	59 1f       	adc	r21, r25
     db6:	61 1d       	adc	r22, r1
     db8:	71 1d       	adc	r23, r1
     dba:	40 83       	st	Z, r20
     dbc:	51 83       	std	Z+1, r21	; 0x01
     dbe:	62 83       	std	Z+2, r22	; 0x02
     dc0:	73 83       	std	Z+3, r23	; 0x03
     dc2:	c1 df       	rcall	.-126    	; 0xd46 <mpu6050_read_gyroY>
     dc4:	f7 01       	movw	r30, r14
     dc6:	40 81       	ld	r20, Z
     dc8:	51 81       	ldd	r21, Z+1	; 0x01
     dca:	62 81       	ldd	r22, Z+2	; 0x02
     dcc:	73 81       	ldd	r23, Z+3	; 0x03
     dce:	48 0f       	add	r20, r24
     dd0:	59 1f       	adc	r21, r25
     dd2:	61 1d       	adc	r22, r1
     dd4:	71 1d       	adc	r23, r1
     dd6:	40 83       	st	Z, r20
     dd8:	51 83       	std	Z+1, r21	; 0x01
     dda:	62 83       	std	Z+2, r22	; 0x02
     ddc:	73 83       	std	Z+3, r23	; 0x03
     dde:	c3 df       	rcall	.-122    	; 0xd66 <mpu6050_read_gyroZ>
     de0:	f8 01       	movw	r30, r16
     de2:	40 81       	ld	r20, Z
     de4:	51 81       	ldd	r21, Z+1	; 0x01
     de6:	62 81       	ldd	r22, Z+2	; 0x02
     de8:	73 81       	ldd	r23, Z+3	; 0x03
     dea:	48 0f       	add	r20, r24
     dec:	59 1f       	adc	r21, r25
     dee:	61 1d       	adc	r22, r1
     df0:	71 1d       	adc	r23, r1
     df2:	40 83       	st	Z, r20
     df4:	51 83       	std	Z+1, r21	; 0x01
     df6:	62 83       	std	Z+2, r22	; 0x02
     df8:	73 83       	std	Z+3, r23	; 0x03
     dfa:	8f e3       	ldi	r24, 0x3F	; 63
     dfc:	9f e1       	ldi	r25, 0x1F	; 31
     dfe:	01 97       	sbiw	r24, 0x01	; 1
     e00:	f1 f7       	brne	.-4      	; 0xdfe <mpu6050_calibrate_gyro+0x78>
     e02:	00 c0       	rjmp	.+0      	; 0xe04 <mpu6050_calibrate_gyro+0x7e>
     e04:	00 00       	nop
     e06:	21 97       	sbiw	r28, 0x01	; 1
     e08:	71 f6       	brne	.-100    	; 0xda6 <mpu6050_calibrate_gyro+0x20>
     e0a:	f6 01       	movw	r30, r12
     e0c:	60 81       	ld	r22, Z
     e0e:	71 81       	ldd	r23, Z+1	; 0x01
     e10:	82 81       	ldd	r24, Z+2	; 0x02
     e12:	93 81       	ldd	r25, Z+3	; 0x03
     e14:	99 23       	and	r25, r25
     e16:	ac f4       	brge	.+42     	; 0xe42 <mpu6050_calibrate_gyro+0xbc>
     e18:	9b 01       	movw	r18, r22
     e1a:	77 23       	and	r23, r23
     e1c:	24 f4       	brge	.+8      	; 0xe26 <mpu6050_calibrate_gyro+0xa0>
     e1e:	22 27       	eor	r18, r18
     e20:	33 27       	eor	r19, r19
     e22:	26 1b       	sub	r18, r22
     e24:	37 0b       	sbc	r19, r23
     e26:	c9 01       	movw	r24, r18
     e28:	68 ec       	ldi	r22, 0xC8	; 200
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	5f d5       	rcall	.+2750   	; 0x18ec <__divmodhi4>
     e2e:	cb 01       	movw	r24, r22
     e30:	77 0f       	add	r23, r23
     e32:	aa 0b       	sbc	r26, r26
     e34:	bb 0b       	sbc	r27, r27
     e36:	f6 01       	movw	r30, r12
     e38:	80 83       	st	Z, r24
     e3a:	91 83       	std	Z+1, r25	; 0x01
     e3c:	a2 83       	std	Z+2, r26	; 0x02
     e3e:	b3 83       	std	Z+3, r27	; 0x03
     e40:	0a c0       	rjmp	.+20     	; 0xe56 <mpu6050_calibrate_gyro+0xd0>
     e42:	28 ec       	ldi	r18, 0xC8	; 200
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 e0       	ldi	r20, 0x00	; 0
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	63 d5       	rcall	.+2758   	; 0x1912 <__divmodsi4>
     e4c:	f6 01       	movw	r30, r12
     e4e:	20 83       	st	Z, r18
     e50:	31 83       	std	Z+1, r19	; 0x01
     e52:	42 83       	std	Z+2, r20	; 0x02
     e54:	53 83       	std	Z+3, r21	; 0x03
     e56:	f7 01       	movw	r30, r14
     e58:	60 81       	ld	r22, Z
     e5a:	71 81       	ldd	r23, Z+1	; 0x01
     e5c:	82 81       	ldd	r24, Z+2	; 0x02
     e5e:	93 81       	ldd	r25, Z+3	; 0x03
     e60:	99 23       	and	r25, r25
     e62:	ac f4       	brge	.+42     	; 0xe8e <mpu6050_calibrate_gyro+0x108>
     e64:	9b 01       	movw	r18, r22
     e66:	77 23       	and	r23, r23
     e68:	24 f4       	brge	.+8      	; 0xe72 <mpu6050_calibrate_gyro+0xec>
     e6a:	22 27       	eor	r18, r18
     e6c:	33 27       	eor	r19, r19
     e6e:	26 1b       	sub	r18, r22
     e70:	37 0b       	sbc	r19, r23
     e72:	c9 01       	movw	r24, r18
     e74:	68 ec       	ldi	r22, 0xC8	; 200
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	39 d5       	rcall	.+2674   	; 0x18ec <__divmodhi4>
     e7a:	cb 01       	movw	r24, r22
     e7c:	77 0f       	add	r23, r23
     e7e:	aa 0b       	sbc	r26, r26
     e80:	bb 0b       	sbc	r27, r27
     e82:	f7 01       	movw	r30, r14
     e84:	80 83       	st	Z, r24
     e86:	91 83       	std	Z+1, r25	; 0x01
     e88:	a2 83       	std	Z+2, r26	; 0x02
     e8a:	b3 83       	std	Z+3, r27	; 0x03
     e8c:	0a c0       	rjmp	.+20     	; 0xea2 <mpu6050_calibrate_gyro+0x11c>
     e8e:	28 ec       	ldi	r18, 0xC8	; 200
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	3d d5       	rcall	.+2682   	; 0x1912 <__divmodsi4>
     e98:	f7 01       	movw	r30, r14
     e9a:	20 83       	st	Z, r18
     e9c:	31 83       	std	Z+1, r19	; 0x01
     e9e:	42 83       	std	Z+2, r20	; 0x02
     ea0:	53 83       	std	Z+3, r21	; 0x03
     ea2:	f8 01       	movw	r30, r16
     ea4:	60 81       	ld	r22, Z
     ea6:	71 81       	ldd	r23, Z+1	; 0x01
     ea8:	82 81       	ldd	r24, Z+2	; 0x02
     eaa:	93 81       	ldd	r25, Z+3	; 0x03
     eac:	99 23       	and	r25, r25
     eae:	ac f4       	brge	.+42     	; 0xeda <mpu6050_calibrate_gyro+0x154>
     eb0:	9b 01       	movw	r18, r22
     eb2:	77 23       	and	r23, r23
     eb4:	24 f4       	brge	.+8      	; 0xebe <mpu6050_calibrate_gyro+0x138>
     eb6:	22 27       	eor	r18, r18
     eb8:	33 27       	eor	r19, r19
     eba:	26 1b       	sub	r18, r22
     ebc:	37 0b       	sbc	r19, r23
     ebe:	c9 01       	movw	r24, r18
     ec0:	68 ec       	ldi	r22, 0xC8	; 200
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	13 d5       	rcall	.+2598   	; 0x18ec <__divmodhi4>
     ec6:	cb 01       	movw	r24, r22
     ec8:	77 0f       	add	r23, r23
     eca:	aa 0b       	sbc	r26, r26
     ecc:	bb 0b       	sbc	r27, r27
     ece:	f8 01       	movw	r30, r16
     ed0:	80 83       	st	Z, r24
     ed2:	91 83       	std	Z+1, r25	; 0x01
     ed4:	a2 83       	std	Z+2, r26	; 0x02
     ed6:	b3 83       	std	Z+3, r27	; 0x03
     ed8:	0a c0       	rjmp	.+20     	; 0xeee <mpu6050_calibrate_gyro+0x168>
     eda:	28 ec       	ldi	r18, 0xC8	; 200
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	17 d5       	rcall	.+2606   	; 0x1912 <__divmodsi4>
     ee4:	f8 01       	movw	r30, r16
     ee6:	20 83       	st	Z, r18
     ee8:	31 83       	std	Z+1, r19	; 0x01
     eea:	42 83       	std	Z+2, r20	; 0x02
     eec:	53 83       	std	Z+3, r21	; 0x03
     eee:	8d e9       	ldi	r24, 0x9D	; 157
     ef0:	92 e0       	ldi	r25, 0x02	; 2
     ef2:	9f 93       	push	r25
     ef4:	8f 93       	push	r24
     ef6:	cc d5       	rcall	.+2968   	; 0x1a90 <printf>
     ef8:	c6 01       	movw	r24, r12
     efa:	0f dc       	rcall	.-2018   	; 0x71a <print16>
     efc:	c5 e7       	ldi	r28, 0x75	; 117
     efe:	d2 e0       	ldi	r29, 0x02	; 2
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	c5 d5       	rcall	.+2954   	; 0x1a90 <printf>
     f06:	c7 01       	movw	r24, r14
     f08:	08 dc       	rcall	.-2032   	; 0x71a <print16>
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	c0 d5       	rcall	.+2944   	; 0x1a90 <printf>
     f10:	c8 01       	movw	r24, r16
     f12:	2a dc       	rcall	.-1964   	; 0x768 <print16ln>
     f14:	ef ef       	ldi	r30, 0xFF	; 255
     f16:	f3 ed       	ldi	r31, 0xD3	; 211
     f18:	20 e3       	ldi	r18, 0x30	; 48
     f1a:	e1 50       	subi	r30, 0x01	; 1
     f1c:	f0 40       	sbci	r31, 0x00	; 0
     f1e:	20 40       	sbci	r18, 0x00	; 0
     f20:	e1 f7       	brne	.-8      	; 0xf1a <mpu6050_calibrate_gyro+0x194>
     f22:	00 c0       	rjmp	.+0      	; 0xf24 <mpu6050_calibrate_gyro+0x19e>
     f24:	00 00       	nop
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	ff 90       	pop	r15
     f3c:	ef 90       	pop	r14
     f3e:	df 90       	pop	r13
     f40:	cf 90       	pop	r12
     f42:	08 95       	ret

00000f44 <mpu6050_writeByte>:
	uint8_t byteToReturn=i2c_readNak();
	i2c_stop();
	return byteToReturn;
}
void mpu6050_writeByte(uint8_t wereToWrite,uint8_t byteToWrite)//writebyte
{
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	d8 2f       	mov	r29, r24
     f4a:	c6 2f       	mov	r28, r22
	i2c_start(MPU6050_WRITE);
     f4c:	80 ed       	ldi	r24, 0xD0	; 208
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	f6 d0       	rcall	.+492    	; 0x113e <i2c_start>
	i2c_write(wereToWrite);
     f52:	8d 2f       	mov	r24, r29
     f54:	90 e0       	ldi	r25, 0x00	; 0
	i2c_write(byteToWrite);
     f56:	49 d1       	rcall	.+658    	; 0x11ea <i2c_write>
     f58:	8c 2f       	mov	r24, r28
	i2c_stop();
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	46 d1       	rcall	.+652    	; 0x11ea <i2c_write>
}
     f5e:	35 d1       	rcall	.+618    	; 0x11ca <i2c_stop>
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	08 95       	ret

00000f66 <mpu6050_readBytes>:
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
     f66:	af 92       	push	r10
     f68:	bf 92       	push	r11
     f6a:	cf 92       	push	r12
     f6c:	df 92       	push	r13
     f6e:	ff 92       	push	r15
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
     f78:	66 23       	and	r22, r22
     f7a:	a1 f1       	breq	.+104    	; 0xfe4 <mpu6050_readBytes+0x7e>
     f7c:	c5 2f       	mov	r28, r21
     f7e:	d4 2f       	mov	r29, r20
     f80:	f6 2e       	mov	r15, r22
     f82:	18 2f       	mov	r17, r24
		//request register
		i2c_start(MPU6050_WRITE);
     f84:	80 ed       	ldi	r24, 0xD0	; 208
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	da d0       	rcall	.+436    	; 0x113e <i2c_start>
		i2c_write(regAddr);
     f8a:	81 2f       	mov	r24, r17
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	2d d1       	rcall	.+602    	; 0x11ea <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f90:	85 e3       	ldi	r24, 0x35	; 53
     f92:	8a 95       	dec	r24
     f94:	f1 f7       	brne	.-4      	; 0xf92 <mpu6050_readBytes+0x2c>
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
     f96:	00 00       	nop
     f98:	81 ed       	ldi	r24, 0xD1	; 209
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	d0 d0       	rcall	.+416    	; 0x113e <i2c_start>
     f9e:	0d 2f       	mov	r16, r29
     fa0:	1c 2f       	mov	r17, r28
     fa2:	cc 24       	eor	r12, r12
     fa4:	ca 94       	dec	r12
     fa6:	cf 0c       	add	r12, r15
     fa8:	d1 2c       	mov	r13, r1
     faa:	ef ef       	ldi	r30, 0xFF	; 255
     fac:	ce 1a       	sub	r12, r30
     fae:	de 0a       	sbc	r13, r30
     fb0:	c0 e0       	ldi	r28, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
     fb2:	d0 e0       	ldi	r29, 0x00	; 0
     fb4:	af 2c       	mov	r10, r15
     fb6:	b1 2c       	mov	r11, r1
     fb8:	f1 e0       	ldi	r31, 0x01	; 1
     fba:	af 1a       	sub	r10, r31
     fbc:	b1 08       	sbc	r11, r1
     fbe:	ac 16       	cp	r10, r28
			data[i] = i2c_readNak();
     fc0:	bd 06       	cpc	r11, r29
     fc2:	21 f4       	brne	.+8      	; 0xfcc <mpu6050_readBytes+0x66>
     fc4:	4d d1       	rcall	.+666    	; 0x1260 <i2c_readNak>
     fc6:	f8 01       	movw	r30, r16
			else
			data[i] = i2c_readAck();
     fc8:	80 83       	st	Z, r24
     fca:	03 c0       	rjmp	.+6      	; 0xfd2 <mpu6050_readBytes+0x6c>
     fcc:	2f d1       	rcall	.+606    	; 0x122c <i2c_readAck>
     fce:	f8 01       	movw	r30, r16
     fd0:	80 83       	st	Z, r24
     fd2:	21 96       	adiw	r28, 0x01	; 1
		i2c_start(MPU6050_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
		for(i=0; i<length; i++) {
     fd4:	0f 5f       	subi	r16, 0xFF	; 255
     fd6:	1f 4f       	sbci	r17, 0xFF	; 255
     fd8:	cc 15       	cp	r28, r12
     fda:	dd 05       	cpc	r29, r13
			if(i==length-1)
			data[i] = i2c_readNak();
			else
			data[i] = i2c_readAck();
		}
		i2c_stop();
     fdc:	81 f7       	brne	.-32     	; 0xfbe <mpu6050_readBytes+0x58>
     fde:	cf 2d       	mov	r28, r15
     fe0:	f4 d0       	rcall	.+488    	; 0x11ca <i2c_stop>
	i2c_write(byteToWrite);
	i2c_stop();
}
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
	uint8_t i = 0;
	int8_t count = 0;
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <mpu6050_readBytes+0x80>
			data[i] = i2c_readAck();
		}
		i2c_stop();
	}
	return count;
}
     fe4:	c0 e0       	ldi	r28, 0x00	; 0
     fe6:	8c 2f       	mov	r24, r28
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ff 90       	pop	r15
     ff2:	df 90       	pop	r13
     ff4:	cf 90       	pop	r12
     ff6:	bf 90       	pop	r11
     ff8:	af 90       	pop	r10
     ffa:	08 95       	ret

00000ffc <mpu6050_getRawData>:
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     ffc:	6f 92       	push	r6
     ffe:	7f 92       	push	r7
    1000:	8f 92       	push	r8
    1002:	9f 92       	push	r9
    1004:	af 92       	push	r10
    1006:	bf 92       	push	r11
    1008:	cf 92       	push	r12
    100a:	df 92       	push	r13
    100c:	ef 92       	push	r14
    100e:	ff 92       	push	r15
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	2e 97       	sbiw	r28, 0x0e	; 14
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	4c 01       	movw	r8, r24
    102a:	5b 01       	movw	r10, r22
    102c:	6a 01       	movw	r12, r20
    102e:	39 01       	movw	r6, r18
	uint8_t buffer[14];
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14,  buffer);
    1030:	ae 01       	movw	r20, r28
    1032:	4f 5f       	subi	r20, 0xFF	; 255
    1034:	5f 4f       	sbci	r21, 0xFF	; 255
    1036:	6e e0       	ldi	r22, 0x0E	; 14
    1038:	8b e3       	ldi	r24, 0x3B	; 59
    103a:	95 df       	rcall	.-214    	; 0xf66 <mpu6050_readBytes>
	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	98 2f       	mov	r25, r24
    1042:	88 27       	eor	r24, r24
    1044:	2a 81       	ldd	r18, Y+2	; 0x02
    1046:	82 2b       	or	r24, r18
    1048:	f4 01       	movw	r30, r8
    104a:	91 83       	std	Z+1, r25	; 0x01
    104c:	80 83       	st	Z, r24
	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	98 2f       	mov	r25, r24
    1054:	88 27       	eor	r24, r24
    1056:	2c 81       	ldd	r18, Y+4	; 0x04
    1058:	82 2b       	or	r24, r18
    105a:	f5 01       	movw	r30, r10
    105c:	91 83       	std	Z+1, r25	; 0x01
    105e:	80 83       	st	Z, r24
	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
    1060:	8d 81       	ldd	r24, Y+5	; 0x05
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	98 2f       	mov	r25, r24
    1066:	88 27       	eor	r24, r24
    1068:	2e 81       	ldd	r18, Y+6	; 0x06
    106a:	82 2b       	or	r24, r18
    106c:	f6 01       	movw	r30, r12
    106e:	91 83       	std	Z+1, r25	; 0x01
    1070:	80 83       	st	Z, r24
	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    1072:	89 85       	ldd	r24, Y+9	; 0x09
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	98 2f       	mov	r25, r24
    1078:	88 27       	eor	r24, r24
    107a:	2a 85       	ldd	r18, Y+10	; 0x0a
    107c:	82 2b       	or	r24, r18
    107e:	f3 01       	movw	r30, r6
    1080:	91 83       	std	Z+1, r25	; 0x01
    1082:	80 83       	st	Z, r24
	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    1084:	8b 85       	ldd	r24, Y+11	; 0x0b
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	98 2f       	mov	r25, r24
    108a:	88 27       	eor	r24, r24
    108c:	2c 85       	ldd	r18, Y+12	; 0x0c
    108e:	82 2b       	or	r24, r18
    1090:	f8 01       	movw	r30, r16
    1092:	91 83       	std	Z+1, r25	; 0x01
    1094:	80 83       	st	Z, r24
	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    1096:	8d 85       	ldd	r24, Y+13	; 0x0d
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	98 2f       	mov	r25, r24
    109c:	88 27       	eor	r24, r24
    109e:	2e 85       	ldd	r18, Y+14	; 0x0e
    10a0:	82 2b       	or	r24, r18
    10a2:	f7 01       	movw	r30, r14
    10a4:	91 83       	std	Z+1, r25	; 0x01
    10a6:	80 83       	st	Z, r24
    10a8:	2e 96       	adiw	r28, 0x0e	; 14
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	ff 90       	pop	r15
    10be:	ef 90       	pop	r14
    10c0:	df 90       	pop	r13
    10c2:	cf 90       	pop	r12
    10c4:	bf 90       	pop	r11
    10c6:	af 90       	pop	r10
    10c8:	9f 90       	pop	r9
    10ca:	8f 90       	pop	r8
    10cc:	7f 90       	pop	r7
    10ce:	6f 90       	pop	r6
    10d0:	08 95       	ret

000010d2 <setup_timer4>:

#define clockCyclesPerMicrosecond () ( F_CPU / 1000000L )

/*-----------Timter 1-----------*/
void setup_timer4(void){
    sbi (TCCR4B, CS40);//prescakaer 256
    10d2:	e1 ea       	ldi	r30, 0xA1	; 161
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	81 60       	ori	r24, 0x01	; 1
    10da:	80 83       	st	Z, r24
    sbi (TCCR4A, WGM40);//8 bit phase correct PWM
    10dc:	e0 ea       	ldi	r30, 0xA0	; 160
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	81 60       	ori	r24, 0x01	; 1
    10e4:	80 83       	st	Z, r24
	
	//sbi (TCCR4A,COM4A0);
	sbi (TCCR4A,COM4A1);
    10e6:	80 81       	ld	r24, Z
    10e8:	80 68       	ori	r24, 0x80	; 128
    10ea:	80 83       	st	Z, r24
	//sbi (TCCR4A,COM4B0);
	sbi (TCCR4A,COM4B1);
    10ec:	80 81       	ld	r24, Z
    10ee:	80 62       	ori	r24, 0x20	; 32
    10f0:	80 83       	st	Z, r24
	//sbi (TCCR4A,COM4C0);
	sbi (TCCR4A,COM4C1);
    10f2:	80 81       	ld	r24, Z
    10f4:	88 60       	ori	r24, 0x08	; 8
    10f6:	80 83       	st	Z, r24
    10f8:	08 95       	ret

000010fa <setup_timer5>:
}


/*-----------Timter 5-----------*/
void setup_timer5(void){
	sbi (TCCR5B, CS50);//only this 8
    10fa:	e1 e2       	ldi	r30, 0x21	; 33
    10fc:	f1 e0       	ldi	r31, 0x01	; 1
    10fe:	80 81       	ld	r24, Z
    1100:	81 60       	ori	r24, 0x01	; 1
    1102:	80 83       	st	Z, r24
	//sbi (TCCR5B, CS52);//only this 256
	sbi (TCCR5B, WGM52);//OCR4A compare interrupt
    1104:	80 81       	ld	r24, Z
    1106:	88 60       	ori	r24, 0x08	; 8
    1108:	80 83       	st	Z, r24
    110a:	08 95       	ret

0000110c <Enable_timer5_compare_interrupt>:
	
}
void Enable_timer5_compare_interrupt(){
	sbi (TIMSK5, OCIE5A);
    110c:	e3 e7       	ldi	r30, 0x73	; 115
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	82 60       	ori	r24, 0x02	; 2
    1114:	80 83       	st	Z, r24
    1116:	08 95       	ret

00001118 <setup_timer0>:
}
/*-----------Timter 2-----------*/
void setup_timer0(void){
	sbi(TCCR0B,CS00);
    1118:	85 b5       	in	r24, 0x25	; 37
    111a:	81 60       	ori	r24, 0x01	; 1
    111c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B,CS01);;//prescaler 64 , 250khz timer
    111e:	85 b5       	in	r24, 0x25	; 37
    1120:	82 60       	ori	r24, 0x02	; 2
    1122:	85 bd       	out	0x25, r24	; 37
    1124:	08 95       	ret

00001126 <Enable_timer0_overflow_interrupt>:
}
void Enable_timer0_overflow_interrupt(){
	sbi(TIMSK0,TOIE0);
    1126:	ee e6       	ldi	r30, 0x6E	; 110
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	81 60       	ori	r24, 0x01	; 1
    112e:	80 83       	st	Z, r24
    1130:	08 95       	ret

00001132 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1132:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1136:	8c e0       	ldi	r24, 0x0C	; 12
    1138:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    113c:	08 95       	ret

0000113e <i2c_start>:
    113e:	94 ea       	ldi	r25, 0xA4	; 164
    1140:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1144:	4f ef       	ldi	r20, 0xFF	; 255
    1146:	50 e0       	ldi	r21, 0x00	; 0
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	ec eb       	ldi	r30, 0xBC	; 188
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	90 81       	ld	r25, Z
    1152:	99 23       	and	r25, r25
    1154:	34 f0       	brlt	.+12     	; 0x1162 <i2c_start+0x24>
    1156:	41 50       	subi	r20, 0x01	; 1
    1158:	51 09       	sbc	r21, r1
    115a:	61 09       	sbc	r22, r1
    115c:	71 09       	sbc	r23, r1
    115e:	c0 f7       	brcc	.-16     	; 0x1150 <i2c_start+0x12>
    1160:	04 c0       	rjmp	.+8      	; 0x116a <i2c_start+0x2c>
    1162:	45 2b       	or	r20, r21
    1164:	46 2b       	or	r20, r22
    1166:	47 2b       	or	r20, r23
    1168:	41 f1       	breq	.+80     	; 0x11ba <i2c_start+0x7c>
    116a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    116e:	98 7f       	andi	r25, 0xF8	; 248
    1170:	98 30       	cpi	r25, 0x08	; 8
    1172:	11 f0       	breq	.+4      	; 0x1178 <i2c_start+0x3a>
    1174:	90 31       	cpi	r25, 0x10	; 16
    1176:	19 f5       	brne	.+70     	; 0x11be <i2c_start+0x80>
    1178:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    117c:	84 e8       	ldi	r24, 0x84	; 132
    117e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1182:	8f ef       	ldi	r24, 0xFF	; 255
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	a0 e0       	ldi	r26, 0x00	; 0
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	ec eb       	ldi	r30, 0xBC	; 188
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	20 81       	ld	r18, Z
    1190:	22 23       	and	r18, r18
    1192:	2c f0       	brlt	.+10     	; 0x119e <i2c_start+0x60>
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	a1 09       	sbc	r26, r1
    1198:	b1 09       	sbc	r27, r1
    119a:	c8 f7       	brcc	.-14     	; 0x118e <i2c_start+0x50>
    119c:	04 c0       	rjmp	.+8      	; 0x11a6 <i2c_start+0x68>
    119e:	89 2b       	or	r24, r25
    11a0:	8a 2b       	or	r24, r26
    11a2:	8b 2b       	or	r24, r27
    11a4:	71 f0       	breq	.+28     	; 0x11c2 <i2c_start+0x84>
    11a6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    11aa:	98 7f       	andi	r25, 0xF8	; 248
    11ac:	98 31       	cpi	r25, 0x18	; 24
    11ae:	59 f0       	breq	.+22     	; 0x11c6 <i2c_start+0x88>
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 34       	cpi	r25, 0x40	; 64
    11b4:	49 f4       	brne	.+18     	; 0x11c8 <i2c_start+0x8a>
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	08 95       	ret
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	08 95       	ret
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	08 95       	ret
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	08 95       	ret
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	08 95       	ret

000011ca <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    11ca:	84 e9       	ldi	r24, 0x94	; 148
    11cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	ec eb       	ldi	r30, 0xBC	; 188
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	20 81       	ld	r18, Z
    11da:	24 ff       	sbrs	r18, 4
    11dc:	05 c0       	rjmp	.+10     	; 0x11e8 <i2c_stop+0x1e>
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	81 15       	cp	r24, r1
    11e2:	21 e0       	ldi	r18, 0x01	; 1
    11e4:	92 07       	cpc	r25, r18
    11e6:	c1 f7       	brne	.-16     	; 0x11d8 <i2c_stop+0xe>
    11e8:	08 95       	ret

000011ea <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    11ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    11ee:	84 e8       	ldi	r24, 0x84	; 132
    11f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    11f4:	8f ef       	ldi	r24, 0xFF	; 255
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	a0 e0       	ldi	r26, 0x00	; 0
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    11fc:	ec eb       	ldi	r30, 0xBC	; 188
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	20 81       	ld	r18, Z
    1202:	22 23       	and	r18, r18
    1204:	2c f0       	brlt	.+10     	; 0x1210 <i2c_write+0x26>
    1206:	01 97       	sbiw	r24, 0x01	; 1
    1208:	a1 09       	sbc	r26, r1
    120a:	b1 09       	sbc	r27, r1
    120c:	c8 f7       	brcc	.-14     	; 0x1200 <i2c_write+0x16>
    120e:	04 c0       	rjmp	.+8      	; 0x1218 <i2c_write+0x2e>
	if(i2c_timer == 0)
    1210:	89 2b       	or	r24, r25
    1212:	8a 2b       	or	r24, r26
    1214:	8b 2b       	or	r24, r27
    1216:	41 f0       	breq	.+16     	; 0x1228 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1218:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    121c:	98 7f       	andi	r25, 0xF8	; 248
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	98 32       	cpi	r25, 0x28	; 40
    1222:	19 f4       	brne	.+6      	; 0x122a <i2c_write+0x40>
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	08 95       	ret
    1228:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    122a:	08 95       	ret

0000122c <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    122c:	84 ec       	ldi	r24, 0xC4	; 196
    122e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
    1232:	8f ef       	ldi	r24, 0xFF	; 255
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	a0 e0       	ldi	r26, 0x00	; 0
    1238:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    123a:	ec eb       	ldi	r30, 0xBC	; 188
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	20 81       	ld	r18, Z
    1240:	22 23       	and	r18, r18
    1242:	2c f0       	brlt	.+10     	; 0x124e <i2c_readAck+0x22>
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	a1 09       	sbc	r26, r1
    1248:	b1 09       	sbc	r27, r1
    124a:	c8 f7       	brcc	.-14     	; 0x123e <i2c_readAck+0x12>
    124c:	04 c0       	rjmp	.+8      	; 0x1256 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
    124e:	89 2b       	or	r24, r25
    1250:	8a 2b       	or	r24, r26
    1252:	8b 2b       	or	r24, r27
    1254:	19 f0       	breq	.+6      	; 0x125c <i2c_readAck+0x30>
		return 0;

    return TWDR;
    1256:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    125a:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    125c:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    125e:	08 95       	ret

00001260 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    1260:	84 e8       	ldi	r24, 0x84	; 132
    1262:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
    1266:	8f ef       	ldi	r24, 0xFF	; 255
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	a0 e0       	ldi	r26, 0x00	; 0
    126c:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    126e:	ec eb       	ldi	r30, 0xBC	; 188
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	20 81       	ld	r18, Z
    1274:	22 23       	and	r18, r18
    1276:	2c f0       	brlt	.+10     	; 0x1282 <i2c_readNak+0x22>
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	a1 09       	sbc	r26, r1
    127c:	b1 09       	sbc	r27, r1
    127e:	c8 f7       	brcc	.-14     	; 0x1272 <i2c_readNak+0x12>
    1280:	04 c0       	rjmp	.+8      	; 0x128a <i2c_readNak+0x2a>
	if(i2c_timer == 0)
    1282:	89 2b       	or	r24, r25
    1284:	8a 2b       	or	r24, r26
    1286:	8b 2b       	or	r24, r27
    1288:	19 f0       	breq	.+6      	; 0x1290 <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
    128a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    128e:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    1290:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    1292:	08 95       	ret

00001294 <USART_Init>:
#include <avr/io.h>
#include <stdio.h>
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
    1294:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;
    1298:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	UCSR0B = (1<<TXEN0);// | (1<<TXCIE0);
    129c:	88 e0       	ldi	r24, 0x08	; 8
    129e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);//2 stop bit 8 bit
    12a2:	8e e0       	ldi	r24, 0x0E	; 14
    12a4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    12a8:	08 95       	ret

000012aa <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
    12aa:	e0 ec       	ldi	r30, 0xC0	; 192
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	90 81       	ld	r25, Z
    12b0:	95 ff       	sbrs	r25, 5
    12b2:	fd cf       	rjmp	.-6      	; 0x12ae <USART_Transmit+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
    12b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    12b8:	08 95       	ret

000012ba <__subsf3>:
    12ba:	50 58       	subi	r21, 0x80	; 128

000012bc <__addsf3>:
    12bc:	bb 27       	eor	r27, r27
    12be:	aa 27       	eor	r26, r26
    12c0:	0e d0       	rcall	.+28     	; 0x12de <__addsf3x>
    12c2:	dd c1       	rjmp	.+954    	; 0x167e <__fp_round>
    12c4:	ce d1       	rcall	.+924    	; 0x1662 <__fp_pscA>
    12c6:	30 f0       	brcs	.+12     	; 0x12d4 <__addsf3+0x18>
    12c8:	d3 d1       	rcall	.+934    	; 0x1670 <__fp_pscB>
    12ca:	20 f0       	brcs	.+8      	; 0x12d4 <__addsf3+0x18>
    12cc:	31 f4       	brne	.+12     	; 0x12da <__addsf3+0x1e>
    12ce:	9f 3f       	cpi	r25, 0xFF	; 255
    12d0:	11 f4       	brne	.+4      	; 0x12d6 <__addsf3+0x1a>
    12d2:	1e f4       	brtc	.+6      	; 0x12da <__addsf3+0x1e>
    12d4:	8d c1       	rjmp	.+794    	; 0x15f0 <__fp_nan>
    12d6:	0e f4       	brtc	.+2      	; 0x12da <__addsf3+0x1e>
    12d8:	e0 95       	com	r30
    12da:	e7 fb       	bst	r30, 7
    12dc:	83 c1       	rjmp	.+774    	; 0x15e4 <__fp_inf>

000012de <__addsf3x>:
    12de:	e9 2f       	mov	r30, r25
    12e0:	df d1       	rcall	.+958    	; 0x16a0 <__fp_split3>
    12e2:	80 f3       	brcs	.-32     	; 0x12c4 <__addsf3+0x8>
    12e4:	ba 17       	cp	r27, r26
    12e6:	62 07       	cpc	r22, r18
    12e8:	73 07       	cpc	r23, r19
    12ea:	84 07       	cpc	r24, r20
    12ec:	95 07       	cpc	r25, r21
    12ee:	18 f0       	brcs	.+6      	; 0x12f6 <__addsf3x+0x18>
    12f0:	71 f4       	brne	.+28     	; 0x130e <__addsf3x+0x30>
    12f2:	9e f5       	brtc	.+102    	; 0x135a <__addsf3x+0x7c>
    12f4:	f7 c1       	rjmp	.+1006   	; 0x16e4 <__fp_zero>
    12f6:	0e f4       	brtc	.+2      	; 0x12fa <__addsf3x+0x1c>
    12f8:	e0 95       	com	r30
    12fa:	0b 2e       	mov	r0, r27
    12fc:	ba 2f       	mov	r27, r26
    12fe:	a0 2d       	mov	r26, r0
    1300:	0b 01       	movw	r0, r22
    1302:	b9 01       	movw	r22, r18
    1304:	90 01       	movw	r18, r0
    1306:	0c 01       	movw	r0, r24
    1308:	ca 01       	movw	r24, r20
    130a:	a0 01       	movw	r20, r0
    130c:	11 24       	eor	r1, r1
    130e:	ff 27       	eor	r31, r31
    1310:	59 1b       	sub	r21, r25
    1312:	99 f0       	breq	.+38     	; 0x133a <__addsf3x+0x5c>
    1314:	59 3f       	cpi	r21, 0xF9	; 249
    1316:	50 f4       	brcc	.+20     	; 0x132c <__addsf3x+0x4e>
    1318:	50 3e       	cpi	r21, 0xE0	; 224
    131a:	68 f1       	brcs	.+90     	; 0x1376 <__addsf3x+0x98>
    131c:	1a 16       	cp	r1, r26
    131e:	f0 40       	sbci	r31, 0x00	; 0
    1320:	a2 2f       	mov	r26, r18
    1322:	23 2f       	mov	r18, r19
    1324:	34 2f       	mov	r19, r20
    1326:	44 27       	eor	r20, r20
    1328:	58 5f       	subi	r21, 0xF8	; 248
    132a:	f3 cf       	rjmp	.-26     	; 0x1312 <__addsf3x+0x34>
    132c:	46 95       	lsr	r20
    132e:	37 95       	ror	r19
    1330:	27 95       	ror	r18
    1332:	a7 95       	ror	r26
    1334:	f0 40       	sbci	r31, 0x00	; 0
    1336:	53 95       	inc	r21
    1338:	c9 f7       	brne	.-14     	; 0x132c <__addsf3x+0x4e>
    133a:	7e f4       	brtc	.+30     	; 0x135a <__addsf3x+0x7c>
    133c:	1f 16       	cp	r1, r31
    133e:	ba 0b       	sbc	r27, r26
    1340:	62 0b       	sbc	r22, r18
    1342:	73 0b       	sbc	r23, r19
    1344:	84 0b       	sbc	r24, r20
    1346:	ba f0       	brmi	.+46     	; 0x1376 <__addsf3x+0x98>
    1348:	91 50       	subi	r25, 0x01	; 1
    134a:	a1 f0       	breq	.+40     	; 0x1374 <__addsf3x+0x96>
    134c:	ff 0f       	add	r31, r31
    134e:	bb 1f       	adc	r27, r27
    1350:	66 1f       	adc	r22, r22
    1352:	77 1f       	adc	r23, r23
    1354:	88 1f       	adc	r24, r24
    1356:	c2 f7       	brpl	.-16     	; 0x1348 <__addsf3x+0x6a>
    1358:	0e c0       	rjmp	.+28     	; 0x1376 <__addsf3x+0x98>
    135a:	ba 0f       	add	r27, r26
    135c:	62 1f       	adc	r22, r18
    135e:	73 1f       	adc	r23, r19
    1360:	84 1f       	adc	r24, r20
    1362:	48 f4       	brcc	.+18     	; 0x1376 <__addsf3x+0x98>
    1364:	87 95       	ror	r24
    1366:	77 95       	ror	r23
    1368:	67 95       	ror	r22
    136a:	b7 95       	ror	r27
    136c:	f7 95       	ror	r31
    136e:	9e 3f       	cpi	r25, 0xFE	; 254
    1370:	08 f0       	brcs	.+2      	; 0x1374 <__addsf3x+0x96>
    1372:	b3 cf       	rjmp	.-154    	; 0x12da <__addsf3+0x1e>
    1374:	93 95       	inc	r25
    1376:	88 0f       	add	r24, r24
    1378:	08 f0       	brcs	.+2      	; 0x137c <__addsf3x+0x9e>
    137a:	99 27       	eor	r25, r25
    137c:	ee 0f       	add	r30, r30
    137e:	97 95       	ror	r25
    1380:	87 95       	ror	r24
    1382:	08 95       	ret

00001384 <asin>:
    1384:	9f 93       	push	r25
    1386:	9f 77       	andi	r25, 0x7F	; 127
    1388:	ee e3       	ldi	r30, 0x3E	; 62
    138a:	89 37       	cpi	r24, 0x79	; 121
    138c:	9e 07       	cpc	r25, r30
    138e:	20 f4       	brcc	.+8      	; 0x1398 <asin+0x14>
    1390:	e4 ee       	ldi	r30, 0xE4	; 228
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	55 d1       	rcall	.+682    	; 0x1640 <__fp_powsodd>
    1396:	09 c0       	rjmp	.+18     	; 0x13aa <asin+0x26>
    1398:	e6 d0       	rcall	.+460    	; 0x1566 <__fp_arccos>
    139a:	90 58       	subi	r25, 0x80	; 128
    139c:	a2 ea       	ldi	r26, 0xA2	; 162
    139e:	2a ed       	ldi	r18, 0xDA	; 218
    13a0:	3f e0       	ldi	r19, 0x0F	; 15
    13a2:	49 ec       	ldi	r20, 0xC9	; 201
    13a4:	5f e3       	ldi	r21, 0x3F	; 63
    13a6:	9b df       	rcall	.-202    	; 0x12de <__addsf3x>
    13a8:	6a d1       	rcall	.+724    	; 0x167e <__fp_round>
    13aa:	0f 90       	pop	r0
    13ac:	07 fc       	sbrc	r0, 7
    13ae:	90 58       	subi	r25, 0x80	; 128
    13b0:	08 95       	ret

000013b2 <__cmpsf2>:
    13b2:	f4 d0       	rcall	.+488    	; 0x159c <__fp_cmp>
    13b4:	08 f4       	brcc	.+2      	; 0x13b8 <__cmpsf2+0x6>
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	08 95       	ret

000013ba <__divsf3>:
    13ba:	0c d0       	rcall	.+24     	; 0x13d4 <__divsf3x>
    13bc:	60 c1       	rjmp	.+704    	; 0x167e <__fp_round>
    13be:	58 d1       	rcall	.+688    	; 0x1670 <__fp_pscB>
    13c0:	40 f0       	brcs	.+16     	; 0x13d2 <__divsf3+0x18>
    13c2:	4f d1       	rcall	.+670    	; 0x1662 <__fp_pscA>
    13c4:	30 f0       	brcs	.+12     	; 0x13d2 <__divsf3+0x18>
    13c6:	21 f4       	brne	.+8      	; 0x13d0 <__divsf3+0x16>
    13c8:	5f 3f       	cpi	r21, 0xFF	; 255
    13ca:	19 f0       	breq	.+6      	; 0x13d2 <__divsf3+0x18>
    13cc:	0b c1       	rjmp	.+534    	; 0x15e4 <__fp_inf>
    13ce:	51 11       	cpse	r21, r1
    13d0:	8a c1       	rjmp	.+788    	; 0x16e6 <__fp_szero>
    13d2:	0e c1       	rjmp	.+540    	; 0x15f0 <__fp_nan>

000013d4 <__divsf3x>:
    13d4:	65 d1       	rcall	.+714    	; 0x16a0 <__fp_split3>
    13d6:	98 f3       	brcs	.-26     	; 0x13be <__divsf3+0x4>

000013d8 <__divsf3_pse>:
    13d8:	99 23       	and	r25, r25
    13da:	c9 f3       	breq	.-14     	; 0x13ce <__divsf3+0x14>
    13dc:	55 23       	and	r21, r21
    13de:	b1 f3       	breq	.-20     	; 0x13cc <__divsf3+0x12>
    13e0:	95 1b       	sub	r25, r21
    13e2:	55 0b       	sbc	r21, r21
    13e4:	bb 27       	eor	r27, r27
    13e6:	aa 27       	eor	r26, r26
    13e8:	62 17       	cp	r22, r18
    13ea:	73 07       	cpc	r23, r19
    13ec:	84 07       	cpc	r24, r20
    13ee:	38 f0       	brcs	.+14     	; 0x13fe <__divsf3_pse+0x26>
    13f0:	9f 5f       	subi	r25, 0xFF	; 255
    13f2:	5f 4f       	sbci	r21, 0xFF	; 255
    13f4:	22 0f       	add	r18, r18
    13f6:	33 1f       	adc	r19, r19
    13f8:	44 1f       	adc	r20, r20
    13fa:	aa 1f       	adc	r26, r26
    13fc:	a9 f3       	breq	.-22     	; 0x13e8 <__divsf3_pse+0x10>
    13fe:	33 d0       	rcall	.+102    	; 0x1466 <__divsf3_pse+0x8e>
    1400:	0e 2e       	mov	r0, r30
    1402:	3a f0       	brmi	.+14     	; 0x1412 <__divsf3_pse+0x3a>
    1404:	e0 e8       	ldi	r30, 0x80	; 128
    1406:	30 d0       	rcall	.+96     	; 0x1468 <__divsf3_pse+0x90>
    1408:	91 50       	subi	r25, 0x01	; 1
    140a:	50 40       	sbci	r21, 0x00	; 0
    140c:	e6 95       	lsr	r30
    140e:	00 1c       	adc	r0, r0
    1410:	ca f7       	brpl	.-14     	; 0x1404 <__divsf3_pse+0x2c>
    1412:	29 d0       	rcall	.+82     	; 0x1466 <__divsf3_pse+0x8e>
    1414:	fe 2f       	mov	r31, r30
    1416:	27 d0       	rcall	.+78     	; 0x1466 <__divsf3_pse+0x8e>
    1418:	66 0f       	add	r22, r22
    141a:	77 1f       	adc	r23, r23
    141c:	88 1f       	adc	r24, r24
    141e:	bb 1f       	adc	r27, r27
    1420:	26 17       	cp	r18, r22
    1422:	37 07       	cpc	r19, r23
    1424:	48 07       	cpc	r20, r24
    1426:	ab 07       	cpc	r26, r27
    1428:	b0 e8       	ldi	r27, 0x80	; 128
    142a:	09 f0       	breq	.+2      	; 0x142e <__divsf3_pse+0x56>
    142c:	bb 0b       	sbc	r27, r27
    142e:	80 2d       	mov	r24, r0
    1430:	bf 01       	movw	r22, r30
    1432:	ff 27       	eor	r31, r31
    1434:	93 58       	subi	r25, 0x83	; 131
    1436:	5f 4f       	sbci	r21, 0xFF	; 255
    1438:	2a f0       	brmi	.+10     	; 0x1444 <__divsf3_pse+0x6c>
    143a:	9e 3f       	cpi	r25, 0xFE	; 254
    143c:	51 05       	cpc	r21, r1
    143e:	68 f0       	brcs	.+26     	; 0x145a <__divsf3_pse+0x82>
    1440:	d1 c0       	rjmp	.+418    	; 0x15e4 <__fp_inf>
    1442:	51 c1       	rjmp	.+674    	; 0x16e6 <__fp_szero>
    1444:	5f 3f       	cpi	r21, 0xFF	; 255
    1446:	ec f3       	brlt	.-6      	; 0x1442 <__divsf3_pse+0x6a>
    1448:	98 3e       	cpi	r25, 0xE8	; 232
    144a:	dc f3       	brlt	.-10     	; 0x1442 <__divsf3_pse+0x6a>
    144c:	86 95       	lsr	r24
    144e:	77 95       	ror	r23
    1450:	67 95       	ror	r22
    1452:	b7 95       	ror	r27
    1454:	f7 95       	ror	r31
    1456:	9f 5f       	subi	r25, 0xFF	; 255
    1458:	c9 f7       	brne	.-14     	; 0x144c <__divsf3_pse+0x74>
    145a:	88 0f       	add	r24, r24
    145c:	91 1d       	adc	r25, r1
    145e:	96 95       	lsr	r25
    1460:	87 95       	ror	r24
    1462:	97 f9       	bld	r25, 7
    1464:	08 95       	ret
    1466:	e1 e0       	ldi	r30, 0x01	; 1
    1468:	66 0f       	add	r22, r22
    146a:	77 1f       	adc	r23, r23
    146c:	88 1f       	adc	r24, r24
    146e:	bb 1f       	adc	r27, r27
    1470:	62 17       	cp	r22, r18
    1472:	73 07       	cpc	r23, r19
    1474:	84 07       	cpc	r24, r20
    1476:	ba 07       	cpc	r27, r26
    1478:	20 f0       	brcs	.+8      	; 0x1482 <__divsf3_pse+0xaa>
    147a:	62 1b       	sub	r22, r18
    147c:	73 0b       	sbc	r23, r19
    147e:	84 0b       	sbc	r24, r20
    1480:	ba 0b       	sbc	r27, r26
    1482:	ee 1f       	adc	r30, r30
    1484:	88 f7       	brcc	.-30     	; 0x1468 <__divsf3_pse+0x90>
    1486:	e0 95       	com	r30
    1488:	08 95       	ret

0000148a <__fixsfsi>:
    148a:	04 d0       	rcall	.+8      	; 0x1494 <__fixunssfsi>
    148c:	68 94       	set
    148e:	b1 11       	cpse	r27, r1
    1490:	2a c1       	rjmp	.+596    	; 0x16e6 <__fp_szero>
    1492:	08 95       	ret

00001494 <__fixunssfsi>:
    1494:	0d d1       	rcall	.+538    	; 0x16b0 <__fp_splitA>
    1496:	88 f0       	brcs	.+34     	; 0x14ba <__fixunssfsi+0x26>
    1498:	9f 57       	subi	r25, 0x7F	; 127
    149a:	90 f0       	brcs	.+36     	; 0x14c0 <__fixunssfsi+0x2c>
    149c:	b9 2f       	mov	r27, r25
    149e:	99 27       	eor	r25, r25
    14a0:	b7 51       	subi	r27, 0x17	; 23
    14a2:	a0 f0       	brcs	.+40     	; 0x14cc <__fixunssfsi+0x38>
    14a4:	d1 f0       	breq	.+52     	; 0x14da <__fixunssfsi+0x46>
    14a6:	66 0f       	add	r22, r22
    14a8:	77 1f       	adc	r23, r23
    14aa:	88 1f       	adc	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	1a f0       	brmi	.+6      	; 0x14b6 <__fixunssfsi+0x22>
    14b0:	ba 95       	dec	r27
    14b2:	c9 f7       	brne	.-14     	; 0x14a6 <__fixunssfsi+0x12>
    14b4:	12 c0       	rjmp	.+36     	; 0x14da <__fixunssfsi+0x46>
    14b6:	b1 30       	cpi	r27, 0x01	; 1
    14b8:	81 f0       	breq	.+32     	; 0x14da <__fixunssfsi+0x46>
    14ba:	14 d1       	rcall	.+552    	; 0x16e4 <__fp_zero>
    14bc:	b1 e0       	ldi	r27, 0x01	; 1
    14be:	08 95       	ret
    14c0:	11 c1       	rjmp	.+546    	; 0x16e4 <__fp_zero>
    14c2:	67 2f       	mov	r22, r23
    14c4:	78 2f       	mov	r23, r24
    14c6:	88 27       	eor	r24, r24
    14c8:	b8 5f       	subi	r27, 0xF8	; 248
    14ca:	39 f0       	breq	.+14     	; 0x14da <__fixunssfsi+0x46>
    14cc:	b9 3f       	cpi	r27, 0xF9	; 249
    14ce:	cc f3       	brlt	.-14     	; 0x14c2 <__fixunssfsi+0x2e>
    14d0:	86 95       	lsr	r24
    14d2:	77 95       	ror	r23
    14d4:	67 95       	ror	r22
    14d6:	b3 95       	inc	r27
    14d8:	d9 f7       	brne	.-10     	; 0x14d0 <__fixunssfsi+0x3c>
    14da:	3e f4       	brtc	.+14     	; 0x14ea <__fixunssfsi+0x56>
    14dc:	90 95       	com	r25
    14de:	80 95       	com	r24
    14e0:	70 95       	com	r23
    14e2:	61 95       	neg	r22
    14e4:	7f 4f       	sbci	r23, 0xFF	; 255
    14e6:	8f 4f       	sbci	r24, 0xFF	; 255
    14e8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ea:	08 95       	ret

000014ec <__floatunsisf>:
    14ec:	e8 94       	clt
    14ee:	09 c0       	rjmp	.+18     	; 0x1502 <__floatsisf+0x12>

000014f0 <__floatsisf>:
    14f0:	97 fb       	bst	r25, 7
    14f2:	3e f4       	brtc	.+14     	; 0x1502 <__floatsisf+0x12>
    14f4:	90 95       	com	r25
    14f6:	80 95       	com	r24
    14f8:	70 95       	com	r23
    14fa:	61 95       	neg	r22
    14fc:	7f 4f       	sbci	r23, 0xFF	; 255
    14fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1500:	9f 4f       	sbci	r25, 0xFF	; 255
    1502:	99 23       	and	r25, r25
    1504:	a9 f0       	breq	.+42     	; 0x1530 <__floatsisf+0x40>
    1506:	f9 2f       	mov	r31, r25
    1508:	96 e9       	ldi	r25, 0x96	; 150
    150a:	bb 27       	eor	r27, r27
    150c:	93 95       	inc	r25
    150e:	f6 95       	lsr	r31
    1510:	87 95       	ror	r24
    1512:	77 95       	ror	r23
    1514:	67 95       	ror	r22
    1516:	b7 95       	ror	r27
    1518:	f1 11       	cpse	r31, r1
    151a:	f8 cf       	rjmp	.-16     	; 0x150c <__floatsisf+0x1c>
    151c:	fa f4       	brpl	.+62     	; 0x155c <__floatsisf+0x6c>
    151e:	bb 0f       	add	r27, r27
    1520:	11 f4       	brne	.+4      	; 0x1526 <__floatsisf+0x36>
    1522:	60 ff       	sbrs	r22, 0
    1524:	1b c0       	rjmp	.+54     	; 0x155c <__floatsisf+0x6c>
    1526:	6f 5f       	subi	r22, 0xFF	; 255
    1528:	7f 4f       	sbci	r23, 0xFF	; 255
    152a:	8f 4f       	sbci	r24, 0xFF	; 255
    152c:	9f 4f       	sbci	r25, 0xFF	; 255
    152e:	16 c0       	rjmp	.+44     	; 0x155c <__floatsisf+0x6c>
    1530:	88 23       	and	r24, r24
    1532:	11 f0       	breq	.+4      	; 0x1538 <__floatsisf+0x48>
    1534:	96 e9       	ldi	r25, 0x96	; 150
    1536:	11 c0       	rjmp	.+34     	; 0x155a <__floatsisf+0x6a>
    1538:	77 23       	and	r23, r23
    153a:	21 f0       	breq	.+8      	; 0x1544 <__floatsisf+0x54>
    153c:	9e e8       	ldi	r25, 0x8E	; 142
    153e:	87 2f       	mov	r24, r23
    1540:	76 2f       	mov	r23, r22
    1542:	05 c0       	rjmp	.+10     	; 0x154e <__floatsisf+0x5e>
    1544:	66 23       	and	r22, r22
    1546:	71 f0       	breq	.+28     	; 0x1564 <__floatsisf+0x74>
    1548:	96 e8       	ldi	r25, 0x86	; 134
    154a:	86 2f       	mov	r24, r22
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	2a f0       	brmi	.+10     	; 0x155c <__floatsisf+0x6c>
    1552:	9a 95       	dec	r25
    1554:	66 0f       	add	r22, r22
    1556:	77 1f       	adc	r23, r23
    1558:	88 1f       	adc	r24, r24
    155a:	da f7       	brpl	.-10     	; 0x1552 <__floatsisf+0x62>
    155c:	88 0f       	add	r24, r24
    155e:	96 95       	lsr	r25
    1560:	87 95       	ror	r24
    1562:	97 f9       	bld	r25, 7
    1564:	08 95       	ret

00001566 <__fp_arccos>:
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	1f 93       	push	r17
    156c:	0f 93       	push	r16
    156e:	8b 01       	movw	r16, r22
    1570:	ec 01       	movw	r28, r24
    1572:	e8 ef       	ldi	r30, 0xF8	; 248
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	3f d0       	rcall	.+126    	; 0x15f6 <__fp_powser>
    1578:	82 d0       	rcall	.+260    	; 0x167e <__fp_round>
    157a:	98 01       	movw	r18, r16
    157c:	ae 01       	movw	r20, r28
    157e:	8b 01       	movw	r16, r22
    1580:	ec 01       	movw	r28, r24
    1582:	60 e0       	ldi	r22, 0x00	; 0
    1584:	70 e0       	ldi	r23, 0x00	; 0
    1586:	80 e8       	ldi	r24, 0x80	; 128
    1588:	9f e3       	ldi	r25, 0x3F	; 63
    158a:	97 de       	rcall	.-722    	; 0x12ba <__subsf3>
    158c:	23 d1       	rcall	.+582    	; 0x17d4 <sqrt>
    158e:	98 01       	movw	r18, r16
    1590:	ae 01       	movw	r20, r28
    1592:	0f 91       	pop	r16
    1594:	1f 91       	pop	r17
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	bb c0       	rjmp	.+374    	; 0x1712 <__mulsf3x>

0000159c <__fp_cmp>:
    159c:	99 0f       	add	r25, r25
    159e:	00 08       	sbc	r0, r0
    15a0:	55 0f       	add	r21, r21
    15a2:	aa 0b       	sbc	r26, r26
    15a4:	e0 e8       	ldi	r30, 0x80	; 128
    15a6:	fe ef       	ldi	r31, 0xFE	; 254
    15a8:	16 16       	cp	r1, r22
    15aa:	17 06       	cpc	r1, r23
    15ac:	e8 07       	cpc	r30, r24
    15ae:	f9 07       	cpc	r31, r25
    15b0:	c0 f0       	brcs	.+48     	; 0x15e2 <__fp_cmp+0x46>
    15b2:	12 16       	cp	r1, r18
    15b4:	13 06       	cpc	r1, r19
    15b6:	e4 07       	cpc	r30, r20
    15b8:	f5 07       	cpc	r31, r21
    15ba:	98 f0       	brcs	.+38     	; 0x15e2 <__fp_cmp+0x46>
    15bc:	62 1b       	sub	r22, r18
    15be:	73 0b       	sbc	r23, r19
    15c0:	84 0b       	sbc	r24, r20
    15c2:	95 0b       	sbc	r25, r21
    15c4:	39 f4       	brne	.+14     	; 0x15d4 <__fp_cmp+0x38>
    15c6:	0a 26       	eor	r0, r26
    15c8:	61 f0       	breq	.+24     	; 0x15e2 <__fp_cmp+0x46>
    15ca:	23 2b       	or	r18, r19
    15cc:	24 2b       	or	r18, r20
    15ce:	25 2b       	or	r18, r21
    15d0:	21 f4       	brne	.+8      	; 0x15da <__fp_cmp+0x3e>
    15d2:	08 95       	ret
    15d4:	0a 26       	eor	r0, r26
    15d6:	09 f4       	brne	.+2      	; 0x15da <__fp_cmp+0x3e>
    15d8:	a1 40       	sbci	r26, 0x01	; 1
    15da:	a6 95       	lsr	r26
    15dc:	8f ef       	ldi	r24, 0xFF	; 255
    15de:	81 1d       	adc	r24, r1
    15e0:	81 1d       	adc	r24, r1
    15e2:	08 95       	ret

000015e4 <__fp_inf>:
    15e4:	97 f9       	bld	r25, 7
    15e6:	9f 67       	ori	r25, 0x7F	; 127
    15e8:	80 e8       	ldi	r24, 0x80	; 128
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	08 95       	ret

000015f0 <__fp_nan>:
    15f0:	9f ef       	ldi	r25, 0xFF	; 255
    15f2:	80 ec       	ldi	r24, 0xC0	; 192
    15f4:	08 95       	ret

000015f6 <__fp_powser>:
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	1f 93       	push	r17
    15fc:	0f 93       	push	r16
    15fe:	ff 92       	push	r15
    1600:	ef 92       	push	r14
    1602:	df 92       	push	r13
    1604:	7b 01       	movw	r14, r22
    1606:	8c 01       	movw	r16, r24
    1608:	68 94       	set
    160a:	05 c0       	rjmp	.+10     	; 0x1616 <__fp_powser+0x20>
    160c:	da 2e       	mov	r13, r26
    160e:	ef 01       	movw	r28, r30
    1610:	80 d0       	rcall	.+256    	; 0x1712 <__mulsf3x>
    1612:	fe 01       	movw	r30, r28
    1614:	e8 94       	clt
    1616:	a5 91       	lpm	r26, Z+
    1618:	25 91       	lpm	r18, Z+
    161a:	35 91       	lpm	r19, Z+
    161c:	45 91       	lpm	r20, Z+
    161e:	55 91       	lpm	r21, Z+
    1620:	ae f3       	brts	.-22     	; 0x160c <__fp_powser+0x16>
    1622:	ef 01       	movw	r28, r30
    1624:	5c de       	rcall	.-840    	; 0x12de <__addsf3x>
    1626:	fe 01       	movw	r30, r28
    1628:	97 01       	movw	r18, r14
    162a:	a8 01       	movw	r20, r16
    162c:	da 94       	dec	r13
    162e:	79 f7       	brne	.-34     	; 0x160e <__fp_powser+0x18>
    1630:	df 90       	pop	r13
    1632:	ef 90       	pop	r14
    1634:	ff 90       	pop	r15
    1636:	0f 91       	pop	r16
    1638:	1f 91       	pop	r17
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <__fp_powsodd>:
    1640:	9f 93       	push	r25
    1642:	8f 93       	push	r24
    1644:	7f 93       	push	r23
    1646:	6f 93       	push	r22
    1648:	ff 93       	push	r31
    164a:	ef 93       	push	r30
    164c:	9b 01       	movw	r18, r22
    164e:	ac 01       	movw	r20, r24
    1650:	54 d0       	rcall	.+168    	; 0x16fa <__mulsf3>
    1652:	ef 91       	pop	r30
    1654:	ff 91       	pop	r31
    1656:	cf df       	rcall	.-98     	; 0x15f6 <__fp_powser>
    1658:	2f 91       	pop	r18
    165a:	3f 91       	pop	r19
    165c:	4f 91       	pop	r20
    165e:	5f 91       	pop	r21
    1660:	4c c0       	rjmp	.+152    	; 0x16fa <__mulsf3>

00001662 <__fp_pscA>:
    1662:	00 24       	eor	r0, r0
    1664:	0a 94       	dec	r0
    1666:	16 16       	cp	r1, r22
    1668:	17 06       	cpc	r1, r23
    166a:	18 06       	cpc	r1, r24
    166c:	09 06       	cpc	r0, r25
    166e:	08 95       	ret

00001670 <__fp_pscB>:
    1670:	00 24       	eor	r0, r0
    1672:	0a 94       	dec	r0
    1674:	12 16       	cp	r1, r18
    1676:	13 06       	cpc	r1, r19
    1678:	14 06       	cpc	r1, r20
    167a:	05 06       	cpc	r0, r21
    167c:	08 95       	ret

0000167e <__fp_round>:
    167e:	09 2e       	mov	r0, r25
    1680:	03 94       	inc	r0
    1682:	00 0c       	add	r0, r0
    1684:	11 f4       	brne	.+4      	; 0x168a <__fp_round+0xc>
    1686:	88 23       	and	r24, r24
    1688:	52 f0       	brmi	.+20     	; 0x169e <__fp_round+0x20>
    168a:	bb 0f       	add	r27, r27
    168c:	40 f4       	brcc	.+16     	; 0x169e <__fp_round+0x20>
    168e:	bf 2b       	or	r27, r31
    1690:	11 f4       	brne	.+4      	; 0x1696 <__fp_round+0x18>
    1692:	60 ff       	sbrs	r22, 0
    1694:	04 c0       	rjmp	.+8      	; 0x169e <__fp_round+0x20>
    1696:	6f 5f       	subi	r22, 0xFF	; 255
    1698:	7f 4f       	sbci	r23, 0xFF	; 255
    169a:	8f 4f       	sbci	r24, 0xFF	; 255
    169c:	9f 4f       	sbci	r25, 0xFF	; 255
    169e:	08 95       	ret

000016a0 <__fp_split3>:
    16a0:	57 fd       	sbrc	r21, 7
    16a2:	90 58       	subi	r25, 0x80	; 128
    16a4:	44 0f       	add	r20, r20
    16a6:	55 1f       	adc	r21, r21
    16a8:	59 f0       	breq	.+22     	; 0x16c0 <__fp_splitA+0x10>
    16aa:	5f 3f       	cpi	r21, 0xFF	; 255
    16ac:	71 f0       	breq	.+28     	; 0x16ca <__fp_splitA+0x1a>
    16ae:	47 95       	ror	r20

000016b0 <__fp_splitA>:
    16b0:	88 0f       	add	r24, r24
    16b2:	97 fb       	bst	r25, 7
    16b4:	99 1f       	adc	r25, r25
    16b6:	61 f0       	breq	.+24     	; 0x16d0 <__fp_splitA+0x20>
    16b8:	9f 3f       	cpi	r25, 0xFF	; 255
    16ba:	79 f0       	breq	.+30     	; 0x16da <__fp_splitA+0x2a>
    16bc:	87 95       	ror	r24
    16be:	08 95       	ret
    16c0:	12 16       	cp	r1, r18
    16c2:	13 06       	cpc	r1, r19
    16c4:	14 06       	cpc	r1, r20
    16c6:	55 1f       	adc	r21, r21
    16c8:	f2 cf       	rjmp	.-28     	; 0x16ae <__fp_split3+0xe>
    16ca:	46 95       	lsr	r20
    16cc:	f1 df       	rcall	.-30     	; 0x16b0 <__fp_splitA>
    16ce:	08 c0       	rjmp	.+16     	; 0x16e0 <__fp_splitA+0x30>
    16d0:	16 16       	cp	r1, r22
    16d2:	17 06       	cpc	r1, r23
    16d4:	18 06       	cpc	r1, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	f1 cf       	rjmp	.-30     	; 0x16bc <__fp_splitA+0xc>
    16da:	86 95       	lsr	r24
    16dc:	71 05       	cpc	r23, r1
    16de:	61 05       	cpc	r22, r1
    16e0:	08 94       	sec
    16e2:	08 95       	ret

000016e4 <__fp_zero>:
    16e4:	e8 94       	clt

000016e6 <__fp_szero>:
    16e6:	bb 27       	eor	r27, r27
    16e8:	66 27       	eor	r22, r22
    16ea:	77 27       	eor	r23, r23
    16ec:	cb 01       	movw	r24, r22
    16ee:	97 f9       	bld	r25, 7
    16f0:	08 95       	ret

000016f2 <__gesf2>:
    16f2:	54 df       	rcall	.-344    	; 0x159c <__fp_cmp>
    16f4:	08 f4       	brcc	.+2      	; 0x16f8 <__gesf2+0x6>
    16f6:	8f ef       	ldi	r24, 0xFF	; 255
    16f8:	08 95       	ret

000016fa <__mulsf3>:
    16fa:	0b d0       	rcall	.+22     	; 0x1712 <__mulsf3x>
    16fc:	c0 cf       	rjmp	.-128    	; 0x167e <__fp_round>
    16fe:	b1 df       	rcall	.-158    	; 0x1662 <__fp_pscA>
    1700:	28 f0       	brcs	.+10     	; 0x170c <__mulsf3+0x12>
    1702:	b6 df       	rcall	.-148    	; 0x1670 <__fp_pscB>
    1704:	18 f0       	brcs	.+6      	; 0x170c <__mulsf3+0x12>
    1706:	95 23       	and	r25, r21
    1708:	09 f0       	breq	.+2      	; 0x170c <__mulsf3+0x12>
    170a:	6c cf       	rjmp	.-296    	; 0x15e4 <__fp_inf>
    170c:	71 cf       	rjmp	.-286    	; 0x15f0 <__fp_nan>
    170e:	11 24       	eor	r1, r1
    1710:	ea cf       	rjmp	.-44     	; 0x16e6 <__fp_szero>

00001712 <__mulsf3x>:
    1712:	c6 df       	rcall	.-116    	; 0x16a0 <__fp_split3>
    1714:	a0 f3       	brcs	.-24     	; 0x16fe <__mulsf3+0x4>

00001716 <__mulsf3_pse>:
    1716:	95 9f       	mul	r25, r21
    1718:	d1 f3       	breq	.-12     	; 0x170e <__mulsf3+0x14>
    171a:	95 0f       	add	r25, r21
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	55 1f       	adc	r21, r21
    1720:	62 9f       	mul	r22, r18
    1722:	f0 01       	movw	r30, r0
    1724:	72 9f       	mul	r23, r18
    1726:	bb 27       	eor	r27, r27
    1728:	f0 0d       	add	r31, r0
    172a:	b1 1d       	adc	r27, r1
    172c:	63 9f       	mul	r22, r19
    172e:	aa 27       	eor	r26, r26
    1730:	f0 0d       	add	r31, r0
    1732:	b1 1d       	adc	r27, r1
    1734:	aa 1f       	adc	r26, r26
    1736:	64 9f       	mul	r22, r20
    1738:	66 27       	eor	r22, r22
    173a:	b0 0d       	add	r27, r0
    173c:	a1 1d       	adc	r26, r1
    173e:	66 1f       	adc	r22, r22
    1740:	82 9f       	mul	r24, r18
    1742:	22 27       	eor	r18, r18
    1744:	b0 0d       	add	r27, r0
    1746:	a1 1d       	adc	r26, r1
    1748:	62 1f       	adc	r22, r18
    174a:	73 9f       	mul	r23, r19
    174c:	b0 0d       	add	r27, r0
    174e:	a1 1d       	adc	r26, r1
    1750:	62 1f       	adc	r22, r18
    1752:	83 9f       	mul	r24, r19
    1754:	a0 0d       	add	r26, r0
    1756:	61 1d       	adc	r22, r1
    1758:	22 1f       	adc	r18, r18
    175a:	74 9f       	mul	r23, r20
    175c:	33 27       	eor	r19, r19
    175e:	a0 0d       	add	r26, r0
    1760:	61 1d       	adc	r22, r1
    1762:	23 1f       	adc	r18, r19
    1764:	84 9f       	mul	r24, r20
    1766:	60 0d       	add	r22, r0
    1768:	21 1d       	adc	r18, r1
    176a:	82 2f       	mov	r24, r18
    176c:	76 2f       	mov	r23, r22
    176e:	6a 2f       	mov	r22, r26
    1770:	11 24       	eor	r1, r1
    1772:	9f 57       	subi	r25, 0x7F	; 127
    1774:	50 40       	sbci	r21, 0x00	; 0
    1776:	8a f0       	brmi	.+34     	; 0x179a <__mulsf3_pse+0x84>
    1778:	e1 f0       	breq	.+56     	; 0x17b2 <__mulsf3_pse+0x9c>
    177a:	88 23       	and	r24, r24
    177c:	4a f0       	brmi	.+18     	; 0x1790 <__mulsf3_pse+0x7a>
    177e:	ee 0f       	add	r30, r30
    1780:	ff 1f       	adc	r31, r31
    1782:	bb 1f       	adc	r27, r27
    1784:	66 1f       	adc	r22, r22
    1786:	77 1f       	adc	r23, r23
    1788:	88 1f       	adc	r24, r24
    178a:	91 50       	subi	r25, 0x01	; 1
    178c:	50 40       	sbci	r21, 0x00	; 0
    178e:	a9 f7       	brne	.-22     	; 0x177a <__mulsf3_pse+0x64>
    1790:	9e 3f       	cpi	r25, 0xFE	; 254
    1792:	51 05       	cpc	r21, r1
    1794:	70 f0       	brcs	.+28     	; 0x17b2 <__mulsf3_pse+0x9c>
    1796:	26 cf       	rjmp	.-436    	; 0x15e4 <__fp_inf>
    1798:	a6 cf       	rjmp	.-180    	; 0x16e6 <__fp_szero>
    179a:	5f 3f       	cpi	r21, 0xFF	; 255
    179c:	ec f3       	brlt	.-6      	; 0x1798 <__mulsf3_pse+0x82>
    179e:	98 3e       	cpi	r25, 0xE8	; 232
    17a0:	dc f3       	brlt	.-10     	; 0x1798 <__mulsf3_pse+0x82>
    17a2:	86 95       	lsr	r24
    17a4:	77 95       	ror	r23
    17a6:	67 95       	ror	r22
    17a8:	b7 95       	ror	r27
    17aa:	f7 95       	ror	r31
    17ac:	e7 95       	ror	r30
    17ae:	9f 5f       	subi	r25, 0xFF	; 255
    17b0:	c1 f7       	brne	.-16     	; 0x17a2 <__mulsf3_pse+0x8c>
    17b2:	fe 2b       	or	r31, r30
    17b4:	88 0f       	add	r24, r24
    17b6:	91 1d       	adc	r25, r1
    17b8:	96 95       	lsr	r25
    17ba:	87 95       	ror	r24
    17bc:	97 f9       	bld	r25, 7
    17be:	08 95       	ret

000017c0 <sin>:
    17c0:	9f 93       	push	r25
    17c2:	5c d0       	rcall	.+184    	; 0x187c <__fp_rempio2>
    17c4:	0f 90       	pop	r0
    17c6:	07 fc       	sbrc	r0, 7
    17c8:	ee 5f       	subi	r30, 0xFE	; 254
    17ca:	7f c0       	rjmp	.+254    	; 0x18ca <__fp_sinus>
    17cc:	11 f4       	brne	.+4      	; 0x17d2 <sin+0x12>
    17ce:	0e f4       	brtc	.+2      	; 0x17d2 <sin+0x12>
    17d0:	0f cf       	rjmp	.-482    	; 0x15f0 <__fp_nan>
    17d2:	3e c0       	rjmp	.+124    	; 0x1850 <__fp_mpack>

000017d4 <sqrt>:
    17d4:	6d df       	rcall	.-294    	; 0x16b0 <__fp_splitA>
    17d6:	d0 f3       	brcs	.-12     	; 0x17cc <sin+0xc>
    17d8:	99 23       	and	r25, r25
    17da:	d9 f3       	breq	.-10     	; 0x17d2 <sin+0x12>
    17dc:	ce f3       	brts	.-14     	; 0x17d0 <sin+0x10>
    17de:	9f 57       	subi	r25, 0x7F	; 127
    17e0:	55 0b       	sbc	r21, r21
    17e2:	87 ff       	sbrs	r24, 7
    17e4:	43 d0       	rcall	.+134    	; 0x186c <__fp_norm2>
    17e6:	00 24       	eor	r0, r0
    17e8:	a0 e6       	ldi	r26, 0x60	; 96
    17ea:	40 ea       	ldi	r20, 0xA0	; 160
    17ec:	90 01       	movw	r18, r0
    17ee:	80 58       	subi	r24, 0x80	; 128
    17f0:	56 95       	lsr	r21
    17f2:	97 95       	ror	r25
    17f4:	28 f4       	brcc	.+10     	; 0x1800 <sqrt+0x2c>
    17f6:	80 5c       	subi	r24, 0xC0	; 192
    17f8:	66 0f       	add	r22, r22
    17fa:	77 1f       	adc	r23, r23
    17fc:	88 1f       	adc	r24, r24
    17fe:	20 f0       	brcs	.+8      	; 0x1808 <sqrt+0x34>
    1800:	26 17       	cp	r18, r22
    1802:	37 07       	cpc	r19, r23
    1804:	48 07       	cpc	r20, r24
    1806:	30 f4       	brcc	.+12     	; 0x1814 <sqrt+0x40>
    1808:	62 1b       	sub	r22, r18
    180a:	73 0b       	sbc	r23, r19
    180c:	84 0b       	sbc	r24, r20
    180e:	20 29       	or	r18, r0
    1810:	31 29       	or	r19, r1
    1812:	4a 2b       	or	r20, r26
    1814:	a6 95       	lsr	r26
    1816:	17 94       	ror	r1
    1818:	07 94       	ror	r0
    181a:	20 25       	eor	r18, r0
    181c:	31 25       	eor	r19, r1
    181e:	4a 27       	eor	r20, r26
    1820:	58 f7       	brcc	.-42     	; 0x17f8 <sqrt+0x24>
    1822:	66 0f       	add	r22, r22
    1824:	77 1f       	adc	r23, r23
    1826:	88 1f       	adc	r24, r24
    1828:	20 f0       	brcs	.+8      	; 0x1832 <sqrt+0x5e>
    182a:	26 17       	cp	r18, r22
    182c:	37 07       	cpc	r19, r23
    182e:	48 07       	cpc	r20, r24
    1830:	30 f4       	brcc	.+12     	; 0x183e <sqrt+0x6a>
    1832:	62 0b       	sbc	r22, r18
    1834:	73 0b       	sbc	r23, r19
    1836:	84 0b       	sbc	r24, r20
    1838:	20 0d       	add	r18, r0
    183a:	31 1d       	adc	r19, r1
    183c:	41 1d       	adc	r20, r1
    183e:	a0 95       	com	r26
    1840:	81 f7       	brne	.-32     	; 0x1822 <sqrt+0x4e>
    1842:	b9 01       	movw	r22, r18
    1844:	84 2f       	mov	r24, r20
    1846:	91 58       	subi	r25, 0x81	; 129
    1848:	88 0f       	add	r24, r24
    184a:	96 95       	lsr	r25
    184c:	87 95       	ror	r24
    184e:	08 95       	ret

00001850 <__fp_mpack>:
    1850:	9f 3f       	cpi	r25, 0xFF	; 255
    1852:	31 f0       	breq	.+12     	; 0x1860 <__fp_mpack_finite+0xc>

00001854 <__fp_mpack_finite>:
    1854:	91 50       	subi	r25, 0x01	; 1
    1856:	20 f4       	brcc	.+8      	; 0x1860 <__fp_mpack_finite+0xc>
    1858:	87 95       	ror	r24
    185a:	77 95       	ror	r23
    185c:	67 95       	ror	r22
    185e:	b7 95       	ror	r27
    1860:	88 0f       	add	r24, r24
    1862:	91 1d       	adc	r25, r1
    1864:	96 95       	lsr	r25
    1866:	87 95       	ror	r24
    1868:	97 f9       	bld	r25, 7
    186a:	08 95       	ret

0000186c <__fp_norm2>:
    186c:	91 50       	subi	r25, 0x01	; 1
    186e:	50 40       	sbci	r21, 0x00	; 0
    1870:	66 0f       	add	r22, r22
    1872:	77 1f       	adc	r23, r23
    1874:	88 1f       	adc	r24, r24
    1876:	d2 f7       	brpl	.-12     	; 0x186c <__fp_norm2>
    1878:	08 95       	ret
    187a:	ba ce       	rjmp	.-652    	; 0x15f0 <__fp_nan>

0000187c <__fp_rempio2>:
    187c:	19 df       	rcall	.-462    	; 0x16b0 <__fp_splitA>
    187e:	e8 f3       	brcs	.-6      	; 0x187a <__fp_norm2+0xe>
    1880:	e8 94       	clt
    1882:	e0 e0       	ldi	r30, 0x00	; 0
    1884:	bb 27       	eor	r27, r27
    1886:	9f 57       	subi	r25, 0x7F	; 127
    1888:	f0 f0       	brcs	.+60     	; 0x18c6 <__fp_rempio2+0x4a>
    188a:	2a ed       	ldi	r18, 0xDA	; 218
    188c:	3f e0       	ldi	r19, 0x0F	; 15
    188e:	49 ec       	ldi	r20, 0xC9	; 201
    1890:	06 c0       	rjmp	.+12     	; 0x189e <__fp_rempio2+0x22>
    1892:	ee 0f       	add	r30, r30
    1894:	bb 0f       	add	r27, r27
    1896:	66 1f       	adc	r22, r22
    1898:	77 1f       	adc	r23, r23
    189a:	88 1f       	adc	r24, r24
    189c:	28 f0       	brcs	.+10     	; 0x18a8 <__fp_rempio2+0x2c>
    189e:	b2 3a       	cpi	r27, 0xA2	; 162
    18a0:	62 07       	cpc	r22, r18
    18a2:	73 07       	cpc	r23, r19
    18a4:	84 07       	cpc	r24, r20
    18a6:	28 f0       	brcs	.+10     	; 0x18b2 <__fp_rempio2+0x36>
    18a8:	b2 5a       	subi	r27, 0xA2	; 162
    18aa:	62 0b       	sbc	r22, r18
    18ac:	73 0b       	sbc	r23, r19
    18ae:	84 0b       	sbc	r24, r20
    18b0:	e3 95       	inc	r30
    18b2:	9a 95       	dec	r25
    18b4:	72 f7       	brpl	.-36     	; 0x1892 <__fp_rempio2+0x16>
    18b6:	80 38       	cpi	r24, 0x80	; 128
    18b8:	30 f4       	brcc	.+12     	; 0x18c6 <__fp_rempio2+0x4a>
    18ba:	9a 95       	dec	r25
    18bc:	bb 0f       	add	r27, r27
    18be:	66 1f       	adc	r22, r22
    18c0:	77 1f       	adc	r23, r23
    18c2:	88 1f       	adc	r24, r24
    18c4:	d2 f7       	brpl	.-12     	; 0x18ba <__fp_rempio2+0x3e>
    18c6:	90 48       	sbci	r25, 0x80	; 128
    18c8:	c5 cf       	rjmp	.-118    	; 0x1854 <__fp_mpack_finite>

000018ca <__fp_sinus>:
    18ca:	ef 93       	push	r30
    18cc:	e0 ff       	sbrs	r30, 0
    18ce:	06 c0       	rjmp	.+12     	; 0x18dc <__fp_sinus+0x12>
    18d0:	a2 ea       	ldi	r26, 0xA2	; 162
    18d2:	2a ed       	ldi	r18, 0xDA	; 218
    18d4:	3f e0       	ldi	r19, 0x0F	; 15
    18d6:	49 ec       	ldi	r20, 0xC9	; 201
    18d8:	5f eb       	ldi	r21, 0xBF	; 191
    18da:	01 dd       	rcall	.-1534   	; 0x12de <__addsf3x>
    18dc:	d0 de       	rcall	.-608    	; 0x167e <__fp_round>
    18de:	0f 90       	pop	r0
    18e0:	03 94       	inc	r0
    18e2:	01 fc       	sbrc	r0, 1
    18e4:	90 58       	subi	r25, 0x80	; 128
    18e6:	e0 e2       	ldi	r30, 0x20	; 32
    18e8:	f1 e0       	ldi	r31, 0x01	; 1
    18ea:	aa ce       	rjmp	.-684    	; 0x1640 <__fp_powsodd>

000018ec <__divmodhi4>:
    18ec:	97 fb       	bst	r25, 7
    18ee:	07 2e       	mov	r0, r23
    18f0:	16 f4       	brtc	.+4      	; 0x18f6 <__divmodhi4+0xa>
    18f2:	00 94       	com	r0
    18f4:	06 d0       	rcall	.+12     	; 0x1902 <__divmodhi4_neg1>
    18f6:	77 fd       	sbrc	r23, 7
    18f8:	08 d0       	rcall	.+16     	; 0x190a <__divmodhi4_neg2>
    18fa:	27 d0       	rcall	.+78     	; 0x194a <__udivmodhi4>
    18fc:	07 fc       	sbrc	r0, 7
    18fe:	05 d0       	rcall	.+10     	; 0x190a <__divmodhi4_neg2>
    1900:	3e f4       	brtc	.+14     	; 0x1910 <__divmodhi4_exit>

00001902 <__divmodhi4_neg1>:
    1902:	90 95       	com	r25
    1904:	81 95       	neg	r24
    1906:	9f 4f       	sbci	r25, 0xFF	; 255
    1908:	08 95       	ret

0000190a <__divmodhi4_neg2>:
    190a:	70 95       	com	r23
    190c:	61 95       	neg	r22
    190e:	7f 4f       	sbci	r23, 0xFF	; 255

00001910 <__divmodhi4_exit>:
    1910:	08 95       	ret

00001912 <__divmodsi4>:
    1912:	05 2e       	mov	r0, r21
    1914:	97 fb       	bst	r25, 7
    1916:	16 f4       	brtc	.+4      	; 0x191c <__divmodsi4+0xa>
    1918:	00 94       	com	r0
    191a:	0f d0       	rcall	.+30     	; 0x193a <__negsi2>
    191c:	57 fd       	sbrc	r21, 7
    191e:	05 d0       	rcall	.+10     	; 0x192a <__divmodsi4_neg2>
    1920:	28 d0       	rcall	.+80     	; 0x1972 <__udivmodsi4>
    1922:	07 fc       	sbrc	r0, 7
    1924:	02 d0       	rcall	.+4      	; 0x192a <__divmodsi4_neg2>
    1926:	46 f4       	brtc	.+16     	; 0x1938 <__divmodsi4_exit>
    1928:	08 c0       	rjmp	.+16     	; 0x193a <__negsi2>

0000192a <__divmodsi4_neg2>:
    192a:	50 95       	com	r21
    192c:	40 95       	com	r20
    192e:	30 95       	com	r19
    1930:	21 95       	neg	r18
    1932:	3f 4f       	sbci	r19, 0xFF	; 255
    1934:	4f 4f       	sbci	r20, 0xFF	; 255
    1936:	5f 4f       	sbci	r21, 0xFF	; 255

00001938 <__divmodsi4_exit>:
    1938:	08 95       	ret

0000193a <__negsi2>:
    193a:	90 95       	com	r25
    193c:	80 95       	com	r24
    193e:	70 95       	com	r23
    1940:	61 95       	neg	r22
    1942:	7f 4f       	sbci	r23, 0xFF	; 255
    1944:	8f 4f       	sbci	r24, 0xFF	; 255
    1946:	9f 4f       	sbci	r25, 0xFF	; 255
    1948:	08 95       	ret

0000194a <__udivmodhi4>:
    194a:	aa 1b       	sub	r26, r26
    194c:	bb 1b       	sub	r27, r27
    194e:	51 e1       	ldi	r21, 0x11	; 17
    1950:	07 c0       	rjmp	.+14     	; 0x1960 <__udivmodhi4_ep>

00001952 <__udivmodhi4_loop>:
    1952:	aa 1f       	adc	r26, r26
    1954:	bb 1f       	adc	r27, r27
    1956:	a6 17       	cp	r26, r22
    1958:	b7 07       	cpc	r27, r23
    195a:	10 f0       	brcs	.+4      	; 0x1960 <__udivmodhi4_ep>
    195c:	a6 1b       	sub	r26, r22
    195e:	b7 0b       	sbc	r27, r23

00001960 <__udivmodhi4_ep>:
    1960:	88 1f       	adc	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	5a 95       	dec	r21
    1966:	a9 f7       	brne	.-22     	; 0x1952 <__udivmodhi4_loop>
    1968:	80 95       	com	r24
    196a:	90 95       	com	r25
    196c:	bc 01       	movw	r22, r24
    196e:	cd 01       	movw	r24, r26
    1970:	08 95       	ret

00001972 <__udivmodsi4>:
    1972:	a1 e2       	ldi	r26, 0x21	; 33
    1974:	1a 2e       	mov	r1, r26
    1976:	aa 1b       	sub	r26, r26
    1978:	bb 1b       	sub	r27, r27
    197a:	fd 01       	movw	r30, r26
    197c:	0d c0       	rjmp	.+26     	; 0x1998 <__udivmodsi4_ep>

0000197e <__udivmodsi4_loop>:
    197e:	aa 1f       	adc	r26, r26
    1980:	bb 1f       	adc	r27, r27
    1982:	ee 1f       	adc	r30, r30
    1984:	ff 1f       	adc	r31, r31
    1986:	a2 17       	cp	r26, r18
    1988:	b3 07       	cpc	r27, r19
    198a:	e4 07       	cpc	r30, r20
    198c:	f5 07       	cpc	r31, r21
    198e:	20 f0       	brcs	.+8      	; 0x1998 <__udivmodsi4_ep>
    1990:	a2 1b       	sub	r26, r18
    1992:	b3 0b       	sbc	r27, r19
    1994:	e4 0b       	sbc	r30, r20
    1996:	f5 0b       	sbc	r31, r21

00001998 <__udivmodsi4_ep>:
    1998:	66 1f       	adc	r22, r22
    199a:	77 1f       	adc	r23, r23
    199c:	88 1f       	adc	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	1a 94       	dec	r1
    19a2:	69 f7       	brne	.-38     	; 0x197e <__udivmodsi4_loop>
    19a4:	60 95       	com	r22
    19a6:	70 95       	com	r23
    19a8:	80 95       	com	r24
    19aa:	90 95       	com	r25
    19ac:	9b 01       	movw	r18, r22
    19ae:	ac 01       	movw	r20, r24
    19b0:	bd 01       	movw	r22, r26
    19b2:	cf 01       	movw	r24, r30
    19b4:	08 95       	ret

000019b6 <__itoa_ncheck>:
    19b6:	bb 27       	eor	r27, r27
    19b8:	4a 30       	cpi	r20, 0x0A	; 10
    19ba:	31 f4       	brne	.+12     	; 0x19c8 <__itoa_ncheck+0x12>
    19bc:	99 23       	and	r25, r25
    19be:	22 f4       	brpl	.+8      	; 0x19c8 <__itoa_ncheck+0x12>
    19c0:	bd e2       	ldi	r27, 0x2D	; 45
    19c2:	90 95       	com	r25
    19c4:	81 95       	neg	r24
    19c6:	9f 4f       	sbci	r25, 0xFF	; 255
    19c8:	01 c0       	rjmp	.+2      	; 0x19cc <__utoa_common>

000019ca <__utoa_ncheck>:
    19ca:	bb 27       	eor	r27, r27

000019cc <__utoa_common>:
    19cc:	fb 01       	movw	r30, r22
    19ce:	55 27       	eor	r21, r21
    19d0:	aa 27       	eor	r26, r26
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	aa 1f       	adc	r26, r26
    19d8:	a4 17       	cp	r26, r20
    19da:	10 f0       	brcs	.+4      	; 0x19e0 <__utoa_common+0x14>
    19dc:	a4 1b       	sub	r26, r20
    19de:	83 95       	inc	r24
    19e0:	50 51       	subi	r21, 0x10	; 16
    19e2:	b9 f7       	brne	.-18     	; 0x19d2 <__utoa_common+0x6>
    19e4:	a0 5d       	subi	r26, 0xD0	; 208
    19e6:	aa 33       	cpi	r26, 0x3A	; 58
    19e8:	08 f0       	brcs	.+2      	; 0x19ec <__utoa_common+0x20>
    19ea:	a9 5d       	subi	r26, 0xD9	; 217
    19ec:	a1 93       	st	Z+, r26
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	79 f7       	brne	.-34     	; 0x19d0 <__utoa_common+0x4>
    19f2:	b1 11       	cpse	r27, r1
    19f4:	b1 93       	st	Z+, r27
    19f6:	11 92       	st	Z+, r1
    19f8:	cb 01       	movw	r24, r22
    19fa:	e7 c3       	rjmp	.+1998   	; 0x21ca <strrev>

000019fc <fdevopen>:
    19fc:	0f 93       	push	r16
    19fe:	1f 93       	push	r17
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	31 f4       	brne	.+12     	; 0x1a14 <fdevopen+0x18>
    1a08:	61 15       	cp	r22, r1
    1a0a:	71 05       	cpc	r23, r1
    1a0c:	19 f4       	brne	.+6      	; 0x1a14 <fdevopen+0x18>
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	39 c0       	rjmp	.+114    	; 0x1a86 <fdevopen+0x8a>
    1a14:	8b 01       	movw	r16, r22
    1a16:	ec 01       	movw	r28, r24
    1a18:	6e e0       	ldi	r22, 0x0E	; 14
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	7c d2       	rcall	.+1272   	; 0x1f1a <calloc>
    1a22:	fc 01       	movw	r30, r24
    1a24:	89 2b       	or	r24, r25
    1a26:	99 f3       	breq	.-26     	; 0x1a0e <fdevopen+0x12>
    1a28:	80 e8       	ldi	r24, 0x80	; 128
    1a2a:	83 83       	std	Z+3, r24	; 0x03
    1a2c:	01 15       	cp	r16, r1
    1a2e:	11 05       	cpc	r17, r1
    1a30:	71 f0       	breq	.+28     	; 0x1a4e <fdevopen+0x52>
    1a32:	13 87       	std	Z+11, r17	; 0x0b
    1a34:	02 87       	std	Z+10, r16	; 0x0a
    1a36:	81 e8       	ldi	r24, 0x81	; 129
    1a38:	83 83       	std	Z+3, r24	; 0x03
    1a3a:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <__iob>
    1a3e:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <__iob+0x1>
    1a42:	89 2b       	or	r24, r25
    1a44:	21 f4       	brne	.+8      	; 0x1a4e <fdevopen+0x52>
    1a46:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <__iob+0x1>
    1a4a:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <__iob>
    1a4e:	20 97       	sbiw	r28, 0x00	; 0
    1a50:	c9 f0       	breq	.+50     	; 0x1a84 <fdevopen+0x88>
    1a52:	d1 87       	std	Z+9, r29	; 0x09
    1a54:	c0 87       	std	Z+8, r28	; 0x08
    1a56:	83 81       	ldd	r24, Z+3	; 0x03
    1a58:	82 60       	ori	r24, 0x02	; 2
    1a5a:	83 83       	std	Z+3, r24	; 0x03
    1a5c:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__iob+0x2>
    1a60:	90 91 54 04 	lds	r25, 0x0454	; 0x800454 <__iob+0x3>
    1a64:	89 2b       	or	r24, r25
    1a66:	71 f4       	brne	.+28     	; 0x1a84 <fdevopen+0x88>
    1a68:	f0 93 54 04 	sts	0x0454, r31	; 0x800454 <__iob+0x3>
    1a6c:	e0 93 53 04 	sts	0x0453, r30	; 0x800453 <__iob+0x2>
    1a70:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__iob+0x4>
    1a74:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <__iob+0x5>
    1a78:	89 2b       	or	r24, r25
    1a7a:	21 f4       	brne	.+8      	; 0x1a84 <fdevopen+0x88>
    1a7c:	f0 93 56 04 	sts	0x0456, r31	; 0x800456 <__iob+0x5>
    1a80:	e0 93 55 04 	sts	0x0455, r30	; 0x800455 <__iob+0x4>
    1a84:	cf 01       	movw	r24, r30
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	1f 91       	pop	r17
    1a8c:	0f 91       	pop	r16
    1a8e:	08 95       	ret

00001a90 <printf>:
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	ae 01       	movw	r20, r28
    1a9a:	4a 5f       	subi	r20, 0xFA	; 250
    1a9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a9e:	fa 01       	movw	r30, r20
    1aa0:	61 91       	ld	r22, Z+
    1aa2:	71 91       	ld	r23, Z+
    1aa4:	af 01       	movw	r20, r30
    1aa6:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__iob+0x2>
    1aaa:	90 91 54 04 	lds	r25, 0x0454	; 0x800454 <__iob+0x3>
    1aae:	38 d0       	rcall	.+112    	; 0x1b20 <vfprintf>
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	08 95       	ret

00001ab6 <putchar>:
    1ab6:	60 91 53 04 	lds	r22, 0x0453	; 0x800453 <__iob+0x2>
    1aba:	70 91 54 04 	lds	r23, 0x0454	; 0x800454 <__iob+0x3>
    1abe:	95 c3       	rjmp	.+1834   	; 0x21ea <fputc>

00001ac0 <puts>:
    1ac0:	0f 93       	push	r16
    1ac2:	1f 93       	push	r17
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	e0 91 53 04 	lds	r30, 0x0453	; 0x800453 <__iob+0x2>
    1acc:	f0 91 54 04 	lds	r31, 0x0454	; 0x800454 <__iob+0x3>
    1ad0:	23 81       	ldd	r18, Z+3	; 0x03
    1ad2:	21 ff       	sbrs	r18, 1
    1ad4:	1b c0       	rjmp	.+54     	; 0x1b0c <puts+0x4c>
    1ad6:	8c 01       	movw	r16, r24
    1ad8:	d0 e0       	ldi	r29, 0x00	; 0
    1ada:	c0 e0       	ldi	r28, 0x00	; 0
    1adc:	f8 01       	movw	r30, r16
    1ade:	81 91       	ld	r24, Z+
    1ae0:	8f 01       	movw	r16, r30
    1ae2:	60 91 53 04 	lds	r22, 0x0453	; 0x800453 <__iob+0x2>
    1ae6:	70 91 54 04 	lds	r23, 0x0454	; 0x800454 <__iob+0x3>
    1aea:	db 01       	movw	r26, r22
    1aec:	18 96       	adiw	r26, 0x08	; 8
    1aee:	ed 91       	ld	r30, X+
    1af0:	fc 91       	ld	r31, X
    1af2:	19 97       	sbiw	r26, 0x09	; 9
    1af4:	88 23       	and	r24, r24
    1af6:	31 f0       	breq	.+12     	; 0x1b04 <puts+0x44>
    1af8:	19 95       	eicall
    1afa:	89 2b       	or	r24, r25
    1afc:	79 f3       	breq	.-34     	; 0x1adc <puts+0x1c>
    1afe:	df ef       	ldi	r29, 0xFF	; 255
    1b00:	cf ef       	ldi	r28, 0xFF	; 255
    1b02:	ec cf       	rjmp	.-40     	; 0x1adc <puts+0x1c>
    1b04:	8a e0       	ldi	r24, 0x0A	; 10
    1b06:	19 95       	eicall
    1b08:	89 2b       	or	r24, r25
    1b0a:	19 f0       	breq	.+6      	; 0x1b12 <puts+0x52>
    1b0c:	8f ef       	ldi	r24, 0xFF	; 255
    1b0e:	9f ef       	ldi	r25, 0xFF	; 255
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <puts+0x56>
    1b12:	8d 2f       	mov	r24, r29
    1b14:	9c 2f       	mov	r25, r28
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	1f 91       	pop	r17
    1b1c:	0f 91       	pop	r16
    1b1e:	08 95       	ret

00001b20 <vfprintf>:
    1b20:	2f 92       	push	r2
    1b22:	3f 92       	push	r3
    1b24:	4f 92       	push	r4
    1b26:	5f 92       	push	r5
    1b28:	6f 92       	push	r6
    1b2a:	7f 92       	push	r7
    1b2c:	8f 92       	push	r8
    1b2e:	9f 92       	push	r9
    1b30:	af 92       	push	r10
    1b32:	bf 92       	push	r11
    1b34:	cf 92       	push	r12
    1b36:	df 92       	push	r13
    1b38:	ef 92       	push	r14
    1b3a:	ff 92       	push	r15
    1b3c:	0f 93       	push	r16
    1b3e:	1f 93       	push	r17
    1b40:	cf 93       	push	r28
    1b42:	df 93       	push	r29
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    1b48:	2b 97       	sbiw	r28, 0x0b	; 11
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	6c 01       	movw	r12, r24
    1b56:	7b 01       	movw	r14, r22
    1b58:	8a 01       	movw	r16, r20
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	17 82       	std	Z+7, r1	; 0x07
    1b5e:	16 82       	std	Z+6, r1	; 0x06
    1b60:	83 81       	ldd	r24, Z+3	; 0x03
    1b62:	81 ff       	sbrs	r24, 1
    1b64:	bf c1       	rjmp	.+894    	; 0x1ee4 <vfprintf+0x3c4>
    1b66:	ce 01       	movw	r24, r28
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	3c 01       	movw	r6, r24
    1b6c:	f6 01       	movw	r30, r12
    1b6e:	93 81       	ldd	r25, Z+3	; 0x03
    1b70:	f7 01       	movw	r30, r14
    1b72:	93 fd       	sbrc	r25, 3
    1b74:	85 91       	lpm	r24, Z+
    1b76:	93 ff       	sbrs	r25, 3
    1b78:	81 91       	ld	r24, Z+
    1b7a:	7f 01       	movw	r14, r30
    1b7c:	88 23       	and	r24, r24
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <vfprintf+0x62>
    1b80:	ad c1       	rjmp	.+858    	; 0x1edc <vfprintf+0x3bc>
    1b82:	85 32       	cpi	r24, 0x25	; 37
    1b84:	39 f4       	brne	.+14     	; 0x1b94 <vfprintf+0x74>
    1b86:	93 fd       	sbrc	r25, 3
    1b88:	85 91       	lpm	r24, Z+
    1b8a:	93 ff       	sbrs	r25, 3
    1b8c:	81 91       	ld	r24, Z+
    1b8e:	7f 01       	movw	r14, r30
    1b90:	85 32       	cpi	r24, 0x25	; 37
    1b92:	21 f4       	brne	.+8      	; 0x1b9c <vfprintf+0x7c>
    1b94:	b6 01       	movw	r22, r12
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	28 d3       	rcall	.+1616   	; 0x21ea <fputc>
    1b9a:	e8 cf       	rjmp	.-48     	; 0x1b6c <vfprintf+0x4c>
    1b9c:	91 2c       	mov	r9, r1
    1b9e:	21 2c       	mov	r2, r1
    1ba0:	31 2c       	mov	r3, r1
    1ba2:	ff e1       	ldi	r31, 0x1F	; 31
    1ba4:	f3 15       	cp	r31, r3
    1ba6:	d8 f0       	brcs	.+54     	; 0x1bde <vfprintf+0xbe>
    1ba8:	8b 32       	cpi	r24, 0x2B	; 43
    1baa:	79 f0       	breq	.+30     	; 0x1bca <vfprintf+0xaa>
    1bac:	38 f4       	brcc	.+14     	; 0x1bbc <vfprintf+0x9c>
    1bae:	80 32       	cpi	r24, 0x20	; 32
    1bb0:	79 f0       	breq	.+30     	; 0x1bd0 <vfprintf+0xb0>
    1bb2:	83 32       	cpi	r24, 0x23	; 35
    1bb4:	a1 f4       	brne	.+40     	; 0x1bde <vfprintf+0xbe>
    1bb6:	23 2d       	mov	r18, r3
    1bb8:	20 61       	ori	r18, 0x10	; 16
    1bba:	1d c0       	rjmp	.+58     	; 0x1bf6 <vfprintf+0xd6>
    1bbc:	8d 32       	cpi	r24, 0x2D	; 45
    1bbe:	61 f0       	breq	.+24     	; 0x1bd8 <vfprintf+0xb8>
    1bc0:	80 33       	cpi	r24, 0x30	; 48
    1bc2:	69 f4       	brne	.+26     	; 0x1bde <vfprintf+0xbe>
    1bc4:	23 2d       	mov	r18, r3
    1bc6:	21 60       	ori	r18, 0x01	; 1
    1bc8:	16 c0       	rjmp	.+44     	; 0x1bf6 <vfprintf+0xd6>
    1bca:	83 2d       	mov	r24, r3
    1bcc:	82 60       	ori	r24, 0x02	; 2
    1bce:	38 2e       	mov	r3, r24
    1bd0:	e3 2d       	mov	r30, r3
    1bd2:	e4 60       	ori	r30, 0x04	; 4
    1bd4:	3e 2e       	mov	r3, r30
    1bd6:	2a c0       	rjmp	.+84     	; 0x1c2c <vfprintf+0x10c>
    1bd8:	f3 2d       	mov	r31, r3
    1bda:	f8 60       	ori	r31, 0x08	; 8
    1bdc:	1d c0       	rjmp	.+58     	; 0x1c18 <vfprintf+0xf8>
    1bde:	37 fc       	sbrc	r3, 7
    1be0:	2d c0       	rjmp	.+90     	; 0x1c3c <vfprintf+0x11c>
    1be2:	20 ed       	ldi	r18, 0xD0	; 208
    1be4:	28 0f       	add	r18, r24
    1be6:	2a 30       	cpi	r18, 0x0A	; 10
    1be8:	40 f0       	brcs	.+16     	; 0x1bfa <vfprintf+0xda>
    1bea:	8e 32       	cpi	r24, 0x2E	; 46
    1bec:	b9 f4       	brne	.+46     	; 0x1c1c <vfprintf+0xfc>
    1bee:	36 fc       	sbrc	r3, 6
    1bf0:	75 c1       	rjmp	.+746    	; 0x1edc <vfprintf+0x3bc>
    1bf2:	23 2d       	mov	r18, r3
    1bf4:	20 64       	ori	r18, 0x40	; 64
    1bf6:	32 2e       	mov	r3, r18
    1bf8:	19 c0       	rjmp	.+50     	; 0x1c2c <vfprintf+0x10c>
    1bfa:	36 fe       	sbrs	r3, 6
    1bfc:	06 c0       	rjmp	.+12     	; 0x1c0a <vfprintf+0xea>
    1bfe:	8a e0       	ldi	r24, 0x0A	; 10
    1c00:	98 9e       	mul	r9, r24
    1c02:	20 0d       	add	r18, r0
    1c04:	11 24       	eor	r1, r1
    1c06:	92 2e       	mov	r9, r18
    1c08:	11 c0       	rjmp	.+34     	; 0x1c2c <vfprintf+0x10c>
    1c0a:	ea e0       	ldi	r30, 0x0A	; 10
    1c0c:	2e 9e       	mul	r2, r30
    1c0e:	20 0d       	add	r18, r0
    1c10:	11 24       	eor	r1, r1
    1c12:	22 2e       	mov	r2, r18
    1c14:	f3 2d       	mov	r31, r3
    1c16:	f0 62       	ori	r31, 0x20	; 32
    1c18:	3f 2e       	mov	r3, r31
    1c1a:	08 c0       	rjmp	.+16     	; 0x1c2c <vfprintf+0x10c>
    1c1c:	8c 36       	cpi	r24, 0x6C	; 108
    1c1e:	21 f4       	brne	.+8      	; 0x1c28 <vfprintf+0x108>
    1c20:	83 2d       	mov	r24, r3
    1c22:	80 68       	ori	r24, 0x80	; 128
    1c24:	38 2e       	mov	r3, r24
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <vfprintf+0x10c>
    1c28:	88 36       	cpi	r24, 0x68	; 104
    1c2a:	41 f4       	brne	.+16     	; 0x1c3c <vfprintf+0x11c>
    1c2c:	f7 01       	movw	r30, r14
    1c2e:	93 fd       	sbrc	r25, 3
    1c30:	85 91       	lpm	r24, Z+
    1c32:	93 ff       	sbrs	r25, 3
    1c34:	81 91       	ld	r24, Z+
    1c36:	7f 01       	movw	r14, r30
    1c38:	81 11       	cpse	r24, r1
    1c3a:	b3 cf       	rjmp	.-154    	; 0x1ba2 <vfprintf+0x82>
    1c3c:	98 2f       	mov	r25, r24
    1c3e:	9f 7d       	andi	r25, 0xDF	; 223
    1c40:	95 54       	subi	r25, 0x45	; 69
    1c42:	93 30       	cpi	r25, 0x03	; 3
    1c44:	28 f4       	brcc	.+10     	; 0x1c50 <vfprintf+0x130>
    1c46:	0c 5f       	subi	r16, 0xFC	; 252
    1c48:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4a:	9f e3       	ldi	r25, 0x3F	; 63
    1c4c:	99 83       	std	Y+1, r25	; 0x01
    1c4e:	0d c0       	rjmp	.+26     	; 0x1c6a <vfprintf+0x14a>
    1c50:	83 36       	cpi	r24, 0x63	; 99
    1c52:	31 f0       	breq	.+12     	; 0x1c60 <vfprintf+0x140>
    1c54:	83 37       	cpi	r24, 0x73	; 115
    1c56:	71 f0       	breq	.+28     	; 0x1c74 <vfprintf+0x154>
    1c58:	83 35       	cpi	r24, 0x53	; 83
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <vfprintf+0x13e>
    1c5c:	55 c0       	rjmp	.+170    	; 0x1d08 <vfprintf+0x1e8>
    1c5e:	20 c0       	rjmp	.+64     	; 0x1ca0 <vfprintf+0x180>
    1c60:	f8 01       	movw	r30, r16
    1c62:	80 81       	ld	r24, Z
    1c64:	89 83       	std	Y+1, r24	; 0x01
    1c66:	0e 5f       	subi	r16, 0xFE	; 254
    1c68:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6a:	88 24       	eor	r8, r8
    1c6c:	83 94       	inc	r8
    1c6e:	91 2c       	mov	r9, r1
    1c70:	53 01       	movw	r10, r6
    1c72:	12 c0       	rjmp	.+36     	; 0x1c98 <vfprintf+0x178>
    1c74:	28 01       	movw	r4, r16
    1c76:	f2 e0       	ldi	r31, 0x02	; 2
    1c78:	4f 0e       	add	r4, r31
    1c7a:	51 1c       	adc	r5, r1
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	a0 80       	ld	r10, Z
    1c80:	b1 80       	ldd	r11, Z+1	; 0x01
    1c82:	36 fe       	sbrs	r3, 6
    1c84:	03 c0       	rjmp	.+6      	; 0x1c8c <vfprintf+0x16c>
    1c86:	69 2d       	mov	r22, r9
    1c88:	70 e0       	ldi	r23, 0x00	; 0
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <vfprintf+0x170>
    1c8c:	6f ef       	ldi	r22, 0xFF	; 255
    1c8e:	7f ef       	ldi	r23, 0xFF	; 255
    1c90:	c5 01       	movw	r24, r10
    1c92:	90 d2       	rcall	.+1312   	; 0x21b4 <strnlen>
    1c94:	4c 01       	movw	r8, r24
    1c96:	82 01       	movw	r16, r4
    1c98:	f3 2d       	mov	r31, r3
    1c9a:	ff 77       	andi	r31, 0x7F	; 127
    1c9c:	3f 2e       	mov	r3, r31
    1c9e:	15 c0       	rjmp	.+42     	; 0x1cca <vfprintf+0x1aa>
    1ca0:	28 01       	movw	r4, r16
    1ca2:	22 e0       	ldi	r18, 0x02	; 2
    1ca4:	42 0e       	add	r4, r18
    1ca6:	51 1c       	adc	r5, r1
    1ca8:	f8 01       	movw	r30, r16
    1caa:	a0 80       	ld	r10, Z
    1cac:	b1 80       	ldd	r11, Z+1	; 0x01
    1cae:	36 fe       	sbrs	r3, 6
    1cb0:	03 c0       	rjmp	.+6      	; 0x1cb8 <vfprintf+0x198>
    1cb2:	69 2d       	mov	r22, r9
    1cb4:	70 e0       	ldi	r23, 0x00	; 0
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <vfprintf+0x19c>
    1cb8:	6f ef       	ldi	r22, 0xFF	; 255
    1cba:	7f ef       	ldi	r23, 0xFF	; 255
    1cbc:	c5 01       	movw	r24, r10
    1cbe:	68 d2       	rcall	.+1232   	; 0x2190 <strnlen_P>
    1cc0:	4c 01       	movw	r8, r24
    1cc2:	f3 2d       	mov	r31, r3
    1cc4:	f0 68       	ori	r31, 0x80	; 128
    1cc6:	3f 2e       	mov	r3, r31
    1cc8:	82 01       	movw	r16, r4
    1cca:	33 fc       	sbrc	r3, 3
    1ccc:	19 c0       	rjmp	.+50     	; 0x1d00 <vfprintf+0x1e0>
    1cce:	82 2d       	mov	r24, r2
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	88 16       	cp	r8, r24
    1cd4:	99 06       	cpc	r9, r25
    1cd6:	a0 f4       	brcc	.+40     	; 0x1d00 <vfprintf+0x1e0>
    1cd8:	b6 01       	movw	r22, r12
    1cda:	80 e2       	ldi	r24, 0x20	; 32
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	85 d2       	rcall	.+1290   	; 0x21ea <fputc>
    1ce0:	2a 94       	dec	r2
    1ce2:	f5 cf       	rjmp	.-22     	; 0x1cce <vfprintf+0x1ae>
    1ce4:	f5 01       	movw	r30, r10
    1ce6:	37 fc       	sbrc	r3, 7
    1ce8:	85 91       	lpm	r24, Z+
    1cea:	37 fe       	sbrs	r3, 7
    1cec:	81 91       	ld	r24, Z+
    1cee:	5f 01       	movw	r10, r30
    1cf0:	b6 01       	movw	r22, r12
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	7a d2       	rcall	.+1268   	; 0x21ea <fputc>
    1cf6:	21 10       	cpse	r2, r1
    1cf8:	2a 94       	dec	r2
    1cfa:	21 e0       	ldi	r18, 0x01	; 1
    1cfc:	82 1a       	sub	r8, r18
    1cfe:	91 08       	sbc	r9, r1
    1d00:	81 14       	cp	r8, r1
    1d02:	91 04       	cpc	r9, r1
    1d04:	79 f7       	brne	.-34     	; 0x1ce4 <vfprintf+0x1c4>
    1d06:	e1 c0       	rjmp	.+450    	; 0x1eca <vfprintf+0x3aa>
    1d08:	84 36       	cpi	r24, 0x64	; 100
    1d0a:	11 f0       	breq	.+4      	; 0x1d10 <vfprintf+0x1f0>
    1d0c:	89 36       	cpi	r24, 0x69	; 105
    1d0e:	39 f5       	brne	.+78     	; 0x1d5e <vfprintf+0x23e>
    1d10:	f8 01       	movw	r30, r16
    1d12:	37 fe       	sbrs	r3, 7
    1d14:	07 c0       	rjmp	.+14     	; 0x1d24 <vfprintf+0x204>
    1d16:	60 81       	ld	r22, Z
    1d18:	71 81       	ldd	r23, Z+1	; 0x01
    1d1a:	82 81       	ldd	r24, Z+2	; 0x02
    1d1c:	93 81       	ldd	r25, Z+3	; 0x03
    1d1e:	0c 5f       	subi	r16, 0xFC	; 252
    1d20:	1f 4f       	sbci	r17, 0xFF	; 255
    1d22:	08 c0       	rjmp	.+16     	; 0x1d34 <vfprintf+0x214>
    1d24:	60 81       	ld	r22, Z
    1d26:	71 81       	ldd	r23, Z+1	; 0x01
    1d28:	07 2e       	mov	r0, r23
    1d2a:	00 0c       	add	r0, r0
    1d2c:	88 0b       	sbc	r24, r24
    1d2e:	99 0b       	sbc	r25, r25
    1d30:	0e 5f       	subi	r16, 0xFE	; 254
    1d32:	1f 4f       	sbci	r17, 0xFF	; 255
    1d34:	f3 2d       	mov	r31, r3
    1d36:	ff 76       	andi	r31, 0x6F	; 111
    1d38:	3f 2e       	mov	r3, r31
    1d3a:	97 ff       	sbrs	r25, 7
    1d3c:	09 c0       	rjmp	.+18     	; 0x1d50 <vfprintf+0x230>
    1d3e:	90 95       	com	r25
    1d40:	80 95       	com	r24
    1d42:	70 95       	com	r23
    1d44:	61 95       	neg	r22
    1d46:	7f 4f       	sbci	r23, 0xFF	; 255
    1d48:	8f 4f       	sbci	r24, 0xFF	; 255
    1d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4c:	f0 68       	ori	r31, 0x80	; 128
    1d4e:	3f 2e       	mov	r3, r31
    1d50:	2a e0       	ldi	r18, 0x0A	; 10
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	a3 01       	movw	r20, r6
    1d56:	85 d2       	rcall	.+1290   	; 0x2262 <__ultoa_invert>
    1d58:	88 2e       	mov	r8, r24
    1d5a:	86 18       	sub	r8, r6
    1d5c:	44 c0       	rjmp	.+136    	; 0x1de6 <vfprintf+0x2c6>
    1d5e:	85 37       	cpi	r24, 0x75	; 117
    1d60:	31 f4       	brne	.+12     	; 0x1d6e <vfprintf+0x24e>
    1d62:	23 2d       	mov	r18, r3
    1d64:	2f 7e       	andi	r18, 0xEF	; 239
    1d66:	b2 2e       	mov	r11, r18
    1d68:	2a e0       	ldi	r18, 0x0A	; 10
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	25 c0       	rjmp	.+74     	; 0x1db8 <vfprintf+0x298>
    1d6e:	93 2d       	mov	r25, r3
    1d70:	99 7f       	andi	r25, 0xF9	; 249
    1d72:	b9 2e       	mov	r11, r25
    1d74:	8f 36       	cpi	r24, 0x6F	; 111
    1d76:	c1 f0       	breq	.+48     	; 0x1da8 <vfprintf+0x288>
    1d78:	18 f4       	brcc	.+6      	; 0x1d80 <vfprintf+0x260>
    1d7a:	88 35       	cpi	r24, 0x58	; 88
    1d7c:	79 f0       	breq	.+30     	; 0x1d9c <vfprintf+0x27c>
    1d7e:	ae c0       	rjmp	.+348    	; 0x1edc <vfprintf+0x3bc>
    1d80:	80 37       	cpi	r24, 0x70	; 112
    1d82:	19 f0       	breq	.+6      	; 0x1d8a <vfprintf+0x26a>
    1d84:	88 37       	cpi	r24, 0x78	; 120
    1d86:	21 f0       	breq	.+8      	; 0x1d90 <vfprintf+0x270>
    1d88:	a9 c0       	rjmp	.+338    	; 0x1edc <vfprintf+0x3bc>
    1d8a:	e9 2f       	mov	r30, r25
    1d8c:	e0 61       	ori	r30, 0x10	; 16
    1d8e:	be 2e       	mov	r11, r30
    1d90:	b4 fe       	sbrs	r11, 4
    1d92:	0d c0       	rjmp	.+26     	; 0x1dae <vfprintf+0x28e>
    1d94:	fb 2d       	mov	r31, r11
    1d96:	f4 60       	ori	r31, 0x04	; 4
    1d98:	bf 2e       	mov	r11, r31
    1d9a:	09 c0       	rjmp	.+18     	; 0x1dae <vfprintf+0x28e>
    1d9c:	34 fe       	sbrs	r3, 4
    1d9e:	0a c0       	rjmp	.+20     	; 0x1db4 <vfprintf+0x294>
    1da0:	29 2f       	mov	r18, r25
    1da2:	26 60       	ori	r18, 0x06	; 6
    1da4:	b2 2e       	mov	r11, r18
    1da6:	06 c0       	rjmp	.+12     	; 0x1db4 <vfprintf+0x294>
    1da8:	28 e0       	ldi	r18, 0x08	; 8
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	05 c0       	rjmp	.+10     	; 0x1db8 <vfprintf+0x298>
    1dae:	20 e1       	ldi	r18, 0x10	; 16
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <vfprintf+0x298>
    1db4:	20 e1       	ldi	r18, 0x10	; 16
    1db6:	32 e0       	ldi	r19, 0x02	; 2
    1db8:	f8 01       	movw	r30, r16
    1dba:	b7 fe       	sbrs	r11, 7
    1dbc:	07 c0       	rjmp	.+14     	; 0x1dcc <vfprintf+0x2ac>
    1dbe:	60 81       	ld	r22, Z
    1dc0:	71 81       	ldd	r23, Z+1	; 0x01
    1dc2:	82 81       	ldd	r24, Z+2	; 0x02
    1dc4:	93 81       	ldd	r25, Z+3	; 0x03
    1dc6:	0c 5f       	subi	r16, 0xFC	; 252
    1dc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dca:	06 c0       	rjmp	.+12     	; 0x1dd8 <vfprintf+0x2b8>
    1dcc:	60 81       	ld	r22, Z
    1dce:	71 81       	ldd	r23, Z+1	; 0x01
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	0e 5f       	subi	r16, 0xFE	; 254
    1dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd8:	a3 01       	movw	r20, r6
    1dda:	43 d2       	rcall	.+1158   	; 0x2262 <__ultoa_invert>
    1ddc:	88 2e       	mov	r8, r24
    1dde:	86 18       	sub	r8, r6
    1de0:	fb 2d       	mov	r31, r11
    1de2:	ff 77       	andi	r31, 0x7F	; 127
    1de4:	3f 2e       	mov	r3, r31
    1de6:	36 fe       	sbrs	r3, 6
    1de8:	0d c0       	rjmp	.+26     	; 0x1e04 <vfprintf+0x2e4>
    1dea:	23 2d       	mov	r18, r3
    1dec:	2e 7f       	andi	r18, 0xFE	; 254
    1dee:	a2 2e       	mov	r10, r18
    1df0:	89 14       	cp	r8, r9
    1df2:	58 f4       	brcc	.+22     	; 0x1e0a <vfprintf+0x2ea>
    1df4:	34 fe       	sbrs	r3, 4
    1df6:	0b c0       	rjmp	.+22     	; 0x1e0e <vfprintf+0x2ee>
    1df8:	32 fc       	sbrc	r3, 2
    1dfa:	09 c0       	rjmp	.+18     	; 0x1e0e <vfprintf+0x2ee>
    1dfc:	83 2d       	mov	r24, r3
    1dfe:	8e 7e       	andi	r24, 0xEE	; 238
    1e00:	a8 2e       	mov	r10, r24
    1e02:	05 c0       	rjmp	.+10     	; 0x1e0e <vfprintf+0x2ee>
    1e04:	b8 2c       	mov	r11, r8
    1e06:	a3 2c       	mov	r10, r3
    1e08:	03 c0       	rjmp	.+6      	; 0x1e10 <vfprintf+0x2f0>
    1e0a:	b8 2c       	mov	r11, r8
    1e0c:	01 c0       	rjmp	.+2      	; 0x1e10 <vfprintf+0x2f0>
    1e0e:	b9 2c       	mov	r11, r9
    1e10:	a4 fe       	sbrs	r10, 4
    1e12:	0f c0       	rjmp	.+30     	; 0x1e32 <vfprintf+0x312>
    1e14:	fe 01       	movw	r30, r28
    1e16:	e8 0d       	add	r30, r8
    1e18:	f1 1d       	adc	r31, r1
    1e1a:	80 81       	ld	r24, Z
    1e1c:	80 33       	cpi	r24, 0x30	; 48
    1e1e:	21 f4       	brne	.+8      	; 0x1e28 <vfprintf+0x308>
    1e20:	9a 2d       	mov	r25, r10
    1e22:	99 7e       	andi	r25, 0xE9	; 233
    1e24:	a9 2e       	mov	r10, r25
    1e26:	09 c0       	rjmp	.+18     	; 0x1e3a <vfprintf+0x31a>
    1e28:	a2 fe       	sbrs	r10, 2
    1e2a:	06 c0       	rjmp	.+12     	; 0x1e38 <vfprintf+0x318>
    1e2c:	b3 94       	inc	r11
    1e2e:	b3 94       	inc	r11
    1e30:	04 c0       	rjmp	.+8      	; 0x1e3a <vfprintf+0x31a>
    1e32:	8a 2d       	mov	r24, r10
    1e34:	86 78       	andi	r24, 0x86	; 134
    1e36:	09 f0       	breq	.+2      	; 0x1e3a <vfprintf+0x31a>
    1e38:	b3 94       	inc	r11
    1e3a:	a3 fc       	sbrc	r10, 3
    1e3c:	10 c0       	rjmp	.+32     	; 0x1e5e <vfprintf+0x33e>
    1e3e:	a0 fe       	sbrs	r10, 0
    1e40:	06 c0       	rjmp	.+12     	; 0x1e4e <vfprintf+0x32e>
    1e42:	b2 14       	cp	r11, r2
    1e44:	80 f4       	brcc	.+32     	; 0x1e66 <vfprintf+0x346>
    1e46:	28 0c       	add	r2, r8
    1e48:	92 2c       	mov	r9, r2
    1e4a:	9b 18       	sub	r9, r11
    1e4c:	0d c0       	rjmp	.+26     	; 0x1e68 <vfprintf+0x348>
    1e4e:	b2 14       	cp	r11, r2
    1e50:	58 f4       	brcc	.+22     	; 0x1e68 <vfprintf+0x348>
    1e52:	b6 01       	movw	r22, r12
    1e54:	80 e2       	ldi	r24, 0x20	; 32
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	c8 d1       	rcall	.+912    	; 0x21ea <fputc>
    1e5a:	b3 94       	inc	r11
    1e5c:	f8 cf       	rjmp	.-16     	; 0x1e4e <vfprintf+0x32e>
    1e5e:	b2 14       	cp	r11, r2
    1e60:	18 f4       	brcc	.+6      	; 0x1e68 <vfprintf+0x348>
    1e62:	2b 18       	sub	r2, r11
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <vfprintf+0x34a>
    1e66:	98 2c       	mov	r9, r8
    1e68:	21 2c       	mov	r2, r1
    1e6a:	a4 fe       	sbrs	r10, 4
    1e6c:	0f c0       	rjmp	.+30     	; 0x1e8c <vfprintf+0x36c>
    1e6e:	b6 01       	movw	r22, r12
    1e70:	80 e3       	ldi	r24, 0x30	; 48
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	ba d1       	rcall	.+884    	; 0x21ea <fputc>
    1e76:	a2 fe       	sbrs	r10, 2
    1e78:	16 c0       	rjmp	.+44     	; 0x1ea6 <vfprintf+0x386>
    1e7a:	a1 fc       	sbrc	r10, 1
    1e7c:	03 c0       	rjmp	.+6      	; 0x1e84 <vfprintf+0x364>
    1e7e:	88 e7       	ldi	r24, 0x78	; 120
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <vfprintf+0x368>
    1e84:	88 e5       	ldi	r24, 0x58	; 88
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	b6 01       	movw	r22, r12
    1e8a:	0c c0       	rjmp	.+24     	; 0x1ea4 <vfprintf+0x384>
    1e8c:	8a 2d       	mov	r24, r10
    1e8e:	86 78       	andi	r24, 0x86	; 134
    1e90:	51 f0       	breq	.+20     	; 0x1ea6 <vfprintf+0x386>
    1e92:	a1 fe       	sbrs	r10, 1
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <vfprintf+0x37a>
    1e96:	8b e2       	ldi	r24, 0x2B	; 43
    1e98:	01 c0       	rjmp	.+2      	; 0x1e9c <vfprintf+0x37c>
    1e9a:	80 e2       	ldi	r24, 0x20	; 32
    1e9c:	a7 fc       	sbrc	r10, 7
    1e9e:	8d e2       	ldi	r24, 0x2D	; 45
    1ea0:	b6 01       	movw	r22, r12
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	a2 d1       	rcall	.+836    	; 0x21ea <fputc>
    1ea6:	89 14       	cp	r8, r9
    1ea8:	30 f4       	brcc	.+12     	; 0x1eb6 <vfprintf+0x396>
    1eaa:	b6 01       	movw	r22, r12
    1eac:	80 e3       	ldi	r24, 0x30	; 48
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9c d1       	rcall	.+824    	; 0x21ea <fputc>
    1eb2:	9a 94       	dec	r9
    1eb4:	f8 cf       	rjmp	.-16     	; 0x1ea6 <vfprintf+0x386>
    1eb6:	8a 94       	dec	r8
    1eb8:	f3 01       	movw	r30, r6
    1eba:	e8 0d       	add	r30, r8
    1ebc:	f1 1d       	adc	r31, r1
    1ebe:	80 81       	ld	r24, Z
    1ec0:	b6 01       	movw	r22, r12
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	92 d1       	rcall	.+804    	; 0x21ea <fputc>
    1ec6:	81 10       	cpse	r8, r1
    1ec8:	f6 cf       	rjmp	.-20     	; 0x1eb6 <vfprintf+0x396>
    1eca:	22 20       	and	r2, r2
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <vfprintf+0x3b0>
    1ece:	4e ce       	rjmp	.-868    	; 0x1b6c <vfprintf+0x4c>
    1ed0:	b6 01       	movw	r22, r12
    1ed2:	80 e2       	ldi	r24, 0x20	; 32
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	89 d1       	rcall	.+786    	; 0x21ea <fputc>
    1ed8:	2a 94       	dec	r2
    1eda:	f7 cf       	rjmp	.-18     	; 0x1eca <vfprintf+0x3aa>
    1edc:	f6 01       	movw	r30, r12
    1ede:	86 81       	ldd	r24, Z+6	; 0x06
    1ee0:	97 81       	ldd	r25, Z+7	; 0x07
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <vfprintf+0x3c8>
    1ee4:	8f ef       	ldi	r24, 0xFF	; 255
    1ee6:	9f ef       	ldi	r25, 0xFF	; 255
    1ee8:	2b 96       	adiw	r28, 0x0b	; 11
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	1f 91       	pop	r17
    1efa:	0f 91       	pop	r16
    1efc:	ff 90       	pop	r15
    1efe:	ef 90       	pop	r14
    1f00:	df 90       	pop	r13
    1f02:	cf 90       	pop	r12
    1f04:	bf 90       	pop	r11
    1f06:	af 90       	pop	r10
    1f08:	9f 90       	pop	r9
    1f0a:	8f 90       	pop	r8
    1f0c:	7f 90       	pop	r7
    1f0e:	6f 90       	pop	r6
    1f10:	5f 90       	pop	r5
    1f12:	4f 90       	pop	r4
    1f14:	3f 90       	pop	r3
    1f16:	2f 90       	pop	r2
    1f18:	08 95       	ret

00001f1a <calloc>:
    1f1a:	0f 93       	push	r16
    1f1c:	1f 93       	push	r17
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	86 9f       	mul	r24, r22
    1f24:	80 01       	movw	r16, r0
    1f26:	87 9f       	mul	r24, r23
    1f28:	10 0d       	add	r17, r0
    1f2a:	96 9f       	mul	r25, r22
    1f2c:	10 0d       	add	r17, r0
    1f2e:	11 24       	eor	r1, r1
    1f30:	c8 01       	movw	r24, r16
    1f32:	0d d0       	rcall	.+26     	; 0x1f4e <malloc>
    1f34:	ec 01       	movw	r28, r24
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	21 f0       	breq	.+8      	; 0x1f42 <calloc+0x28>
    1f3a:	a8 01       	movw	r20, r16
    1f3c:	60 e0       	ldi	r22, 0x00	; 0
    1f3e:	70 e0       	ldi	r23, 0x00	; 0
    1f40:	32 d1       	rcall	.+612    	; 0x21a6 <memset>
    1f42:	ce 01       	movw	r24, r28
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	1f 91       	pop	r17
    1f4a:	0f 91       	pop	r16
    1f4c:	08 95       	ret

00001f4e <malloc>:
    1f4e:	0f 93       	push	r16
    1f50:	1f 93       	push	r17
    1f52:	cf 93       	push	r28
    1f54:	df 93       	push	r29
    1f56:	82 30       	cpi	r24, 0x02	; 2
    1f58:	91 05       	cpc	r25, r1
    1f5a:	10 f4       	brcc	.+4      	; 0x1f60 <malloc+0x12>
    1f5c:	82 e0       	ldi	r24, 0x02	; 2
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	e0 91 59 04 	lds	r30, 0x0459	; 0x800459 <__flp>
    1f64:	f0 91 5a 04 	lds	r31, 0x045A	; 0x80045a <__flp+0x1>
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	a0 e0       	ldi	r26, 0x00	; 0
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	30 97       	sbiw	r30, 0x00	; 0
    1f72:	19 f1       	breq	.+70     	; 0x1fba <malloc+0x6c>
    1f74:	40 81       	ld	r20, Z
    1f76:	51 81       	ldd	r21, Z+1	; 0x01
    1f78:	02 81       	ldd	r16, Z+2	; 0x02
    1f7a:	13 81       	ldd	r17, Z+3	; 0x03
    1f7c:	48 17       	cp	r20, r24
    1f7e:	59 07       	cpc	r21, r25
    1f80:	c8 f0       	brcs	.+50     	; 0x1fb4 <malloc+0x66>
    1f82:	84 17       	cp	r24, r20
    1f84:	95 07       	cpc	r25, r21
    1f86:	69 f4       	brne	.+26     	; 0x1fa2 <malloc+0x54>
    1f88:	10 97       	sbiw	r26, 0x00	; 0
    1f8a:	31 f0       	breq	.+12     	; 0x1f98 <malloc+0x4a>
    1f8c:	12 96       	adiw	r26, 0x02	; 2
    1f8e:	0c 93       	st	X, r16
    1f90:	12 97       	sbiw	r26, 0x02	; 2
    1f92:	13 96       	adiw	r26, 0x03	; 3
    1f94:	1c 93       	st	X, r17
    1f96:	27 c0       	rjmp	.+78     	; 0x1fe6 <malloc+0x98>
    1f98:	00 93 59 04 	sts	0x0459, r16	; 0x800459 <__flp>
    1f9c:	10 93 5a 04 	sts	0x045A, r17	; 0x80045a <__flp+0x1>
    1fa0:	22 c0       	rjmp	.+68     	; 0x1fe6 <malloc+0x98>
    1fa2:	21 15       	cp	r18, r1
    1fa4:	31 05       	cpc	r19, r1
    1fa6:	19 f0       	breq	.+6      	; 0x1fae <malloc+0x60>
    1fa8:	42 17       	cp	r20, r18
    1faa:	53 07       	cpc	r21, r19
    1fac:	18 f4       	brcc	.+6      	; 0x1fb4 <malloc+0x66>
    1fae:	9a 01       	movw	r18, r20
    1fb0:	bd 01       	movw	r22, r26
    1fb2:	ef 01       	movw	r28, r30
    1fb4:	df 01       	movw	r26, r30
    1fb6:	f8 01       	movw	r30, r16
    1fb8:	db cf       	rjmp	.-74     	; 0x1f70 <malloc+0x22>
    1fba:	21 15       	cp	r18, r1
    1fbc:	31 05       	cpc	r19, r1
    1fbe:	f9 f0       	breq	.+62     	; 0x1ffe <malloc+0xb0>
    1fc0:	28 1b       	sub	r18, r24
    1fc2:	39 0b       	sbc	r19, r25
    1fc4:	24 30       	cpi	r18, 0x04	; 4
    1fc6:	31 05       	cpc	r19, r1
    1fc8:	80 f4       	brcc	.+32     	; 0x1fea <malloc+0x9c>
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fce:	61 15       	cp	r22, r1
    1fd0:	71 05       	cpc	r23, r1
    1fd2:	21 f0       	breq	.+8      	; 0x1fdc <malloc+0x8e>
    1fd4:	fb 01       	movw	r30, r22
    1fd6:	93 83       	std	Z+3, r25	; 0x03
    1fd8:	82 83       	std	Z+2, r24	; 0x02
    1fda:	04 c0       	rjmp	.+8      	; 0x1fe4 <malloc+0x96>
    1fdc:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <__flp+0x1>
    1fe0:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <__flp>
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	32 96       	adiw	r30, 0x02	; 2
    1fe8:	44 c0       	rjmp	.+136    	; 0x2072 <malloc+0x124>
    1fea:	fe 01       	movw	r30, r28
    1fec:	e2 0f       	add	r30, r18
    1fee:	f3 1f       	adc	r31, r19
    1ff0:	81 93       	st	Z+, r24
    1ff2:	91 93       	st	Z+, r25
    1ff4:	22 50       	subi	r18, 0x02	; 2
    1ff6:	31 09       	sbc	r19, r1
    1ff8:	39 83       	std	Y+1, r19	; 0x01
    1ffa:	28 83       	st	Y, r18
    1ffc:	3a c0       	rjmp	.+116    	; 0x2072 <malloc+0x124>
    1ffe:	20 91 57 04 	lds	r18, 0x0457	; 0x800457 <__brkval>
    2002:	30 91 58 04 	lds	r19, 0x0458	; 0x800458 <__brkval+0x1>
    2006:	23 2b       	or	r18, r19
    2008:	41 f4       	brne	.+16     	; 0x201a <malloc+0xcc>
    200a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    200e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2012:	30 93 58 04 	sts	0x0458, r19	; 0x800458 <__brkval+0x1>
    2016:	20 93 57 04 	sts	0x0457, r18	; 0x800457 <__brkval>
    201a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    201e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    2022:	21 15       	cp	r18, r1
    2024:	31 05       	cpc	r19, r1
    2026:	41 f4       	brne	.+16     	; 0x2038 <malloc+0xea>
    2028:	2d b7       	in	r18, 0x3d	; 61
    202a:	3e b7       	in	r19, 0x3e	; 62
    202c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2030:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2034:	24 1b       	sub	r18, r20
    2036:	35 0b       	sbc	r19, r21
    2038:	e0 91 57 04 	lds	r30, 0x0457	; 0x800457 <__brkval>
    203c:	f0 91 58 04 	lds	r31, 0x0458	; 0x800458 <__brkval+0x1>
    2040:	e2 17       	cp	r30, r18
    2042:	f3 07       	cpc	r31, r19
    2044:	a0 f4       	brcc	.+40     	; 0x206e <malloc+0x120>
    2046:	2e 1b       	sub	r18, r30
    2048:	3f 0b       	sbc	r19, r31
    204a:	28 17       	cp	r18, r24
    204c:	39 07       	cpc	r19, r25
    204e:	78 f0       	brcs	.+30     	; 0x206e <malloc+0x120>
    2050:	ac 01       	movw	r20, r24
    2052:	4e 5f       	subi	r20, 0xFE	; 254
    2054:	5f 4f       	sbci	r21, 0xFF	; 255
    2056:	24 17       	cp	r18, r20
    2058:	35 07       	cpc	r19, r21
    205a:	48 f0       	brcs	.+18     	; 0x206e <malloc+0x120>
    205c:	4e 0f       	add	r20, r30
    205e:	5f 1f       	adc	r21, r31
    2060:	50 93 58 04 	sts	0x0458, r21	; 0x800458 <__brkval+0x1>
    2064:	40 93 57 04 	sts	0x0457, r20	; 0x800457 <__brkval>
    2068:	81 93       	st	Z+, r24
    206a:	91 93       	st	Z+, r25
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <malloc+0x124>
    206e:	e0 e0       	ldi	r30, 0x00	; 0
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	cf 01       	movw	r24, r30
    2074:	df 91       	pop	r29
    2076:	cf 91       	pop	r28
    2078:	1f 91       	pop	r17
    207a:	0f 91       	pop	r16
    207c:	08 95       	ret

0000207e <free>:
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	09 f4       	brne	.+2      	; 0x2088 <free+0xa>
    2086:	81 c0       	rjmp	.+258    	; 0x218a <free+0x10c>
    2088:	fc 01       	movw	r30, r24
    208a:	32 97       	sbiw	r30, 0x02	; 2
    208c:	13 82       	std	Z+3, r1	; 0x03
    208e:	12 82       	std	Z+2, r1	; 0x02
    2090:	a0 91 59 04 	lds	r26, 0x0459	; 0x800459 <__flp>
    2094:	b0 91 5a 04 	lds	r27, 0x045A	; 0x80045a <__flp+0x1>
    2098:	10 97       	sbiw	r26, 0x00	; 0
    209a:	81 f4       	brne	.+32     	; 0x20bc <free+0x3e>
    209c:	20 81       	ld	r18, Z
    209e:	31 81       	ldd	r19, Z+1	; 0x01
    20a0:	82 0f       	add	r24, r18
    20a2:	93 1f       	adc	r25, r19
    20a4:	20 91 57 04 	lds	r18, 0x0457	; 0x800457 <__brkval>
    20a8:	30 91 58 04 	lds	r19, 0x0458	; 0x800458 <__brkval+0x1>
    20ac:	28 17       	cp	r18, r24
    20ae:	39 07       	cpc	r19, r25
    20b0:	51 f5       	brne	.+84     	; 0x2106 <free+0x88>
    20b2:	f0 93 58 04 	sts	0x0458, r31	; 0x800458 <__brkval+0x1>
    20b6:	e0 93 57 04 	sts	0x0457, r30	; 0x800457 <__brkval>
    20ba:	67 c0       	rjmp	.+206    	; 0x218a <free+0x10c>
    20bc:	ed 01       	movw	r28, r26
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	ce 17       	cp	r28, r30
    20c4:	df 07       	cpc	r29, r31
    20c6:	40 f4       	brcc	.+16     	; 0x20d8 <free+0x5a>
    20c8:	4a 81       	ldd	r20, Y+2	; 0x02
    20ca:	5b 81       	ldd	r21, Y+3	; 0x03
    20cc:	9e 01       	movw	r18, r28
    20ce:	41 15       	cp	r20, r1
    20d0:	51 05       	cpc	r21, r1
    20d2:	f1 f0       	breq	.+60     	; 0x2110 <free+0x92>
    20d4:	ea 01       	movw	r28, r20
    20d6:	f5 cf       	rjmp	.-22     	; 0x20c2 <free+0x44>
    20d8:	d3 83       	std	Z+3, r29	; 0x03
    20da:	c2 83       	std	Z+2, r28	; 0x02
    20dc:	40 81       	ld	r20, Z
    20de:	51 81       	ldd	r21, Z+1	; 0x01
    20e0:	84 0f       	add	r24, r20
    20e2:	95 1f       	adc	r25, r21
    20e4:	c8 17       	cp	r28, r24
    20e6:	d9 07       	cpc	r29, r25
    20e8:	59 f4       	brne	.+22     	; 0x2100 <free+0x82>
    20ea:	88 81       	ld	r24, Y
    20ec:	99 81       	ldd	r25, Y+1	; 0x01
    20ee:	84 0f       	add	r24, r20
    20f0:	95 1f       	adc	r25, r21
    20f2:	02 96       	adiw	r24, 0x02	; 2
    20f4:	91 83       	std	Z+1, r25	; 0x01
    20f6:	80 83       	st	Z, r24
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	9b 81       	ldd	r25, Y+3	; 0x03
    20fc:	93 83       	std	Z+3, r25	; 0x03
    20fe:	82 83       	std	Z+2, r24	; 0x02
    2100:	21 15       	cp	r18, r1
    2102:	31 05       	cpc	r19, r1
    2104:	29 f4       	brne	.+10     	; 0x2110 <free+0x92>
    2106:	f0 93 5a 04 	sts	0x045A, r31	; 0x80045a <__flp+0x1>
    210a:	e0 93 59 04 	sts	0x0459, r30	; 0x800459 <__flp>
    210e:	3d c0       	rjmp	.+122    	; 0x218a <free+0x10c>
    2110:	e9 01       	movw	r28, r18
    2112:	fb 83       	std	Y+3, r31	; 0x03
    2114:	ea 83       	std	Y+2, r30	; 0x02
    2116:	49 91       	ld	r20, Y+
    2118:	59 91       	ld	r21, Y+
    211a:	c4 0f       	add	r28, r20
    211c:	d5 1f       	adc	r29, r21
    211e:	ec 17       	cp	r30, r28
    2120:	fd 07       	cpc	r31, r29
    2122:	61 f4       	brne	.+24     	; 0x213c <free+0xbe>
    2124:	80 81       	ld	r24, Z
    2126:	91 81       	ldd	r25, Z+1	; 0x01
    2128:	84 0f       	add	r24, r20
    212a:	95 1f       	adc	r25, r21
    212c:	02 96       	adiw	r24, 0x02	; 2
    212e:	e9 01       	movw	r28, r18
    2130:	99 83       	std	Y+1, r25	; 0x01
    2132:	88 83       	st	Y, r24
    2134:	82 81       	ldd	r24, Z+2	; 0x02
    2136:	93 81       	ldd	r25, Z+3	; 0x03
    2138:	9b 83       	std	Y+3, r25	; 0x03
    213a:	8a 83       	std	Y+2, r24	; 0x02
    213c:	e0 e0       	ldi	r30, 0x00	; 0
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	12 96       	adiw	r26, 0x02	; 2
    2142:	8d 91       	ld	r24, X+
    2144:	9c 91       	ld	r25, X
    2146:	13 97       	sbiw	r26, 0x03	; 3
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	19 f0       	breq	.+6      	; 0x2152 <free+0xd4>
    214c:	fd 01       	movw	r30, r26
    214e:	dc 01       	movw	r26, r24
    2150:	f7 cf       	rjmp	.-18     	; 0x2140 <free+0xc2>
    2152:	8d 91       	ld	r24, X+
    2154:	9c 91       	ld	r25, X
    2156:	11 97       	sbiw	r26, 0x01	; 1
    2158:	9d 01       	movw	r18, r26
    215a:	2e 5f       	subi	r18, 0xFE	; 254
    215c:	3f 4f       	sbci	r19, 0xFF	; 255
    215e:	82 0f       	add	r24, r18
    2160:	93 1f       	adc	r25, r19
    2162:	20 91 57 04 	lds	r18, 0x0457	; 0x800457 <__brkval>
    2166:	30 91 58 04 	lds	r19, 0x0458	; 0x800458 <__brkval+0x1>
    216a:	28 17       	cp	r18, r24
    216c:	39 07       	cpc	r19, r25
    216e:	69 f4       	brne	.+26     	; 0x218a <free+0x10c>
    2170:	30 97       	sbiw	r30, 0x00	; 0
    2172:	29 f4       	brne	.+10     	; 0x217e <free+0x100>
    2174:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <__flp+0x1>
    2178:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <__flp>
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <free+0x104>
    217e:	13 82       	std	Z+3, r1	; 0x03
    2180:	12 82       	std	Z+2, r1	; 0x02
    2182:	b0 93 58 04 	sts	0x0458, r27	; 0x800458 <__brkval+0x1>
    2186:	a0 93 57 04 	sts	0x0457, r26	; 0x800457 <__brkval>
    218a:	df 91       	pop	r29
    218c:	cf 91       	pop	r28
    218e:	08 95       	ret

00002190 <strnlen_P>:
    2190:	fc 01       	movw	r30, r24
    2192:	05 90       	lpm	r0, Z+
    2194:	61 50       	subi	r22, 0x01	; 1
    2196:	70 40       	sbci	r23, 0x00	; 0
    2198:	01 10       	cpse	r0, r1
    219a:	d8 f7       	brcc	.-10     	; 0x2192 <strnlen_P+0x2>
    219c:	80 95       	com	r24
    219e:	90 95       	com	r25
    21a0:	8e 0f       	add	r24, r30
    21a2:	9f 1f       	adc	r25, r31
    21a4:	08 95       	ret

000021a6 <memset>:
    21a6:	dc 01       	movw	r26, r24
    21a8:	01 c0       	rjmp	.+2      	; 0x21ac <memset+0x6>
    21aa:	6d 93       	st	X+, r22
    21ac:	41 50       	subi	r20, 0x01	; 1
    21ae:	50 40       	sbci	r21, 0x00	; 0
    21b0:	e0 f7       	brcc	.-8      	; 0x21aa <memset+0x4>
    21b2:	08 95       	ret

000021b4 <strnlen>:
    21b4:	fc 01       	movw	r30, r24
    21b6:	61 50       	subi	r22, 0x01	; 1
    21b8:	70 40       	sbci	r23, 0x00	; 0
    21ba:	01 90       	ld	r0, Z+
    21bc:	01 10       	cpse	r0, r1
    21be:	d8 f7       	brcc	.-10     	; 0x21b6 <strnlen+0x2>
    21c0:	80 95       	com	r24
    21c2:	90 95       	com	r25
    21c4:	8e 0f       	add	r24, r30
    21c6:	9f 1f       	adc	r25, r31
    21c8:	08 95       	ret

000021ca <strrev>:
    21ca:	dc 01       	movw	r26, r24
    21cc:	fc 01       	movw	r30, r24
    21ce:	67 2f       	mov	r22, r23
    21d0:	71 91       	ld	r23, Z+
    21d2:	77 23       	and	r23, r23
    21d4:	e1 f7       	brne	.-8      	; 0x21ce <strrev+0x4>
    21d6:	32 97       	sbiw	r30, 0x02	; 2
    21d8:	04 c0       	rjmp	.+8      	; 0x21e2 <strrev+0x18>
    21da:	7c 91       	ld	r23, X
    21dc:	6d 93       	st	X+, r22
    21de:	70 83       	st	Z, r23
    21e0:	62 91       	ld	r22, -Z
    21e2:	ae 17       	cp	r26, r30
    21e4:	bf 07       	cpc	r27, r31
    21e6:	c8 f3       	brcs	.-14     	; 0x21da <strrev+0x10>
    21e8:	08 95       	ret

000021ea <fputc>:
    21ea:	0f 93       	push	r16
    21ec:	1f 93       	push	r17
    21ee:	cf 93       	push	r28
    21f0:	df 93       	push	r29
    21f2:	fb 01       	movw	r30, r22
    21f4:	23 81       	ldd	r18, Z+3	; 0x03
    21f6:	21 fd       	sbrc	r18, 1
    21f8:	03 c0       	rjmp	.+6      	; 0x2200 <__stack+0x1>
    21fa:	8f ef       	ldi	r24, 0xFF	; 255
    21fc:	9f ef       	ldi	r25, 0xFF	; 255
    21fe:	2c c0       	rjmp	.+88     	; 0x2258 <__stack+0x59>
    2200:	22 ff       	sbrs	r18, 2
    2202:	16 c0       	rjmp	.+44     	; 0x2230 <__stack+0x31>
    2204:	46 81       	ldd	r20, Z+6	; 0x06
    2206:	57 81       	ldd	r21, Z+7	; 0x07
    2208:	24 81       	ldd	r18, Z+4	; 0x04
    220a:	35 81       	ldd	r19, Z+5	; 0x05
    220c:	42 17       	cp	r20, r18
    220e:	53 07       	cpc	r21, r19
    2210:	44 f4       	brge	.+16     	; 0x2222 <__stack+0x23>
    2212:	a0 81       	ld	r26, Z
    2214:	b1 81       	ldd	r27, Z+1	; 0x01
    2216:	9d 01       	movw	r18, r26
    2218:	2f 5f       	subi	r18, 0xFF	; 255
    221a:	3f 4f       	sbci	r19, 0xFF	; 255
    221c:	31 83       	std	Z+1, r19	; 0x01
    221e:	20 83       	st	Z, r18
    2220:	8c 93       	st	X, r24
    2222:	26 81       	ldd	r18, Z+6	; 0x06
    2224:	37 81       	ldd	r19, Z+7	; 0x07
    2226:	2f 5f       	subi	r18, 0xFF	; 255
    2228:	3f 4f       	sbci	r19, 0xFF	; 255
    222a:	37 83       	std	Z+7, r19	; 0x07
    222c:	26 83       	std	Z+6, r18	; 0x06
    222e:	14 c0       	rjmp	.+40     	; 0x2258 <__stack+0x59>
    2230:	8b 01       	movw	r16, r22
    2232:	ec 01       	movw	r28, r24
    2234:	fb 01       	movw	r30, r22
    2236:	00 84       	ldd	r0, Z+8	; 0x08
    2238:	f1 85       	ldd	r31, Z+9	; 0x09
    223a:	e0 2d       	mov	r30, r0
    223c:	19 95       	eicall
    223e:	89 2b       	or	r24, r25
    2240:	e1 f6       	brne	.-72     	; 0x21fa <fputc+0x10>
    2242:	d8 01       	movw	r26, r16
    2244:	16 96       	adiw	r26, 0x06	; 6
    2246:	8d 91       	ld	r24, X+
    2248:	9c 91       	ld	r25, X
    224a:	17 97       	sbiw	r26, 0x07	; 7
    224c:	01 96       	adiw	r24, 0x01	; 1
    224e:	17 96       	adiw	r26, 0x07	; 7
    2250:	9c 93       	st	X, r25
    2252:	8e 93       	st	-X, r24
    2254:	16 97       	sbiw	r26, 0x06	; 6
    2256:	ce 01       	movw	r24, r28
    2258:	df 91       	pop	r29
    225a:	cf 91       	pop	r28
    225c:	1f 91       	pop	r17
    225e:	0f 91       	pop	r16
    2260:	08 95       	ret

00002262 <__ultoa_invert>:
    2262:	fa 01       	movw	r30, r20
    2264:	aa 27       	eor	r26, r26
    2266:	28 30       	cpi	r18, 0x08	; 8
    2268:	51 f1       	breq	.+84     	; 0x22be <__ultoa_invert+0x5c>
    226a:	20 31       	cpi	r18, 0x10	; 16
    226c:	81 f1       	breq	.+96     	; 0x22ce <__ultoa_invert+0x6c>
    226e:	e8 94       	clt
    2270:	6f 93       	push	r22
    2272:	6e 7f       	andi	r22, 0xFE	; 254
    2274:	6e 5f       	subi	r22, 0xFE	; 254
    2276:	7f 4f       	sbci	r23, 0xFF	; 255
    2278:	8f 4f       	sbci	r24, 0xFF	; 255
    227a:	9f 4f       	sbci	r25, 0xFF	; 255
    227c:	af 4f       	sbci	r26, 0xFF	; 255
    227e:	b1 e0       	ldi	r27, 0x01	; 1
    2280:	3e d0       	rcall	.+124    	; 0x22fe <__ultoa_invert+0x9c>
    2282:	b4 e0       	ldi	r27, 0x04	; 4
    2284:	3c d0       	rcall	.+120    	; 0x22fe <__ultoa_invert+0x9c>
    2286:	67 0f       	add	r22, r23
    2288:	78 1f       	adc	r23, r24
    228a:	89 1f       	adc	r24, r25
    228c:	9a 1f       	adc	r25, r26
    228e:	a1 1d       	adc	r26, r1
    2290:	68 0f       	add	r22, r24
    2292:	79 1f       	adc	r23, r25
    2294:	8a 1f       	adc	r24, r26
    2296:	91 1d       	adc	r25, r1
    2298:	a1 1d       	adc	r26, r1
    229a:	6a 0f       	add	r22, r26
    229c:	71 1d       	adc	r23, r1
    229e:	81 1d       	adc	r24, r1
    22a0:	91 1d       	adc	r25, r1
    22a2:	a1 1d       	adc	r26, r1
    22a4:	20 d0       	rcall	.+64     	; 0x22e6 <__ultoa_invert+0x84>
    22a6:	09 f4       	brne	.+2      	; 0x22aa <__ultoa_invert+0x48>
    22a8:	68 94       	set
    22aa:	3f 91       	pop	r19
    22ac:	2a e0       	ldi	r18, 0x0A	; 10
    22ae:	26 9f       	mul	r18, r22
    22b0:	11 24       	eor	r1, r1
    22b2:	30 19       	sub	r19, r0
    22b4:	30 5d       	subi	r19, 0xD0	; 208
    22b6:	31 93       	st	Z+, r19
    22b8:	de f6       	brtc	.-74     	; 0x2270 <__ultoa_invert+0xe>
    22ba:	cf 01       	movw	r24, r30
    22bc:	08 95       	ret
    22be:	46 2f       	mov	r20, r22
    22c0:	47 70       	andi	r20, 0x07	; 7
    22c2:	40 5d       	subi	r20, 0xD0	; 208
    22c4:	41 93       	st	Z+, r20
    22c6:	b3 e0       	ldi	r27, 0x03	; 3
    22c8:	0f d0       	rcall	.+30     	; 0x22e8 <__ultoa_invert+0x86>
    22ca:	c9 f7       	brne	.-14     	; 0x22be <__ultoa_invert+0x5c>
    22cc:	f6 cf       	rjmp	.-20     	; 0x22ba <__ultoa_invert+0x58>
    22ce:	46 2f       	mov	r20, r22
    22d0:	4f 70       	andi	r20, 0x0F	; 15
    22d2:	40 5d       	subi	r20, 0xD0	; 208
    22d4:	4a 33       	cpi	r20, 0x3A	; 58
    22d6:	18 f0       	brcs	.+6      	; 0x22de <__ultoa_invert+0x7c>
    22d8:	49 5d       	subi	r20, 0xD9	; 217
    22da:	31 fd       	sbrc	r19, 1
    22dc:	40 52       	subi	r20, 0x20	; 32
    22de:	41 93       	st	Z+, r20
    22e0:	02 d0       	rcall	.+4      	; 0x22e6 <__ultoa_invert+0x84>
    22e2:	a9 f7       	brne	.-22     	; 0x22ce <__ultoa_invert+0x6c>
    22e4:	ea cf       	rjmp	.-44     	; 0x22ba <__ultoa_invert+0x58>
    22e6:	b4 e0       	ldi	r27, 0x04	; 4
    22e8:	a6 95       	lsr	r26
    22ea:	97 95       	ror	r25
    22ec:	87 95       	ror	r24
    22ee:	77 95       	ror	r23
    22f0:	67 95       	ror	r22
    22f2:	ba 95       	dec	r27
    22f4:	c9 f7       	brne	.-14     	; 0x22e8 <__ultoa_invert+0x86>
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	61 05       	cpc	r22, r1
    22fa:	71 05       	cpc	r23, r1
    22fc:	08 95       	ret
    22fe:	9b 01       	movw	r18, r22
    2300:	ac 01       	movw	r20, r24
    2302:	0a 2e       	mov	r0, r26
    2304:	06 94       	lsr	r0
    2306:	57 95       	ror	r21
    2308:	47 95       	ror	r20
    230a:	37 95       	ror	r19
    230c:	27 95       	ror	r18
    230e:	ba 95       	dec	r27
    2310:	c9 f7       	brne	.-14     	; 0x2304 <__ultoa_invert+0xa2>
    2312:	62 0f       	add	r22, r18
    2314:	73 1f       	adc	r23, r19
    2316:	84 1f       	adc	r24, r20
    2318:	95 1f       	adc	r25, r21
    231a:	a0 1d       	adc	r26, r0
    231c:	08 95       	ret

0000231e <_exit>:
    231e:	f8 94       	cli

00002320 <__stop_program>:
    2320:	ff cf       	rjmp	.-2      	; 0x2320 <__stop_program>
