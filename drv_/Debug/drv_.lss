
drv_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800200  00001fa4  00002038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000206  00800292  00800292  000020ca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000020ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002128  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000280e  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013b9  00000000  00000000  00004b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011cb  00000000  00000000  00005eef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000053c  00000000  00000000  000070bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b84  00000000  00000000  000075f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017e5  00000000  00000000  0000817c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00009961  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9e c0       	rjmp	.+316    	; 0x13e <__ctors_end>
       2:	00 00       	nop
       4:	bc c0       	rjmp	.+376    	; 0x17e <__bad_interrupt>
       6:	00 00       	nop
       8:	ba c0       	rjmp	.+372    	; 0x17e <__bad_interrupt>
       a:	00 00       	nop
       c:	b8 c0       	rjmp	.+368    	; 0x17e <__bad_interrupt>
       e:	00 00       	nop
      10:	b6 c0       	rjmp	.+364    	; 0x17e <__bad_interrupt>
      12:	00 00       	nop
      14:	b4 c0       	rjmp	.+360    	; 0x17e <__bad_interrupt>
      16:	00 00       	nop
      18:	b2 c0       	rjmp	.+356    	; 0x17e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b0 c0       	rjmp	.+352    	; 0x17e <__bad_interrupt>
      1e:	00 00       	nop
      20:	ae c0       	rjmp	.+348    	; 0x17e <__bad_interrupt>
      22:	00 00       	nop
      24:	ac c0       	rjmp	.+344    	; 0x17e <__bad_interrupt>
      26:	00 00       	nop
      28:	aa c0       	rjmp	.+340    	; 0x17e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a8 c0       	rjmp	.+336    	; 0x17e <__bad_interrupt>
      2e:	00 00       	nop
      30:	a6 c0       	rjmp	.+332    	; 0x17e <__bad_interrupt>
      32:	00 00       	nop
      34:	a4 c0       	rjmp	.+328    	; 0x17e <__bad_interrupt>
      36:	00 00       	nop
      38:	a2 c0       	rjmp	.+324    	; 0x17e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a0 c0       	rjmp	.+320    	; 0x17e <__bad_interrupt>
      3e:	00 00       	nop
      40:	9e c0       	rjmp	.+316    	; 0x17e <__bad_interrupt>
      42:	00 00       	nop
      44:	9c c0       	rjmp	.+312    	; 0x17e <__bad_interrupt>
      46:	00 00       	nop
      48:	9a c0       	rjmp	.+308    	; 0x17e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	98 c0       	rjmp	.+304    	; 0x17e <__bad_interrupt>
      4e:	00 00       	nop
      50:	96 c0       	rjmp	.+300    	; 0x17e <__bad_interrupt>
      52:	00 00       	nop
      54:	94 c0       	rjmp	.+296    	; 0x17e <__bad_interrupt>
      56:	00 00       	nop
      58:	92 c0       	rjmp	.+292    	; 0x17e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	33 c1       	rjmp	.+614    	; 0x2c4 <__vector_23>
      5e:	00 00       	nop
      60:	8e c0       	rjmp	.+284    	; 0x17e <__bad_interrupt>
      62:	00 00       	nop
      64:	8c c0       	rjmp	.+280    	; 0x17e <__bad_interrupt>
      66:	00 00       	nop
      68:	8a c0       	rjmp	.+276    	; 0x17e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	88 c0       	rjmp	.+272    	; 0x17e <__bad_interrupt>
      6e:	00 00       	nop
      70:	86 c0       	rjmp	.+268    	; 0x17e <__bad_interrupt>
      72:	00 00       	nop
      74:	84 c0       	rjmp	.+264    	; 0x17e <__bad_interrupt>
      76:	00 00       	nop
      78:	82 c0       	rjmp	.+260    	; 0x17e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	80 c0       	rjmp	.+256    	; 0x17e <__bad_interrupt>
      7e:	00 00       	nop
      80:	7e c0       	rjmp	.+252    	; 0x17e <__bad_interrupt>
      82:	00 00       	nop
      84:	7c c0       	rjmp	.+248    	; 0x17e <__bad_interrupt>
      86:	00 00       	nop
      88:	7a c0       	rjmp	.+244    	; 0x17e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	78 c0       	rjmp	.+240    	; 0x17e <__bad_interrupt>
      8e:	00 00       	nop
      90:	76 c0       	rjmp	.+236    	; 0x17e <__bad_interrupt>
      92:	00 00       	nop
      94:	74 c0       	rjmp	.+232    	; 0x17e <__bad_interrupt>
      96:	00 00       	nop
      98:	72 c0       	rjmp	.+228    	; 0x17e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	70 c0       	rjmp	.+224    	; 0x17e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6e c0       	rjmp	.+220    	; 0x17e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6c c0       	rjmp	.+216    	; 0x17e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6a c0       	rjmp	.+212    	; 0x17e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	68 c0       	rjmp	.+208    	; 0x17e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	66 c0       	rjmp	.+204    	; 0x17e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	64 c0       	rjmp	.+200    	; 0x17e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	62 c0       	rjmp	.+196    	; 0x17e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	f5 c1       	rjmp	.+1002   	; 0x4a8 <__vector_47>
      be:	00 00       	nop
      c0:	5e c0       	rjmp	.+188    	; 0x17e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	5c c0       	rjmp	.+184    	; 0x17e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	5a c0       	rjmp	.+180    	; 0x17e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	58 c0       	rjmp	.+176    	; 0x17e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	56 c0       	rjmp	.+172    	; 0x17e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	54 c0       	rjmp	.+168    	; 0x17e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	52 c0       	rjmp	.+164    	; 0x17e <__bad_interrupt>
      da:	00 00       	nop
      dc:	50 c0       	rjmp	.+160    	; 0x17e <__bad_interrupt>
      de:	00 00       	nop
      e0:	4e c0       	rjmp	.+156    	; 0x17e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	03 6e       	ori	r16, 0xE3	; 227
      e6:	db 36       	cpi	r29, 0x6B	; 107
      e8:	3d 9a       	sbi	0x07, 5	; 7
      ea:	99 99       	sbic	0x13, 1	; 19
      ec:	99 3d       	cpi	r25, 0xD9	; 217
      ee:	ab aa       	std	Y+51, r10	; 0x33
      f0:	aa 2a       	or	r10, r26
      f2:	3e 00       	.word	0x003e	; ????
      f4:	00 00       	nop
      f6:	80 3f       	cpi	r24, 0xF0	; 240
      f8:	07 2c       	mov	r0, r7
      fa:	7a a5       	ldd	r23, Y+42	; 0x2a
      fc:	ba 6c       	ori	r27, 0xCA	; 202
      fe:	c5 90       	lpm	r12, Z+
     100:	da 3b       	cpi	r29, 0xBA	; 186
     102:	93 65       	ori	r25, 0x53	; 83
     104:	fc 8b       	std	Y+20, r31	; 0x14
     106:	bc 53       	subi	r27, 0x3C	; 60
     108:	f8 10       	cpse	r15, r8
     10a:	fd 3c       	cpi	r31, 0xCD	; 205
     10c:	56 92       	lac	Z, r5
     10e:	83 4d       	sbci	r24, 0xD3	; 211
     110:	bd 87       	std	Y+13, r27	; 0x0d
     112:	9d 3a       	cpi	r25, 0xAD	; 173
     114:	b6 3d       	cpi	r27, 0xD6	; 214
     116:	cb c9       	rjmp	.-3178   	; 0xfffff4ae <__eeprom_end+0xff7ef4ae>
     118:	bf 5b       	subi	r27, 0xBF	; 191
     11a:	be 73       	andi	r27, 0x3E	; 62
     11c:	da 0f       	add	r29, r26
     11e:	c9 3f       	cpi	r28, 0xF9	; 249
     120:	05 a8       	ldd	r0, Z+53	; 0x35
     122:	4c cd       	rjmp	.-1384   	; 0xfffffbbc <__eeprom_end+0xff7efbbc>
     124:	b2 d4       	rcall	.+2404   	; 0xa8a <mpu6050_calibrate_gyro+0x1a>
     126:	4e b9       	out	0x0e, r20	; 14
     128:	38 36       	cpi	r19, 0x68	; 104
     12a:	a9 02       	muls	r26, r25
     12c:	0c 50       	subi	r16, 0x0C	; 12
     12e:	b9 91       	ld	r27, Y+
     130:	86 88       	ldd	r8, Z+22	; 0x16
     132:	08 3c       	cpi	r16, 0xC8	; 200
     134:	a6 aa       	std	Z+54, r10	; 0x36
     136:	aa 2a       	or	r10, r26
     138:	be 00       	.word	0x00be	; ????
     13a:	00 00       	nop
     13c:	80 3f       	cpi	r24, 0xF0	; 240

0000013e <__ctors_end>:
     13e:	11 24       	eor	r1, r1
     140:	1f be       	out	0x3f, r1	; 63
     142:	cf ef       	ldi	r28, 0xFF	; 255
     144:	d1 e2       	ldi	r29, 0x21	; 33
     146:	de bf       	out	0x3e, r29	; 62
     148:	cd bf       	out	0x3d, r28	; 61
     14a:	00 e0       	ldi	r16, 0x00	; 0
     14c:	0c bf       	out	0x3c, r16	; 60

0000014e <__do_copy_data>:
     14e:	12 e0       	ldi	r17, 0x02	; 2
     150:	a0 e0       	ldi	r26, 0x00	; 0
     152:	b2 e0       	ldi	r27, 0x02	; 2
     154:	e4 ea       	ldi	r30, 0xA4	; 164
     156:	ff e1       	ldi	r31, 0x1F	; 31
     158:	00 e0       	ldi	r16, 0x00	; 0
     15a:	0b bf       	out	0x3b, r16	; 59
     15c:	02 c0       	rjmp	.+4      	; 0x162 <__do_copy_data+0x14>
     15e:	07 90       	elpm	r0, Z+
     160:	0d 92       	st	X+, r0
     162:	a2 39       	cpi	r26, 0x92	; 146
     164:	b1 07       	cpc	r27, r17
     166:	d9 f7       	brne	.-10     	; 0x15e <__do_copy_data+0x10>

00000168 <__do_clear_bss>:
     168:	24 e0       	ldi	r18, 0x04	; 4
     16a:	a2 e9       	ldi	r26, 0x92	; 146
     16c:	b2 e0       	ldi	r27, 0x02	; 2
     16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
     170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
     172:	a8 39       	cpi	r26, 0x98	; 152
     174:	b2 07       	cpc	r27, r18
     176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
     178:	e5 d1       	rcall	.+970    	; 0x544 <main>
     17a:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <_exit>

0000017e <__bad_interrupt>:
     17e:	40 cf       	rjmp	.-384    	; 0x0 <__vectors>

00000180 <init_gpio>:
	*/
	//DDRB|=(1<<PB5);//LED13
	//sbi(DDRB,4);//digital 10
	//sbi(DDRB,5);//digital 11
	//sbi(DDRB,6);//digital 12
	sbi(DDRH,3);//digital 6 OC4A
     180:	e1 e0       	ldi	r30, 0x01	; 1
     182:	f1 e0       	ldi	r31, 0x01	; 1
     184:	80 81       	ld	r24, Z
     186:	88 60       	ori	r24, 0x08	; 8
     188:	80 83       	st	Z, r24
	sbi(DDRH,4);//digital 7 OC4B
     18a:	80 81       	ld	r24, Z
     18c:	80 61       	ori	r24, 0x10	; 16
     18e:	80 83       	st	Z, r24
	sbi(DDRH,5);//digital 8 OC4C
     190:	80 81       	ld	r24, Z
     192:	80 62       	ori	r24, 0x20	; 32
     194:	80 83       	st	Z, r24
     196:	08 95       	ret

00000198 <getSinTable>:
	//sbi(DDRH,6);//digital 9
}
void getSinTable(uint16_t sinTableSize,uint8_t *pwmSin,uint16_t sineScale)
{
     198:	4f 92       	push	r4
     19a:	5f 92       	push	r5
     19c:	6f 92       	push	r6
     19e:	7f 92       	push	r7
     1a0:	8f 92       	push	r8
     1a2:	9f 92       	push	r9
     1a4:	af 92       	push	r10
     1a6:	bf 92       	push	r11
     1a8:	cf 92       	push	r12
     1aa:	df 92       	push	r13
     1ac:	ef 92       	push	r14
     1ae:	ff 92       	push	r15
     1b0:	0f 93       	push	r16
     1b2:	1f 93       	push	r17
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	2a 97       	sbiw	r28, 0x0a	; 10
     1be:	0f b6       	in	r0, 0x3f	; 63
     1c0:	f8 94       	cli
     1c2:	de bf       	out	0x3e, r29	; 62
     1c4:	0f be       	out	0x3f, r0	; 63
     1c6:	cd bf       	out	0x3d, r28	; 61
	for (int i = 0; i < sinTableSize; i++)
     1c8:	00 97       	sbiw	r24, 0x00	; 0
     1ca:	09 f4       	brne	.+2      	; 0x1ce <getSinTable+0x36>
     1cc:	53 c0       	rjmp	.+166    	; 0x274 <getSinTable+0xdc>
     1ce:	a6 2e       	mov	r10, r22
     1d0:	b7 2e       	mov	r11, r23
     1d2:	4c 01       	movw	r8, r24
     1d4:	00 e0       	ldi	r16, 0x00	; 0
     1d6:	10 e0       	ldi	r17, 0x00	; 0
	{
		double x = i * (2 * pi) / sinTableSize;
		pwmSin[i] = (sin(x) * sineScale) + sineScale;
     1d8:	6c 01       	movw	r12, r24
     1da:	e1 2c       	mov	r14, r1
     1dc:	f1 2c       	mov	r15, r1
     1de:	cb 82       	std	Y+3, r12	; 0x03
     1e0:	dc 82       	std	Y+4, r13	; 0x04
     1e2:	ed 82       	std	Y+5, r14	; 0x05
     1e4:	fe 82       	std	Y+6, r15	; 0x06
     1e6:	6a 01       	movw	r12, r20
     1e8:	e1 2c       	mov	r14, r1
     1ea:	f1 2c       	mov	r15, r1
     1ec:	cf 82       	std	Y+7, r12	; 0x07
     1ee:	d8 86       	std	Y+8, r13	; 0x08
     1f0:	e9 86       	std	Y+9, r14	; 0x09
     1f2:	fa 86       	std	Y+10, r15	; 0x0a
     1f4:	b8 01       	movw	r22, r16
     1f6:	01 2e       	mov	r0, r17
     1f8:	00 0c       	add	r0, r0
     1fa:	88 0b       	sbc	r24, r24
     1fc:	99 0b       	sbc	r25, r25
     1fe:	e1 d7       	rcall	.+4034   	; 0x11c2 <__floatsisf>
     200:	2b ed       	ldi	r18, 0xDB	; 219
     202:	3f e0       	ldi	r19, 0x0F	; 15
     204:	49 ec       	ldi	r20, 0xC9	; 201
     206:	50 e4       	ldi	r21, 0x40	; 64
     208:	0e 94 be 09 	call	0x137c	; 0x137c <__mulsf3>
     20c:	6b 01       	movw	r12, r22
     20e:	7c 01       	movw	r14, r24
     210:	6b 81       	ldd	r22, Y+3	; 0x03
     212:	7c 81       	ldd	r23, Y+4	; 0x04
     214:	8d 81       	ldd	r24, Y+5	; 0x05
     216:	9e 81       	ldd	r25, Y+6	; 0x06
     218:	d2 d7       	rcall	.+4004   	; 0x11be <__floatunsisf>
     21a:	9b 01       	movw	r18, r22
     21c:	ac 01       	movw	r20, r24
     21e:	c7 01       	movw	r24, r14
     220:	b6 01       	movw	r22, r12
     222:	34 d7       	rcall	.+3688   	; 0x108c <__divsf3>
     224:	0e 94 21 0a 	call	0x1442	; 0x1442 <sin>
     228:	2b 01       	movw	r4, r22
     22a:	3c 01       	movw	r6, r24
     22c:	6f 81       	ldd	r22, Y+7	; 0x07
     22e:	78 85       	ldd	r23, Y+8	; 0x08
     230:	89 85       	ldd	r24, Y+9	; 0x09
     232:	9a 85       	ldd	r25, Y+10	; 0x0a
     234:	c4 d7       	rcall	.+3976   	; 0x11be <__floatunsisf>
     236:	6b 01       	movw	r12, r22
     238:	7c 01       	movw	r14, r24
     23a:	9b 01       	movw	r18, r22
     23c:	ac 01       	movw	r20, r24
     23e:	c3 01       	movw	r24, r6
     240:	b2 01       	movw	r22, r4
     242:	0e 94 be 09 	call	0x137c	; 0x137c <__mulsf3>
     246:	a7 01       	movw	r20, r14
     248:	96 01       	movw	r18, r12
     24a:	a5 d6       	rcall	.+3402   	; 0xf96 <__addsf3>
     24c:	8c d7       	rcall	.+3864   	; 0x1166 <__fixunssfsi>
     24e:	d5 01       	movw	r26, r10
     250:	6d 93       	st	X+, r22
     252:	5d 01       	movw	r10, r26
		uint16_t reg=pwmSin[i];
     254:	70 e0       	ldi	r23, 0x00	; 0
     256:	7a 83       	std	Y+2, r23	; 0x02
		print16(&reg);
     258:	69 83       	std	Y+1, r22	; 0x01
     25a:	ce 01       	movw	r24, r28
     25c:	01 96       	adiw	r24, 0x01	; 1
		printf("\n");
     25e:	4b d1       	rcall	.+662    	; 0x4f6 <print16>
     260:	8a e0       	ldi	r24, 0x0A	; 10
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 9c 0b 	call	0x1738	; 0x1738 <putchar>
	sbi(DDRH,5);//digital 8 OC4C
	//sbi(DDRH,6);//digital 9
}
void getSinTable(uint16_t sinTableSize,uint8_t *pwmSin,uint16_t sineScale)
{
	for (int i = 0; i < sinTableSize; i++)
     268:	0f 5f       	subi	r16, 0xFF	; 255
     26a:	1f 4f       	sbci	r17, 0xFF	; 255
     26c:	08 15       	cp	r16, r8
     26e:	19 05       	cpc	r17, r9
     270:	09 f0       	breq	.+2      	; 0x274 <getSinTable+0xdc>
		pwmSin[i] = (sin(x) * sineScale) + sineScale;
		uint16_t reg=pwmSin[i];
		print16(&reg);
		printf("\n");
	}
}
     272:	c0 cf       	rjmp	.-128    	; 0x1f4 <getSinTable+0x5c>
     274:	2a 96       	adiw	r28, 0x0a	; 10
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	f8 94       	cli
     27a:	de bf       	out	0x3e, r29	; 62
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	cd bf       	out	0x3d, r28	; 61
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	1f 91       	pop	r17
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	df 90       	pop	r13
     28e:	cf 90       	pop	r12
     290:	bf 90       	pop	r11
     292:	af 90       	pop	r10
     294:	9f 90       	pop	r9
     296:	8f 90       	pop	r8
     298:	7f 90       	pop	r7
     29a:	6f 90       	pop	r6
     29c:	5f 90       	pop	r5
     29e:	4f 90       	pop	r4
     2a0:	08 95       	ret

000002a2 <uart_putchar>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     2a2:	cf 93       	push	r28
     2a4:	c8 2f       	mov	r28, r24
     2a6:	8a 30       	cpi	r24, 0x0A	; 10
     2a8:	11 f4       	brne	.+4      	; 0x2ae <uart_putchar+0xc>
     2aa:	8d e0       	ldi	r24, 0x0D	; 13
     2ac:	fa df       	rcall	.-12     	; 0x2a2 <uart_putchar>
     2ae:	e0 ec       	ldi	r30, 0xC0	; 192
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	85 ff       	sbrs	r24, 5
     2b6:	fd cf       	rjmp	.-6      	; 0x2b2 <uart_putchar+0x10>
     2b8:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <__vector_23>:
     2c4:	1f 92       	push	r1
     2c6:	0f 92       	push	r0
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	0f 92       	push	r0
     2cc:	11 24       	eor	r1, r1
     2ce:	2f 93       	push	r18
     2d0:	3f 93       	push	r19
     2d2:	8f 93       	push	r24
     2d4:	9f 93       	push	r25
     2d6:	af 93       	push	r26
     2d8:	bf 93       	push	r27
     2da:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <timer0_millis>
     2de:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <timer0_millis+0x1>
     2e2:	a0 91 97 02 	lds	r26, 0x0297	; 0x800297 <timer0_millis+0x2>
     2e6:	b0 91 98 02 	lds	r27, 0x0298	; 0x800298 <timer0_millis+0x3>
     2ea:	30 91 94 02 	lds	r19, 0x0294	; 0x800294 <timer0_fract>
     2ee:	23 e0       	ldi	r18, 0x03	; 3
     2f0:	23 0f       	add	r18, r19
     2f2:	2d 37       	cpi	r18, 0x7D	; 125
     2f4:	20 f4       	brcc	.+8      	; 0x2fe <__vector_23+0x3a>
     2f6:	01 96       	adiw	r24, 0x01	; 1
     2f8:	a1 1d       	adc	r26, r1
     2fa:	b1 1d       	adc	r27, r1
     2fc:	05 c0       	rjmp	.+10     	; 0x308 <__vector_23+0x44>
     2fe:	26 e8       	ldi	r18, 0x86	; 134
     300:	23 0f       	add	r18, r19
     302:	02 96       	adiw	r24, 0x02	; 2
     304:	a1 1d       	adc	r26, r1
     306:	b1 1d       	adc	r27, r1
     308:	20 93 94 02 	sts	0x0294, r18	; 0x800294 <timer0_fract>
     30c:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <timer0_millis>
     310:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <timer0_millis+0x1>
     314:	a0 93 97 02 	sts	0x0297, r26	; 0x800297 <timer0_millis+0x2>
     318:	b0 93 98 02 	sts	0x0298, r27	; 0x800298 <timer0_millis+0x3>
     31c:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <timer0_overflow_count>
     320:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <timer0_overflow_count+0x1>
     324:	a0 91 9b 02 	lds	r26, 0x029B	; 0x80029b <timer0_overflow_count+0x2>
     328:	b0 91 9c 02 	lds	r27, 0x029C	; 0x80029c <timer0_overflow_count+0x3>
     32c:	01 96       	adiw	r24, 0x01	; 1
     32e:	a1 1d       	adc	r26, r1
     330:	b1 1d       	adc	r27, r1
     332:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <timer0_overflow_count>
     336:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <timer0_overflow_count+0x1>
     33a:	a0 93 9b 02 	sts	0x029B, r26	; 0x80029b <timer0_overflow_count+0x2>
     33e:	b0 93 9c 02 	sts	0x029C, r27	; 0x80029c <timer0_overflow_count+0x3>
     342:	bf 91       	pop	r27
     344:	af 91       	pop	r26
     346:	9f 91       	pop	r25
     348:	8f 91       	pop	r24
     34a:	3f 91       	pop	r19
     34c:	2f 91       	pop	r18
     34e:	0f 90       	pop	r0
     350:	0f be       	out	0x3f, r0	; 63
     352:	0f 90       	pop	r0
     354:	1f 90       	pop	r1
     356:	18 95       	reti

00000358 <micros>:
     358:	3f b7       	in	r19, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <timer0_overflow_count>
     360:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <timer0_overflow_count+0x1>
     364:	a0 91 9b 02 	lds	r26, 0x029B	; 0x80029b <timer0_overflow_count+0x2>
     368:	b0 91 9c 02 	lds	r27, 0x029C	; 0x80029c <timer0_overflow_count+0x3>
     36c:	26 b5       	in	r18, 0x26	; 38
     36e:	a8 9b       	sbis	0x15, 0	; 21
     370:	05 c0       	rjmp	.+10     	; 0x37c <micros+0x24>
     372:	2f 3f       	cpi	r18, 0xFF	; 255
     374:	19 f0       	breq	.+6      	; 0x37c <micros+0x24>
     376:	01 96       	adiw	r24, 0x01	; 1
     378:	a1 1d       	adc	r26, r1
     37a:	b1 1d       	adc	r27, r1
     37c:	3f bf       	out	0x3f, r19	; 63
     37e:	ba 2f       	mov	r27, r26
     380:	a9 2f       	mov	r26, r25
     382:	98 2f       	mov	r25, r24
     384:	88 27       	eor	r24, r24
     386:	82 0f       	add	r24, r18
     388:	91 1d       	adc	r25, r1
     38a:	a1 1d       	adc	r26, r1
     38c:	b1 1d       	adc	r27, r1
     38e:	bc 01       	movw	r22, r24
     390:	cd 01       	movw	r24, r26
     392:	66 0f       	add	r22, r22
     394:	77 1f       	adc	r23, r23
     396:	88 1f       	adc	r24, r24
     398:	99 1f       	adc	r25, r25
     39a:	66 0f       	add	r22, r22
     39c:	77 1f       	adc	r23, r23
     39e:	88 1f       	adc	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	08 95       	ret

000003a4 <PWM_update>:
{
	PWM_update();
}
void PWM_update()//motor pwm update 
{
	U_PWM=pwmSin[U_step];
     3a4:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <__data_end>
     3a8:	f0 91 93 02 	lds	r31, 0x0293	; 0x800293 <__data_end+0x1>
     3ac:	e1 55       	subi	r30, 0x51	; 81
     3ae:	fd 4f       	sbci	r31, 0xFD	; 253
     3b0:	80 81       	ld	r24, Z
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     3b8:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
	V_PWM=pwmSin[V_step];
     3bc:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <V_step>
     3c0:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <V_step+0x1>
     3c4:	e1 55       	subi	r30, 0x51	; 81
     3c6:	fd 4f       	sbci	r31, 0xFD	; 253
     3c8:	80 81       	ld	r24, Z
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     3d0:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
	W_PWM=pwmSin[W_step];
     3d4:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <W_step>
     3d8:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <W_step+0x1>
     3dc:	e1 55       	subi	r30, 0x51	; 81
     3de:	fd 4f       	sbci	r31, 0xFD	; 253
     3e0:	80 81       	ld	r24, Z
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
     3e8:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
	U_step=U_step+incr;
     3ec:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <incr>
     3f0:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <incr+0x1>
     3f4:	40 91 92 02 	lds	r20, 0x0292	; 0x800292 <__data_end>
     3f8:	50 91 93 02 	lds	r21, 0x0293	; 0x800293 <__data_end+0x1>
     3fc:	46 0f       	add	r20, r22
     3fe:	57 1f       	adc	r21, r23
     400:	50 93 93 02 	sts	0x0293, r21	; 0x800293 <__data_end+0x1>
     404:	40 93 92 02 	sts	0x0292, r20	; 0x800292 <__data_end>
	V_step=V_step+incr;
     408:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <V_step>
     40c:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <V_step+0x1>
     410:	26 0f       	add	r18, r22
     412:	37 1f       	adc	r19, r23
     414:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <V_step+0x1>
     418:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <V_step>
	W_step=W_step+incr;
     41c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <W_step>
     420:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <W_step+0x1>
     424:	86 0f       	add	r24, r22
     426:	97 1f       	adc	r25, r23
     428:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <W_step+0x1>
     42c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <W_step>
	if(U_step > SINE_TABLE_SZ)  U_step = 0;
     430:	40 3e       	cpi	r20, 0xE0	; 224
     432:	61 e0       	ldi	r22, 0x01	; 1
     434:	56 07       	cpc	r21, r22
     436:	2c f0       	brlt	.+10     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     438:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <__data_end+0x1>
     43c:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <__data_end>
     440:	08 c0       	rjmp	.+16     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	if(U_step < 0)  U_step = SINE_TABLE_SZ;
     442:	55 23       	and	r21, r21
     444:	34 f4       	brge	.+12     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     446:	4f ed       	ldi	r20, 0xDF	; 223
     448:	51 e0       	ldi	r21, 0x01	; 1
     44a:	50 93 93 02 	sts	0x0293, r21	; 0x800293 <__data_end+0x1>
     44e:	40 93 92 02 	sts	0x0292, r20	; 0x800292 <__data_end>
	
	if(V_step > SINE_TABLE_SZ)  V_step = 0;
     452:	20 3e       	cpi	r18, 0xE0	; 224
     454:	41 e0       	ldi	r20, 0x01	; 1
     456:	34 07       	cpc	r19, r20
     458:	2c f0       	brlt	.+10     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     45a:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <V_step+0x1>
     45e:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <V_step>
     462:	08 c0       	rjmp	.+16     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
	if(V_step < 0)  V_step = SINE_TABLE_SZ;
     464:	33 23       	and	r19, r19
     466:	34 f4       	brge	.+12     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     468:	2f ed       	ldi	r18, 0xDF	; 223
     46a:	31 e0       	ldi	r19, 0x01	; 1
     46c:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <V_step+0x1>
     470:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <V_step>
	
	if(W_step > SINE_TABLE_SZ)  W_step = 0;
     474:	80 3e       	cpi	r24, 0xE0	; 224
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	96 07       	cpc	r25, r22
     47a:	2c f0       	brlt	.+10     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     47c:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <W_step+0x1>
     480:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <W_step>
     484:	08 c0       	rjmp	.+16     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
	if(W_step < 0) W_step = SINE_TABLE_SZ;
     486:	99 23       	and	r25, r25
     488:	34 f4       	brge	.+12     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     48a:	8f ed       	ldi	r24, 0xDF	; 223
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <W_step+0x1>
     492:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <W_step>
	//_delay_us(100);
	OCR5A=pwm_delay;
     496:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <pwm_delay>
     49a:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <pwm_delay+0x1>
     49e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     4a2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     4a6:	08 95       	ret

000004a8 <__vector_47>:
	SREG = oldSREG;

	return m;
}
ISR(TIMER5_COMPA_vect)//motor update interrupt routine
{
     4a8:	1f 92       	push	r1
     4aa:	0f 92       	push	r0
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	0f 92       	push	r0
     4b0:	11 24       	eor	r1, r1
     4b2:	0b b6       	in	r0, 0x3b	; 59
     4b4:	0f 92       	push	r0
     4b6:	2f 93       	push	r18
     4b8:	3f 93       	push	r19
     4ba:	4f 93       	push	r20
     4bc:	5f 93       	push	r21
     4be:	6f 93       	push	r22
     4c0:	7f 93       	push	r23
     4c2:	8f 93       	push	r24
     4c4:	9f 93       	push	r25
     4c6:	af 93       	push	r26
     4c8:	bf 93       	push	r27
     4ca:	ef 93       	push	r30
	PWM_update();
     4cc:	ff 93       	push	r31
}
     4ce:	6a df       	rcall	.-300    	; 0x3a4 <PWM_update>
     4d0:	ff 91       	pop	r31
     4d2:	ef 91       	pop	r30
     4d4:	bf 91       	pop	r27
     4d6:	af 91       	pop	r26
     4d8:	9f 91       	pop	r25
     4da:	8f 91       	pop	r24
     4dc:	7f 91       	pop	r23
     4de:	6f 91       	pop	r22
     4e0:	5f 91       	pop	r21
     4e2:	4f 91       	pop	r20
     4e4:	3f 91       	pop	r19
     4e6:	2f 91       	pop	r18
     4e8:	0f 90       	pop	r0
     4ea:	0b be       	out	0x3b, r0	; 59
     4ec:	0f 90       	pop	r0
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	0f 90       	pop	r0
     4f2:	1f 90       	pop	r1
     4f4:	18 95       	reti

000004f6 <print16>:
	OCR5A=pwm_delay;
}
void print16(uint16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	2a 97       	sbiw	r28, 0x0a	; 10
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	f8 94       	cli
     508:	de bf       	out	0x3e, r29	; 62
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     50e:	4a e0       	ldi	r20, 0x0A	; 10
     510:	8e 01       	movw	r16, r28
     512:	0f 5f       	subi	r16, 0xFF	; 255
     514:	1f 4f       	sbci	r17, 0xFF	; 255
     516:	b8 01       	movw	r22, r16
     518:	fc 01       	movw	r30, r24
     51a:	80 81       	ld	r24, Z
     51c:	91 81       	ldd	r25, Z+1	; 0x01
     51e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     522:	1f 93       	push	r17
     524:	0f 93       	push	r16
     526:	0e 94 89 0b 	call	0x1712	; 0x1712 <printf>
	//printf("\n");
}
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	2a 96       	adiw	r28, 0x0a	; 10
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	08 95       	ret

00000544 <main>:
int V_step=V_step_predefine;
int W_step=W_step_predefine;
uint8_t pwmSin[SINE_TABLE_SZ];
/*-----------------------------------start of main----------------------------------*/
int main(void)
{				
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	cd b7       	in	r28, 0x3d	; 61
     54a:	de b7       	in	r29, 0x3e	; 62
     54c:	e0 97       	sbiw	r28, 0x30	; 48
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
		
	cli();
	init_gpio();
		#ifdef GYRO
			i2c_init();
     558:	f8 94       	cli
		#endif
	USART_Init(MY_UBRR);
     55a:	12 de       	rcall	.-988    	; 0x180 <init_gpio>
     55c:	5f d4       	rcall	.+2238   	; 0xe1c <i2c_init>
     55e:	8c e0       	ldi	r24, 0x0C	; 12
	uart_str = fdevopen(uart_putchar, NULL);
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0d d5       	rcall	.+2586   	; 0xf7e <USART_Init>
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	81 e5       	ldi	r24, 0x51	; 81
     56a:	91 e0       	ldi	r25, 0x01	; 1
		
	setup_timer0();
	Enable_timer0_overflow_interrupt();//micros
     56c:	0e 94 3f 0b 	call	0x167e	; 0x167e <fdevopen>
	
	setup_timer4();//pwm
     570:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <uart_str+0x1>
	
	setup_timer5();
     574:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <uart_str>
	Enable_timer5_compare_interrupt();//motor
	getSinTable(SINE_TABLE_SZ,pwmSin,sinScale);
     578:	44 d4       	rcall	.+2184   	; 0xe02 <setup_timer0>
     57a:	4a d4       	rcall	.+2196   	; 0xe10 <Enable_timer0_overflow_interrupt>
     57c:	1f d4       	rcall	.+2110   	; 0xdbc <setup_timer4>
     57e:	32 d4       	rcall	.+2148   	; 0xde4 <setup_timer5>
     580:	3a d4       	rcall	.+2164   	; 0xdf6 <Enable_timer5_compare_interrupt>
     582:	4f e3       	ldi	r20, 0x3F	; 63
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	6f ea       	ldi	r22, 0xAF	; 175

	OCR5A=4000;
     588:	72 e0       	ldi	r23, 0x02	; 2
     58a:	8f ed       	ldi	r24, 0xDF	; 223
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	04 de       	rcall	.-1016   	; 0x198 <getSinTable>
     590:	80 ea       	ldi	r24, 0xA0	; 160
     592:	9f e0       	ldi	r25, 0x0F	; 15
		double acc_total_vector=0;
		double angle_pitch_acc=0;
		double angle_roll_acc=0;
		bool set_gyro_angles=false;
			#ifdef CALIBERATED_DATA
				int32_t gyroX_calib_=0;
     594:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     598:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
				int32_t gyroY_calib_=0;
     59c:	1d 86       	std	Y+13, r1	; 0x0d
     59e:	1e 86       	std	Y+14, r1	; 0x0e
     5a0:	1f 86       	std	Y+15, r1	; 0x0f
     5a2:	18 8a       	std	Y+16, r1	; 0x10
				int32_t gyroZ_calib_=0;
     5a4:	19 8a       	std	Y+17, r1	; 0x11
     5a6:	1a 8a       	std	Y+18, r1	; 0x12
     5a8:	1b 8a       	std	Y+19, r1	; 0x13
				int32_t accelY_calib_=0;
				int32_t accelZ_calib_=0;				
				//uint16_t gyroX_angle_calib=0; 
				uint16_t gyroY_angle_calib=0; 
				//uint16_t gyroZ_angle_calib=0; 				
				mpu6050_calibrate_gyro(&gyroX_calib_,&gyroY_calib_,&gyroZ_calib_);
     5aa:	1c 8a       	std	Y+20, r1	; 0x14
     5ac:	1d 8a       	std	Y+21, r1	; 0x15
     5ae:	1e 8a       	std	Y+22, r1	; 0x16
     5b0:	1f 8a       	std	Y+23, r1	; 0x17
     5b2:	18 8e       	std	Y+24, r1	; 0x18
     5b4:	ae 01       	movw	r20, r28
     5b6:	4b 5e       	subi	r20, 0xEB	; 235
     5b8:	5f 4f       	sbci	r21, 0xFF	; 255
     5ba:	be 01       	movw	r22, r28
     5bc:	6f 5e       	subi	r22, 0xEF	; 239
				int16_t gyroX_calib=gyroX_calib_;
     5be:	7f 4f       	sbci	r23, 0xFF	; 255
				int16_t gyroY_calib=gyroY_calib_;
     5c0:	ce 01       	movw	r24, r28
     5c2:	0d 96       	adiw	r24, 0x0d	; 13
				int16_t gyroZ_calib=gyroZ_calib_;
     5c4:	55 d2       	rcall	.+1194   	; 0xa70 <mpu6050_calibrate_gyro>
     5c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c8:	3e 84       	ldd	r3, Y+14	; 0x0e
				int16_t accelX_calib=accelX_calib_;
				int16_t accelY_calib=accelY_calib_;
				int16_t accelZ_calib=accelZ_calib_;				
				//mpu6050_calibrate_accel(&accelX_calib,&accelY_calib,&accelZ_calib);
			#endif
		mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV,7);
     5ca:	29 89       	ldd	r18, Y+17	; 0x11
     5cc:	3a 89       	ldd	r19, Y+18	; 0x12
		mpu6050_writeByte(MPU6050_RA_CONFIG,0x00);
     5ce:	3e a7       	std	Y+46, r19	; 0x2e
     5d0:	2d a7       	std	Y+45, r18	; 0x2d
     5d2:	8d 89       	ldd	r24, Y+21	; 0x15
		mpu6050_writeByte(MPU6050_RA_GYRO_CONFIG,0x08);//gyro sensitivity set to 500 o/s
     5d4:	9e 89       	ldd	r25, Y+22	; 0x16
     5d6:	98 ab       	std	Y+48, r25	; 0x30
     5d8:	8f a7       	std	Y+47, r24	; 0x2f
     5da:	67 e0       	ldi	r22, 0x07	; 7
		mpu6050_writeByte(MPU6050_RA_ACCEL_CONFIG,0x10);//accel sensitivity -/+ 8g
     5dc:	89 e1       	ldi	r24, 0x19	; 25
     5de:	27 d3       	rcall	.+1614   	; 0xc2e <mpu6050_writeByte>
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	8a e1       	ldi	r24, 0x1A	; 26
		mpu6050_writeByte(MPU6050_RA_PWR_MGMT_1,0x01);
     5e4:	24 d3       	rcall	.+1608   	; 0xc2e <mpu6050_writeByte>
     5e6:	68 e0       	ldi	r22, 0x08	; 8
     5e8:	8b e1       	ldi	r24, 0x1B	; 27
     5ea:	21 d3       	rcall	.+1602   	; 0xc2e <mpu6050_writeByte>
	#endif
	/*-----------------end mpu definition -----------------*/
	sei();
     5ec:	60 e1       	ldi	r22, 0x10	; 16
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		double angle_pitch=0;
		double angle_roll=0;
     5ee:	8c e1       	ldi	r24, 0x1C	; 28
     5f0:	1e d3       	rcall	.+1596   	; 0xc2e <mpu6050_writeByte>
     5f2:	61 e0       	ldi	r22, 0x01	; 1
     5f4:	8b e6       	ldi	r24, 0x6B	; 107
		int16_t gyro_y;
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		double angle_pitch=0;
     5f6:	1b d3       	rcall	.+1590   	; 0xc2e <mpu6050_writeByte>
     5f8:	78 94       	sei
     5fa:	1d 8e       	std	Y+29, r1	; 0x1d
     5fc:	1e 8e       	std	Y+30, r1	; 0x1e
	/*-----------------end mpu definition -----------------*/
	sei();
    while (1) /*---------------------------while(1)---------------------------------*/
    {
		#ifdef GYRO
    		mpu6050_getRawData(&accel_x,&accel_y,&accel_z,&gyro_x,&gyro_y,&gyro_z);//15us to do
     5fe:	1f 8e       	std	Y+31, r1	; 0x1f
     600:	18 a2       	std	Y+32, r1	; 0x20
     602:	19 a2       	std	Y+33, r1	; 0x21
     604:	1a a2       	std	Y+34, r1	; 0x22
     606:	1b a2       	std	Y+35, r1	; 0x23
     608:	1c a2       	std	Y+36, r1	; 0x24
     60a:	9e 01       	movw	r18, r28
     60c:	2b 5f       	subi	r18, 0xFB	; 251
     60e:	3f 4f       	sbci	r19, 0xFF	; 255
     610:	79 01       	movw	r14, r18
     612:	8e 01       	movw	r16, r28
     614:	0d 5f       	subi	r16, 0xFD	; 253
     616:	1f 4f       	sbci	r17, 0xFF	; 255
     618:	24 50       	subi	r18, 0x04	; 4
     61a:	31 09       	sbc	r19, r1
     61c:	ae 01       	movw	r20, r28
     61e:	45 5f       	subi	r20, 0xF5	; 245
     620:	5f 4f       	sbci	r21, 0xFF	; 255
		#ifdef GYRO
			#ifdef CALIBERATED_DATA
				accX;
				accY;
				accZ;
				grX;
     622:	be 01       	movw	r22, r28
     624:	67 5f       	subi	r22, 0xF7	; 247
     626:	7f 4f       	sbci	r23, 0xFF	; 255
     628:	ce 01       	movw	r24, r28
     62a:	07 96       	adiw	r24, 0x07	; 7
				grY;
     62c:	5c d3       	rcall	.+1720   	; 0xce6 <mpu6050_getRawData>
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	9a 81       	ldd	r25, Y+2	; 0x02
     632:	82 19       	sub	r24, r2
     634:	93 09       	sbc	r25, r3
				grZ;
     636:	9a 83       	std	Y+2, r25	; 0x02
     638:	89 83       	std	Y+1, r24	; 0x01
     63a:	8b 81       	ldd	r24, Y+3	; 0x03
     63c:	9c 81       	ldd	r25, Y+4	; 0x04
     63e:	2d a5       	ldd	r18, Y+45	; 0x2d
     640:	3e a5       	ldd	r19, Y+46	; 0x2e
     642:	82 1b       	sub	r24, r18
			printf("  ");
			printf("\n");
			/*--------end------*/			
		#else
			
			double dt = (double)((micros() - timer1));
     644:	93 0b       	sbc	r25, r19
     646:	9c 83       	std	Y+4, r25	; 0x04
     648:	8b 83       	std	Y+3, r24	; 0x03
     64a:	8d 81       	ldd	r24, Y+5	; 0x05
     64c:	9e 81       	ldd	r25, Y+6	; 0x06
     64e:	2f a5       	ldd	r18, Y+47	; 0x2f
     650:	38 a9       	ldd	r19, Y+48	; 0x30
     652:	82 1b       	sub	r24, r18
			timer1=micros();
     654:	93 0b       	sbc	r25, r19
     656:	9e 83       	std	Y+6, r25	; 0x06
     658:	8d 83       	std	Y+5, r24	; 0x05
     65a:	7e de       	rcall	.-772    	; 0x358 <micros>
			//double hz=1000000/dt;
			double pop=1/(65.5*1000000/dt);
     65c:	64 19       	sub	r22, r4
     65e:	75 09       	sbc	r23, r5
     660:	86 09       	sbc	r24, r6
     662:	97 09       	sbc	r25, r7
     664:	ac d5       	rcall	.+2904   	; 0x11be <__floatunsisf>
     666:	6b 01       	movw	r12, r22
     668:	7c 01       	movw	r14, r24
     66a:	76 de       	rcall	.-788    	; 0x358 <micros>
     66c:	2b 01       	movw	r4, r22
     66e:	3c 01       	movw	r6, r24
     670:	a7 01       	movw	r20, r14
     672:	96 01       	movw	r18, r12
     674:	68 ed       	ldi	r22, 0xD8	; 216
     676:	7c ed       	ldi	r23, 0xDC	; 220
     678:	89 e7       	ldi	r24, 0x79	; 121
     67a:	9c e4       	ldi	r25, 0x4C	; 76
			//if(loop_bool)
			//{
			//	gyroYrate-=tpel;
			//	loop_bool=false;
			//}
			if (!loop_bool)
     67c:	07 d5       	rcall	.+2574   	; 0x108c <__divsf3>
     67e:	9b 01       	movw	r18, r22
     680:	ac 01       	movw	r20, r24
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	70 e0       	ldi	r23, 0x00	; 0
			{
				angle_pitch += gyroXrate; //Calculate the traveled pitch angle and add this to the angle_pitch variable
     686:	80 e8       	ldi	r24, 0x80	; 128
     688:	9f e3       	ldi	r25, 0x3F	; 63
     68a:	00 d5       	rcall	.+2560   	; 0x108c <__divsf3>
     68c:	6b 01       	movw	r12, r22
     68e:	7c 01       	movw	r14, r24
     690:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <loop_bool>
     694:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <loop_bool+0x1>
     698:	89 2b       	or	r24, r25
     69a:	59 f5       	brne	.+86     	; 0x6f2 <main+0x1ae>
     69c:	69 81       	ldd	r22, Y+1	; 0x01
     69e:	7a 81       	ldd	r23, Y+2	; 0x02
     6a0:	07 2e       	mov	r0, r23
     6a2:	00 0c       	add	r0, r0
     6a4:	88 0b       	sbc	r24, r24
     6a6:	99 0b       	sbc	r25, r25
     6a8:	8c d5       	rcall	.+2840   	; 0x11c2 <__floatsisf>
     6aa:	a7 01       	movw	r20, r14
     6ac:	96 01       	movw	r18, r12
     6ae:	66 d6       	rcall	.+3276   	; 0x137c <__mulsf3>
				angle_roll += gyroYrate;  //Calculate the traveled roll angle and add this to the angle_roll variable			
     6b0:	9b 01       	movw	r18, r22
     6b2:	ac 01       	movw	r20, r24
     6b4:	69 a1       	ldd	r22, Y+33	; 0x21
     6b6:	7a a1       	ldd	r23, Y+34	; 0x22
     6b8:	8b a1       	ldd	r24, Y+35	; 0x23
     6ba:	9c a1       	ldd	r25, Y+36	; 0x24
     6bc:	6c d4       	rcall	.+2264   	; 0xf96 <__addsf3>
     6be:	69 a3       	std	Y+33, r22	; 0x21
     6c0:	7a a3       	std	Y+34, r23	; 0x22
     6c2:	8b a3       	std	Y+35, r24	; 0x23
     6c4:	9c a3       	std	Y+36, r25	; 0x24
     6c6:	6b 81       	ldd	r22, Y+3	; 0x03
     6c8:	7c 81       	ldd	r23, Y+4	; 0x04
     6ca:	07 2e       	mov	r0, r23
     6cc:	00 0c       	add	r0, r0
     6ce:	88 0b       	sbc	r24, r24
     6d0:	99 0b       	sbc	r25, r25
     6d2:	77 d5       	rcall	.+2798   	; 0x11c2 <__floatsisf>
     6d4:	a7 01       	movw	r20, r14
     6d6:	96 01       	movw	r18, r12
     6d8:	51 d6       	rcall	.+3234   	; 0x137c <__mulsf3>
			}
			else
			{
				loop_bool=false;
     6da:	9b 01       	movw	r18, r22
     6dc:	ac 01       	movw	r20, r24
     6de:	6d 8d       	ldd	r22, Y+29	; 0x1d
     6e0:	7e 8d       	ldd	r23, Y+30	; 0x1e
			
			
					
					//0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
			pop*=(3.142/180);	
			angle_pitch += angle_roll * sin(gyro_z * pop);               //If the IMU has yawed transfer the roll angle to the pitch angel
     6e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     6e4:	98 a1       	ldd	r25, Y+32	; 0x20
     6e6:	57 d4       	rcall	.+2222   	; 0xf96 <__addsf3>
     6e8:	6d 8f       	std	Y+29, r22	; 0x1d
     6ea:	7e 8f       	std	Y+30, r23	; 0x1e
     6ec:	8f 8f       	std	Y+31, r24	; 0x1f
     6ee:	98 a3       	std	Y+32, r25	; 0x20
     6f0:	04 c0       	rjmp	.+8      	; 0x6fa <main+0x1b6>
     6f2:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <loop_bool+0x1>
     6f6:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <loop_bool>
     6fa:	6d 81       	ldd	r22, Y+5	; 0x05
     6fc:	7e 81       	ldd	r23, Y+6	; 0x06
     6fe:	07 2e       	mov	r0, r23
     700:	00 0c       	add	r0, r0
     702:	88 0b       	sbc	r24, r24
     704:	99 0b       	sbc	r25, r25
     706:	5d d5       	rcall	.+2746   	; 0x11c2 <__floatsisf>
     708:	4b 01       	movw	r8, r22
     70a:	5c 01       	movw	r10, r24
     70c:	24 ef       	ldi	r18, 0xF4	; 244
     70e:	3e ef       	ldi	r19, 0xFE	; 254
     710:	4e e8       	ldi	r20, 0x8E	; 142
     712:	5c e3       	ldi	r21, 0x3C	; 60
     714:	c7 01       	movw	r24, r14
     716:	b6 01       	movw	r22, r12
     718:	31 d6       	rcall	.+3170   	; 0x137c <__mulsf3>
     71a:	9b 01       	movw	r18, r22
     71c:	ac 01       	movw	r20, r24
     71e:	c5 01       	movw	r24, r10
     720:	b4 01       	movw	r22, r8
     722:	2c d6       	rcall	.+3160   	; 0x137c <__mulsf3>
     724:	8e d6       	rcall	.+3356   	; 0x1442 <sin>
     726:	6b 01       	movw	r12, r22
     728:	7c 01       	movw	r14, r24
     72a:	9b 01       	movw	r18, r22
     72c:	ac 01       	movw	r20, r24
     72e:	6d 8d       	ldd	r22, Y+29	; 0x1d
     730:	7e 8d       	ldd	r23, Y+30	; 0x1e
     732:	8f 8d       	ldd	r24, Y+31	; 0x1f
			angle_roll -= angle_pitch * sin(gyro_z * pop);               //If the IMU has yawed transfer the pitch angle to the roll angel
     734:	98 a1       	ldd	r25, Y+32	; 0x20
     736:	22 d6       	rcall	.+3140   	; 0x137c <__mulsf3>
     738:	9b 01       	movw	r18, r22
     73a:	ac 01       	movw	r20, r24
     73c:	69 a1       	ldd	r22, Y+33	; 0x21
     73e:	7a a1       	ldd	r23, Y+34	; 0x22
     740:	8b a1       	ldd	r24, Y+35	; 0x23
     742:	9c a1       	ldd	r25, Y+36	; 0x24
     744:	28 d4       	rcall	.+2128   	; 0xf96 <__addsf3>
     746:	69 a3       	std	Y+33, r22	; 0x21
     748:	7a a3       	std	Y+34, r23	; 0x22
     74a:	8b a3       	std	Y+35, r24	; 0x23
     74c:	9c a3       	std	Y+36, r25	; 0x24
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
			
			double temporar_accel_x=accel_x/100;
     752:	c7 01       	movw	r24, r14
     754:	b6 01       	movw	r22, r12
     756:	12 d6       	rcall	.+3108   	; 0x137c <__mulsf3>
     758:	9b 01       	movw	r18, r22
     75a:	ac 01       	movw	r20, r24
     75c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     75e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     760:	8f 8d       	ldd	r24, Y+31	; 0x1f
     762:	98 a1       	ldd	r25, Y+32	; 0x20
     764:	17 d4       	rcall	.+2094   	; 0xf94 <__subsf3>
     766:	6d 8f       	std	Y+29, r22	; 0x1d
     768:	7e 8f       	std	Y+30, r23	; 0x1e
     76a:	8f 8f       	std	Y+31, r24	; 0x1f
			double temporar_accel_y=accel_y/100;
     76c:	98 a3       	std	Y+32, r25	; 0x20
     76e:	0f 81       	ldd	r16, Y+7	; 0x07
     770:	18 85       	ldd	r17, Y+8	; 0x08
     772:	c8 01       	movw	r24, r16
     774:	64 e6       	ldi	r22, 0x64	; 100
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	fa d6       	rcall	.+3572   	; 0x156e <__divmodhi4>
     77a:	07 2e       	mov	r0, r23
     77c:	00 0c       	add	r0, r0
     77e:	88 0b       	sbc	r24, r24
     780:	99 0b       	sbc	r25, r25
     782:	1f d5       	rcall	.+2622   	; 0x11c2 <__floatsisf>
     784:	4b 01       	movw	r8, r22
     786:	5c 01       	movw	r10, r24
			double temporar_accel_z=accel_z/100;
     788:	89 85       	ldd	r24, Y+9	; 0x09
     78a:	9a 85       	ldd	r25, Y+10	; 0x0a
     78c:	64 e6       	ldi	r22, 0x64	; 100
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	ee d6       	rcall	.+3548   	; 0x156e <__divmodhi4>
     792:	07 2e       	mov	r0, r23
     794:	00 0c       	add	r0, r0
     796:	88 0b       	sbc	r24, r24
     798:	99 0b       	sbc	r25, r25
     79a:	13 d5       	rcall	.+2598   	; 0x11c2 <__floatsisf>
     79c:	6d a3       	std	Y+37, r22	; 0x25
     79e:	7e a3       	std	Y+38, r23	; 0x26
			
			acc_total_vector = sqrt((temporar_accel_x*temporar_accel_x)+(temporar_accel_y*temporar_accel_y)+(temporar_accel_z*temporar_accel_z));  //Calculate the total accelerometer vector
     7a0:	8f a3       	std	Y+39, r24	; 0x27
     7a2:	98 a7       	std	Y+40, r25	; 0x28
     7a4:	8b 85       	ldd	r24, Y+11	; 0x0b
     7a6:	9c 85       	ldd	r25, Y+12	; 0x0c
     7a8:	64 e6       	ldi	r22, 0x64	; 100
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	e0 d6       	rcall	.+3520   	; 0x156e <__divmodhi4>
     7ae:	07 2e       	mov	r0, r23
     7b0:	00 0c       	add	r0, r0
     7b2:	88 0b       	sbc	r24, r24
     7b4:	99 0b       	sbc	r25, r25
     7b6:	05 d5       	rcall	.+2570   	; 0x11c2 <__floatsisf>
     7b8:	6b 01       	movw	r12, r22
     7ba:	7c 01       	movw	r14, r24
     7bc:	a5 01       	movw	r20, r10
     7be:	94 01       	movw	r18, r8
     7c0:	c5 01       	movw	r24, r10
     7c2:	b4 01       	movw	r22, r8
     7c4:	db d5       	rcall	.+2998   	; 0x137c <__mulsf3>
     7c6:	69 a7       	std	Y+41, r22	; 0x29
     7c8:	7a a7       	std	Y+42, r23	; 0x2a
     7ca:	8b a7       	std	Y+43, r24	; 0x2b
     7cc:	9c a7       	std	Y+44, r25	; 0x2c
     7ce:	2d a1       	ldd	r18, Y+37	; 0x25
     7d0:	3e a1       	ldd	r19, Y+38	; 0x26
     7d2:	4f a1       	ldd	r20, Y+39	; 0x27
     7d4:	58 a5       	ldd	r21, Y+40	; 0x28
     7d6:	ca 01       	movw	r24, r20
     7d8:	b9 01       	movw	r22, r18
     7da:	d0 d5       	rcall	.+2976   	; 0x137c <__mulsf3>
     7dc:	9b 01       	movw	r18, r22
     7de:	ac 01       	movw	r20, r24
     7e0:	69 a5       	ldd	r22, Y+41	; 0x29
     7e2:	7a a5       	ldd	r23, Y+42	; 0x2a
     7e4:	8b a5       	ldd	r24, Y+43	; 0x2b
     7e6:	9c a5       	ldd	r25, Y+44	; 0x2c
     7e8:	d6 d3       	rcall	.+1964   	; 0xf96 <__addsf3>
     7ea:	69 a7       	std	Y+41, r22	; 0x29
     7ec:	7a a7       	std	Y+42, r23	; 0x2a
     7ee:	8b a7       	std	Y+43, r24	; 0x2b
     7f0:	9c a7       	std	Y+44, r25	; 0x2c
     7f2:	a5 01       	movw	r20, r10
     7f4:	94 01       	movw	r18, r8
     7f6:	c5 01       	movw	r24, r10
     7f8:	b4 01       	movw	r22, r8
     7fa:	c0 d5       	rcall	.+2944   	; 0x137c <__mulsf3>
     7fc:	4b 01       	movw	r8, r22
     7fe:	5c 01       	movw	r10, r24
     800:	2d a1       	ldd	r18, Y+37	; 0x25
     802:	3e a1       	ldd	r19, Y+38	; 0x26
     804:	4f a1       	ldd	r20, Y+39	; 0x27
     806:	58 a5       	ldd	r21, Y+40	; 0x28
     808:	ca 01       	movw	r24, r20
     80a:	b9 01       	movw	r22, r18
     80c:	b7 d5       	rcall	.+2926   	; 0x137c <__mulsf3>
     80e:	9b 01       	movw	r18, r22
					//57.296 = 1 / (3.142 / 180) The Arduino asin function is in radians
			acc_total_vector*=100;
		    angle_pitch_acc = asin((double)accel_y/acc_total_vector)* 57.296;       //Calculate the pitch angle
			angle_roll_acc = asin((double)accel_x/acc_total_vector)* -57.296;       //Calculate the roll angle
     810:	ac 01       	movw	r20, r24
     812:	c5 01       	movw	r24, r10
     814:	b4 01       	movw	r22, r8
     816:	bf d3       	rcall	.+1918   	; 0xf96 <__addsf3>
     818:	4b 01       	movw	r8, r22
     81a:	5c 01       	movw	r10, r24
     81c:	a7 01       	movw	r20, r14
     81e:	96 01       	movw	r18, r12
     820:	c7 01       	movw	r24, r14
     822:	b6 01       	movw	r22, r12
     824:	ab d5       	rcall	.+2902   	; 0x137c <__mulsf3>
     826:	9b 01       	movw	r18, r22
     828:	ac 01       	movw	r20, r24
     82a:	c5 01       	movw	r24, r10
     82c:	b4 01       	movw	r22, r8
     82e:	b3 d3       	rcall	.+1894   	; 0xf96 <__addsf3>
     830:	12 d6       	rcall	.+3108   	; 0x1456 <sqrt>
     832:	6b 01       	movw	r12, r22
     834:	7c 01       	movw	r14, r24
     836:	b8 01       	movw	r22, r16
     838:	11 0f       	add	r17, r17
     83a:	88 0b       	sbc	r24, r24
			
			
			
			uint16_t reg=angle_pitch;
     83c:	99 0b       	sbc	r25, r25
     83e:	c1 d4       	rcall	.+2434   	; 0x11c2 <__floatsisf>
     840:	4b 01       	movw	r8, r22
     842:	5c 01       	movw	r10, r24
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	48 ec       	ldi	r20, 0xC8	; 200
			printf(" ");
     84a:	52 e4       	ldi	r21, 0x42	; 66
     84c:	c7 01       	movw	r24, r14
     84e:	b6 01       	movw	r22, r12
			printf("gyroX_angle= ");
     850:	95 d5       	rcall	.+2858   	; 0x137c <__mulsf3>
     852:	9b 01       	movw	r18, r22
     854:	ac 01       	movw	r20, r24
     856:	c5 01       	movw	r24, r10
			print16(&reg);
     858:	b4 01       	movw	r22, r8
     85a:	18 d4       	rcall	.+2096   	; 0x108c <__divsf3>
     85c:	00 d4       	rcall	.+2048   	; 0x105e <asin>
			reg=angle_roll;
     85e:	6b 01       	movw	r12, r22
     860:	7c 01       	movw	r14, r24
     862:	69 a1       	ldd	r22, Y+33	; 0x21
     864:	7a a1       	ldd	r23, Y+34	; 0x22
     866:	8b a1       	ldd	r24, Y+35	; 0x23
     868:	9c a1       	ldd	r25, Y+36	; 0x24
			printf(" ");
     86a:	7d d4       	rcall	.+2298   	; 0x1166 <__fixunssfsi>
     86c:	7c 8f       	std	Y+28, r23	; 0x1c
     86e:	6b 8f       	std	Y+27, r22	; 0x1b
			printf("gyroY_angle= ");
     870:	80 e2       	ldi	r24, 0x20	; 32
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	61 d7       	rcall	.+3778   	; 0x1738 <putchar>
     876:	80 e1       	ldi	r24, 0x10	; 16
     878:	92 e0       	ldi	r25, 0x02	; 2
     87a:	9f 93       	push	r25
			print16(&reg);
     87c:	8f 93       	push	r24
     87e:	49 d7       	rcall	.+3730   	; 0x1712 <printf>
     880:	ce 01       	movw	r24, r28
     882:	4b 96       	adiw	r24, 0x1b	; 27
			
			double xff=angle_roll_acc;
			double final_angleY=(angle_roll*0.996)+(xff*0.004);
     884:	38 de       	rcall	.-912    	; 0x4f6 <print16>
     886:	6d 8d       	ldd	r22, Y+29	; 0x1d
     888:	7e 8d       	ldd	r23, Y+30	; 0x1e
     88a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     88c:	98 a1       	ldd	r25, Y+32	; 0x20
     88e:	6b d4       	rcall	.+2262   	; 0x1166 <__fixunssfsi>
     890:	7c 8f       	std	Y+28, r23	; 0x1c
     892:	6b 8f       	std	Y+27, r22	; 0x1b
     894:	80 e2       	ldi	r24, 0x20	; 32
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	4f d7       	rcall	.+3742   	; 0x1738 <putchar>
     89a:	8e e1       	ldi	r24, 0x1E	; 30
     89c:	92 e0       	ldi	r25, 0x02	; 2
     89e:	9f 93       	push	r25
     8a0:	8f 93       	push	r24
     8a2:	37 d7       	rcall	.+3694   	; 0x1712 <printf>
     8a4:	ce 01       	movw	r24, r28
     8a6:	4b 96       	adiw	r24, 0x1b	; 27
     8a8:	26 de       	rcall	.-948    	; 0x4f6 <print16>
     8aa:	2b e1       	ldi	r18, 0x1B	; 27
     8ac:	3f e2       	ldi	r19, 0x2F	; 47
     8ae:	45 e6       	ldi	r20, 0x65	; 101
     8b0:	52 ec       	ldi	r21, 0xC2	; 194
     8b2:	c7 01       	movw	r24, r14
     8b4:	b6 01       	movw	r22, r12
     8b6:	62 d5       	rcall	.+2756   	; 0x137c <__mulsf3>
     8b8:	2f e6       	ldi	r18, 0x6F	; 111
     8ba:	32 e1       	ldi	r19, 0x12	; 18
     8bc:	43 e8       	ldi	r20, 0x83	; 131
     8be:	5b e3       	ldi	r21, 0x3B	; 59
			reg=final_angleY;
     8c0:	5d d5       	rcall	.+2746   	; 0x137c <__mulsf3>
     8c2:	6b 01       	movw	r12, r22
     8c4:	7c 01       	movw	r14, r24
     8c6:	2b ed       	ldi	r18, 0xDB	; 219
			printf(" ");	
     8c8:	39 ef       	ldi	r19, 0xF9	; 249
     8ca:	4e e7       	ldi	r20, 0x7E	; 126
     8cc:	5f e3       	ldi	r21, 0x3F	; 63
     8ce:	6d 8d       	ldd	r22, Y+29	; 0x1d
			printf("final_angleY= ");
     8d0:	7e 8d       	ldd	r23, Y+30	; 0x1e
     8d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8d4:	98 a1       	ldd	r25, Y+32	; 0x20
     8d6:	52 d5       	rcall	.+2724   	; 0x137c <__mulsf3>
     8d8:	9b 01       	movw	r18, r22
			print16(&reg);
     8da:	ac 01       	movw	r20, r24
     8dc:	c7 01       	movw	r24, r14
     8de:	b6 01       	movw	r22, r12
     8e0:	5a d3       	rcall	.+1716   	; 0xf96 <__addsf3>
						
			#ifdef DRV8313
				uint16_t reg_print=final_angleY;
				uint16_t learing_rate;
				int absoulute_y=abs(final_angleY);
     8e2:	6b 01       	movw	r12, r22
     8e4:	7c 01       	movw	r14, r24
     8e6:	3f d4       	rcall	.+2174   	; 0x1166 <__fixunssfsi>
     8e8:	7c 8f       	std	Y+28, r23	; 0x1c
     8ea:	6b 8f       	std	Y+27, r22	; 0x1b
				uint16_t local_motor_delay=(32735-(absoulute_y*learing_rate));
     8ec:	80 e2       	ldi	r24, 0x20	; 32
				if (local_motor_delay>2000)
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	23 d7       	rcall	.+3654   	; 0x1738 <putchar>
     8f2:	8c e2       	ldi	r24, 0x2C	; 44
     8f4:	92 e0       	ldi	r25, 0x02	; 2
     8f6:	9f 93       	push	r25
     8f8:	8f 93       	push	r24
     8fa:	0b d7       	rcall	.+3606   	; 0x1712 <printf>
     8fc:	ce 01       	movw	r24, r28
     8fe:	4b 96       	adiw	r24, 0x1b	; 27
				{
					pwm_delay=local_motor_delay;
     900:	fa dd       	rcall	.-1036   	; 0x4f6 <print16>
     902:	c7 01       	movw	r24, r14
     904:	b6 01       	movw	r22, r12
     906:	2a d4       	rcall	.+2132   	; 0x115c <__fixsfsi>
				}
				uint16_t reg_ = local_motor_delay;
     908:	8b 01       	movw	r16, r22
     90a:	8f ed       	ldi	r24, 0xDF	; 223
				printf("  ");
     90c:	9f e7       	ldi	r25, 0x7F	; 127
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
				printf("ocr= ");
     918:	0f 90       	pop	r0
     91a:	81 3d       	cpi	r24, 0xD1	; 209
     91c:	37 e0       	ldi	r19, 0x07	; 7
     91e:	93 07       	cpc	r25, r19
     920:	20 f0       	brcs	.+8      	; 0x92a <main+0x3e6>
     922:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <pwm_delay+0x1>
				print16(&reg_);
     926:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <pwm_delay>
     92a:	9a 8f       	std	Y+26, r25	; 0x1a
				if ((int)final_angleY==0)
     92c:	89 8f       	std	Y+25, r24	; 0x19
     92e:	8b e3       	ldi	r24, 0x3B	; 59
     930:	92 e0       	ldi	r25, 0x02	; 2
     932:	9f 93       	push	r25
     934:	8f 93       	push	r24
     936:	ed d6       	rcall	.+3546   	; 0x1712 <printf>
     938:	8e e3       	ldi	r24, 0x3E	; 62
				{
					incr=0;
     93a:	92 e0       	ldi	r25, 0x02	; 2
     93c:	9f 93       	push	r25
     93e:	8f 93       	push	r24
     940:	e8 d6       	rcall	.+3536   	; 0x1712 <printf>
					printf("\n");	
     942:	ce 01       	movw	r24, r28
     944:	49 96       	adiw	r24, 0x19	; 25
     946:	d7 dd       	rcall	.-1106   	; 0x4f6 <print16>
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
				}
				else 
					if ((int)final_angleY>0)
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	01 15       	cp	r16, r1
					{
						cli();
     952:	11 05       	cpc	r17, r1
						incr=1;
     954:	41 f4       	brne	.+16     	; 0x966 <main+0x422>
     956:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <incr+0x1>
     95a:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <incr>
     95e:	8a e0       	ldi	r24, 0x0A	; 10
						printf(" yes\n");
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	ea d6       	rcall	.+3540   	; 0x1738 <putchar>
     964:	52 ce       	rjmp	.-860    	; 0x60a <main+0xc6>
     966:	10 16       	cp	r1, r16
						
						sei();
     968:	11 06       	cpc	r1, r17
     96a:	64 f4       	brge	.+24     	; 0x984 <main+0x440>
					}
					else
					{	cli();
     96c:	f8 94       	cli
						incr=-1;
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <incr+0x1>
     976:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <incr>
						printf(" no\n");
     97a:	84 e4       	ldi	r24, 0x44	; 68
     97c:	92 e0       	ldi	r25, 0x02	; 2
     97e:	e1 d6       	rcall	.+3522   	; 0x1742 <puts>
     980:	78 94       	sei
						sei();
     982:	43 ce       	rjmp	.-890    	; 0x60a <main+0xc6>
			//	 set_gyro_angles = true;                                            //Set the IMU started flag
			//}
			
			#endif //PRINT_RAW_DATA			
		#endif //GYRO
	}
     984:	f8 94       	cli
     986:	8f ef       	ldi	r24, 0xFF	; 255
     988:	9f ef       	ldi	r25, 0xFF	; 255
     98a:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <incr+0x1>
     98e:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <incr>
     992:	89 e4       	ldi	r24, 0x49	; 73
     994:	92 e0       	ldi	r25, 0x02	; 2
     996:	d5 d6       	rcall	.+3498   	; 0x1742 <puts>
     998:	78 94       	sei
     99a:	37 ce       	rjmp	.-914    	; 0x60a <main+0xc6>

0000099c <print16ln>:
}

void print16ln(uint16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	2a 97       	sbiw	r28, 0x0a	; 10
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
     9b4:	4a e0       	ldi	r20, 0x0A	; 10
     9b6:	8e 01       	movw	r16, r28
     9b8:	0f 5f       	subi	r16, 0xFF	; 255
     9ba:	1f 4f       	sbci	r17, 0xFF	; 255
     9bc:	b8 01       	movw	r22, r16
     9be:	fc 01       	movw	r30, r24
     9c0:	80 81       	ld	r24, Z
     9c2:	91 81       	ldd	r25, Z+1	; 0x01
     9c4:	39 d6       	rcall	.+3186   	; 0x1638 <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     9c6:	1f 93       	push	r17
     9c8:	0f 93       	push	r16
	printf("\n");
     9ca:	a3 d6       	rcall	.+3398   	; 0x1712 <printf>
     9cc:	8a e0       	ldi	r24, 0x0A	; 10
     9ce:	90 e0       	ldi	r25, 0x00	; 0
}
     9d0:	b3 d6       	rcall	.+3430   	; 0x1738 <putchar>
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	2a 96       	adiw	r28, 0x0a	; 10
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	de bf       	out	0x3e, r29	; 62
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	cd bf       	out	0x3d, r28	; 61
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	08 95       	ret

000009ec <mpu6050_readByte>:
	printf("  ");
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/
}
     9ec:	cf 93       	push	r28
     9ee:	c8 2f       	mov	r28, r24
     9f0:	80 ed       	ldi	r24, 0xD0	; 208
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	19 d2       	rcall	.+1074   	; 0xe28 <i2c_start>
     9f6:	8c 2f       	mov	r24, r28
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	6c d2       	rcall	.+1240   	; 0xed4 <i2c_write>
     9fc:	5b d2       	rcall	.+1206   	; 0xeb4 <i2c_stop>
     9fe:	81 ed       	ldi	r24, 0xD1	; 209
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	12 d2       	rcall	.+1060   	; 0xe28 <i2c_start>
     a04:	a2 d2       	rcall	.+1348   	; 0xf4a <i2c_readNak>
     a06:	c8 2f       	mov	r28, r24
     a08:	55 d2       	rcall	.+1194   	; 0xeb4 <i2c_stop>
     a0a:	8c 2f       	mov	r24, r28
     a0c:	cf 91       	pop	r28
     a0e:	08 95       	ret

00000a10 <mpu6050_read_gyroX>:
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	83 e4       	ldi	r24, 0x43	; 67
     a16:	ea df       	rcall	.-44     	; 0x9ec <mpu6050_readByte>
     a18:	c8 2f       	mov	r28, r24
     a1a:	d0 e0       	ldi	r29, 0x00	; 0
     a1c:	dc 2f       	mov	r29, r28
     a1e:	cc 27       	eor	r28, r28
     a20:	84 e4       	ldi	r24, 0x44	; 68
     a22:	e4 df       	rcall	.-56     	; 0x9ec <mpu6050_readByte>
     a24:	9e 01       	movw	r18, r28
     a26:	28 2b       	or	r18, r24
     a28:	c9 01       	movw	r24, r18
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	08 95       	ret

00000a30 <mpu6050_read_gyroY>:
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	85 e4       	ldi	r24, 0x45	; 69
     a36:	da df       	rcall	.-76     	; 0x9ec <mpu6050_readByte>
     a38:	c8 2f       	mov	r28, r24
     a3a:	d0 e0       	ldi	r29, 0x00	; 0
     a3c:	dc 2f       	mov	r29, r28
     a3e:	cc 27       	eor	r28, r28
     a40:	86 e4       	ldi	r24, 0x46	; 70
     a42:	d4 df       	rcall	.-88     	; 0x9ec <mpu6050_readByte>
     a44:	9e 01       	movw	r18, r28
     a46:	28 2b       	or	r18, r24
     a48:	c9 01       	movw	r24, r18
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	08 95       	ret

00000a50 <mpu6050_read_gyroZ>:
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	87 e4       	ldi	r24, 0x47	; 71
     a56:	ca df       	rcall	.-108    	; 0x9ec <mpu6050_readByte>
     a58:	c8 2f       	mov	r28, r24
     a5a:	d0 e0       	ldi	r29, 0x00	; 0
     a5c:	dc 2f       	mov	r29, r28
     a5e:	cc 27       	eor	r28, r28
     a60:	88 e4       	ldi	r24, 0x48	; 72
     a62:	c4 df       	rcall	.-120    	; 0x9ec <mpu6050_readByte>
     a64:	9e 01       	movw	r18, r28
     a66:	28 2b       	or	r18, r24
     a68:	c9 01       	movw	r24, r18
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	08 95       	ret

00000a70 <mpu6050_calibrate_gyro>:
     a70:	cf 92       	push	r12
     a72:	df 92       	push	r13
     a74:	ef 92       	push	r14
     a76:	ff 92       	push	r15
     a78:	0f 93       	push	r16
     a7a:	1f 93       	push	r17
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	6c 01       	movw	r12, r24
     a82:	7b 01       	movw	r14, r22
     a84:	8a 01       	movw	r16, r20
     a86:	8d e4       	ldi	r24, 0x4D	; 77
     a88:	92 e0       	ldi	r25, 0x02	; 2
     a8a:	5b d6       	rcall	.+3254   	; 0x1742 <puts>
     a8c:	c8 ec       	ldi	r28, 0xC8	; 200
     a8e:	d0 e0       	ldi	r29, 0x00	; 0
     a90:	bf df       	rcall	.-130    	; 0xa10 <mpu6050_read_gyroX>
     a92:	f6 01       	movw	r30, r12
     a94:	40 81       	ld	r20, Z
     a96:	51 81       	ldd	r21, Z+1	; 0x01
     a98:	62 81       	ldd	r22, Z+2	; 0x02
     a9a:	73 81       	ldd	r23, Z+3	; 0x03
     a9c:	48 0f       	add	r20, r24
     a9e:	59 1f       	adc	r21, r25
     aa0:	61 1d       	adc	r22, r1
     aa2:	71 1d       	adc	r23, r1
     aa4:	40 83       	st	Z, r20
     aa6:	51 83       	std	Z+1, r21	; 0x01
     aa8:	62 83       	std	Z+2, r22	; 0x02
     aaa:	73 83       	std	Z+3, r23	; 0x03
     aac:	c1 df       	rcall	.-126    	; 0xa30 <mpu6050_read_gyroY>
     aae:	f7 01       	movw	r30, r14
     ab0:	40 81       	ld	r20, Z
     ab2:	51 81       	ldd	r21, Z+1	; 0x01
     ab4:	62 81       	ldd	r22, Z+2	; 0x02
     ab6:	73 81       	ldd	r23, Z+3	; 0x03
     ab8:	48 0f       	add	r20, r24
     aba:	59 1f       	adc	r21, r25
     abc:	61 1d       	adc	r22, r1
     abe:	71 1d       	adc	r23, r1
     ac0:	40 83       	st	Z, r20
     ac2:	51 83       	std	Z+1, r21	; 0x01
     ac4:	62 83       	std	Z+2, r22	; 0x02
     ac6:	73 83       	std	Z+3, r23	; 0x03
     ac8:	c3 df       	rcall	.-122    	; 0xa50 <mpu6050_read_gyroZ>
     aca:	f8 01       	movw	r30, r16
     acc:	40 81       	ld	r20, Z
     ace:	51 81       	ldd	r21, Z+1	; 0x01
     ad0:	62 81       	ldd	r22, Z+2	; 0x02
     ad2:	73 81       	ldd	r23, Z+3	; 0x03
     ad4:	48 0f       	add	r20, r24
     ad6:	59 1f       	adc	r21, r25
     ad8:	61 1d       	adc	r22, r1
     ada:	71 1d       	adc	r23, r1
     adc:	40 83       	st	Z, r20
     ade:	51 83       	std	Z+1, r21	; 0x01
     ae0:	62 83       	std	Z+2, r22	; 0x02
     ae2:	73 83       	std	Z+3, r23	; 0x03
     ae4:	8f e3       	ldi	r24, 0x3F	; 63
     ae6:	9f e1       	ldi	r25, 0x1F	; 31
     ae8:	01 97       	sbiw	r24, 0x01	; 1
     aea:	f1 f7       	brne	.-4      	; 0xae8 <mpu6050_calibrate_gyro+0x78>
     aec:	00 c0       	rjmp	.+0      	; 0xaee <mpu6050_calibrate_gyro+0x7e>
     aee:	00 00       	nop
     af0:	21 97       	sbiw	r28, 0x01	; 1
     af2:	71 f6       	brne	.-100    	; 0xa90 <mpu6050_calibrate_gyro+0x20>
     af4:	f6 01       	movw	r30, r12
     af6:	60 81       	ld	r22, Z
     af8:	71 81       	ldd	r23, Z+1	; 0x01
     afa:	82 81       	ldd	r24, Z+2	; 0x02
     afc:	93 81       	ldd	r25, Z+3	; 0x03
     afe:	99 23       	and	r25, r25
     b00:	ac f4       	brge	.+42     	; 0xb2c <mpu6050_calibrate_gyro+0xbc>
     b02:	9b 01       	movw	r18, r22
     b04:	77 23       	and	r23, r23
     b06:	24 f4       	brge	.+8      	; 0xb10 <mpu6050_calibrate_gyro+0xa0>
     b08:	22 27       	eor	r18, r18
     b0a:	33 27       	eor	r19, r19
     b0c:	26 1b       	sub	r18, r22
     b0e:	37 0b       	sbc	r19, r23
     b10:	c9 01       	movw	r24, r18
     b12:	68 ec       	ldi	r22, 0xC8	; 200
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	2b d5       	rcall	.+2646   	; 0x156e <__divmodhi4>
     b18:	cb 01       	movw	r24, r22
     b1a:	77 0f       	add	r23, r23
     b1c:	aa 0b       	sbc	r26, r26
     b1e:	bb 0b       	sbc	r27, r27
     b20:	f6 01       	movw	r30, r12
     b22:	80 83       	st	Z, r24
     b24:	91 83       	std	Z+1, r25	; 0x01
     b26:	a2 83       	std	Z+2, r26	; 0x02
     b28:	b3 83       	std	Z+3, r27	; 0x03
     b2a:	0a c0       	rjmp	.+20     	; 0xb40 <mpu6050_calibrate_gyro+0xd0>
     b2c:	28 ec       	ldi	r18, 0xC8	; 200
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	2f d5       	rcall	.+2654   	; 0x1594 <__divmodsi4>
     b36:	f6 01       	movw	r30, r12
     b38:	20 83       	st	Z, r18
     b3a:	31 83       	std	Z+1, r19	; 0x01
     b3c:	42 83       	std	Z+2, r20	; 0x02
     b3e:	53 83       	std	Z+3, r21	; 0x03
     b40:	f7 01       	movw	r30, r14
     b42:	60 81       	ld	r22, Z
     b44:	71 81       	ldd	r23, Z+1	; 0x01
     b46:	82 81       	ldd	r24, Z+2	; 0x02
     b48:	93 81       	ldd	r25, Z+3	; 0x03
     b4a:	99 23       	and	r25, r25
     b4c:	ac f4       	brge	.+42     	; 0xb78 <mpu6050_calibrate_gyro+0x108>
     b4e:	9b 01       	movw	r18, r22
     b50:	77 23       	and	r23, r23
     b52:	24 f4       	brge	.+8      	; 0xb5c <mpu6050_calibrate_gyro+0xec>
     b54:	22 27       	eor	r18, r18
     b56:	33 27       	eor	r19, r19
     b58:	26 1b       	sub	r18, r22
     b5a:	37 0b       	sbc	r19, r23
     b5c:	c9 01       	movw	r24, r18
     b5e:	68 ec       	ldi	r22, 0xC8	; 200
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	05 d5       	rcall	.+2570   	; 0x156e <__divmodhi4>
     b64:	cb 01       	movw	r24, r22
     b66:	77 0f       	add	r23, r23
     b68:	aa 0b       	sbc	r26, r26
     b6a:	bb 0b       	sbc	r27, r27
     b6c:	f7 01       	movw	r30, r14
     b6e:	80 83       	st	Z, r24
     b70:	91 83       	std	Z+1, r25	; 0x01
     b72:	a2 83       	std	Z+2, r26	; 0x02
     b74:	b3 83       	std	Z+3, r27	; 0x03
     b76:	0a c0       	rjmp	.+20     	; 0xb8c <mpu6050_calibrate_gyro+0x11c>
     b78:	28 ec       	ldi	r18, 0xC8	; 200
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	09 d5       	rcall	.+2578   	; 0x1594 <__divmodsi4>
     b82:	f7 01       	movw	r30, r14
     b84:	20 83       	st	Z, r18
     b86:	31 83       	std	Z+1, r19	; 0x01
     b88:	42 83       	std	Z+2, r20	; 0x02
     b8a:	53 83       	std	Z+3, r21	; 0x03
     b8c:	f8 01       	movw	r30, r16
     b8e:	60 81       	ld	r22, Z
     b90:	71 81       	ldd	r23, Z+1	; 0x01
     b92:	82 81       	ldd	r24, Z+2	; 0x02
     b94:	93 81       	ldd	r25, Z+3	; 0x03
     b96:	99 23       	and	r25, r25
     b98:	ac f4       	brge	.+42     	; 0xbc4 <mpu6050_calibrate_gyro+0x154>
     b9a:	9b 01       	movw	r18, r22
     b9c:	77 23       	and	r23, r23
     b9e:	24 f4       	brge	.+8      	; 0xba8 <mpu6050_calibrate_gyro+0x138>
     ba0:	22 27       	eor	r18, r18
     ba2:	33 27       	eor	r19, r19
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	c9 01       	movw	r24, r18
     baa:	68 ec       	ldi	r22, 0xC8	; 200
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	df d4       	rcall	.+2494   	; 0x156e <__divmodhi4>
     bb0:	cb 01       	movw	r24, r22
     bb2:	77 0f       	add	r23, r23
     bb4:	aa 0b       	sbc	r26, r26
     bb6:	bb 0b       	sbc	r27, r27
     bb8:	f8 01       	movw	r30, r16
     bba:	80 83       	st	Z, r24
     bbc:	91 83       	std	Z+1, r25	; 0x01
     bbe:	a2 83       	std	Z+2, r26	; 0x02
     bc0:	b3 83       	std	Z+3, r27	; 0x03
     bc2:	0a c0       	rjmp	.+20     	; 0xbd8 <mpu6050_calibrate_gyro+0x168>
     bc4:	28 ec       	ldi	r18, 0xC8	; 200
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	e3 d4       	rcall	.+2502   	; 0x1594 <__divmodsi4>
     bce:	f8 01       	movw	r30, r16
     bd0:	20 83       	st	Z, r18
     bd2:	31 83       	std	Z+1, r19	; 0x01
     bd4:	42 83       	std	Z+2, r20	; 0x02
     bd6:	53 83       	std	Z+3, r21	; 0x03
     bd8:	83 e6       	ldi	r24, 0x63	; 99
     bda:	92 e0       	ldi	r25, 0x02	; 2
     bdc:	9f 93       	push	r25
     bde:	8f 93       	push	r24
     be0:	98 d5       	rcall	.+2864   	; 0x1712 <printf>
     be2:	c6 01       	movw	r24, r12
     be4:	88 dc       	rcall	.-1776   	; 0x4f6 <print16>
     be6:	cb e3       	ldi	r28, 0x3B	; 59
     be8:	d2 e0       	ldi	r29, 0x02	; 2
     bea:	df 93       	push	r29
     bec:	cf 93       	push	r28
     bee:	91 d5       	rcall	.+2850   	; 0x1712 <printf>
     bf0:	c7 01       	movw	r24, r14
     bf2:	81 dc       	rcall	.-1790   	; 0x4f6 <print16>
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	8c d5       	rcall	.+2840   	; 0x1712 <printf>
     bfa:	c8 01       	movw	r24, r16
     bfc:	cf de       	rcall	.-610    	; 0x99c <print16ln>
     bfe:	ef ef       	ldi	r30, 0xFF	; 255
     c00:	f3 ed       	ldi	r31, 0xD3	; 211
     c02:	20 e3       	ldi	r18, 0x30	; 48
     c04:	e1 50       	subi	r30, 0x01	; 1
     c06:	f0 40       	sbci	r31, 0x00	; 0
     c08:	20 40       	sbci	r18, 0x00	; 0
     c0a:	e1 f7       	brne	.-8      	; 0xc04 <mpu6050_calibrate_gyro+0x194>
     c0c:	00 c0       	rjmp	.+0      	; 0xc0e <mpu6050_calibrate_gyro+0x19e>
     c0e:	00 00       	nop
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	ff 90       	pop	r15
     c26:	ef 90       	pop	r14
     c28:	df 90       	pop	r13
     c2a:	cf 90       	pop	r12
     c2c:	08 95       	ret

00000c2e <mpu6050_writeByte>:
	uint8_t byteToReturn=i2c_readNak();
	i2c_stop();
	return byteToReturn;
}
void mpu6050_writeByte(uint8_t wereToWrite,uint8_t byteToWrite)//writebyte
{
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	d8 2f       	mov	r29, r24
     c34:	c6 2f       	mov	r28, r22
	i2c_start(MPU6050_WRITE);
     c36:	80 ed       	ldi	r24, 0xD0	; 208
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	f6 d0       	rcall	.+492    	; 0xe28 <i2c_start>
	i2c_write(wereToWrite);
     c3c:	8d 2f       	mov	r24, r29
     c3e:	90 e0       	ldi	r25, 0x00	; 0
	i2c_write(byteToWrite);
     c40:	49 d1       	rcall	.+658    	; 0xed4 <i2c_write>
     c42:	8c 2f       	mov	r24, r28
	i2c_stop();
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	46 d1       	rcall	.+652    	; 0xed4 <i2c_write>
}
     c48:	35 d1       	rcall	.+618    	; 0xeb4 <i2c_stop>
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	08 95       	ret

00000c50 <mpu6050_readBytes>:
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
     c50:	af 92       	push	r10
     c52:	bf 92       	push	r11
     c54:	cf 92       	push	r12
     c56:	df 92       	push	r13
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
     c62:	66 23       	and	r22, r22
     c64:	a1 f1       	breq	.+104    	; 0xcce <mpu6050_readBytes+0x7e>
     c66:	c5 2f       	mov	r28, r21
     c68:	d4 2f       	mov	r29, r20
     c6a:	f6 2e       	mov	r15, r22
     c6c:	18 2f       	mov	r17, r24
		//request register
		i2c_start(MPU6050_WRITE);
     c6e:	80 ed       	ldi	r24, 0xD0	; 208
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	da d0       	rcall	.+436    	; 0xe28 <i2c_start>
		i2c_write(regAddr);
     c74:	81 2f       	mov	r24, r17
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	2d d1       	rcall	.+602    	; 0xed4 <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c7a:	85 e3       	ldi	r24, 0x35	; 53
     c7c:	8a 95       	dec	r24
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <mpu6050_readBytes+0x2c>
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
     c80:	00 00       	nop
     c82:	81 ed       	ldi	r24, 0xD1	; 209
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	d0 d0       	rcall	.+416    	; 0xe28 <i2c_start>
     c88:	0d 2f       	mov	r16, r29
     c8a:	1c 2f       	mov	r17, r28
     c8c:	cc 24       	eor	r12, r12
     c8e:	ca 94       	dec	r12
     c90:	cf 0c       	add	r12, r15
     c92:	d1 2c       	mov	r13, r1
     c94:	ef ef       	ldi	r30, 0xFF	; 255
     c96:	ce 1a       	sub	r12, r30
     c98:	de 0a       	sbc	r13, r30
     c9a:	c0 e0       	ldi	r28, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
     c9c:	d0 e0       	ldi	r29, 0x00	; 0
     c9e:	af 2c       	mov	r10, r15
     ca0:	b1 2c       	mov	r11, r1
     ca2:	f1 e0       	ldi	r31, 0x01	; 1
     ca4:	af 1a       	sub	r10, r31
     ca6:	b1 08       	sbc	r11, r1
     ca8:	ac 16       	cp	r10, r28
			data[i] = i2c_readNak();
     caa:	bd 06       	cpc	r11, r29
     cac:	21 f4       	brne	.+8      	; 0xcb6 <mpu6050_readBytes+0x66>
     cae:	4d d1       	rcall	.+666    	; 0xf4a <i2c_readNak>
     cb0:	f8 01       	movw	r30, r16
			else
			data[i] = i2c_readAck();
     cb2:	80 83       	st	Z, r24
     cb4:	03 c0       	rjmp	.+6      	; 0xcbc <mpu6050_readBytes+0x6c>
     cb6:	2f d1       	rcall	.+606    	; 0xf16 <i2c_readAck>
     cb8:	f8 01       	movw	r30, r16
     cba:	80 83       	st	Z, r24
     cbc:	21 96       	adiw	r28, 0x01	; 1
		i2c_start(MPU6050_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
		for(i=0; i<length; i++) {
     cbe:	0f 5f       	subi	r16, 0xFF	; 255
     cc0:	1f 4f       	sbci	r17, 0xFF	; 255
     cc2:	cc 15       	cp	r28, r12
     cc4:	dd 05       	cpc	r29, r13
			if(i==length-1)
			data[i] = i2c_readNak();
			else
			data[i] = i2c_readAck();
		}
		i2c_stop();
     cc6:	81 f7       	brne	.-32     	; 0xca8 <mpu6050_readBytes+0x58>
     cc8:	cf 2d       	mov	r28, r15
     cca:	f4 d0       	rcall	.+488    	; 0xeb4 <i2c_stop>
	i2c_write(byteToWrite);
	i2c_stop();
}
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
	uint8_t i = 0;
	int8_t count = 0;
     ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <mpu6050_readBytes+0x80>
			data[i] = i2c_readAck();
		}
		i2c_stop();
	}
	return count;
}
     cce:	c0 e0       	ldi	r28, 0x00	; 0
     cd0:	8c 2f       	mov	r24, r28
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	1f 91       	pop	r17
     cd8:	0f 91       	pop	r16
     cda:	ff 90       	pop	r15
     cdc:	df 90       	pop	r13
     cde:	cf 90       	pop	r12
     ce0:	bf 90       	pop	r11
     ce2:	af 90       	pop	r10
     ce4:	08 95       	ret

00000ce6 <mpu6050_getRawData>:
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     ce6:	6f 92       	push	r6
     ce8:	7f 92       	push	r7
     cea:	8f 92       	push	r8
     cec:	9f 92       	push	r9
     cee:	af 92       	push	r10
     cf0:	bf 92       	push	r11
     cf2:	cf 92       	push	r12
     cf4:	df 92       	push	r13
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	2e 97       	sbiw	r28, 0x0e	; 14
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	de bf       	out	0x3e, r29	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	cd bf       	out	0x3d, r28	; 61
     d12:	4c 01       	movw	r8, r24
     d14:	5b 01       	movw	r10, r22
     d16:	6a 01       	movw	r12, r20
     d18:	39 01       	movw	r6, r18
	uint8_t buffer[14];
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14,  buffer);
     d1a:	ae 01       	movw	r20, r28
     d1c:	4f 5f       	subi	r20, 0xFF	; 255
     d1e:	5f 4f       	sbci	r21, 0xFF	; 255
     d20:	6e e0       	ldi	r22, 0x0E	; 14
     d22:	8b e3       	ldi	r24, 0x3B	; 59
     d24:	95 df       	rcall	.-214    	; 0xc50 <mpu6050_readBytes>
	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	98 2f       	mov	r25, r24
     d2c:	88 27       	eor	r24, r24
     d2e:	2a 81       	ldd	r18, Y+2	; 0x02
     d30:	82 2b       	or	r24, r18
     d32:	f4 01       	movw	r30, r8
     d34:	91 83       	std	Z+1, r25	; 0x01
     d36:	80 83       	st	Z, r24
	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	98 2f       	mov	r25, r24
     d3e:	88 27       	eor	r24, r24
     d40:	2c 81       	ldd	r18, Y+4	; 0x04
     d42:	82 2b       	or	r24, r18
     d44:	f5 01       	movw	r30, r10
     d46:	91 83       	std	Z+1, r25	; 0x01
     d48:	80 83       	st	Z, r24
	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
     d4a:	8d 81       	ldd	r24, Y+5	; 0x05
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	98 2f       	mov	r25, r24
     d50:	88 27       	eor	r24, r24
     d52:	2e 81       	ldd	r18, Y+6	; 0x06
     d54:	82 2b       	or	r24, r18
     d56:	f6 01       	movw	r30, r12
     d58:	91 83       	std	Z+1, r25	; 0x01
     d5a:	80 83       	st	Z, r24
	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     d5c:	89 85       	ldd	r24, Y+9	; 0x09
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	98 2f       	mov	r25, r24
     d62:	88 27       	eor	r24, r24
     d64:	2a 85       	ldd	r18, Y+10	; 0x0a
     d66:	82 2b       	or	r24, r18
     d68:	f3 01       	movw	r30, r6
     d6a:	91 83       	std	Z+1, r25	; 0x01
     d6c:	80 83       	st	Z, r24
	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     d6e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	98 2f       	mov	r25, r24
     d74:	88 27       	eor	r24, r24
     d76:	2c 85       	ldd	r18, Y+12	; 0x0c
     d78:	82 2b       	or	r24, r18
     d7a:	f8 01       	movw	r30, r16
     d7c:	91 83       	std	Z+1, r25	; 0x01
     d7e:	80 83       	st	Z, r24
	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     d80:	8d 85       	ldd	r24, Y+13	; 0x0d
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	98 2f       	mov	r25, r24
     d86:	88 27       	eor	r24, r24
     d88:	2e 85       	ldd	r18, Y+14	; 0x0e
     d8a:	82 2b       	or	r24, r18
     d8c:	f7 01       	movw	r30, r14
     d8e:	91 83       	std	Z+1, r25	; 0x01
     d90:	80 83       	st	Z, r24
     d92:	2e 96       	adiw	r28, 0x0e	; 14
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	ff 90       	pop	r15
     da8:	ef 90       	pop	r14
     daa:	df 90       	pop	r13
     dac:	cf 90       	pop	r12
     dae:	bf 90       	pop	r11
     db0:	af 90       	pop	r10
     db2:	9f 90       	pop	r9
     db4:	8f 90       	pop	r8
     db6:	7f 90       	pop	r7
     db8:	6f 90       	pop	r6
     dba:	08 95       	ret

00000dbc <setup_timer4>:

#define clockCyclesPerMicrosecond () ( F_CPU / 1000000L )

/*-----------Timter 1-----------*/
void setup_timer4(void){
    sbi (TCCR4B, CS40);//prescakaer 256
     dbc:	e1 ea       	ldi	r30, 0xA1	; 161
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	81 60       	ori	r24, 0x01	; 1
     dc4:	80 83       	st	Z, r24
    sbi (TCCR4A, WGM40);//8 bit phase correct PWM
     dc6:	e0 ea       	ldi	r30, 0xA0	; 160
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	81 60       	ori	r24, 0x01	; 1
     dce:	80 83       	st	Z, r24
	
	//sbi (TCCR4A,COM4A0);
	sbi (TCCR4A,COM4A1);
     dd0:	80 81       	ld	r24, Z
     dd2:	80 68       	ori	r24, 0x80	; 128
     dd4:	80 83       	st	Z, r24
	//sbi (TCCR4A,COM4B0);
	sbi (TCCR4A,COM4B1);
     dd6:	80 81       	ld	r24, Z
     dd8:	80 62       	ori	r24, 0x20	; 32
     dda:	80 83       	st	Z, r24
	//sbi (TCCR4A,COM4C0);
	sbi (TCCR4A,COM4C1);
     ddc:	80 81       	ld	r24, Z
     dde:	88 60       	ori	r24, 0x08	; 8
     de0:	80 83       	st	Z, r24
     de2:	08 95       	ret

00000de4 <setup_timer5>:
}


/*-----------Timter 5-----------*/
void setup_timer5(void){
	sbi (TCCR5B, CS50);//only this 8
     de4:	e1 e2       	ldi	r30, 0x21	; 33
     de6:	f1 e0       	ldi	r31, 0x01	; 1
     de8:	80 81       	ld	r24, Z
     dea:	81 60       	ori	r24, 0x01	; 1
     dec:	80 83       	st	Z, r24
	//sbi (TCCR5B, CS52);//only this 256
	sbi (TCCR5B, WGM52);//OCR4A compare interrupt
     dee:	80 81       	ld	r24, Z
     df0:	88 60       	ori	r24, 0x08	; 8
     df2:	80 83       	st	Z, r24
     df4:	08 95       	ret

00000df6 <Enable_timer5_compare_interrupt>:
	
}
void Enable_timer5_compare_interrupt(){
	sbi (TIMSK5, OCIE5A);
     df6:	e3 e7       	ldi	r30, 0x73	; 115
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	82 60       	ori	r24, 0x02	; 2
     dfe:	80 83       	st	Z, r24
     e00:	08 95       	ret

00000e02 <setup_timer0>:
}
/*-----------Timter 2-----------*/
void setup_timer0(void){
	sbi(TCCR0B,CS00);
     e02:	85 b5       	in	r24, 0x25	; 37
     e04:	81 60       	ori	r24, 0x01	; 1
     e06:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B,CS01);;//prescaler 64 , 250khz timer
     e08:	85 b5       	in	r24, 0x25	; 37
     e0a:	82 60       	ori	r24, 0x02	; 2
     e0c:	85 bd       	out	0x25, r24	; 37
     e0e:	08 95       	ret

00000e10 <Enable_timer0_overflow_interrupt>:
}
void Enable_timer0_overflow_interrupt(){
	sbi(TIMSK0,TOIE0);
     e10:	ee e6       	ldi	r30, 0x6E	; 110
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	81 60       	ori	r24, 0x01	; 1
     e18:	80 83       	st	Z, r24
     e1a:	08 95       	ret

00000e1c <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     e1c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     e20:	8c e0       	ldi	r24, 0x0C	; 12
     e22:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     e26:	08 95       	ret

00000e28 <i2c_start>:
     e28:	94 ea       	ldi	r25, 0xA4	; 164
     e2a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     e2e:	4f ef       	ldi	r20, 0xFF	; 255
     e30:	50 e0       	ldi	r21, 0x00	; 0
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	ec eb       	ldi	r30, 0xBC	; 188
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	90 81       	ld	r25, Z
     e3c:	99 23       	and	r25, r25
     e3e:	34 f0       	brlt	.+12     	; 0xe4c <i2c_start+0x24>
     e40:	41 50       	subi	r20, 0x01	; 1
     e42:	51 09       	sbc	r21, r1
     e44:	61 09       	sbc	r22, r1
     e46:	71 09       	sbc	r23, r1
     e48:	c0 f7       	brcc	.-16     	; 0xe3a <i2c_start+0x12>
     e4a:	04 c0       	rjmp	.+8      	; 0xe54 <i2c_start+0x2c>
     e4c:	45 2b       	or	r20, r21
     e4e:	46 2b       	or	r20, r22
     e50:	47 2b       	or	r20, r23
     e52:	41 f1       	breq	.+80     	; 0xea4 <i2c_start+0x7c>
     e54:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     e58:	98 7f       	andi	r25, 0xF8	; 248
     e5a:	98 30       	cpi	r25, 0x08	; 8
     e5c:	11 f0       	breq	.+4      	; 0xe62 <i2c_start+0x3a>
     e5e:	90 31       	cpi	r25, 0x10	; 16
     e60:	19 f5       	brne	.+70     	; 0xea8 <i2c_start+0x80>
     e62:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     e66:	84 e8       	ldi	r24, 0x84	; 132
     e68:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     e6c:	8f ef       	ldi	r24, 0xFF	; 255
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a0 e0       	ldi	r26, 0x00	; 0
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	ec eb       	ldi	r30, 0xBC	; 188
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	20 81       	ld	r18, Z
     e7a:	22 23       	and	r18, r18
     e7c:	2c f0       	brlt	.+10     	; 0xe88 <i2c_start+0x60>
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	a1 09       	sbc	r26, r1
     e82:	b1 09       	sbc	r27, r1
     e84:	c8 f7       	brcc	.-14     	; 0xe78 <i2c_start+0x50>
     e86:	04 c0       	rjmp	.+8      	; 0xe90 <i2c_start+0x68>
     e88:	89 2b       	or	r24, r25
     e8a:	8a 2b       	or	r24, r26
     e8c:	8b 2b       	or	r24, r27
     e8e:	71 f0       	breq	.+28     	; 0xeac <i2c_start+0x84>
     e90:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     e94:	98 7f       	andi	r25, 0xF8	; 248
     e96:	98 31       	cpi	r25, 0x18	; 24
     e98:	59 f0       	breq	.+22     	; 0xeb0 <i2c_start+0x88>
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 34       	cpi	r25, 0x40	; 64
     e9e:	49 f4       	brne	.+18     	; 0xeb2 <i2c_start+0x8a>
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	08 95       	ret
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	08 95       	ret
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	08 95       	ret
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	08 95       	ret
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	08 95       	ret

00000eb4 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     eb4:	84 e9       	ldi	r24, 0x94	; 148
     eb6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	ec eb       	ldi	r30, 0xBC	; 188
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	20 81       	ld	r18, Z
     ec4:	24 ff       	sbrs	r18, 4
     ec6:	05 c0       	rjmp	.+10     	; 0xed2 <i2c_stop+0x1e>
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	81 15       	cp	r24, r1
     ecc:	21 e0       	ldi	r18, 0x01	; 1
     ece:	92 07       	cpc	r25, r18
     ed0:	c1 f7       	brne	.-16     	; 0xec2 <i2c_stop+0xe>
     ed2:	08 95       	ret

00000ed4 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     ed4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     ed8:	84 e8       	ldi	r24, 0x84	; 132
     eda:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     ede:	8f ef       	ldi	r24, 0xFF	; 255
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	a0 e0       	ldi	r26, 0x00	; 0
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     ee6:	ec eb       	ldi	r30, 0xBC	; 188
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	20 81       	ld	r18, Z
     eec:	22 23       	and	r18, r18
     eee:	2c f0       	brlt	.+10     	; 0xefa <i2c_write+0x26>
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	a1 09       	sbc	r26, r1
     ef4:	b1 09       	sbc	r27, r1
     ef6:	c8 f7       	brcc	.-14     	; 0xeea <i2c_write+0x16>
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <i2c_write+0x2e>
	if(i2c_timer == 0)
     efa:	89 2b       	or	r24, r25
     efc:	8a 2b       	or	r24, r26
     efe:	8b 2b       	or	r24, r27
     f00:	41 f0       	breq	.+16     	; 0xf12 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     f02:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     f06:	98 7f       	andi	r25, 0xF8	; 248
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	98 32       	cpi	r25, 0x28	; 40
     f0c:	19 f4       	brne	.+6      	; 0xf14 <i2c_write+0x40>
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	08 95       	ret
     f12:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     f14:	08 95       	ret

00000f16 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     f16:	84 ec       	ldi	r24, 0xC4	; 196
     f18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
     f1c:	8f ef       	ldi	r24, 0xFF	; 255
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	a0 e0       	ldi	r26, 0x00	; 0
     f22:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     f24:	ec eb       	ldi	r30, 0xBC	; 188
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	20 81       	ld	r18, Z
     f2a:	22 23       	and	r18, r18
     f2c:	2c f0       	brlt	.+10     	; 0xf38 <i2c_readAck+0x22>
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	a1 09       	sbc	r26, r1
     f32:	b1 09       	sbc	r27, r1
     f34:	c8 f7       	brcc	.-14     	; 0xf28 <i2c_readAck+0x12>
     f36:	04 c0       	rjmp	.+8      	; 0xf40 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     f38:	89 2b       	or	r24, r25
     f3a:	8a 2b       	or	r24, r26
     f3c:	8b 2b       	or	r24, r27
     f3e:	19 f0       	breq	.+6      	; 0xf46 <i2c_readAck+0x30>
		return 0;

    return TWDR;
     f40:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     f44:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     f46:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     f48:	08 95       	ret

00000f4a <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     f4a:	84 e8       	ldi	r24, 0x84	; 132
     f4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
     f50:	8f ef       	ldi	r24, 0xFF	; 255
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	a0 e0       	ldi	r26, 0x00	; 0
     f56:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     f58:	ec eb       	ldi	r30, 0xBC	; 188
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	20 81       	ld	r18, Z
     f5e:	22 23       	and	r18, r18
     f60:	2c f0       	brlt	.+10     	; 0xf6c <i2c_readNak+0x22>
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	a1 09       	sbc	r26, r1
     f66:	b1 09       	sbc	r27, r1
     f68:	c8 f7       	brcc	.-14     	; 0xf5c <i2c_readNak+0x12>
     f6a:	04 c0       	rjmp	.+8      	; 0xf74 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     f6c:	89 2b       	or	r24, r25
     f6e:	8a 2b       	or	r24, r26
     f70:	8b 2b       	or	r24, r27
     f72:	19 f0       	breq	.+6      	; 0xf7a <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     f74:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     f78:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     f7a:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     f7c:	08 95       	ret

00000f7e <USART_Init>:
#include <avr/io.h>
#include <stdio.h>
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     f7e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;
     f82:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	UCSR0B = (1<<TXEN0);// | (1<<TXCIE0);
     f86:	88 e0       	ldi	r24, 0x08	; 8
     f88:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);//2 stop bit 8 bit
     f8c:	8e e0       	ldi	r24, 0x0E	; 14
     f8e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     f92:	08 95       	ret

00000f94 <__subsf3>:
     f94:	50 58       	subi	r21, 0x80	; 128

00000f96 <__addsf3>:
     f96:	bb 27       	eor	r27, r27
     f98:	aa 27       	eor	r26, r26
     f9a:	0e d0       	rcall	.+28     	; 0xfb8 <__addsf3x>
     f9c:	b5 c1       	rjmp	.+874    	; 0x1308 <__fp_round>
     f9e:	a6 d1       	rcall	.+844    	; 0x12ec <__fp_pscA>
     fa0:	30 f0       	brcs	.+12     	; 0xfae <__addsf3+0x18>
     fa2:	ab d1       	rcall	.+854    	; 0x12fa <__fp_pscB>
     fa4:	20 f0       	brcs	.+8      	; 0xfae <__addsf3+0x18>
     fa6:	31 f4       	brne	.+12     	; 0xfb4 <__addsf3+0x1e>
     fa8:	9f 3f       	cpi	r25, 0xFF	; 255
     faa:	11 f4       	brne	.+4      	; 0xfb0 <__addsf3+0x1a>
     fac:	1e f4       	brtc	.+6      	; 0xfb4 <__addsf3+0x1e>
     fae:	65 c1       	rjmp	.+714    	; 0x127a <__fp_nan>
     fb0:	0e f4       	brtc	.+2      	; 0xfb4 <__addsf3+0x1e>
     fb2:	e0 95       	com	r30
     fb4:	e7 fb       	bst	r30, 7
     fb6:	5b c1       	rjmp	.+694    	; 0x126e <__fp_inf>

00000fb8 <__addsf3x>:
     fb8:	e9 2f       	mov	r30, r25
     fba:	b7 d1       	rcall	.+878    	; 0x132a <__fp_split3>
     fbc:	80 f3       	brcs	.-32     	; 0xf9e <__addsf3+0x8>
     fbe:	ba 17       	cp	r27, r26
     fc0:	62 07       	cpc	r22, r18
     fc2:	73 07       	cpc	r23, r19
     fc4:	84 07       	cpc	r24, r20
     fc6:	95 07       	cpc	r25, r21
     fc8:	18 f0       	brcs	.+6      	; 0xfd0 <__addsf3x+0x18>
     fca:	71 f4       	brne	.+28     	; 0xfe8 <__addsf3x+0x30>
     fcc:	9e f5       	brtc	.+102    	; 0x1034 <__addsf3x+0x7c>
     fce:	cf c1       	rjmp	.+926    	; 0x136e <__fp_zero>
     fd0:	0e f4       	brtc	.+2      	; 0xfd4 <__addsf3x+0x1c>
     fd2:	e0 95       	com	r30
     fd4:	0b 2e       	mov	r0, r27
     fd6:	ba 2f       	mov	r27, r26
     fd8:	a0 2d       	mov	r26, r0
     fda:	0b 01       	movw	r0, r22
     fdc:	b9 01       	movw	r22, r18
     fde:	90 01       	movw	r18, r0
     fe0:	0c 01       	movw	r0, r24
     fe2:	ca 01       	movw	r24, r20
     fe4:	a0 01       	movw	r20, r0
     fe6:	11 24       	eor	r1, r1
     fe8:	ff 27       	eor	r31, r31
     fea:	59 1b       	sub	r21, r25
     fec:	99 f0       	breq	.+38     	; 0x1014 <__addsf3x+0x5c>
     fee:	59 3f       	cpi	r21, 0xF9	; 249
     ff0:	50 f4       	brcc	.+20     	; 0x1006 <__addsf3x+0x4e>
     ff2:	50 3e       	cpi	r21, 0xE0	; 224
     ff4:	68 f1       	brcs	.+90     	; 0x1050 <__addsf3x+0x98>
     ff6:	1a 16       	cp	r1, r26
     ff8:	f0 40       	sbci	r31, 0x00	; 0
     ffa:	a2 2f       	mov	r26, r18
     ffc:	23 2f       	mov	r18, r19
     ffe:	34 2f       	mov	r19, r20
    1000:	44 27       	eor	r20, r20
    1002:	58 5f       	subi	r21, 0xF8	; 248
    1004:	f3 cf       	rjmp	.-26     	; 0xfec <__addsf3x+0x34>
    1006:	46 95       	lsr	r20
    1008:	37 95       	ror	r19
    100a:	27 95       	ror	r18
    100c:	a7 95       	ror	r26
    100e:	f0 40       	sbci	r31, 0x00	; 0
    1010:	53 95       	inc	r21
    1012:	c9 f7       	brne	.-14     	; 0x1006 <__addsf3x+0x4e>
    1014:	7e f4       	brtc	.+30     	; 0x1034 <__addsf3x+0x7c>
    1016:	1f 16       	cp	r1, r31
    1018:	ba 0b       	sbc	r27, r26
    101a:	62 0b       	sbc	r22, r18
    101c:	73 0b       	sbc	r23, r19
    101e:	84 0b       	sbc	r24, r20
    1020:	ba f0       	brmi	.+46     	; 0x1050 <__addsf3x+0x98>
    1022:	91 50       	subi	r25, 0x01	; 1
    1024:	a1 f0       	breq	.+40     	; 0x104e <__addsf3x+0x96>
    1026:	ff 0f       	add	r31, r31
    1028:	bb 1f       	adc	r27, r27
    102a:	66 1f       	adc	r22, r22
    102c:	77 1f       	adc	r23, r23
    102e:	88 1f       	adc	r24, r24
    1030:	c2 f7       	brpl	.-16     	; 0x1022 <__addsf3x+0x6a>
    1032:	0e c0       	rjmp	.+28     	; 0x1050 <__addsf3x+0x98>
    1034:	ba 0f       	add	r27, r26
    1036:	62 1f       	adc	r22, r18
    1038:	73 1f       	adc	r23, r19
    103a:	84 1f       	adc	r24, r20
    103c:	48 f4       	brcc	.+18     	; 0x1050 <__addsf3x+0x98>
    103e:	87 95       	ror	r24
    1040:	77 95       	ror	r23
    1042:	67 95       	ror	r22
    1044:	b7 95       	ror	r27
    1046:	f7 95       	ror	r31
    1048:	9e 3f       	cpi	r25, 0xFE	; 254
    104a:	08 f0       	brcs	.+2      	; 0x104e <__addsf3x+0x96>
    104c:	b3 cf       	rjmp	.-154    	; 0xfb4 <__addsf3+0x1e>
    104e:	93 95       	inc	r25
    1050:	88 0f       	add	r24, r24
    1052:	08 f0       	brcs	.+2      	; 0x1056 <__addsf3x+0x9e>
    1054:	99 27       	eor	r25, r25
    1056:	ee 0f       	add	r30, r30
    1058:	97 95       	ror	r25
    105a:	87 95       	ror	r24
    105c:	08 95       	ret

0000105e <asin>:
    105e:	9f 93       	push	r25
    1060:	9f 77       	andi	r25, 0x7F	; 127
    1062:	ee e3       	ldi	r30, 0x3E	; 62
    1064:	89 37       	cpi	r24, 0x79	; 121
    1066:	9e 07       	cpc	r25, r30
    1068:	20 f4       	brcc	.+8      	; 0x1072 <asin+0x14>
    106a:	e4 ee       	ldi	r30, 0xE4	; 228
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	2d d1       	rcall	.+602    	; 0x12ca <__fp_powsodd>
    1070:	09 c0       	rjmp	.+18     	; 0x1084 <asin+0x26>
    1072:	e2 d0       	rcall	.+452    	; 0x1238 <__fp_arccos>
    1074:	90 58       	subi	r25, 0x80	; 128
    1076:	a2 ea       	ldi	r26, 0xA2	; 162
    1078:	2a ed       	ldi	r18, 0xDA	; 218
    107a:	3f e0       	ldi	r19, 0x0F	; 15
    107c:	49 ec       	ldi	r20, 0xC9	; 201
    107e:	5f e3       	ldi	r21, 0x3F	; 63
    1080:	9b df       	rcall	.-202    	; 0xfb8 <__addsf3x>
    1082:	42 d1       	rcall	.+644    	; 0x1308 <__fp_round>
    1084:	0f 90       	pop	r0
    1086:	07 fc       	sbrc	r0, 7
    1088:	90 58       	subi	r25, 0x80	; 128
    108a:	08 95       	ret

0000108c <__divsf3>:
    108c:	0c d0       	rcall	.+24     	; 0x10a6 <__divsf3x>
    108e:	3c c1       	rjmp	.+632    	; 0x1308 <__fp_round>
    1090:	34 d1       	rcall	.+616    	; 0x12fa <__fp_pscB>
    1092:	40 f0       	brcs	.+16     	; 0x10a4 <__divsf3+0x18>
    1094:	2b d1       	rcall	.+598    	; 0x12ec <__fp_pscA>
    1096:	30 f0       	brcs	.+12     	; 0x10a4 <__divsf3+0x18>
    1098:	21 f4       	brne	.+8      	; 0x10a2 <__divsf3+0x16>
    109a:	5f 3f       	cpi	r21, 0xFF	; 255
    109c:	19 f0       	breq	.+6      	; 0x10a4 <__divsf3+0x18>
    109e:	e7 c0       	rjmp	.+462    	; 0x126e <__fp_inf>
    10a0:	51 11       	cpse	r21, r1
    10a2:	66 c1       	rjmp	.+716    	; 0x1370 <__fp_szero>
    10a4:	ea c0       	rjmp	.+468    	; 0x127a <__fp_nan>

000010a6 <__divsf3x>:
    10a6:	41 d1       	rcall	.+642    	; 0x132a <__fp_split3>
    10a8:	98 f3       	brcs	.-26     	; 0x1090 <__divsf3+0x4>

000010aa <__divsf3_pse>:
    10aa:	99 23       	and	r25, r25
    10ac:	c9 f3       	breq	.-14     	; 0x10a0 <__divsf3+0x14>
    10ae:	55 23       	and	r21, r21
    10b0:	b1 f3       	breq	.-20     	; 0x109e <__divsf3+0x12>
    10b2:	95 1b       	sub	r25, r21
    10b4:	55 0b       	sbc	r21, r21
    10b6:	bb 27       	eor	r27, r27
    10b8:	aa 27       	eor	r26, r26
    10ba:	62 17       	cp	r22, r18
    10bc:	73 07       	cpc	r23, r19
    10be:	84 07       	cpc	r24, r20
    10c0:	38 f0       	brcs	.+14     	; 0x10d0 <__divsf3_pse+0x26>
    10c2:	9f 5f       	subi	r25, 0xFF	; 255
    10c4:	5f 4f       	sbci	r21, 0xFF	; 255
    10c6:	22 0f       	add	r18, r18
    10c8:	33 1f       	adc	r19, r19
    10ca:	44 1f       	adc	r20, r20
    10cc:	aa 1f       	adc	r26, r26
    10ce:	a9 f3       	breq	.-22     	; 0x10ba <__divsf3_pse+0x10>
    10d0:	33 d0       	rcall	.+102    	; 0x1138 <__divsf3_pse+0x8e>
    10d2:	0e 2e       	mov	r0, r30
    10d4:	3a f0       	brmi	.+14     	; 0x10e4 <__divsf3_pse+0x3a>
    10d6:	e0 e8       	ldi	r30, 0x80	; 128
    10d8:	30 d0       	rcall	.+96     	; 0x113a <__divsf3_pse+0x90>
    10da:	91 50       	subi	r25, 0x01	; 1
    10dc:	50 40       	sbci	r21, 0x00	; 0
    10de:	e6 95       	lsr	r30
    10e0:	00 1c       	adc	r0, r0
    10e2:	ca f7       	brpl	.-14     	; 0x10d6 <__divsf3_pse+0x2c>
    10e4:	29 d0       	rcall	.+82     	; 0x1138 <__divsf3_pse+0x8e>
    10e6:	fe 2f       	mov	r31, r30
    10e8:	27 d0       	rcall	.+78     	; 0x1138 <__divsf3_pse+0x8e>
    10ea:	66 0f       	add	r22, r22
    10ec:	77 1f       	adc	r23, r23
    10ee:	88 1f       	adc	r24, r24
    10f0:	bb 1f       	adc	r27, r27
    10f2:	26 17       	cp	r18, r22
    10f4:	37 07       	cpc	r19, r23
    10f6:	48 07       	cpc	r20, r24
    10f8:	ab 07       	cpc	r26, r27
    10fa:	b0 e8       	ldi	r27, 0x80	; 128
    10fc:	09 f0       	breq	.+2      	; 0x1100 <__divsf3_pse+0x56>
    10fe:	bb 0b       	sbc	r27, r27
    1100:	80 2d       	mov	r24, r0
    1102:	bf 01       	movw	r22, r30
    1104:	ff 27       	eor	r31, r31
    1106:	93 58       	subi	r25, 0x83	; 131
    1108:	5f 4f       	sbci	r21, 0xFF	; 255
    110a:	2a f0       	brmi	.+10     	; 0x1116 <__divsf3_pse+0x6c>
    110c:	9e 3f       	cpi	r25, 0xFE	; 254
    110e:	51 05       	cpc	r21, r1
    1110:	68 f0       	brcs	.+26     	; 0x112c <__divsf3_pse+0x82>
    1112:	ad c0       	rjmp	.+346    	; 0x126e <__fp_inf>
    1114:	2d c1       	rjmp	.+602    	; 0x1370 <__fp_szero>
    1116:	5f 3f       	cpi	r21, 0xFF	; 255
    1118:	ec f3       	brlt	.-6      	; 0x1114 <__divsf3_pse+0x6a>
    111a:	98 3e       	cpi	r25, 0xE8	; 232
    111c:	dc f3       	brlt	.-10     	; 0x1114 <__divsf3_pse+0x6a>
    111e:	86 95       	lsr	r24
    1120:	77 95       	ror	r23
    1122:	67 95       	ror	r22
    1124:	b7 95       	ror	r27
    1126:	f7 95       	ror	r31
    1128:	9f 5f       	subi	r25, 0xFF	; 255
    112a:	c9 f7       	brne	.-14     	; 0x111e <__divsf3_pse+0x74>
    112c:	88 0f       	add	r24, r24
    112e:	91 1d       	adc	r25, r1
    1130:	96 95       	lsr	r25
    1132:	87 95       	ror	r24
    1134:	97 f9       	bld	r25, 7
    1136:	08 95       	ret
    1138:	e1 e0       	ldi	r30, 0x01	; 1
    113a:	66 0f       	add	r22, r22
    113c:	77 1f       	adc	r23, r23
    113e:	88 1f       	adc	r24, r24
    1140:	bb 1f       	adc	r27, r27
    1142:	62 17       	cp	r22, r18
    1144:	73 07       	cpc	r23, r19
    1146:	84 07       	cpc	r24, r20
    1148:	ba 07       	cpc	r27, r26
    114a:	20 f0       	brcs	.+8      	; 0x1154 <__divsf3_pse+0xaa>
    114c:	62 1b       	sub	r22, r18
    114e:	73 0b       	sbc	r23, r19
    1150:	84 0b       	sbc	r24, r20
    1152:	ba 0b       	sbc	r27, r26
    1154:	ee 1f       	adc	r30, r30
    1156:	88 f7       	brcc	.-30     	; 0x113a <__divsf3_pse+0x90>
    1158:	e0 95       	com	r30
    115a:	08 95       	ret

0000115c <__fixsfsi>:
    115c:	04 d0       	rcall	.+8      	; 0x1166 <__fixunssfsi>
    115e:	68 94       	set
    1160:	b1 11       	cpse	r27, r1
    1162:	06 c1       	rjmp	.+524    	; 0x1370 <__fp_szero>
    1164:	08 95       	ret

00001166 <__fixunssfsi>:
    1166:	e9 d0       	rcall	.+466    	; 0x133a <__fp_splitA>
    1168:	88 f0       	brcs	.+34     	; 0x118c <__fixunssfsi+0x26>
    116a:	9f 57       	subi	r25, 0x7F	; 127
    116c:	90 f0       	brcs	.+36     	; 0x1192 <__fixunssfsi+0x2c>
    116e:	b9 2f       	mov	r27, r25
    1170:	99 27       	eor	r25, r25
    1172:	b7 51       	subi	r27, 0x17	; 23
    1174:	a0 f0       	brcs	.+40     	; 0x119e <__fixunssfsi+0x38>
    1176:	d1 f0       	breq	.+52     	; 0x11ac <__fixunssfsi+0x46>
    1178:	66 0f       	add	r22, r22
    117a:	77 1f       	adc	r23, r23
    117c:	88 1f       	adc	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	1a f0       	brmi	.+6      	; 0x1188 <__fixunssfsi+0x22>
    1182:	ba 95       	dec	r27
    1184:	c9 f7       	brne	.-14     	; 0x1178 <__fixunssfsi+0x12>
    1186:	12 c0       	rjmp	.+36     	; 0x11ac <__fixunssfsi+0x46>
    1188:	b1 30       	cpi	r27, 0x01	; 1
    118a:	81 f0       	breq	.+32     	; 0x11ac <__fixunssfsi+0x46>
    118c:	f0 d0       	rcall	.+480    	; 0x136e <__fp_zero>
    118e:	b1 e0       	ldi	r27, 0x01	; 1
    1190:	08 95       	ret
    1192:	ed c0       	rjmp	.+474    	; 0x136e <__fp_zero>
    1194:	67 2f       	mov	r22, r23
    1196:	78 2f       	mov	r23, r24
    1198:	88 27       	eor	r24, r24
    119a:	b8 5f       	subi	r27, 0xF8	; 248
    119c:	39 f0       	breq	.+14     	; 0x11ac <__fixunssfsi+0x46>
    119e:	b9 3f       	cpi	r27, 0xF9	; 249
    11a0:	cc f3       	brlt	.-14     	; 0x1194 <__fixunssfsi+0x2e>
    11a2:	86 95       	lsr	r24
    11a4:	77 95       	ror	r23
    11a6:	67 95       	ror	r22
    11a8:	b3 95       	inc	r27
    11aa:	d9 f7       	brne	.-10     	; 0x11a2 <__fixunssfsi+0x3c>
    11ac:	3e f4       	brtc	.+14     	; 0x11bc <__fixunssfsi+0x56>
    11ae:	90 95       	com	r25
    11b0:	80 95       	com	r24
    11b2:	70 95       	com	r23
    11b4:	61 95       	neg	r22
    11b6:	7f 4f       	sbci	r23, 0xFF	; 255
    11b8:	8f 4f       	sbci	r24, 0xFF	; 255
    11ba:	9f 4f       	sbci	r25, 0xFF	; 255
    11bc:	08 95       	ret

000011be <__floatunsisf>:
    11be:	e8 94       	clt
    11c0:	09 c0       	rjmp	.+18     	; 0x11d4 <__floatsisf+0x12>

000011c2 <__floatsisf>:
    11c2:	97 fb       	bst	r25, 7
    11c4:	3e f4       	brtc	.+14     	; 0x11d4 <__floatsisf+0x12>
    11c6:	90 95       	com	r25
    11c8:	80 95       	com	r24
    11ca:	70 95       	com	r23
    11cc:	61 95       	neg	r22
    11ce:	7f 4f       	sbci	r23, 0xFF	; 255
    11d0:	8f 4f       	sbci	r24, 0xFF	; 255
    11d2:	9f 4f       	sbci	r25, 0xFF	; 255
    11d4:	99 23       	and	r25, r25
    11d6:	a9 f0       	breq	.+42     	; 0x1202 <__floatsisf+0x40>
    11d8:	f9 2f       	mov	r31, r25
    11da:	96 e9       	ldi	r25, 0x96	; 150
    11dc:	bb 27       	eor	r27, r27
    11de:	93 95       	inc	r25
    11e0:	f6 95       	lsr	r31
    11e2:	87 95       	ror	r24
    11e4:	77 95       	ror	r23
    11e6:	67 95       	ror	r22
    11e8:	b7 95       	ror	r27
    11ea:	f1 11       	cpse	r31, r1
    11ec:	f8 cf       	rjmp	.-16     	; 0x11de <__floatsisf+0x1c>
    11ee:	fa f4       	brpl	.+62     	; 0x122e <__floatsisf+0x6c>
    11f0:	bb 0f       	add	r27, r27
    11f2:	11 f4       	brne	.+4      	; 0x11f8 <__floatsisf+0x36>
    11f4:	60 ff       	sbrs	r22, 0
    11f6:	1b c0       	rjmp	.+54     	; 0x122e <__floatsisf+0x6c>
    11f8:	6f 5f       	subi	r22, 0xFF	; 255
    11fa:	7f 4f       	sbci	r23, 0xFF	; 255
    11fc:	8f 4f       	sbci	r24, 0xFF	; 255
    11fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1200:	16 c0       	rjmp	.+44     	; 0x122e <__floatsisf+0x6c>
    1202:	88 23       	and	r24, r24
    1204:	11 f0       	breq	.+4      	; 0x120a <__floatsisf+0x48>
    1206:	96 e9       	ldi	r25, 0x96	; 150
    1208:	11 c0       	rjmp	.+34     	; 0x122c <__floatsisf+0x6a>
    120a:	77 23       	and	r23, r23
    120c:	21 f0       	breq	.+8      	; 0x1216 <__floatsisf+0x54>
    120e:	9e e8       	ldi	r25, 0x8E	; 142
    1210:	87 2f       	mov	r24, r23
    1212:	76 2f       	mov	r23, r22
    1214:	05 c0       	rjmp	.+10     	; 0x1220 <__floatsisf+0x5e>
    1216:	66 23       	and	r22, r22
    1218:	71 f0       	breq	.+28     	; 0x1236 <__floatsisf+0x74>
    121a:	96 e8       	ldi	r25, 0x86	; 134
    121c:	86 2f       	mov	r24, r22
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	2a f0       	brmi	.+10     	; 0x122e <__floatsisf+0x6c>
    1224:	9a 95       	dec	r25
    1226:	66 0f       	add	r22, r22
    1228:	77 1f       	adc	r23, r23
    122a:	88 1f       	adc	r24, r24
    122c:	da f7       	brpl	.-10     	; 0x1224 <__floatsisf+0x62>
    122e:	88 0f       	add	r24, r24
    1230:	96 95       	lsr	r25
    1232:	87 95       	ror	r24
    1234:	97 f9       	bld	r25, 7
    1236:	08 95       	ret

00001238 <__fp_arccos>:
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	1f 93       	push	r17
    123e:	0f 93       	push	r16
    1240:	8b 01       	movw	r16, r22
    1242:	ec 01       	movw	r28, r24
    1244:	e8 ef       	ldi	r30, 0xF8	; 248
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	1b d0       	rcall	.+54     	; 0x1280 <__fp_powser>
    124a:	5e d0       	rcall	.+188    	; 0x1308 <__fp_round>
    124c:	98 01       	movw	r18, r16
    124e:	ae 01       	movw	r20, r28
    1250:	8b 01       	movw	r16, r22
    1252:	ec 01       	movw	r28, r24
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	80 e8       	ldi	r24, 0x80	; 128
    125a:	9f e3       	ldi	r25, 0x3F	; 63
    125c:	9b de       	rcall	.-714    	; 0xf94 <__subsf3>
    125e:	fb d0       	rcall	.+502    	; 0x1456 <sqrt>
    1260:	98 01       	movw	r18, r16
    1262:	ae 01       	movw	r20, r28
    1264:	0f 91       	pop	r16
    1266:	1f 91       	pop	r17
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	93 c0       	rjmp	.+294    	; 0x1394 <__mulsf3x>

0000126e <__fp_inf>:
    126e:	97 f9       	bld	r25, 7
    1270:	9f 67       	ori	r25, 0x7F	; 127
    1272:	80 e8       	ldi	r24, 0x80	; 128
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	60 e0       	ldi	r22, 0x00	; 0
    1278:	08 95       	ret

0000127a <__fp_nan>:
    127a:	9f ef       	ldi	r25, 0xFF	; 255
    127c:	80 ec       	ldi	r24, 0xC0	; 192
    127e:	08 95       	ret

00001280 <__fp_powser>:
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	1f 93       	push	r17
    1286:	0f 93       	push	r16
    1288:	ff 92       	push	r15
    128a:	ef 92       	push	r14
    128c:	df 92       	push	r13
    128e:	7b 01       	movw	r14, r22
    1290:	8c 01       	movw	r16, r24
    1292:	68 94       	set
    1294:	05 c0       	rjmp	.+10     	; 0x12a0 <__fp_powser+0x20>
    1296:	da 2e       	mov	r13, r26
    1298:	ef 01       	movw	r28, r30
    129a:	7c d0       	rcall	.+248    	; 0x1394 <__mulsf3x>
    129c:	fe 01       	movw	r30, r28
    129e:	e8 94       	clt
    12a0:	a5 91       	lpm	r26, Z+
    12a2:	25 91       	lpm	r18, Z+
    12a4:	35 91       	lpm	r19, Z+
    12a6:	45 91       	lpm	r20, Z+
    12a8:	55 91       	lpm	r21, Z+
    12aa:	ae f3       	brts	.-22     	; 0x1296 <__fp_powser+0x16>
    12ac:	ef 01       	movw	r28, r30
    12ae:	84 de       	rcall	.-760    	; 0xfb8 <__addsf3x>
    12b0:	fe 01       	movw	r30, r28
    12b2:	97 01       	movw	r18, r14
    12b4:	a8 01       	movw	r20, r16
    12b6:	da 94       	dec	r13
    12b8:	79 f7       	brne	.-34     	; 0x1298 <__fp_powser+0x18>
    12ba:	df 90       	pop	r13
    12bc:	ef 90       	pop	r14
    12be:	ff 90       	pop	r15
    12c0:	0f 91       	pop	r16
    12c2:	1f 91       	pop	r17
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <__fp_powsodd>:
    12ca:	9f 93       	push	r25
    12cc:	8f 93       	push	r24
    12ce:	7f 93       	push	r23
    12d0:	6f 93       	push	r22
    12d2:	ff 93       	push	r31
    12d4:	ef 93       	push	r30
    12d6:	9b 01       	movw	r18, r22
    12d8:	ac 01       	movw	r20, r24
    12da:	50 d0       	rcall	.+160    	; 0x137c <__mulsf3>
    12dc:	ef 91       	pop	r30
    12de:	ff 91       	pop	r31
    12e0:	cf df       	rcall	.-98     	; 0x1280 <__fp_powser>
    12e2:	2f 91       	pop	r18
    12e4:	3f 91       	pop	r19
    12e6:	4f 91       	pop	r20
    12e8:	5f 91       	pop	r21
    12ea:	48 c0       	rjmp	.+144    	; 0x137c <__mulsf3>

000012ec <__fp_pscA>:
    12ec:	00 24       	eor	r0, r0
    12ee:	0a 94       	dec	r0
    12f0:	16 16       	cp	r1, r22
    12f2:	17 06       	cpc	r1, r23
    12f4:	18 06       	cpc	r1, r24
    12f6:	09 06       	cpc	r0, r25
    12f8:	08 95       	ret

000012fa <__fp_pscB>:
    12fa:	00 24       	eor	r0, r0
    12fc:	0a 94       	dec	r0
    12fe:	12 16       	cp	r1, r18
    1300:	13 06       	cpc	r1, r19
    1302:	14 06       	cpc	r1, r20
    1304:	05 06       	cpc	r0, r21
    1306:	08 95       	ret

00001308 <__fp_round>:
    1308:	09 2e       	mov	r0, r25
    130a:	03 94       	inc	r0
    130c:	00 0c       	add	r0, r0
    130e:	11 f4       	brne	.+4      	; 0x1314 <__fp_round+0xc>
    1310:	88 23       	and	r24, r24
    1312:	52 f0       	brmi	.+20     	; 0x1328 <__fp_round+0x20>
    1314:	bb 0f       	add	r27, r27
    1316:	40 f4       	brcc	.+16     	; 0x1328 <__fp_round+0x20>
    1318:	bf 2b       	or	r27, r31
    131a:	11 f4       	brne	.+4      	; 0x1320 <__fp_round+0x18>
    131c:	60 ff       	sbrs	r22, 0
    131e:	04 c0       	rjmp	.+8      	; 0x1328 <__fp_round+0x20>
    1320:	6f 5f       	subi	r22, 0xFF	; 255
    1322:	7f 4f       	sbci	r23, 0xFF	; 255
    1324:	8f 4f       	sbci	r24, 0xFF	; 255
    1326:	9f 4f       	sbci	r25, 0xFF	; 255
    1328:	08 95       	ret

0000132a <__fp_split3>:
    132a:	57 fd       	sbrc	r21, 7
    132c:	90 58       	subi	r25, 0x80	; 128
    132e:	44 0f       	add	r20, r20
    1330:	55 1f       	adc	r21, r21
    1332:	59 f0       	breq	.+22     	; 0x134a <__fp_splitA+0x10>
    1334:	5f 3f       	cpi	r21, 0xFF	; 255
    1336:	71 f0       	breq	.+28     	; 0x1354 <__fp_splitA+0x1a>
    1338:	47 95       	ror	r20

0000133a <__fp_splitA>:
    133a:	88 0f       	add	r24, r24
    133c:	97 fb       	bst	r25, 7
    133e:	99 1f       	adc	r25, r25
    1340:	61 f0       	breq	.+24     	; 0x135a <__fp_splitA+0x20>
    1342:	9f 3f       	cpi	r25, 0xFF	; 255
    1344:	79 f0       	breq	.+30     	; 0x1364 <__fp_splitA+0x2a>
    1346:	87 95       	ror	r24
    1348:	08 95       	ret
    134a:	12 16       	cp	r1, r18
    134c:	13 06       	cpc	r1, r19
    134e:	14 06       	cpc	r1, r20
    1350:	55 1f       	adc	r21, r21
    1352:	f2 cf       	rjmp	.-28     	; 0x1338 <__fp_split3+0xe>
    1354:	46 95       	lsr	r20
    1356:	f1 df       	rcall	.-30     	; 0x133a <__fp_splitA>
    1358:	08 c0       	rjmp	.+16     	; 0x136a <__fp_splitA+0x30>
    135a:	16 16       	cp	r1, r22
    135c:	17 06       	cpc	r1, r23
    135e:	18 06       	cpc	r1, r24
    1360:	99 1f       	adc	r25, r25
    1362:	f1 cf       	rjmp	.-30     	; 0x1346 <__fp_splitA+0xc>
    1364:	86 95       	lsr	r24
    1366:	71 05       	cpc	r23, r1
    1368:	61 05       	cpc	r22, r1
    136a:	08 94       	sec
    136c:	08 95       	ret

0000136e <__fp_zero>:
    136e:	e8 94       	clt

00001370 <__fp_szero>:
    1370:	bb 27       	eor	r27, r27
    1372:	66 27       	eor	r22, r22
    1374:	77 27       	eor	r23, r23
    1376:	cb 01       	movw	r24, r22
    1378:	97 f9       	bld	r25, 7
    137a:	08 95       	ret

0000137c <__mulsf3>:
    137c:	0b d0       	rcall	.+22     	; 0x1394 <__mulsf3x>
    137e:	c4 cf       	rjmp	.-120    	; 0x1308 <__fp_round>
    1380:	b5 df       	rcall	.-150    	; 0x12ec <__fp_pscA>
    1382:	28 f0       	brcs	.+10     	; 0x138e <__mulsf3+0x12>
    1384:	ba df       	rcall	.-140    	; 0x12fa <__fp_pscB>
    1386:	18 f0       	brcs	.+6      	; 0x138e <__mulsf3+0x12>
    1388:	95 23       	and	r25, r21
    138a:	09 f0       	breq	.+2      	; 0x138e <__mulsf3+0x12>
    138c:	70 cf       	rjmp	.-288    	; 0x126e <__fp_inf>
    138e:	75 cf       	rjmp	.-278    	; 0x127a <__fp_nan>
    1390:	11 24       	eor	r1, r1
    1392:	ee cf       	rjmp	.-36     	; 0x1370 <__fp_szero>

00001394 <__mulsf3x>:
    1394:	ca df       	rcall	.-108    	; 0x132a <__fp_split3>
    1396:	a0 f3       	brcs	.-24     	; 0x1380 <__mulsf3+0x4>

00001398 <__mulsf3_pse>:
    1398:	95 9f       	mul	r25, r21
    139a:	d1 f3       	breq	.-12     	; 0x1390 <__mulsf3+0x14>
    139c:	95 0f       	add	r25, r21
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	55 1f       	adc	r21, r21
    13a2:	62 9f       	mul	r22, r18
    13a4:	f0 01       	movw	r30, r0
    13a6:	72 9f       	mul	r23, r18
    13a8:	bb 27       	eor	r27, r27
    13aa:	f0 0d       	add	r31, r0
    13ac:	b1 1d       	adc	r27, r1
    13ae:	63 9f       	mul	r22, r19
    13b0:	aa 27       	eor	r26, r26
    13b2:	f0 0d       	add	r31, r0
    13b4:	b1 1d       	adc	r27, r1
    13b6:	aa 1f       	adc	r26, r26
    13b8:	64 9f       	mul	r22, r20
    13ba:	66 27       	eor	r22, r22
    13bc:	b0 0d       	add	r27, r0
    13be:	a1 1d       	adc	r26, r1
    13c0:	66 1f       	adc	r22, r22
    13c2:	82 9f       	mul	r24, r18
    13c4:	22 27       	eor	r18, r18
    13c6:	b0 0d       	add	r27, r0
    13c8:	a1 1d       	adc	r26, r1
    13ca:	62 1f       	adc	r22, r18
    13cc:	73 9f       	mul	r23, r19
    13ce:	b0 0d       	add	r27, r0
    13d0:	a1 1d       	adc	r26, r1
    13d2:	62 1f       	adc	r22, r18
    13d4:	83 9f       	mul	r24, r19
    13d6:	a0 0d       	add	r26, r0
    13d8:	61 1d       	adc	r22, r1
    13da:	22 1f       	adc	r18, r18
    13dc:	74 9f       	mul	r23, r20
    13de:	33 27       	eor	r19, r19
    13e0:	a0 0d       	add	r26, r0
    13e2:	61 1d       	adc	r22, r1
    13e4:	23 1f       	adc	r18, r19
    13e6:	84 9f       	mul	r24, r20
    13e8:	60 0d       	add	r22, r0
    13ea:	21 1d       	adc	r18, r1
    13ec:	82 2f       	mov	r24, r18
    13ee:	76 2f       	mov	r23, r22
    13f0:	6a 2f       	mov	r22, r26
    13f2:	11 24       	eor	r1, r1
    13f4:	9f 57       	subi	r25, 0x7F	; 127
    13f6:	50 40       	sbci	r21, 0x00	; 0
    13f8:	8a f0       	brmi	.+34     	; 0x141c <__mulsf3_pse+0x84>
    13fa:	e1 f0       	breq	.+56     	; 0x1434 <__mulsf3_pse+0x9c>
    13fc:	88 23       	and	r24, r24
    13fe:	4a f0       	brmi	.+18     	; 0x1412 <__mulsf3_pse+0x7a>
    1400:	ee 0f       	add	r30, r30
    1402:	ff 1f       	adc	r31, r31
    1404:	bb 1f       	adc	r27, r27
    1406:	66 1f       	adc	r22, r22
    1408:	77 1f       	adc	r23, r23
    140a:	88 1f       	adc	r24, r24
    140c:	91 50       	subi	r25, 0x01	; 1
    140e:	50 40       	sbci	r21, 0x00	; 0
    1410:	a9 f7       	brne	.-22     	; 0x13fc <__mulsf3_pse+0x64>
    1412:	9e 3f       	cpi	r25, 0xFE	; 254
    1414:	51 05       	cpc	r21, r1
    1416:	70 f0       	brcs	.+28     	; 0x1434 <__mulsf3_pse+0x9c>
    1418:	2a cf       	rjmp	.-428    	; 0x126e <__fp_inf>
    141a:	aa cf       	rjmp	.-172    	; 0x1370 <__fp_szero>
    141c:	5f 3f       	cpi	r21, 0xFF	; 255
    141e:	ec f3       	brlt	.-6      	; 0x141a <__mulsf3_pse+0x82>
    1420:	98 3e       	cpi	r25, 0xE8	; 232
    1422:	dc f3       	brlt	.-10     	; 0x141a <__mulsf3_pse+0x82>
    1424:	86 95       	lsr	r24
    1426:	77 95       	ror	r23
    1428:	67 95       	ror	r22
    142a:	b7 95       	ror	r27
    142c:	f7 95       	ror	r31
    142e:	e7 95       	ror	r30
    1430:	9f 5f       	subi	r25, 0xFF	; 255
    1432:	c1 f7       	brne	.-16     	; 0x1424 <__mulsf3_pse+0x8c>
    1434:	fe 2b       	or	r31, r30
    1436:	88 0f       	add	r24, r24
    1438:	91 1d       	adc	r25, r1
    143a:	96 95       	lsr	r25
    143c:	87 95       	ror	r24
    143e:	97 f9       	bld	r25, 7
    1440:	08 95       	ret

00001442 <sin>:
    1442:	9f 93       	push	r25
    1444:	5c d0       	rcall	.+184    	; 0x14fe <__fp_rempio2>
    1446:	0f 90       	pop	r0
    1448:	07 fc       	sbrc	r0, 7
    144a:	ee 5f       	subi	r30, 0xFE	; 254
    144c:	7f c0       	rjmp	.+254    	; 0x154c <__fp_sinus>
    144e:	11 f4       	brne	.+4      	; 0x1454 <sin+0x12>
    1450:	0e f4       	brtc	.+2      	; 0x1454 <sin+0x12>
    1452:	13 cf       	rjmp	.-474    	; 0x127a <__fp_nan>
    1454:	3e c0       	rjmp	.+124    	; 0x14d2 <__fp_mpack>

00001456 <sqrt>:
    1456:	71 df       	rcall	.-286    	; 0x133a <__fp_splitA>
    1458:	d0 f3       	brcs	.-12     	; 0x144e <sin+0xc>
    145a:	99 23       	and	r25, r25
    145c:	d9 f3       	breq	.-10     	; 0x1454 <sin+0x12>
    145e:	ce f3       	brts	.-14     	; 0x1452 <sin+0x10>
    1460:	9f 57       	subi	r25, 0x7F	; 127
    1462:	55 0b       	sbc	r21, r21
    1464:	87 ff       	sbrs	r24, 7
    1466:	43 d0       	rcall	.+134    	; 0x14ee <__fp_norm2>
    1468:	00 24       	eor	r0, r0
    146a:	a0 e6       	ldi	r26, 0x60	; 96
    146c:	40 ea       	ldi	r20, 0xA0	; 160
    146e:	90 01       	movw	r18, r0
    1470:	80 58       	subi	r24, 0x80	; 128
    1472:	56 95       	lsr	r21
    1474:	97 95       	ror	r25
    1476:	28 f4       	brcc	.+10     	; 0x1482 <sqrt+0x2c>
    1478:	80 5c       	subi	r24, 0xC0	; 192
    147a:	66 0f       	add	r22, r22
    147c:	77 1f       	adc	r23, r23
    147e:	88 1f       	adc	r24, r24
    1480:	20 f0       	brcs	.+8      	; 0x148a <sqrt+0x34>
    1482:	26 17       	cp	r18, r22
    1484:	37 07       	cpc	r19, r23
    1486:	48 07       	cpc	r20, r24
    1488:	30 f4       	brcc	.+12     	; 0x1496 <sqrt+0x40>
    148a:	62 1b       	sub	r22, r18
    148c:	73 0b       	sbc	r23, r19
    148e:	84 0b       	sbc	r24, r20
    1490:	20 29       	or	r18, r0
    1492:	31 29       	or	r19, r1
    1494:	4a 2b       	or	r20, r26
    1496:	a6 95       	lsr	r26
    1498:	17 94       	ror	r1
    149a:	07 94       	ror	r0
    149c:	20 25       	eor	r18, r0
    149e:	31 25       	eor	r19, r1
    14a0:	4a 27       	eor	r20, r26
    14a2:	58 f7       	brcc	.-42     	; 0x147a <sqrt+0x24>
    14a4:	66 0f       	add	r22, r22
    14a6:	77 1f       	adc	r23, r23
    14a8:	88 1f       	adc	r24, r24
    14aa:	20 f0       	brcs	.+8      	; 0x14b4 <sqrt+0x5e>
    14ac:	26 17       	cp	r18, r22
    14ae:	37 07       	cpc	r19, r23
    14b0:	48 07       	cpc	r20, r24
    14b2:	30 f4       	brcc	.+12     	; 0x14c0 <sqrt+0x6a>
    14b4:	62 0b       	sbc	r22, r18
    14b6:	73 0b       	sbc	r23, r19
    14b8:	84 0b       	sbc	r24, r20
    14ba:	20 0d       	add	r18, r0
    14bc:	31 1d       	adc	r19, r1
    14be:	41 1d       	adc	r20, r1
    14c0:	a0 95       	com	r26
    14c2:	81 f7       	brne	.-32     	; 0x14a4 <sqrt+0x4e>
    14c4:	b9 01       	movw	r22, r18
    14c6:	84 2f       	mov	r24, r20
    14c8:	91 58       	subi	r25, 0x81	; 129
    14ca:	88 0f       	add	r24, r24
    14cc:	96 95       	lsr	r25
    14ce:	87 95       	ror	r24
    14d0:	08 95       	ret

000014d2 <__fp_mpack>:
    14d2:	9f 3f       	cpi	r25, 0xFF	; 255
    14d4:	31 f0       	breq	.+12     	; 0x14e2 <__fp_mpack_finite+0xc>

000014d6 <__fp_mpack_finite>:
    14d6:	91 50       	subi	r25, 0x01	; 1
    14d8:	20 f4       	brcc	.+8      	; 0x14e2 <__fp_mpack_finite+0xc>
    14da:	87 95       	ror	r24
    14dc:	77 95       	ror	r23
    14de:	67 95       	ror	r22
    14e0:	b7 95       	ror	r27
    14e2:	88 0f       	add	r24, r24
    14e4:	91 1d       	adc	r25, r1
    14e6:	96 95       	lsr	r25
    14e8:	87 95       	ror	r24
    14ea:	97 f9       	bld	r25, 7
    14ec:	08 95       	ret

000014ee <__fp_norm2>:
    14ee:	91 50       	subi	r25, 0x01	; 1
    14f0:	50 40       	sbci	r21, 0x00	; 0
    14f2:	66 0f       	add	r22, r22
    14f4:	77 1f       	adc	r23, r23
    14f6:	88 1f       	adc	r24, r24
    14f8:	d2 f7       	brpl	.-12     	; 0x14ee <__fp_norm2>
    14fa:	08 95       	ret
    14fc:	be ce       	rjmp	.-644    	; 0x127a <__fp_nan>

000014fe <__fp_rempio2>:
    14fe:	1d df       	rcall	.-454    	; 0x133a <__fp_splitA>
    1500:	e8 f3       	brcs	.-6      	; 0x14fc <__fp_norm2+0xe>
    1502:	e8 94       	clt
    1504:	e0 e0       	ldi	r30, 0x00	; 0
    1506:	bb 27       	eor	r27, r27
    1508:	9f 57       	subi	r25, 0x7F	; 127
    150a:	f0 f0       	brcs	.+60     	; 0x1548 <__fp_rempio2+0x4a>
    150c:	2a ed       	ldi	r18, 0xDA	; 218
    150e:	3f e0       	ldi	r19, 0x0F	; 15
    1510:	49 ec       	ldi	r20, 0xC9	; 201
    1512:	06 c0       	rjmp	.+12     	; 0x1520 <__fp_rempio2+0x22>
    1514:	ee 0f       	add	r30, r30
    1516:	bb 0f       	add	r27, r27
    1518:	66 1f       	adc	r22, r22
    151a:	77 1f       	adc	r23, r23
    151c:	88 1f       	adc	r24, r24
    151e:	28 f0       	brcs	.+10     	; 0x152a <__fp_rempio2+0x2c>
    1520:	b2 3a       	cpi	r27, 0xA2	; 162
    1522:	62 07       	cpc	r22, r18
    1524:	73 07       	cpc	r23, r19
    1526:	84 07       	cpc	r24, r20
    1528:	28 f0       	brcs	.+10     	; 0x1534 <__fp_rempio2+0x36>
    152a:	b2 5a       	subi	r27, 0xA2	; 162
    152c:	62 0b       	sbc	r22, r18
    152e:	73 0b       	sbc	r23, r19
    1530:	84 0b       	sbc	r24, r20
    1532:	e3 95       	inc	r30
    1534:	9a 95       	dec	r25
    1536:	72 f7       	brpl	.-36     	; 0x1514 <__fp_rempio2+0x16>
    1538:	80 38       	cpi	r24, 0x80	; 128
    153a:	30 f4       	brcc	.+12     	; 0x1548 <__fp_rempio2+0x4a>
    153c:	9a 95       	dec	r25
    153e:	bb 0f       	add	r27, r27
    1540:	66 1f       	adc	r22, r22
    1542:	77 1f       	adc	r23, r23
    1544:	88 1f       	adc	r24, r24
    1546:	d2 f7       	brpl	.-12     	; 0x153c <__fp_rempio2+0x3e>
    1548:	90 48       	sbci	r25, 0x80	; 128
    154a:	c5 cf       	rjmp	.-118    	; 0x14d6 <__fp_mpack_finite>

0000154c <__fp_sinus>:
    154c:	ef 93       	push	r30
    154e:	e0 ff       	sbrs	r30, 0
    1550:	06 c0       	rjmp	.+12     	; 0x155e <__fp_sinus+0x12>
    1552:	a2 ea       	ldi	r26, 0xA2	; 162
    1554:	2a ed       	ldi	r18, 0xDA	; 218
    1556:	3f e0       	ldi	r19, 0x0F	; 15
    1558:	49 ec       	ldi	r20, 0xC9	; 201
    155a:	5f eb       	ldi	r21, 0xBF	; 191
    155c:	2d dd       	rcall	.-1446   	; 0xfb8 <__addsf3x>
    155e:	d4 de       	rcall	.-600    	; 0x1308 <__fp_round>
    1560:	0f 90       	pop	r0
    1562:	03 94       	inc	r0
    1564:	01 fc       	sbrc	r0, 1
    1566:	90 58       	subi	r25, 0x80	; 128
    1568:	e0 e2       	ldi	r30, 0x20	; 32
    156a:	f1 e0       	ldi	r31, 0x01	; 1
    156c:	ae ce       	rjmp	.-676    	; 0x12ca <__fp_powsodd>

0000156e <__divmodhi4>:
    156e:	97 fb       	bst	r25, 7
    1570:	07 2e       	mov	r0, r23
    1572:	16 f4       	brtc	.+4      	; 0x1578 <__divmodhi4+0xa>
    1574:	00 94       	com	r0
    1576:	06 d0       	rcall	.+12     	; 0x1584 <__divmodhi4_neg1>
    1578:	77 fd       	sbrc	r23, 7
    157a:	08 d0       	rcall	.+16     	; 0x158c <__divmodhi4_neg2>
    157c:	27 d0       	rcall	.+78     	; 0x15cc <__udivmodhi4>
    157e:	07 fc       	sbrc	r0, 7
    1580:	05 d0       	rcall	.+10     	; 0x158c <__divmodhi4_neg2>
    1582:	3e f4       	brtc	.+14     	; 0x1592 <__divmodhi4_exit>

00001584 <__divmodhi4_neg1>:
    1584:	90 95       	com	r25
    1586:	81 95       	neg	r24
    1588:	9f 4f       	sbci	r25, 0xFF	; 255
    158a:	08 95       	ret

0000158c <__divmodhi4_neg2>:
    158c:	70 95       	com	r23
    158e:	61 95       	neg	r22
    1590:	7f 4f       	sbci	r23, 0xFF	; 255

00001592 <__divmodhi4_exit>:
    1592:	08 95       	ret

00001594 <__divmodsi4>:
    1594:	05 2e       	mov	r0, r21
    1596:	97 fb       	bst	r25, 7
    1598:	16 f4       	brtc	.+4      	; 0x159e <__divmodsi4+0xa>
    159a:	00 94       	com	r0
    159c:	0f d0       	rcall	.+30     	; 0x15bc <__negsi2>
    159e:	57 fd       	sbrc	r21, 7
    15a0:	05 d0       	rcall	.+10     	; 0x15ac <__divmodsi4_neg2>
    15a2:	28 d0       	rcall	.+80     	; 0x15f4 <__udivmodsi4>
    15a4:	07 fc       	sbrc	r0, 7
    15a6:	02 d0       	rcall	.+4      	; 0x15ac <__divmodsi4_neg2>
    15a8:	46 f4       	brtc	.+16     	; 0x15ba <__divmodsi4_exit>
    15aa:	08 c0       	rjmp	.+16     	; 0x15bc <__negsi2>

000015ac <__divmodsi4_neg2>:
    15ac:	50 95       	com	r21
    15ae:	40 95       	com	r20
    15b0:	30 95       	com	r19
    15b2:	21 95       	neg	r18
    15b4:	3f 4f       	sbci	r19, 0xFF	; 255
    15b6:	4f 4f       	sbci	r20, 0xFF	; 255
    15b8:	5f 4f       	sbci	r21, 0xFF	; 255

000015ba <__divmodsi4_exit>:
    15ba:	08 95       	ret

000015bc <__negsi2>:
    15bc:	90 95       	com	r25
    15be:	80 95       	com	r24
    15c0:	70 95       	com	r23
    15c2:	61 95       	neg	r22
    15c4:	7f 4f       	sbci	r23, 0xFF	; 255
    15c6:	8f 4f       	sbci	r24, 0xFF	; 255
    15c8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ca:	08 95       	ret

000015cc <__udivmodhi4>:
    15cc:	aa 1b       	sub	r26, r26
    15ce:	bb 1b       	sub	r27, r27
    15d0:	51 e1       	ldi	r21, 0x11	; 17
    15d2:	07 c0       	rjmp	.+14     	; 0x15e2 <__udivmodhi4_ep>

000015d4 <__udivmodhi4_loop>:
    15d4:	aa 1f       	adc	r26, r26
    15d6:	bb 1f       	adc	r27, r27
    15d8:	a6 17       	cp	r26, r22
    15da:	b7 07       	cpc	r27, r23
    15dc:	10 f0       	brcs	.+4      	; 0x15e2 <__udivmodhi4_ep>
    15de:	a6 1b       	sub	r26, r22
    15e0:	b7 0b       	sbc	r27, r23

000015e2 <__udivmodhi4_ep>:
    15e2:	88 1f       	adc	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	5a 95       	dec	r21
    15e8:	a9 f7       	brne	.-22     	; 0x15d4 <__udivmodhi4_loop>
    15ea:	80 95       	com	r24
    15ec:	90 95       	com	r25
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	08 95       	ret

000015f4 <__udivmodsi4>:
    15f4:	a1 e2       	ldi	r26, 0x21	; 33
    15f6:	1a 2e       	mov	r1, r26
    15f8:	aa 1b       	sub	r26, r26
    15fa:	bb 1b       	sub	r27, r27
    15fc:	fd 01       	movw	r30, r26
    15fe:	0d c0       	rjmp	.+26     	; 0x161a <__udivmodsi4_ep>

00001600 <__udivmodsi4_loop>:
    1600:	aa 1f       	adc	r26, r26
    1602:	bb 1f       	adc	r27, r27
    1604:	ee 1f       	adc	r30, r30
    1606:	ff 1f       	adc	r31, r31
    1608:	a2 17       	cp	r26, r18
    160a:	b3 07       	cpc	r27, r19
    160c:	e4 07       	cpc	r30, r20
    160e:	f5 07       	cpc	r31, r21
    1610:	20 f0       	brcs	.+8      	; 0x161a <__udivmodsi4_ep>
    1612:	a2 1b       	sub	r26, r18
    1614:	b3 0b       	sbc	r27, r19
    1616:	e4 0b       	sbc	r30, r20
    1618:	f5 0b       	sbc	r31, r21

0000161a <__udivmodsi4_ep>:
    161a:	66 1f       	adc	r22, r22
    161c:	77 1f       	adc	r23, r23
    161e:	88 1f       	adc	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	1a 94       	dec	r1
    1624:	69 f7       	brne	.-38     	; 0x1600 <__udivmodsi4_loop>
    1626:	60 95       	com	r22
    1628:	70 95       	com	r23
    162a:	80 95       	com	r24
    162c:	90 95       	com	r25
    162e:	9b 01       	movw	r18, r22
    1630:	ac 01       	movw	r20, r24
    1632:	bd 01       	movw	r22, r26
    1634:	cf 01       	movw	r24, r30
    1636:	08 95       	ret

00001638 <__itoa_ncheck>:
    1638:	bb 27       	eor	r27, r27
    163a:	4a 30       	cpi	r20, 0x0A	; 10
    163c:	31 f4       	brne	.+12     	; 0x164a <__itoa_ncheck+0x12>
    163e:	99 23       	and	r25, r25
    1640:	22 f4       	brpl	.+8      	; 0x164a <__itoa_ncheck+0x12>
    1642:	bd e2       	ldi	r27, 0x2D	; 45
    1644:	90 95       	com	r25
    1646:	81 95       	neg	r24
    1648:	9f 4f       	sbci	r25, 0xFF	; 255
    164a:	01 c0       	rjmp	.+2      	; 0x164e <__utoa_common>

0000164c <__utoa_ncheck>:
    164c:	bb 27       	eor	r27, r27

0000164e <__utoa_common>:
    164e:	fb 01       	movw	r30, r22
    1650:	55 27       	eor	r21, r21
    1652:	aa 27       	eor	r26, r26
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	aa 1f       	adc	r26, r26
    165a:	a4 17       	cp	r26, r20
    165c:	10 f0       	brcs	.+4      	; 0x1662 <__utoa_common+0x14>
    165e:	a4 1b       	sub	r26, r20
    1660:	83 95       	inc	r24
    1662:	50 51       	subi	r21, 0x10	; 16
    1664:	b9 f7       	brne	.-18     	; 0x1654 <__utoa_common+0x6>
    1666:	a0 5d       	subi	r26, 0xD0	; 208
    1668:	aa 33       	cpi	r26, 0x3A	; 58
    166a:	08 f0       	brcs	.+2      	; 0x166e <__utoa_common+0x20>
    166c:	a9 5d       	subi	r26, 0xD9	; 217
    166e:	a1 93       	st	Z+, r26
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	79 f7       	brne	.-34     	; 0x1652 <__utoa_common+0x4>
    1674:	b1 11       	cpse	r27, r1
    1676:	b1 93       	st	Z+, r27
    1678:	11 92       	st	Z+, r1
    167a:	cb 01       	movw	r24, r22
    167c:	e7 c3       	rjmp	.+1998   	; 0x1e4c <strrev>

0000167e <fdevopen>:
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	31 f4       	brne	.+12     	; 0x1696 <fdevopen+0x18>
    168a:	61 15       	cp	r22, r1
    168c:	71 05       	cpc	r23, r1
    168e:	19 f4       	brne	.+6      	; 0x1696 <fdevopen+0x18>
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	39 c0       	rjmp	.+114    	; 0x1708 <fdevopen+0x8a>
    1696:	8b 01       	movw	r16, r22
    1698:	ec 01       	movw	r28, r24
    169a:	6e e0       	ldi	r22, 0x0E	; 14
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	7c d2       	rcall	.+1272   	; 0x1b9c <calloc>
    16a4:	fc 01       	movw	r30, r24
    16a6:	89 2b       	or	r24, r25
    16a8:	99 f3       	breq	.-26     	; 0x1690 <fdevopen+0x12>
    16aa:	80 e8       	ldi	r24, 0x80	; 128
    16ac:	83 83       	std	Z+3, r24	; 0x03
    16ae:	01 15       	cp	r16, r1
    16b0:	11 05       	cpc	r17, r1
    16b2:	71 f0       	breq	.+28     	; 0x16d0 <fdevopen+0x52>
    16b4:	13 87       	std	Z+11, r17	; 0x0b
    16b6:	02 87       	std	Z+10, r16	; 0x0a
    16b8:	81 e8       	ldi	r24, 0x81	; 129
    16ba:	83 83       	std	Z+3, r24	; 0x03
    16bc:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <__iob>
    16c0:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <__iob+0x1>
    16c4:	89 2b       	or	r24, r25
    16c6:	21 f4       	brne	.+8      	; 0x16d0 <fdevopen+0x52>
    16c8:	f0 93 8f 04 	sts	0x048F, r31	; 0x80048f <__iob+0x1>
    16cc:	e0 93 8e 04 	sts	0x048E, r30	; 0x80048e <__iob>
    16d0:	20 97       	sbiw	r28, 0x00	; 0
    16d2:	c9 f0       	breq	.+50     	; 0x1706 <fdevopen+0x88>
    16d4:	d1 87       	std	Z+9, r29	; 0x09
    16d6:	c0 87       	std	Z+8, r28	; 0x08
    16d8:	83 81       	ldd	r24, Z+3	; 0x03
    16da:	82 60       	ori	r24, 0x02	; 2
    16dc:	83 83       	std	Z+3, r24	; 0x03
    16de:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <__iob+0x2>
    16e2:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <__iob+0x3>
    16e6:	89 2b       	or	r24, r25
    16e8:	71 f4       	brne	.+28     	; 0x1706 <fdevopen+0x88>
    16ea:	f0 93 91 04 	sts	0x0491, r31	; 0x800491 <__iob+0x3>
    16ee:	e0 93 90 04 	sts	0x0490, r30	; 0x800490 <__iob+0x2>
    16f2:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <__iob+0x4>
    16f6:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <__iob+0x5>
    16fa:	89 2b       	or	r24, r25
    16fc:	21 f4       	brne	.+8      	; 0x1706 <fdevopen+0x88>
    16fe:	f0 93 93 04 	sts	0x0493, r31	; 0x800493 <__iob+0x5>
    1702:	e0 93 92 04 	sts	0x0492, r30	; 0x800492 <__iob+0x4>
    1706:	cf 01       	movw	r24, r30
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	08 95       	ret

00001712 <printf>:
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	ae 01       	movw	r20, r28
    171c:	4a 5f       	subi	r20, 0xFA	; 250
    171e:	5f 4f       	sbci	r21, 0xFF	; 255
    1720:	fa 01       	movw	r30, r20
    1722:	61 91       	ld	r22, Z+
    1724:	71 91       	ld	r23, Z+
    1726:	af 01       	movw	r20, r30
    1728:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <__iob+0x2>
    172c:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <__iob+0x3>
    1730:	38 d0       	rcall	.+112    	; 0x17a2 <vfprintf>
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	08 95       	ret

00001738 <putchar>:
    1738:	60 91 90 04 	lds	r22, 0x0490	; 0x800490 <__iob+0x2>
    173c:	70 91 91 04 	lds	r23, 0x0491	; 0x800491 <__iob+0x3>
    1740:	95 c3       	rjmp	.+1834   	; 0x1e6c <fputc>

00001742 <puts>:
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	e0 91 90 04 	lds	r30, 0x0490	; 0x800490 <__iob+0x2>
    174e:	f0 91 91 04 	lds	r31, 0x0491	; 0x800491 <__iob+0x3>
    1752:	23 81       	ldd	r18, Z+3	; 0x03
    1754:	21 ff       	sbrs	r18, 1
    1756:	1b c0       	rjmp	.+54     	; 0x178e <puts+0x4c>
    1758:	8c 01       	movw	r16, r24
    175a:	d0 e0       	ldi	r29, 0x00	; 0
    175c:	c0 e0       	ldi	r28, 0x00	; 0
    175e:	f8 01       	movw	r30, r16
    1760:	81 91       	ld	r24, Z+
    1762:	8f 01       	movw	r16, r30
    1764:	60 91 90 04 	lds	r22, 0x0490	; 0x800490 <__iob+0x2>
    1768:	70 91 91 04 	lds	r23, 0x0491	; 0x800491 <__iob+0x3>
    176c:	db 01       	movw	r26, r22
    176e:	18 96       	adiw	r26, 0x08	; 8
    1770:	ed 91       	ld	r30, X+
    1772:	fc 91       	ld	r31, X
    1774:	19 97       	sbiw	r26, 0x09	; 9
    1776:	88 23       	and	r24, r24
    1778:	31 f0       	breq	.+12     	; 0x1786 <puts+0x44>
    177a:	19 95       	eicall
    177c:	89 2b       	or	r24, r25
    177e:	79 f3       	breq	.-34     	; 0x175e <puts+0x1c>
    1780:	df ef       	ldi	r29, 0xFF	; 255
    1782:	cf ef       	ldi	r28, 0xFF	; 255
    1784:	ec cf       	rjmp	.-40     	; 0x175e <puts+0x1c>
    1786:	8a e0       	ldi	r24, 0x0A	; 10
    1788:	19 95       	eicall
    178a:	89 2b       	or	r24, r25
    178c:	19 f0       	breq	.+6      	; 0x1794 <puts+0x52>
    178e:	8f ef       	ldi	r24, 0xFF	; 255
    1790:	9f ef       	ldi	r25, 0xFF	; 255
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <puts+0x56>
    1794:	8d 2f       	mov	r24, r29
    1796:	9c 2f       	mov	r25, r28
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	1f 91       	pop	r17
    179e:	0f 91       	pop	r16
    17a0:	08 95       	ret

000017a2 <vfprintf>:
    17a2:	2f 92       	push	r2
    17a4:	3f 92       	push	r3
    17a6:	4f 92       	push	r4
    17a8:	5f 92       	push	r5
    17aa:	6f 92       	push	r6
    17ac:	7f 92       	push	r7
    17ae:	8f 92       	push	r8
    17b0:	9f 92       	push	r9
    17b2:	af 92       	push	r10
    17b4:	bf 92       	push	r11
    17b6:	cf 92       	push	r12
    17b8:	df 92       	push	r13
    17ba:	ef 92       	push	r14
    17bc:	ff 92       	push	r15
    17be:	0f 93       	push	r16
    17c0:	1f 93       	push	r17
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	2b 97       	sbiw	r28, 0x0b	; 11
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	6c 01       	movw	r12, r24
    17d8:	7b 01       	movw	r14, r22
    17da:	8a 01       	movw	r16, r20
    17dc:	fc 01       	movw	r30, r24
    17de:	17 82       	std	Z+7, r1	; 0x07
    17e0:	16 82       	std	Z+6, r1	; 0x06
    17e2:	83 81       	ldd	r24, Z+3	; 0x03
    17e4:	81 ff       	sbrs	r24, 1
    17e6:	bf c1       	rjmp	.+894    	; 0x1b66 <vfprintf+0x3c4>
    17e8:	ce 01       	movw	r24, r28
    17ea:	01 96       	adiw	r24, 0x01	; 1
    17ec:	3c 01       	movw	r6, r24
    17ee:	f6 01       	movw	r30, r12
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	f7 01       	movw	r30, r14
    17f4:	93 fd       	sbrc	r25, 3
    17f6:	85 91       	lpm	r24, Z+
    17f8:	93 ff       	sbrs	r25, 3
    17fa:	81 91       	ld	r24, Z+
    17fc:	7f 01       	movw	r14, r30
    17fe:	88 23       	and	r24, r24
    1800:	09 f4       	brne	.+2      	; 0x1804 <vfprintf+0x62>
    1802:	ad c1       	rjmp	.+858    	; 0x1b5e <vfprintf+0x3bc>
    1804:	85 32       	cpi	r24, 0x25	; 37
    1806:	39 f4       	brne	.+14     	; 0x1816 <vfprintf+0x74>
    1808:	93 fd       	sbrc	r25, 3
    180a:	85 91       	lpm	r24, Z+
    180c:	93 ff       	sbrs	r25, 3
    180e:	81 91       	ld	r24, Z+
    1810:	7f 01       	movw	r14, r30
    1812:	85 32       	cpi	r24, 0x25	; 37
    1814:	21 f4       	brne	.+8      	; 0x181e <vfprintf+0x7c>
    1816:	b6 01       	movw	r22, r12
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	28 d3       	rcall	.+1616   	; 0x1e6c <fputc>
    181c:	e8 cf       	rjmp	.-48     	; 0x17ee <vfprintf+0x4c>
    181e:	91 2c       	mov	r9, r1
    1820:	21 2c       	mov	r2, r1
    1822:	31 2c       	mov	r3, r1
    1824:	ff e1       	ldi	r31, 0x1F	; 31
    1826:	f3 15       	cp	r31, r3
    1828:	d8 f0       	brcs	.+54     	; 0x1860 <vfprintf+0xbe>
    182a:	8b 32       	cpi	r24, 0x2B	; 43
    182c:	79 f0       	breq	.+30     	; 0x184c <vfprintf+0xaa>
    182e:	38 f4       	brcc	.+14     	; 0x183e <vfprintf+0x9c>
    1830:	80 32       	cpi	r24, 0x20	; 32
    1832:	79 f0       	breq	.+30     	; 0x1852 <vfprintf+0xb0>
    1834:	83 32       	cpi	r24, 0x23	; 35
    1836:	a1 f4       	brne	.+40     	; 0x1860 <vfprintf+0xbe>
    1838:	23 2d       	mov	r18, r3
    183a:	20 61       	ori	r18, 0x10	; 16
    183c:	1d c0       	rjmp	.+58     	; 0x1878 <vfprintf+0xd6>
    183e:	8d 32       	cpi	r24, 0x2D	; 45
    1840:	61 f0       	breq	.+24     	; 0x185a <vfprintf+0xb8>
    1842:	80 33       	cpi	r24, 0x30	; 48
    1844:	69 f4       	brne	.+26     	; 0x1860 <vfprintf+0xbe>
    1846:	23 2d       	mov	r18, r3
    1848:	21 60       	ori	r18, 0x01	; 1
    184a:	16 c0       	rjmp	.+44     	; 0x1878 <vfprintf+0xd6>
    184c:	83 2d       	mov	r24, r3
    184e:	82 60       	ori	r24, 0x02	; 2
    1850:	38 2e       	mov	r3, r24
    1852:	e3 2d       	mov	r30, r3
    1854:	e4 60       	ori	r30, 0x04	; 4
    1856:	3e 2e       	mov	r3, r30
    1858:	2a c0       	rjmp	.+84     	; 0x18ae <vfprintf+0x10c>
    185a:	f3 2d       	mov	r31, r3
    185c:	f8 60       	ori	r31, 0x08	; 8
    185e:	1d c0       	rjmp	.+58     	; 0x189a <vfprintf+0xf8>
    1860:	37 fc       	sbrc	r3, 7
    1862:	2d c0       	rjmp	.+90     	; 0x18be <vfprintf+0x11c>
    1864:	20 ed       	ldi	r18, 0xD0	; 208
    1866:	28 0f       	add	r18, r24
    1868:	2a 30       	cpi	r18, 0x0A	; 10
    186a:	40 f0       	brcs	.+16     	; 0x187c <vfprintf+0xda>
    186c:	8e 32       	cpi	r24, 0x2E	; 46
    186e:	b9 f4       	brne	.+46     	; 0x189e <vfprintf+0xfc>
    1870:	36 fc       	sbrc	r3, 6
    1872:	75 c1       	rjmp	.+746    	; 0x1b5e <vfprintf+0x3bc>
    1874:	23 2d       	mov	r18, r3
    1876:	20 64       	ori	r18, 0x40	; 64
    1878:	32 2e       	mov	r3, r18
    187a:	19 c0       	rjmp	.+50     	; 0x18ae <vfprintf+0x10c>
    187c:	36 fe       	sbrs	r3, 6
    187e:	06 c0       	rjmp	.+12     	; 0x188c <vfprintf+0xea>
    1880:	8a e0       	ldi	r24, 0x0A	; 10
    1882:	98 9e       	mul	r9, r24
    1884:	20 0d       	add	r18, r0
    1886:	11 24       	eor	r1, r1
    1888:	92 2e       	mov	r9, r18
    188a:	11 c0       	rjmp	.+34     	; 0x18ae <vfprintf+0x10c>
    188c:	ea e0       	ldi	r30, 0x0A	; 10
    188e:	2e 9e       	mul	r2, r30
    1890:	20 0d       	add	r18, r0
    1892:	11 24       	eor	r1, r1
    1894:	22 2e       	mov	r2, r18
    1896:	f3 2d       	mov	r31, r3
    1898:	f0 62       	ori	r31, 0x20	; 32
    189a:	3f 2e       	mov	r3, r31
    189c:	08 c0       	rjmp	.+16     	; 0x18ae <vfprintf+0x10c>
    189e:	8c 36       	cpi	r24, 0x6C	; 108
    18a0:	21 f4       	brne	.+8      	; 0x18aa <vfprintf+0x108>
    18a2:	83 2d       	mov	r24, r3
    18a4:	80 68       	ori	r24, 0x80	; 128
    18a6:	38 2e       	mov	r3, r24
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <vfprintf+0x10c>
    18aa:	88 36       	cpi	r24, 0x68	; 104
    18ac:	41 f4       	brne	.+16     	; 0x18be <vfprintf+0x11c>
    18ae:	f7 01       	movw	r30, r14
    18b0:	93 fd       	sbrc	r25, 3
    18b2:	85 91       	lpm	r24, Z+
    18b4:	93 ff       	sbrs	r25, 3
    18b6:	81 91       	ld	r24, Z+
    18b8:	7f 01       	movw	r14, r30
    18ba:	81 11       	cpse	r24, r1
    18bc:	b3 cf       	rjmp	.-154    	; 0x1824 <vfprintf+0x82>
    18be:	98 2f       	mov	r25, r24
    18c0:	9f 7d       	andi	r25, 0xDF	; 223
    18c2:	95 54       	subi	r25, 0x45	; 69
    18c4:	93 30       	cpi	r25, 0x03	; 3
    18c6:	28 f4       	brcc	.+10     	; 0x18d2 <vfprintf+0x130>
    18c8:	0c 5f       	subi	r16, 0xFC	; 252
    18ca:	1f 4f       	sbci	r17, 0xFF	; 255
    18cc:	9f e3       	ldi	r25, 0x3F	; 63
    18ce:	99 83       	std	Y+1, r25	; 0x01
    18d0:	0d c0       	rjmp	.+26     	; 0x18ec <vfprintf+0x14a>
    18d2:	83 36       	cpi	r24, 0x63	; 99
    18d4:	31 f0       	breq	.+12     	; 0x18e2 <vfprintf+0x140>
    18d6:	83 37       	cpi	r24, 0x73	; 115
    18d8:	71 f0       	breq	.+28     	; 0x18f6 <vfprintf+0x154>
    18da:	83 35       	cpi	r24, 0x53	; 83
    18dc:	09 f0       	breq	.+2      	; 0x18e0 <vfprintf+0x13e>
    18de:	55 c0       	rjmp	.+170    	; 0x198a <vfprintf+0x1e8>
    18e0:	20 c0       	rjmp	.+64     	; 0x1922 <vfprintf+0x180>
    18e2:	f8 01       	movw	r30, r16
    18e4:	80 81       	ld	r24, Z
    18e6:	89 83       	std	Y+1, r24	; 0x01
    18e8:	0e 5f       	subi	r16, 0xFE	; 254
    18ea:	1f 4f       	sbci	r17, 0xFF	; 255
    18ec:	88 24       	eor	r8, r8
    18ee:	83 94       	inc	r8
    18f0:	91 2c       	mov	r9, r1
    18f2:	53 01       	movw	r10, r6
    18f4:	12 c0       	rjmp	.+36     	; 0x191a <vfprintf+0x178>
    18f6:	28 01       	movw	r4, r16
    18f8:	f2 e0       	ldi	r31, 0x02	; 2
    18fa:	4f 0e       	add	r4, r31
    18fc:	51 1c       	adc	r5, r1
    18fe:	f8 01       	movw	r30, r16
    1900:	a0 80       	ld	r10, Z
    1902:	b1 80       	ldd	r11, Z+1	; 0x01
    1904:	36 fe       	sbrs	r3, 6
    1906:	03 c0       	rjmp	.+6      	; 0x190e <vfprintf+0x16c>
    1908:	69 2d       	mov	r22, r9
    190a:	70 e0       	ldi	r23, 0x00	; 0
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <vfprintf+0x170>
    190e:	6f ef       	ldi	r22, 0xFF	; 255
    1910:	7f ef       	ldi	r23, 0xFF	; 255
    1912:	c5 01       	movw	r24, r10
    1914:	90 d2       	rcall	.+1312   	; 0x1e36 <strnlen>
    1916:	4c 01       	movw	r8, r24
    1918:	82 01       	movw	r16, r4
    191a:	f3 2d       	mov	r31, r3
    191c:	ff 77       	andi	r31, 0x7F	; 127
    191e:	3f 2e       	mov	r3, r31
    1920:	15 c0       	rjmp	.+42     	; 0x194c <vfprintf+0x1aa>
    1922:	28 01       	movw	r4, r16
    1924:	22 e0       	ldi	r18, 0x02	; 2
    1926:	42 0e       	add	r4, r18
    1928:	51 1c       	adc	r5, r1
    192a:	f8 01       	movw	r30, r16
    192c:	a0 80       	ld	r10, Z
    192e:	b1 80       	ldd	r11, Z+1	; 0x01
    1930:	36 fe       	sbrs	r3, 6
    1932:	03 c0       	rjmp	.+6      	; 0x193a <vfprintf+0x198>
    1934:	69 2d       	mov	r22, r9
    1936:	70 e0       	ldi	r23, 0x00	; 0
    1938:	02 c0       	rjmp	.+4      	; 0x193e <vfprintf+0x19c>
    193a:	6f ef       	ldi	r22, 0xFF	; 255
    193c:	7f ef       	ldi	r23, 0xFF	; 255
    193e:	c5 01       	movw	r24, r10
    1940:	68 d2       	rcall	.+1232   	; 0x1e12 <strnlen_P>
    1942:	4c 01       	movw	r8, r24
    1944:	f3 2d       	mov	r31, r3
    1946:	f0 68       	ori	r31, 0x80	; 128
    1948:	3f 2e       	mov	r3, r31
    194a:	82 01       	movw	r16, r4
    194c:	33 fc       	sbrc	r3, 3
    194e:	19 c0       	rjmp	.+50     	; 0x1982 <vfprintf+0x1e0>
    1950:	82 2d       	mov	r24, r2
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	88 16       	cp	r8, r24
    1956:	99 06       	cpc	r9, r25
    1958:	a0 f4       	brcc	.+40     	; 0x1982 <vfprintf+0x1e0>
    195a:	b6 01       	movw	r22, r12
    195c:	80 e2       	ldi	r24, 0x20	; 32
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	85 d2       	rcall	.+1290   	; 0x1e6c <fputc>
    1962:	2a 94       	dec	r2
    1964:	f5 cf       	rjmp	.-22     	; 0x1950 <vfprintf+0x1ae>
    1966:	f5 01       	movw	r30, r10
    1968:	37 fc       	sbrc	r3, 7
    196a:	85 91       	lpm	r24, Z+
    196c:	37 fe       	sbrs	r3, 7
    196e:	81 91       	ld	r24, Z+
    1970:	5f 01       	movw	r10, r30
    1972:	b6 01       	movw	r22, r12
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	7a d2       	rcall	.+1268   	; 0x1e6c <fputc>
    1978:	21 10       	cpse	r2, r1
    197a:	2a 94       	dec	r2
    197c:	21 e0       	ldi	r18, 0x01	; 1
    197e:	82 1a       	sub	r8, r18
    1980:	91 08       	sbc	r9, r1
    1982:	81 14       	cp	r8, r1
    1984:	91 04       	cpc	r9, r1
    1986:	79 f7       	brne	.-34     	; 0x1966 <vfprintf+0x1c4>
    1988:	e1 c0       	rjmp	.+450    	; 0x1b4c <vfprintf+0x3aa>
    198a:	84 36       	cpi	r24, 0x64	; 100
    198c:	11 f0       	breq	.+4      	; 0x1992 <vfprintf+0x1f0>
    198e:	89 36       	cpi	r24, 0x69	; 105
    1990:	39 f5       	brne	.+78     	; 0x19e0 <vfprintf+0x23e>
    1992:	f8 01       	movw	r30, r16
    1994:	37 fe       	sbrs	r3, 7
    1996:	07 c0       	rjmp	.+14     	; 0x19a6 <vfprintf+0x204>
    1998:	60 81       	ld	r22, Z
    199a:	71 81       	ldd	r23, Z+1	; 0x01
    199c:	82 81       	ldd	r24, Z+2	; 0x02
    199e:	93 81       	ldd	r25, Z+3	; 0x03
    19a0:	0c 5f       	subi	r16, 0xFC	; 252
    19a2:	1f 4f       	sbci	r17, 0xFF	; 255
    19a4:	08 c0       	rjmp	.+16     	; 0x19b6 <vfprintf+0x214>
    19a6:	60 81       	ld	r22, Z
    19a8:	71 81       	ldd	r23, Z+1	; 0x01
    19aa:	07 2e       	mov	r0, r23
    19ac:	00 0c       	add	r0, r0
    19ae:	88 0b       	sbc	r24, r24
    19b0:	99 0b       	sbc	r25, r25
    19b2:	0e 5f       	subi	r16, 0xFE	; 254
    19b4:	1f 4f       	sbci	r17, 0xFF	; 255
    19b6:	f3 2d       	mov	r31, r3
    19b8:	ff 76       	andi	r31, 0x6F	; 111
    19ba:	3f 2e       	mov	r3, r31
    19bc:	97 ff       	sbrs	r25, 7
    19be:	09 c0       	rjmp	.+18     	; 0x19d2 <vfprintf+0x230>
    19c0:	90 95       	com	r25
    19c2:	80 95       	com	r24
    19c4:	70 95       	com	r23
    19c6:	61 95       	neg	r22
    19c8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ca:	8f 4f       	sbci	r24, 0xFF	; 255
    19cc:	9f 4f       	sbci	r25, 0xFF	; 255
    19ce:	f0 68       	ori	r31, 0x80	; 128
    19d0:	3f 2e       	mov	r3, r31
    19d2:	2a e0       	ldi	r18, 0x0A	; 10
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	a3 01       	movw	r20, r6
    19d8:	85 d2       	rcall	.+1290   	; 0x1ee4 <__ultoa_invert>
    19da:	88 2e       	mov	r8, r24
    19dc:	86 18       	sub	r8, r6
    19de:	44 c0       	rjmp	.+136    	; 0x1a68 <vfprintf+0x2c6>
    19e0:	85 37       	cpi	r24, 0x75	; 117
    19e2:	31 f4       	brne	.+12     	; 0x19f0 <vfprintf+0x24e>
    19e4:	23 2d       	mov	r18, r3
    19e6:	2f 7e       	andi	r18, 0xEF	; 239
    19e8:	b2 2e       	mov	r11, r18
    19ea:	2a e0       	ldi	r18, 0x0A	; 10
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	25 c0       	rjmp	.+74     	; 0x1a3a <vfprintf+0x298>
    19f0:	93 2d       	mov	r25, r3
    19f2:	99 7f       	andi	r25, 0xF9	; 249
    19f4:	b9 2e       	mov	r11, r25
    19f6:	8f 36       	cpi	r24, 0x6F	; 111
    19f8:	c1 f0       	breq	.+48     	; 0x1a2a <vfprintf+0x288>
    19fa:	18 f4       	brcc	.+6      	; 0x1a02 <vfprintf+0x260>
    19fc:	88 35       	cpi	r24, 0x58	; 88
    19fe:	79 f0       	breq	.+30     	; 0x1a1e <vfprintf+0x27c>
    1a00:	ae c0       	rjmp	.+348    	; 0x1b5e <vfprintf+0x3bc>
    1a02:	80 37       	cpi	r24, 0x70	; 112
    1a04:	19 f0       	breq	.+6      	; 0x1a0c <vfprintf+0x26a>
    1a06:	88 37       	cpi	r24, 0x78	; 120
    1a08:	21 f0       	breq	.+8      	; 0x1a12 <vfprintf+0x270>
    1a0a:	a9 c0       	rjmp	.+338    	; 0x1b5e <vfprintf+0x3bc>
    1a0c:	e9 2f       	mov	r30, r25
    1a0e:	e0 61       	ori	r30, 0x10	; 16
    1a10:	be 2e       	mov	r11, r30
    1a12:	b4 fe       	sbrs	r11, 4
    1a14:	0d c0       	rjmp	.+26     	; 0x1a30 <vfprintf+0x28e>
    1a16:	fb 2d       	mov	r31, r11
    1a18:	f4 60       	ori	r31, 0x04	; 4
    1a1a:	bf 2e       	mov	r11, r31
    1a1c:	09 c0       	rjmp	.+18     	; 0x1a30 <vfprintf+0x28e>
    1a1e:	34 fe       	sbrs	r3, 4
    1a20:	0a c0       	rjmp	.+20     	; 0x1a36 <vfprintf+0x294>
    1a22:	29 2f       	mov	r18, r25
    1a24:	26 60       	ori	r18, 0x06	; 6
    1a26:	b2 2e       	mov	r11, r18
    1a28:	06 c0       	rjmp	.+12     	; 0x1a36 <vfprintf+0x294>
    1a2a:	28 e0       	ldi	r18, 0x08	; 8
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	05 c0       	rjmp	.+10     	; 0x1a3a <vfprintf+0x298>
    1a30:	20 e1       	ldi	r18, 0x10	; 16
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <vfprintf+0x298>
    1a36:	20 e1       	ldi	r18, 0x10	; 16
    1a38:	32 e0       	ldi	r19, 0x02	; 2
    1a3a:	f8 01       	movw	r30, r16
    1a3c:	b7 fe       	sbrs	r11, 7
    1a3e:	07 c0       	rjmp	.+14     	; 0x1a4e <vfprintf+0x2ac>
    1a40:	60 81       	ld	r22, Z
    1a42:	71 81       	ldd	r23, Z+1	; 0x01
    1a44:	82 81       	ldd	r24, Z+2	; 0x02
    1a46:	93 81       	ldd	r25, Z+3	; 0x03
    1a48:	0c 5f       	subi	r16, 0xFC	; 252
    1a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4c:	06 c0       	rjmp	.+12     	; 0x1a5a <vfprintf+0x2b8>
    1a4e:	60 81       	ld	r22, Z
    1a50:	71 81       	ldd	r23, Z+1	; 0x01
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	0e 5f       	subi	r16, 0xFE	; 254
    1a58:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5a:	a3 01       	movw	r20, r6
    1a5c:	43 d2       	rcall	.+1158   	; 0x1ee4 <__ultoa_invert>
    1a5e:	88 2e       	mov	r8, r24
    1a60:	86 18       	sub	r8, r6
    1a62:	fb 2d       	mov	r31, r11
    1a64:	ff 77       	andi	r31, 0x7F	; 127
    1a66:	3f 2e       	mov	r3, r31
    1a68:	36 fe       	sbrs	r3, 6
    1a6a:	0d c0       	rjmp	.+26     	; 0x1a86 <vfprintf+0x2e4>
    1a6c:	23 2d       	mov	r18, r3
    1a6e:	2e 7f       	andi	r18, 0xFE	; 254
    1a70:	a2 2e       	mov	r10, r18
    1a72:	89 14       	cp	r8, r9
    1a74:	58 f4       	brcc	.+22     	; 0x1a8c <vfprintf+0x2ea>
    1a76:	34 fe       	sbrs	r3, 4
    1a78:	0b c0       	rjmp	.+22     	; 0x1a90 <vfprintf+0x2ee>
    1a7a:	32 fc       	sbrc	r3, 2
    1a7c:	09 c0       	rjmp	.+18     	; 0x1a90 <vfprintf+0x2ee>
    1a7e:	83 2d       	mov	r24, r3
    1a80:	8e 7e       	andi	r24, 0xEE	; 238
    1a82:	a8 2e       	mov	r10, r24
    1a84:	05 c0       	rjmp	.+10     	; 0x1a90 <vfprintf+0x2ee>
    1a86:	b8 2c       	mov	r11, r8
    1a88:	a3 2c       	mov	r10, r3
    1a8a:	03 c0       	rjmp	.+6      	; 0x1a92 <vfprintf+0x2f0>
    1a8c:	b8 2c       	mov	r11, r8
    1a8e:	01 c0       	rjmp	.+2      	; 0x1a92 <vfprintf+0x2f0>
    1a90:	b9 2c       	mov	r11, r9
    1a92:	a4 fe       	sbrs	r10, 4
    1a94:	0f c0       	rjmp	.+30     	; 0x1ab4 <vfprintf+0x312>
    1a96:	fe 01       	movw	r30, r28
    1a98:	e8 0d       	add	r30, r8
    1a9a:	f1 1d       	adc	r31, r1
    1a9c:	80 81       	ld	r24, Z
    1a9e:	80 33       	cpi	r24, 0x30	; 48
    1aa0:	21 f4       	brne	.+8      	; 0x1aaa <vfprintf+0x308>
    1aa2:	9a 2d       	mov	r25, r10
    1aa4:	99 7e       	andi	r25, 0xE9	; 233
    1aa6:	a9 2e       	mov	r10, r25
    1aa8:	09 c0       	rjmp	.+18     	; 0x1abc <vfprintf+0x31a>
    1aaa:	a2 fe       	sbrs	r10, 2
    1aac:	06 c0       	rjmp	.+12     	; 0x1aba <vfprintf+0x318>
    1aae:	b3 94       	inc	r11
    1ab0:	b3 94       	inc	r11
    1ab2:	04 c0       	rjmp	.+8      	; 0x1abc <vfprintf+0x31a>
    1ab4:	8a 2d       	mov	r24, r10
    1ab6:	86 78       	andi	r24, 0x86	; 134
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <vfprintf+0x31a>
    1aba:	b3 94       	inc	r11
    1abc:	a3 fc       	sbrc	r10, 3
    1abe:	10 c0       	rjmp	.+32     	; 0x1ae0 <vfprintf+0x33e>
    1ac0:	a0 fe       	sbrs	r10, 0
    1ac2:	06 c0       	rjmp	.+12     	; 0x1ad0 <vfprintf+0x32e>
    1ac4:	b2 14       	cp	r11, r2
    1ac6:	80 f4       	brcc	.+32     	; 0x1ae8 <vfprintf+0x346>
    1ac8:	28 0c       	add	r2, r8
    1aca:	92 2c       	mov	r9, r2
    1acc:	9b 18       	sub	r9, r11
    1ace:	0d c0       	rjmp	.+26     	; 0x1aea <vfprintf+0x348>
    1ad0:	b2 14       	cp	r11, r2
    1ad2:	58 f4       	brcc	.+22     	; 0x1aea <vfprintf+0x348>
    1ad4:	b6 01       	movw	r22, r12
    1ad6:	80 e2       	ldi	r24, 0x20	; 32
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	c8 d1       	rcall	.+912    	; 0x1e6c <fputc>
    1adc:	b3 94       	inc	r11
    1ade:	f8 cf       	rjmp	.-16     	; 0x1ad0 <vfprintf+0x32e>
    1ae0:	b2 14       	cp	r11, r2
    1ae2:	18 f4       	brcc	.+6      	; 0x1aea <vfprintf+0x348>
    1ae4:	2b 18       	sub	r2, r11
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <vfprintf+0x34a>
    1ae8:	98 2c       	mov	r9, r8
    1aea:	21 2c       	mov	r2, r1
    1aec:	a4 fe       	sbrs	r10, 4
    1aee:	0f c0       	rjmp	.+30     	; 0x1b0e <vfprintf+0x36c>
    1af0:	b6 01       	movw	r22, r12
    1af2:	80 e3       	ldi	r24, 0x30	; 48
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	ba d1       	rcall	.+884    	; 0x1e6c <fputc>
    1af8:	a2 fe       	sbrs	r10, 2
    1afa:	16 c0       	rjmp	.+44     	; 0x1b28 <vfprintf+0x386>
    1afc:	a1 fc       	sbrc	r10, 1
    1afe:	03 c0       	rjmp	.+6      	; 0x1b06 <vfprintf+0x364>
    1b00:	88 e7       	ldi	r24, 0x78	; 120
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <vfprintf+0x368>
    1b06:	88 e5       	ldi	r24, 0x58	; 88
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	b6 01       	movw	r22, r12
    1b0c:	0c c0       	rjmp	.+24     	; 0x1b26 <vfprintf+0x384>
    1b0e:	8a 2d       	mov	r24, r10
    1b10:	86 78       	andi	r24, 0x86	; 134
    1b12:	51 f0       	breq	.+20     	; 0x1b28 <vfprintf+0x386>
    1b14:	a1 fe       	sbrs	r10, 1
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <vfprintf+0x37a>
    1b18:	8b e2       	ldi	r24, 0x2B	; 43
    1b1a:	01 c0       	rjmp	.+2      	; 0x1b1e <vfprintf+0x37c>
    1b1c:	80 e2       	ldi	r24, 0x20	; 32
    1b1e:	a7 fc       	sbrc	r10, 7
    1b20:	8d e2       	ldi	r24, 0x2D	; 45
    1b22:	b6 01       	movw	r22, r12
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	a2 d1       	rcall	.+836    	; 0x1e6c <fputc>
    1b28:	89 14       	cp	r8, r9
    1b2a:	30 f4       	brcc	.+12     	; 0x1b38 <vfprintf+0x396>
    1b2c:	b6 01       	movw	r22, r12
    1b2e:	80 e3       	ldi	r24, 0x30	; 48
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	9c d1       	rcall	.+824    	; 0x1e6c <fputc>
    1b34:	9a 94       	dec	r9
    1b36:	f8 cf       	rjmp	.-16     	; 0x1b28 <vfprintf+0x386>
    1b38:	8a 94       	dec	r8
    1b3a:	f3 01       	movw	r30, r6
    1b3c:	e8 0d       	add	r30, r8
    1b3e:	f1 1d       	adc	r31, r1
    1b40:	80 81       	ld	r24, Z
    1b42:	b6 01       	movw	r22, r12
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	92 d1       	rcall	.+804    	; 0x1e6c <fputc>
    1b48:	81 10       	cpse	r8, r1
    1b4a:	f6 cf       	rjmp	.-20     	; 0x1b38 <vfprintf+0x396>
    1b4c:	22 20       	and	r2, r2
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <vfprintf+0x3b0>
    1b50:	4e ce       	rjmp	.-868    	; 0x17ee <vfprintf+0x4c>
    1b52:	b6 01       	movw	r22, r12
    1b54:	80 e2       	ldi	r24, 0x20	; 32
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	89 d1       	rcall	.+786    	; 0x1e6c <fputc>
    1b5a:	2a 94       	dec	r2
    1b5c:	f7 cf       	rjmp	.-18     	; 0x1b4c <vfprintf+0x3aa>
    1b5e:	f6 01       	movw	r30, r12
    1b60:	86 81       	ldd	r24, Z+6	; 0x06
    1b62:	97 81       	ldd	r25, Z+7	; 0x07
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <vfprintf+0x3c8>
    1b66:	8f ef       	ldi	r24, 0xFF	; 255
    1b68:	9f ef       	ldi	r25, 0xFF	; 255
    1b6a:	2b 96       	adiw	r28, 0x0b	; 11
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	df 91       	pop	r29
    1b78:	cf 91       	pop	r28
    1b7a:	1f 91       	pop	r17
    1b7c:	0f 91       	pop	r16
    1b7e:	ff 90       	pop	r15
    1b80:	ef 90       	pop	r14
    1b82:	df 90       	pop	r13
    1b84:	cf 90       	pop	r12
    1b86:	bf 90       	pop	r11
    1b88:	af 90       	pop	r10
    1b8a:	9f 90       	pop	r9
    1b8c:	8f 90       	pop	r8
    1b8e:	7f 90       	pop	r7
    1b90:	6f 90       	pop	r6
    1b92:	5f 90       	pop	r5
    1b94:	4f 90       	pop	r4
    1b96:	3f 90       	pop	r3
    1b98:	2f 90       	pop	r2
    1b9a:	08 95       	ret

00001b9c <calloc>:
    1b9c:	0f 93       	push	r16
    1b9e:	1f 93       	push	r17
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
    1ba4:	86 9f       	mul	r24, r22
    1ba6:	80 01       	movw	r16, r0
    1ba8:	87 9f       	mul	r24, r23
    1baa:	10 0d       	add	r17, r0
    1bac:	96 9f       	mul	r25, r22
    1bae:	10 0d       	add	r17, r0
    1bb0:	11 24       	eor	r1, r1
    1bb2:	c8 01       	movw	r24, r16
    1bb4:	0d d0       	rcall	.+26     	; 0x1bd0 <malloc>
    1bb6:	ec 01       	movw	r28, r24
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	21 f0       	breq	.+8      	; 0x1bc4 <calloc+0x28>
    1bbc:	a8 01       	movw	r20, r16
    1bbe:	60 e0       	ldi	r22, 0x00	; 0
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	32 d1       	rcall	.+612    	; 0x1e28 <memset>
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	08 95       	ret

00001bd0 <malloc>:
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	82 30       	cpi	r24, 0x02	; 2
    1bda:	91 05       	cpc	r25, r1
    1bdc:	10 f4       	brcc	.+4      	; 0x1be2 <malloc+0x12>
    1bde:	82 e0       	ldi	r24, 0x02	; 2
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <__flp>
    1be6:	f0 91 97 04 	lds	r31, 0x0497	; 0x800497 <__flp+0x1>
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	a0 e0       	ldi	r26, 0x00	; 0
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	30 97       	sbiw	r30, 0x00	; 0
    1bf4:	19 f1       	breq	.+70     	; 0x1c3c <malloc+0x6c>
    1bf6:	40 81       	ld	r20, Z
    1bf8:	51 81       	ldd	r21, Z+1	; 0x01
    1bfa:	02 81       	ldd	r16, Z+2	; 0x02
    1bfc:	13 81       	ldd	r17, Z+3	; 0x03
    1bfe:	48 17       	cp	r20, r24
    1c00:	59 07       	cpc	r21, r25
    1c02:	c8 f0       	brcs	.+50     	; 0x1c36 <malloc+0x66>
    1c04:	84 17       	cp	r24, r20
    1c06:	95 07       	cpc	r25, r21
    1c08:	69 f4       	brne	.+26     	; 0x1c24 <malloc+0x54>
    1c0a:	10 97       	sbiw	r26, 0x00	; 0
    1c0c:	31 f0       	breq	.+12     	; 0x1c1a <malloc+0x4a>
    1c0e:	12 96       	adiw	r26, 0x02	; 2
    1c10:	0c 93       	st	X, r16
    1c12:	12 97       	sbiw	r26, 0x02	; 2
    1c14:	13 96       	adiw	r26, 0x03	; 3
    1c16:	1c 93       	st	X, r17
    1c18:	27 c0       	rjmp	.+78     	; 0x1c68 <malloc+0x98>
    1c1a:	00 93 96 04 	sts	0x0496, r16	; 0x800496 <__flp>
    1c1e:	10 93 97 04 	sts	0x0497, r17	; 0x800497 <__flp+0x1>
    1c22:	22 c0       	rjmp	.+68     	; 0x1c68 <malloc+0x98>
    1c24:	21 15       	cp	r18, r1
    1c26:	31 05       	cpc	r19, r1
    1c28:	19 f0       	breq	.+6      	; 0x1c30 <malloc+0x60>
    1c2a:	42 17       	cp	r20, r18
    1c2c:	53 07       	cpc	r21, r19
    1c2e:	18 f4       	brcc	.+6      	; 0x1c36 <malloc+0x66>
    1c30:	9a 01       	movw	r18, r20
    1c32:	bd 01       	movw	r22, r26
    1c34:	ef 01       	movw	r28, r30
    1c36:	df 01       	movw	r26, r30
    1c38:	f8 01       	movw	r30, r16
    1c3a:	db cf       	rjmp	.-74     	; 0x1bf2 <malloc+0x22>
    1c3c:	21 15       	cp	r18, r1
    1c3e:	31 05       	cpc	r19, r1
    1c40:	f9 f0       	breq	.+62     	; 0x1c80 <malloc+0xb0>
    1c42:	28 1b       	sub	r18, r24
    1c44:	39 0b       	sbc	r19, r25
    1c46:	24 30       	cpi	r18, 0x04	; 4
    1c48:	31 05       	cpc	r19, r1
    1c4a:	80 f4       	brcc	.+32     	; 0x1c6c <malloc+0x9c>
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c50:	61 15       	cp	r22, r1
    1c52:	71 05       	cpc	r23, r1
    1c54:	21 f0       	breq	.+8      	; 0x1c5e <malloc+0x8e>
    1c56:	fb 01       	movw	r30, r22
    1c58:	93 83       	std	Z+3, r25	; 0x03
    1c5a:	82 83       	std	Z+2, r24	; 0x02
    1c5c:	04 c0       	rjmp	.+8      	; 0x1c66 <malloc+0x96>
    1c5e:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <__flp+0x1>
    1c62:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <__flp>
    1c66:	fe 01       	movw	r30, r28
    1c68:	32 96       	adiw	r30, 0x02	; 2
    1c6a:	44 c0       	rjmp	.+136    	; 0x1cf4 <malloc+0x124>
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	e2 0f       	add	r30, r18
    1c70:	f3 1f       	adc	r31, r19
    1c72:	81 93       	st	Z+, r24
    1c74:	91 93       	st	Z+, r25
    1c76:	22 50       	subi	r18, 0x02	; 2
    1c78:	31 09       	sbc	r19, r1
    1c7a:	39 83       	std	Y+1, r19	; 0x01
    1c7c:	28 83       	st	Y, r18
    1c7e:	3a c0       	rjmp	.+116    	; 0x1cf4 <malloc+0x124>
    1c80:	20 91 94 04 	lds	r18, 0x0494	; 0x800494 <__brkval>
    1c84:	30 91 95 04 	lds	r19, 0x0495	; 0x800495 <__brkval+0x1>
    1c88:	23 2b       	or	r18, r19
    1c8a:	41 f4       	brne	.+16     	; 0x1c9c <malloc+0xcc>
    1c8c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1c90:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1c94:	30 93 95 04 	sts	0x0495, r19	; 0x800495 <__brkval+0x1>
    1c98:	20 93 94 04 	sts	0x0494, r18	; 0x800494 <__brkval>
    1c9c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1ca0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1ca4:	21 15       	cp	r18, r1
    1ca6:	31 05       	cpc	r19, r1
    1ca8:	41 f4       	brne	.+16     	; 0x1cba <malloc+0xea>
    1caa:	2d b7       	in	r18, 0x3d	; 61
    1cac:	3e b7       	in	r19, 0x3e	; 62
    1cae:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1cb2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1cb6:	24 1b       	sub	r18, r20
    1cb8:	35 0b       	sbc	r19, r21
    1cba:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <__brkval>
    1cbe:	f0 91 95 04 	lds	r31, 0x0495	; 0x800495 <__brkval+0x1>
    1cc2:	e2 17       	cp	r30, r18
    1cc4:	f3 07       	cpc	r31, r19
    1cc6:	a0 f4       	brcc	.+40     	; 0x1cf0 <malloc+0x120>
    1cc8:	2e 1b       	sub	r18, r30
    1cca:	3f 0b       	sbc	r19, r31
    1ccc:	28 17       	cp	r18, r24
    1cce:	39 07       	cpc	r19, r25
    1cd0:	78 f0       	brcs	.+30     	; 0x1cf0 <malloc+0x120>
    1cd2:	ac 01       	movw	r20, r24
    1cd4:	4e 5f       	subi	r20, 0xFE	; 254
    1cd6:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd8:	24 17       	cp	r18, r20
    1cda:	35 07       	cpc	r19, r21
    1cdc:	48 f0       	brcs	.+18     	; 0x1cf0 <malloc+0x120>
    1cde:	4e 0f       	add	r20, r30
    1ce0:	5f 1f       	adc	r21, r31
    1ce2:	50 93 95 04 	sts	0x0495, r21	; 0x800495 <__brkval+0x1>
    1ce6:	40 93 94 04 	sts	0x0494, r20	; 0x800494 <__brkval>
    1cea:	81 93       	st	Z+, r24
    1cec:	91 93       	st	Z+, r25
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <malloc+0x124>
    1cf0:	e0 e0       	ldi	r30, 0x00	; 0
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	cf 01       	movw	r24, r30
    1cf6:	df 91       	pop	r29
    1cf8:	cf 91       	pop	r28
    1cfa:	1f 91       	pop	r17
    1cfc:	0f 91       	pop	r16
    1cfe:	08 95       	ret

00001d00 <free>:
    1d00:	cf 93       	push	r28
    1d02:	df 93       	push	r29
    1d04:	00 97       	sbiw	r24, 0x00	; 0
    1d06:	09 f4       	brne	.+2      	; 0x1d0a <free+0xa>
    1d08:	81 c0       	rjmp	.+258    	; 0x1e0c <free+0x10c>
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	32 97       	sbiw	r30, 0x02	; 2
    1d0e:	13 82       	std	Z+3, r1	; 0x03
    1d10:	12 82       	std	Z+2, r1	; 0x02
    1d12:	a0 91 96 04 	lds	r26, 0x0496	; 0x800496 <__flp>
    1d16:	b0 91 97 04 	lds	r27, 0x0497	; 0x800497 <__flp+0x1>
    1d1a:	10 97       	sbiw	r26, 0x00	; 0
    1d1c:	81 f4       	brne	.+32     	; 0x1d3e <free+0x3e>
    1d1e:	20 81       	ld	r18, Z
    1d20:	31 81       	ldd	r19, Z+1	; 0x01
    1d22:	82 0f       	add	r24, r18
    1d24:	93 1f       	adc	r25, r19
    1d26:	20 91 94 04 	lds	r18, 0x0494	; 0x800494 <__brkval>
    1d2a:	30 91 95 04 	lds	r19, 0x0495	; 0x800495 <__brkval+0x1>
    1d2e:	28 17       	cp	r18, r24
    1d30:	39 07       	cpc	r19, r25
    1d32:	51 f5       	brne	.+84     	; 0x1d88 <free+0x88>
    1d34:	f0 93 95 04 	sts	0x0495, r31	; 0x800495 <__brkval+0x1>
    1d38:	e0 93 94 04 	sts	0x0494, r30	; 0x800494 <__brkval>
    1d3c:	67 c0       	rjmp	.+206    	; 0x1e0c <free+0x10c>
    1d3e:	ed 01       	movw	r28, r26
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	ce 17       	cp	r28, r30
    1d46:	df 07       	cpc	r29, r31
    1d48:	40 f4       	brcc	.+16     	; 0x1d5a <free+0x5a>
    1d4a:	4a 81       	ldd	r20, Y+2	; 0x02
    1d4c:	5b 81       	ldd	r21, Y+3	; 0x03
    1d4e:	9e 01       	movw	r18, r28
    1d50:	41 15       	cp	r20, r1
    1d52:	51 05       	cpc	r21, r1
    1d54:	f1 f0       	breq	.+60     	; 0x1d92 <free+0x92>
    1d56:	ea 01       	movw	r28, r20
    1d58:	f5 cf       	rjmp	.-22     	; 0x1d44 <free+0x44>
    1d5a:	d3 83       	std	Z+3, r29	; 0x03
    1d5c:	c2 83       	std	Z+2, r28	; 0x02
    1d5e:	40 81       	ld	r20, Z
    1d60:	51 81       	ldd	r21, Z+1	; 0x01
    1d62:	84 0f       	add	r24, r20
    1d64:	95 1f       	adc	r25, r21
    1d66:	c8 17       	cp	r28, r24
    1d68:	d9 07       	cpc	r29, r25
    1d6a:	59 f4       	brne	.+22     	; 0x1d82 <free+0x82>
    1d6c:	88 81       	ld	r24, Y
    1d6e:	99 81       	ldd	r25, Y+1	; 0x01
    1d70:	84 0f       	add	r24, r20
    1d72:	95 1f       	adc	r25, r21
    1d74:	02 96       	adiw	r24, 0x02	; 2
    1d76:	91 83       	std	Z+1, r25	; 0x01
    1d78:	80 83       	st	Z, r24
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7e:	93 83       	std	Z+3, r25	; 0x03
    1d80:	82 83       	std	Z+2, r24	; 0x02
    1d82:	21 15       	cp	r18, r1
    1d84:	31 05       	cpc	r19, r1
    1d86:	29 f4       	brne	.+10     	; 0x1d92 <free+0x92>
    1d88:	f0 93 97 04 	sts	0x0497, r31	; 0x800497 <__flp+0x1>
    1d8c:	e0 93 96 04 	sts	0x0496, r30	; 0x800496 <__flp>
    1d90:	3d c0       	rjmp	.+122    	; 0x1e0c <free+0x10c>
    1d92:	e9 01       	movw	r28, r18
    1d94:	fb 83       	std	Y+3, r31	; 0x03
    1d96:	ea 83       	std	Y+2, r30	; 0x02
    1d98:	49 91       	ld	r20, Y+
    1d9a:	59 91       	ld	r21, Y+
    1d9c:	c4 0f       	add	r28, r20
    1d9e:	d5 1f       	adc	r29, r21
    1da0:	ec 17       	cp	r30, r28
    1da2:	fd 07       	cpc	r31, r29
    1da4:	61 f4       	brne	.+24     	; 0x1dbe <free+0xbe>
    1da6:	80 81       	ld	r24, Z
    1da8:	91 81       	ldd	r25, Z+1	; 0x01
    1daa:	84 0f       	add	r24, r20
    1dac:	95 1f       	adc	r25, r21
    1dae:	02 96       	adiw	r24, 0x02	; 2
    1db0:	e9 01       	movw	r28, r18
    1db2:	99 83       	std	Y+1, r25	; 0x01
    1db4:	88 83       	st	Y, r24
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	9b 83       	std	Y+3, r25	; 0x03
    1dbc:	8a 83       	std	Y+2, r24	; 0x02
    1dbe:	e0 e0       	ldi	r30, 0x00	; 0
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	12 96       	adiw	r26, 0x02	; 2
    1dc4:	8d 91       	ld	r24, X+
    1dc6:	9c 91       	ld	r25, X
    1dc8:	13 97       	sbiw	r26, 0x03	; 3
    1dca:	00 97       	sbiw	r24, 0x00	; 0
    1dcc:	19 f0       	breq	.+6      	; 0x1dd4 <free+0xd4>
    1dce:	fd 01       	movw	r30, r26
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	f7 cf       	rjmp	.-18     	; 0x1dc2 <free+0xc2>
    1dd4:	8d 91       	ld	r24, X+
    1dd6:	9c 91       	ld	r25, X
    1dd8:	11 97       	sbiw	r26, 0x01	; 1
    1dda:	9d 01       	movw	r18, r26
    1ddc:	2e 5f       	subi	r18, 0xFE	; 254
    1dde:	3f 4f       	sbci	r19, 0xFF	; 255
    1de0:	82 0f       	add	r24, r18
    1de2:	93 1f       	adc	r25, r19
    1de4:	20 91 94 04 	lds	r18, 0x0494	; 0x800494 <__brkval>
    1de8:	30 91 95 04 	lds	r19, 0x0495	; 0x800495 <__brkval+0x1>
    1dec:	28 17       	cp	r18, r24
    1dee:	39 07       	cpc	r19, r25
    1df0:	69 f4       	brne	.+26     	; 0x1e0c <free+0x10c>
    1df2:	30 97       	sbiw	r30, 0x00	; 0
    1df4:	29 f4       	brne	.+10     	; 0x1e00 <free+0x100>
    1df6:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <__flp+0x1>
    1dfa:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <__flp>
    1dfe:	02 c0       	rjmp	.+4      	; 0x1e04 <free+0x104>
    1e00:	13 82       	std	Z+3, r1	; 0x03
    1e02:	12 82       	std	Z+2, r1	; 0x02
    1e04:	b0 93 95 04 	sts	0x0495, r27	; 0x800495 <__brkval+0x1>
    1e08:	a0 93 94 04 	sts	0x0494, r26	; 0x800494 <__brkval>
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	08 95       	ret

00001e12 <strnlen_P>:
    1e12:	fc 01       	movw	r30, r24
    1e14:	05 90       	lpm	r0, Z+
    1e16:	61 50       	subi	r22, 0x01	; 1
    1e18:	70 40       	sbci	r23, 0x00	; 0
    1e1a:	01 10       	cpse	r0, r1
    1e1c:	d8 f7       	brcc	.-10     	; 0x1e14 <strnlen_P+0x2>
    1e1e:	80 95       	com	r24
    1e20:	90 95       	com	r25
    1e22:	8e 0f       	add	r24, r30
    1e24:	9f 1f       	adc	r25, r31
    1e26:	08 95       	ret

00001e28 <memset>:
    1e28:	dc 01       	movw	r26, r24
    1e2a:	01 c0       	rjmp	.+2      	; 0x1e2e <memset+0x6>
    1e2c:	6d 93       	st	X+, r22
    1e2e:	41 50       	subi	r20, 0x01	; 1
    1e30:	50 40       	sbci	r21, 0x00	; 0
    1e32:	e0 f7       	brcc	.-8      	; 0x1e2c <memset+0x4>
    1e34:	08 95       	ret

00001e36 <strnlen>:
    1e36:	fc 01       	movw	r30, r24
    1e38:	61 50       	subi	r22, 0x01	; 1
    1e3a:	70 40       	sbci	r23, 0x00	; 0
    1e3c:	01 90       	ld	r0, Z+
    1e3e:	01 10       	cpse	r0, r1
    1e40:	d8 f7       	brcc	.-10     	; 0x1e38 <strnlen+0x2>
    1e42:	80 95       	com	r24
    1e44:	90 95       	com	r25
    1e46:	8e 0f       	add	r24, r30
    1e48:	9f 1f       	adc	r25, r31
    1e4a:	08 95       	ret

00001e4c <strrev>:
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	fc 01       	movw	r30, r24
    1e50:	67 2f       	mov	r22, r23
    1e52:	71 91       	ld	r23, Z+
    1e54:	77 23       	and	r23, r23
    1e56:	e1 f7       	brne	.-8      	; 0x1e50 <strrev+0x4>
    1e58:	32 97       	sbiw	r30, 0x02	; 2
    1e5a:	04 c0       	rjmp	.+8      	; 0x1e64 <strrev+0x18>
    1e5c:	7c 91       	ld	r23, X
    1e5e:	6d 93       	st	X+, r22
    1e60:	70 83       	st	Z, r23
    1e62:	62 91       	ld	r22, -Z
    1e64:	ae 17       	cp	r26, r30
    1e66:	bf 07       	cpc	r27, r31
    1e68:	c8 f3       	brcs	.-14     	; 0x1e5c <strrev+0x10>
    1e6a:	08 95       	ret

00001e6c <fputc>:
    1e6c:	0f 93       	push	r16
    1e6e:	1f 93       	push	r17
    1e70:	cf 93       	push	r28
    1e72:	df 93       	push	r29
    1e74:	fb 01       	movw	r30, r22
    1e76:	23 81       	ldd	r18, Z+3	; 0x03
    1e78:	21 fd       	sbrc	r18, 1
    1e7a:	03 c0       	rjmp	.+6      	; 0x1e82 <fputc+0x16>
    1e7c:	8f ef       	ldi	r24, 0xFF	; 255
    1e7e:	9f ef       	ldi	r25, 0xFF	; 255
    1e80:	2c c0       	rjmp	.+88     	; 0x1eda <fputc+0x6e>
    1e82:	22 ff       	sbrs	r18, 2
    1e84:	16 c0       	rjmp	.+44     	; 0x1eb2 <fputc+0x46>
    1e86:	46 81       	ldd	r20, Z+6	; 0x06
    1e88:	57 81       	ldd	r21, Z+7	; 0x07
    1e8a:	24 81       	ldd	r18, Z+4	; 0x04
    1e8c:	35 81       	ldd	r19, Z+5	; 0x05
    1e8e:	42 17       	cp	r20, r18
    1e90:	53 07       	cpc	r21, r19
    1e92:	44 f4       	brge	.+16     	; 0x1ea4 <fputc+0x38>
    1e94:	a0 81       	ld	r26, Z
    1e96:	b1 81       	ldd	r27, Z+1	; 0x01
    1e98:	9d 01       	movw	r18, r26
    1e9a:	2f 5f       	subi	r18, 0xFF	; 255
    1e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9e:	31 83       	std	Z+1, r19	; 0x01
    1ea0:	20 83       	st	Z, r18
    1ea2:	8c 93       	st	X, r24
    1ea4:	26 81       	ldd	r18, Z+6	; 0x06
    1ea6:	37 81       	ldd	r19, Z+7	; 0x07
    1ea8:	2f 5f       	subi	r18, 0xFF	; 255
    1eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1eac:	37 83       	std	Z+7, r19	; 0x07
    1eae:	26 83       	std	Z+6, r18	; 0x06
    1eb0:	14 c0       	rjmp	.+40     	; 0x1eda <fputc+0x6e>
    1eb2:	8b 01       	movw	r16, r22
    1eb4:	ec 01       	movw	r28, r24
    1eb6:	fb 01       	movw	r30, r22
    1eb8:	00 84       	ldd	r0, Z+8	; 0x08
    1eba:	f1 85       	ldd	r31, Z+9	; 0x09
    1ebc:	e0 2d       	mov	r30, r0
    1ebe:	19 95       	eicall
    1ec0:	89 2b       	or	r24, r25
    1ec2:	e1 f6       	brne	.-72     	; 0x1e7c <fputc+0x10>
    1ec4:	d8 01       	movw	r26, r16
    1ec6:	16 96       	adiw	r26, 0x06	; 6
    1ec8:	8d 91       	ld	r24, X+
    1eca:	9c 91       	ld	r25, X
    1ecc:	17 97       	sbiw	r26, 0x07	; 7
    1ece:	01 96       	adiw	r24, 0x01	; 1
    1ed0:	17 96       	adiw	r26, 0x07	; 7
    1ed2:	9c 93       	st	X, r25
    1ed4:	8e 93       	st	-X, r24
    1ed6:	16 97       	sbiw	r26, 0x06	; 6
    1ed8:	ce 01       	movw	r24, r28
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	1f 91       	pop	r17
    1ee0:	0f 91       	pop	r16
    1ee2:	08 95       	ret

00001ee4 <__ultoa_invert>:
    1ee4:	fa 01       	movw	r30, r20
    1ee6:	aa 27       	eor	r26, r26
    1ee8:	28 30       	cpi	r18, 0x08	; 8
    1eea:	51 f1       	breq	.+84     	; 0x1f40 <__ultoa_invert+0x5c>
    1eec:	20 31       	cpi	r18, 0x10	; 16
    1eee:	81 f1       	breq	.+96     	; 0x1f50 <__ultoa_invert+0x6c>
    1ef0:	e8 94       	clt
    1ef2:	6f 93       	push	r22
    1ef4:	6e 7f       	andi	r22, 0xFE	; 254
    1ef6:	6e 5f       	subi	r22, 0xFE	; 254
    1ef8:	7f 4f       	sbci	r23, 0xFF	; 255
    1efa:	8f 4f       	sbci	r24, 0xFF	; 255
    1efc:	9f 4f       	sbci	r25, 0xFF	; 255
    1efe:	af 4f       	sbci	r26, 0xFF	; 255
    1f00:	b1 e0       	ldi	r27, 0x01	; 1
    1f02:	3e d0       	rcall	.+124    	; 0x1f80 <__ultoa_invert+0x9c>
    1f04:	b4 e0       	ldi	r27, 0x04	; 4
    1f06:	3c d0       	rcall	.+120    	; 0x1f80 <__ultoa_invert+0x9c>
    1f08:	67 0f       	add	r22, r23
    1f0a:	78 1f       	adc	r23, r24
    1f0c:	89 1f       	adc	r24, r25
    1f0e:	9a 1f       	adc	r25, r26
    1f10:	a1 1d       	adc	r26, r1
    1f12:	68 0f       	add	r22, r24
    1f14:	79 1f       	adc	r23, r25
    1f16:	8a 1f       	adc	r24, r26
    1f18:	91 1d       	adc	r25, r1
    1f1a:	a1 1d       	adc	r26, r1
    1f1c:	6a 0f       	add	r22, r26
    1f1e:	71 1d       	adc	r23, r1
    1f20:	81 1d       	adc	r24, r1
    1f22:	91 1d       	adc	r25, r1
    1f24:	a1 1d       	adc	r26, r1
    1f26:	20 d0       	rcall	.+64     	; 0x1f68 <__ultoa_invert+0x84>
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <__ultoa_invert+0x48>
    1f2a:	68 94       	set
    1f2c:	3f 91       	pop	r19
    1f2e:	2a e0       	ldi	r18, 0x0A	; 10
    1f30:	26 9f       	mul	r18, r22
    1f32:	11 24       	eor	r1, r1
    1f34:	30 19       	sub	r19, r0
    1f36:	30 5d       	subi	r19, 0xD0	; 208
    1f38:	31 93       	st	Z+, r19
    1f3a:	de f6       	brtc	.-74     	; 0x1ef2 <__ultoa_invert+0xe>
    1f3c:	cf 01       	movw	r24, r30
    1f3e:	08 95       	ret
    1f40:	46 2f       	mov	r20, r22
    1f42:	47 70       	andi	r20, 0x07	; 7
    1f44:	40 5d       	subi	r20, 0xD0	; 208
    1f46:	41 93       	st	Z+, r20
    1f48:	b3 e0       	ldi	r27, 0x03	; 3
    1f4a:	0f d0       	rcall	.+30     	; 0x1f6a <__ultoa_invert+0x86>
    1f4c:	c9 f7       	brne	.-14     	; 0x1f40 <__ultoa_invert+0x5c>
    1f4e:	f6 cf       	rjmp	.-20     	; 0x1f3c <__ultoa_invert+0x58>
    1f50:	46 2f       	mov	r20, r22
    1f52:	4f 70       	andi	r20, 0x0F	; 15
    1f54:	40 5d       	subi	r20, 0xD0	; 208
    1f56:	4a 33       	cpi	r20, 0x3A	; 58
    1f58:	18 f0       	brcs	.+6      	; 0x1f60 <__ultoa_invert+0x7c>
    1f5a:	49 5d       	subi	r20, 0xD9	; 217
    1f5c:	31 fd       	sbrc	r19, 1
    1f5e:	40 52       	subi	r20, 0x20	; 32
    1f60:	41 93       	st	Z+, r20
    1f62:	02 d0       	rcall	.+4      	; 0x1f68 <__ultoa_invert+0x84>
    1f64:	a9 f7       	brne	.-22     	; 0x1f50 <__ultoa_invert+0x6c>
    1f66:	ea cf       	rjmp	.-44     	; 0x1f3c <__ultoa_invert+0x58>
    1f68:	b4 e0       	ldi	r27, 0x04	; 4
    1f6a:	a6 95       	lsr	r26
    1f6c:	97 95       	ror	r25
    1f6e:	87 95       	ror	r24
    1f70:	77 95       	ror	r23
    1f72:	67 95       	ror	r22
    1f74:	ba 95       	dec	r27
    1f76:	c9 f7       	brne	.-14     	; 0x1f6a <__ultoa_invert+0x86>
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	61 05       	cpc	r22, r1
    1f7c:	71 05       	cpc	r23, r1
    1f7e:	08 95       	ret
    1f80:	9b 01       	movw	r18, r22
    1f82:	ac 01       	movw	r20, r24
    1f84:	0a 2e       	mov	r0, r26
    1f86:	06 94       	lsr	r0
    1f88:	57 95       	ror	r21
    1f8a:	47 95       	ror	r20
    1f8c:	37 95       	ror	r19
    1f8e:	27 95       	ror	r18
    1f90:	ba 95       	dec	r27
    1f92:	c9 f7       	brne	.-14     	; 0x1f86 <__ultoa_invert+0xa2>
    1f94:	62 0f       	add	r22, r18
    1f96:	73 1f       	adc	r23, r19
    1f98:	84 1f       	adc	r24, r20
    1f9a:	95 1f       	adc	r25, r21
    1f9c:	a0 1d       	adc	r26, r0
    1f9e:	08 95       	ret

00001fa0 <_exit>:
    1fa0:	f8 94       	cli

00001fa2 <__stop_program>:
    1fa2:	ff cf       	rjmp	.-2      	; 0x1fa2 <__stop_program>
