
drv_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000cc  00800200  00002344  000023d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002344  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002f7  008002cc  008002cc  000024a4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000024a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002500  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00002540  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002aa0  00000000  00000000  00002710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013b6  00000000  00000000  000051b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001305  00000000  00000000  00006566  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005dc  00000000  00000000  0000786c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b9d  00000000  00000000  00007e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bcb  00000000  00000000  000089e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9e c0       	rjmp	.+316    	; 0x13e <__ctors_end>
       2:	00 00       	nop
       4:	bc c0       	rjmp	.+376    	; 0x17e <__bad_interrupt>
       6:	00 00       	nop
       8:	ba c0       	rjmp	.+372    	; 0x17e <__bad_interrupt>
       a:	00 00       	nop
       c:	b8 c0       	rjmp	.+368    	; 0x17e <__bad_interrupt>
       e:	00 00       	nop
      10:	b6 c0       	rjmp	.+364    	; 0x17e <__bad_interrupt>
      12:	00 00       	nop
      14:	b4 c0       	rjmp	.+360    	; 0x17e <__bad_interrupt>
      16:	00 00       	nop
      18:	b2 c0       	rjmp	.+356    	; 0x17e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b0 c0       	rjmp	.+352    	; 0x17e <__bad_interrupt>
      1e:	00 00       	nop
      20:	ae c0       	rjmp	.+348    	; 0x17e <__bad_interrupt>
      22:	00 00       	nop
      24:	ac c0       	rjmp	.+344    	; 0x17e <__bad_interrupt>
      26:	00 00       	nop
      28:	aa c0       	rjmp	.+340    	; 0x17e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a8 c0       	rjmp	.+336    	; 0x17e <__bad_interrupt>
      2e:	00 00       	nop
      30:	a6 c0       	rjmp	.+332    	; 0x17e <__bad_interrupt>
      32:	00 00       	nop
      34:	a4 c0       	rjmp	.+328    	; 0x17e <__bad_interrupt>
      36:	00 00       	nop
      38:	a2 c0       	rjmp	.+324    	; 0x17e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a0 c0       	rjmp	.+320    	; 0x17e <__bad_interrupt>
      3e:	00 00       	nop
      40:	9e c0       	rjmp	.+316    	; 0x17e <__bad_interrupt>
      42:	00 00       	nop
      44:	9c c0       	rjmp	.+312    	; 0x17e <__bad_interrupt>
      46:	00 00       	nop
      48:	9a c0       	rjmp	.+308    	; 0x17e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	98 c0       	rjmp	.+304    	; 0x17e <__bad_interrupt>
      4e:	00 00       	nop
      50:	96 c0       	rjmp	.+300    	; 0x17e <__bad_interrupt>
      52:	00 00       	nop
      54:	94 c0       	rjmp	.+296    	; 0x17e <__bad_interrupt>
      56:	00 00       	nop
      58:	92 c0       	rjmp	.+292    	; 0x17e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5a c2       	rjmp	.+1204   	; 0x512 <__vector_23>
      5e:	00 00       	nop
      60:	8e c0       	rjmp	.+284    	; 0x17e <__bad_interrupt>
      62:	00 00       	nop
      64:	8c c0       	rjmp	.+280    	; 0x17e <__bad_interrupt>
      66:	00 00       	nop
      68:	8a c0       	rjmp	.+276    	; 0x17e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	88 c0       	rjmp	.+272    	; 0x17e <__bad_interrupt>
      6e:	00 00       	nop
      70:	86 c0       	rjmp	.+268    	; 0x17e <__bad_interrupt>
      72:	00 00       	nop
      74:	84 c0       	rjmp	.+264    	; 0x17e <__bad_interrupt>
      76:	00 00       	nop
      78:	82 c0       	rjmp	.+260    	; 0x17e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	80 c0       	rjmp	.+256    	; 0x17e <__bad_interrupt>
      7e:	00 00       	nop
      80:	7e c0       	rjmp	.+252    	; 0x17e <__bad_interrupt>
      82:	00 00       	nop
      84:	7c c0       	rjmp	.+248    	; 0x17e <__bad_interrupt>
      86:	00 00       	nop
      88:	7a c0       	rjmp	.+244    	; 0x17e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	78 c0       	rjmp	.+240    	; 0x17e <__bad_interrupt>
      8e:	00 00       	nop
      90:	76 c0       	rjmp	.+236    	; 0x17e <__bad_interrupt>
      92:	00 00       	nop
      94:	74 c0       	rjmp	.+232    	; 0x17e <__bad_interrupt>
      96:	00 00       	nop
      98:	72 c0       	rjmp	.+228    	; 0x17e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	70 c0       	rjmp	.+224    	; 0x17e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6e c0       	rjmp	.+220    	; 0x17e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6c c0       	rjmp	.+216    	; 0x17e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6a c0       	rjmp	.+212    	; 0x17e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	68 c0       	rjmp	.+208    	; 0x17e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	66 c0       	rjmp	.+204    	; 0x17e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	64 c0       	rjmp	.+200    	; 0x17e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	62 c0       	rjmp	.+196    	; 0x17e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1c c3       	rjmp	.+1592   	; 0x6f6 <__vector_47>
      be:	00 00       	nop
      c0:	5e c0       	rjmp	.+188    	; 0x17e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	5c c0       	rjmp	.+184    	; 0x17e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	5a c0       	rjmp	.+180    	; 0x17e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	58 c0       	rjmp	.+176    	; 0x17e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	56 c0       	rjmp	.+172    	; 0x17e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	54 c0       	rjmp	.+168    	; 0x17e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	52 c0       	rjmp	.+164    	; 0x17e <__bad_interrupt>
      da:	00 00       	nop
      dc:	50 c0       	rjmp	.+160    	; 0x17e <__bad_interrupt>
      de:	00 00       	nop
      e0:	4e c0       	rjmp	.+156    	; 0x17e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	03 6e       	ori	r16, 0xE3	; 227
      e6:	db 36       	cpi	r29, 0x6B	; 107
      e8:	3d 9a       	sbi	0x07, 5	; 7
      ea:	99 99       	sbic	0x13, 1	; 19
      ec:	99 3d       	cpi	r25, 0xD9	; 217
      ee:	ab aa       	std	Y+51, r10	; 0x33
      f0:	aa 2a       	or	r10, r26
      f2:	3e 00       	.word	0x003e	; ????
      f4:	00 00       	nop
      f6:	80 3f       	cpi	r24, 0xF0	; 240
      f8:	07 2c       	mov	r0, r7
      fa:	7a a5       	ldd	r23, Y+42	; 0x2a
      fc:	ba 6c       	ori	r27, 0xCA	; 202
      fe:	c5 90       	lpm	r12, Z+
     100:	da 3b       	cpi	r29, 0xBA	; 186
     102:	93 65       	ori	r25, 0x53	; 83
     104:	fc 8b       	std	Y+20, r31	; 0x14
     106:	bc 53       	subi	r27, 0x3C	; 60
     108:	f8 10       	cpse	r15, r8
     10a:	fd 3c       	cpi	r31, 0xCD	; 205
     10c:	56 92       	lac	Z, r5
     10e:	83 4d       	sbci	r24, 0xD3	; 211
     110:	bd 87       	std	Y+13, r27	; 0x0d
     112:	9d 3a       	cpi	r25, 0xAD	; 173
     114:	b6 3d       	cpi	r27, 0xD6	; 214
     116:	cb c9       	rjmp	.-3178   	; 0xfffff4ae <__eeprom_end+0xff7ef4ae>
     118:	bf 5b       	subi	r27, 0xBF	; 191
     11a:	be 73       	andi	r27, 0x3E	; 62
     11c:	da 0f       	add	r29, r26
     11e:	c9 3f       	cpi	r28, 0xF9	; 249
     120:	05 a8       	ldd	r0, Z+53	; 0x35
     122:	4c cd       	rjmp	.-1384   	; 0xfffffbbc <__eeprom_end+0xff7efbbc>
     124:	b2 d4       	rcall	.+2404   	; 0xa8a <main+0x2a2>
     126:	4e b9       	out	0x0e, r20	; 14
     128:	38 36       	cpi	r19, 0x68	; 104
     12a:	a9 02       	muls	r26, r25
     12c:	0c 50       	subi	r16, 0x0C	; 12
     12e:	b9 91       	ld	r27, Y+
     130:	86 88       	ldd	r8, Z+22	; 0x16
     132:	08 3c       	cpi	r16, 0xC8	; 200
     134:	a6 aa       	std	Z+54, r10	; 0x36
     136:	aa 2a       	or	r10, r26
     138:	be 00       	.word	0x00be	; ????
     13a:	00 00       	nop
     13c:	80 3f       	cpi	r24, 0xF0	; 240

0000013e <__ctors_end>:
     13e:	11 24       	eor	r1, r1
     140:	1f be       	out	0x3f, r1	; 63
     142:	cf ef       	ldi	r28, 0xFF	; 255
     144:	d1 e2       	ldi	r29, 0x21	; 33
     146:	de bf       	out	0x3e, r29	; 62
     148:	cd bf       	out	0x3d, r28	; 61
     14a:	00 e0       	ldi	r16, 0x00	; 0
     14c:	0c bf       	out	0x3c, r16	; 60

0000014e <__do_copy_data>:
     14e:	12 e0       	ldi	r17, 0x02	; 2
     150:	a0 e0       	ldi	r26, 0x00	; 0
     152:	b2 e0       	ldi	r27, 0x02	; 2
     154:	e4 e4       	ldi	r30, 0x44	; 68
     156:	f3 e2       	ldi	r31, 0x23	; 35
     158:	00 e0       	ldi	r16, 0x00	; 0
     15a:	0b bf       	out	0x3b, r16	; 59
     15c:	02 c0       	rjmp	.+4      	; 0x162 <__do_copy_data+0x14>
     15e:	07 90       	elpm	r0, Z+
     160:	0d 92       	st	X+, r0
     162:	ac 3c       	cpi	r26, 0xCC	; 204
     164:	b1 07       	cpc	r27, r17
     166:	d9 f7       	brne	.-10     	; 0x15e <__do_copy_data+0x10>

00000168 <__do_clear_bss>:
     168:	25 e0       	ldi	r18, 0x05	; 5
     16a:	ac ec       	ldi	r26, 0xCC	; 204
     16c:	b2 e0       	ldi	r27, 0x02	; 2
     16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
     170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
     172:	a3 3c       	cpi	r26, 0xC3	; 195
     174:	b2 07       	cpc	r27, r18
     176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
     178:	37 d3       	rcall	.+1646   	; 0x7e8 <main>
     17a:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <_exit>

0000017e <__bad_interrupt>:
     17e:	40 cf       	rjmp	.-384    	; 0x0 <__vectors>

00000180 <init_gpio>:
	*/
	//DDRB|=(1<<PB5);//LED13
	//sbi(DDRB,4);//digital 10
	//sbi(DDRB,5);//digital 11
	//sbi(DDRB,6);//digital 12
	sbi(DDRH,3);//digital 6 OC4A
     180:	e1 e0       	ldi	r30, 0x01	; 1
     182:	f1 e0       	ldi	r31, 0x01	; 1
     184:	80 81       	ld	r24, Z
     186:	88 60       	ori	r24, 0x08	; 8
     188:	80 83       	st	Z, r24
	sbi(DDRH,4);//digital 7 OC4B
     18a:	80 81       	ld	r24, Z
     18c:	80 61       	ori	r24, 0x10	; 16
     18e:	80 83       	st	Z, r24
	sbi(DDRH,5);//digital 8 OC4C
     190:	80 81       	ld	r24, Z
     192:	80 62       	ori	r24, 0x20	; 32
     194:	80 83       	st	Z, r24
     196:	08 95       	ret

00000198 <min>:
		}
	#endif
}

double min (double a,double b, double c)
{
     198:	8f 92       	push	r8
     19a:	9f 92       	push	r9
     19c:	af 92       	push	r10
     19e:	bf 92       	push	r11
     1a0:	cf 92       	push	r12
     1a2:	df 92       	push	r13
     1a4:	ef 92       	push	r14
     1a6:	ff 92       	push	r15
     1a8:	0f 93       	push	r16
     1aa:	1f 93       	push	r17
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	d6 2e       	mov	r13, r22
     1b2:	d7 2f       	mov	r29, r23
     1b4:	c8 2f       	mov	r28, r24
     1b6:	c9 2e       	mov	r12, r25
     1b8:	b2 2e       	mov	r11, r18
     1ba:	a3 2e       	mov	r10, r19
     1bc:	94 2e       	mov	r9, r20
     1be:	85 2e       	mov	r8, r21
	if (a<b && a<c) return a;
     1c0:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__cmpsf2>
     1c4:	88 23       	and	r24, r24
     1c6:	64 f4       	brge	.+24     	; 0x1e0 <min+0x48>
     1c8:	2e 2d       	mov	r18, r14
     1ca:	3f 2d       	mov	r19, r15
     1cc:	40 2f       	mov	r20, r16
     1ce:	51 2f       	mov	r21, r17
     1d0:	6d 2d       	mov	r22, r13
     1d2:	7d 2f       	mov	r23, r29
     1d4:	8c 2f       	mov	r24, r28
     1d6:	9c 2d       	mov	r25, r12
     1d8:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__cmpsf2>
     1dc:	88 23       	and	r24, r24
     1de:	8c f1       	brlt	.+98     	; 0x242 <min+0xaa>
	if (b<a && b<c) return b;
     1e0:	2b 2d       	mov	r18, r11
     1e2:	3a 2d       	mov	r19, r10
     1e4:	49 2d       	mov	r20, r9
     1e6:	58 2d       	mov	r21, r8
     1e8:	6d 2d       	mov	r22, r13
     1ea:	7d 2f       	mov	r23, r29
     1ec:	8c 2f       	mov	r24, r28
     1ee:	9c 2d       	mov	r25, r12
     1f0:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__gesf2>
     1f4:	18 16       	cp	r1, r24
     1f6:	64 f4       	brge	.+24     	; 0x210 <min+0x78>
     1f8:	2e 2d       	mov	r18, r14
     1fa:	3f 2d       	mov	r19, r15
     1fc:	40 2f       	mov	r20, r16
     1fe:	51 2f       	mov	r21, r17
     200:	6b 2d       	mov	r22, r11
     202:	7a 2d       	mov	r23, r10
     204:	89 2d       	mov	r24, r9
     206:	98 2d       	mov	r25, r8
     208:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__cmpsf2>
     20c:	88 23       	and	r24, r24
     20e:	e4 f0       	brlt	.+56     	; 0x248 <min+0xb0>
	if (c<a && c<b) return c;
     210:	2e 2d       	mov	r18, r14
     212:	3f 2d       	mov	r19, r15
     214:	40 2f       	mov	r20, r16
     216:	51 2f       	mov	r21, r17
     218:	6d 2d       	mov	r22, r13
     21a:	7d 2f       	mov	r23, r29
     21c:	8c 2f       	mov	r24, r28
     21e:	9c 2d       	mov	r25, r12
     220:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__gesf2>
     224:	18 16       	cp	r1, r24
     226:	64 f4       	brge	.+24     	; 0x240 <min+0xa8>
     228:	2e 2d       	mov	r18, r14
     22a:	3f 2d       	mov	r19, r15
     22c:	40 2f       	mov	r20, r16
     22e:	51 2f       	mov	r21, r17
     230:	6b 2d       	mov	r22, r11
     232:	7a 2d       	mov	r23, r10
     234:	89 2d       	mov	r24, r9
     236:	98 2d       	mov	r25, r8
     238:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__gesf2>
     23c:	18 16       	cp	r1, r24
     23e:	4c f0       	brlt	.+18     	; 0x252 <min+0xba>
}
     240:	0a c0       	rjmp	.+20     	; 0x256 <min+0xbe>
	#endif
}

double min (double a,double b, double c)
{
	if (a<b && a<c) return a;
     242:	ed 2c       	mov	r14, r13
     244:	1c 2d       	mov	r17, r12
     246:	07 c0       	rjmp	.+14     	; 0x256 <min+0xbe>
	if (b<a && b<c) return b;
     248:	eb 2c       	mov	r14, r11
     24a:	da 2d       	mov	r29, r10
     24c:	c9 2d       	mov	r28, r9
     24e:	18 2d       	mov	r17, r8
     250:	02 c0       	rjmp	.+4      	; 0x256 <min+0xbe>
	if (c<a && c<b) return c;
     252:	df 2d       	mov	r29, r15
     254:	c0 2f       	mov	r28, r16
}
     256:	6e 2d       	mov	r22, r14
     258:	7d 2f       	mov	r23, r29
     25a:	8c 2f       	mov	r24, r28
     25c:	91 2f       	mov	r25, r17
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	1f 91       	pop	r17
     264:	0f 91       	pop	r16
     266:	ff 90       	pop	r15
     268:	ef 90       	pop	r14
     26a:	df 90       	pop	r13
     26c:	cf 90       	pop	r12
     26e:	bf 90       	pop	r11
     270:	af 90       	pop	r10
     272:	9f 90       	pop	r9
     274:	8f 90       	pop	r8
     276:	08 95       	ret

00000278 <max>:
double max (double a,double b, double c)
{
     278:	8f 92       	push	r8
     27a:	9f 92       	push	r9
     27c:	af 92       	push	r10
     27e:	bf 92       	push	r11
     280:	cf 92       	push	r12
     282:	df 92       	push	r13
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	d6 2e       	mov	r13, r22
     292:	d7 2f       	mov	r29, r23
     294:	c8 2f       	mov	r28, r24
     296:	c9 2e       	mov	r12, r25
     298:	b2 2e       	mov	r11, r18
     29a:	a3 2e       	mov	r10, r19
     29c:	94 2e       	mov	r9, r20
     29e:	85 2e       	mov	r8, r21
	if (a>b && a>c) return a;
     2a0:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__gesf2>
     2a4:	18 16       	cp	r1, r24
     2a6:	64 f4       	brge	.+24     	; 0x2c0 <max+0x48>
     2a8:	2e 2d       	mov	r18, r14
     2aa:	3f 2d       	mov	r19, r15
     2ac:	40 2f       	mov	r20, r16
     2ae:	51 2f       	mov	r21, r17
     2b0:	6d 2d       	mov	r22, r13
     2b2:	7d 2f       	mov	r23, r29
     2b4:	8c 2f       	mov	r24, r28
     2b6:	9c 2d       	mov	r25, r12
     2b8:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__gesf2>
     2bc:	18 16       	cp	r1, r24
     2be:	8c f1       	brlt	.+98     	; 0x322 <max+0xaa>
	if (b>a && b>c) return b;
     2c0:	2b 2d       	mov	r18, r11
     2c2:	3a 2d       	mov	r19, r10
     2c4:	49 2d       	mov	r20, r9
     2c6:	58 2d       	mov	r21, r8
     2c8:	6d 2d       	mov	r22, r13
     2ca:	7d 2f       	mov	r23, r29
     2cc:	8c 2f       	mov	r24, r28
     2ce:	9c 2d       	mov	r25, r12
     2d0:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__cmpsf2>
     2d4:	88 23       	and	r24, r24
     2d6:	64 f4       	brge	.+24     	; 0x2f0 <max+0x78>
     2d8:	2e 2d       	mov	r18, r14
     2da:	3f 2d       	mov	r19, r15
     2dc:	40 2f       	mov	r20, r16
     2de:	51 2f       	mov	r21, r17
     2e0:	6b 2d       	mov	r22, r11
     2e2:	7a 2d       	mov	r23, r10
     2e4:	89 2d       	mov	r24, r9
     2e6:	98 2d       	mov	r25, r8
     2e8:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__gesf2>
     2ec:	18 16       	cp	r1, r24
     2ee:	e4 f0       	brlt	.+56     	; 0x328 <max+0xb0>
	if (c>a && c>b) return c;
     2f0:	2e 2d       	mov	r18, r14
     2f2:	3f 2d       	mov	r19, r15
     2f4:	40 2f       	mov	r20, r16
     2f6:	51 2f       	mov	r21, r17
     2f8:	6d 2d       	mov	r22, r13
     2fa:	7d 2f       	mov	r23, r29
     2fc:	8c 2f       	mov	r24, r28
     2fe:	9c 2d       	mov	r25, r12
     300:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__cmpsf2>
     304:	88 23       	and	r24, r24
     306:	64 f4       	brge	.+24     	; 0x320 <max+0xa8>
     308:	2e 2d       	mov	r18, r14
     30a:	3f 2d       	mov	r19, r15
     30c:	40 2f       	mov	r20, r16
     30e:	51 2f       	mov	r21, r17
     310:	6b 2d       	mov	r22, r11
     312:	7a 2d       	mov	r23, r10
     314:	89 2d       	mov	r24, r9
     316:	98 2d       	mov	r25, r8
     318:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__cmpsf2>
     31c:	88 23       	and	r24, r24
     31e:	4c f0       	brlt	.+18     	; 0x332 <max+0xba>
}
     320:	0a c0       	rjmp	.+20     	; 0x336 <max+0xbe>
	if (b<a && b<c) return b;
	if (c<a && c<b) return c;
}
double max (double a,double b, double c)
{
	if (a>b && a>c) return a;
     322:	ed 2c       	mov	r14, r13
     324:	1c 2d       	mov	r17, r12
     326:	07 c0       	rjmp	.+14     	; 0x336 <max+0xbe>
	if (b>a && b>c) return b;
     328:	eb 2c       	mov	r14, r11
     32a:	da 2d       	mov	r29, r10
     32c:	c9 2d       	mov	r28, r9
     32e:	18 2d       	mov	r17, r8
     330:	02 c0       	rjmp	.+4      	; 0x336 <max+0xbe>
	if (c>a && c>b) return c;
     332:	df 2d       	mov	r29, r15
     334:	c0 2f       	mov	r28, r16
}
     336:	6e 2d       	mov	r22, r14
     338:	7d 2f       	mov	r23, r29
     33a:	8c 2f       	mov	r24, r28
     33c:	91 2f       	mov	r25, r17
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	1f 91       	pop	r17
     344:	0f 91       	pop	r16
     346:	ff 90       	pop	r15
     348:	ef 90       	pop	r14
     34a:	df 90       	pop	r13
     34c:	cf 90       	pop	r12
     34e:	bf 90       	pop	r11
     350:	af 90       	pop	r10
     352:	9f 90       	pop	r9
     354:	8f 90       	pop	r8
     356:	08 95       	ret

00000358 <getSinTable>:
	sbi(DDRH,4);//digital 7 OC4B
	sbi(DDRH,5);//digital 8 OC4C
	//sbi(DDRH,6);//digital 9
}
void getSinTable(uint16_t sinTableSize,uint8_t *pwmSin,uint16_t sineScale)
{
     358:	2f 92       	push	r2
     35a:	3f 92       	push	r3
     35c:	4f 92       	push	r4
     35e:	5f 92       	push	r5
     360:	6f 92       	push	r6
     362:	7f 92       	push	r7
     364:	8f 92       	push	r8
     366:	9f 92       	push	r9
     368:	af 92       	push	r10
     36a:	bf 92       	push	r11
     36c:	cf 92       	push	r12
     36e:	df 92       	push	r13
     370:	ef 92       	push	r14
     372:	ff 92       	push	r15
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	2a 97       	sbiw	r28, 0x0a	; 10
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	de bf       	out	0x3e, r29	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	cd bf       	out	0x3d, r28	; 61
     38c:	1b 01       	movw	r2, r22
			double wave1;
			double wave2;
			double wave3;
			double sub1;
			double radWave;
			for (int i = 0; i < SINE_TABLE_SZ; i++)
     38e:	c1 2c       	mov	r12, r1
     390:	d1 2c       	mov	r13, r1
			{
				double x = i * (2 * 3.14) / SINE_TABLE_SZ;
     392:	b6 01       	movw	r22, r12
     394:	0d 2c       	mov	r0, r13
     396:	00 0c       	add	r0, r0
     398:	88 0b       	sbc	r24, r24
     39a:	99 0b       	sbc	r25, r25
     39c:	0e 94 89 0a 	call	0x1512	; 0x1512 <__floatsisf>
     3a0:	23 ec       	ldi	r18, 0xC3	; 195
     3a2:	35 ef       	ldi	r19, 0xF5	; 245
     3a4:	48 ec       	ldi	r20, 0xC8	; 200
     3a6:	50 e4       	ldi	r21, 0x40	; 64
     3a8:	0e 94 8e 0b 	call	0x171c	; 0x171c <__mulsf3>
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	44 e3       	ldi	r20, 0x34	; 52
     3b2:	54 e4       	ldi	r21, 0x44	; 68
     3b4:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
     3b8:	2b 01       	movw	r4, r22
     3ba:	3c 01       	movw	r6, r24
				wave1 = 255 * sin(x)+255;
     3bc:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <sin>
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	4f e7       	ldi	r20, 0x7F	; 127
     3c6:	53 e4       	ldi	r21, 0x43	; 67
     3c8:	0e 94 8e 0b 	call	0x171c	; 0x171c <__mulsf3>
     3cc:	20 e0       	ldi	r18, 0x00	; 0
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	4f e7       	ldi	r20, 0x7F	; 127
     3d2:	53 e4       	ldi	r21, 0x43	; 67
     3d4:	84 d7       	rcall	.+3848   	; 0x12de <__addsf3>
     3d6:	4b 01       	movw	r8, r22
     3d8:	5c 01       	movw	r10, r24
				wave2 = 255 * sin(x-phase) + 255;
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	40 e7       	ldi	r20, 0x70	; 112
     3e0:	53 e4       	ldi	r21, 0x43	; 67
     3e2:	c3 01       	movw	r24, r6
     3e4:	b2 01       	movw	r22, r4
     3e6:	7a d7       	rcall	.+3828   	; 0x12dc <__subsf3>
     3e8:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <sin>
     3ec:	20 e0       	ldi	r18, 0x00	; 0
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	4f e7       	ldi	r20, 0x7F	; 127
     3f2:	53 e4       	ldi	r21, 0x43	; 67
     3f4:	0e 94 8e 0b 	call	0x171c	; 0x171c <__mulsf3>
     3f8:	20 e0       	ldi	r18, 0x00	; 0
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	4f e7       	ldi	r20, 0x7F	; 127
     3fe:	53 e4       	ldi	r21, 0x43	; 67
     400:	6e d7       	rcall	.+3804   	; 0x12de <__addsf3>
     402:	6b 83       	std	Y+3, r22	; 0x03
     404:	7c 83       	std	Y+4, r23	; 0x04
     406:	8d 83       	std	Y+5, r24	; 0x05
     408:	9e 83       	std	Y+6, r25	; 0x06
				wave3 = 255 * sin(x+phase) + 255;
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	40 e7       	ldi	r20, 0x70	; 112
     410:	53 e4       	ldi	r21, 0x43	; 67
     412:	c3 01       	movw	r24, r6
     414:	b2 01       	movw	r22, r4
     416:	63 d7       	rcall	.+3782   	; 0x12de <__addsf3>
     418:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <sin>
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	4f e7       	ldi	r20, 0x7F	; 127
     422:	53 e4       	ldi	r21, 0x43	; 67
     424:	0e 94 8e 0b 	call	0x171c	; 0x171c <__mulsf3>
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	4f e7       	ldi	r20, 0x7F	; 127
     42e:	53 e4       	ldi	r21, 0x43	; 67
     430:	56 d7       	rcall	.+3756   	; 0x12de <__addsf3>
				radWave = (min(wave1, wave2, wave3) + max(wave1, wave2, wave3)) / 2;
     432:	7b 01       	movw	r14, r22
     434:	8c 01       	movw	r16, r24
     436:	2b 81       	ldd	r18, Y+3	; 0x03
     438:	3c 81       	ldd	r19, Y+4	; 0x04
     43a:	4d 81       	ldd	r20, Y+5	; 0x05
     43c:	5e 81       	ldd	r21, Y+6	; 0x06
     43e:	c5 01       	movw	r24, r10
     440:	b4 01       	movw	r22, r8
     442:	aa de       	rcall	.-684    	; 0x198 <min>
     444:	6f 83       	std	Y+7, r22	; 0x07
     446:	78 87       	std	Y+8, r23	; 0x08
     448:	89 87       	std	Y+9, r24	; 0x09
     44a:	9a 87       	std	Y+10, r25	; 0x0a
     44c:	2b 81       	ldd	r18, Y+3	; 0x03
     44e:	3c 81       	ldd	r19, Y+4	; 0x04
     450:	4d 81       	ldd	r20, Y+5	; 0x05
     452:	5e 81       	ldd	r21, Y+6	; 0x06
     454:	c5 01       	movw	r24, r10
     456:	b4 01       	movw	r22, r8
     458:	0f df       	rcall	.-482    	; 0x278 <max>
     45a:	9b 01       	movw	r18, r22
				sub1 = radWave - wave1;
				pwmSin[i]=(int)(-1*sub1)/2+128;
     45c:	ac 01       	movw	r20, r24
     45e:	6f 81       	ldd	r22, Y+7	; 0x07
     460:	78 85       	ldd	r23, Y+8	; 0x08
     462:	89 85       	ldd	r24, Y+9	; 0x09
     464:	9a 85       	ldd	r25, Y+10	; 0x0a
     466:	3b d7       	rcall	.+3702   	; 0x12de <__addsf3>
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	40 e0       	ldi	r20, 0x00	; 0
     46e:	5f e3       	ldi	r21, 0x3F	; 63
     470:	0e 94 8e 0b 	call	0x171c	; 0x171c <__mulsf3>
     474:	a5 01       	movw	r20, r10
     476:	94 01       	movw	r18, r8
     478:	31 d7       	rcall	.+3682   	; 0x12dc <__subsf3>
     47a:	90 58       	subi	r25, 0x80	; 128
     47c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixsfsi>
     480:	9b 01       	movw	r18, r22
     482:	77 23       	and	r23, r23
     484:	14 f4       	brge	.+4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     486:	2f 5f       	subi	r18, 0xFF	; 255
     488:	3f 4f       	sbci	r19, 0xFF	; 255
     48a:	c9 01       	movw	r24, r18
     48c:	95 95       	asr	r25
     48e:	87 95       	ror	r24
     490:	80 58       	subi	r24, 0x80	; 128
     492:	f1 01       	movw	r30, r2
     494:	81 93       	st	Z+, r24
				uint16_t reg=pwmSin[i];
     496:	1f 01       	movw	r2, r30
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	9a 83       	std	Y+2, r25	; 0x02
				print16(&reg);
     49c:	89 83       	std	Y+1, r24	; 0x01
     49e:	ce 01       	movw	r24, r28
     4a0:	01 96       	adiw	r24, 0x01	; 1
     4a2:	50 d1       	rcall	.+672    	; 0x744 <print16>
				printf("\n");
     4a4:	8a e0       	ldi	r24, 0x0A	; 10
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <putchar>
			double wave1;
			double wave2;
			double wave3;
			double sub1;
			double radWave;
			for (int i = 0; i < SINE_TABLE_SZ; i++)
     4ac:	ff ef       	ldi	r31, 0xFF	; 255
     4ae:	cf 1a       	sub	r12, r31
     4b0:	df 0a       	sbc	r13, r31
     4b2:	80 ed       	ldi	r24, 0xD0	; 208
     4b4:	c8 16       	cp	r12, r24
     4b6:	82 e0       	ldi	r24, 0x02	; 2
     4b8:	d8 06       	cpc	r13, r24
     4ba:	09 f0       	breq	.+2      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4bc:	6a cf       	rjmp	.-300    	; 0x392 <getSinTable+0x3a>
			uint16_t reg=pwmSin[i];	
			print16(&reg);
			printf("\n");
		}
	#endif
}
     4be:	2a 96       	adiw	r28, 0x0a	; 10
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	cd bf       	out	0x3d, r28	; 61
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	1f 91       	pop	r17
     4d0:	0f 91       	pop	r16
     4d2:	ff 90       	pop	r15
     4d4:	ef 90       	pop	r14
     4d6:	df 90       	pop	r13
     4d8:	cf 90       	pop	r12
     4da:	bf 90       	pop	r11
     4dc:	af 90       	pop	r10
     4de:	9f 90       	pop	r9
     4e0:	8f 90       	pop	r8
     4e2:	7f 90       	pop	r7
     4e4:	6f 90       	pop	r6
     4e6:	5f 90       	pop	r5
     4e8:	4f 90       	pop	r4
     4ea:	3f 90       	pop	r3
     4ec:	2f 90       	pop	r2
     4ee:	08 95       	ret

000004f0 <uart_putchar>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     4f0:	cf 93       	push	r28
     4f2:	c8 2f       	mov	r28, r24
     4f4:	8a 30       	cpi	r24, 0x0A	; 10
     4f6:	11 f4       	brne	.+4      	; 0x4fc <uart_putchar+0xc>
     4f8:	8d e0       	ldi	r24, 0x0D	; 13
     4fa:	fa df       	rcall	.-12     	; 0x4f0 <uart_putchar>
     4fc:	e0 ec       	ldi	r30, 0xC0	; 192
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 81       	ld	r24, Z
     502:	85 ff       	sbrs	r24, 5
     504:	fd cf       	rjmp	.-6      	; 0x500 <uart_putchar+0x10>
     506:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <__vector_23>:
     512:	1f 92       	push	r1
     514:	0f 92       	push	r0
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	0f 92       	push	r0
     51a:	11 24       	eor	r1, r1
     51c:	2f 93       	push	r18
     51e:	3f 93       	push	r19
     520:	8f 93       	push	r24
     522:	9f 93       	push	r25
     524:	af 93       	push	r26
     526:	bf 93       	push	r27
     528:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <timer0_millis>
     52c:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <timer0_millis+0x1>
     530:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <timer0_millis+0x2>
     534:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <timer0_millis+0x3>
     538:	30 91 ce 02 	lds	r19, 0x02CE	; 0x8002ce <timer0_fract>
     53c:	23 e0       	ldi	r18, 0x03	; 3
     53e:	23 0f       	add	r18, r19
     540:	2d 37       	cpi	r18, 0x7D	; 125
     542:	20 f4       	brcc	.+8      	; 0x54c <__vector_23+0x3a>
     544:	01 96       	adiw	r24, 0x01	; 1
     546:	a1 1d       	adc	r26, r1
     548:	b1 1d       	adc	r27, r1
     54a:	05 c0       	rjmp	.+10     	; 0x556 <__vector_23+0x44>
     54c:	26 e8       	ldi	r18, 0x86	; 134
     54e:	23 0f       	add	r18, r19
     550:	02 96       	adiw	r24, 0x02	; 2
     552:	a1 1d       	adc	r26, r1
     554:	b1 1d       	adc	r27, r1
     556:	20 93 ce 02 	sts	0x02CE, r18	; 0x8002ce <timer0_fract>
     55a:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <timer0_millis>
     55e:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <timer0_millis+0x1>
     562:	a0 93 d1 02 	sts	0x02D1, r26	; 0x8002d1 <timer0_millis+0x2>
     566:	b0 93 d2 02 	sts	0x02D2, r27	; 0x8002d2 <timer0_millis+0x3>
     56a:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <timer0_overflow_count>
     56e:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <timer0_overflow_count+0x1>
     572:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <timer0_overflow_count+0x2>
     576:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <timer0_overflow_count+0x3>
     57a:	01 96       	adiw	r24, 0x01	; 1
     57c:	a1 1d       	adc	r26, r1
     57e:	b1 1d       	adc	r27, r1
     580:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <timer0_overflow_count>
     584:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <timer0_overflow_count+0x1>
     588:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <timer0_overflow_count+0x2>
     58c:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <timer0_overflow_count+0x3>
     590:	bf 91       	pop	r27
     592:	af 91       	pop	r26
     594:	9f 91       	pop	r25
     596:	8f 91       	pop	r24
     598:	3f 91       	pop	r19
     59a:	2f 91       	pop	r18
     59c:	0f 90       	pop	r0
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	0f 90       	pop	r0
     5a2:	1f 90       	pop	r1
     5a4:	18 95       	reti

000005a6 <micros>:
     5a6:	3f b7       	in	r19, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <timer0_overflow_count>
     5ae:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <timer0_overflow_count+0x1>
     5b2:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <timer0_overflow_count+0x2>
     5b6:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <timer0_overflow_count+0x3>
     5ba:	26 b5       	in	r18, 0x26	; 38
     5bc:	a8 9b       	sbis	0x15, 0	; 21
     5be:	05 c0       	rjmp	.+10     	; 0x5ca <micros+0x24>
     5c0:	2f 3f       	cpi	r18, 0xFF	; 255
     5c2:	19 f0       	breq	.+6      	; 0x5ca <micros+0x24>
     5c4:	01 96       	adiw	r24, 0x01	; 1
     5c6:	a1 1d       	adc	r26, r1
     5c8:	b1 1d       	adc	r27, r1
     5ca:	3f bf       	out	0x3f, r19	; 63
     5cc:	ba 2f       	mov	r27, r26
     5ce:	a9 2f       	mov	r26, r25
     5d0:	98 2f       	mov	r25, r24
     5d2:	88 27       	eor	r24, r24
     5d4:	82 0f       	add	r24, r18
     5d6:	91 1d       	adc	r25, r1
     5d8:	a1 1d       	adc	r26, r1
     5da:	b1 1d       	adc	r27, r1
     5dc:	bc 01       	movw	r22, r24
     5de:	cd 01       	movw	r24, r26
     5e0:	66 0f       	add	r22, r22
     5e2:	77 1f       	adc	r23, r23
     5e4:	88 1f       	adc	r24, r24
     5e6:	99 1f       	adc	r25, r25
     5e8:	66 0f       	add	r22, r22
     5ea:	77 1f       	adc	r23, r23
     5ec:	88 1f       	adc	r24, r24
     5ee:	99 1f       	adc	r25, r25
     5f0:	08 95       	ret

000005f2 <PWM_update>:
{
	PWM_update();
}
void PWM_update()//motor pwm update 
{
	U_PWM=pwmSin[U_step];
     5f2:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <__data_end>
     5f6:	f0 91 cd 02 	lds	r31, 0x02CD	; 0x8002cd <__data_end+0x1>
     5fa:	e7 51       	subi	r30, 0x17	; 23
     5fc:	fd 4f       	sbci	r31, 0xFD	; 253
     5fe:	80 81       	ld	r24, Z
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     606:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
	V_PWM=pwmSin[V_step];
     60a:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <V_step>
     60e:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <V_step+0x1>
     612:	e7 51       	subi	r30, 0x17	; 23
     614:	fd 4f       	sbci	r31, 0xFD	; 253
     616:	80 81       	ld	r24, Z
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     61e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
	W_PWM=pwmSin[W_step];
     622:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <W_step>
     626:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <W_step+0x1>
     62a:	e7 51       	subi	r30, 0x17	; 23
     62c:	fd 4f       	sbci	r31, 0xFD	; 253
     62e:	80 81       	ld	r24, Z
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
     636:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
	U_step=U_step+incr;
     63a:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <incr>
     63e:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <incr+0x1>
     642:	40 91 cc 02 	lds	r20, 0x02CC	; 0x8002cc <__data_end>
     646:	50 91 cd 02 	lds	r21, 0x02CD	; 0x8002cd <__data_end+0x1>
     64a:	46 0f       	add	r20, r22
     64c:	57 1f       	adc	r21, r23
     64e:	50 93 cd 02 	sts	0x02CD, r21	; 0x8002cd <__data_end+0x1>
     652:	40 93 cc 02 	sts	0x02CC, r20	; 0x8002cc <__data_end>
	V_step=V_step+incr;
     656:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <V_step>
     65a:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <V_step+0x1>
     65e:	26 0f       	add	r18, r22
     660:	37 1f       	adc	r19, r23
     662:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <V_step+0x1>
     666:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <V_step>
	W_step=W_step+incr;
     66a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <W_step>
     66e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <W_step+0x1>
     672:	86 0f       	add	r24, r22
     674:	97 1f       	adc	r25, r23
     676:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <W_step+0x1>
     67a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <W_step>
	if(U_step > SINE_TABLE_SZ)  
     67e:	41 3d       	cpi	r20, 0xD1	; 209
     680:	62 e0       	ldi	r22, 0x02	; 2
     682:	56 07       	cpc	r21, r22
     684:	2c f0       	brlt	.+10     	; 0x690 <PWM_update+0x9e>
		U_step = 0;
     686:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <__data_end+0x1>
     68a:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <__data_end>
     68e:	08 c0       	rjmp	.+16     	; 0x6a0 <PWM_update+0xae>
	if(U_step < 0)  
     690:	55 23       	and	r21, r21
     692:	34 f4       	brge	.+12     	; 0x6a0 <PWM_update+0xae>
		U_step = SINE_TABLE_SZ;
     694:	40 ed       	ldi	r20, 0xD0	; 208
     696:	52 e0       	ldi	r21, 0x02	; 2
     698:	50 93 cd 02 	sts	0x02CD, r21	; 0x8002cd <__data_end+0x1>
     69c:	40 93 cc 02 	sts	0x02CC, r20	; 0x8002cc <__data_end>
	
	if(V_step > SINE_TABLE_SZ)  
     6a0:	21 3d       	cpi	r18, 0xD1	; 209
     6a2:	42 e0       	ldi	r20, 0x02	; 2
     6a4:	34 07       	cpc	r19, r20
     6a6:	2c f0       	brlt	.+10     	; 0x6b2 <PWM_update+0xc0>
		V_step = 0;
     6a8:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <V_step+0x1>
     6ac:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <V_step>
     6b0:	08 c0       	rjmp	.+16     	; 0x6c2 <PWM_update+0xd0>
	if(V_step < 0)  
     6b2:	33 23       	and	r19, r19
     6b4:	34 f4       	brge	.+12     	; 0x6c2 <PWM_update+0xd0>
		V_step = SINE_TABLE_SZ;
     6b6:	20 ed       	ldi	r18, 0xD0	; 208
     6b8:	32 e0       	ldi	r19, 0x02	; 2
     6ba:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <V_step+0x1>
     6be:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <V_step>
	
	if(W_step > SINE_TABLE_SZ)  
     6c2:	81 3d       	cpi	r24, 0xD1	; 209
     6c4:	62 e0       	ldi	r22, 0x02	; 2
     6c6:	96 07       	cpc	r25, r22
     6c8:	2c f0       	brlt	.+10     	; 0x6d4 <PWM_update+0xe2>
		W_step = 0;
     6ca:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <W_step+0x1>
     6ce:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <W_step>
     6d2:	08 c0       	rjmp	.+16     	; 0x6e4 <PWM_update+0xf2>
	if(W_step < 0) 
     6d4:	99 23       	and	r25, r25
     6d6:	34 f4       	brge	.+12     	; 0x6e4 <PWM_update+0xf2>
		W_step = SINE_TABLE_SZ;
     6d8:	80 ed       	ldi	r24, 0xD0	; 208
     6da:	92 e0       	ldi	r25, 0x02	; 2
     6dc:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <W_step+0x1>
     6e0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <W_step>
	//_delay_us(100);
	OCR5A=pwm_delay;
     6e4:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <pwm_delay>
     6e8:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <pwm_delay+0x1>
     6ec:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     6f0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     6f4:	08 95       	ret

000006f6 <__vector_47>:
	SREG = oldSREG;

	return m;
}
ISR(TIMER5_COMPA_vect)//motor update interrupt routine
{
     6f6:	1f 92       	push	r1
     6f8:	0f 92       	push	r0
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	0f 92       	push	r0
     6fe:	11 24       	eor	r1, r1
     700:	0b b6       	in	r0, 0x3b	; 59
     702:	0f 92       	push	r0
     704:	2f 93       	push	r18
     706:	3f 93       	push	r19
     708:	4f 93       	push	r20
     70a:	5f 93       	push	r21
     70c:	6f 93       	push	r22
     70e:	7f 93       	push	r23
     710:	8f 93       	push	r24
     712:	9f 93       	push	r25
     714:	af 93       	push	r26
     716:	bf 93       	push	r27
     718:	ef 93       	push	r30
	PWM_update();
     71a:	ff 93       	push	r31
}
     71c:	6a df       	rcall	.-300    	; 0x5f2 <PWM_update>
     71e:	ff 91       	pop	r31
     720:	ef 91       	pop	r30
     722:	bf 91       	pop	r27
     724:	af 91       	pop	r26
     726:	9f 91       	pop	r25
     728:	8f 91       	pop	r24
     72a:	7f 91       	pop	r23
     72c:	6f 91       	pop	r22
     72e:	5f 91       	pop	r21
     730:	4f 91       	pop	r20
     732:	3f 91       	pop	r19
     734:	2f 91       	pop	r18
     736:	0f 90       	pop	r0
     738:	0b be       	out	0x3b, r0	; 59
     73a:	0f 90       	pop	r0
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	0f 90       	pop	r0
     740:	1f 90       	pop	r1
     742:	18 95       	reti

00000744 <print16>:
	OCR5A=pwm_delay;
}
void print16(int16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
     750:	2a 97       	sbiw	r28, 0x0a	; 10
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     75c:	4a e0       	ldi	r20, 0x0A	; 10
     75e:	8e 01       	movw	r16, r28
     760:	0f 5f       	subi	r16, 0xFF	; 255
     762:	1f 4f       	sbci	r17, 0xFF	; 255
     764:	b8 01       	movw	r22, r16
     766:	fc 01       	movw	r30, r24
     768:	80 81       	ld	r24, Z
     76a:	91 81       	ldd	r25, Z+1	; 0x01
     76c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     770:	1f 93       	push	r17
     772:	0f 93       	push	r16
     774:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <printf>
	//printf("\n");
}
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	2a 96       	adiw	r28, 0x0a	; 10
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	de bf       	out	0x3e, r29	; 62
     784:	0f be       	out	0x3f, r0	; 63
     786:	cd bf       	out	0x3d, r28	; 61
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	08 95       	ret

00000792 <print16ln>:

void print16ln(int16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	cd b7       	in	r28, 0x3d	; 61
     79c:	de b7       	in	r29, 0x3e	; 62
     79e:	2a 97       	sbiw	r28, 0x0a	; 10
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	f8 94       	cli
     7a4:	de bf       	out	0x3e, r29	; 62
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	cd bf       	out	0x3d, r28	; 61
     7aa:	4a e0       	ldi	r20, 0x0A	; 10
     7ac:	8e 01       	movw	r16, r28
     7ae:	0f 5f       	subi	r16, 0xFF	; 255
     7b0:	1f 4f       	sbci	r17, 0xFF	; 255
     7b2:	b8 01       	movw	r22, r16
     7b4:	fc 01       	movw	r30, r24
     7b6:	80 81       	ld	r24, Z
     7b8:	91 81       	ldd	r25, Z+1	; 0x01
     7ba:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     7be:	1f 93       	push	r17
     7c0:	0f 93       	push	r16
     7c2:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <printf>
	printf("\n");
     7c6:	8a e0       	ldi	r24, 0x0A	; 10
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <putchar>
}
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
     7d2:	2a 96       	adiw	r28, 0x0a	; 10
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	de bf       	out	0x3e, r29	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	cd bf       	out	0x3d, r28	; 61
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	08 95       	ret

000007e8 <main>:
//uint8_t pwmSin[] ={128,131,135,138,141,145,148,151,155,158,161,164,168,171,174,177,181,184,187,190,193,197,200,203,206,209,212,215,218,221,224,225,225,226,227,228,229,230,230,231,232,232,233,234,234,235,235,236,236,236,237,237,237,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,237,237,237,236,236,236,235,235,234,234,233,232,232,231,230,230,229,228,227,226,225,225,224,225,225,226,227,228,229,230,230,231,232,232,233,234,234,235,235,236,236,236,237,237,237,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,237,237,237,236,236,236,235,235,234,234,233,232,232,231,230,230,229,228,227,226,225,225,224,221,218,215,212,209,206,203,200,197,193,190,187,184,181,177,174,171,168,164,161,158,155,151,148,145,141,138,135,131,128,125,121,118,115,111,108,105,101,98,95,92,88,85,82,79,75,72,69,66,63,59,56,53,50,47,44,41,38,35,32,31,31,30,29,28,27,26,26,25,24,24,23,22,22,21,21,20,20,20,19,19,19,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,20,20,20,21,21,22,22,23,24,24,25,26,26,27,28,29,30,31,31,32,31,31,30,29,28,27,26,26,25,24,24,23,22,22,21,21,20,20,20,19,19,19,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,20,20,20,21,21,22,22,23,24,24,25,26,26,27,28,29,30,31,31,32,35,38,41,44,47,50,53,56,59,63,66,69,72,75,79,82,85,88,92,95,98,101,105,108,111,115,118,121,125,128};
//uint8_t pwmSin[] = {128, 132, 136, 140, 143, 147, 151, 155, 159, 162, 166, 170, 174, 178, 181, 185, 189, 192, 196, 200, 203, 207, 211, 214, 218, 221, 225, 228, 232, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 248, 249, 250, 250, 251, 252, 252, 253, 253, 253, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 253, 253, 253, 252, 252, 251, 250, 250, 249, 248, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 248, 249, 250, 250, 251, 252, 252, 253, 253, 253, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 253, 253, 253, 252, 252, 251, 250, 250, 249, 248, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 235, 232, 228, 225, 221, 218, 214, 211, 207, 203, 200, 196, 192, 189, 185, 181, 178, 174, 170, 166, 162, 159, 155, 151, 147, 143, 140, 136, 132, 128, 124, 120, 116, 113, 109, 105, 101, 97, 94, 90, 86, 82, 78, 75, 71, 67, 64, 60, 56, 53, 49, 45, 42, 38, 35, 31, 28, 24, 21, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 8, 7, 6, 6, 5, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 8, 7, 6, 6, 5, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 24, 28, 31, 35, 38, 42, 45, 49, 53, 56, 60, 64, 67, 71, 75, 78, 82, 86, 90, 94, 97, 101, 105, 109, 113, 116, 120, 124};

/*-----------------------------------start of main----------------------------------*/
int main(void)
{				
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
     7f0:	e2 97       	sbiw	r28, 0x32	; 50
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	cd bf       	out	0x3d, r28	; 61
		
	cli();
	init_gpio();
		#ifdef GYRO
			i2c_init();
     7fc:	f8 94       	cli
		#endif
	USART_Init(MY_UBRR);
     7fe:	c0 dc       	rcall	.-1664   	; 0x180 <init_gpio>
     800:	a9 d4       	rcall	.+2386   	; 0x1154 <i2c_init>
     802:	80 e1       	ldi	r24, 0x10	; 16
	uart_str = fdevopen(uart_putchar, NULL);	
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	57 d5       	rcall	.+2734   	; 0x12b6 <USART_Init>
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	88 e7       	ldi	r24, 0x78	; 120
     80e:	92 e0       	ldi	r25, 0x02	; 2
	setup_timer0();
	Enable_timer0_overflow_interrupt();//micros
     810:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <fdevopen>
	setup_timer4();//pwm
     814:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <uart_str+0x1>
	setup_timer5();
     818:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <uart_str>
	Enable_timer5_compare_interrupt();//motor
     81c:	8e d4       	rcall	.+2332   	; 0x113a <setup_timer0>
     81e:	94 d4       	rcall	.+2344   	; 0x1148 <Enable_timer0_overflow_interrupt>
	OCR5A=4000;
     820:	69 d4       	rcall	.+2258   	; 0x10f4 <setup_timer4>
     822:	7c d4       	rcall	.+2296   	; 0x111c <setup_timer5>
     824:	84 d4       	rcall	.+2312   	; 0x112e <Enable_timer5_compare_interrupt>
     826:	80 ea       	ldi	r24, 0xA0	; 160
     828:	9f e0       	ldi	r25, 0x0F	; 15
     82a:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
		double acc_total_vector=0;
		double angle_pitch_acc=0;
		double angle_roll_acc=0;
		bool set_gyro_angles=false;
			#ifdef CALIBERATED_DATA
				int32_t gyroX_calib_=0;
     82e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     832:	1d 86       	std	Y+13, r1	; 0x0d
				int32_t gyroY_calib_=0;
     834:	1e 86       	std	Y+14, r1	; 0x0e
     836:	1f 86       	std	Y+15, r1	; 0x0f
     838:	18 8a       	std	Y+16, r1	; 0x10
     83a:	19 8a       	std	Y+17, r1	; 0x11
				int32_t gyroZ_calib_=0;
     83c:	1a 8a       	std	Y+18, r1	; 0x12
     83e:	1b 8a       	std	Y+19, r1	; 0x13
     840:	1c 8a       	std	Y+20, r1	; 0x14
				int32_t accelY_calib_=0;
				int32_t accelZ_calib_=0;				
				//uint16_t gyroX_angle_calib=0; 
				uint16_t gyroY_angle_calib=0; 
				//uint16_t gyroZ_angle_calib=0; 				
				mpu6050_calibrate_gyro(&gyroX_calib_,&gyroY_calib_,&gyroZ_calib_);
     842:	1d 8a       	std	Y+21, r1	; 0x15
     844:	1e 8a       	std	Y+22, r1	; 0x16
     846:	1f 8a       	std	Y+23, r1	; 0x17
     848:	18 8e       	std	Y+24, r1	; 0x18
     84a:	ae 01       	movw	r20, r28
     84c:	4b 5e       	subi	r20, 0xEB	; 235
     84e:	5f 4f       	sbci	r21, 0xFF	; 255
     850:	be 01       	movw	r22, r28
     852:	6f 5e       	subi	r22, 0xEF	; 239
				int16_t gyroX_calib=gyroX_calib_;
     854:	7f 4f       	sbci	r23, 0xFF	; 255
     856:	ce 01       	movw	r24, r28
				int16_t gyroY_calib=gyroY_calib_;
     858:	0d 96       	adiw	r24, 0x0d	; 13
     85a:	a6 d2       	rcall	.+1356   	; 0xda8 <mpu6050_calibrate_gyro>
				int16_t gyroZ_calib=gyroZ_calib_;
     85c:	2d 84       	ldd	r2, Y+13	; 0x0d
     85e:	3e 84       	ldd	r3, Y+14	; 0x0e
				int16_t accelX_calib=accelX_calib_;
				int16_t accelY_calib=accelY_calib_;
				int16_t accelZ_calib=accelZ_calib_;				
				//mpu6050_calibrate_accel(&accelX_calib,&accelY_calib,&accelZ_calib);
			#endif
		mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV,7);
     860:	29 89       	ldd	r18, Y+17	; 0x11
     862:	3a 89       	ldd	r19, Y+18	; 0x12
     864:	38 ab       	std	Y+48, r19	; 0x30
		mpu6050_writeByte(MPU6050_RA_CONFIG,0x00);
     866:	2f a7       	std	Y+47, r18	; 0x2f
     868:	4d 89       	ldd	r20, Y+21	; 0x15
     86a:	5e 89       	ldd	r21, Y+22	; 0x16
		mpu6050_writeByte(MPU6050_RA_GYRO_CONFIG,0x08);//gyro sensitivity set to 500 o/s
     86c:	5a ab       	std	Y+50, r21	; 0x32
     86e:	49 ab       	std	Y+49, r20	; 0x31
     870:	67 e0       	ldi	r22, 0x07	; 7
		mpu6050_writeByte(MPU6050_RA_ACCEL_CONFIG,0x10);//accel sensitivity -/+ 8g
     872:	89 e1       	ldi	r24, 0x19	; 25
     874:	78 d3       	rcall	.+1776   	; 0xf66 <mpu6050_writeByte>
     876:	60 e0       	ldi	r22, 0x00	; 0
		mpu6050_writeByte(MPU6050_RA_PWR_MGMT_1,0x01);
     878:	8a e1       	ldi	r24, 0x1A	; 26
     87a:	75 d3       	rcall	.+1770   	; 0xf66 <mpu6050_writeByte>
     87c:	68 e0       	ldi	r22, 0x08	; 8
     87e:	8b e1       	ldi	r24, 0x1B	; 27
	#endif
	/*----------------------end mpu definition ----------------------*/
	
	/*----------------------------motor init-------------------------*/
	getSinTable(SINE_TABLE_SZ,pwmSin,sinScale);
     880:	72 d3       	rcall	.+1764   	; 0xf66 <mpu6050_writeByte>
     882:	60 e1       	ldi	r22, 0x10	; 16
     884:	8c e1       	ldi	r24, 0x1C	; 28
     886:	6f d3       	rcall	.+1758   	; 0xf66 <mpu6050_writeByte>
     888:	61 e0       	ldi	r22, 0x01	; 1
     88a:	8b e6       	ldi	r24, 0x6B	; 107
     88c:	6c d3       	rcall	.+1752   	; 0xf66 <mpu6050_writeByte>
	printf("U_step_predefine="); print16ln(&U_step);
     88e:	4f e7       	ldi	r20, 0x7F	; 127
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	69 ee       	ldi	r22, 0xE9	; 233
     894:	72 e0       	ldi	r23, 0x02	; 2
     896:	80 ed       	ldi	r24, 0xD0	; 208
     898:	92 e0       	ldi	r25, 0x02	; 2
     89a:	5e dd       	rcall	.-1348   	; 0x358 <getSinTable>
     89c:	80 e1       	ldi	r24, 0x10	; 16
     89e:	92 e0       	ldi	r25, 0x02	; 2
	printf("  V_step_predefine="); print16ln(&V_step);
     8a0:	9f 93       	push	r25
     8a2:	8f 93       	push	r24
     8a4:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <printf>
     8a8:	8c ec       	ldi	r24, 0xCC	; 204
     8aa:	92 e0       	ldi	r25, 0x02	; 2
     8ac:	72 df       	rcall	.-284    	; 0x792 <print16ln>
     8ae:	82 e2       	ldi	r24, 0x22	; 34
	printf("  W_step_predefine="); print16ln(&W_step);   
     8b0:	92 e0       	ldi	r25, 0x02	; 2
     8b2:	9f 93       	push	r25
     8b4:	8f 93       	push	r24
     8b6:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <printf>
     8ba:	88 e0       	ldi	r24, 0x08	; 8
     8bc:	92 e0       	ldi	r25, 0x02	; 2
     8be:	69 df       	rcall	.-302    	; 0x792 <print16ln>
     8c0:	86 e3       	ldi	r24, 0x36	; 54
     8c2:	92 e0       	ldi	r25, 0x02	; 2
	USART_Transmit(0xfe); 
     8c4:	9f 93       	push	r25
     8c6:	8f 93       	push	r24
     8c8:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <printf>
	sei();
     8cc:	86 e0       	ldi	r24, 0x06	; 6
     8ce:	92 e0       	ldi	r25, 0x02	; 2
     8d0:	60 df       	rcall	.-320    	; 0x792 <print16ln>
     8d2:	8e ef       	ldi	r24, 0xFE	; 254
     8d4:	fb d4       	rcall	.+2550   	; 0x12cc <USART_Transmit>
     8d6:	78 94       	sei
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		double angle_pitch=0;
		double angle_roll=0;
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
		int16_t gyro_y;
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		double angle_pitch=0;
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	1f 8e       	std	Y+31, r1	; 0x1f
	USART_Transmit(0xfe); 
	sei();
    while (1) /*---------------------------while(1)---------------------------------*/
    {
		#ifdef GYRO
    		mpu6050_getRawData(&accel_x,&accel_y,&accel_z,&gyro_x,&gyro_y,&gyro_z);//15us to do
     8e6:	18 a2       	std	Y+32, r1	; 0x20
     8e8:	19 a2       	std	Y+33, r1	; 0x21
     8ea:	1a a2       	std	Y+34, r1	; 0x22
     8ec:	1b a2       	std	Y+35, r1	; 0x23
     8ee:	1c a2       	std	Y+36, r1	; 0x24
     8f0:	1d a2       	std	Y+37, r1	; 0x25
     8f2:	1e a2       	std	Y+38, r1	; 0x26
     8f4:	ce 01       	movw	r24, r28
     8f6:	05 96       	adiw	r24, 0x05	; 5
     8f8:	7c 01       	movw	r14, r24
     8fa:	8e 01       	movw	r16, r28
     8fc:	0d 5f       	subi	r16, 0xFD	; 253
     8fe:	1f 4f       	sbci	r17, 0xFF	; 255
     900:	9e 01       	movw	r18, r28
     902:	2f 5f       	subi	r18, 0xFF	; 255
     904:	3f 4f       	sbci	r19, 0xFF	; 255
     906:	ae 01       	movw	r20, r28
     908:	45 5f       	subi	r20, 0xF5	; 245
		#ifdef GYRO
			#ifdef CALIBERATED_DATA
				accX;
				accY;
				accZ;
				grX;
     90a:	5f 4f       	sbci	r21, 0xFF	; 255
     90c:	be 01       	movw	r22, r28
     90e:	67 5f       	subi	r22, 0xF7	; 247
     910:	7f 4f       	sbci	r23, 0xFF	; 255
     912:	02 96       	adiw	r24, 0x02	; 2
				grY;
     914:	84 d3       	rcall	.+1800   	; 0x101e <mpu6050_getRawData>
     916:	89 81       	ldd	r24, Y+1	; 0x01
     918:	9a 81       	ldd	r25, Y+2	; 0x02
     91a:	82 19       	sub	r24, r2
     91c:	93 09       	sbc	r25, r3
     91e:	9a 83       	std	Y+2, r25	; 0x02
				grZ;
     920:	89 83       	std	Y+1, r24	; 0x01
     922:	8b 81       	ldd	r24, Y+3	; 0x03
     924:	9c 81       	ldd	r25, Y+4	; 0x04
     926:	2f a5       	ldd	r18, Y+47	; 0x2f
     928:	38 a9       	ldd	r19, Y+48	; 0x30
     92a:	82 1b       	sub	r24, r18
     92c:	93 0b       	sbc	r25, r19
			printf("  ");
			printf("\n");
			/*--------end------*/			
		#else
			
			double dt = (double)((micros() - timer1));
     92e:	9c 83       	std	Y+4, r25	; 0x04
     930:	8b 83       	std	Y+3, r24	; 0x03
     932:	8d 81       	ldd	r24, Y+5	; 0x05
     934:	9e 81       	ldd	r25, Y+6	; 0x06
     936:	49 a9       	ldd	r20, Y+49	; 0x31
     938:	5a a9       	ldd	r21, Y+50	; 0x32
     93a:	84 1b       	sub	r24, r20
     93c:	95 0b       	sbc	r25, r21
     93e:	9e 83       	std	Y+6, r25	; 0x06
			timer1=micros();
     940:	8d 83       	std	Y+5, r24	; 0x05
     942:	31 de       	rcall	.-926    	; 0x5a6 <micros>
     944:	64 19       	sub	r22, r4
     946:	75 09       	sbc	r23, r5
			//double hz=1000000/dt;
			double pop=1/(65.5*1000000/dt);
     948:	86 09       	sbc	r24, r6
     94a:	97 09       	sbc	r25, r7
     94c:	e0 d5       	rcall	.+3008   	; 0x150e <__floatunsisf>
     94e:	6b 01       	movw	r12, r22
     950:	7c 01       	movw	r14, r24
     952:	29 de       	rcall	.-942    	; 0x5a6 <micros>
     954:	2b 01       	movw	r4, r22
     956:	3c 01       	movw	r6, r24
     958:	a7 01       	movw	r20, r14
     95a:	96 01       	movw	r18, r12
     95c:	68 ed       	ldi	r22, 0xD8	; 216
     95e:	7c ed       	ldi	r23, 0xDC	; 220
     960:	89 e7       	ldi	r24, 0x79	; 121
     962:	9c e4       	ldi	r25, 0x4C	; 76
     964:	3b d5       	rcall	.+2678   	; 0x13dc <__divsf3>
			//if(loop_bool)
			//{
			//	gyroYrate-=tpel;
			//	loop_bool=false;
			//}
			if (!loop_bool)
     966:	9b 01       	movw	r18, r22
     968:	ac 01       	movw	r20, r24
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	80 e8       	ldi	r24, 0x80	; 128
     970:	9f e3       	ldi	r25, 0x3F	; 63
			{
				angle_pitch += gyroXrate; //Calculate the traveled pitch angle and add this to the angle_pitch variable
     972:	34 d5       	rcall	.+2664   	; 0x13dc <__divsf3>
     974:	6b 01       	movw	r12, r22
     976:	7c 01       	movw	r14, r24
     978:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <loop_bool>
     97c:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <loop_bool+0x1>
     980:	89 2b       	or	r24, r25
     982:	59 f5       	brne	.+86     	; 0x9da <main+0x1f2>
     984:	69 81       	ldd	r22, Y+1	; 0x01
     986:	7a 81       	ldd	r23, Y+2	; 0x02
     988:	07 2e       	mov	r0, r23
     98a:	00 0c       	add	r0, r0
     98c:	88 0b       	sbc	r24, r24
     98e:	99 0b       	sbc	r25, r25
     990:	c0 d5       	rcall	.+2944   	; 0x1512 <__floatsisf>
     992:	a7 01       	movw	r20, r14
     994:	96 01       	movw	r18, r12
     996:	c2 d6       	rcall	.+3460   	; 0x171c <__mulsf3>
     998:	9b 01       	movw	r18, r22
     99a:	ac 01       	movw	r20, r24
				angle_roll += gyroYrate;  //Calculate the traveled roll angle and add this to the angle_roll variable			
     99c:	6b a1       	ldd	r22, Y+35	; 0x23
     99e:	7c a1       	ldd	r23, Y+36	; 0x24
     9a0:	8d a1       	ldd	r24, Y+37	; 0x25
     9a2:	9e a1       	ldd	r25, Y+38	; 0x26
     9a4:	9c d4       	rcall	.+2360   	; 0x12de <__addsf3>
     9a6:	6b a3       	std	Y+35, r22	; 0x23
     9a8:	7c a3       	std	Y+36, r23	; 0x24
     9aa:	8d a3       	std	Y+37, r24	; 0x25
     9ac:	9e a3       	std	Y+38, r25	; 0x26
     9ae:	6b 81       	ldd	r22, Y+3	; 0x03
     9b0:	7c 81       	ldd	r23, Y+4	; 0x04
     9b2:	07 2e       	mov	r0, r23
     9b4:	00 0c       	add	r0, r0
     9b6:	88 0b       	sbc	r24, r24
     9b8:	99 0b       	sbc	r25, r25
     9ba:	ab d5       	rcall	.+2902   	; 0x1512 <__floatsisf>
     9bc:	a7 01       	movw	r20, r14
     9be:	96 01       	movw	r18, r12
     9c0:	ad d6       	rcall	.+3418   	; 0x171c <__mulsf3>
     9c2:	9b 01       	movw	r18, r22
     9c4:	ac 01       	movw	r20, r24
			}
			else
			{
				loop_bool=false;
     9c6:	6f 8d       	ldd	r22, Y+31	; 0x1f
     9c8:	78 a1       	ldd	r23, Y+32	; 0x20
     9ca:	89 a1       	ldd	r24, Y+33	; 0x21
			}					
					//0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
			pop*=(3.142/180);	
			angle_pitch += angle_roll * sin(gyro_z * pop);               //If the IMU has yawed transfer the roll angle to the pitch angel
     9cc:	9a a1       	ldd	r25, Y+34	; 0x22
     9ce:	87 d4       	rcall	.+2318   	; 0x12de <__addsf3>
     9d0:	6f 8f       	std	Y+31, r22	; 0x1f
     9d2:	78 a3       	std	Y+32, r23	; 0x20
     9d4:	89 a3       	std	Y+33, r24	; 0x21
     9d6:	9a a3       	std	Y+34, r25	; 0x22
     9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <main+0x1fa>
     9da:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <loop_bool+0x1>
     9de:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <loop_bool>
     9e2:	6d 81       	ldd	r22, Y+5	; 0x05
     9e4:	7e 81       	ldd	r23, Y+6	; 0x06
     9e6:	07 2e       	mov	r0, r23
     9e8:	00 0c       	add	r0, r0
     9ea:	88 0b       	sbc	r24, r24
     9ec:	99 0b       	sbc	r25, r25
     9ee:	91 d5       	rcall	.+2850   	; 0x1512 <__floatsisf>
     9f0:	4b 01       	movw	r8, r22
     9f2:	5c 01       	movw	r10, r24
     9f4:	24 ef       	ldi	r18, 0xF4	; 244
     9f6:	3e ef       	ldi	r19, 0xFE	; 254
     9f8:	4e e8       	ldi	r20, 0x8E	; 142
     9fa:	5c e3       	ldi	r21, 0x3C	; 60
     9fc:	c7 01       	movw	r24, r14
     9fe:	b6 01       	movw	r22, r12
     a00:	8d d6       	rcall	.+3354   	; 0x171c <__mulsf3>
     a02:	9b 01       	movw	r18, r22
     a04:	ac 01       	movw	r20, r24
     a06:	c5 01       	movw	r24, r10
     a08:	b4 01       	movw	r22, r8
     a0a:	88 d6       	rcall	.+3344   	; 0x171c <__mulsf3>
     a0c:	ea d6       	rcall	.+3540   	; 0x17e2 <sin>
     a0e:	6b 01       	movw	r12, r22
     a10:	7c 01       	movw	r14, r24
     a12:	9b 01       	movw	r18, r22
     a14:	ac 01       	movw	r20, r24
     a16:	6f 8d       	ldd	r22, Y+31	; 0x1f
     a18:	78 a1       	ldd	r23, Y+32	; 0x20
     a1a:	89 a1       	ldd	r24, Y+33	; 0x21
     a1c:	9a a1       	ldd	r25, Y+34	; 0x22
     a1e:	7e d6       	rcall	.+3324   	; 0x171c <__mulsf3>
			angle_roll -= angle_pitch * sin(gyro_z * pop);               //If the IMU has yawed transfer the pitch angle to the roll angel
     a20:	9b 01       	movw	r18, r22
     a22:	ac 01       	movw	r20, r24
     a24:	6b a1       	ldd	r22, Y+35	; 0x23
     a26:	7c a1       	ldd	r23, Y+36	; 0x24
     a28:	8d a1       	ldd	r24, Y+37	; 0x25
     a2a:	9e a1       	ldd	r25, Y+38	; 0x26
     a2c:	58 d4       	rcall	.+2224   	; 0x12de <__addsf3>
     a2e:	6b a3       	std	Y+35, r22	; 0x23
     a30:	7c a3       	std	Y+36, r23	; 0x24
     a32:	8d a3       	std	Y+37, r24	; 0x25
     a34:	9e a3       	std	Y+38, r25	; 0x26
     a36:	9b 01       	movw	r18, r22
     a38:	ac 01       	movw	r20, r24
     a3a:	c7 01       	movw	r24, r14
     a3c:	b6 01       	movw	r22, r12
			
			double temporar_accel_x=accel_x/100;
     a3e:	6e d6       	rcall	.+3292   	; 0x171c <__mulsf3>
     a40:	9b 01       	movw	r18, r22
     a42:	ac 01       	movw	r20, r24
     a44:	6f 8d       	ldd	r22, Y+31	; 0x1f
     a46:	78 a1       	ldd	r23, Y+32	; 0x20
     a48:	89 a1       	ldd	r24, Y+33	; 0x21
     a4a:	9a a1       	ldd	r25, Y+34	; 0x22
     a4c:	47 d4       	rcall	.+2190   	; 0x12dc <__subsf3>
     a4e:	6f 8f       	std	Y+31, r22	; 0x1f
     a50:	78 a3       	std	Y+32, r23	; 0x20
     a52:	89 a3       	std	Y+33, r24	; 0x21
     a54:	9a a3       	std	Y+34, r25	; 0x22
     a56:	0f 81       	ldd	r16, Y+7	; 0x07
     a58:	18 85       	ldd	r17, Y+8	; 0x08
			double temporar_accel_y=accel_y/100;
     a5a:	c8 01       	movw	r24, r16
     a5c:	64 e6       	ldi	r22, 0x64	; 100
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	56 d7       	rcall	.+3756   	; 0x190e <__divmodhi4>
     a62:	07 2e       	mov	r0, r23
     a64:	00 0c       	add	r0, r0
     a66:	88 0b       	sbc	r24, r24
     a68:	99 0b       	sbc	r25, r25
     a6a:	53 d5       	rcall	.+2726   	; 0x1512 <__floatsisf>
     a6c:	4b 01       	movw	r8, r22
     a6e:	5c 01       	movw	r10, r24
     a70:	89 85       	ldd	r24, Y+9	; 0x09
     a72:	9a 85       	ldd	r25, Y+10	; 0x0a
     a74:	64 e6       	ldi	r22, 0x64	; 100
			double temporar_accel_z=accel_z/100;
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	4a d7       	rcall	.+3732   	; 0x190e <__divmodhi4>
     a7a:	07 2e       	mov	r0, r23
     a7c:	00 0c       	add	r0, r0
     a7e:	88 0b       	sbc	r24, r24
     a80:	99 0b       	sbc	r25, r25
     a82:	47 d5       	rcall	.+2702   	; 0x1512 <__floatsisf>
     a84:	6f a3       	std	Y+39, r22	; 0x27
     a86:	78 a7       	std	Y+40, r23	; 0x28
     a88:	89 a7       	std	Y+41, r24	; 0x29
     a8a:	9a a7       	std	Y+42, r25	; 0x2a
     a8c:	8b 85       	ldd	r24, Y+11	; 0x0b
			
			acc_total_vector = sqrt((temporar_accel_x*temporar_accel_x)+(temporar_accel_y*temporar_accel_y)+(temporar_accel_z*temporar_accel_z));  //Calculate the total accelerometer vector
     a8e:	9c 85       	ldd	r25, Y+12	; 0x0c
     a90:	64 e6       	ldi	r22, 0x64	; 100
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	3c d7       	rcall	.+3704   	; 0x190e <__divmodhi4>
     a96:	07 2e       	mov	r0, r23
     a98:	00 0c       	add	r0, r0
     a9a:	88 0b       	sbc	r24, r24
     a9c:	99 0b       	sbc	r25, r25
     a9e:	39 d5       	rcall	.+2674   	; 0x1512 <__floatsisf>
     aa0:	6b 01       	movw	r12, r22
     aa2:	7c 01       	movw	r14, r24
     aa4:	a5 01       	movw	r20, r10
     aa6:	94 01       	movw	r18, r8
     aa8:	c5 01       	movw	r24, r10
     aaa:	b4 01       	movw	r22, r8
     aac:	37 d6       	rcall	.+3182   	; 0x171c <__mulsf3>
     aae:	6b a7       	std	Y+43, r22	; 0x2b
     ab0:	7c a7       	std	Y+44, r23	; 0x2c
     ab2:	8d a7       	std	Y+45, r24	; 0x2d
     ab4:	9e a7       	std	Y+46, r25	; 0x2e
     ab6:	2f a1       	ldd	r18, Y+39	; 0x27
     ab8:	38 a5       	ldd	r19, Y+40	; 0x28
     aba:	49 a5       	ldd	r20, Y+41	; 0x29
     abc:	5a a5       	ldd	r21, Y+42	; 0x2a
     abe:	ca 01       	movw	r24, r20
     ac0:	b9 01       	movw	r22, r18
     ac2:	2c d6       	rcall	.+3160   	; 0x171c <__mulsf3>
     ac4:	9b 01       	movw	r18, r22
     ac6:	ac 01       	movw	r20, r24
     ac8:	6b a5       	ldd	r22, Y+43	; 0x2b
     aca:	7c a5       	ldd	r23, Y+44	; 0x2c
     acc:	8d a5       	ldd	r24, Y+45	; 0x2d
     ace:	9e a5       	ldd	r25, Y+46	; 0x2e
     ad0:	06 d4       	rcall	.+2060   	; 0x12de <__addsf3>
     ad2:	6b a7       	std	Y+43, r22	; 0x2b
     ad4:	7c a7       	std	Y+44, r23	; 0x2c
     ad6:	8d a7       	std	Y+45, r24	; 0x2d
     ad8:	9e a7       	std	Y+46, r25	; 0x2e
     ada:	a5 01       	movw	r20, r10
     adc:	94 01       	movw	r18, r8
     ade:	c5 01       	movw	r24, r10
     ae0:	b4 01       	movw	r22, r8
     ae2:	1c d6       	rcall	.+3128   	; 0x171c <__mulsf3>
     ae4:	4b 01       	movw	r8, r22
     ae6:	5c 01       	movw	r10, r24
     ae8:	2f a1       	ldd	r18, Y+39	; 0x27
     aea:	38 a5       	ldd	r19, Y+40	; 0x28
     aec:	49 a5       	ldd	r20, Y+41	; 0x29
     aee:	5a a5       	ldd	r21, Y+42	; 0x2a
     af0:	ca 01       	movw	r24, r20
     af2:	b9 01       	movw	r22, r18
     af4:	13 d6       	rcall	.+3110   	; 0x171c <__mulsf3>
     af6:	9b 01       	movw	r18, r22
     af8:	ac 01       	movw	r20, r24
     afa:	c5 01       	movw	r24, r10
					//57.296 = 1 / (3.142 / 180) The Arduino asin function is in radians
			acc_total_vector*=100;
		    angle_pitch_acc = asin((double)accel_y/acc_total_vector)* 57.296;       //Calculate the pitch angle
			angle_roll_acc = asin((double)accel_x/acc_total_vector)* -57.296;       //Calculate the roll angle
     afc:	b4 01       	movw	r22, r8
     afe:	ef d3       	rcall	.+2014   	; 0x12de <__addsf3>
     b00:	4b 01       	movw	r8, r22
     b02:	5c 01       	movw	r10, r24
     b04:	a7 01       	movw	r20, r14
     b06:	96 01       	movw	r18, r12
     b08:	c7 01       	movw	r24, r14
     b0a:	b6 01       	movw	r22, r12
     b0c:	07 d6       	rcall	.+3086   	; 0x171c <__mulsf3>
     b0e:	9b 01       	movw	r18, r22
     b10:	ac 01       	movw	r20, r24
     b12:	c5 01       	movw	r24, r10
     b14:	b4 01       	movw	r22, r8
     b16:	e3 d3       	rcall	.+1990   	; 0x12de <__addsf3>
     b18:	6e d6       	rcall	.+3292   	; 0x17f6 <sqrt>
     b1a:	6b 01       	movw	r12, r22
     b1c:	7c 01       	movw	r14, r24
     b1e:	b8 01       	movw	r22, r16
     b20:	11 0f       	add	r17, r17
     b22:	88 0b       	sbc	r24, r24
     b24:	99 0b       	sbc	r25, r25
     b26:	f5 d4       	rcall	.+2538   	; 0x1512 <__floatsisf>
     b28:	4b 01       	movw	r8, r22
					
			uint16_t reg=angle_pitch;
     b2a:	5c 01       	movw	r10, r24
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	48 ec       	ldi	r20, 0xC8	; 200
     b32:	52 e4       	ldi	r21, 0x42	; 66
     b34:	c7 01       	movw	r24, r14
     b36:	b6 01       	movw	r22, r12
			printf(" ");
     b38:	f1 d5       	rcall	.+3042   	; 0x171c <__mulsf3>
     b3a:	9b 01       	movw	r18, r22
     b3c:	ac 01       	movw	r20, r24
			printf("gyroX_angle= ");
     b3e:	c5 01       	movw	r24, r10
     b40:	b4 01       	movw	r22, r8
     b42:	4c d4       	rcall	.+2200   	; 0x13dc <__divsf3>
			print16(&reg);
     b44:	30 d4       	rcall	.+2144   	; 0x13a6 <asin>
     b46:	6b 01       	movw	r12, r22
     b48:	7c 01       	movw	r14, r24
			reg=angle_roll;
     b4a:	6b a1       	ldd	r22, Y+35	; 0x23
     b4c:	7c a1       	ldd	r23, Y+36	; 0x24
     b4e:	8d a1       	ldd	r24, Y+37	; 0x25
     b50:	9e a1       	ldd	r25, Y+38	; 0x26
     b52:	b1 d4       	rcall	.+2402   	; 0x14b6 <__fixunssfsi>
     b54:	7e 8f       	std	Y+30, r23	; 0x1e
     b56:	6d 8f       	std	Y+29, r22	; 0x1d
			printf(" ");
     b58:	80 e2       	ldi	r24, 0x20	; 32
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	bd d7       	rcall	.+3962   	; 0x1ad8 <putchar>
			printf("gyroY_angle= ");
     b5e:	8a e4       	ldi	r24, 0x4A	; 74
     b60:	92 e0       	ldi	r25, 0x02	; 2
     b62:	9f 93       	push	r25
     b64:	8f 93       	push	r24
     b66:	a5 d7       	rcall	.+3914   	; 0x1ab2 <printf>
     b68:	ce 01       	movw	r24, r28
			print16(&reg);
     b6a:	4d 96       	adiw	r24, 0x1d	; 29
     b6c:	eb dd       	rcall	.-1066   	; 0x744 <print16>
     b6e:	6f 8d       	ldd	r22, Y+31	; 0x1f
     b70:	78 a1       	ldd	r23, Y+32	; 0x20
			
			double xff=angle_roll_acc;
			double final_angleY=(angle_roll*0.996)+(xff*0.004);
     b72:	89 a1       	ldd	r24, Y+33	; 0x21
     b74:	9a a1       	ldd	r25, Y+34	; 0x22
     b76:	9f d4       	rcall	.+2366   	; 0x14b6 <__fixunssfsi>
     b78:	7e 8f       	std	Y+30, r23	; 0x1e
     b7a:	6d 8f       	std	Y+29, r22	; 0x1d
     b7c:	80 e2       	ldi	r24, 0x20	; 32
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	ab d7       	rcall	.+3926   	; 0x1ad8 <putchar>
     b82:	48 e5       	ldi	r20, 0x58	; 88
     b84:	52 e0       	ldi	r21, 0x02	; 2
     b86:	5f 93       	push	r21
     b88:	4f 93       	push	r20
     b8a:	93 d7       	rcall	.+3878   	; 0x1ab2 <printf>
     b8c:	ce 01       	movw	r24, r28
     b8e:	4d 96       	adiw	r24, 0x1d	; 29
     b90:	d9 dd       	rcall	.-1102   	; 0x744 <print16>
     b92:	2b e1       	ldi	r18, 0x1B	; 27
     b94:	3f e2       	ldi	r19, 0x2F	; 47
     b96:	45 e6       	ldi	r20, 0x65	; 101
     b98:	52 ec       	ldi	r21, 0xC2	; 194
     b9a:	c7 01       	movw	r24, r14
     b9c:	b6 01       	movw	r22, r12
     b9e:	be d5       	rcall	.+2940   	; 0x171c <__mulsf3>
     ba0:	2f e6       	ldi	r18, 0x6F	; 111
     ba2:	32 e1       	ldi	r19, 0x12	; 18
     ba4:	43 e8       	ldi	r20, 0x83	; 131
     ba6:	5b e3       	ldi	r21, 0x3B	; 59
     ba8:	b9 d5       	rcall	.+2930   	; 0x171c <__mulsf3>
     baa:	6b 01       	movw	r12, r22
     bac:	7c 01       	movw	r14, r24
     bae:	2b ed       	ldi	r18, 0xDB	; 219
     bb0:	39 ef       	ldi	r19, 0xF9	; 249
     bb2:	4e e7       	ldi	r20, 0x7E	; 126
			reg=final_angleY;
     bb4:	5f e3       	ldi	r21, 0x3F	; 63
     bb6:	6f 8d       	ldd	r22, Y+31	; 0x1f
			printf(" ");	
     bb8:	78 a1       	ldd	r23, Y+32	; 0x20
     bba:	89 a1       	ldd	r24, Y+33	; 0x21
     bbc:	9a a1       	ldd	r25, Y+34	; 0x22
			printf("final_angleY= ");
     bbe:	ae d5       	rcall	.+2908   	; 0x171c <__mulsf3>
     bc0:	9b 01       	movw	r18, r22
     bc2:	ac 01       	movw	r20, r24
     bc4:	c7 01       	movw	r24, r14
     bc6:	b6 01       	movw	r22, r12
     bc8:	8a d3       	rcall	.+1812   	; 0x12de <__addsf3>
			print16(&reg);
     bca:	6b 01       	movw	r12, r22
     bcc:	7c 01       	movw	r14, r24
     bce:	73 d4       	rcall	.+2278   	; 0x14b6 <__fixunssfsi>
						
			#ifdef DRV8313
				uint16_t reg_print=final_angleY;
				int absoulute_y=abs(final_angleY);
				uint16_t learing_rate=5;				
				uint16_t local_motor_delay=(32735-(absoulute_y*learing_rate));
     bd0:	7e 8f       	std	Y+30, r23	; 0x1e
     bd2:	6d 8f       	std	Y+29, r22	; 0x1d
     bd4:	80 e2       	ldi	r24, 0x20	; 32
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	7f d7       	rcall	.+3838   	; 0x1ad8 <putchar>
     bda:	26 e6       	ldi	r18, 0x66	; 102
     bdc:	32 e0       	ldi	r19, 0x02	; 2
     bde:	3f 93       	push	r19
     be0:	2f 93       	push	r18
     be2:	67 d7       	rcall	.+3790   	; 0x1ab2 <printf>
     be4:	ce 01       	movw	r24, r28
     be6:	4d 96       	adiw	r24, 0x1d	; 29
     be8:	ad dd       	rcall	.-1190   	; 0x744 <print16>
     bea:	c7 01       	movw	r24, r14
     bec:	b6 01       	movw	r22, r12
     bee:	5e d4       	rcall	.+2236   	; 0x14ac <__fixsfsi>
     bf0:	ab 01       	movw	r20, r22
     bf2:	77 23       	and	r23, r23
     bf4:	24 f4       	brge	.+8      	; 0xbfe <main+0x416>
     bf6:	44 27       	eor	r20, r20
     bf8:	55 27       	eor	r21, r21
     bfa:	46 1b       	sub	r20, r22
				if (local_motor_delay>2000)
     bfc:	57 0b       	sbc	r21, r23
     bfe:	9a 01       	movw	r18, r20
     c00:	22 0f       	add	r18, r18
     c02:	33 1f       	adc	r19, r19
     c04:	22 0f       	add	r18, r18
     c06:	33 1f       	adc	r19, r19
     c08:	c9 01       	movw	r24, r18
     c0a:	84 0f       	add	r24, r20
     c0c:	95 1f       	adc	r25, r21
				{
					pwm_delay=local_motor_delay;
     c0e:	2f ed       	ldi	r18, 0xDF	; 223
     c10:	3f e7       	ldi	r19, 0x7F	; 127
     c12:	a9 01       	movw	r20, r18
     c14:	48 1b       	sub	r20, r24
				}
				uint16_t reg_ = local_motor_delay;
     c16:	59 0b       	sbc	r21, r25
     c18:	ca 01       	movw	r24, r20
				printf("  ");
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
				printf("ocr= ");
     c24:	0f 90       	pop	r0
     c26:	81 3d       	cpi	r24, 0xD1	; 209
     c28:	57 e0       	ldi	r21, 0x07	; 7
     c2a:	95 07       	cpc	r25, r21
     c2c:	20 f0       	brcs	.+8      	; 0xc36 <main+0x44e>
     c2e:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <pwm_delay+0x1>
				print16(&reg_);
     c32:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <pwm_delay>
				if (final_angleY>=-0.8 && final_angleY<=0.8  || final_angleY >90)
     c36:	9c 8f       	std	Y+28, r25	; 0x1c
     c38:	8b 8f       	std	Y+27, r24	; 0x1b
     c3a:	85 e7       	ldi	r24, 0x75	; 117
     c3c:	92 e0       	ldi	r25, 0x02	; 2
     c3e:	9f 93       	push	r25
     c40:	8f 93       	push	r24
     c42:	37 d7       	rcall	.+3694   	; 0x1ab2 <printf>
     c44:	88 e7       	ldi	r24, 0x78	; 120
     c46:	92 e0       	ldi	r25, 0x02	; 2
     c48:	9f 93       	push	r25
     c4a:	8f 93       	push	r24
     c4c:	32 d7       	rcall	.+3684   	; 0x1ab2 <printf>
     c4e:	ce 01       	movw	r24, r28
     c50:	4b 96       	adiw	r24, 0x1b	; 27
     c52:	78 dd       	rcall	.-1296   	; 0x744 <print16>
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	2d ec       	ldi	r18, 0xCD	; 205
     c5e:	3c ec       	ldi	r19, 0xCC	; 204
     c60:	4c e4       	ldi	r20, 0x4C	; 76
     c62:	5f eb       	ldi	r21, 0xBF	; 191
     c64:	c7 01       	movw	r24, r14
     c66:	b6 01       	movw	r22, r12
     c68:	55 d5       	rcall	.+2730   	; 0x1714 <__gesf2>
     c6a:	88 23       	and	r24, r24
     c6c:	4c f0       	brlt	.+18     	; 0xc80 <main+0x498>
     c6e:	2d ec       	ldi	r18, 0xCD	; 205
				{
					incr=0;
     c70:	3c ec       	ldi	r19, 0xCC	; 204
     c72:	4c e4       	ldi	r20, 0x4C	; 76
     c74:	5f e3       	ldi	r21, 0x3F	; 63
     c76:	c7 01       	movw	r24, r14
					printf("\n");	
     c78:	b6 01       	movw	r22, r12
     c7a:	ac d3       	rcall	.+1880   	; 0x13d4 <__cmpsf2>
     c7c:	18 16       	cp	r1, r24
     c7e:	4c f4       	brge	.+18     	; 0xc92 <main+0x4aa>
     c80:	20 e0       	ldi	r18, 0x00	; 0
				}
				else 
					if (final_angleY>0.8)
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	44 eb       	ldi	r20, 0xB4	; 180
     c86:	52 e4       	ldi	r21, 0x42	; 66
     c88:	c7 01       	movw	r24, r14
     c8a:	b6 01       	movw	r22, r12
     c8c:	43 d5       	rcall	.+2694   	; 0x1714 <__gesf2>
     c8e:	18 16       	cp	r1, r24
     c90:	44 f4       	brge	.+16     	; 0xca2 <main+0x4ba>
     c92:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <incr+0x1>
					{
						cli();
     c96:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <incr>
						incr=1;
     c9a:	8a e0       	ldi	r24, 0x0A	; 10
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	1c d7       	rcall	.+3640   	; 0x1ad8 <putchar>
     ca0:	29 ce       	rjmp	.-942    	; 0x8f4 <main+0x10c>
     ca2:	2d ec       	ldi	r18, 0xCD	; 205
						printf(" ");
     ca4:	3c ec       	ldi	r19, 0xCC	; 204
     ca6:	4c e4       	ldi	r20, 0x4C	; 76
     ca8:	5f e3       	ldi	r21, 0x3F	; 63
     caa:	c7 01       	movw	r24, r14
						uint16_t val=pwmSin[U_step];
     cac:	b6 01       	movw	r22, r12
     cae:	32 d5       	rcall	.+2660   	; 0x1714 <__gesf2>
     cb0:	18 16       	cp	r1, r24
     cb2:	e4 f4       	brge	.+56     	; 0xcec <main+0x504>
     cb4:	f8 94       	cli
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <incr+0x1>
     cbe:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <incr>
						print16(&val);
     cc2:	80 e2       	ldi	r24, 0x20	; 32
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	08 d7       	rcall	.+3600   	; 0x1ad8 <putchar>
						printf(" yes\n");
     cc8:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <__data_end>
     ccc:	f0 91 cd 02 	lds	r31, 0x02CD	; 0x8002cd <__data_end+0x1>
						
						sei();
     cd0:	e7 51       	subi	r30, 0x17	; 23
     cd2:	fd 4f       	sbci	r31, 0xFD	; 253
					}
					else
					{	cli();
     cd4:	80 81       	ld	r24, Z
						incr=-1;
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	9a 8f       	std	Y+26, r25	; 0x1a
     cda:	89 8f       	std	Y+25, r24	; 0x19
     cdc:	ce 01       	movw	r24, r28
     cde:	49 96       	adiw	r24, 0x19	; 25
     ce0:	31 dd       	rcall	.-1438   	; 0x744 <print16>
						printf(" ");
     ce2:	8e e7       	ldi	r24, 0x7E	; 126
     ce4:	92 e0       	ldi	r25, 0x02	; 2
     ce6:	fd d6       	rcall	.+3578   	; 0x1ae2 <puts>
     ce8:	78 94       	sei
						uint16_t val=pwmSin[U_step];
     cea:	04 ce       	rjmp	.-1016   	; 0x8f4 <main+0x10c>
     cec:	f8 94       	cli
     cee:	8f ef       	ldi	r24, 0xFF	; 255
     cf0:	9f ef       	ldi	r25, 0xFF	; 255
     cf2:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <incr+0x1>
     cf6:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <incr>
     cfa:	80 e2       	ldi	r24, 0x20	; 32
     cfc:	90 e0       	ldi	r25, 0x00	; 0
						print16(&val);
     cfe:	ec d6       	rcall	.+3544   	; 0x1ad8 <putchar>
     d00:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <__data_end>
     d04:	f0 91 cd 02 	lds	r31, 0x02CD	; 0x8002cd <__data_end+0x1>
						printf(" no\n");
     d08:	e7 51       	subi	r30, 0x17	; 23
     d0a:	fd 4f       	sbci	r31, 0xFD	; 253
     d0c:	80 81       	ld	r24, Z
						sei();
     d0e:	90 e0       	ldi	r25, 0x00	; 0
			//	 set_gyro_angles = true;                                            //Set the IMU started flag
			//}
			
			#endif //PRINT_RAW_DATA			
		#endif //GYRO
	}
     d10:	9a 8f       	std	Y+26, r25	; 0x1a
     d12:	89 8f       	std	Y+25, r24	; 0x19
     d14:	ce 01       	movw	r24, r28
     d16:	49 96       	adiw	r24, 0x19	; 25
     d18:	15 dd       	rcall	.-1494   	; 0x744 <print16>
     d1a:	83 e8       	ldi	r24, 0x83	; 131
     d1c:	92 e0       	ldi	r25, 0x02	; 2
     d1e:	e1 d6       	rcall	.+3522   	; 0x1ae2 <puts>
     d20:	78 94       	sei
     d22:	e8 cd       	rjmp	.-1072   	; 0x8f4 <main+0x10c>

00000d24 <mpu6050_readByte>:
	printf("  ");
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/
}
     d24:	cf 93       	push	r28
     d26:	c8 2f       	mov	r28, r24
     d28:	80 ed       	ldi	r24, 0xD0	; 208
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	19 d2       	rcall	.+1074   	; 0x1160 <i2c_start>
     d2e:	8c 2f       	mov	r24, r28
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	6c d2       	rcall	.+1240   	; 0x120c <i2c_write>
     d34:	5b d2       	rcall	.+1206   	; 0x11ec <i2c_stop>
     d36:	81 ed       	ldi	r24, 0xD1	; 209
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	12 d2       	rcall	.+1060   	; 0x1160 <i2c_start>
     d3c:	a2 d2       	rcall	.+1348   	; 0x1282 <i2c_readNak>
     d3e:	c8 2f       	mov	r28, r24
     d40:	55 d2       	rcall	.+1194   	; 0x11ec <i2c_stop>
     d42:	8c 2f       	mov	r24, r28
     d44:	cf 91       	pop	r28
     d46:	08 95       	ret

00000d48 <mpu6050_read_gyroX>:
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	83 e4       	ldi	r24, 0x43	; 67
     d4e:	ea df       	rcall	.-44     	; 0xd24 <mpu6050_readByte>
     d50:	c8 2f       	mov	r28, r24
     d52:	d0 e0       	ldi	r29, 0x00	; 0
     d54:	dc 2f       	mov	r29, r28
     d56:	cc 27       	eor	r28, r28
     d58:	84 e4       	ldi	r24, 0x44	; 68
     d5a:	e4 df       	rcall	.-56     	; 0xd24 <mpu6050_readByte>
     d5c:	9e 01       	movw	r18, r28
     d5e:	28 2b       	or	r18, r24
     d60:	c9 01       	movw	r24, r18
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	08 95       	ret

00000d68 <mpu6050_read_gyroY>:
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	85 e4       	ldi	r24, 0x45	; 69
     d6e:	da df       	rcall	.-76     	; 0xd24 <mpu6050_readByte>
     d70:	c8 2f       	mov	r28, r24
     d72:	d0 e0       	ldi	r29, 0x00	; 0
     d74:	dc 2f       	mov	r29, r28
     d76:	cc 27       	eor	r28, r28
     d78:	86 e4       	ldi	r24, 0x46	; 70
     d7a:	d4 df       	rcall	.-88     	; 0xd24 <mpu6050_readByte>
     d7c:	9e 01       	movw	r18, r28
     d7e:	28 2b       	or	r18, r24
     d80:	c9 01       	movw	r24, r18
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	08 95       	ret

00000d88 <mpu6050_read_gyroZ>:
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	87 e4       	ldi	r24, 0x47	; 71
     d8e:	ca df       	rcall	.-108    	; 0xd24 <mpu6050_readByte>
     d90:	c8 2f       	mov	r28, r24
     d92:	d0 e0       	ldi	r29, 0x00	; 0
     d94:	dc 2f       	mov	r29, r28
     d96:	cc 27       	eor	r28, r28
     d98:	88 e4       	ldi	r24, 0x48	; 72
     d9a:	c4 df       	rcall	.-120    	; 0xd24 <mpu6050_readByte>
     d9c:	9e 01       	movw	r18, r28
     d9e:	28 2b       	or	r18, r24
     da0:	c9 01       	movw	r24, r18
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <mpu6050_calibrate_gyro>:
     da8:	cf 92       	push	r12
     daa:	df 92       	push	r13
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	6c 01       	movw	r12, r24
     dba:	7b 01       	movw	r14, r22
     dbc:	8a 01       	movw	r16, r20
     dbe:	87 e8       	ldi	r24, 0x87	; 135
     dc0:	92 e0       	ldi	r25, 0x02	; 2
     dc2:	8f d6       	rcall	.+3358   	; 0x1ae2 <puts>
     dc4:	c8 ec       	ldi	r28, 0xC8	; 200
     dc6:	d0 e0       	ldi	r29, 0x00	; 0
     dc8:	bf df       	rcall	.-130    	; 0xd48 <mpu6050_read_gyroX>
     dca:	f6 01       	movw	r30, r12
     dcc:	40 81       	ld	r20, Z
     dce:	51 81       	ldd	r21, Z+1	; 0x01
     dd0:	62 81       	ldd	r22, Z+2	; 0x02
     dd2:	73 81       	ldd	r23, Z+3	; 0x03
     dd4:	48 0f       	add	r20, r24
     dd6:	59 1f       	adc	r21, r25
     dd8:	61 1d       	adc	r22, r1
     dda:	71 1d       	adc	r23, r1
     ddc:	40 83       	st	Z, r20
     dde:	51 83       	std	Z+1, r21	; 0x01
     de0:	62 83       	std	Z+2, r22	; 0x02
     de2:	73 83       	std	Z+3, r23	; 0x03
     de4:	c1 df       	rcall	.-126    	; 0xd68 <mpu6050_read_gyroY>
     de6:	f7 01       	movw	r30, r14
     de8:	40 81       	ld	r20, Z
     dea:	51 81       	ldd	r21, Z+1	; 0x01
     dec:	62 81       	ldd	r22, Z+2	; 0x02
     dee:	73 81       	ldd	r23, Z+3	; 0x03
     df0:	48 0f       	add	r20, r24
     df2:	59 1f       	adc	r21, r25
     df4:	61 1d       	adc	r22, r1
     df6:	71 1d       	adc	r23, r1
     df8:	40 83       	st	Z, r20
     dfa:	51 83       	std	Z+1, r21	; 0x01
     dfc:	62 83       	std	Z+2, r22	; 0x02
     dfe:	73 83       	std	Z+3, r23	; 0x03
     e00:	c3 df       	rcall	.-122    	; 0xd88 <mpu6050_read_gyroZ>
     e02:	f8 01       	movw	r30, r16
     e04:	40 81       	ld	r20, Z
     e06:	51 81       	ldd	r21, Z+1	; 0x01
     e08:	62 81       	ldd	r22, Z+2	; 0x02
     e0a:	73 81       	ldd	r23, Z+3	; 0x03
     e0c:	48 0f       	add	r20, r24
     e0e:	59 1f       	adc	r21, r25
     e10:	61 1d       	adc	r22, r1
     e12:	71 1d       	adc	r23, r1
     e14:	40 83       	st	Z, r20
     e16:	51 83       	std	Z+1, r21	; 0x01
     e18:	62 83       	std	Z+2, r22	; 0x02
     e1a:	73 83       	std	Z+3, r23	; 0x03
     e1c:	8f e3       	ldi	r24, 0x3F	; 63
     e1e:	9f e1       	ldi	r25, 0x1F	; 31
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <mpu6050_calibrate_gyro+0x78>
     e24:	00 c0       	rjmp	.+0      	; 0xe26 <mpu6050_calibrate_gyro+0x7e>
     e26:	00 00       	nop
     e28:	21 97       	sbiw	r28, 0x01	; 1
     e2a:	71 f6       	brne	.-100    	; 0xdc8 <mpu6050_calibrate_gyro+0x20>
     e2c:	f6 01       	movw	r30, r12
     e2e:	60 81       	ld	r22, Z
     e30:	71 81       	ldd	r23, Z+1	; 0x01
     e32:	82 81       	ldd	r24, Z+2	; 0x02
     e34:	93 81       	ldd	r25, Z+3	; 0x03
     e36:	99 23       	and	r25, r25
     e38:	ac f4       	brge	.+42     	; 0xe64 <mpu6050_calibrate_gyro+0xbc>
     e3a:	9b 01       	movw	r18, r22
     e3c:	77 23       	and	r23, r23
     e3e:	24 f4       	brge	.+8      	; 0xe48 <mpu6050_calibrate_gyro+0xa0>
     e40:	22 27       	eor	r18, r18
     e42:	33 27       	eor	r19, r19
     e44:	26 1b       	sub	r18, r22
     e46:	37 0b       	sbc	r19, r23
     e48:	c9 01       	movw	r24, r18
     e4a:	68 ec       	ldi	r22, 0xC8	; 200
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	5f d5       	rcall	.+2750   	; 0x190e <__divmodhi4>
     e50:	cb 01       	movw	r24, r22
     e52:	77 0f       	add	r23, r23
     e54:	aa 0b       	sbc	r26, r26
     e56:	bb 0b       	sbc	r27, r27
     e58:	f6 01       	movw	r30, r12
     e5a:	80 83       	st	Z, r24
     e5c:	91 83       	std	Z+1, r25	; 0x01
     e5e:	a2 83       	std	Z+2, r26	; 0x02
     e60:	b3 83       	std	Z+3, r27	; 0x03
     e62:	0a c0       	rjmp	.+20     	; 0xe78 <mpu6050_calibrate_gyro+0xd0>
     e64:	28 ec       	ldi	r18, 0xC8	; 200
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 e0       	ldi	r20, 0x00	; 0
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	63 d5       	rcall	.+2758   	; 0x1934 <__divmodsi4>
     e6e:	f6 01       	movw	r30, r12
     e70:	20 83       	st	Z, r18
     e72:	31 83       	std	Z+1, r19	; 0x01
     e74:	42 83       	std	Z+2, r20	; 0x02
     e76:	53 83       	std	Z+3, r21	; 0x03
     e78:	f7 01       	movw	r30, r14
     e7a:	60 81       	ld	r22, Z
     e7c:	71 81       	ldd	r23, Z+1	; 0x01
     e7e:	82 81       	ldd	r24, Z+2	; 0x02
     e80:	93 81       	ldd	r25, Z+3	; 0x03
     e82:	99 23       	and	r25, r25
     e84:	ac f4       	brge	.+42     	; 0xeb0 <mpu6050_calibrate_gyro+0x108>
     e86:	9b 01       	movw	r18, r22
     e88:	77 23       	and	r23, r23
     e8a:	24 f4       	brge	.+8      	; 0xe94 <mpu6050_calibrate_gyro+0xec>
     e8c:	22 27       	eor	r18, r18
     e8e:	33 27       	eor	r19, r19
     e90:	26 1b       	sub	r18, r22
     e92:	37 0b       	sbc	r19, r23
     e94:	c9 01       	movw	r24, r18
     e96:	68 ec       	ldi	r22, 0xC8	; 200
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	39 d5       	rcall	.+2674   	; 0x190e <__divmodhi4>
     e9c:	cb 01       	movw	r24, r22
     e9e:	77 0f       	add	r23, r23
     ea0:	aa 0b       	sbc	r26, r26
     ea2:	bb 0b       	sbc	r27, r27
     ea4:	f7 01       	movw	r30, r14
     ea6:	80 83       	st	Z, r24
     ea8:	91 83       	std	Z+1, r25	; 0x01
     eaa:	a2 83       	std	Z+2, r26	; 0x02
     eac:	b3 83       	std	Z+3, r27	; 0x03
     eae:	0a c0       	rjmp	.+20     	; 0xec4 <mpu6050_calibrate_gyro+0x11c>
     eb0:	28 ec       	ldi	r18, 0xC8	; 200
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e0       	ldi	r20, 0x00	; 0
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	3d d5       	rcall	.+2682   	; 0x1934 <__divmodsi4>
     eba:	f7 01       	movw	r30, r14
     ebc:	20 83       	st	Z, r18
     ebe:	31 83       	std	Z+1, r19	; 0x01
     ec0:	42 83       	std	Z+2, r20	; 0x02
     ec2:	53 83       	std	Z+3, r21	; 0x03
     ec4:	f8 01       	movw	r30, r16
     ec6:	60 81       	ld	r22, Z
     ec8:	71 81       	ldd	r23, Z+1	; 0x01
     eca:	82 81       	ldd	r24, Z+2	; 0x02
     ecc:	93 81       	ldd	r25, Z+3	; 0x03
     ece:	99 23       	and	r25, r25
     ed0:	ac f4       	brge	.+42     	; 0xefc <mpu6050_calibrate_gyro+0x154>
     ed2:	9b 01       	movw	r18, r22
     ed4:	77 23       	and	r23, r23
     ed6:	24 f4       	brge	.+8      	; 0xee0 <mpu6050_calibrate_gyro+0x138>
     ed8:	22 27       	eor	r18, r18
     eda:	33 27       	eor	r19, r19
     edc:	26 1b       	sub	r18, r22
     ede:	37 0b       	sbc	r19, r23
     ee0:	c9 01       	movw	r24, r18
     ee2:	68 ec       	ldi	r22, 0xC8	; 200
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	13 d5       	rcall	.+2598   	; 0x190e <__divmodhi4>
     ee8:	cb 01       	movw	r24, r22
     eea:	77 0f       	add	r23, r23
     eec:	aa 0b       	sbc	r26, r26
     eee:	bb 0b       	sbc	r27, r27
     ef0:	f8 01       	movw	r30, r16
     ef2:	80 83       	st	Z, r24
     ef4:	91 83       	std	Z+1, r25	; 0x01
     ef6:	a2 83       	std	Z+2, r26	; 0x02
     ef8:	b3 83       	std	Z+3, r27	; 0x03
     efa:	0a c0       	rjmp	.+20     	; 0xf10 <mpu6050_calibrate_gyro+0x168>
     efc:	28 ec       	ldi	r18, 0xC8	; 200
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	17 d5       	rcall	.+2606   	; 0x1934 <__divmodsi4>
     f06:	f8 01       	movw	r30, r16
     f08:	20 83       	st	Z, r18
     f0a:	31 83       	std	Z+1, r19	; 0x01
     f0c:	42 83       	std	Z+2, r20	; 0x02
     f0e:	53 83       	std	Z+3, r21	; 0x03
     f10:	8d e9       	ldi	r24, 0x9D	; 157
     f12:	92 e0       	ldi	r25, 0x02	; 2
     f14:	9f 93       	push	r25
     f16:	8f 93       	push	r24
     f18:	cc d5       	rcall	.+2968   	; 0x1ab2 <printf>
     f1a:	c6 01       	movw	r24, r12
     f1c:	13 dc       	rcall	.-2010   	; 0x744 <print16>
     f1e:	c5 e7       	ldi	r28, 0x75	; 117
     f20:	d2 e0       	ldi	r29, 0x02	; 2
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	c5 d5       	rcall	.+2954   	; 0x1ab2 <printf>
     f28:	c7 01       	movw	r24, r14
     f2a:	0c dc       	rcall	.-2024   	; 0x744 <print16>
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	c0 d5       	rcall	.+2944   	; 0x1ab2 <printf>
     f32:	c8 01       	movw	r24, r16
     f34:	2e dc       	rcall	.-1956   	; 0x792 <print16ln>
     f36:	ef ef       	ldi	r30, 0xFF	; 255
     f38:	f3 ed       	ldi	r31, 0xD3	; 211
     f3a:	20 e3       	ldi	r18, 0x30	; 48
     f3c:	e1 50       	subi	r30, 0x01	; 1
     f3e:	f0 40       	sbci	r31, 0x00	; 0
     f40:	20 40       	sbci	r18, 0x00	; 0
     f42:	e1 f7       	brne	.-8      	; 0xf3c <mpu6050_calibrate_gyro+0x194>
     f44:	00 c0       	rjmp	.+0      	; 0xf46 <mpu6050_calibrate_gyro+0x19e>
     f46:	00 00       	nop
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	ff 90       	pop	r15
     f5e:	ef 90       	pop	r14
     f60:	df 90       	pop	r13
     f62:	cf 90       	pop	r12
     f64:	08 95       	ret

00000f66 <mpu6050_writeByte>:
	uint8_t byteToReturn=i2c_readNak();
	i2c_stop();
	return byteToReturn;
}
void mpu6050_writeByte(uint8_t wereToWrite,uint8_t byteToWrite)//writebyte
{
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	d8 2f       	mov	r29, r24
     f6c:	c6 2f       	mov	r28, r22
	i2c_start(MPU6050_WRITE);
     f6e:	80 ed       	ldi	r24, 0xD0	; 208
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	f6 d0       	rcall	.+492    	; 0x1160 <i2c_start>
	i2c_write(wereToWrite);
     f74:	8d 2f       	mov	r24, r29
     f76:	90 e0       	ldi	r25, 0x00	; 0
	i2c_write(byteToWrite);
     f78:	49 d1       	rcall	.+658    	; 0x120c <i2c_write>
     f7a:	8c 2f       	mov	r24, r28
	i2c_stop();
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	46 d1       	rcall	.+652    	; 0x120c <i2c_write>
}
     f80:	35 d1       	rcall	.+618    	; 0x11ec <i2c_stop>
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	08 95       	ret

00000f88 <mpu6050_readBytes>:
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
     f88:	af 92       	push	r10
     f8a:	bf 92       	push	r11
     f8c:	cf 92       	push	r12
     f8e:	df 92       	push	r13
     f90:	ff 92       	push	r15
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
     f9a:	66 23       	and	r22, r22
     f9c:	a1 f1       	breq	.+104    	; 0x1006 <mpu6050_readBytes+0x7e>
     f9e:	c5 2f       	mov	r28, r21
     fa0:	d4 2f       	mov	r29, r20
     fa2:	f6 2e       	mov	r15, r22
     fa4:	18 2f       	mov	r17, r24
		//request register
		i2c_start(MPU6050_WRITE);
     fa6:	80 ed       	ldi	r24, 0xD0	; 208
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	da d0       	rcall	.+436    	; 0x1160 <i2c_start>
		i2c_write(regAddr);
     fac:	81 2f       	mov	r24, r17
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	2d d1       	rcall	.+602    	; 0x120c <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fb2:	85 e3       	ldi	r24, 0x35	; 53
     fb4:	8a 95       	dec	r24
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <mpu6050_readBytes+0x2c>
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
     fb8:	00 00       	nop
     fba:	81 ed       	ldi	r24, 0xD1	; 209
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	d0 d0       	rcall	.+416    	; 0x1160 <i2c_start>
     fc0:	0d 2f       	mov	r16, r29
     fc2:	1c 2f       	mov	r17, r28
     fc4:	cc 24       	eor	r12, r12
     fc6:	ca 94       	dec	r12
     fc8:	cf 0c       	add	r12, r15
     fca:	d1 2c       	mov	r13, r1
     fcc:	ef ef       	ldi	r30, 0xFF	; 255
     fce:	ce 1a       	sub	r12, r30
     fd0:	de 0a       	sbc	r13, r30
     fd2:	c0 e0       	ldi	r28, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
     fd4:	d0 e0       	ldi	r29, 0x00	; 0
     fd6:	af 2c       	mov	r10, r15
     fd8:	b1 2c       	mov	r11, r1
     fda:	f1 e0       	ldi	r31, 0x01	; 1
     fdc:	af 1a       	sub	r10, r31
     fde:	b1 08       	sbc	r11, r1
     fe0:	ac 16       	cp	r10, r28
			data[i] = i2c_readNak();
     fe2:	bd 06       	cpc	r11, r29
     fe4:	21 f4       	brne	.+8      	; 0xfee <mpu6050_readBytes+0x66>
     fe6:	4d d1       	rcall	.+666    	; 0x1282 <i2c_readNak>
     fe8:	f8 01       	movw	r30, r16
			else
			data[i] = i2c_readAck();
     fea:	80 83       	st	Z, r24
     fec:	03 c0       	rjmp	.+6      	; 0xff4 <mpu6050_readBytes+0x6c>
     fee:	2f d1       	rcall	.+606    	; 0x124e <i2c_readAck>
     ff0:	f8 01       	movw	r30, r16
     ff2:	80 83       	st	Z, r24
     ff4:	21 96       	adiw	r28, 0x01	; 1
		i2c_start(MPU6050_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
		for(i=0; i<length; i++) {
     ff6:	0f 5f       	subi	r16, 0xFF	; 255
     ff8:	1f 4f       	sbci	r17, 0xFF	; 255
     ffa:	cc 15       	cp	r28, r12
     ffc:	dd 05       	cpc	r29, r13
			if(i==length-1)
			data[i] = i2c_readNak();
			else
			data[i] = i2c_readAck();
		}
		i2c_stop();
     ffe:	81 f7       	brne	.-32     	; 0xfe0 <mpu6050_readBytes+0x58>
    1000:	cf 2d       	mov	r28, r15
    1002:	f4 d0       	rcall	.+488    	; 0x11ec <i2c_stop>
	i2c_write(byteToWrite);
	i2c_stop();
}
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
	uint8_t i = 0;
	int8_t count = 0;
    1004:	01 c0       	rjmp	.+2      	; 0x1008 <mpu6050_readBytes+0x80>
			data[i] = i2c_readAck();
		}
		i2c_stop();
	}
	return count;
}
    1006:	c0 e0       	ldi	r28, 0x00	; 0
    1008:	8c 2f       	mov	r24, r28
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	ff 90       	pop	r15
    1014:	df 90       	pop	r13
    1016:	cf 90       	pop	r12
    1018:	bf 90       	pop	r11
    101a:	af 90       	pop	r10
    101c:	08 95       	ret

0000101e <mpu6050_getRawData>:
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
    101e:	6f 92       	push	r6
    1020:	7f 92       	push	r7
    1022:	8f 92       	push	r8
    1024:	9f 92       	push	r9
    1026:	af 92       	push	r10
    1028:	bf 92       	push	r11
    102a:	cf 92       	push	r12
    102c:	df 92       	push	r13
    102e:	ef 92       	push	r14
    1030:	ff 92       	push	r15
    1032:	0f 93       	push	r16
    1034:	1f 93       	push	r17
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	2e 97       	sbiw	r28, 0x0e	; 14
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	4c 01       	movw	r8, r24
    104c:	5b 01       	movw	r10, r22
    104e:	6a 01       	movw	r12, r20
    1050:	39 01       	movw	r6, r18
	uint8_t buffer[14];
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14,  buffer);
    1052:	ae 01       	movw	r20, r28
    1054:	4f 5f       	subi	r20, 0xFF	; 255
    1056:	5f 4f       	sbci	r21, 0xFF	; 255
    1058:	6e e0       	ldi	r22, 0x0E	; 14
    105a:	8b e3       	ldi	r24, 0x3B	; 59
    105c:	95 df       	rcall	.-214    	; 0xf88 <mpu6050_readBytes>
	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	98 2f       	mov	r25, r24
    1064:	88 27       	eor	r24, r24
    1066:	2a 81       	ldd	r18, Y+2	; 0x02
    1068:	82 2b       	or	r24, r18
    106a:	f4 01       	movw	r30, r8
    106c:	91 83       	std	Z+1, r25	; 0x01
    106e:	80 83       	st	Z, r24
	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	98 2f       	mov	r25, r24
    1076:	88 27       	eor	r24, r24
    1078:	2c 81       	ldd	r18, Y+4	; 0x04
    107a:	82 2b       	or	r24, r18
    107c:	f5 01       	movw	r30, r10
    107e:	91 83       	std	Z+1, r25	; 0x01
    1080:	80 83       	st	Z, r24
	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	98 2f       	mov	r25, r24
    1088:	88 27       	eor	r24, r24
    108a:	2e 81       	ldd	r18, Y+6	; 0x06
    108c:	82 2b       	or	r24, r18
    108e:	f6 01       	movw	r30, r12
    1090:	91 83       	std	Z+1, r25	; 0x01
    1092:	80 83       	st	Z, r24
	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    1094:	89 85       	ldd	r24, Y+9	; 0x09
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	98 2f       	mov	r25, r24
    109a:	88 27       	eor	r24, r24
    109c:	2a 85       	ldd	r18, Y+10	; 0x0a
    109e:	82 2b       	or	r24, r18
    10a0:	f3 01       	movw	r30, r6
    10a2:	91 83       	std	Z+1, r25	; 0x01
    10a4:	80 83       	st	Z, r24
	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    10a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	98 2f       	mov	r25, r24
    10ac:	88 27       	eor	r24, r24
    10ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    10b0:	82 2b       	or	r24, r18
    10b2:	f8 01       	movw	r30, r16
    10b4:	91 83       	std	Z+1, r25	; 0x01
    10b6:	80 83       	st	Z, r24
	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    10b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	98 2f       	mov	r25, r24
    10be:	88 27       	eor	r24, r24
    10c0:	2e 85       	ldd	r18, Y+14	; 0x0e
    10c2:	82 2b       	or	r24, r18
    10c4:	f7 01       	movw	r30, r14
    10c6:	91 83       	std	Z+1, r25	; 0x01
    10c8:	80 83       	st	Z, r24
    10ca:	2e 96       	adiw	r28, 0x0e	; 14
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	ef 90       	pop	r14
    10e2:	df 90       	pop	r13
    10e4:	cf 90       	pop	r12
    10e6:	bf 90       	pop	r11
    10e8:	af 90       	pop	r10
    10ea:	9f 90       	pop	r9
    10ec:	8f 90       	pop	r8
    10ee:	7f 90       	pop	r7
    10f0:	6f 90       	pop	r6
    10f2:	08 95       	ret

000010f4 <setup_timer4>:

#define clockCyclesPerMicrosecond () ( F_CPU / 1000000L )

/*-----------Timter 1-----------*/
void setup_timer4(void){
    sbi (TCCR4B, CS40);//prescakaer 256
    10f4:	e1 ea       	ldi	r30, 0xA1	; 161
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	81 60       	ori	r24, 0x01	; 1
    10fc:	80 83       	st	Z, r24
    sbi (TCCR4A, WGM40);//8 bit phase correct PWM
    10fe:	e0 ea       	ldi	r30, 0xA0	; 160
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	81 60       	ori	r24, 0x01	; 1
    1106:	80 83       	st	Z, r24
	
	//sbi (TCCR4A,COM4A0);
	sbi (TCCR4A,COM4A1);
    1108:	80 81       	ld	r24, Z
    110a:	80 68       	ori	r24, 0x80	; 128
    110c:	80 83       	st	Z, r24
	//sbi (TCCR4A,COM4B0);
	sbi (TCCR4A,COM4B1);
    110e:	80 81       	ld	r24, Z
    1110:	80 62       	ori	r24, 0x20	; 32
    1112:	80 83       	st	Z, r24
	//sbi (TCCR4A,COM4C0);
	sbi (TCCR4A,COM4C1);
    1114:	80 81       	ld	r24, Z
    1116:	88 60       	ori	r24, 0x08	; 8
    1118:	80 83       	st	Z, r24
    111a:	08 95       	ret

0000111c <setup_timer5>:
}


/*-----------Timter 5-----------*/
void setup_timer5(void){
	sbi (TCCR5B, CS50);//only this 8
    111c:	e1 e2       	ldi	r30, 0x21	; 33
    111e:	f1 e0       	ldi	r31, 0x01	; 1
    1120:	80 81       	ld	r24, Z
    1122:	81 60       	ori	r24, 0x01	; 1
    1124:	80 83       	st	Z, r24
	//sbi (TCCR5B, CS52);//only this 256
	sbi (TCCR5B, WGM52);//OCR4A compare interrupt
    1126:	80 81       	ld	r24, Z
    1128:	88 60       	ori	r24, 0x08	; 8
    112a:	80 83       	st	Z, r24
    112c:	08 95       	ret

0000112e <Enable_timer5_compare_interrupt>:
	
}
void Enable_timer5_compare_interrupt(){
	sbi (TIMSK5, OCIE5A);
    112e:	e3 e7       	ldi	r30, 0x73	; 115
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	82 60       	ori	r24, 0x02	; 2
    1136:	80 83       	st	Z, r24
    1138:	08 95       	ret

0000113a <setup_timer0>:
}
/*-----------Timter 2-----------*/
void setup_timer0(void){
	sbi(TCCR0B,CS00);
    113a:	85 b5       	in	r24, 0x25	; 37
    113c:	81 60       	ori	r24, 0x01	; 1
    113e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B,CS01);;//prescaler 64 , 250khz timer
    1140:	85 b5       	in	r24, 0x25	; 37
    1142:	82 60       	ori	r24, 0x02	; 2
    1144:	85 bd       	out	0x25, r24	; 37
    1146:	08 95       	ret

00001148 <Enable_timer0_overflow_interrupt>:
}
void Enable_timer0_overflow_interrupt(){
	sbi(TIMSK0,TOIE0);
    1148:	ee e6       	ldi	r30, 0x6E	; 110
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	81 60       	ori	r24, 0x01	; 1
    1150:	80 83       	st	Z, r24
    1152:	08 95       	ret

00001154 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1154:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1158:	8c e0       	ldi	r24, 0x0C	; 12
    115a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    115e:	08 95       	ret

00001160 <i2c_start>:
    1160:	94 ea       	ldi	r25, 0xA4	; 164
    1162:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1166:	4f ef       	ldi	r20, 0xFF	; 255
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	ec eb       	ldi	r30, 0xBC	; 188
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	90 81       	ld	r25, Z
    1174:	99 23       	and	r25, r25
    1176:	34 f0       	brlt	.+12     	; 0x1184 <i2c_start+0x24>
    1178:	41 50       	subi	r20, 0x01	; 1
    117a:	51 09       	sbc	r21, r1
    117c:	61 09       	sbc	r22, r1
    117e:	71 09       	sbc	r23, r1
    1180:	c0 f7       	brcc	.-16     	; 0x1172 <i2c_start+0x12>
    1182:	04 c0       	rjmp	.+8      	; 0x118c <i2c_start+0x2c>
    1184:	45 2b       	or	r20, r21
    1186:	46 2b       	or	r20, r22
    1188:	47 2b       	or	r20, r23
    118a:	41 f1       	breq	.+80     	; 0x11dc <i2c_start+0x7c>
    118c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1190:	98 7f       	andi	r25, 0xF8	; 248
    1192:	98 30       	cpi	r25, 0x08	; 8
    1194:	11 f0       	breq	.+4      	; 0x119a <i2c_start+0x3a>
    1196:	90 31       	cpi	r25, 0x10	; 16
    1198:	19 f5       	brne	.+70     	; 0x11e0 <i2c_start+0x80>
    119a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    119e:	84 e8       	ldi	r24, 0x84	; 132
    11a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    11a4:	8f ef       	ldi	r24, 0xFF	; 255
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	a0 e0       	ldi	r26, 0x00	; 0
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	ec eb       	ldi	r30, 0xBC	; 188
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	20 81       	ld	r18, Z
    11b2:	22 23       	and	r18, r18
    11b4:	2c f0       	brlt	.+10     	; 0x11c0 <i2c_start+0x60>
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	a1 09       	sbc	r26, r1
    11ba:	b1 09       	sbc	r27, r1
    11bc:	c8 f7       	brcc	.-14     	; 0x11b0 <i2c_start+0x50>
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <i2c_start+0x68>
    11c0:	89 2b       	or	r24, r25
    11c2:	8a 2b       	or	r24, r26
    11c4:	8b 2b       	or	r24, r27
    11c6:	71 f0       	breq	.+28     	; 0x11e4 <i2c_start+0x84>
    11c8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    11cc:	98 7f       	andi	r25, 0xF8	; 248
    11ce:	98 31       	cpi	r25, 0x18	; 24
    11d0:	59 f0       	breq	.+22     	; 0x11e8 <i2c_start+0x88>
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 34       	cpi	r25, 0x40	; 64
    11d6:	49 f4       	brne	.+18     	; 0x11ea <i2c_start+0x8a>
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	08 95       	ret
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	08 95       	ret
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	08 95       	ret
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	08 95       	ret
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	08 95       	ret

000011ec <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    11ec:	84 e9       	ldi	r24, 0x94	; 148
    11ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	ec eb       	ldi	r30, 0xBC	; 188
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	20 81       	ld	r18, Z
    11fc:	24 ff       	sbrs	r18, 4
    11fe:	05 c0       	rjmp	.+10     	; 0x120a <i2c_stop+0x1e>
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	81 15       	cp	r24, r1
    1204:	21 e0       	ldi	r18, 0x01	; 1
    1206:	92 07       	cpc	r25, r18
    1208:	c1 f7       	brne	.-16     	; 0x11fa <i2c_stop+0xe>
    120a:	08 95       	ret

0000120c <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    120c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    1210:	84 e8       	ldi	r24, 0x84	; 132
    1212:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    1216:	8f ef       	ldi	r24, 0xFF	; 255
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	a0 e0       	ldi	r26, 0x00	; 0
    121c:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    121e:	ec eb       	ldi	r30, 0xBC	; 188
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	20 81       	ld	r18, Z
    1224:	22 23       	and	r18, r18
    1226:	2c f0       	brlt	.+10     	; 0x1232 <i2c_write+0x26>
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	a1 09       	sbc	r26, r1
    122c:	b1 09       	sbc	r27, r1
    122e:	c8 f7       	brcc	.-14     	; 0x1222 <i2c_write+0x16>
    1230:	04 c0       	rjmp	.+8      	; 0x123a <i2c_write+0x2e>
	if(i2c_timer == 0)
    1232:	89 2b       	or	r24, r25
    1234:	8a 2b       	or	r24, r26
    1236:	8b 2b       	or	r24, r27
    1238:	41 f0       	breq	.+16     	; 0x124a <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    123a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    123e:	98 7f       	andi	r25, 0xF8	; 248
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	98 32       	cpi	r25, 0x28	; 40
    1244:	19 f4       	brne	.+6      	; 0x124c <i2c_write+0x40>
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	08 95       	ret
    124a:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    124c:	08 95       	ret

0000124e <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    124e:	84 ec       	ldi	r24, 0xC4	; 196
    1250:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
    1254:	8f ef       	ldi	r24, 0xFF	; 255
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	a0 e0       	ldi	r26, 0x00	; 0
    125a:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    125c:	ec eb       	ldi	r30, 0xBC	; 188
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	20 81       	ld	r18, Z
    1262:	22 23       	and	r18, r18
    1264:	2c f0       	brlt	.+10     	; 0x1270 <i2c_readAck+0x22>
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	a1 09       	sbc	r26, r1
    126a:	b1 09       	sbc	r27, r1
    126c:	c8 f7       	brcc	.-14     	; 0x1260 <i2c_readAck+0x12>
    126e:	04 c0       	rjmp	.+8      	; 0x1278 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
    1270:	89 2b       	or	r24, r25
    1272:	8a 2b       	or	r24, r26
    1274:	8b 2b       	or	r24, r27
    1276:	19 f0       	breq	.+6      	; 0x127e <i2c_readAck+0x30>
		return 0;

    return TWDR;
    1278:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    127c:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    127e:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    1280:	08 95       	ret

00001282 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    1282:	84 e8       	ldi	r24, 0x84	; 132
    1284:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
    1288:	8f ef       	ldi	r24, 0xFF	; 255
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	a0 e0       	ldi	r26, 0x00	; 0
    128e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1290:	ec eb       	ldi	r30, 0xBC	; 188
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	20 81       	ld	r18, Z
    1296:	22 23       	and	r18, r18
    1298:	2c f0       	brlt	.+10     	; 0x12a4 <i2c_readNak+0x22>
    129a:	01 97       	sbiw	r24, 0x01	; 1
    129c:	a1 09       	sbc	r26, r1
    129e:	b1 09       	sbc	r27, r1
    12a0:	c8 f7       	brcc	.-14     	; 0x1294 <i2c_readNak+0x12>
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <i2c_readNak+0x2a>
	if(i2c_timer == 0)
    12a4:	89 2b       	or	r24, r25
    12a6:	8a 2b       	or	r24, r26
    12a8:	8b 2b       	or	r24, r27
    12aa:	19 f0       	breq	.+6      	; 0x12b2 <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
    12ac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    12b0:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    12b2:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    12b4:	08 95       	ret

000012b6 <USART_Init>:
#include <avr/io.h>
#include <stdio.h>
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
    12b6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;
    12ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	UCSR0B = (1<<TXEN0);// | (1<<TXCIE0);
    12be:	88 e0       	ldi	r24, 0x08	; 8
    12c0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);//2 stop bit 8 bit
    12c4:	8e e0       	ldi	r24, 0x0E	; 14
    12c6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    12ca:	08 95       	ret

000012cc <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
    12cc:	e0 ec       	ldi	r30, 0xC0	; 192
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	90 81       	ld	r25, Z
    12d2:	95 ff       	sbrs	r25, 5
    12d4:	fd cf       	rjmp	.-6      	; 0x12d0 <USART_Transmit+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
    12d6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    12da:	08 95       	ret

000012dc <__subsf3>:
    12dc:	50 58       	subi	r21, 0x80	; 128

000012de <__addsf3>:
    12de:	bb 27       	eor	r27, r27
    12e0:	aa 27       	eor	r26, r26
    12e2:	0e d0       	rcall	.+28     	; 0x1300 <__addsf3x>
    12e4:	dd c1       	rjmp	.+954    	; 0x16a0 <__fp_round>
    12e6:	ce d1       	rcall	.+924    	; 0x1684 <__fp_pscA>
    12e8:	30 f0       	brcs	.+12     	; 0x12f6 <__addsf3+0x18>
    12ea:	d3 d1       	rcall	.+934    	; 0x1692 <__fp_pscB>
    12ec:	20 f0       	brcs	.+8      	; 0x12f6 <__addsf3+0x18>
    12ee:	31 f4       	brne	.+12     	; 0x12fc <__addsf3+0x1e>
    12f0:	9f 3f       	cpi	r25, 0xFF	; 255
    12f2:	11 f4       	brne	.+4      	; 0x12f8 <__addsf3+0x1a>
    12f4:	1e f4       	brtc	.+6      	; 0x12fc <__addsf3+0x1e>
    12f6:	8d c1       	rjmp	.+794    	; 0x1612 <__fp_nan>
    12f8:	0e f4       	brtc	.+2      	; 0x12fc <__addsf3+0x1e>
    12fa:	e0 95       	com	r30
    12fc:	e7 fb       	bst	r30, 7
    12fe:	83 c1       	rjmp	.+774    	; 0x1606 <__fp_inf>

00001300 <__addsf3x>:
    1300:	e9 2f       	mov	r30, r25
    1302:	df d1       	rcall	.+958    	; 0x16c2 <__fp_split3>
    1304:	80 f3       	brcs	.-32     	; 0x12e6 <__addsf3+0x8>
    1306:	ba 17       	cp	r27, r26
    1308:	62 07       	cpc	r22, r18
    130a:	73 07       	cpc	r23, r19
    130c:	84 07       	cpc	r24, r20
    130e:	95 07       	cpc	r25, r21
    1310:	18 f0       	brcs	.+6      	; 0x1318 <__addsf3x+0x18>
    1312:	71 f4       	brne	.+28     	; 0x1330 <__addsf3x+0x30>
    1314:	9e f5       	brtc	.+102    	; 0x137c <__addsf3x+0x7c>
    1316:	f7 c1       	rjmp	.+1006   	; 0x1706 <__fp_zero>
    1318:	0e f4       	brtc	.+2      	; 0x131c <__addsf3x+0x1c>
    131a:	e0 95       	com	r30
    131c:	0b 2e       	mov	r0, r27
    131e:	ba 2f       	mov	r27, r26
    1320:	a0 2d       	mov	r26, r0
    1322:	0b 01       	movw	r0, r22
    1324:	b9 01       	movw	r22, r18
    1326:	90 01       	movw	r18, r0
    1328:	0c 01       	movw	r0, r24
    132a:	ca 01       	movw	r24, r20
    132c:	a0 01       	movw	r20, r0
    132e:	11 24       	eor	r1, r1
    1330:	ff 27       	eor	r31, r31
    1332:	59 1b       	sub	r21, r25
    1334:	99 f0       	breq	.+38     	; 0x135c <__addsf3x+0x5c>
    1336:	59 3f       	cpi	r21, 0xF9	; 249
    1338:	50 f4       	brcc	.+20     	; 0x134e <__addsf3x+0x4e>
    133a:	50 3e       	cpi	r21, 0xE0	; 224
    133c:	68 f1       	brcs	.+90     	; 0x1398 <__addsf3x+0x98>
    133e:	1a 16       	cp	r1, r26
    1340:	f0 40       	sbci	r31, 0x00	; 0
    1342:	a2 2f       	mov	r26, r18
    1344:	23 2f       	mov	r18, r19
    1346:	34 2f       	mov	r19, r20
    1348:	44 27       	eor	r20, r20
    134a:	58 5f       	subi	r21, 0xF8	; 248
    134c:	f3 cf       	rjmp	.-26     	; 0x1334 <__addsf3x+0x34>
    134e:	46 95       	lsr	r20
    1350:	37 95       	ror	r19
    1352:	27 95       	ror	r18
    1354:	a7 95       	ror	r26
    1356:	f0 40       	sbci	r31, 0x00	; 0
    1358:	53 95       	inc	r21
    135a:	c9 f7       	brne	.-14     	; 0x134e <__addsf3x+0x4e>
    135c:	7e f4       	brtc	.+30     	; 0x137c <__addsf3x+0x7c>
    135e:	1f 16       	cp	r1, r31
    1360:	ba 0b       	sbc	r27, r26
    1362:	62 0b       	sbc	r22, r18
    1364:	73 0b       	sbc	r23, r19
    1366:	84 0b       	sbc	r24, r20
    1368:	ba f0       	brmi	.+46     	; 0x1398 <__addsf3x+0x98>
    136a:	91 50       	subi	r25, 0x01	; 1
    136c:	a1 f0       	breq	.+40     	; 0x1396 <__addsf3x+0x96>
    136e:	ff 0f       	add	r31, r31
    1370:	bb 1f       	adc	r27, r27
    1372:	66 1f       	adc	r22, r22
    1374:	77 1f       	adc	r23, r23
    1376:	88 1f       	adc	r24, r24
    1378:	c2 f7       	brpl	.-16     	; 0x136a <__addsf3x+0x6a>
    137a:	0e c0       	rjmp	.+28     	; 0x1398 <__addsf3x+0x98>
    137c:	ba 0f       	add	r27, r26
    137e:	62 1f       	adc	r22, r18
    1380:	73 1f       	adc	r23, r19
    1382:	84 1f       	adc	r24, r20
    1384:	48 f4       	brcc	.+18     	; 0x1398 <__addsf3x+0x98>
    1386:	87 95       	ror	r24
    1388:	77 95       	ror	r23
    138a:	67 95       	ror	r22
    138c:	b7 95       	ror	r27
    138e:	f7 95       	ror	r31
    1390:	9e 3f       	cpi	r25, 0xFE	; 254
    1392:	08 f0       	brcs	.+2      	; 0x1396 <__addsf3x+0x96>
    1394:	b3 cf       	rjmp	.-154    	; 0x12fc <__addsf3+0x1e>
    1396:	93 95       	inc	r25
    1398:	88 0f       	add	r24, r24
    139a:	08 f0       	brcs	.+2      	; 0x139e <__addsf3x+0x9e>
    139c:	99 27       	eor	r25, r25
    139e:	ee 0f       	add	r30, r30
    13a0:	97 95       	ror	r25
    13a2:	87 95       	ror	r24
    13a4:	08 95       	ret

000013a6 <asin>:
    13a6:	9f 93       	push	r25
    13a8:	9f 77       	andi	r25, 0x7F	; 127
    13aa:	ee e3       	ldi	r30, 0x3E	; 62
    13ac:	89 37       	cpi	r24, 0x79	; 121
    13ae:	9e 07       	cpc	r25, r30
    13b0:	20 f4       	brcc	.+8      	; 0x13ba <asin+0x14>
    13b2:	e4 ee       	ldi	r30, 0xE4	; 228
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	55 d1       	rcall	.+682    	; 0x1662 <__fp_powsodd>
    13b8:	09 c0       	rjmp	.+18     	; 0x13cc <asin+0x26>
    13ba:	e6 d0       	rcall	.+460    	; 0x1588 <__fp_arccos>
    13bc:	90 58       	subi	r25, 0x80	; 128
    13be:	a2 ea       	ldi	r26, 0xA2	; 162
    13c0:	2a ed       	ldi	r18, 0xDA	; 218
    13c2:	3f e0       	ldi	r19, 0x0F	; 15
    13c4:	49 ec       	ldi	r20, 0xC9	; 201
    13c6:	5f e3       	ldi	r21, 0x3F	; 63
    13c8:	9b df       	rcall	.-202    	; 0x1300 <__addsf3x>
    13ca:	6a d1       	rcall	.+724    	; 0x16a0 <__fp_round>
    13cc:	0f 90       	pop	r0
    13ce:	07 fc       	sbrc	r0, 7
    13d0:	90 58       	subi	r25, 0x80	; 128
    13d2:	08 95       	ret

000013d4 <__cmpsf2>:
    13d4:	f4 d0       	rcall	.+488    	; 0x15be <__fp_cmp>
    13d6:	08 f4       	brcc	.+2      	; 0x13da <__cmpsf2+0x6>
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	08 95       	ret

000013dc <__divsf3>:
    13dc:	0c d0       	rcall	.+24     	; 0x13f6 <__divsf3x>
    13de:	60 c1       	rjmp	.+704    	; 0x16a0 <__fp_round>
    13e0:	58 d1       	rcall	.+688    	; 0x1692 <__fp_pscB>
    13e2:	40 f0       	brcs	.+16     	; 0x13f4 <__divsf3+0x18>
    13e4:	4f d1       	rcall	.+670    	; 0x1684 <__fp_pscA>
    13e6:	30 f0       	brcs	.+12     	; 0x13f4 <__divsf3+0x18>
    13e8:	21 f4       	brne	.+8      	; 0x13f2 <__divsf3+0x16>
    13ea:	5f 3f       	cpi	r21, 0xFF	; 255
    13ec:	19 f0       	breq	.+6      	; 0x13f4 <__divsf3+0x18>
    13ee:	0b c1       	rjmp	.+534    	; 0x1606 <__fp_inf>
    13f0:	51 11       	cpse	r21, r1
    13f2:	8a c1       	rjmp	.+788    	; 0x1708 <__fp_szero>
    13f4:	0e c1       	rjmp	.+540    	; 0x1612 <__fp_nan>

000013f6 <__divsf3x>:
    13f6:	65 d1       	rcall	.+714    	; 0x16c2 <__fp_split3>
    13f8:	98 f3       	brcs	.-26     	; 0x13e0 <__divsf3+0x4>

000013fa <__divsf3_pse>:
    13fa:	99 23       	and	r25, r25
    13fc:	c9 f3       	breq	.-14     	; 0x13f0 <__divsf3+0x14>
    13fe:	55 23       	and	r21, r21
    1400:	b1 f3       	breq	.-20     	; 0x13ee <__divsf3+0x12>
    1402:	95 1b       	sub	r25, r21
    1404:	55 0b       	sbc	r21, r21
    1406:	bb 27       	eor	r27, r27
    1408:	aa 27       	eor	r26, r26
    140a:	62 17       	cp	r22, r18
    140c:	73 07       	cpc	r23, r19
    140e:	84 07       	cpc	r24, r20
    1410:	38 f0       	brcs	.+14     	; 0x1420 <__divsf3_pse+0x26>
    1412:	9f 5f       	subi	r25, 0xFF	; 255
    1414:	5f 4f       	sbci	r21, 0xFF	; 255
    1416:	22 0f       	add	r18, r18
    1418:	33 1f       	adc	r19, r19
    141a:	44 1f       	adc	r20, r20
    141c:	aa 1f       	adc	r26, r26
    141e:	a9 f3       	breq	.-22     	; 0x140a <__divsf3_pse+0x10>
    1420:	33 d0       	rcall	.+102    	; 0x1488 <__divsf3_pse+0x8e>
    1422:	0e 2e       	mov	r0, r30
    1424:	3a f0       	brmi	.+14     	; 0x1434 <__divsf3_pse+0x3a>
    1426:	e0 e8       	ldi	r30, 0x80	; 128
    1428:	30 d0       	rcall	.+96     	; 0x148a <__divsf3_pse+0x90>
    142a:	91 50       	subi	r25, 0x01	; 1
    142c:	50 40       	sbci	r21, 0x00	; 0
    142e:	e6 95       	lsr	r30
    1430:	00 1c       	adc	r0, r0
    1432:	ca f7       	brpl	.-14     	; 0x1426 <__divsf3_pse+0x2c>
    1434:	29 d0       	rcall	.+82     	; 0x1488 <__divsf3_pse+0x8e>
    1436:	fe 2f       	mov	r31, r30
    1438:	27 d0       	rcall	.+78     	; 0x1488 <__divsf3_pse+0x8e>
    143a:	66 0f       	add	r22, r22
    143c:	77 1f       	adc	r23, r23
    143e:	88 1f       	adc	r24, r24
    1440:	bb 1f       	adc	r27, r27
    1442:	26 17       	cp	r18, r22
    1444:	37 07       	cpc	r19, r23
    1446:	48 07       	cpc	r20, r24
    1448:	ab 07       	cpc	r26, r27
    144a:	b0 e8       	ldi	r27, 0x80	; 128
    144c:	09 f0       	breq	.+2      	; 0x1450 <__divsf3_pse+0x56>
    144e:	bb 0b       	sbc	r27, r27
    1450:	80 2d       	mov	r24, r0
    1452:	bf 01       	movw	r22, r30
    1454:	ff 27       	eor	r31, r31
    1456:	93 58       	subi	r25, 0x83	; 131
    1458:	5f 4f       	sbci	r21, 0xFF	; 255
    145a:	2a f0       	brmi	.+10     	; 0x1466 <__divsf3_pse+0x6c>
    145c:	9e 3f       	cpi	r25, 0xFE	; 254
    145e:	51 05       	cpc	r21, r1
    1460:	68 f0       	brcs	.+26     	; 0x147c <__divsf3_pse+0x82>
    1462:	d1 c0       	rjmp	.+418    	; 0x1606 <__fp_inf>
    1464:	51 c1       	rjmp	.+674    	; 0x1708 <__fp_szero>
    1466:	5f 3f       	cpi	r21, 0xFF	; 255
    1468:	ec f3       	brlt	.-6      	; 0x1464 <__divsf3_pse+0x6a>
    146a:	98 3e       	cpi	r25, 0xE8	; 232
    146c:	dc f3       	brlt	.-10     	; 0x1464 <__divsf3_pse+0x6a>
    146e:	86 95       	lsr	r24
    1470:	77 95       	ror	r23
    1472:	67 95       	ror	r22
    1474:	b7 95       	ror	r27
    1476:	f7 95       	ror	r31
    1478:	9f 5f       	subi	r25, 0xFF	; 255
    147a:	c9 f7       	brne	.-14     	; 0x146e <__divsf3_pse+0x74>
    147c:	88 0f       	add	r24, r24
    147e:	91 1d       	adc	r25, r1
    1480:	96 95       	lsr	r25
    1482:	87 95       	ror	r24
    1484:	97 f9       	bld	r25, 7
    1486:	08 95       	ret
    1488:	e1 e0       	ldi	r30, 0x01	; 1
    148a:	66 0f       	add	r22, r22
    148c:	77 1f       	adc	r23, r23
    148e:	88 1f       	adc	r24, r24
    1490:	bb 1f       	adc	r27, r27
    1492:	62 17       	cp	r22, r18
    1494:	73 07       	cpc	r23, r19
    1496:	84 07       	cpc	r24, r20
    1498:	ba 07       	cpc	r27, r26
    149a:	20 f0       	brcs	.+8      	; 0x14a4 <__divsf3_pse+0xaa>
    149c:	62 1b       	sub	r22, r18
    149e:	73 0b       	sbc	r23, r19
    14a0:	84 0b       	sbc	r24, r20
    14a2:	ba 0b       	sbc	r27, r26
    14a4:	ee 1f       	adc	r30, r30
    14a6:	88 f7       	brcc	.-30     	; 0x148a <__divsf3_pse+0x90>
    14a8:	e0 95       	com	r30
    14aa:	08 95       	ret

000014ac <__fixsfsi>:
    14ac:	04 d0       	rcall	.+8      	; 0x14b6 <__fixunssfsi>
    14ae:	68 94       	set
    14b0:	b1 11       	cpse	r27, r1
    14b2:	2a c1       	rjmp	.+596    	; 0x1708 <__fp_szero>
    14b4:	08 95       	ret

000014b6 <__fixunssfsi>:
    14b6:	0d d1       	rcall	.+538    	; 0x16d2 <__fp_splitA>
    14b8:	88 f0       	brcs	.+34     	; 0x14dc <__fixunssfsi+0x26>
    14ba:	9f 57       	subi	r25, 0x7F	; 127
    14bc:	90 f0       	brcs	.+36     	; 0x14e2 <__fixunssfsi+0x2c>
    14be:	b9 2f       	mov	r27, r25
    14c0:	99 27       	eor	r25, r25
    14c2:	b7 51       	subi	r27, 0x17	; 23
    14c4:	a0 f0       	brcs	.+40     	; 0x14ee <__fixunssfsi+0x38>
    14c6:	d1 f0       	breq	.+52     	; 0x14fc <__fixunssfsi+0x46>
    14c8:	66 0f       	add	r22, r22
    14ca:	77 1f       	adc	r23, r23
    14cc:	88 1f       	adc	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	1a f0       	brmi	.+6      	; 0x14d8 <__fixunssfsi+0x22>
    14d2:	ba 95       	dec	r27
    14d4:	c9 f7       	brne	.-14     	; 0x14c8 <__fixunssfsi+0x12>
    14d6:	12 c0       	rjmp	.+36     	; 0x14fc <__fixunssfsi+0x46>
    14d8:	b1 30       	cpi	r27, 0x01	; 1
    14da:	81 f0       	breq	.+32     	; 0x14fc <__fixunssfsi+0x46>
    14dc:	14 d1       	rcall	.+552    	; 0x1706 <__fp_zero>
    14de:	b1 e0       	ldi	r27, 0x01	; 1
    14e0:	08 95       	ret
    14e2:	11 c1       	rjmp	.+546    	; 0x1706 <__fp_zero>
    14e4:	67 2f       	mov	r22, r23
    14e6:	78 2f       	mov	r23, r24
    14e8:	88 27       	eor	r24, r24
    14ea:	b8 5f       	subi	r27, 0xF8	; 248
    14ec:	39 f0       	breq	.+14     	; 0x14fc <__fixunssfsi+0x46>
    14ee:	b9 3f       	cpi	r27, 0xF9	; 249
    14f0:	cc f3       	brlt	.-14     	; 0x14e4 <__fixunssfsi+0x2e>
    14f2:	86 95       	lsr	r24
    14f4:	77 95       	ror	r23
    14f6:	67 95       	ror	r22
    14f8:	b3 95       	inc	r27
    14fa:	d9 f7       	brne	.-10     	; 0x14f2 <__fixunssfsi+0x3c>
    14fc:	3e f4       	brtc	.+14     	; 0x150c <__fixunssfsi+0x56>
    14fe:	90 95       	com	r25
    1500:	80 95       	com	r24
    1502:	70 95       	com	r23
    1504:	61 95       	neg	r22
    1506:	7f 4f       	sbci	r23, 0xFF	; 255
    1508:	8f 4f       	sbci	r24, 0xFF	; 255
    150a:	9f 4f       	sbci	r25, 0xFF	; 255
    150c:	08 95       	ret

0000150e <__floatunsisf>:
    150e:	e8 94       	clt
    1510:	09 c0       	rjmp	.+18     	; 0x1524 <__floatsisf+0x12>

00001512 <__floatsisf>:
    1512:	97 fb       	bst	r25, 7
    1514:	3e f4       	brtc	.+14     	; 0x1524 <__floatsisf+0x12>
    1516:	90 95       	com	r25
    1518:	80 95       	com	r24
    151a:	70 95       	com	r23
    151c:	61 95       	neg	r22
    151e:	7f 4f       	sbci	r23, 0xFF	; 255
    1520:	8f 4f       	sbci	r24, 0xFF	; 255
    1522:	9f 4f       	sbci	r25, 0xFF	; 255
    1524:	99 23       	and	r25, r25
    1526:	a9 f0       	breq	.+42     	; 0x1552 <__floatsisf+0x40>
    1528:	f9 2f       	mov	r31, r25
    152a:	96 e9       	ldi	r25, 0x96	; 150
    152c:	bb 27       	eor	r27, r27
    152e:	93 95       	inc	r25
    1530:	f6 95       	lsr	r31
    1532:	87 95       	ror	r24
    1534:	77 95       	ror	r23
    1536:	67 95       	ror	r22
    1538:	b7 95       	ror	r27
    153a:	f1 11       	cpse	r31, r1
    153c:	f8 cf       	rjmp	.-16     	; 0x152e <__floatsisf+0x1c>
    153e:	fa f4       	brpl	.+62     	; 0x157e <__floatsisf+0x6c>
    1540:	bb 0f       	add	r27, r27
    1542:	11 f4       	brne	.+4      	; 0x1548 <__floatsisf+0x36>
    1544:	60 ff       	sbrs	r22, 0
    1546:	1b c0       	rjmp	.+54     	; 0x157e <__floatsisf+0x6c>
    1548:	6f 5f       	subi	r22, 0xFF	; 255
    154a:	7f 4f       	sbci	r23, 0xFF	; 255
    154c:	8f 4f       	sbci	r24, 0xFF	; 255
    154e:	9f 4f       	sbci	r25, 0xFF	; 255
    1550:	16 c0       	rjmp	.+44     	; 0x157e <__floatsisf+0x6c>
    1552:	88 23       	and	r24, r24
    1554:	11 f0       	breq	.+4      	; 0x155a <__floatsisf+0x48>
    1556:	96 e9       	ldi	r25, 0x96	; 150
    1558:	11 c0       	rjmp	.+34     	; 0x157c <__floatsisf+0x6a>
    155a:	77 23       	and	r23, r23
    155c:	21 f0       	breq	.+8      	; 0x1566 <__floatsisf+0x54>
    155e:	9e e8       	ldi	r25, 0x8E	; 142
    1560:	87 2f       	mov	r24, r23
    1562:	76 2f       	mov	r23, r22
    1564:	05 c0       	rjmp	.+10     	; 0x1570 <__floatsisf+0x5e>
    1566:	66 23       	and	r22, r22
    1568:	71 f0       	breq	.+28     	; 0x1586 <__floatsisf+0x74>
    156a:	96 e8       	ldi	r25, 0x86	; 134
    156c:	86 2f       	mov	r24, r22
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	2a f0       	brmi	.+10     	; 0x157e <__floatsisf+0x6c>
    1574:	9a 95       	dec	r25
    1576:	66 0f       	add	r22, r22
    1578:	77 1f       	adc	r23, r23
    157a:	88 1f       	adc	r24, r24
    157c:	da f7       	brpl	.-10     	; 0x1574 <__floatsisf+0x62>
    157e:	88 0f       	add	r24, r24
    1580:	96 95       	lsr	r25
    1582:	87 95       	ror	r24
    1584:	97 f9       	bld	r25, 7
    1586:	08 95       	ret

00001588 <__fp_arccos>:
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	1f 93       	push	r17
    158e:	0f 93       	push	r16
    1590:	8b 01       	movw	r16, r22
    1592:	ec 01       	movw	r28, r24
    1594:	e8 ef       	ldi	r30, 0xF8	; 248
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	3f d0       	rcall	.+126    	; 0x1618 <__fp_powser>
    159a:	82 d0       	rcall	.+260    	; 0x16a0 <__fp_round>
    159c:	98 01       	movw	r18, r16
    159e:	ae 01       	movw	r20, r28
    15a0:	8b 01       	movw	r16, r22
    15a2:	ec 01       	movw	r28, r24
    15a4:	60 e0       	ldi	r22, 0x00	; 0
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	80 e8       	ldi	r24, 0x80	; 128
    15aa:	9f e3       	ldi	r25, 0x3F	; 63
    15ac:	97 de       	rcall	.-722    	; 0x12dc <__subsf3>
    15ae:	23 d1       	rcall	.+582    	; 0x17f6 <sqrt>
    15b0:	98 01       	movw	r18, r16
    15b2:	ae 01       	movw	r20, r28
    15b4:	0f 91       	pop	r16
    15b6:	1f 91       	pop	r17
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	bb c0       	rjmp	.+374    	; 0x1734 <__mulsf3x>

000015be <__fp_cmp>:
    15be:	99 0f       	add	r25, r25
    15c0:	00 08       	sbc	r0, r0
    15c2:	55 0f       	add	r21, r21
    15c4:	aa 0b       	sbc	r26, r26
    15c6:	e0 e8       	ldi	r30, 0x80	; 128
    15c8:	fe ef       	ldi	r31, 0xFE	; 254
    15ca:	16 16       	cp	r1, r22
    15cc:	17 06       	cpc	r1, r23
    15ce:	e8 07       	cpc	r30, r24
    15d0:	f9 07       	cpc	r31, r25
    15d2:	c0 f0       	brcs	.+48     	; 0x1604 <__fp_cmp+0x46>
    15d4:	12 16       	cp	r1, r18
    15d6:	13 06       	cpc	r1, r19
    15d8:	e4 07       	cpc	r30, r20
    15da:	f5 07       	cpc	r31, r21
    15dc:	98 f0       	brcs	.+38     	; 0x1604 <__fp_cmp+0x46>
    15de:	62 1b       	sub	r22, r18
    15e0:	73 0b       	sbc	r23, r19
    15e2:	84 0b       	sbc	r24, r20
    15e4:	95 0b       	sbc	r25, r21
    15e6:	39 f4       	brne	.+14     	; 0x15f6 <__fp_cmp+0x38>
    15e8:	0a 26       	eor	r0, r26
    15ea:	61 f0       	breq	.+24     	; 0x1604 <__fp_cmp+0x46>
    15ec:	23 2b       	or	r18, r19
    15ee:	24 2b       	or	r18, r20
    15f0:	25 2b       	or	r18, r21
    15f2:	21 f4       	brne	.+8      	; 0x15fc <__fp_cmp+0x3e>
    15f4:	08 95       	ret
    15f6:	0a 26       	eor	r0, r26
    15f8:	09 f4       	brne	.+2      	; 0x15fc <__fp_cmp+0x3e>
    15fa:	a1 40       	sbci	r26, 0x01	; 1
    15fc:	a6 95       	lsr	r26
    15fe:	8f ef       	ldi	r24, 0xFF	; 255
    1600:	81 1d       	adc	r24, r1
    1602:	81 1d       	adc	r24, r1
    1604:	08 95       	ret

00001606 <__fp_inf>:
    1606:	97 f9       	bld	r25, 7
    1608:	9f 67       	ori	r25, 0x7F	; 127
    160a:	80 e8       	ldi	r24, 0x80	; 128
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	08 95       	ret

00001612 <__fp_nan>:
    1612:	9f ef       	ldi	r25, 0xFF	; 255
    1614:	80 ec       	ldi	r24, 0xC0	; 192
    1616:	08 95       	ret

00001618 <__fp_powser>:
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	1f 93       	push	r17
    161e:	0f 93       	push	r16
    1620:	ff 92       	push	r15
    1622:	ef 92       	push	r14
    1624:	df 92       	push	r13
    1626:	7b 01       	movw	r14, r22
    1628:	8c 01       	movw	r16, r24
    162a:	68 94       	set
    162c:	05 c0       	rjmp	.+10     	; 0x1638 <__fp_powser+0x20>
    162e:	da 2e       	mov	r13, r26
    1630:	ef 01       	movw	r28, r30
    1632:	80 d0       	rcall	.+256    	; 0x1734 <__mulsf3x>
    1634:	fe 01       	movw	r30, r28
    1636:	e8 94       	clt
    1638:	a5 91       	lpm	r26, Z+
    163a:	25 91       	lpm	r18, Z+
    163c:	35 91       	lpm	r19, Z+
    163e:	45 91       	lpm	r20, Z+
    1640:	55 91       	lpm	r21, Z+
    1642:	ae f3       	brts	.-22     	; 0x162e <__fp_powser+0x16>
    1644:	ef 01       	movw	r28, r30
    1646:	5c de       	rcall	.-840    	; 0x1300 <__addsf3x>
    1648:	fe 01       	movw	r30, r28
    164a:	97 01       	movw	r18, r14
    164c:	a8 01       	movw	r20, r16
    164e:	da 94       	dec	r13
    1650:	79 f7       	brne	.-34     	; 0x1630 <__fp_powser+0x18>
    1652:	df 90       	pop	r13
    1654:	ef 90       	pop	r14
    1656:	ff 90       	pop	r15
    1658:	0f 91       	pop	r16
    165a:	1f 91       	pop	r17
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <__fp_powsodd>:
    1662:	9f 93       	push	r25
    1664:	8f 93       	push	r24
    1666:	7f 93       	push	r23
    1668:	6f 93       	push	r22
    166a:	ff 93       	push	r31
    166c:	ef 93       	push	r30
    166e:	9b 01       	movw	r18, r22
    1670:	ac 01       	movw	r20, r24
    1672:	54 d0       	rcall	.+168    	; 0x171c <__mulsf3>
    1674:	ef 91       	pop	r30
    1676:	ff 91       	pop	r31
    1678:	cf df       	rcall	.-98     	; 0x1618 <__fp_powser>
    167a:	2f 91       	pop	r18
    167c:	3f 91       	pop	r19
    167e:	4f 91       	pop	r20
    1680:	5f 91       	pop	r21
    1682:	4c c0       	rjmp	.+152    	; 0x171c <__mulsf3>

00001684 <__fp_pscA>:
    1684:	00 24       	eor	r0, r0
    1686:	0a 94       	dec	r0
    1688:	16 16       	cp	r1, r22
    168a:	17 06       	cpc	r1, r23
    168c:	18 06       	cpc	r1, r24
    168e:	09 06       	cpc	r0, r25
    1690:	08 95       	ret

00001692 <__fp_pscB>:
    1692:	00 24       	eor	r0, r0
    1694:	0a 94       	dec	r0
    1696:	12 16       	cp	r1, r18
    1698:	13 06       	cpc	r1, r19
    169a:	14 06       	cpc	r1, r20
    169c:	05 06       	cpc	r0, r21
    169e:	08 95       	ret

000016a0 <__fp_round>:
    16a0:	09 2e       	mov	r0, r25
    16a2:	03 94       	inc	r0
    16a4:	00 0c       	add	r0, r0
    16a6:	11 f4       	brne	.+4      	; 0x16ac <__fp_round+0xc>
    16a8:	88 23       	and	r24, r24
    16aa:	52 f0       	brmi	.+20     	; 0x16c0 <__fp_round+0x20>
    16ac:	bb 0f       	add	r27, r27
    16ae:	40 f4       	brcc	.+16     	; 0x16c0 <__fp_round+0x20>
    16b0:	bf 2b       	or	r27, r31
    16b2:	11 f4       	brne	.+4      	; 0x16b8 <__fp_round+0x18>
    16b4:	60 ff       	sbrs	r22, 0
    16b6:	04 c0       	rjmp	.+8      	; 0x16c0 <__fp_round+0x20>
    16b8:	6f 5f       	subi	r22, 0xFF	; 255
    16ba:	7f 4f       	sbci	r23, 0xFF	; 255
    16bc:	8f 4f       	sbci	r24, 0xFF	; 255
    16be:	9f 4f       	sbci	r25, 0xFF	; 255
    16c0:	08 95       	ret

000016c2 <__fp_split3>:
    16c2:	57 fd       	sbrc	r21, 7
    16c4:	90 58       	subi	r25, 0x80	; 128
    16c6:	44 0f       	add	r20, r20
    16c8:	55 1f       	adc	r21, r21
    16ca:	59 f0       	breq	.+22     	; 0x16e2 <__fp_splitA+0x10>
    16cc:	5f 3f       	cpi	r21, 0xFF	; 255
    16ce:	71 f0       	breq	.+28     	; 0x16ec <__fp_splitA+0x1a>
    16d0:	47 95       	ror	r20

000016d2 <__fp_splitA>:
    16d2:	88 0f       	add	r24, r24
    16d4:	97 fb       	bst	r25, 7
    16d6:	99 1f       	adc	r25, r25
    16d8:	61 f0       	breq	.+24     	; 0x16f2 <__fp_splitA+0x20>
    16da:	9f 3f       	cpi	r25, 0xFF	; 255
    16dc:	79 f0       	breq	.+30     	; 0x16fc <__fp_splitA+0x2a>
    16de:	87 95       	ror	r24
    16e0:	08 95       	ret
    16e2:	12 16       	cp	r1, r18
    16e4:	13 06       	cpc	r1, r19
    16e6:	14 06       	cpc	r1, r20
    16e8:	55 1f       	adc	r21, r21
    16ea:	f2 cf       	rjmp	.-28     	; 0x16d0 <__fp_split3+0xe>
    16ec:	46 95       	lsr	r20
    16ee:	f1 df       	rcall	.-30     	; 0x16d2 <__fp_splitA>
    16f0:	08 c0       	rjmp	.+16     	; 0x1702 <__fp_splitA+0x30>
    16f2:	16 16       	cp	r1, r22
    16f4:	17 06       	cpc	r1, r23
    16f6:	18 06       	cpc	r1, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	f1 cf       	rjmp	.-30     	; 0x16de <__fp_splitA+0xc>
    16fc:	86 95       	lsr	r24
    16fe:	71 05       	cpc	r23, r1
    1700:	61 05       	cpc	r22, r1
    1702:	08 94       	sec
    1704:	08 95       	ret

00001706 <__fp_zero>:
    1706:	e8 94       	clt

00001708 <__fp_szero>:
    1708:	bb 27       	eor	r27, r27
    170a:	66 27       	eor	r22, r22
    170c:	77 27       	eor	r23, r23
    170e:	cb 01       	movw	r24, r22
    1710:	97 f9       	bld	r25, 7
    1712:	08 95       	ret

00001714 <__gesf2>:
    1714:	54 df       	rcall	.-344    	; 0x15be <__fp_cmp>
    1716:	08 f4       	brcc	.+2      	; 0x171a <__gesf2+0x6>
    1718:	8f ef       	ldi	r24, 0xFF	; 255
    171a:	08 95       	ret

0000171c <__mulsf3>:
    171c:	0b d0       	rcall	.+22     	; 0x1734 <__mulsf3x>
    171e:	c0 cf       	rjmp	.-128    	; 0x16a0 <__fp_round>
    1720:	b1 df       	rcall	.-158    	; 0x1684 <__fp_pscA>
    1722:	28 f0       	brcs	.+10     	; 0x172e <__mulsf3+0x12>
    1724:	b6 df       	rcall	.-148    	; 0x1692 <__fp_pscB>
    1726:	18 f0       	brcs	.+6      	; 0x172e <__mulsf3+0x12>
    1728:	95 23       	and	r25, r21
    172a:	09 f0       	breq	.+2      	; 0x172e <__mulsf3+0x12>
    172c:	6c cf       	rjmp	.-296    	; 0x1606 <__fp_inf>
    172e:	71 cf       	rjmp	.-286    	; 0x1612 <__fp_nan>
    1730:	11 24       	eor	r1, r1
    1732:	ea cf       	rjmp	.-44     	; 0x1708 <__fp_szero>

00001734 <__mulsf3x>:
    1734:	c6 df       	rcall	.-116    	; 0x16c2 <__fp_split3>
    1736:	a0 f3       	brcs	.-24     	; 0x1720 <__mulsf3+0x4>

00001738 <__mulsf3_pse>:
    1738:	95 9f       	mul	r25, r21
    173a:	d1 f3       	breq	.-12     	; 0x1730 <__mulsf3+0x14>
    173c:	95 0f       	add	r25, r21
    173e:	50 e0       	ldi	r21, 0x00	; 0
    1740:	55 1f       	adc	r21, r21
    1742:	62 9f       	mul	r22, r18
    1744:	f0 01       	movw	r30, r0
    1746:	72 9f       	mul	r23, r18
    1748:	bb 27       	eor	r27, r27
    174a:	f0 0d       	add	r31, r0
    174c:	b1 1d       	adc	r27, r1
    174e:	63 9f       	mul	r22, r19
    1750:	aa 27       	eor	r26, r26
    1752:	f0 0d       	add	r31, r0
    1754:	b1 1d       	adc	r27, r1
    1756:	aa 1f       	adc	r26, r26
    1758:	64 9f       	mul	r22, r20
    175a:	66 27       	eor	r22, r22
    175c:	b0 0d       	add	r27, r0
    175e:	a1 1d       	adc	r26, r1
    1760:	66 1f       	adc	r22, r22
    1762:	82 9f       	mul	r24, r18
    1764:	22 27       	eor	r18, r18
    1766:	b0 0d       	add	r27, r0
    1768:	a1 1d       	adc	r26, r1
    176a:	62 1f       	adc	r22, r18
    176c:	73 9f       	mul	r23, r19
    176e:	b0 0d       	add	r27, r0
    1770:	a1 1d       	adc	r26, r1
    1772:	62 1f       	adc	r22, r18
    1774:	83 9f       	mul	r24, r19
    1776:	a0 0d       	add	r26, r0
    1778:	61 1d       	adc	r22, r1
    177a:	22 1f       	adc	r18, r18
    177c:	74 9f       	mul	r23, r20
    177e:	33 27       	eor	r19, r19
    1780:	a0 0d       	add	r26, r0
    1782:	61 1d       	adc	r22, r1
    1784:	23 1f       	adc	r18, r19
    1786:	84 9f       	mul	r24, r20
    1788:	60 0d       	add	r22, r0
    178a:	21 1d       	adc	r18, r1
    178c:	82 2f       	mov	r24, r18
    178e:	76 2f       	mov	r23, r22
    1790:	6a 2f       	mov	r22, r26
    1792:	11 24       	eor	r1, r1
    1794:	9f 57       	subi	r25, 0x7F	; 127
    1796:	50 40       	sbci	r21, 0x00	; 0
    1798:	8a f0       	brmi	.+34     	; 0x17bc <__mulsf3_pse+0x84>
    179a:	e1 f0       	breq	.+56     	; 0x17d4 <__mulsf3_pse+0x9c>
    179c:	88 23       	and	r24, r24
    179e:	4a f0       	brmi	.+18     	; 0x17b2 <__mulsf3_pse+0x7a>
    17a0:	ee 0f       	add	r30, r30
    17a2:	ff 1f       	adc	r31, r31
    17a4:	bb 1f       	adc	r27, r27
    17a6:	66 1f       	adc	r22, r22
    17a8:	77 1f       	adc	r23, r23
    17aa:	88 1f       	adc	r24, r24
    17ac:	91 50       	subi	r25, 0x01	; 1
    17ae:	50 40       	sbci	r21, 0x00	; 0
    17b0:	a9 f7       	brne	.-22     	; 0x179c <__mulsf3_pse+0x64>
    17b2:	9e 3f       	cpi	r25, 0xFE	; 254
    17b4:	51 05       	cpc	r21, r1
    17b6:	70 f0       	brcs	.+28     	; 0x17d4 <__mulsf3_pse+0x9c>
    17b8:	26 cf       	rjmp	.-436    	; 0x1606 <__fp_inf>
    17ba:	a6 cf       	rjmp	.-180    	; 0x1708 <__fp_szero>
    17bc:	5f 3f       	cpi	r21, 0xFF	; 255
    17be:	ec f3       	brlt	.-6      	; 0x17ba <__mulsf3_pse+0x82>
    17c0:	98 3e       	cpi	r25, 0xE8	; 232
    17c2:	dc f3       	brlt	.-10     	; 0x17ba <__mulsf3_pse+0x82>
    17c4:	86 95       	lsr	r24
    17c6:	77 95       	ror	r23
    17c8:	67 95       	ror	r22
    17ca:	b7 95       	ror	r27
    17cc:	f7 95       	ror	r31
    17ce:	e7 95       	ror	r30
    17d0:	9f 5f       	subi	r25, 0xFF	; 255
    17d2:	c1 f7       	brne	.-16     	; 0x17c4 <__mulsf3_pse+0x8c>
    17d4:	fe 2b       	or	r31, r30
    17d6:	88 0f       	add	r24, r24
    17d8:	91 1d       	adc	r25, r1
    17da:	96 95       	lsr	r25
    17dc:	87 95       	ror	r24
    17de:	97 f9       	bld	r25, 7
    17e0:	08 95       	ret

000017e2 <sin>:
    17e2:	9f 93       	push	r25
    17e4:	5c d0       	rcall	.+184    	; 0x189e <__fp_rempio2>
    17e6:	0f 90       	pop	r0
    17e8:	07 fc       	sbrc	r0, 7
    17ea:	ee 5f       	subi	r30, 0xFE	; 254
    17ec:	7f c0       	rjmp	.+254    	; 0x18ec <__fp_sinus>
    17ee:	11 f4       	brne	.+4      	; 0x17f4 <sin+0x12>
    17f0:	0e f4       	brtc	.+2      	; 0x17f4 <sin+0x12>
    17f2:	0f cf       	rjmp	.-482    	; 0x1612 <__fp_nan>
    17f4:	3e c0       	rjmp	.+124    	; 0x1872 <__fp_mpack>

000017f6 <sqrt>:
    17f6:	6d df       	rcall	.-294    	; 0x16d2 <__fp_splitA>
    17f8:	d0 f3       	brcs	.-12     	; 0x17ee <sin+0xc>
    17fa:	99 23       	and	r25, r25
    17fc:	d9 f3       	breq	.-10     	; 0x17f4 <sin+0x12>
    17fe:	ce f3       	brts	.-14     	; 0x17f2 <sin+0x10>
    1800:	9f 57       	subi	r25, 0x7F	; 127
    1802:	55 0b       	sbc	r21, r21
    1804:	87 ff       	sbrs	r24, 7
    1806:	43 d0       	rcall	.+134    	; 0x188e <__fp_norm2>
    1808:	00 24       	eor	r0, r0
    180a:	a0 e6       	ldi	r26, 0x60	; 96
    180c:	40 ea       	ldi	r20, 0xA0	; 160
    180e:	90 01       	movw	r18, r0
    1810:	80 58       	subi	r24, 0x80	; 128
    1812:	56 95       	lsr	r21
    1814:	97 95       	ror	r25
    1816:	28 f4       	brcc	.+10     	; 0x1822 <sqrt+0x2c>
    1818:	80 5c       	subi	r24, 0xC0	; 192
    181a:	66 0f       	add	r22, r22
    181c:	77 1f       	adc	r23, r23
    181e:	88 1f       	adc	r24, r24
    1820:	20 f0       	brcs	.+8      	; 0x182a <sqrt+0x34>
    1822:	26 17       	cp	r18, r22
    1824:	37 07       	cpc	r19, r23
    1826:	48 07       	cpc	r20, r24
    1828:	30 f4       	brcc	.+12     	; 0x1836 <sqrt+0x40>
    182a:	62 1b       	sub	r22, r18
    182c:	73 0b       	sbc	r23, r19
    182e:	84 0b       	sbc	r24, r20
    1830:	20 29       	or	r18, r0
    1832:	31 29       	or	r19, r1
    1834:	4a 2b       	or	r20, r26
    1836:	a6 95       	lsr	r26
    1838:	17 94       	ror	r1
    183a:	07 94       	ror	r0
    183c:	20 25       	eor	r18, r0
    183e:	31 25       	eor	r19, r1
    1840:	4a 27       	eor	r20, r26
    1842:	58 f7       	brcc	.-42     	; 0x181a <sqrt+0x24>
    1844:	66 0f       	add	r22, r22
    1846:	77 1f       	adc	r23, r23
    1848:	88 1f       	adc	r24, r24
    184a:	20 f0       	brcs	.+8      	; 0x1854 <sqrt+0x5e>
    184c:	26 17       	cp	r18, r22
    184e:	37 07       	cpc	r19, r23
    1850:	48 07       	cpc	r20, r24
    1852:	30 f4       	brcc	.+12     	; 0x1860 <sqrt+0x6a>
    1854:	62 0b       	sbc	r22, r18
    1856:	73 0b       	sbc	r23, r19
    1858:	84 0b       	sbc	r24, r20
    185a:	20 0d       	add	r18, r0
    185c:	31 1d       	adc	r19, r1
    185e:	41 1d       	adc	r20, r1
    1860:	a0 95       	com	r26
    1862:	81 f7       	brne	.-32     	; 0x1844 <sqrt+0x4e>
    1864:	b9 01       	movw	r22, r18
    1866:	84 2f       	mov	r24, r20
    1868:	91 58       	subi	r25, 0x81	; 129
    186a:	88 0f       	add	r24, r24
    186c:	96 95       	lsr	r25
    186e:	87 95       	ror	r24
    1870:	08 95       	ret

00001872 <__fp_mpack>:
    1872:	9f 3f       	cpi	r25, 0xFF	; 255
    1874:	31 f0       	breq	.+12     	; 0x1882 <__fp_mpack_finite+0xc>

00001876 <__fp_mpack_finite>:
    1876:	91 50       	subi	r25, 0x01	; 1
    1878:	20 f4       	brcc	.+8      	; 0x1882 <__fp_mpack_finite+0xc>
    187a:	87 95       	ror	r24
    187c:	77 95       	ror	r23
    187e:	67 95       	ror	r22
    1880:	b7 95       	ror	r27
    1882:	88 0f       	add	r24, r24
    1884:	91 1d       	adc	r25, r1
    1886:	96 95       	lsr	r25
    1888:	87 95       	ror	r24
    188a:	97 f9       	bld	r25, 7
    188c:	08 95       	ret

0000188e <__fp_norm2>:
    188e:	91 50       	subi	r25, 0x01	; 1
    1890:	50 40       	sbci	r21, 0x00	; 0
    1892:	66 0f       	add	r22, r22
    1894:	77 1f       	adc	r23, r23
    1896:	88 1f       	adc	r24, r24
    1898:	d2 f7       	brpl	.-12     	; 0x188e <__fp_norm2>
    189a:	08 95       	ret
    189c:	ba ce       	rjmp	.-652    	; 0x1612 <__fp_nan>

0000189e <__fp_rempio2>:
    189e:	19 df       	rcall	.-462    	; 0x16d2 <__fp_splitA>
    18a0:	e8 f3       	brcs	.-6      	; 0x189c <__fp_norm2+0xe>
    18a2:	e8 94       	clt
    18a4:	e0 e0       	ldi	r30, 0x00	; 0
    18a6:	bb 27       	eor	r27, r27
    18a8:	9f 57       	subi	r25, 0x7F	; 127
    18aa:	f0 f0       	brcs	.+60     	; 0x18e8 <__fp_rempio2+0x4a>
    18ac:	2a ed       	ldi	r18, 0xDA	; 218
    18ae:	3f e0       	ldi	r19, 0x0F	; 15
    18b0:	49 ec       	ldi	r20, 0xC9	; 201
    18b2:	06 c0       	rjmp	.+12     	; 0x18c0 <__fp_rempio2+0x22>
    18b4:	ee 0f       	add	r30, r30
    18b6:	bb 0f       	add	r27, r27
    18b8:	66 1f       	adc	r22, r22
    18ba:	77 1f       	adc	r23, r23
    18bc:	88 1f       	adc	r24, r24
    18be:	28 f0       	brcs	.+10     	; 0x18ca <__fp_rempio2+0x2c>
    18c0:	b2 3a       	cpi	r27, 0xA2	; 162
    18c2:	62 07       	cpc	r22, r18
    18c4:	73 07       	cpc	r23, r19
    18c6:	84 07       	cpc	r24, r20
    18c8:	28 f0       	brcs	.+10     	; 0x18d4 <__fp_rempio2+0x36>
    18ca:	b2 5a       	subi	r27, 0xA2	; 162
    18cc:	62 0b       	sbc	r22, r18
    18ce:	73 0b       	sbc	r23, r19
    18d0:	84 0b       	sbc	r24, r20
    18d2:	e3 95       	inc	r30
    18d4:	9a 95       	dec	r25
    18d6:	72 f7       	brpl	.-36     	; 0x18b4 <__fp_rempio2+0x16>
    18d8:	80 38       	cpi	r24, 0x80	; 128
    18da:	30 f4       	brcc	.+12     	; 0x18e8 <__fp_rempio2+0x4a>
    18dc:	9a 95       	dec	r25
    18de:	bb 0f       	add	r27, r27
    18e0:	66 1f       	adc	r22, r22
    18e2:	77 1f       	adc	r23, r23
    18e4:	88 1f       	adc	r24, r24
    18e6:	d2 f7       	brpl	.-12     	; 0x18dc <__fp_rempio2+0x3e>
    18e8:	90 48       	sbci	r25, 0x80	; 128
    18ea:	c5 cf       	rjmp	.-118    	; 0x1876 <__fp_mpack_finite>

000018ec <__fp_sinus>:
    18ec:	ef 93       	push	r30
    18ee:	e0 ff       	sbrs	r30, 0
    18f0:	06 c0       	rjmp	.+12     	; 0x18fe <__fp_sinus+0x12>
    18f2:	a2 ea       	ldi	r26, 0xA2	; 162
    18f4:	2a ed       	ldi	r18, 0xDA	; 218
    18f6:	3f e0       	ldi	r19, 0x0F	; 15
    18f8:	49 ec       	ldi	r20, 0xC9	; 201
    18fa:	5f eb       	ldi	r21, 0xBF	; 191
    18fc:	01 dd       	rcall	.-1534   	; 0x1300 <__addsf3x>
    18fe:	d0 de       	rcall	.-608    	; 0x16a0 <__fp_round>
    1900:	0f 90       	pop	r0
    1902:	03 94       	inc	r0
    1904:	01 fc       	sbrc	r0, 1
    1906:	90 58       	subi	r25, 0x80	; 128
    1908:	e0 e2       	ldi	r30, 0x20	; 32
    190a:	f1 e0       	ldi	r31, 0x01	; 1
    190c:	aa ce       	rjmp	.-684    	; 0x1662 <__fp_powsodd>

0000190e <__divmodhi4>:
    190e:	97 fb       	bst	r25, 7
    1910:	07 2e       	mov	r0, r23
    1912:	16 f4       	brtc	.+4      	; 0x1918 <__divmodhi4+0xa>
    1914:	00 94       	com	r0
    1916:	06 d0       	rcall	.+12     	; 0x1924 <__divmodhi4_neg1>
    1918:	77 fd       	sbrc	r23, 7
    191a:	08 d0       	rcall	.+16     	; 0x192c <__divmodhi4_neg2>
    191c:	27 d0       	rcall	.+78     	; 0x196c <__udivmodhi4>
    191e:	07 fc       	sbrc	r0, 7
    1920:	05 d0       	rcall	.+10     	; 0x192c <__divmodhi4_neg2>
    1922:	3e f4       	brtc	.+14     	; 0x1932 <__divmodhi4_exit>

00001924 <__divmodhi4_neg1>:
    1924:	90 95       	com	r25
    1926:	81 95       	neg	r24
    1928:	9f 4f       	sbci	r25, 0xFF	; 255
    192a:	08 95       	ret

0000192c <__divmodhi4_neg2>:
    192c:	70 95       	com	r23
    192e:	61 95       	neg	r22
    1930:	7f 4f       	sbci	r23, 0xFF	; 255

00001932 <__divmodhi4_exit>:
    1932:	08 95       	ret

00001934 <__divmodsi4>:
    1934:	05 2e       	mov	r0, r21
    1936:	97 fb       	bst	r25, 7
    1938:	16 f4       	brtc	.+4      	; 0x193e <__divmodsi4+0xa>
    193a:	00 94       	com	r0
    193c:	0f d0       	rcall	.+30     	; 0x195c <__negsi2>
    193e:	57 fd       	sbrc	r21, 7
    1940:	05 d0       	rcall	.+10     	; 0x194c <__divmodsi4_neg2>
    1942:	28 d0       	rcall	.+80     	; 0x1994 <__udivmodsi4>
    1944:	07 fc       	sbrc	r0, 7
    1946:	02 d0       	rcall	.+4      	; 0x194c <__divmodsi4_neg2>
    1948:	46 f4       	brtc	.+16     	; 0x195a <__divmodsi4_exit>
    194a:	08 c0       	rjmp	.+16     	; 0x195c <__negsi2>

0000194c <__divmodsi4_neg2>:
    194c:	50 95       	com	r21
    194e:	40 95       	com	r20
    1950:	30 95       	com	r19
    1952:	21 95       	neg	r18
    1954:	3f 4f       	sbci	r19, 0xFF	; 255
    1956:	4f 4f       	sbci	r20, 0xFF	; 255
    1958:	5f 4f       	sbci	r21, 0xFF	; 255

0000195a <__divmodsi4_exit>:
    195a:	08 95       	ret

0000195c <__negsi2>:
    195c:	90 95       	com	r25
    195e:	80 95       	com	r24
    1960:	70 95       	com	r23
    1962:	61 95       	neg	r22
    1964:	7f 4f       	sbci	r23, 0xFF	; 255
    1966:	8f 4f       	sbci	r24, 0xFF	; 255
    1968:	9f 4f       	sbci	r25, 0xFF	; 255
    196a:	08 95       	ret

0000196c <__udivmodhi4>:
    196c:	aa 1b       	sub	r26, r26
    196e:	bb 1b       	sub	r27, r27
    1970:	51 e1       	ldi	r21, 0x11	; 17
    1972:	07 c0       	rjmp	.+14     	; 0x1982 <__udivmodhi4_ep>

00001974 <__udivmodhi4_loop>:
    1974:	aa 1f       	adc	r26, r26
    1976:	bb 1f       	adc	r27, r27
    1978:	a6 17       	cp	r26, r22
    197a:	b7 07       	cpc	r27, r23
    197c:	10 f0       	brcs	.+4      	; 0x1982 <__udivmodhi4_ep>
    197e:	a6 1b       	sub	r26, r22
    1980:	b7 0b       	sbc	r27, r23

00001982 <__udivmodhi4_ep>:
    1982:	88 1f       	adc	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	5a 95       	dec	r21
    1988:	a9 f7       	brne	.-22     	; 0x1974 <__udivmodhi4_loop>
    198a:	80 95       	com	r24
    198c:	90 95       	com	r25
    198e:	bc 01       	movw	r22, r24
    1990:	cd 01       	movw	r24, r26
    1992:	08 95       	ret

00001994 <__udivmodsi4>:
    1994:	a1 e2       	ldi	r26, 0x21	; 33
    1996:	1a 2e       	mov	r1, r26
    1998:	aa 1b       	sub	r26, r26
    199a:	bb 1b       	sub	r27, r27
    199c:	fd 01       	movw	r30, r26
    199e:	0d c0       	rjmp	.+26     	; 0x19ba <__udivmodsi4_ep>

000019a0 <__udivmodsi4_loop>:
    19a0:	aa 1f       	adc	r26, r26
    19a2:	bb 1f       	adc	r27, r27
    19a4:	ee 1f       	adc	r30, r30
    19a6:	ff 1f       	adc	r31, r31
    19a8:	a2 17       	cp	r26, r18
    19aa:	b3 07       	cpc	r27, r19
    19ac:	e4 07       	cpc	r30, r20
    19ae:	f5 07       	cpc	r31, r21
    19b0:	20 f0       	brcs	.+8      	; 0x19ba <__udivmodsi4_ep>
    19b2:	a2 1b       	sub	r26, r18
    19b4:	b3 0b       	sbc	r27, r19
    19b6:	e4 0b       	sbc	r30, r20
    19b8:	f5 0b       	sbc	r31, r21

000019ba <__udivmodsi4_ep>:
    19ba:	66 1f       	adc	r22, r22
    19bc:	77 1f       	adc	r23, r23
    19be:	88 1f       	adc	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	1a 94       	dec	r1
    19c4:	69 f7       	brne	.-38     	; 0x19a0 <__udivmodsi4_loop>
    19c6:	60 95       	com	r22
    19c8:	70 95       	com	r23
    19ca:	80 95       	com	r24
    19cc:	90 95       	com	r25
    19ce:	9b 01       	movw	r18, r22
    19d0:	ac 01       	movw	r20, r24
    19d2:	bd 01       	movw	r22, r26
    19d4:	cf 01       	movw	r24, r30
    19d6:	08 95       	ret

000019d8 <__itoa_ncheck>:
    19d8:	bb 27       	eor	r27, r27
    19da:	4a 30       	cpi	r20, 0x0A	; 10
    19dc:	31 f4       	brne	.+12     	; 0x19ea <__itoa_ncheck+0x12>
    19de:	99 23       	and	r25, r25
    19e0:	22 f4       	brpl	.+8      	; 0x19ea <__itoa_ncheck+0x12>
    19e2:	bd e2       	ldi	r27, 0x2D	; 45
    19e4:	90 95       	com	r25
    19e6:	81 95       	neg	r24
    19e8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ea:	01 c0       	rjmp	.+2      	; 0x19ee <__utoa_common>

000019ec <__utoa_ncheck>:
    19ec:	bb 27       	eor	r27, r27

000019ee <__utoa_common>:
    19ee:	fb 01       	movw	r30, r22
    19f0:	55 27       	eor	r21, r21
    19f2:	aa 27       	eor	r26, r26
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	aa 1f       	adc	r26, r26
    19fa:	a4 17       	cp	r26, r20
    19fc:	10 f0       	brcs	.+4      	; 0x1a02 <__utoa_common+0x14>
    19fe:	a4 1b       	sub	r26, r20
    1a00:	83 95       	inc	r24
    1a02:	50 51       	subi	r21, 0x10	; 16
    1a04:	b9 f7       	brne	.-18     	; 0x19f4 <__utoa_common+0x6>
    1a06:	a0 5d       	subi	r26, 0xD0	; 208
    1a08:	aa 33       	cpi	r26, 0x3A	; 58
    1a0a:	08 f0       	brcs	.+2      	; 0x1a0e <__utoa_common+0x20>
    1a0c:	a9 5d       	subi	r26, 0xD9	; 217
    1a0e:	a1 93       	st	Z+, r26
    1a10:	00 97       	sbiw	r24, 0x00	; 0
    1a12:	79 f7       	brne	.-34     	; 0x19f2 <__utoa_common+0x4>
    1a14:	b1 11       	cpse	r27, r1
    1a16:	b1 93       	st	Z+, r27
    1a18:	11 92       	st	Z+, r1
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	e7 c3       	rjmp	.+1998   	; 0x21ec <strrev>

00001a1e <fdevopen>:
    1a1e:	0f 93       	push	r16
    1a20:	1f 93       	push	r17
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	31 f4       	brne	.+12     	; 0x1a36 <fdevopen+0x18>
    1a2a:	61 15       	cp	r22, r1
    1a2c:	71 05       	cpc	r23, r1
    1a2e:	19 f4       	brne	.+6      	; 0x1a36 <fdevopen+0x18>
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	39 c0       	rjmp	.+114    	; 0x1aa8 <fdevopen+0x8a>
    1a36:	8b 01       	movw	r16, r22
    1a38:	ec 01       	movw	r28, r24
    1a3a:	6e e0       	ldi	r22, 0x0E	; 14
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	7c d2       	rcall	.+1272   	; 0x1f3c <calloc>
    1a44:	fc 01       	movw	r30, r24
    1a46:	89 2b       	or	r24, r25
    1a48:	99 f3       	breq	.-26     	; 0x1a30 <fdevopen+0x12>
    1a4a:	80 e8       	ldi	r24, 0x80	; 128
    1a4c:	83 83       	std	Z+3, r24	; 0x03
    1a4e:	01 15       	cp	r16, r1
    1a50:	11 05       	cpc	r17, r1
    1a52:	71 f0       	breq	.+28     	; 0x1a70 <fdevopen+0x52>
    1a54:	13 87       	std	Z+11, r17	; 0x0b
    1a56:	02 87       	std	Z+10, r16	; 0x0a
    1a58:	81 e8       	ldi	r24, 0x81	; 129
    1a5a:	83 83       	std	Z+3, r24	; 0x03
    1a5c:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <__iob>
    1a60:	90 91 ba 05 	lds	r25, 0x05BA	; 0x8005ba <__iob+0x1>
    1a64:	89 2b       	or	r24, r25
    1a66:	21 f4       	brne	.+8      	; 0x1a70 <fdevopen+0x52>
    1a68:	f0 93 ba 05 	sts	0x05BA, r31	; 0x8005ba <__iob+0x1>
    1a6c:	e0 93 b9 05 	sts	0x05B9, r30	; 0x8005b9 <__iob>
    1a70:	20 97       	sbiw	r28, 0x00	; 0
    1a72:	c9 f0       	breq	.+50     	; 0x1aa6 <fdevopen+0x88>
    1a74:	d1 87       	std	Z+9, r29	; 0x09
    1a76:	c0 87       	std	Z+8, r28	; 0x08
    1a78:	83 81       	ldd	r24, Z+3	; 0x03
    1a7a:	82 60       	ori	r24, 0x02	; 2
    1a7c:	83 83       	std	Z+3, r24	; 0x03
    1a7e:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <__iob+0x2>
    1a82:	90 91 bc 05 	lds	r25, 0x05BC	; 0x8005bc <__iob+0x3>
    1a86:	89 2b       	or	r24, r25
    1a88:	71 f4       	brne	.+28     	; 0x1aa6 <fdevopen+0x88>
    1a8a:	f0 93 bc 05 	sts	0x05BC, r31	; 0x8005bc <__iob+0x3>
    1a8e:	e0 93 bb 05 	sts	0x05BB, r30	; 0x8005bb <__iob+0x2>
    1a92:	80 91 bd 05 	lds	r24, 0x05BD	; 0x8005bd <__iob+0x4>
    1a96:	90 91 be 05 	lds	r25, 0x05BE	; 0x8005be <__iob+0x5>
    1a9a:	89 2b       	or	r24, r25
    1a9c:	21 f4       	brne	.+8      	; 0x1aa6 <fdevopen+0x88>
    1a9e:	f0 93 be 05 	sts	0x05BE, r31	; 0x8005be <__iob+0x5>
    1aa2:	e0 93 bd 05 	sts	0x05BD, r30	; 0x8005bd <__iob+0x4>
    1aa6:	cf 01       	movw	r24, r30
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	1f 91       	pop	r17
    1aae:	0f 91       	pop	r16
    1ab0:	08 95       	ret

00001ab2 <printf>:
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	ae 01       	movw	r20, r28
    1abc:	4a 5f       	subi	r20, 0xFA	; 250
    1abe:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac0:	fa 01       	movw	r30, r20
    1ac2:	61 91       	ld	r22, Z+
    1ac4:	71 91       	ld	r23, Z+
    1ac6:	af 01       	movw	r20, r30
    1ac8:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <__iob+0x2>
    1acc:	90 91 bc 05 	lds	r25, 0x05BC	; 0x8005bc <__iob+0x3>
    1ad0:	38 d0       	rcall	.+112    	; 0x1b42 <vfprintf>
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	08 95       	ret

00001ad8 <putchar>:
    1ad8:	60 91 bb 05 	lds	r22, 0x05BB	; 0x8005bb <__iob+0x2>
    1adc:	70 91 bc 05 	lds	r23, 0x05BC	; 0x8005bc <__iob+0x3>
    1ae0:	95 c3       	rjmp	.+1834   	; 0x220c <fputc>

00001ae2 <puts>:
    1ae2:	0f 93       	push	r16
    1ae4:	1f 93       	push	r17
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
    1aea:	e0 91 bb 05 	lds	r30, 0x05BB	; 0x8005bb <__iob+0x2>
    1aee:	f0 91 bc 05 	lds	r31, 0x05BC	; 0x8005bc <__iob+0x3>
    1af2:	23 81       	ldd	r18, Z+3	; 0x03
    1af4:	21 ff       	sbrs	r18, 1
    1af6:	1b c0       	rjmp	.+54     	; 0x1b2e <puts+0x4c>
    1af8:	8c 01       	movw	r16, r24
    1afa:	d0 e0       	ldi	r29, 0x00	; 0
    1afc:	c0 e0       	ldi	r28, 0x00	; 0
    1afe:	f8 01       	movw	r30, r16
    1b00:	81 91       	ld	r24, Z+
    1b02:	8f 01       	movw	r16, r30
    1b04:	60 91 bb 05 	lds	r22, 0x05BB	; 0x8005bb <__iob+0x2>
    1b08:	70 91 bc 05 	lds	r23, 0x05BC	; 0x8005bc <__iob+0x3>
    1b0c:	db 01       	movw	r26, r22
    1b0e:	18 96       	adiw	r26, 0x08	; 8
    1b10:	ed 91       	ld	r30, X+
    1b12:	fc 91       	ld	r31, X
    1b14:	19 97       	sbiw	r26, 0x09	; 9
    1b16:	88 23       	and	r24, r24
    1b18:	31 f0       	breq	.+12     	; 0x1b26 <puts+0x44>
    1b1a:	19 95       	eicall
    1b1c:	89 2b       	or	r24, r25
    1b1e:	79 f3       	breq	.-34     	; 0x1afe <puts+0x1c>
    1b20:	df ef       	ldi	r29, 0xFF	; 255
    1b22:	cf ef       	ldi	r28, 0xFF	; 255
    1b24:	ec cf       	rjmp	.-40     	; 0x1afe <puts+0x1c>
    1b26:	8a e0       	ldi	r24, 0x0A	; 10
    1b28:	19 95       	eicall
    1b2a:	89 2b       	or	r24, r25
    1b2c:	19 f0       	breq	.+6      	; 0x1b34 <puts+0x52>
    1b2e:	8f ef       	ldi	r24, 0xFF	; 255
    1b30:	9f ef       	ldi	r25, 0xFF	; 255
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <puts+0x56>
    1b34:	8d 2f       	mov	r24, r29
    1b36:	9c 2f       	mov	r25, r28
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	1f 91       	pop	r17
    1b3e:	0f 91       	pop	r16
    1b40:	08 95       	ret

00001b42 <vfprintf>:
    1b42:	2f 92       	push	r2
    1b44:	3f 92       	push	r3
    1b46:	4f 92       	push	r4
    1b48:	5f 92       	push	r5
    1b4a:	6f 92       	push	r6
    1b4c:	7f 92       	push	r7
    1b4e:	8f 92       	push	r8
    1b50:	9f 92       	push	r9
    1b52:	af 92       	push	r10
    1b54:	bf 92       	push	r11
    1b56:	cf 92       	push	r12
    1b58:	df 92       	push	r13
    1b5a:	ef 92       	push	r14
    1b5c:	ff 92       	push	r15
    1b5e:	0f 93       	push	r16
    1b60:	1f 93       	push	r17
    1b62:	cf 93       	push	r28
    1b64:	df 93       	push	r29
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	2b 97       	sbiw	r28, 0x0b	; 11
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	6c 01       	movw	r12, r24
    1b78:	7b 01       	movw	r14, r22
    1b7a:	8a 01       	movw	r16, r20
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	17 82       	std	Z+7, r1	; 0x07
    1b80:	16 82       	std	Z+6, r1	; 0x06
    1b82:	83 81       	ldd	r24, Z+3	; 0x03
    1b84:	81 ff       	sbrs	r24, 1
    1b86:	bf c1       	rjmp	.+894    	; 0x1f06 <vfprintf+0x3c4>
    1b88:	ce 01       	movw	r24, r28
    1b8a:	01 96       	adiw	r24, 0x01	; 1
    1b8c:	3c 01       	movw	r6, r24
    1b8e:	f6 01       	movw	r30, r12
    1b90:	93 81       	ldd	r25, Z+3	; 0x03
    1b92:	f7 01       	movw	r30, r14
    1b94:	93 fd       	sbrc	r25, 3
    1b96:	85 91       	lpm	r24, Z+
    1b98:	93 ff       	sbrs	r25, 3
    1b9a:	81 91       	ld	r24, Z+
    1b9c:	7f 01       	movw	r14, r30
    1b9e:	88 23       	and	r24, r24
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <vfprintf+0x62>
    1ba2:	ad c1       	rjmp	.+858    	; 0x1efe <vfprintf+0x3bc>
    1ba4:	85 32       	cpi	r24, 0x25	; 37
    1ba6:	39 f4       	brne	.+14     	; 0x1bb6 <vfprintf+0x74>
    1ba8:	93 fd       	sbrc	r25, 3
    1baa:	85 91       	lpm	r24, Z+
    1bac:	93 ff       	sbrs	r25, 3
    1bae:	81 91       	ld	r24, Z+
    1bb0:	7f 01       	movw	r14, r30
    1bb2:	85 32       	cpi	r24, 0x25	; 37
    1bb4:	21 f4       	brne	.+8      	; 0x1bbe <vfprintf+0x7c>
    1bb6:	b6 01       	movw	r22, r12
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	28 d3       	rcall	.+1616   	; 0x220c <fputc>
    1bbc:	e8 cf       	rjmp	.-48     	; 0x1b8e <vfprintf+0x4c>
    1bbe:	91 2c       	mov	r9, r1
    1bc0:	21 2c       	mov	r2, r1
    1bc2:	31 2c       	mov	r3, r1
    1bc4:	ff e1       	ldi	r31, 0x1F	; 31
    1bc6:	f3 15       	cp	r31, r3
    1bc8:	d8 f0       	brcs	.+54     	; 0x1c00 <vfprintf+0xbe>
    1bca:	8b 32       	cpi	r24, 0x2B	; 43
    1bcc:	79 f0       	breq	.+30     	; 0x1bec <vfprintf+0xaa>
    1bce:	38 f4       	brcc	.+14     	; 0x1bde <vfprintf+0x9c>
    1bd0:	80 32       	cpi	r24, 0x20	; 32
    1bd2:	79 f0       	breq	.+30     	; 0x1bf2 <vfprintf+0xb0>
    1bd4:	83 32       	cpi	r24, 0x23	; 35
    1bd6:	a1 f4       	brne	.+40     	; 0x1c00 <vfprintf+0xbe>
    1bd8:	23 2d       	mov	r18, r3
    1bda:	20 61       	ori	r18, 0x10	; 16
    1bdc:	1d c0       	rjmp	.+58     	; 0x1c18 <vfprintf+0xd6>
    1bde:	8d 32       	cpi	r24, 0x2D	; 45
    1be0:	61 f0       	breq	.+24     	; 0x1bfa <vfprintf+0xb8>
    1be2:	80 33       	cpi	r24, 0x30	; 48
    1be4:	69 f4       	brne	.+26     	; 0x1c00 <vfprintf+0xbe>
    1be6:	23 2d       	mov	r18, r3
    1be8:	21 60       	ori	r18, 0x01	; 1
    1bea:	16 c0       	rjmp	.+44     	; 0x1c18 <vfprintf+0xd6>
    1bec:	83 2d       	mov	r24, r3
    1bee:	82 60       	ori	r24, 0x02	; 2
    1bf0:	38 2e       	mov	r3, r24
    1bf2:	e3 2d       	mov	r30, r3
    1bf4:	e4 60       	ori	r30, 0x04	; 4
    1bf6:	3e 2e       	mov	r3, r30
    1bf8:	2a c0       	rjmp	.+84     	; 0x1c4e <vfprintf+0x10c>
    1bfa:	f3 2d       	mov	r31, r3
    1bfc:	f8 60       	ori	r31, 0x08	; 8
    1bfe:	1d c0       	rjmp	.+58     	; 0x1c3a <vfprintf+0xf8>
    1c00:	37 fc       	sbrc	r3, 7
    1c02:	2d c0       	rjmp	.+90     	; 0x1c5e <vfprintf+0x11c>
    1c04:	20 ed       	ldi	r18, 0xD0	; 208
    1c06:	28 0f       	add	r18, r24
    1c08:	2a 30       	cpi	r18, 0x0A	; 10
    1c0a:	40 f0       	brcs	.+16     	; 0x1c1c <vfprintf+0xda>
    1c0c:	8e 32       	cpi	r24, 0x2E	; 46
    1c0e:	b9 f4       	brne	.+46     	; 0x1c3e <vfprintf+0xfc>
    1c10:	36 fc       	sbrc	r3, 6
    1c12:	75 c1       	rjmp	.+746    	; 0x1efe <vfprintf+0x3bc>
    1c14:	23 2d       	mov	r18, r3
    1c16:	20 64       	ori	r18, 0x40	; 64
    1c18:	32 2e       	mov	r3, r18
    1c1a:	19 c0       	rjmp	.+50     	; 0x1c4e <vfprintf+0x10c>
    1c1c:	36 fe       	sbrs	r3, 6
    1c1e:	06 c0       	rjmp	.+12     	; 0x1c2c <vfprintf+0xea>
    1c20:	8a e0       	ldi	r24, 0x0A	; 10
    1c22:	98 9e       	mul	r9, r24
    1c24:	20 0d       	add	r18, r0
    1c26:	11 24       	eor	r1, r1
    1c28:	92 2e       	mov	r9, r18
    1c2a:	11 c0       	rjmp	.+34     	; 0x1c4e <vfprintf+0x10c>
    1c2c:	ea e0       	ldi	r30, 0x0A	; 10
    1c2e:	2e 9e       	mul	r2, r30
    1c30:	20 0d       	add	r18, r0
    1c32:	11 24       	eor	r1, r1
    1c34:	22 2e       	mov	r2, r18
    1c36:	f3 2d       	mov	r31, r3
    1c38:	f0 62       	ori	r31, 0x20	; 32
    1c3a:	3f 2e       	mov	r3, r31
    1c3c:	08 c0       	rjmp	.+16     	; 0x1c4e <vfprintf+0x10c>
    1c3e:	8c 36       	cpi	r24, 0x6C	; 108
    1c40:	21 f4       	brne	.+8      	; 0x1c4a <vfprintf+0x108>
    1c42:	83 2d       	mov	r24, r3
    1c44:	80 68       	ori	r24, 0x80	; 128
    1c46:	38 2e       	mov	r3, r24
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <vfprintf+0x10c>
    1c4a:	88 36       	cpi	r24, 0x68	; 104
    1c4c:	41 f4       	brne	.+16     	; 0x1c5e <vfprintf+0x11c>
    1c4e:	f7 01       	movw	r30, r14
    1c50:	93 fd       	sbrc	r25, 3
    1c52:	85 91       	lpm	r24, Z+
    1c54:	93 ff       	sbrs	r25, 3
    1c56:	81 91       	ld	r24, Z+
    1c58:	7f 01       	movw	r14, r30
    1c5a:	81 11       	cpse	r24, r1
    1c5c:	b3 cf       	rjmp	.-154    	; 0x1bc4 <vfprintf+0x82>
    1c5e:	98 2f       	mov	r25, r24
    1c60:	9f 7d       	andi	r25, 0xDF	; 223
    1c62:	95 54       	subi	r25, 0x45	; 69
    1c64:	93 30       	cpi	r25, 0x03	; 3
    1c66:	28 f4       	brcc	.+10     	; 0x1c72 <vfprintf+0x130>
    1c68:	0c 5f       	subi	r16, 0xFC	; 252
    1c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6c:	9f e3       	ldi	r25, 0x3F	; 63
    1c6e:	99 83       	std	Y+1, r25	; 0x01
    1c70:	0d c0       	rjmp	.+26     	; 0x1c8c <vfprintf+0x14a>
    1c72:	83 36       	cpi	r24, 0x63	; 99
    1c74:	31 f0       	breq	.+12     	; 0x1c82 <vfprintf+0x140>
    1c76:	83 37       	cpi	r24, 0x73	; 115
    1c78:	71 f0       	breq	.+28     	; 0x1c96 <vfprintf+0x154>
    1c7a:	83 35       	cpi	r24, 0x53	; 83
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <vfprintf+0x13e>
    1c7e:	55 c0       	rjmp	.+170    	; 0x1d2a <vfprintf+0x1e8>
    1c80:	20 c0       	rjmp	.+64     	; 0x1cc2 <vfprintf+0x180>
    1c82:	f8 01       	movw	r30, r16
    1c84:	80 81       	ld	r24, Z
    1c86:	89 83       	std	Y+1, r24	; 0x01
    1c88:	0e 5f       	subi	r16, 0xFE	; 254
    1c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8c:	88 24       	eor	r8, r8
    1c8e:	83 94       	inc	r8
    1c90:	91 2c       	mov	r9, r1
    1c92:	53 01       	movw	r10, r6
    1c94:	12 c0       	rjmp	.+36     	; 0x1cba <vfprintf+0x178>
    1c96:	28 01       	movw	r4, r16
    1c98:	f2 e0       	ldi	r31, 0x02	; 2
    1c9a:	4f 0e       	add	r4, r31
    1c9c:	51 1c       	adc	r5, r1
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	a0 80       	ld	r10, Z
    1ca2:	b1 80       	ldd	r11, Z+1	; 0x01
    1ca4:	36 fe       	sbrs	r3, 6
    1ca6:	03 c0       	rjmp	.+6      	; 0x1cae <vfprintf+0x16c>
    1ca8:	69 2d       	mov	r22, r9
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <vfprintf+0x170>
    1cae:	6f ef       	ldi	r22, 0xFF	; 255
    1cb0:	7f ef       	ldi	r23, 0xFF	; 255
    1cb2:	c5 01       	movw	r24, r10
    1cb4:	90 d2       	rcall	.+1312   	; 0x21d6 <strnlen>
    1cb6:	4c 01       	movw	r8, r24
    1cb8:	82 01       	movw	r16, r4
    1cba:	f3 2d       	mov	r31, r3
    1cbc:	ff 77       	andi	r31, 0x7F	; 127
    1cbe:	3f 2e       	mov	r3, r31
    1cc0:	15 c0       	rjmp	.+42     	; 0x1cec <vfprintf+0x1aa>
    1cc2:	28 01       	movw	r4, r16
    1cc4:	22 e0       	ldi	r18, 0x02	; 2
    1cc6:	42 0e       	add	r4, r18
    1cc8:	51 1c       	adc	r5, r1
    1cca:	f8 01       	movw	r30, r16
    1ccc:	a0 80       	ld	r10, Z
    1cce:	b1 80       	ldd	r11, Z+1	; 0x01
    1cd0:	36 fe       	sbrs	r3, 6
    1cd2:	03 c0       	rjmp	.+6      	; 0x1cda <vfprintf+0x198>
    1cd4:	69 2d       	mov	r22, r9
    1cd6:	70 e0       	ldi	r23, 0x00	; 0
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <vfprintf+0x19c>
    1cda:	6f ef       	ldi	r22, 0xFF	; 255
    1cdc:	7f ef       	ldi	r23, 0xFF	; 255
    1cde:	c5 01       	movw	r24, r10
    1ce0:	68 d2       	rcall	.+1232   	; 0x21b2 <strnlen_P>
    1ce2:	4c 01       	movw	r8, r24
    1ce4:	f3 2d       	mov	r31, r3
    1ce6:	f0 68       	ori	r31, 0x80	; 128
    1ce8:	3f 2e       	mov	r3, r31
    1cea:	82 01       	movw	r16, r4
    1cec:	33 fc       	sbrc	r3, 3
    1cee:	19 c0       	rjmp	.+50     	; 0x1d22 <vfprintf+0x1e0>
    1cf0:	82 2d       	mov	r24, r2
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	88 16       	cp	r8, r24
    1cf6:	99 06       	cpc	r9, r25
    1cf8:	a0 f4       	brcc	.+40     	; 0x1d22 <vfprintf+0x1e0>
    1cfa:	b6 01       	movw	r22, r12
    1cfc:	80 e2       	ldi	r24, 0x20	; 32
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	85 d2       	rcall	.+1290   	; 0x220c <fputc>
    1d02:	2a 94       	dec	r2
    1d04:	f5 cf       	rjmp	.-22     	; 0x1cf0 <vfprintf+0x1ae>
    1d06:	f5 01       	movw	r30, r10
    1d08:	37 fc       	sbrc	r3, 7
    1d0a:	85 91       	lpm	r24, Z+
    1d0c:	37 fe       	sbrs	r3, 7
    1d0e:	81 91       	ld	r24, Z+
    1d10:	5f 01       	movw	r10, r30
    1d12:	b6 01       	movw	r22, r12
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	7a d2       	rcall	.+1268   	; 0x220c <fputc>
    1d18:	21 10       	cpse	r2, r1
    1d1a:	2a 94       	dec	r2
    1d1c:	21 e0       	ldi	r18, 0x01	; 1
    1d1e:	82 1a       	sub	r8, r18
    1d20:	91 08       	sbc	r9, r1
    1d22:	81 14       	cp	r8, r1
    1d24:	91 04       	cpc	r9, r1
    1d26:	79 f7       	brne	.-34     	; 0x1d06 <vfprintf+0x1c4>
    1d28:	e1 c0       	rjmp	.+450    	; 0x1eec <vfprintf+0x3aa>
    1d2a:	84 36       	cpi	r24, 0x64	; 100
    1d2c:	11 f0       	breq	.+4      	; 0x1d32 <vfprintf+0x1f0>
    1d2e:	89 36       	cpi	r24, 0x69	; 105
    1d30:	39 f5       	brne	.+78     	; 0x1d80 <vfprintf+0x23e>
    1d32:	f8 01       	movw	r30, r16
    1d34:	37 fe       	sbrs	r3, 7
    1d36:	07 c0       	rjmp	.+14     	; 0x1d46 <vfprintf+0x204>
    1d38:	60 81       	ld	r22, Z
    1d3a:	71 81       	ldd	r23, Z+1	; 0x01
    1d3c:	82 81       	ldd	r24, Z+2	; 0x02
    1d3e:	93 81       	ldd	r25, Z+3	; 0x03
    1d40:	0c 5f       	subi	r16, 0xFC	; 252
    1d42:	1f 4f       	sbci	r17, 0xFF	; 255
    1d44:	08 c0       	rjmp	.+16     	; 0x1d56 <vfprintf+0x214>
    1d46:	60 81       	ld	r22, Z
    1d48:	71 81       	ldd	r23, Z+1	; 0x01
    1d4a:	07 2e       	mov	r0, r23
    1d4c:	00 0c       	add	r0, r0
    1d4e:	88 0b       	sbc	r24, r24
    1d50:	99 0b       	sbc	r25, r25
    1d52:	0e 5f       	subi	r16, 0xFE	; 254
    1d54:	1f 4f       	sbci	r17, 0xFF	; 255
    1d56:	f3 2d       	mov	r31, r3
    1d58:	ff 76       	andi	r31, 0x6F	; 111
    1d5a:	3f 2e       	mov	r3, r31
    1d5c:	97 ff       	sbrs	r25, 7
    1d5e:	09 c0       	rjmp	.+18     	; 0x1d72 <vfprintf+0x230>
    1d60:	90 95       	com	r25
    1d62:	80 95       	com	r24
    1d64:	70 95       	com	r23
    1d66:	61 95       	neg	r22
    1d68:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6e:	f0 68       	ori	r31, 0x80	; 128
    1d70:	3f 2e       	mov	r3, r31
    1d72:	2a e0       	ldi	r18, 0x0A	; 10
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	a3 01       	movw	r20, r6
    1d78:	85 d2       	rcall	.+1290   	; 0x2284 <__ultoa_invert>
    1d7a:	88 2e       	mov	r8, r24
    1d7c:	86 18       	sub	r8, r6
    1d7e:	44 c0       	rjmp	.+136    	; 0x1e08 <vfprintf+0x2c6>
    1d80:	85 37       	cpi	r24, 0x75	; 117
    1d82:	31 f4       	brne	.+12     	; 0x1d90 <vfprintf+0x24e>
    1d84:	23 2d       	mov	r18, r3
    1d86:	2f 7e       	andi	r18, 0xEF	; 239
    1d88:	b2 2e       	mov	r11, r18
    1d8a:	2a e0       	ldi	r18, 0x0A	; 10
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	25 c0       	rjmp	.+74     	; 0x1dda <vfprintf+0x298>
    1d90:	93 2d       	mov	r25, r3
    1d92:	99 7f       	andi	r25, 0xF9	; 249
    1d94:	b9 2e       	mov	r11, r25
    1d96:	8f 36       	cpi	r24, 0x6F	; 111
    1d98:	c1 f0       	breq	.+48     	; 0x1dca <vfprintf+0x288>
    1d9a:	18 f4       	brcc	.+6      	; 0x1da2 <vfprintf+0x260>
    1d9c:	88 35       	cpi	r24, 0x58	; 88
    1d9e:	79 f0       	breq	.+30     	; 0x1dbe <vfprintf+0x27c>
    1da0:	ae c0       	rjmp	.+348    	; 0x1efe <vfprintf+0x3bc>
    1da2:	80 37       	cpi	r24, 0x70	; 112
    1da4:	19 f0       	breq	.+6      	; 0x1dac <vfprintf+0x26a>
    1da6:	88 37       	cpi	r24, 0x78	; 120
    1da8:	21 f0       	breq	.+8      	; 0x1db2 <vfprintf+0x270>
    1daa:	a9 c0       	rjmp	.+338    	; 0x1efe <vfprintf+0x3bc>
    1dac:	e9 2f       	mov	r30, r25
    1dae:	e0 61       	ori	r30, 0x10	; 16
    1db0:	be 2e       	mov	r11, r30
    1db2:	b4 fe       	sbrs	r11, 4
    1db4:	0d c0       	rjmp	.+26     	; 0x1dd0 <vfprintf+0x28e>
    1db6:	fb 2d       	mov	r31, r11
    1db8:	f4 60       	ori	r31, 0x04	; 4
    1dba:	bf 2e       	mov	r11, r31
    1dbc:	09 c0       	rjmp	.+18     	; 0x1dd0 <vfprintf+0x28e>
    1dbe:	34 fe       	sbrs	r3, 4
    1dc0:	0a c0       	rjmp	.+20     	; 0x1dd6 <vfprintf+0x294>
    1dc2:	29 2f       	mov	r18, r25
    1dc4:	26 60       	ori	r18, 0x06	; 6
    1dc6:	b2 2e       	mov	r11, r18
    1dc8:	06 c0       	rjmp	.+12     	; 0x1dd6 <vfprintf+0x294>
    1dca:	28 e0       	ldi	r18, 0x08	; 8
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	05 c0       	rjmp	.+10     	; 0x1dda <vfprintf+0x298>
    1dd0:	20 e1       	ldi	r18, 0x10	; 16
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <vfprintf+0x298>
    1dd6:	20 e1       	ldi	r18, 0x10	; 16
    1dd8:	32 e0       	ldi	r19, 0x02	; 2
    1dda:	f8 01       	movw	r30, r16
    1ddc:	b7 fe       	sbrs	r11, 7
    1dde:	07 c0       	rjmp	.+14     	; 0x1dee <vfprintf+0x2ac>
    1de0:	60 81       	ld	r22, Z
    1de2:	71 81       	ldd	r23, Z+1	; 0x01
    1de4:	82 81       	ldd	r24, Z+2	; 0x02
    1de6:	93 81       	ldd	r25, Z+3	; 0x03
    1de8:	0c 5f       	subi	r16, 0xFC	; 252
    1dea:	1f 4f       	sbci	r17, 0xFF	; 255
    1dec:	06 c0       	rjmp	.+12     	; 0x1dfa <vfprintf+0x2b8>
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	0e 5f       	subi	r16, 0xFE	; 254
    1df8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfa:	a3 01       	movw	r20, r6
    1dfc:	43 d2       	rcall	.+1158   	; 0x2284 <__ultoa_invert>
    1dfe:	88 2e       	mov	r8, r24
    1e00:	86 18       	sub	r8, r6
    1e02:	fb 2d       	mov	r31, r11
    1e04:	ff 77       	andi	r31, 0x7F	; 127
    1e06:	3f 2e       	mov	r3, r31
    1e08:	36 fe       	sbrs	r3, 6
    1e0a:	0d c0       	rjmp	.+26     	; 0x1e26 <vfprintf+0x2e4>
    1e0c:	23 2d       	mov	r18, r3
    1e0e:	2e 7f       	andi	r18, 0xFE	; 254
    1e10:	a2 2e       	mov	r10, r18
    1e12:	89 14       	cp	r8, r9
    1e14:	58 f4       	brcc	.+22     	; 0x1e2c <vfprintf+0x2ea>
    1e16:	34 fe       	sbrs	r3, 4
    1e18:	0b c0       	rjmp	.+22     	; 0x1e30 <vfprintf+0x2ee>
    1e1a:	32 fc       	sbrc	r3, 2
    1e1c:	09 c0       	rjmp	.+18     	; 0x1e30 <vfprintf+0x2ee>
    1e1e:	83 2d       	mov	r24, r3
    1e20:	8e 7e       	andi	r24, 0xEE	; 238
    1e22:	a8 2e       	mov	r10, r24
    1e24:	05 c0       	rjmp	.+10     	; 0x1e30 <vfprintf+0x2ee>
    1e26:	b8 2c       	mov	r11, r8
    1e28:	a3 2c       	mov	r10, r3
    1e2a:	03 c0       	rjmp	.+6      	; 0x1e32 <vfprintf+0x2f0>
    1e2c:	b8 2c       	mov	r11, r8
    1e2e:	01 c0       	rjmp	.+2      	; 0x1e32 <vfprintf+0x2f0>
    1e30:	b9 2c       	mov	r11, r9
    1e32:	a4 fe       	sbrs	r10, 4
    1e34:	0f c0       	rjmp	.+30     	; 0x1e54 <vfprintf+0x312>
    1e36:	fe 01       	movw	r30, r28
    1e38:	e8 0d       	add	r30, r8
    1e3a:	f1 1d       	adc	r31, r1
    1e3c:	80 81       	ld	r24, Z
    1e3e:	80 33       	cpi	r24, 0x30	; 48
    1e40:	21 f4       	brne	.+8      	; 0x1e4a <vfprintf+0x308>
    1e42:	9a 2d       	mov	r25, r10
    1e44:	99 7e       	andi	r25, 0xE9	; 233
    1e46:	a9 2e       	mov	r10, r25
    1e48:	09 c0       	rjmp	.+18     	; 0x1e5c <vfprintf+0x31a>
    1e4a:	a2 fe       	sbrs	r10, 2
    1e4c:	06 c0       	rjmp	.+12     	; 0x1e5a <vfprintf+0x318>
    1e4e:	b3 94       	inc	r11
    1e50:	b3 94       	inc	r11
    1e52:	04 c0       	rjmp	.+8      	; 0x1e5c <vfprintf+0x31a>
    1e54:	8a 2d       	mov	r24, r10
    1e56:	86 78       	andi	r24, 0x86	; 134
    1e58:	09 f0       	breq	.+2      	; 0x1e5c <vfprintf+0x31a>
    1e5a:	b3 94       	inc	r11
    1e5c:	a3 fc       	sbrc	r10, 3
    1e5e:	10 c0       	rjmp	.+32     	; 0x1e80 <vfprintf+0x33e>
    1e60:	a0 fe       	sbrs	r10, 0
    1e62:	06 c0       	rjmp	.+12     	; 0x1e70 <vfprintf+0x32e>
    1e64:	b2 14       	cp	r11, r2
    1e66:	80 f4       	brcc	.+32     	; 0x1e88 <vfprintf+0x346>
    1e68:	28 0c       	add	r2, r8
    1e6a:	92 2c       	mov	r9, r2
    1e6c:	9b 18       	sub	r9, r11
    1e6e:	0d c0       	rjmp	.+26     	; 0x1e8a <vfprintf+0x348>
    1e70:	b2 14       	cp	r11, r2
    1e72:	58 f4       	brcc	.+22     	; 0x1e8a <vfprintf+0x348>
    1e74:	b6 01       	movw	r22, r12
    1e76:	80 e2       	ldi	r24, 0x20	; 32
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	c8 d1       	rcall	.+912    	; 0x220c <fputc>
    1e7c:	b3 94       	inc	r11
    1e7e:	f8 cf       	rjmp	.-16     	; 0x1e70 <vfprintf+0x32e>
    1e80:	b2 14       	cp	r11, r2
    1e82:	18 f4       	brcc	.+6      	; 0x1e8a <vfprintf+0x348>
    1e84:	2b 18       	sub	r2, r11
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <vfprintf+0x34a>
    1e88:	98 2c       	mov	r9, r8
    1e8a:	21 2c       	mov	r2, r1
    1e8c:	a4 fe       	sbrs	r10, 4
    1e8e:	0f c0       	rjmp	.+30     	; 0x1eae <vfprintf+0x36c>
    1e90:	b6 01       	movw	r22, r12
    1e92:	80 e3       	ldi	r24, 0x30	; 48
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	ba d1       	rcall	.+884    	; 0x220c <fputc>
    1e98:	a2 fe       	sbrs	r10, 2
    1e9a:	16 c0       	rjmp	.+44     	; 0x1ec8 <vfprintf+0x386>
    1e9c:	a1 fc       	sbrc	r10, 1
    1e9e:	03 c0       	rjmp	.+6      	; 0x1ea6 <vfprintf+0x364>
    1ea0:	88 e7       	ldi	r24, 0x78	; 120
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <vfprintf+0x368>
    1ea6:	88 e5       	ldi	r24, 0x58	; 88
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	b6 01       	movw	r22, r12
    1eac:	0c c0       	rjmp	.+24     	; 0x1ec6 <vfprintf+0x384>
    1eae:	8a 2d       	mov	r24, r10
    1eb0:	86 78       	andi	r24, 0x86	; 134
    1eb2:	51 f0       	breq	.+20     	; 0x1ec8 <vfprintf+0x386>
    1eb4:	a1 fe       	sbrs	r10, 1
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <vfprintf+0x37a>
    1eb8:	8b e2       	ldi	r24, 0x2B	; 43
    1eba:	01 c0       	rjmp	.+2      	; 0x1ebe <vfprintf+0x37c>
    1ebc:	80 e2       	ldi	r24, 0x20	; 32
    1ebe:	a7 fc       	sbrc	r10, 7
    1ec0:	8d e2       	ldi	r24, 0x2D	; 45
    1ec2:	b6 01       	movw	r22, r12
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	a2 d1       	rcall	.+836    	; 0x220c <fputc>
    1ec8:	89 14       	cp	r8, r9
    1eca:	30 f4       	brcc	.+12     	; 0x1ed8 <vfprintf+0x396>
    1ecc:	b6 01       	movw	r22, r12
    1ece:	80 e3       	ldi	r24, 0x30	; 48
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	9c d1       	rcall	.+824    	; 0x220c <fputc>
    1ed4:	9a 94       	dec	r9
    1ed6:	f8 cf       	rjmp	.-16     	; 0x1ec8 <vfprintf+0x386>
    1ed8:	8a 94       	dec	r8
    1eda:	f3 01       	movw	r30, r6
    1edc:	e8 0d       	add	r30, r8
    1ede:	f1 1d       	adc	r31, r1
    1ee0:	80 81       	ld	r24, Z
    1ee2:	b6 01       	movw	r22, r12
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	92 d1       	rcall	.+804    	; 0x220c <fputc>
    1ee8:	81 10       	cpse	r8, r1
    1eea:	f6 cf       	rjmp	.-20     	; 0x1ed8 <vfprintf+0x396>
    1eec:	22 20       	and	r2, r2
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <vfprintf+0x3b0>
    1ef0:	4e ce       	rjmp	.-868    	; 0x1b8e <vfprintf+0x4c>
    1ef2:	b6 01       	movw	r22, r12
    1ef4:	80 e2       	ldi	r24, 0x20	; 32
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	89 d1       	rcall	.+786    	; 0x220c <fputc>
    1efa:	2a 94       	dec	r2
    1efc:	f7 cf       	rjmp	.-18     	; 0x1eec <vfprintf+0x3aa>
    1efe:	f6 01       	movw	r30, r12
    1f00:	86 81       	ldd	r24, Z+6	; 0x06
    1f02:	97 81       	ldd	r25, Z+7	; 0x07
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <vfprintf+0x3c8>
    1f06:	8f ef       	ldi	r24, 0xFF	; 255
    1f08:	9f ef       	ldi	r25, 0xFF	; 255
    1f0a:	2b 96       	adiw	r28, 0x0b	; 11
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	de bf       	out	0x3e, r29	; 62
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	cd bf       	out	0x3d, r28	; 61
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	1f 91       	pop	r17
    1f1c:	0f 91       	pop	r16
    1f1e:	ff 90       	pop	r15
    1f20:	ef 90       	pop	r14
    1f22:	df 90       	pop	r13
    1f24:	cf 90       	pop	r12
    1f26:	bf 90       	pop	r11
    1f28:	af 90       	pop	r10
    1f2a:	9f 90       	pop	r9
    1f2c:	8f 90       	pop	r8
    1f2e:	7f 90       	pop	r7
    1f30:	6f 90       	pop	r6
    1f32:	5f 90       	pop	r5
    1f34:	4f 90       	pop	r4
    1f36:	3f 90       	pop	r3
    1f38:	2f 90       	pop	r2
    1f3a:	08 95       	ret

00001f3c <calloc>:
    1f3c:	0f 93       	push	r16
    1f3e:	1f 93       	push	r17
    1f40:	cf 93       	push	r28
    1f42:	df 93       	push	r29
    1f44:	86 9f       	mul	r24, r22
    1f46:	80 01       	movw	r16, r0
    1f48:	87 9f       	mul	r24, r23
    1f4a:	10 0d       	add	r17, r0
    1f4c:	96 9f       	mul	r25, r22
    1f4e:	10 0d       	add	r17, r0
    1f50:	11 24       	eor	r1, r1
    1f52:	c8 01       	movw	r24, r16
    1f54:	0d d0       	rcall	.+26     	; 0x1f70 <malloc>
    1f56:	ec 01       	movw	r28, r24
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	21 f0       	breq	.+8      	; 0x1f64 <calloc+0x28>
    1f5c:	a8 01       	movw	r20, r16
    1f5e:	60 e0       	ldi	r22, 0x00	; 0
    1f60:	70 e0       	ldi	r23, 0x00	; 0
    1f62:	32 d1       	rcall	.+612    	; 0x21c8 <memset>
    1f64:	ce 01       	movw	r24, r28
    1f66:	df 91       	pop	r29
    1f68:	cf 91       	pop	r28
    1f6a:	1f 91       	pop	r17
    1f6c:	0f 91       	pop	r16
    1f6e:	08 95       	ret

00001f70 <malloc>:
    1f70:	0f 93       	push	r16
    1f72:	1f 93       	push	r17
    1f74:	cf 93       	push	r28
    1f76:	df 93       	push	r29
    1f78:	82 30       	cpi	r24, 0x02	; 2
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	10 f4       	brcc	.+4      	; 0x1f82 <malloc+0x12>
    1f7e:	82 e0       	ldi	r24, 0x02	; 2
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	e0 91 c1 05 	lds	r30, 0x05C1	; 0x8005c1 <__flp>
    1f86:	f0 91 c2 05 	lds	r31, 0x05C2	; 0x8005c2 <__flp+0x1>
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	a0 e0       	ldi	r26, 0x00	; 0
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	30 97       	sbiw	r30, 0x00	; 0
    1f94:	19 f1       	breq	.+70     	; 0x1fdc <malloc+0x6c>
    1f96:	40 81       	ld	r20, Z
    1f98:	51 81       	ldd	r21, Z+1	; 0x01
    1f9a:	02 81       	ldd	r16, Z+2	; 0x02
    1f9c:	13 81       	ldd	r17, Z+3	; 0x03
    1f9e:	48 17       	cp	r20, r24
    1fa0:	59 07       	cpc	r21, r25
    1fa2:	c8 f0       	brcs	.+50     	; 0x1fd6 <malloc+0x66>
    1fa4:	84 17       	cp	r24, r20
    1fa6:	95 07       	cpc	r25, r21
    1fa8:	69 f4       	brne	.+26     	; 0x1fc4 <malloc+0x54>
    1faa:	10 97       	sbiw	r26, 0x00	; 0
    1fac:	31 f0       	breq	.+12     	; 0x1fba <malloc+0x4a>
    1fae:	12 96       	adiw	r26, 0x02	; 2
    1fb0:	0c 93       	st	X, r16
    1fb2:	12 97       	sbiw	r26, 0x02	; 2
    1fb4:	13 96       	adiw	r26, 0x03	; 3
    1fb6:	1c 93       	st	X, r17
    1fb8:	27 c0       	rjmp	.+78     	; 0x2008 <malloc+0x98>
    1fba:	00 93 c1 05 	sts	0x05C1, r16	; 0x8005c1 <__flp>
    1fbe:	10 93 c2 05 	sts	0x05C2, r17	; 0x8005c2 <__flp+0x1>
    1fc2:	22 c0       	rjmp	.+68     	; 0x2008 <malloc+0x98>
    1fc4:	21 15       	cp	r18, r1
    1fc6:	31 05       	cpc	r19, r1
    1fc8:	19 f0       	breq	.+6      	; 0x1fd0 <malloc+0x60>
    1fca:	42 17       	cp	r20, r18
    1fcc:	53 07       	cpc	r21, r19
    1fce:	18 f4       	brcc	.+6      	; 0x1fd6 <malloc+0x66>
    1fd0:	9a 01       	movw	r18, r20
    1fd2:	bd 01       	movw	r22, r26
    1fd4:	ef 01       	movw	r28, r30
    1fd6:	df 01       	movw	r26, r30
    1fd8:	f8 01       	movw	r30, r16
    1fda:	db cf       	rjmp	.-74     	; 0x1f92 <malloc+0x22>
    1fdc:	21 15       	cp	r18, r1
    1fde:	31 05       	cpc	r19, r1
    1fe0:	f9 f0       	breq	.+62     	; 0x2020 <malloc+0xb0>
    1fe2:	28 1b       	sub	r18, r24
    1fe4:	39 0b       	sbc	r19, r25
    1fe6:	24 30       	cpi	r18, 0x04	; 4
    1fe8:	31 05       	cpc	r19, r1
    1fea:	80 f4       	brcc	.+32     	; 0x200c <malloc+0x9c>
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff0:	61 15       	cp	r22, r1
    1ff2:	71 05       	cpc	r23, r1
    1ff4:	21 f0       	breq	.+8      	; 0x1ffe <malloc+0x8e>
    1ff6:	fb 01       	movw	r30, r22
    1ff8:	93 83       	std	Z+3, r25	; 0x03
    1ffa:	82 83       	std	Z+2, r24	; 0x02
    1ffc:	04 c0       	rjmp	.+8      	; 0x2006 <malloc+0x96>
    1ffe:	90 93 c2 05 	sts	0x05C2, r25	; 0x8005c2 <__flp+0x1>
    2002:	80 93 c1 05 	sts	0x05C1, r24	; 0x8005c1 <__flp>
    2006:	fe 01       	movw	r30, r28
    2008:	32 96       	adiw	r30, 0x02	; 2
    200a:	44 c0       	rjmp	.+136    	; 0x2094 <malloc+0x124>
    200c:	fe 01       	movw	r30, r28
    200e:	e2 0f       	add	r30, r18
    2010:	f3 1f       	adc	r31, r19
    2012:	81 93       	st	Z+, r24
    2014:	91 93       	st	Z+, r25
    2016:	22 50       	subi	r18, 0x02	; 2
    2018:	31 09       	sbc	r19, r1
    201a:	39 83       	std	Y+1, r19	; 0x01
    201c:	28 83       	st	Y, r18
    201e:	3a c0       	rjmp	.+116    	; 0x2094 <malloc+0x124>
    2020:	20 91 bf 05 	lds	r18, 0x05BF	; 0x8005bf <__brkval>
    2024:	30 91 c0 05 	lds	r19, 0x05C0	; 0x8005c0 <__brkval+0x1>
    2028:	23 2b       	or	r18, r19
    202a:	41 f4       	brne	.+16     	; 0x203c <malloc+0xcc>
    202c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2030:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2034:	30 93 c0 05 	sts	0x05C0, r19	; 0x8005c0 <__brkval+0x1>
    2038:	20 93 bf 05 	sts	0x05BF, r18	; 0x8005bf <__brkval>
    203c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    2040:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    2044:	21 15       	cp	r18, r1
    2046:	31 05       	cpc	r19, r1
    2048:	41 f4       	brne	.+16     	; 0x205a <malloc+0xea>
    204a:	2d b7       	in	r18, 0x3d	; 61
    204c:	3e b7       	in	r19, 0x3e	; 62
    204e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2052:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2056:	24 1b       	sub	r18, r20
    2058:	35 0b       	sbc	r19, r21
    205a:	e0 91 bf 05 	lds	r30, 0x05BF	; 0x8005bf <__brkval>
    205e:	f0 91 c0 05 	lds	r31, 0x05C0	; 0x8005c0 <__brkval+0x1>
    2062:	e2 17       	cp	r30, r18
    2064:	f3 07       	cpc	r31, r19
    2066:	a0 f4       	brcc	.+40     	; 0x2090 <malloc+0x120>
    2068:	2e 1b       	sub	r18, r30
    206a:	3f 0b       	sbc	r19, r31
    206c:	28 17       	cp	r18, r24
    206e:	39 07       	cpc	r19, r25
    2070:	78 f0       	brcs	.+30     	; 0x2090 <malloc+0x120>
    2072:	ac 01       	movw	r20, r24
    2074:	4e 5f       	subi	r20, 0xFE	; 254
    2076:	5f 4f       	sbci	r21, 0xFF	; 255
    2078:	24 17       	cp	r18, r20
    207a:	35 07       	cpc	r19, r21
    207c:	48 f0       	brcs	.+18     	; 0x2090 <malloc+0x120>
    207e:	4e 0f       	add	r20, r30
    2080:	5f 1f       	adc	r21, r31
    2082:	50 93 c0 05 	sts	0x05C0, r21	; 0x8005c0 <__brkval+0x1>
    2086:	40 93 bf 05 	sts	0x05BF, r20	; 0x8005bf <__brkval>
    208a:	81 93       	st	Z+, r24
    208c:	91 93       	st	Z+, r25
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <malloc+0x124>
    2090:	e0 e0       	ldi	r30, 0x00	; 0
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	cf 01       	movw	r24, r30
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	1f 91       	pop	r17
    209c:	0f 91       	pop	r16
    209e:	08 95       	ret

000020a0 <free>:
    20a0:	cf 93       	push	r28
    20a2:	df 93       	push	r29
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	09 f4       	brne	.+2      	; 0x20aa <free+0xa>
    20a8:	81 c0       	rjmp	.+258    	; 0x21ac <free+0x10c>
    20aa:	fc 01       	movw	r30, r24
    20ac:	32 97       	sbiw	r30, 0x02	; 2
    20ae:	13 82       	std	Z+3, r1	; 0x03
    20b0:	12 82       	std	Z+2, r1	; 0x02
    20b2:	a0 91 c1 05 	lds	r26, 0x05C1	; 0x8005c1 <__flp>
    20b6:	b0 91 c2 05 	lds	r27, 0x05C2	; 0x8005c2 <__flp+0x1>
    20ba:	10 97       	sbiw	r26, 0x00	; 0
    20bc:	81 f4       	brne	.+32     	; 0x20de <free+0x3e>
    20be:	20 81       	ld	r18, Z
    20c0:	31 81       	ldd	r19, Z+1	; 0x01
    20c2:	82 0f       	add	r24, r18
    20c4:	93 1f       	adc	r25, r19
    20c6:	20 91 bf 05 	lds	r18, 0x05BF	; 0x8005bf <__brkval>
    20ca:	30 91 c0 05 	lds	r19, 0x05C0	; 0x8005c0 <__brkval+0x1>
    20ce:	28 17       	cp	r18, r24
    20d0:	39 07       	cpc	r19, r25
    20d2:	51 f5       	brne	.+84     	; 0x2128 <free+0x88>
    20d4:	f0 93 c0 05 	sts	0x05C0, r31	; 0x8005c0 <__brkval+0x1>
    20d8:	e0 93 bf 05 	sts	0x05BF, r30	; 0x8005bf <__brkval>
    20dc:	67 c0       	rjmp	.+206    	; 0x21ac <free+0x10c>
    20de:	ed 01       	movw	r28, r26
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	ce 17       	cp	r28, r30
    20e6:	df 07       	cpc	r29, r31
    20e8:	40 f4       	brcc	.+16     	; 0x20fa <free+0x5a>
    20ea:	4a 81       	ldd	r20, Y+2	; 0x02
    20ec:	5b 81       	ldd	r21, Y+3	; 0x03
    20ee:	9e 01       	movw	r18, r28
    20f0:	41 15       	cp	r20, r1
    20f2:	51 05       	cpc	r21, r1
    20f4:	f1 f0       	breq	.+60     	; 0x2132 <free+0x92>
    20f6:	ea 01       	movw	r28, r20
    20f8:	f5 cf       	rjmp	.-22     	; 0x20e4 <free+0x44>
    20fa:	d3 83       	std	Z+3, r29	; 0x03
    20fc:	c2 83       	std	Z+2, r28	; 0x02
    20fe:	40 81       	ld	r20, Z
    2100:	51 81       	ldd	r21, Z+1	; 0x01
    2102:	84 0f       	add	r24, r20
    2104:	95 1f       	adc	r25, r21
    2106:	c8 17       	cp	r28, r24
    2108:	d9 07       	cpc	r29, r25
    210a:	59 f4       	brne	.+22     	; 0x2122 <free+0x82>
    210c:	88 81       	ld	r24, Y
    210e:	99 81       	ldd	r25, Y+1	; 0x01
    2110:	84 0f       	add	r24, r20
    2112:	95 1f       	adc	r25, r21
    2114:	02 96       	adiw	r24, 0x02	; 2
    2116:	91 83       	std	Z+1, r25	; 0x01
    2118:	80 83       	st	Z, r24
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	9b 81       	ldd	r25, Y+3	; 0x03
    211e:	93 83       	std	Z+3, r25	; 0x03
    2120:	82 83       	std	Z+2, r24	; 0x02
    2122:	21 15       	cp	r18, r1
    2124:	31 05       	cpc	r19, r1
    2126:	29 f4       	brne	.+10     	; 0x2132 <free+0x92>
    2128:	f0 93 c2 05 	sts	0x05C2, r31	; 0x8005c2 <__flp+0x1>
    212c:	e0 93 c1 05 	sts	0x05C1, r30	; 0x8005c1 <__flp>
    2130:	3d c0       	rjmp	.+122    	; 0x21ac <free+0x10c>
    2132:	e9 01       	movw	r28, r18
    2134:	fb 83       	std	Y+3, r31	; 0x03
    2136:	ea 83       	std	Y+2, r30	; 0x02
    2138:	49 91       	ld	r20, Y+
    213a:	59 91       	ld	r21, Y+
    213c:	c4 0f       	add	r28, r20
    213e:	d5 1f       	adc	r29, r21
    2140:	ec 17       	cp	r30, r28
    2142:	fd 07       	cpc	r31, r29
    2144:	61 f4       	brne	.+24     	; 0x215e <free+0xbe>
    2146:	80 81       	ld	r24, Z
    2148:	91 81       	ldd	r25, Z+1	; 0x01
    214a:	84 0f       	add	r24, r20
    214c:	95 1f       	adc	r25, r21
    214e:	02 96       	adiw	r24, 0x02	; 2
    2150:	e9 01       	movw	r28, r18
    2152:	99 83       	std	Y+1, r25	; 0x01
    2154:	88 83       	st	Y, r24
    2156:	82 81       	ldd	r24, Z+2	; 0x02
    2158:	93 81       	ldd	r25, Z+3	; 0x03
    215a:	9b 83       	std	Y+3, r25	; 0x03
    215c:	8a 83       	std	Y+2, r24	; 0x02
    215e:	e0 e0       	ldi	r30, 0x00	; 0
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	12 96       	adiw	r26, 0x02	; 2
    2164:	8d 91       	ld	r24, X+
    2166:	9c 91       	ld	r25, X
    2168:	13 97       	sbiw	r26, 0x03	; 3
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	19 f0       	breq	.+6      	; 0x2174 <free+0xd4>
    216e:	fd 01       	movw	r30, r26
    2170:	dc 01       	movw	r26, r24
    2172:	f7 cf       	rjmp	.-18     	; 0x2162 <free+0xc2>
    2174:	8d 91       	ld	r24, X+
    2176:	9c 91       	ld	r25, X
    2178:	11 97       	sbiw	r26, 0x01	; 1
    217a:	9d 01       	movw	r18, r26
    217c:	2e 5f       	subi	r18, 0xFE	; 254
    217e:	3f 4f       	sbci	r19, 0xFF	; 255
    2180:	82 0f       	add	r24, r18
    2182:	93 1f       	adc	r25, r19
    2184:	20 91 bf 05 	lds	r18, 0x05BF	; 0x8005bf <__brkval>
    2188:	30 91 c0 05 	lds	r19, 0x05C0	; 0x8005c0 <__brkval+0x1>
    218c:	28 17       	cp	r18, r24
    218e:	39 07       	cpc	r19, r25
    2190:	69 f4       	brne	.+26     	; 0x21ac <free+0x10c>
    2192:	30 97       	sbiw	r30, 0x00	; 0
    2194:	29 f4       	brne	.+10     	; 0x21a0 <free+0x100>
    2196:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <__flp+0x1>
    219a:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <__flp>
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <free+0x104>
    21a0:	13 82       	std	Z+3, r1	; 0x03
    21a2:	12 82       	std	Z+2, r1	; 0x02
    21a4:	b0 93 c0 05 	sts	0x05C0, r27	; 0x8005c0 <__brkval+0x1>
    21a8:	a0 93 bf 05 	sts	0x05BF, r26	; 0x8005bf <__brkval>
    21ac:	df 91       	pop	r29
    21ae:	cf 91       	pop	r28
    21b0:	08 95       	ret

000021b2 <strnlen_P>:
    21b2:	fc 01       	movw	r30, r24
    21b4:	05 90       	lpm	r0, Z+
    21b6:	61 50       	subi	r22, 0x01	; 1
    21b8:	70 40       	sbci	r23, 0x00	; 0
    21ba:	01 10       	cpse	r0, r1
    21bc:	d8 f7       	brcc	.-10     	; 0x21b4 <strnlen_P+0x2>
    21be:	80 95       	com	r24
    21c0:	90 95       	com	r25
    21c2:	8e 0f       	add	r24, r30
    21c4:	9f 1f       	adc	r25, r31
    21c6:	08 95       	ret

000021c8 <memset>:
    21c8:	dc 01       	movw	r26, r24
    21ca:	01 c0       	rjmp	.+2      	; 0x21ce <memset+0x6>
    21cc:	6d 93       	st	X+, r22
    21ce:	41 50       	subi	r20, 0x01	; 1
    21d0:	50 40       	sbci	r21, 0x00	; 0
    21d2:	e0 f7       	brcc	.-8      	; 0x21cc <memset+0x4>
    21d4:	08 95       	ret

000021d6 <strnlen>:
    21d6:	fc 01       	movw	r30, r24
    21d8:	61 50       	subi	r22, 0x01	; 1
    21da:	70 40       	sbci	r23, 0x00	; 0
    21dc:	01 90       	ld	r0, Z+
    21de:	01 10       	cpse	r0, r1
    21e0:	d8 f7       	brcc	.-10     	; 0x21d8 <strnlen+0x2>
    21e2:	80 95       	com	r24
    21e4:	90 95       	com	r25
    21e6:	8e 0f       	add	r24, r30
    21e8:	9f 1f       	adc	r25, r31
    21ea:	08 95       	ret

000021ec <strrev>:
    21ec:	dc 01       	movw	r26, r24
    21ee:	fc 01       	movw	r30, r24
    21f0:	67 2f       	mov	r22, r23
    21f2:	71 91       	ld	r23, Z+
    21f4:	77 23       	and	r23, r23
    21f6:	e1 f7       	brne	.-8      	; 0x21f0 <strrev+0x4>
    21f8:	32 97       	sbiw	r30, 0x02	; 2
    21fa:	04 c0       	rjmp	.+8      	; 0x2204 <__stack+0x5>
    21fc:	7c 91       	ld	r23, X
    21fe:	6d 93       	st	X+, r22
    2200:	70 83       	st	Z, r23
    2202:	62 91       	ld	r22, -Z
    2204:	ae 17       	cp	r26, r30
    2206:	bf 07       	cpc	r27, r31
    2208:	c8 f3       	brcs	.-14     	; 0x21fc <strrev+0x10>
    220a:	08 95       	ret

0000220c <fputc>:
    220c:	0f 93       	push	r16
    220e:	1f 93       	push	r17
    2210:	cf 93       	push	r28
    2212:	df 93       	push	r29
    2214:	fb 01       	movw	r30, r22
    2216:	23 81       	ldd	r18, Z+3	; 0x03
    2218:	21 fd       	sbrc	r18, 1
    221a:	03 c0       	rjmp	.+6      	; 0x2222 <fputc+0x16>
    221c:	8f ef       	ldi	r24, 0xFF	; 255
    221e:	9f ef       	ldi	r25, 0xFF	; 255
    2220:	2c c0       	rjmp	.+88     	; 0x227a <fputc+0x6e>
    2222:	22 ff       	sbrs	r18, 2
    2224:	16 c0       	rjmp	.+44     	; 0x2252 <fputc+0x46>
    2226:	46 81       	ldd	r20, Z+6	; 0x06
    2228:	57 81       	ldd	r21, Z+7	; 0x07
    222a:	24 81       	ldd	r18, Z+4	; 0x04
    222c:	35 81       	ldd	r19, Z+5	; 0x05
    222e:	42 17       	cp	r20, r18
    2230:	53 07       	cpc	r21, r19
    2232:	44 f4       	brge	.+16     	; 0x2244 <fputc+0x38>
    2234:	a0 81       	ld	r26, Z
    2236:	b1 81       	ldd	r27, Z+1	; 0x01
    2238:	9d 01       	movw	r18, r26
    223a:	2f 5f       	subi	r18, 0xFF	; 255
    223c:	3f 4f       	sbci	r19, 0xFF	; 255
    223e:	31 83       	std	Z+1, r19	; 0x01
    2240:	20 83       	st	Z, r18
    2242:	8c 93       	st	X, r24
    2244:	26 81       	ldd	r18, Z+6	; 0x06
    2246:	37 81       	ldd	r19, Z+7	; 0x07
    2248:	2f 5f       	subi	r18, 0xFF	; 255
    224a:	3f 4f       	sbci	r19, 0xFF	; 255
    224c:	37 83       	std	Z+7, r19	; 0x07
    224e:	26 83       	std	Z+6, r18	; 0x06
    2250:	14 c0       	rjmp	.+40     	; 0x227a <fputc+0x6e>
    2252:	8b 01       	movw	r16, r22
    2254:	ec 01       	movw	r28, r24
    2256:	fb 01       	movw	r30, r22
    2258:	00 84       	ldd	r0, Z+8	; 0x08
    225a:	f1 85       	ldd	r31, Z+9	; 0x09
    225c:	e0 2d       	mov	r30, r0
    225e:	19 95       	eicall
    2260:	89 2b       	or	r24, r25
    2262:	e1 f6       	brne	.-72     	; 0x221c <fputc+0x10>
    2264:	d8 01       	movw	r26, r16
    2266:	16 96       	adiw	r26, 0x06	; 6
    2268:	8d 91       	ld	r24, X+
    226a:	9c 91       	ld	r25, X
    226c:	17 97       	sbiw	r26, 0x07	; 7
    226e:	01 96       	adiw	r24, 0x01	; 1
    2270:	17 96       	adiw	r26, 0x07	; 7
    2272:	9c 93       	st	X, r25
    2274:	8e 93       	st	-X, r24
    2276:	16 97       	sbiw	r26, 0x06	; 6
    2278:	ce 01       	movw	r24, r28
    227a:	df 91       	pop	r29
    227c:	cf 91       	pop	r28
    227e:	1f 91       	pop	r17
    2280:	0f 91       	pop	r16
    2282:	08 95       	ret

00002284 <__ultoa_invert>:
    2284:	fa 01       	movw	r30, r20
    2286:	aa 27       	eor	r26, r26
    2288:	28 30       	cpi	r18, 0x08	; 8
    228a:	51 f1       	breq	.+84     	; 0x22e0 <__ultoa_invert+0x5c>
    228c:	20 31       	cpi	r18, 0x10	; 16
    228e:	81 f1       	breq	.+96     	; 0x22f0 <__ultoa_invert+0x6c>
    2290:	e8 94       	clt
    2292:	6f 93       	push	r22
    2294:	6e 7f       	andi	r22, 0xFE	; 254
    2296:	6e 5f       	subi	r22, 0xFE	; 254
    2298:	7f 4f       	sbci	r23, 0xFF	; 255
    229a:	8f 4f       	sbci	r24, 0xFF	; 255
    229c:	9f 4f       	sbci	r25, 0xFF	; 255
    229e:	af 4f       	sbci	r26, 0xFF	; 255
    22a0:	b1 e0       	ldi	r27, 0x01	; 1
    22a2:	3e d0       	rcall	.+124    	; 0x2320 <__ultoa_invert+0x9c>
    22a4:	b4 e0       	ldi	r27, 0x04	; 4
    22a6:	3c d0       	rcall	.+120    	; 0x2320 <__ultoa_invert+0x9c>
    22a8:	67 0f       	add	r22, r23
    22aa:	78 1f       	adc	r23, r24
    22ac:	89 1f       	adc	r24, r25
    22ae:	9a 1f       	adc	r25, r26
    22b0:	a1 1d       	adc	r26, r1
    22b2:	68 0f       	add	r22, r24
    22b4:	79 1f       	adc	r23, r25
    22b6:	8a 1f       	adc	r24, r26
    22b8:	91 1d       	adc	r25, r1
    22ba:	a1 1d       	adc	r26, r1
    22bc:	6a 0f       	add	r22, r26
    22be:	71 1d       	adc	r23, r1
    22c0:	81 1d       	adc	r24, r1
    22c2:	91 1d       	adc	r25, r1
    22c4:	a1 1d       	adc	r26, r1
    22c6:	20 d0       	rcall	.+64     	; 0x2308 <__ultoa_invert+0x84>
    22c8:	09 f4       	brne	.+2      	; 0x22cc <__ultoa_invert+0x48>
    22ca:	68 94       	set
    22cc:	3f 91       	pop	r19
    22ce:	2a e0       	ldi	r18, 0x0A	; 10
    22d0:	26 9f       	mul	r18, r22
    22d2:	11 24       	eor	r1, r1
    22d4:	30 19       	sub	r19, r0
    22d6:	30 5d       	subi	r19, 0xD0	; 208
    22d8:	31 93       	st	Z+, r19
    22da:	de f6       	brtc	.-74     	; 0x2292 <__ultoa_invert+0xe>
    22dc:	cf 01       	movw	r24, r30
    22de:	08 95       	ret
    22e0:	46 2f       	mov	r20, r22
    22e2:	47 70       	andi	r20, 0x07	; 7
    22e4:	40 5d       	subi	r20, 0xD0	; 208
    22e6:	41 93       	st	Z+, r20
    22e8:	b3 e0       	ldi	r27, 0x03	; 3
    22ea:	0f d0       	rcall	.+30     	; 0x230a <__ultoa_invert+0x86>
    22ec:	c9 f7       	brne	.-14     	; 0x22e0 <__ultoa_invert+0x5c>
    22ee:	f6 cf       	rjmp	.-20     	; 0x22dc <__ultoa_invert+0x58>
    22f0:	46 2f       	mov	r20, r22
    22f2:	4f 70       	andi	r20, 0x0F	; 15
    22f4:	40 5d       	subi	r20, 0xD0	; 208
    22f6:	4a 33       	cpi	r20, 0x3A	; 58
    22f8:	18 f0       	brcs	.+6      	; 0x2300 <__ultoa_invert+0x7c>
    22fa:	49 5d       	subi	r20, 0xD9	; 217
    22fc:	31 fd       	sbrc	r19, 1
    22fe:	40 52       	subi	r20, 0x20	; 32
    2300:	41 93       	st	Z+, r20
    2302:	02 d0       	rcall	.+4      	; 0x2308 <__ultoa_invert+0x84>
    2304:	a9 f7       	brne	.-22     	; 0x22f0 <__ultoa_invert+0x6c>
    2306:	ea cf       	rjmp	.-44     	; 0x22dc <__ultoa_invert+0x58>
    2308:	b4 e0       	ldi	r27, 0x04	; 4
    230a:	a6 95       	lsr	r26
    230c:	97 95       	ror	r25
    230e:	87 95       	ror	r24
    2310:	77 95       	ror	r23
    2312:	67 95       	ror	r22
    2314:	ba 95       	dec	r27
    2316:	c9 f7       	brne	.-14     	; 0x230a <__ultoa_invert+0x86>
    2318:	00 97       	sbiw	r24, 0x00	; 0
    231a:	61 05       	cpc	r22, r1
    231c:	71 05       	cpc	r23, r1
    231e:	08 95       	ret
    2320:	9b 01       	movw	r18, r22
    2322:	ac 01       	movw	r20, r24
    2324:	0a 2e       	mov	r0, r26
    2326:	06 94       	lsr	r0
    2328:	57 95       	ror	r21
    232a:	47 95       	ror	r20
    232c:	37 95       	ror	r19
    232e:	27 95       	ror	r18
    2330:	ba 95       	dec	r27
    2332:	c9 f7       	brne	.-14     	; 0x2326 <__ultoa_invert+0xa2>
    2334:	62 0f       	add	r22, r18
    2336:	73 1f       	adc	r23, r19
    2338:	84 1f       	adc	r24, r20
    233a:	95 1f       	adc	r25, r21
    233c:	a0 1d       	adc	r26, r0
    233e:	08 95       	ret

00002340 <_exit>:
    2340:	f8 94       	cli

00002342 <__stop_program>:
    2342:	ff cf       	rjmp	.-2      	; 0x2342 <__stop_program>
