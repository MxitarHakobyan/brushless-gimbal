
drv_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800200  000011ca  0000125e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  0080023c  0080023c  0000129a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000129a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000217e  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001242  00000000  00000000  0000364e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e6e  00000000  00000000  00004890  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f4  00000000  00000000  00005700  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a79  00000000  00000000  00005bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000146c  00000000  00000000  0000666d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00007ad9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	45 c0       	rjmp	.+138    	; 0x148 <__vector_47>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea ec       	ldi	r30, 0xCA	; 202
      fc:	f1 e1       	ldi	r31, 0x11	; 17
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 33       	cpi	r26, 0x3C	; 60
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	ac e3       	ldi	r26, 0x3C	; 60
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 35       	cpi	r26, 0x5A	; 90
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	5f d0       	rcall	.+190    	; 0x1de <main>
     120:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <uart_putchar>:
		}
	}
	return true;
}
static int uart_putchar(char c, FILE *stream)
{
     126:	cf 93       	push	r28
     128:	c8 2f       	mov	r28, r24

	if (c == '\n')
     12a:	8a 30       	cpi	r24, 0x0A	; 10
     12c:	11 f4       	brne	.+4      	; 0x132 <uart_putchar+0xc>
	uart_putchar('\r', stream);
     12e:	8d e0       	ldi	r24, 0x0D	; 13
     130:	fa df       	rcall	.-12     	; 0x126 <uart_putchar>
	while ( !( UCSR0A & (1<<UDRE0)) )
     132:	e0 ec       	ldi	r30, 0xC0	; 192
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	85 ff       	sbrs	r24, 5
     13a:	fd cf       	rjmp	.-6      	; 0x136 <uart_putchar+0x10>
	;
	/* Put data into buffer, sends the data */
	UDR0 = c;
     13c:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	return 0;
}
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	cf 91       	pop	r28
     146:	08 95       	ret

00000148 <__vector_47>:
		#endif  
	}
	return 0;
}
ISR(TIMER5_COMPA_vect)
{
     148:	1f 92       	push	r1
     14a:	0f 92       	push	r0
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	0f 92       	push	r0
     150:	11 24       	eor	r1, r1
     152:	0b b6       	in	r0, 0x3b	; 59
     154:	0f 92       	push	r0
     156:	2f 93       	push	r18
     158:	3f 93       	push	r19
     15a:	4f 93       	push	r20
     15c:	5f 93       	push	r21
     15e:	6f 93       	push	r22
     160:	7f 93       	push	r23
     162:	8f 93       	push	r24
     164:	9f 93       	push	r25
     166:	af 93       	push	r26
     168:	bf 93       	push	r27
     16a:	ef 93       	push	r30
     16c:	ff 93       	push	r31
	//prescaler 1 ,calls OCR5A=7 
	// ???? 1 ????????????? ??? ?????? ?????
	timer5_ovf_count=timer5_ovf_count+1;
     16e:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <__data_end>
     172:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <__data_end+0x1>
     176:	a0 91 3e 02 	lds	r26, 0x023E	; 0x80023e <__data_end+0x2>
     17a:	b0 91 3f 02 	lds	r27, 0x023F	; 0x80023f <__data_end+0x3>
     17e:	01 96       	adiw	r24, 0x01	; 1
     180:	a1 1d       	adc	r26, r1
     182:	b1 1d       	adc	r27, r1
     184:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <__data_end>
     188:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <__data_end+0x1>
     18c:	a0 93 3e 02 	sts	0x023E, r26	; 0x80023e <__data_end+0x2>
     190:	b0 93 3f 02 	sts	0x023F, r27	; 0x80023f <__data_end+0x3>
	printf("asdf");
     194:	86 e0       	ldi	r24, 0x06	; 6
     196:	92 e0       	ldi	r25, 0x02	; 2
     198:	9f 93       	push	r25
     19a:	8f 93       	push	r24
     19c:	e2 d3       	rcall	.+1988   	; 0x962 <printf>
}
     19e:	0f 90       	pop	r0
     1a0:	0f 90       	pop	r0
     1a2:	ff 91       	pop	r31
     1a4:	ef 91       	pop	r30
     1a6:	bf 91       	pop	r27
     1a8:	af 91       	pop	r26
     1aa:	9f 91       	pop	r25
     1ac:	8f 91       	pop	r24
     1ae:	7f 91       	pop	r23
     1b0:	6f 91       	pop	r22
     1b2:	5f 91       	pop	r21
     1b4:	4f 91       	pop	r20
     1b6:	3f 91       	pop	r19
     1b8:	2f 91       	pop	r18
     1ba:	0f 90       	pop	r0
     1bc:	0b be       	out	0x3b, r0	; 59
     1be:	0f 90       	pop	r0
     1c0:	0f be       	out	0x3f, r0	; 63
     1c2:	0f 90       	pop	r0
     1c4:	1f 90       	pop	r1
     1c6:	18 95       	reti

000001c8 <micros>:
unsigned long micros()
{
	cli();
     1c8:	f8 94       	cli
	uint32_t micros_return_value=timer5_ovf_count;
     1ca:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <__data_end>
     1ce:	70 91 3d 02 	lds	r23, 0x023D	; 0x80023d <__data_end+0x1>
     1d2:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end+0x2>
     1d6:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <__data_end+0x3>
	sei();
     1da:	78 94       	sei
	return micros_return_value;
}
     1dc:	08 95       	ret

000001de <main>:
uint16_t ADC_max=0;
uint8_t buffer[14];
uint8_t flag=0;
int main(void)

{	
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
     1e6:	68 97       	sbiw	r28, 0x18	; 24
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	f8 94       	cli
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	0f be       	out	0x3f, r0	; 63
	i2c_init();
     1f0:	cd bf       	out	0x3d, r28	; 61
	USART_Init(MY_UBRR);
     1f2:	5e d2       	rcall	.+1212   	; 0x6b0 <i2c_init>
     1f4:	80 e1       	ldi	r24, 0x10	; 16
     1f6:	90 e0       	ldi	r25, 0x00	; 0
	uart_str = fdevopen(uart_putchar, NULL);
     1f8:	f2 d2       	rcall	.+1508   	; 0x7de <USART_Init>
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	83 e9       	ldi	r24, 0x93	; 147
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	65 d3       	rcall	.+1738   	; 0x8ce <fdevopen>
     204:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <uart_str+0x1>
	setup_timer5();
     208:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <uart_str>
	Enable_timer5_compare_interrupt();
     20c:	45 d2       	rcall	.+1162   	; 0x698 <setup_timer5>
	OCR5A=7;//interrupt every 1us
     20e:	4a d2       	rcall	.+1172   	; 0x6a4 <Enable_timer5_compare_interrupt>
     210:	87 e0       	ldi	r24, 0x07	; 7
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     218:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	double acc_total_vector=0;
	double angle_pitch_acc=0;
	double angle_roll_acc=0;
	bool set_gyro_angles;
	#ifdef CALIBERATED_DATA
		int32_t gyroX_calib=0;
     21c:	19 82       	std	Y+1, r1	; 0x01
     21e:	1a 82       	std	Y+2, r1	; 0x02
     220:	1b 82       	std	Y+3, r1	; 0x03
		int32_t gyroY_calib=0;
     222:	1c 82       	std	Y+4, r1	; 0x04
     224:	1d 82       	std	Y+5, r1	; 0x05
     226:	1e 82       	std	Y+6, r1	; 0x06
     228:	1f 82       	std	Y+7, r1	; 0x07
		int32_t gyroZ_calib=0;
     22a:	18 86       	std	Y+8, r1	; 0x08
     22c:	19 86       	std	Y+9, r1	; 0x09
     22e:	1a 86       	std	Y+10, r1	; 0x0a
     230:	1b 86       	std	Y+11, r1	; 0x0b
		int32_t accelX_calib=0;
     232:	1c 86       	std	Y+12, r1	; 0x0c
     234:	1d 86       	std	Y+13, r1	; 0x0d
     236:	1e 86       	std	Y+14, r1	; 0x0e
     238:	1f 86       	std	Y+15, r1	; 0x0f
		int32_t accelY_calib=0;
     23a:	18 8a       	std	Y+16, r1	; 0x10
     23c:	19 8a       	std	Y+17, r1	; 0x11
     23e:	1a 8a       	std	Y+18, r1	; 0x12
     240:	1b 8a       	std	Y+19, r1	; 0x13
		int32_t accelZ_calib=0;
     242:	1c 8a       	std	Y+20, r1	; 0x14
     244:	1d 8a       	std	Y+21, r1	; 0x15
     246:	1e 8a       	std	Y+22, r1	; 0x16
     248:	1f 8a       	std	Y+23, r1	; 0x17
		mpu6050_calibrate_gyro(&gyroX_calib,&gyroY_calib,&gyroZ_calib);
     24a:	18 8e       	std	Y+24, r1	; 0x18
     24c:	ae 01       	movw	r20, r28
     24e:	47 5f       	subi	r20, 0xF7	; 247
     250:	5f 4f       	sbci	r21, 0xFF	; 255
     252:	be 01       	movw	r22, r28
     254:	6b 5f       	subi	r22, 0xFB	; 251
     256:	7f 4f       	sbci	r23, 0xFF	; 255
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
		mpu6050_calibrate_accel(&accelX_calib,&accelY_calib,&accelZ_calib);
     25c:	6e d0       	rcall	.+220    	; 0x33a <mpu6050_calibrate_gyro>
     25e:	ae 01       	movw	r20, r28
     260:	4b 5e       	subi	r20, 0xEB	; 235
     262:	5f 4f       	sbci	r21, 0xFF	; 255
     264:	be 01       	movw	r22, r28
     266:	6f 5e       	subi	r22, 0xEF	; 239
     268:	7f 4f       	sbci	r23, 0xFF	; 255
	#endif
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV,7);
     26a:	ce 01       	movw	r24, r28
     26c:	0d 96       	adiw	r24, 0x0d	; 13
	mpu6050_writeByte(MPU6050_RA_CONFIG,0x00);
     26e:	4c d1       	rcall	.+664    	; 0x508 <mpu6050_calibrate_accel>
     270:	67 e0       	ldi	r22, 0x07	; 7
	mpu6050_writeByte(MPU6050_RA_GYRO_CONFIG,0x08);//gyro sensitivity set to 500 o/s
     272:	89 e1       	ldi	r24, 0x19	; 25
	mpu6050_writeByte(MPU6050_RA_ACCEL_CONFIG,0x10);//accel sensitivity -/+ 8g
     274:	00 d2       	rcall	.+1024   	; 0x676 <mpu6050_writeByte>
     276:	60 e0       	ldi	r22, 0x00	; 0
	mpu6050_writeByte(MPU6050_RA_PWR_MGMT_1,0x01);
     278:	8a e1       	ldi	r24, 0x1A	; 26
     27a:	fd d1       	rcall	.+1018   	; 0x676 <mpu6050_writeByte>
     27c:	68 e0       	ldi	r22, 0x08	; 8
     27e:	8b e1       	ldi	r24, 0x1B	; 27
	
	/*-----------------end---------------*/
	sei();
     280:	fa d1       	rcall	.+1012   	; 0x676 <mpu6050_writeByte>
    while (1) 
    {
		uint32_t timer1=micros();
     282:	60 e1       	ldi	r22, 0x10	; 16
     284:	8c e1       	ldi	r24, 0x1C	; 28
				//print16(var2);
				//printf("\n");
			#endif
			//for(int i=0;i<10000;i++);
			//_delay_ms(10);
			USART_Transmit(0xff);
     286:	f7 d1       	rcall	.+1006   	; 0x676 <mpu6050_writeByte>
     288:	61 e0       	ldi	r22, 0x01	; 1
     28a:	8b e6       	ldi	r24, 0x6B	; 107
			//uint32_t value=timer1-micros();
			// print16ln(&value);
			timer1=micros();
     28c:	f4 d1       	rcall	.+1000   	; 0x676 <mpu6050_writeByte>
     28e:	78 94       	sei
     290:	9b df       	rcall	.-202    	; 0x1c8 <micros>
     292:	8f ef       	ldi	r24, 0xFF	; 255
			while(micros()-timer1<1000000);
     294:	af d2       	rcall	.+1374   	; 0x7f4 <USART_Transmit>
     296:	98 df       	rcall	.-208    	; 0x1c8 <micros>
     298:	6b 01       	movw	r12, r22
     29a:	7c 01       	movw	r14, r24
     29c:	95 df       	rcall	.-214    	; 0x1c8 <micros>
     29e:	dc 01       	movw	r26, r24
     2a0:	cb 01       	movw	r24, r22
     2a2:	8c 19       	sub	r24, r12
     2a4:	9d 09       	sbc	r25, r13
     2a6:	ae 09       	sbc	r26, r14
     2a8:	bf 09       	sbc	r27, r15
     2aa:	80 34       	cpi	r24, 0x40	; 64
     2ac:	92 44       	sbci	r25, 0x42	; 66
     2ae:	af 40       	sbci	r26, 0x0F	; 15
     2b0:	b1 05       	cpc	r27, r1
     2b2:	a0 f3       	brcs	.-24     	; 0x29c <main+0xbe>
     2b4:	ed cf       	rjmp	.-38     	; 0x290 <main+0xb2>

000002b6 <mpu6050_readByte>:
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_H);
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_L);
	return axis_value;
}
uint8_t mpu6050_readByte(uint8_t byteToRead)//readbyte
{
     2b6:	cf 93       	push	r28
     2b8:	c8 2f       	mov	r28, r24
	i2c_start(MPU6050_WRITE);
     2ba:	80 ed       	ldi	r24, 0xD0	; 208
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	fe d1       	rcall	.+1020   	; 0x6bc <i2c_start>
	i2c_write(byteToRead);
     2c0:	8c 2f       	mov	r24, r28
     2c2:	90 e0       	ldi	r25, 0x00	; 0
	i2c_stop();
	
	i2c_start(MPU6050_READ);
     2c4:	51 d2       	rcall	.+1186   	; 0x768 <i2c_write>
     2c6:	40 d2       	rcall	.+1152   	; 0x748 <i2c_stop>
	uint8_t byteToReturn=i2c_readNak();
     2c8:	81 ed       	ldi	r24, 0xD1	; 209
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	f7 d1       	rcall	.+1006   	; 0x6bc <i2c_start>
	i2c_stop();
     2ce:	6d d2       	rcall	.+1242   	; 0x7aa <i2c_readNak>
     2d0:	c8 2f       	mov	r28, r24
	return byteToReturn;
}
     2d2:	3a d2       	rcall	.+1140   	; 0x748 <i2c_stop>
     2d4:	8c 2f       	mov	r24, r28
     2d6:	cf 91       	pop	r28
     2d8:	08 95       	ret

000002da <mpu6050_read_gyroX>:
	//-----------------------------------
	*/
}
#endif
uint16_t mpu6050_read_gyroX()//axis x=0,y=1,z=2
{
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_XOUT_H);
     2de:	83 e4       	ldi	r24, 0x43	; 67
     2e0:	ea df       	rcall	.-44     	; 0x2b6 <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_XOUT_L);
     2e2:	c8 2f       	mov	r28, r24
     2e4:	d0 e0       	ldi	r29, 0x00	; 0
     2e6:	dc 2f       	mov	r29, r28
     2e8:	cc 27       	eor	r28, r28
     2ea:	84 e4       	ldi	r24, 0x44	; 68
     2ec:	e4 df       	rcall	.-56     	; 0x2b6 <mpu6050_readByte>
	return axis_value;
}
     2ee:	9e 01       	movw	r18, r28
     2f0:	28 2b       	or	r18, r24
     2f2:	c9 01       	movw	r24, r18
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <mpu6050_read_gyroY>:
uint16_t mpu6050_read_gyroY()//axis x=0,y=1,z=2
{
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_YOUT_H);
     2fe:	85 e4       	ldi	r24, 0x45	; 69
     300:	da df       	rcall	.-76     	; 0x2b6 <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_YOUT_L);
     302:	c8 2f       	mov	r28, r24
     304:	d0 e0       	ldi	r29, 0x00	; 0
     306:	dc 2f       	mov	r29, r28
     308:	cc 27       	eor	r28, r28
     30a:	86 e4       	ldi	r24, 0x46	; 70
     30c:	d4 df       	rcall	.-88     	; 0x2b6 <mpu6050_readByte>
	return axis_value;
}
     30e:	9e 01       	movw	r18, r28
     310:	28 2b       	or	r18, r24
     312:	c9 01       	movw	r24, r18
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	08 95       	ret

0000031a <mpu6050_read_gyroZ>:
uint16_t mpu6050_read_gyroZ()//axis x=0,y=1,z=2
{
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_H);
     31e:	87 e4       	ldi	r24, 0x47	; 71
     320:	ca df       	rcall	.-108    	; 0x2b6 <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_L);
     322:	c8 2f       	mov	r28, r24
     324:	d0 e0       	ldi	r29, 0x00	; 0
     326:	dc 2f       	mov	r29, r28
     328:	cc 27       	eor	r28, r28
     32a:	88 e4       	ldi	r24, 0x48	; 72
     32c:	c4 df       	rcall	.-120    	; 0x2b6 <mpu6050_readByte>
	return axis_value;
}
     32e:	9e 01       	movw	r18, r28
     330:	28 2b       	or	r18, r24
     332:	c9 01       	movw	r24, r18
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	08 95       	ret

0000033a <mpu6050_calibrate_gyro>:
 *  Author: HP
 */ 
#include "MPU6050.h"
#ifdef CALIBERATED_DATA
void mpu6050_calibrate_gyro(int32_t *x,int32_t *y, int32_t *z)
{
     33a:	cf 92       	push	r12
     33c:	df 92       	push	r13
     33e:	ef 92       	push	r14
     340:	ff 92       	push	r15
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	6c 01       	movw	r12, r24
     34c:	7b 01       	movw	r14, r22
     34e:	8a 01       	movw	r16, r20
	printf("Calibrating Gyro...\n");
     350:	8b e0       	ldi	r24, 0x0B	; 11
     352:	92 e0       	ldi	r25, 0x02	; 2
     354:	19 d3       	rcall	.+1586   	; 0x988 <puts>
     356:	c4 e1       	ldi	r28, 0x14	; 20
	for (int i=0;i<calibration_counter;i++)
	{
		(*x)+=mpu6050_read_gyroX();
     358:	d0 e0       	ldi	r29, 0x00	; 0
     35a:	bf df       	rcall	.-130    	; 0x2da <mpu6050_read_gyroX>
     35c:	f6 01       	movw	r30, r12
     35e:	40 81       	ld	r20, Z
     360:	51 81       	ldd	r21, Z+1	; 0x01
     362:	62 81       	ldd	r22, Z+2	; 0x02
     364:	73 81       	ldd	r23, Z+3	; 0x03
     366:	48 0f       	add	r20, r24
     368:	59 1f       	adc	r21, r25
     36a:	61 1d       	adc	r22, r1
     36c:	71 1d       	adc	r23, r1
     36e:	40 83       	st	Z, r20
     370:	51 83       	std	Z+1, r21	; 0x01
     372:	62 83       	std	Z+2, r22	; 0x02
		(*y)+=mpu6050_read_gyroY();
     374:	73 83       	std	Z+3, r23	; 0x03
     376:	c1 df       	rcall	.-126    	; 0x2fa <mpu6050_read_gyroY>
     378:	f7 01       	movw	r30, r14
     37a:	40 81       	ld	r20, Z
     37c:	51 81       	ldd	r21, Z+1	; 0x01
     37e:	62 81       	ldd	r22, Z+2	; 0x02
     380:	73 81       	ldd	r23, Z+3	; 0x03
     382:	48 0f       	add	r20, r24
     384:	59 1f       	adc	r21, r25
     386:	61 1d       	adc	r22, r1
     388:	71 1d       	adc	r23, r1
     38a:	40 83       	st	Z, r20
     38c:	51 83       	std	Z+1, r21	; 0x01
     38e:	62 83       	std	Z+2, r22	; 0x02
		(*z)+=mpu6050_read_gyroZ();
     390:	73 83       	std	Z+3, r23	; 0x03
     392:	c3 df       	rcall	.-122    	; 0x31a <mpu6050_read_gyroZ>
     394:	f8 01       	movw	r30, r16
     396:	40 81       	ld	r20, Z
     398:	51 81       	ldd	r21, Z+1	; 0x01
     39a:	62 81       	ldd	r22, Z+2	; 0x02
     39c:	73 81       	ldd	r23, Z+3	; 0x03
     39e:	48 0f       	add	r20, r24
     3a0:	59 1f       	adc	r21, r25
     3a2:	61 1d       	adc	r22, r1
     3a4:	71 1d       	adc	r23, r1
     3a6:	40 83       	st	Z, r20
     3a8:	51 83       	std	Z+1, r21	; 0x01
     3aa:	62 83       	std	Z+2, r22	; 0x02
     3ac:	73 83       	std	Z+3, r23	; 0x03
     3ae:	21 97       	sbiw	r28, 0x01	; 1
#include "MPU6050.h"
#ifdef CALIBERATED_DATA
void mpu6050_calibrate_gyro(int32_t *x,int32_t *y, int32_t *z)
{
	printf("Calibrating Gyro...\n");
	for (int i=0;i<calibration_counter;i++)
     3b0:	a1 f6       	brne	.-88     	; 0x35a <mpu6050_calibrate_gyro+0x20>
		(*x)+=mpu6050_read_gyroX();
		(*y)+=mpu6050_read_gyroY();
		(*z)+=mpu6050_read_gyroZ();
		_delay_ms(caliberation_wait_delay);
	}
		if(*x<0)
     3b2:	f6 01       	movw	r30, r12
     3b4:	60 81       	ld	r22, Z
     3b6:	71 81       	ldd	r23, Z+1	; 0x01
     3b8:	82 81       	ldd	r24, Z+2	; 0x02
     3ba:	93 81       	ldd	r25, Z+3	; 0x03
     3bc:	99 23       	and	r25, r25
     3be:	ac f4       	brge	.+42     	; 0x3ea <mpu6050_calibrate_gyro+0xb0>
		(*x)=abs(*x)/calibration_counter;
     3c0:	9b 01       	movw	r18, r22
     3c2:	77 23       	and	r23, r23
     3c4:	24 f4       	brge	.+8      	; 0x3ce <mpu6050_calibrate_gyro+0x94>
     3c6:	22 27       	eor	r18, r18
     3c8:	33 27       	eor	r19, r19
     3ca:	26 1b       	sub	r18, r22
     3cc:	37 0b       	sbc	r19, r23
     3ce:	c9 01       	movw	r24, r18
     3d0:	64 e1       	ldi	r22, 0x14	; 20
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	17 d2       	rcall	.+1070   	; 0x804 <__divmodhi4>
     3d6:	cb 01       	movw	r24, r22
     3d8:	77 0f       	add	r23, r23
     3da:	aa 0b       	sbc	r26, r26
     3dc:	bb 0b       	sbc	r27, r27
     3de:	f6 01       	movw	r30, r12
     3e0:	80 83       	st	Z, r24
     3e2:	91 83       	std	Z+1, r25	; 0x01
     3e4:	a2 83       	std	Z+2, r26	; 0x02
     3e6:	b3 83       	std	Z+3, r27	; 0x03
		else
		(*x)=(*x)/calibration_counter;
     3e8:	0a c0       	rjmp	.+20     	; 0x3fe <mpu6050_calibrate_gyro+0xc4>
     3ea:	24 e1       	ldi	r18, 0x14	; 20
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	1b d2       	rcall	.+1078   	; 0x82a <__divmodsi4>
     3f4:	f6 01       	movw	r30, r12
     3f6:	20 83       	st	Z, r18
     3f8:	31 83       	std	Z+1, r19	; 0x01
     3fa:	42 83       	std	Z+2, r20	; 0x02
     3fc:	53 83       	std	Z+3, r21	; 0x03
		
		if(*y<0)
     3fe:	f7 01       	movw	r30, r14
     400:	60 81       	ld	r22, Z
     402:	71 81       	ldd	r23, Z+1	; 0x01
     404:	82 81       	ldd	r24, Z+2	; 0x02
     406:	93 81       	ldd	r25, Z+3	; 0x03
     408:	99 23       	and	r25, r25
     40a:	ac f4       	brge	.+42     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		(*y)=abs(*y)/calibration_counter;
     40c:	9b 01       	movw	r18, r22
     40e:	77 23       	and	r23, r23
     410:	24 f4       	brge	.+8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     412:	22 27       	eor	r18, r18
     414:	33 27       	eor	r19, r19
     416:	26 1b       	sub	r18, r22
     418:	37 0b       	sbc	r19, r23
     41a:	c9 01       	movw	r24, r18
     41c:	64 e1       	ldi	r22, 0x14	; 20
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	f1 d1       	rcall	.+994    	; 0x804 <__divmodhi4>
     422:	cb 01       	movw	r24, r22
     424:	77 0f       	add	r23, r23
     426:	aa 0b       	sbc	r26, r26
     428:	bb 0b       	sbc	r27, r27
     42a:	f7 01       	movw	r30, r14
     42c:	80 83       	st	Z, r24
     42e:	91 83       	std	Z+1, r25	; 0x01
     430:	a2 83       	std	Z+2, r26	; 0x02
     432:	b3 83       	std	Z+3, r27	; 0x03
		else
		(*y)=(*y)/calibration_counter;
     434:	0a c0       	rjmp	.+20     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     436:	24 e1       	ldi	r18, 0x14	; 20
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	40 e0       	ldi	r20, 0x00	; 0
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	f5 d1       	rcall	.+1002   	; 0x82a <__divmodsi4>
     440:	f7 01       	movw	r30, r14
     442:	20 83       	st	Z, r18
     444:	31 83       	std	Z+1, r19	; 0x01
     446:	42 83       	std	Z+2, r20	; 0x02
     448:	53 83       	std	Z+3, r21	; 0x03
		
		if(*z<0)
     44a:	f8 01       	movw	r30, r16
     44c:	60 81       	ld	r22, Z
     44e:	71 81       	ldd	r23, Z+1	; 0x01
     450:	82 81       	ldd	r24, Z+2	; 0x02
     452:	93 81       	ldd	r25, Z+3	; 0x03
     454:	99 23       	and	r25, r25
     456:	ac f4       	brge	.+42     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
		(*z)=abs(*z)/calibration_counter;
     458:	9b 01       	movw	r18, r22
     45a:	77 23       	and	r23, r23
     45c:	24 f4       	brge	.+8      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     45e:	22 27       	eor	r18, r18
     460:	33 27       	eor	r19, r19
     462:	26 1b       	sub	r18, r22
     464:	37 0b       	sbc	r19, r23
     466:	c9 01       	movw	r24, r18
     468:	64 e1       	ldi	r22, 0x14	; 20
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	cb d1       	rcall	.+918    	; 0x804 <__divmodhi4>
     46e:	cb 01       	movw	r24, r22
     470:	77 0f       	add	r23, r23
     472:	aa 0b       	sbc	r26, r26
     474:	bb 0b       	sbc	r27, r27
     476:	f8 01       	movw	r30, r16
     478:	80 83       	st	Z, r24
     47a:	91 83       	std	Z+1, r25	; 0x01
     47c:	a2 83       	std	Z+2, r26	; 0x02
     47e:	b3 83       	std	Z+3, r27	; 0x03
		else
		(*z)=(*z)/calibration_counter;
     480:	0a c0       	rjmp	.+20     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     482:	24 e1       	ldi	r18, 0x14	; 20
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	40 e0       	ldi	r20, 0x00	; 0
     488:	50 e0       	ldi	r21, 0x00	; 0
     48a:	cf d1       	rcall	.+926    	; 0x82a <__divmodsi4>
     48c:	f8 01       	movw	r30, r16
     48e:	20 83       	st	Z, r18
     490:	31 83       	std	Z+1, r19	; 0x01
     492:	42 83       	std	Z+2, r20	; 0x02
     494:	53 83       	std	Z+3, r21	; 0x03
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/			
	
}
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	df 90       	pop	r13
     4a4:	cf 90       	pop	r12
     4a6:	08 95       	ret

000004a8 <mpu6050_read_accelX>:
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_H);
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_L);
	return axis_value;
}
uint16_t mpu6050_read_accelX()
{
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_XOUT_H);
     4ac:	8b e3       	ldi	r24, 0x3B	; 59
     4ae:	03 df       	rcall	.-506    	; 0x2b6 <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_XOUT_L);
     4b0:	c8 2f       	mov	r28, r24
     4b2:	d0 e0       	ldi	r29, 0x00	; 0
     4b4:	dc 2f       	mov	r29, r28
     4b6:	cc 27       	eor	r28, r28
     4b8:	8c e3       	ldi	r24, 0x3C	; 60
     4ba:	fd de       	rcall	.-518    	; 0x2b6 <mpu6050_readByte>
	return axis_value;
}
     4bc:	9e 01       	movw	r18, r28
     4be:	28 2b       	or	r18, r24
     4c0:	c9 01       	movw	r24, r18
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	08 95       	ret

000004c8 <mpu6050_read_accelY>:
uint16_t mpu6050_read_accelY()
{
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_YOUT_H);
     4cc:	8d e3       	ldi	r24, 0x3D	; 61
     4ce:	f3 de       	rcall	.-538    	; 0x2b6 <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_YOUT_L);
     4d0:	c8 2f       	mov	r28, r24
     4d2:	d0 e0       	ldi	r29, 0x00	; 0
     4d4:	dc 2f       	mov	r29, r28
     4d6:	cc 27       	eor	r28, r28
     4d8:	8e e3       	ldi	r24, 0x3E	; 62
     4da:	ed de       	rcall	.-550    	; 0x2b6 <mpu6050_readByte>
	return axis_value;
}
     4dc:	9e 01       	movw	r18, r28
     4de:	28 2b       	or	r18, r24
     4e0:	c9 01       	movw	r24, r18
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <mpu6050_read_accelZ>:
uint16_t mpu6050_read_accelZ()
{
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_H);
     4ec:	8f e3       	ldi	r24, 0x3F	; 63
     4ee:	e3 de       	rcall	.-570    	; 0x2b6 <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_L);
     4f0:	c8 2f       	mov	r28, r24
     4f2:	d0 e0       	ldi	r29, 0x00	; 0
     4f4:	dc 2f       	mov	r29, r28
     4f6:	cc 27       	eor	r28, r28
     4f8:	80 e4       	ldi	r24, 0x40	; 64
     4fa:	dd de       	rcall	.-582    	; 0x2b6 <mpu6050_readByte>
	return axis_value;
}
     4fc:	9e 01       	movw	r18, r28
     4fe:	28 2b       	or	r18, r24
     500:	c9 01       	movw	r24, r18
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	08 95       	ret

00000508 <mpu6050_calibrate_accel>:
	*/			
	
}

void mpu6050_calibrate_accel(int32_t *x,int32_t *y, int32_t *z)
{
     508:	cf 92       	push	r12
     50a:	df 92       	push	r13
     50c:	ef 92       	push	r14
     50e:	ff 92       	push	r15
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	6c 01       	movw	r12, r24
     51a:	7b 01       	movw	r14, r22
     51c:	8a 01       	movw	r16, r20
	
	printf("Calibrating Accelerometer...\n");
     51e:	8f e1       	ldi	r24, 0x1F	; 31
     520:	92 e0       	ldi	r25, 0x02	; 2
     522:	32 d2       	rcall	.+1124   	; 0x988 <puts>
     524:	c4 e1       	ldi	r28, 0x14	; 20
	for(int i=0;i<calibration_counter;i++){
		(*x)+=mpu6050_read_accelX();
     526:	d0 e0       	ldi	r29, 0x00	; 0
     528:	bf df       	rcall	.-130    	; 0x4a8 <mpu6050_read_accelX>
     52a:	f6 01       	movw	r30, r12
     52c:	40 81       	ld	r20, Z
     52e:	51 81       	ldd	r21, Z+1	; 0x01
     530:	62 81       	ldd	r22, Z+2	; 0x02
     532:	73 81       	ldd	r23, Z+3	; 0x03
     534:	48 0f       	add	r20, r24
     536:	59 1f       	adc	r21, r25
     538:	61 1d       	adc	r22, r1
     53a:	71 1d       	adc	r23, r1
     53c:	40 83       	st	Z, r20
     53e:	51 83       	std	Z+1, r21	; 0x01
     540:	62 83       	std	Z+2, r22	; 0x02
		(*y)+=mpu6050_read_accelY();
     542:	73 83       	std	Z+3, r23	; 0x03
     544:	c1 df       	rcall	.-126    	; 0x4c8 <mpu6050_read_accelY>
     546:	f7 01       	movw	r30, r14
     548:	40 81       	ld	r20, Z
     54a:	51 81       	ldd	r21, Z+1	; 0x01
     54c:	62 81       	ldd	r22, Z+2	; 0x02
     54e:	73 81       	ldd	r23, Z+3	; 0x03
     550:	48 0f       	add	r20, r24
     552:	59 1f       	adc	r21, r25
     554:	61 1d       	adc	r22, r1
     556:	71 1d       	adc	r23, r1
     558:	40 83       	st	Z, r20
     55a:	51 83       	std	Z+1, r21	; 0x01
     55c:	62 83       	std	Z+2, r22	; 0x02
		(*z)+=mpu6050_read_accelZ();
     55e:	73 83       	std	Z+3, r23	; 0x03
     560:	c3 df       	rcall	.-122    	; 0x4e8 <mpu6050_read_accelZ>
     562:	f8 01       	movw	r30, r16
     564:	40 81       	ld	r20, Z
     566:	51 81       	ldd	r21, Z+1	; 0x01
     568:	62 81       	ldd	r22, Z+2	; 0x02
     56a:	73 81       	ldd	r23, Z+3	; 0x03
     56c:	48 0f       	add	r20, r24
     56e:	59 1f       	adc	r21, r25
     570:	61 1d       	adc	r22, r1
     572:	71 1d       	adc	r23, r1
     574:	40 83       	st	Z, r20
     576:	51 83       	std	Z+1, r21	; 0x01
     578:	62 83       	std	Z+2, r22	; 0x02
     57a:	73 83       	std	Z+3, r23	; 0x03
     57c:	21 97       	sbiw	r28, 0x01	; 1

void mpu6050_calibrate_accel(int32_t *x,int32_t *y, int32_t *z)
{
	
	printf("Calibrating Accelerometer...\n");
	for(int i=0;i<calibration_counter;i++){
     57e:	a1 f6       	brne	.-88     	; 0x528 <mpu6050_calibrate_accel+0x20>
		(*x)+=mpu6050_read_accelX();
		(*y)+=mpu6050_read_accelY();
		(*z)+=mpu6050_read_accelZ();
		_delay_ms(caliberation_wait_delay);
	}
	if(*x<0)
     580:	f6 01       	movw	r30, r12
     582:	60 81       	ld	r22, Z
     584:	71 81       	ldd	r23, Z+1	; 0x01
     586:	82 81       	ldd	r24, Z+2	; 0x02
     588:	93 81       	ldd	r25, Z+3	; 0x03
     58a:	99 23       	and	r25, r25
     58c:	ac f4       	brge	.+42     	; 0x5b8 <mpu6050_calibrate_accel+0xb0>
	(*x)=abs(*x)/calibration_counter;
     58e:	9b 01       	movw	r18, r22
     590:	77 23       	and	r23, r23
     592:	24 f4       	brge	.+8      	; 0x59c <mpu6050_calibrate_accel+0x94>
     594:	22 27       	eor	r18, r18
     596:	33 27       	eor	r19, r19
     598:	26 1b       	sub	r18, r22
     59a:	37 0b       	sbc	r19, r23
     59c:	c9 01       	movw	r24, r18
     59e:	64 e1       	ldi	r22, 0x14	; 20
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	30 d1       	rcall	.+608    	; 0x804 <__divmodhi4>
     5a4:	cb 01       	movw	r24, r22
     5a6:	77 0f       	add	r23, r23
     5a8:	aa 0b       	sbc	r26, r26
     5aa:	bb 0b       	sbc	r27, r27
     5ac:	f6 01       	movw	r30, r12
     5ae:	80 83       	st	Z, r24
     5b0:	91 83       	std	Z+1, r25	; 0x01
     5b2:	a2 83       	std	Z+2, r26	; 0x02
     5b4:	b3 83       	std	Z+3, r27	; 0x03
	else
	(*x)=(*x)/calibration_counter;
     5b6:	0a c0       	rjmp	.+20     	; 0x5cc <mpu6050_calibrate_accel+0xc4>
     5b8:	24 e1       	ldi	r18, 0x14	; 20
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	34 d1       	rcall	.+616    	; 0x82a <__divmodsi4>
     5c2:	f6 01       	movw	r30, r12
     5c4:	20 83       	st	Z, r18
     5c6:	31 83       	std	Z+1, r19	; 0x01
     5c8:	42 83       	std	Z+2, r20	; 0x02
     5ca:	53 83       	std	Z+3, r21	; 0x03
	
	if(*y<0)
     5cc:	f7 01       	movw	r30, r14
     5ce:	60 81       	ld	r22, Z
     5d0:	71 81       	ldd	r23, Z+1	; 0x01
     5d2:	82 81       	ldd	r24, Z+2	; 0x02
     5d4:	93 81       	ldd	r25, Z+3	; 0x03
     5d6:	99 23       	and	r25, r25
     5d8:	ac f4       	brge	.+42     	; 0x604 <mpu6050_calibrate_accel+0xfc>
	(*y)=abs(*y)/calibration_counter;
     5da:	9b 01       	movw	r18, r22
     5dc:	77 23       	and	r23, r23
     5de:	24 f4       	brge	.+8      	; 0x5e8 <mpu6050_calibrate_accel+0xe0>
     5e0:	22 27       	eor	r18, r18
     5e2:	33 27       	eor	r19, r19
     5e4:	26 1b       	sub	r18, r22
     5e6:	37 0b       	sbc	r19, r23
     5e8:	c9 01       	movw	r24, r18
     5ea:	64 e1       	ldi	r22, 0x14	; 20
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	0a d1       	rcall	.+532    	; 0x804 <__divmodhi4>
     5f0:	cb 01       	movw	r24, r22
     5f2:	77 0f       	add	r23, r23
     5f4:	aa 0b       	sbc	r26, r26
     5f6:	bb 0b       	sbc	r27, r27
     5f8:	f7 01       	movw	r30, r14
     5fa:	80 83       	st	Z, r24
     5fc:	91 83       	std	Z+1, r25	; 0x01
     5fe:	a2 83       	std	Z+2, r26	; 0x02
     600:	b3 83       	std	Z+3, r27	; 0x03
	else
	(*y)=(*y)/calibration_counter;
     602:	0a c0       	rjmp	.+20     	; 0x618 <mpu6050_calibrate_accel+0x110>
     604:	24 e1       	ldi	r18, 0x14	; 20
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	40 e0       	ldi	r20, 0x00	; 0
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	0e d1       	rcall	.+540    	; 0x82a <__divmodsi4>
     60e:	f7 01       	movw	r30, r14
     610:	20 83       	st	Z, r18
     612:	31 83       	std	Z+1, r19	; 0x01
     614:	42 83       	std	Z+2, r20	; 0x02
     616:	53 83       	std	Z+3, r21	; 0x03
	
	if(*z<0)
     618:	f8 01       	movw	r30, r16
     61a:	60 81       	ld	r22, Z
     61c:	71 81       	ldd	r23, Z+1	; 0x01
     61e:	82 81       	ldd	r24, Z+2	; 0x02
     620:	93 81       	ldd	r25, Z+3	; 0x03
     622:	99 23       	and	r25, r25
     624:	ac f4       	brge	.+42     	; 0x650 <mpu6050_calibrate_accel+0x148>
	(*z)=abs(*z)/calibration_counter;
     626:	9b 01       	movw	r18, r22
     628:	77 23       	and	r23, r23
     62a:	24 f4       	brge	.+8      	; 0x634 <mpu6050_calibrate_accel+0x12c>
     62c:	22 27       	eor	r18, r18
     62e:	33 27       	eor	r19, r19
     630:	26 1b       	sub	r18, r22
     632:	37 0b       	sbc	r19, r23
     634:	c9 01       	movw	r24, r18
     636:	64 e1       	ldi	r22, 0x14	; 20
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	e4 d0       	rcall	.+456    	; 0x804 <__divmodhi4>
     63c:	cb 01       	movw	r24, r22
     63e:	77 0f       	add	r23, r23
     640:	aa 0b       	sbc	r26, r26
     642:	bb 0b       	sbc	r27, r27
     644:	f8 01       	movw	r30, r16
     646:	80 83       	st	Z, r24
     648:	91 83       	std	Z+1, r25	; 0x01
     64a:	a2 83       	std	Z+2, r26	; 0x02
     64c:	b3 83       	std	Z+3, r27	; 0x03
	else
	(*z)=(*z)/calibration_counter;
     64e:	0a c0       	rjmp	.+20     	; 0x664 <mpu6050_calibrate_accel+0x15c>
     650:	24 e1       	ldi	r18, 0x14	; 20
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	e8 d0       	rcall	.+464    	; 0x82a <__divmodsi4>
     65a:	f8 01       	movw	r30, r16
     65c:	20 83       	st	Z, r18
     65e:	31 83       	std	Z+1, r19	; 0x01
     660:	42 83       	std	Z+2, r20	; 0x02
     662:	53 83       	std	Z+3, r21	; 0x03
	printf("  ");
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	08 95       	ret

00000676 <mpu6050_writeByte>:
	uint8_t byteToReturn=i2c_readNak();
	i2c_stop();
	return byteToReturn;
}
void mpu6050_writeByte(uint8_t wereToWrite,uint8_t byteToWrite)//writebyte
{
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	d8 2f       	mov	r29, r24
     67c:	c6 2f       	mov	r28, r22
	i2c_start(MPU6050_WRITE);
     67e:	80 ed       	ldi	r24, 0xD0	; 208
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	1c d0       	rcall	.+56     	; 0x6bc <i2c_start>
	i2c_write(wereToWrite);
     684:	8d 2f       	mov	r24, r29
     686:	90 e0       	ldi	r25, 0x00	; 0
	i2c_write(byteToWrite);
     688:	6f d0       	rcall	.+222    	; 0x768 <i2c_write>
     68a:	8c 2f       	mov	r24, r28
	i2c_stop();
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	6c d0       	rcall	.+216    	; 0x768 <i2c_write>
}
     690:	5b d0       	rcall	.+182    	; 0x748 <i2c_stop>
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	08 95       	ret

00000698 <setup_timer5>:
void setup_timer5(void)
{
	//64 pres, 250.000 hz 0.000004s
	//sbi (TCCR5B, CS50);//only this no prescaling
	
	sbi (TCCR5B, CS50);//only this 8
     698:	e1 e2       	ldi	r30, 0x21	; 33
     69a:	f1 e0       	ldi	r31, 0x01	; 1
     69c:	80 81       	ld	r24, Z
     69e:	81 60       	ori	r24, 0x01	; 1
     6a0:	80 83       	st	Z, r24
     6a2:	08 95       	ret

000006a4 <Enable_timer5_compare_interrupt>:
	//sbi (TCCR5B, CS52);//only this 256
	//sbi (TCCR5B, WGM51);//OCR4A compare interrupt
}
void Enable_timer5_compare_interrupt()
{
	sbi (TIMSK5, OCIE5A);
     6a4:	e3 e7       	ldi	r30, 0x73	; 115
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	80 81       	ld	r24, Z
     6aa:	82 60       	ori	r24, 0x02	; 2
     6ac:	80 83       	st	Z, r24
     6ae:	08 95       	ret

000006b0 <i2c_init>:
	if(i2c_timer == 0)
		return 0;

    return TWDR;

}/* i2c_readAck */
     6b0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     6b4:	8c e0       	ldi	r24, 0x0C	; 12
     6b6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     6ba:	08 95       	ret

000006bc <i2c_start>:
     6bc:	94 ea       	ldi	r25, 0xA4	; 164
     6be:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     6c2:	4f ef       	ldi	r20, 0xFF	; 255
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	ec eb       	ldi	r30, 0xBC	; 188
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	90 81       	ld	r25, Z
     6d0:	99 23       	and	r25, r25
     6d2:	34 f0       	brlt	.+12     	; 0x6e0 <i2c_start+0x24>
     6d4:	41 50       	subi	r20, 0x01	; 1
     6d6:	51 09       	sbc	r21, r1
     6d8:	61 09       	sbc	r22, r1
     6da:	71 09       	sbc	r23, r1
     6dc:	c0 f7       	brcc	.-16     	; 0x6ce <i2c_start+0x12>
     6de:	04 c0       	rjmp	.+8      	; 0x6e8 <i2c_start+0x2c>
     6e0:	45 2b       	or	r20, r21
     6e2:	46 2b       	or	r20, r22
     6e4:	47 2b       	or	r20, r23
     6e6:	41 f1       	breq	.+80     	; 0x738 <i2c_start+0x7c>
     6e8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     6ec:	98 7f       	andi	r25, 0xF8	; 248
     6ee:	98 30       	cpi	r25, 0x08	; 8
     6f0:	11 f0       	breq	.+4      	; 0x6f6 <i2c_start+0x3a>
     6f2:	90 31       	cpi	r25, 0x10	; 16
     6f4:	19 f5       	brne	.+70     	; 0x73c <i2c_start+0x80>
     6f6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     6fa:	84 e8       	ldi	r24, 0x84	; 132
     6fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     700:	8f ef       	ldi	r24, 0xFF	; 255
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e0       	ldi	r27, 0x00	; 0
     708:	ec eb       	ldi	r30, 0xBC	; 188
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	20 81       	ld	r18, Z
     70e:	22 23       	and	r18, r18
     710:	2c f0       	brlt	.+10     	; 0x71c <i2c_start+0x60>
     712:	01 97       	sbiw	r24, 0x01	; 1
     714:	a1 09       	sbc	r26, r1
     716:	b1 09       	sbc	r27, r1
     718:	c8 f7       	brcc	.-14     	; 0x70c <i2c_start+0x50>
     71a:	04 c0       	rjmp	.+8      	; 0x724 <i2c_start+0x68>
     71c:	89 2b       	or	r24, r25
     71e:	8a 2b       	or	r24, r26
     720:	8b 2b       	or	r24, r27
     722:	71 f0       	breq	.+28     	; 0x740 <i2c_start+0x84>
     724:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     728:	98 7f       	andi	r25, 0xF8	; 248
     72a:	98 31       	cpi	r25, 0x18	; 24
     72c:	59 f0       	breq	.+22     	; 0x744 <i2c_start+0x88>
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	90 34       	cpi	r25, 0x40	; 64
     732:	49 f4       	brne	.+18     	; 0x746 <i2c_start+0x8a>
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	08 95       	ret
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	08 95       	ret
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	08 95       	ret
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	08 95       	ret
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	08 95       	ret

00000748 <i2c_stop>:
     748:	84 e9       	ldi	r24, 0x94	; 148
     74a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	ec eb       	ldi	r30, 0xBC	; 188
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	20 81       	ld	r18, Z
     758:	24 ff       	sbrs	r18, 4
     75a:	05 c0       	rjmp	.+10     	; 0x766 <i2c_stop+0x1e>
     75c:	01 96       	adiw	r24, 0x01	; 1
     75e:	81 15       	cp	r24, r1
     760:	21 e0       	ldi	r18, 0x01	; 1
     762:	92 07       	cpc	r25, r18
     764:	c1 f7       	brne	.-16     	; 0x756 <i2c_stop+0xe>
     766:	08 95       	ret

00000768 <i2c_write>:
     768:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     76c:	84 e8       	ldi	r24, 0x84	; 132
     76e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     772:	8f ef       	ldi	r24, 0xFF	; 255
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	a0 e0       	ldi	r26, 0x00	; 0
     778:	b0 e0       	ldi	r27, 0x00	; 0
     77a:	ec eb       	ldi	r30, 0xBC	; 188
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	20 81       	ld	r18, Z
     780:	22 23       	and	r18, r18
     782:	2c f0       	brlt	.+10     	; 0x78e <i2c_write+0x26>
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	a1 09       	sbc	r26, r1
     788:	b1 09       	sbc	r27, r1
     78a:	c8 f7       	brcc	.-14     	; 0x77e <i2c_write+0x16>
     78c:	04 c0       	rjmp	.+8      	; 0x796 <i2c_write+0x2e>
     78e:	89 2b       	or	r24, r25
     790:	8a 2b       	or	r24, r26
     792:	8b 2b       	or	r24, r27
     794:	41 f0       	breq	.+16     	; 0x7a6 <i2c_write+0x3e>
     796:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     79a:	98 7f       	andi	r25, 0xF8	; 248
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	98 32       	cpi	r25, 0x28	; 40
     7a0:	19 f4       	brne	.+6      	; 0x7a8 <i2c_write+0x40>
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	08 95       	ret
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	08 95       	ret

000007aa <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     7aa:	84 e8       	ldi	r24, 0x84	; 132
     7ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
     7b0:	8f ef       	ldi	r24, 0xFF	; 255
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	a0 e0       	ldi	r26, 0x00	; 0
     7b6:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     7b8:	ec eb       	ldi	r30, 0xBC	; 188
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	20 81       	ld	r18, Z
     7be:	22 23       	and	r18, r18
     7c0:	2c f0       	brlt	.+10     	; 0x7cc <i2c_readNak+0x22>
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	a1 09       	sbc	r26, r1
     7c6:	b1 09       	sbc	r27, r1
     7c8:	c8 f7       	brcc	.-14     	; 0x7bc <i2c_readNak+0x12>
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     7cc:	89 2b       	or	r24, r25
     7ce:	8a 2b       	or	r24, r26
     7d0:	8b 2b       	or	r24, r27
     7d2:	19 f0       	breq	.+6      	; 0x7da <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     7d4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     7d8:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     7da:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     7dc:	08 95       	ret

000007de <USART_Init>:
     7de:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     7e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     7e6:	88 e0       	ldi	r24, 0x08	; 8
     7e8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     7ec:	8e e0       	ldi	r24, 0x0E	; 14
     7ee:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     7f2:	08 95       	ret

000007f4 <USART_Transmit>:
     7f4:	e0 ec       	ldi	r30, 0xC0	; 192
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	90 81       	ld	r25, Z
     7fa:	95 ff       	sbrs	r25, 5
     7fc:	fd cf       	rjmp	.-6      	; 0x7f8 <USART_Transmit+0x4>
     7fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     802:	08 95       	ret

00000804 <__divmodhi4>:
     804:	97 fb       	bst	r25, 7
     806:	07 2e       	mov	r0, r23
     808:	16 f4       	brtc	.+4      	; 0x80e <__divmodhi4+0xa>
     80a:	00 94       	com	r0
     80c:	06 d0       	rcall	.+12     	; 0x81a <__divmodhi4_neg1>
     80e:	77 fd       	sbrc	r23, 7
     810:	08 d0       	rcall	.+16     	; 0x822 <__divmodhi4_neg2>
     812:	27 d0       	rcall	.+78     	; 0x862 <__udivmodhi4>
     814:	07 fc       	sbrc	r0, 7
     816:	05 d0       	rcall	.+10     	; 0x822 <__divmodhi4_neg2>
     818:	3e f4       	brtc	.+14     	; 0x828 <__divmodhi4_exit>

0000081a <__divmodhi4_neg1>:
     81a:	90 95       	com	r25
     81c:	81 95       	neg	r24
     81e:	9f 4f       	sbci	r25, 0xFF	; 255
     820:	08 95       	ret

00000822 <__divmodhi4_neg2>:
     822:	70 95       	com	r23
     824:	61 95       	neg	r22
     826:	7f 4f       	sbci	r23, 0xFF	; 255

00000828 <__divmodhi4_exit>:
     828:	08 95       	ret

0000082a <__divmodsi4>:
     82a:	05 2e       	mov	r0, r21
     82c:	97 fb       	bst	r25, 7
     82e:	16 f4       	brtc	.+4      	; 0x834 <__divmodsi4+0xa>
     830:	00 94       	com	r0
     832:	0f d0       	rcall	.+30     	; 0x852 <__negsi2>
     834:	57 fd       	sbrc	r21, 7
     836:	05 d0       	rcall	.+10     	; 0x842 <__divmodsi4_neg2>
     838:	28 d0       	rcall	.+80     	; 0x88a <__udivmodsi4>
     83a:	07 fc       	sbrc	r0, 7
     83c:	02 d0       	rcall	.+4      	; 0x842 <__divmodsi4_neg2>
     83e:	46 f4       	brtc	.+16     	; 0x850 <__divmodsi4_exit>
     840:	08 c0       	rjmp	.+16     	; 0x852 <__negsi2>

00000842 <__divmodsi4_neg2>:
     842:	50 95       	com	r21
     844:	40 95       	com	r20
     846:	30 95       	com	r19
     848:	21 95       	neg	r18
     84a:	3f 4f       	sbci	r19, 0xFF	; 255
     84c:	4f 4f       	sbci	r20, 0xFF	; 255
     84e:	5f 4f       	sbci	r21, 0xFF	; 255

00000850 <__divmodsi4_exit>:
     850:	08 95       	ret

00000852 <__negsi2>:
     852:	90 95       	com	r25
     854:	80 95       	com	r24
     856:	70 95       	com	r23
     858:	61 95       	neg	r22
     85a:	7f 4f       	sbci	r23, 0xFF	; 255
     85c:	8f 4f       	sbci	r24, 0xFF	; 255
     85e:	9f 4f       	sbci	r25, 0xFF	; 255
     860:	08 95       	ret

00000862 <__udivmodhi4>:
     862:	aa 1b       	sub	r26, r26
     864:	bb 1b       	sub	r27, r27
     866:	51 e1       	ldi	r21, 0x11	; 17
     868:	07 c0       	rjmp	.+14     	; 0x878 <__udivmodhi4_ep>

0000086a <__udivmodhi4_loop>:
     86a:	aa 1f       	adc	r26, r26
     86c:	bb 1f       	adc	r27, r27
     86e:	a6 17       	cp	r26, r22
     870:	b7 07       	cpc	r27, r23
     872:	10 f0       	brcs	.+4      	; 0x878 <__udivmodhi4_ep>
     874:	a6 1b       	sub	r26, r22
     876:	b7 0b       	sbc	r27, r23

00000878 <__udivmodhi4_ep>:
     878:	88 1f       	adc	r24, r24
     87a:	99 1f       	adc	r25, r25
     87c:	5a 95       	dec	r21
     87e:	a9 f7       	brne	.-22     	; 0x86a <__udivmodhi4_loop>
     880:	80 95       	com	r24
     882:	90 95       	com	r25
     884:	bc 01       	movw	r22, r24
     886:	cd 01       	movw	r24, r26
     888:	08 95       	ret

0000088a <__udivmodsi4>:
     88a:	a1 e2       	ldi	r26, 0x21	; 33
     88c:	1a 2e       	mov	r1, r26
     88e:	aa 1b       	sub	r26, r26
     890:	bb 1b       	sub	r27, r27
     892:	fd 01       	movw	r30, r26
     894:	0d c0       	rjmp	.+26     	; 0x8b0 <__udivmodsi4_ep>

00000896 <__udivmodsi4_loop>:
     896:	aa 1f       	adc	r26, r26
     898:	bb 1f       	adc	r27, r27
     89a:	ee 1f       	adc	r30, r30
     89c:	ff 1f       	adc	r31, r31
     89e:	a2 17       	cp	r26, r18
     8a0:	b3 07       	cpc	r27, r19
     8a2:	e4 07       	cpc	r30, r20
     8a4:	f5 07       	cpc	r31, r21
     8a6:	20 f0       	brcs	.+8      	; 0x8b0 <__udivmodsi4_ep>
     8a8:	a2 1b       	sub	r26, r18
     8aa:	b3 0b       	sbc	r27, r19
     8ac:	e4 0b       	sbc	r30, r20
     8ae:	f5 0b       	sbc	r31, r21

000008b0 <__udivmodsi4_ep>:
     8b0:	66 1f       	adc	r22, r22
     8b2:	77 1f       	adc	r23, r23
     8b4:	88 1f       	adc	r24, r24
     8b6:	99 1f       	adc	r25, r25
     8b8:	1a 94       	dec	r1
     8ba:	69 f7       	brne	.-38     	; 0x896 <__udivmodsi4_loop>
     8bc:	60 95       	com	r22
     8be:	70 95       	com	r23
     8c0:	80 95       	com	r24
     8c2:	90 95       	com	r25
     8c4:	9b 01       	movw	r18, r22
     8c6:	ac 01       	movw	r20, r24
     8c8:	bd 01       	movw	r22, r26
     8ca:	cf 01       	movw	r24, r30
     8cc:	08 95       	ret

000008ce <fdevopen>:
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	00 97       	sbiw	r24, 0x00	; 0
     8d8:	31 f4       	brne	.+12     	; 0x8e6 <fdevopen+0x18>
     8da:	61 15       	cp	r22, r1
     8dc:	71 05       	cpc	r23, r1
     8de:	19 f4       	brne	.+6      	; 0x8e6 <fdevopen+0x18>
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	39 c0       	rjmp	.+114    	; 0x958 <fdevopen+0x8a>
     8e6:	8b 01       	movw	r16, r22
     8e8:	ec 01       	movw	r28, r24
     8ea:	6e e0       	ldi	r22, 0x0E	; 14
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	77 d2       	rcall	.+1262   	; 0xde2 <calloc>
     8f4:	fc 01       	movw	r30, r24
     8f6:	89 2b       	or	r24, r25
     8f8:	99 f3       	breq	.-26     	; 0x8e0 <fdevopen+0x12>
     8fa:	80 e8       	ldi	r24, 0x80	; 128
     8fc:	83 83       	std	Z+3, r24	; 0x03
     8fe:	01 15       	cp	r16, r1
     900:	11 05       	cpc	r17, r1
     902:	71 f0       	breq	.+28     	; 0x920 <fdevopen+0x52>
     904:	13 87       	std	Z+11, r17	; 0x0b
     906:	02 87       	std	Z+10, r16	; 0x0a
     908:	81 e8       	ldi	r24, 0x81	; 129
     90a:	83 83       	std	Z+3, r24	; 0x03
     90c:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <__iob>
     910:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <__iob+0x1>
     914:	89 2b       	or	r24, r25
     916:	21 f4       	brne	.+8      	; 0x920 <fdevopen+0x52>
     918:	f0 93 51 02 	sts	0x0251, r31	; 0x800251 <__iob+0x1>
     91c:	e0 93 50 02 	sts	0x0250, r30	; 0x800250 <__iob>
     920:	20 97       	sbiw	r28, 0x00	; 0
     922:	c9 f0       	breq	.+50     	; 0x956 <fdevopen+0x88>
     924:	d1 87       	std	Z+9, r29	; 0x09
     926:	c0 87       	std	Z+8, r28	; 0x08
     928:	83 81       	ldd	r24, Z+3	; 0x03
     92a:	82 60       	ori	r24, 0x02	; 2
     92c:	83 83       	std	Z+3, r24	; 0x03
     92e:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <__iob+0x2>
     932:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <__iob+0x3>
     936:	89 2b       	or	r24, r25
     938:	71 f4       	brne	.+28     	; 0x956 <fdevopen+0x88>
     93a:	f0 93 53 02 	sts	0x0253, r31	; 0x800253 <__iob+0x3>
     93e:	e0 93 52 02 	sts	0x0252, r30	; 0x800252 <__iob+0x2>
     942:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__iob+0x4>
     946:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <__iob+0x5>
     94a:	89 2b       	or	r24, r25
     94c:	21 f4       	brne	.+8      	; 0x956 <fdevopen+0x88>
     94e:	f0 93 55 02 	sts	0x0255, r31	; 0x800255 <__iob+0x5>
     952:	e0 93 54 02 	sts	0x0254, r30	; 0x800254 <__iob+0x4>
     956:	cf 01       	movw	r24, r30
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	1f 91       	pop	r17
     95e:	0f 91       	pop	r16
     960:	08 95       	ret

00000962 <printf>:
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	ae 01       	movw	r20, r28
     96c:	4a 5f       	subi	r20, 0xFA	; 250
     96e:	5f 4f       	sbci	r21, 0xFF	; 255
     970:	fa 01       	movw	r30, r20
     972:	61 91       	ld	r22, Z+
     974:	71 91       	ld	r23, Z+
     976:	af 01       	movw	r20, r30
     978:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <__iob+0x2>
     97c:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <__iob+0x3>
     980:	33 d0       	rcall	.+102    	; 0x9e8 <vfprintf>
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <puts>:
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <__iob+0x2>
     994:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <__iob+0x3>
     998:	23 81       	ldd	r18, Z+3	; 0x03
     99a:	21 ff       	sbrs	r18, 1
     99c:	1b c0       	rjmp	.+54     	; 0x9d4 <puts+0x4c>
     99e:	8c 01       	movw	r16, r24
     9a0:	d0 e0       	ldi	r29, 0x00	; 0
     9a2:	c0 e0       	ldi	r28, 0x00	; 0
     9a4:	f8 01       	movw	r30, r16
     9a6:	81 91       	ld	r24, Z+
     9a8:	8f 01       	movw	r16, r30
     9aa:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <__iob+0x2>
     9ae:	70 91 53 02 	lds	r23, 0x0253	; 0x800253 <__iob+0x3>
     9b2:	db 01       	movw	r26, r22
     9b4:	18 96       	adiw	r26, 0x08	; 8
     9b6:	ed 91       	ld	r30, X+
     9b8:	fc 91       	ld	r31, X
     9ba:	19 97       	sbiw	r26, 0x09	; 9
     9bc:	88 23       	and	r24, r24
     9be:	31 f0       	breq	.+12     	; 0x9cc <puts+0x44>
     9c0:	19 95       	eicall
     9c2:	89 2b       	or	r24, r25
     9c4:	79 f3       	breq	.-34     	; 0x9a4 <puts+0x1c>
     9c6:	df ef       	ldi	r29, 0xFF	; 255
     9c8:	cf ef       	ldi	r28, 0xFF	; 255
     9ca:	ec cf       	rjmp	.-40     	; 0x9a4 <puts+0x1c>
     9cc:	8a e0       	ldi	r24, 0x0A	; 10
     9ce:	19 95       	eicall
     9d0:	89 2b       	or	r24, r25
     9d2:	19 f0       	breq	.+6      	; 0x9da <puts+0x52>
     9d4:	8f ef       	ldi	r24, 0xFF	; 255
     9d6:	9f ef       	ldi	r25, 0xFF	; 255
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <puts+0x56>
     9da:	8d 2f       	mov	r24, r29
     9dc:	9c 2f       	mov	r25, r28
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	08 95       	ret

000009e8 <vfprintf>:
     9e8:	2f 92       	push	r2
     9ea:	3f 92       	push	r3
     9ec:	4f 92       	push	r4
     9ee:	5f 92       	push	r5
     9f0:	6f 92       	push	r6
     9f2:	7f 92       	push	r7
     9f4:	8f 92       	push	r8
     9f6:	9f 92       	push	r9
     9f8:	af 92       	push	r10
     9fa:	bf 92       	push	r11
     9fc:	cf 92       	push	r12
     9fe:	df 92       	push	r13
     a00:	ef 92       	push	r14
     a02:	ff 92       	push	r15
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	cd b7       	in	r28, 0x3d	; 61
     a0e:	de b7       	in	r29, 0x3e	; 62
     a10:	2b 97       	sbiw	r28, 0x0b	; 11
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	de bf       	out	0x3e, r29	; 62
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	cd bf       	out	0x3d, r28	; 61
     a1c:	6c 01       	movw	r12, r24
     a1e:	7b 01       	movw	r14, r22
     a20:	8a 01       	movw	r16, r20
     a22:	fc 01       	movw	r30, r24
     a24:	17 82       	std	Z+7, r1	; 0x07
     a26:	16 82       	std	Z+6, r1	; 0x06
     a28:	83 81       	ldd	r24, Z+3	; 0x03
     a2a:	81 ff       	sbrs	r24, 1
     a2c:	bf c1       	rjmp	.+894    	; 0xdac <vfprintf+0x3c4>
     a2e:	ce 01       	movw	r24, r28
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	3c 01       	movw	r6, r24
     a34:	f6 01       	movw	r30, r12
     a36:	93 81       	ldd	r25, Z+3	; 0x03
     a38:	f7 01       	movw	r30, r14
     a3a:	93 fd       	sbrc	r25, 3
     a3c:	85 91       	lpm	r24, Z+
     a3e:	93 ff       	sbrs	r25, 3
     a40:	81 91       	ld	r24, Z+
     a42:	7f 01       	movw	r14, r30
     a44:	88 23       	and	r24, r24
     a46:	09 f4       	brne	.+2      	; 0xa4a <vfprintf+0x62>
     a48:	ad c1       	rjmp	.+858    	; 0xda4 <vfprintf+0x3bc>
     a4a:	85 32       	cpi	r24, 0x25	; 37
     a4c:	39 f4       	brne	.+14     	; 0xa5c <vfprintf+0x74>
     a4e:	93 fd       	sbrc	r25, 3
     a50:	85 91       	lpm	r24, Z+
     a52:	93 ff       	sbrs	r25, 3
     a54:	81 91       	ld	r24, Z+
     a56:	7f 01       	movw	r14, r30
     a58:	85 32       	cpi	r24, 0x25	; 37
     a5a:	21 f4       	brne	.+8      	; 0xa64 <vfprintf+0x7c>
     a5c:	b6 01       	movw	r22, r12
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	18 d3       	rcall	.+1584   	; 0x1092 <fputc>
     a62:	e8 cf       	rjmp	.-48     	; 0xa34 <vfprintf+0x4c>
     a64:	91 2c       	mov	r9, r1
     a66:	21 2c       	mov	r2, r1
     a68:	31 2c       	mov	r3, r1
     a6a:	ff e1       	ldi	r31, 0x1F	; 31
     a6c:	f3 15       	cp	r31, r3
     a6e:	d8 f0       	brcs	.+54     	; 0xaa6 <vfprintf+0xbe>
     a70:	8b 32       	cpi	r24, 0x2B	; 43
     a72:	79 f0       	breq	.+30     	; 0xa92 <vfprintf+0xaa>
     a74:	38 f4       	brcc	.+14     	; 0xa84 <vfprintf+0x9c>
     a76:	80 32       	cpi	r24, 0x20	; 32
     a78:	79 f0       	breq	.+30     	; 0xa98 <vfprintf+0xb0>
     a7a:	83 32       	cpi	r24, 0x23	; 35
     a7c:	a1 f4       	brne	.+40     	; 0xaa6 <vfprintf+0xbe>
     a7e:	23 2d       	mov	r18, r3
     a80:	20 61       	ori	r18, 0x10	; 16
     a82:	1d c0       	rjmp	.+58     	; 0xabe <vfprintf+0xd6>
     a84:	8d 32       	cpi	r24, 0x2D	; 45
     a86:	61 f0       	breq	.+24     	; 0xaa0 <vfprintf+0xb8>
     a88:	80 33       	cpi	r24, 0x30	; 48
     a8a:	69 f4       	brne	.+26     	; 0xaa6 <vfprintf+0xbe>
     a8c:	23 2d       	mov	r18, r3
     a8e:	21 60       	ori	r18, 0x01	; 1
     a90:	16 c0       	rjmp	.+44     	; 0xabe <vfprintf+0xd6>
     a92:	83 2d       	mov	r24, r3
     a94:	82 60       	ori	r24, 0x02	; 2
     a96:	38 2e       	mov	r3, r24
     a98:	e3 2d       	mov	r30, r3
     a9a:	e4 60       	ori	r30, 0x04	; 4
     a9c:	3e 2e       	mov	r3, r30
     a9e:	2a c0       	rjmp	.+84     	; 0xaf4 <vfprintf+0x10c>
     aa0:	f3 2d       	mov	r31, r3
     aa2:	f8 60       	ori	r31, 0x08	; 8
     aa4:	1d c0       	rjmp	.+58     	; 0xae0 <vfprintf+0xf8>
     aa6:	37 fc       	sbrc	r3, 7
     aa8:	2d c0       	rjmp	.+90     	; 0xb04 <vfprintf+0x11c>
     aaa:	20 ed       	ldi	r18, 0xD0	; 208
     aac:	28 0f       	add	r18, r24
     aae:	2a 30       	cpi	r18, 0x0A	; 10
     ab0:	40 f0       	brcs	.+16     	; 0xac2 <vfprintf+0xda>
     ab2:	8e 32       	cpi	r24, 0x2E	; 46
     ab4:	b9 f4       	brne	.+46     	; 0xae4 <vfprintf+0xfc>
     ab6:	36 fc       	sbrc	r3, 6
     ab8:	75 c1       	rjmp	.+746    	; 0xda4 <vfprintf+0x3bc>
     aba:	23 2d       	mov	r18, r3
     abc:	20 64       	ori	r18, 0x40	; 64
     abe:	32 2e       	mov	r3, r18
     ac0:	19 c0       	rjmp	.+50     	; 0xaf4 <vfprintf+0x10c>
     ac2:	36 fe       	sbrs	r3, 6
     ac4:	06 c0       	rjmp	.+12     	; 0xad2 <vfprintf+0xea>
     ac6:	8a e0       	ldi	r24, 0x0A	; 10
     ac8:	98 9e       	mul	r9, r24
     aca:	20 0d       	add	r18, r0
     acc:	11 24       	eor	r1, r1
     ace:	92 2e       	mov	r9, r18
     ad0:	11 c0       	rjmp	.+34     	; 0xaf4 <vfprintf+0x10c>
     ad2:	ea e0       	ldi	r30, 0x0A	; 10
     ad4:	2e 9e       	mul	r2, r30
     ad6:	20 0d       	add	r18, r0
     ad8:	11 24       	eor	r1, r1
     ada:	22 2e       	mov	r2, r18
     adc:	f3 2d       	mov	r31, r3
     ade:	f0 62       	ori	r31, 0x20	; 32
     ae0:	3f 2e       	mov	r3, r31
     ae2:	08 c0       	rjmp	.+16     	; 0xaf4 <vfprintf+0x10c>
     ae4:	8c 36       	cpi	r24, 0x6C	; 108
     ae6:	21 f4       	brne	.+8      	; 0xaf0 <vfprintf+0x108>
     ae8:	83 2d       	mov	r24, r3
     aea:	80 68       	ori	r24, 0x80	; 128
     aec:	38 2e       	mov	r3, r24
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <vfprintf+0x10c>
     af0:	88 36       	cpi	r24, 0x68	; 104
     af2:	41 f4       	brne	.+16     	; 0xb04 <vfprintf+0x11c>
     af4:	f7 01       	movw	r30, r14
     af6:	93 fd       	sbrc	r25, 3
     af8:	85 91       	lpm	r24, Z+
     afa:	93 ff       	sbrs	r25, 3
     afc:	81 91       	ld	r24, Z+
     afe:	7f 01       	movw	r14, r30
     b00:	81 11       	cpse	r24, r1
     b02:	b3 cf       	rjmp	.-154    	; 0xa6a <vfprintf+0x82>
     b04:	98 2f       	mov	r25, r24
     b06:	9f 7d       	andi	r25, 0xDF	; 223
     b08:	95 54       	subi	r25, 0x45	; 69
     b0a:	93 30       	cpi	r25, 0x03	; 3
     b0c:	28 f4       	brcc	.+10     	; 0xb18 <vfprintf+0x130>
     b0e:	0c 5f       	subi	r16, 0xFC	; 252
     b10:	1f 4f       	sbci	r17, 0xFF	; 255
     b12:	9f e3       	ldi	r25, 0x3F	; 63
     b14:	99 83       	std	Y+1, r25	; 0x01
     b16:	0d c0       	rjmp	.+26     	; 0xb32 <vfprintf+0x14a>
     b18:	83 36       	cpi	r24, 0x63	; 99
     b1a:	31 f0       	breq	.+12     	; 0xb28 <vfprintf+0x140>
     b1c:	83 37       	cpi	r24, 0x73	; 115
     b1e:	71 f0       	breq	.+28     	; 0xb3c <vfprintf+0x154>
     b20:	83 35       	cpi	r24, 0x53	; 83
     b22:	09 f0       	breq	.+2      	; 0xb26 <vfprintf+0x13e>
     b24:	55 c0       	rjmp	.+170    	; 0xbd0 <vfprintf+0x1e8>
     b26:	20 c0       	rjmp	.+64     	; 0xb68 <vfprintf+0x180>
     b28:	f8 01       	movw	r30, r16
     b2a:	80 81       	ld	r24, Z
     b2c:	89 83       	std	Y+1, r24	; 0x01
     b2e:	0e 5f       	subi	r16, 0xFE	; 254
     b30:	1f 4f       	sbci	r17, 0xFF	; 255
     b32:	88 24       	eor	r8, r8
     b34:	83 94       	inc	r8
     b36:	91 2c       	mov	r9, r1
     b38:	53 01       	movw	r10, r6
     b3a:	12 c0       	rjmp	.+36     	; 0xb60 <vfprintf+0x178>
     b3c:	28 01       	movw	r4, r16
     b3e:	f2 e0       	ldi	r31, 0x02	; 2
     b40:	4f 0e       	add	r4, r31
     b42:	51 1c       	adc	r5, r1
     b44:	f8 01       	movw	r30, r16
     b46:	a0 80       	ld	r10, Z
     b48:	b1 80       	ldd	r11, Z+1	; 0x01
     b4a:	36 fe       	sbrs	r3, 6
     b4c:	03 c0       	rjmp	.+6      	; 0xb54 <vfprintf+0x16c>
     b4e:	69 2d       	mov	r22, r9
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <vfprintf+0x170>
     b54:	6f ef       	ldi	r22, 0xFF	; 255
     b56:	7f ef       	ldi	r23, 0xFF	; 255
     b58:	c5 01       	movw	r24, r10
     b5a:	90 d2       	rcall	.+1312   	; 0x107c <strnlen>
     b5c:	4c 01       	movw	r8, r24
     b5e:	82 01       	movw	r16, r4
     b60:	f3 2d       	mov	r31, r3
     b62:	ff 77       	andi	r31, 0x7F	; 127
     b64:	3f 2e       	mov	r3, r31
     b66:	15 c0       	rjmp	.+42     	; 0xb92 <vfprintf+0x1aa>
     b68:	28 01       	movw	r4, r16
     b6a:	22 e0       	ldi	r18, 0x02	; 2
     b6c:	42 0e       	add	r4, r18
     b6e:	51 1c       	adc	r5, r1
     b70:	f8 01       	movw	r30, r16
     b72:	a0 80       	ld	r10, Z
     b74:	b1 80       	ldd	r11, Z+1	; 0x01
     b76:	36 fe       	sbrs	r3, 6
     b78:	03 c0       	rjmp	.+6      	; 0xb80 <vfprintf+0x198>
     b7a:	69 2d       	mov	r22, r9
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <vfprintf+0x19c>
     b80:	6f ef       	ldi	r22, 0xFF	; 255
     b82:	7f ef       	ldi	r23, 0xFF	; 255
     b84:	c5 01       	movw	r24, r10
     b86:	68 d2       	rcall	.+1232   	; 0x1058 <strnlen_P>
     b88:	4c 01       	movw	r8, r24
     b8a:	f3 2d       	mov	r31, r3
     b8c:	f0 68       	ori	r31, 0x80	; 128
     b8e:	3f 2e       	mov	r3, r31
     b90:	82 01       	movw	r16, r4
     b92:	33 fc       	sbrc	r3, 3
     b94:	19 c0       	rjmp	.+50     	; 0xbc8 <vfprintf+0x1e0>
     b96:	82 2d       	mov	r24, r2
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	88 16       	cp	r8, r24
     b9c:	99 06       	cpc	r9, r25
     b9e:	a0 f4       	brcc	.+40     	; 0xbc8 <vfprintf+0x1e0>
     ba0:	b6 01       	movw	r22, r12
     ba2:	80 e2       	ldi	r24, 0x20	; 32
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	75 d2       	rcall	.+1258   	; 0x1092 <fputc>
     ba8:	2a 94       	dec	r2
     baa:	f5 cf       	rjmp	.-22     	; 0xb96 <vfprintf+0x1ae>
     bac:	f5 01       	movw	r30, r10
     bae:	37 fc       	sbrc	r3, 7
     bb0:	85 91       	lpm	r24, Z+
     bb2:	37 fe       	sbrs	r3, 7
     bb4:	81 91       	ld	r24, Z+
     bb6:	5f 01       	movw	r10, r30
     bb8:	b6 01       	movw	r22, r12
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	6a d2       	rcall	.+1236   	; 0x1092 <fputc>
     bbe:	21 10       	cpse	r2, r1
     bc0:	2a 94       	dec	r2
     bc2:	21 e0       	ldi	r18, 0x01	; 1
     bc4:	82 1a       	sub	r8, r18
     bc6:	91 08       	sbc	r9, r1
     bc8:	81 14       	cp	r8, r1
     bca:	91 04       	cpc	r9, r1
     bcc:	79 f7       	brne	.-34     	; 0xbac <vfprintf+0x1c4>
     bce:	e1 c0       	rjmp	.+450    	; 0xd92 <vfprintf+0x3aa>
     bd0:	84 36       	cpi	r24, 0x64	; 100
     bd2:	11 f0       	breq	.+4      	; 0xbd8 <vfprintf+0x1f0>
     bd4:	89 36       	cpi	r24, 0x69	; 105
     bd6:	39 f5       	brne	.+78     	; 0xc26 <vfprintf+0x23e>
     bd8:	f8 01       	movw	r30, r16
     bda:	37 fe       	sbrs	r3, 7
     bdc:	07 c0       	rjmp	.+14     	; 0xbec <vfprintf+0x204>
     bde:	60 81       	ld	r22, Z
     be0:	71 81       	ldd	r23, Z+1	; 0x01
     be2:	82 81       	ldd	r24, Z+2	; 0x02
     be4:	93 81       	ldd	r25, Z+3	; 0x03
     be6:	0c 5f       	subi	r16, 0xFC	; 252
     be8:	1f 4f       	sbci	r17, 0xFF	; 255
     bea:	08 c0       	rjmp	.+16     	; 0xbfc <vfprintf+0x214>
     bec:	60 81       	ld	r22, Z
     bee:	71 81       	ldd	r23, Z+1	; 0x01
     bf0:	07 2e       	mov	r0, r23
     bf2:	00 0c       	add	r0, r0
     bf4:	88 0b       	sbc	r24, r24
     bf6:	99 0b       	sbc	r25, r25
     bf8:	0e 5f       	subi	r16, 0xFE	; 254
     bfa:	1f 4f       	sbci	r17, 0xFF	; 255
     bfc:	f3 2d       	mov	r31, r3
     bfe:	ff 76       	andi	r31, 0x6F	; 111
     c00:	3f 2e       	mov	r3, r31
     c02:	97 ff       	sbrs	r25, 7
     c04:	09 c0       	rjmp	.+18     	; 0xc18 <vfprintf+0x230>
     c06:	90 95       	com	r25
     c08:	80 95       	com	r24
     c0a:	70 95       	com	r23
     c0c:	61 95       	neg	r22
     c0e:	7f 4f       	sbci	r23, 0xFF	; 255
     c10:	8f 4f       	sbci	r24, 0xFF	; 255
     c12:	9f 4f       	sbci	r25, 0xFF	; 255
     c14:	f0 68       	ori	r31, 0x80	; 128
     c16:	3f 2e       	mov	r3, r31
     c18:	2a e0       	ldi	r18, 0x0A	; 10
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	a3 01       	movw	r20, r6
     c1e:	75 d2       	rcall	.+1258   	; 0x110a <__ultoa_invert>
     c20:	88 2e       	mov	r8, r24
     c22:	86 18       	sub	r8, r6
     c24:	44 c0       	rjmp	.+136    	; 0xcae <vfprintf+0x2c6>
     c26:	85 37       	cpi	r24, 0x75	; 117
     c28:	31 f4       	brne	.+12     	; 0xc36 <vfprintf+0x24e>
     c2a:	23 2d       	mov	r18, r3
     c2c:	2f 7e       	andi	r18, 0xEF	; 239
     c2e:	b2 2e       	mov	r11, r18
     c30:	2a e0       	ldi	r18, 0x0A	; 10
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	25 c0       	rjmp	.+74     	; 0xc80 <vfprintf+0x298>
     c36:	93 2d       	mov	r25, r3
     c38:	99 7f       	andi	r25, 0xF9	; 249
     c3a:	b9 2e       	mov	r11, r25
     c3c:	8f 36       	cpi	r24, 0x6F	; 111
     c3e:	c1 f0       	breq	.+48     	; 0xc70 <vfprintf+0x288>
     c40:	18 f4       	brcc	.+6      	; 0xc48 <vfprintf+0x260>
     c42:	88 35       	cpi	r24, 0x58	; 88
     c44:	79 f0       	breq	.+30     	; 0xc64 <vfprintf+0x27c>
     c46:	ae c0       	rjmp	.+348    	; 0xda4 <vfprintf+0x3bc>
     c48:	80 37       	cpi	r24, 0x70	; 112
     c4a:	19 f0       	breq	.+6      	; 0xc52 <vfprintf+0x26a>
     c4c:	88 37       	cpi	r24, 0x78	; 120
     c4e:	21 f0       	breq	.+8      	; 0xc58 <vfprintf+0x270>
     c50:	a9 c0       	rjmp	.+338    	; 0xda4 <vfprintf+0x3bc>
     c52:	e9 2f       	mov	r30, r25
     c54:	e0 61       	ori	r30, 0x10	; 16
     c56:	be 2e       	mov	r11, r30
     c58:	b4 fe       	sbrs	r11, 4
     c5a:	0d c0       	rjmp	.+26     	; 0xc76 <vfprintf+0x28e>
     c5c:	fb 2d       	mov	r31, r11
     c5e:	f4 60       	ori	r31, 0x04	; 4
     c60:	bf 2e       	mov	r11, r31
     c62:	09 c0       	rjmp	.+18     	; 0xc76 <vfprintf+0x28e>
     c64:	34 fe       	sbrs	r3, 4
     c66:	0a c0       	rjmp	.+20     	; 0xc7c <vfprintf+0x294>
     c68:	29 2f       	mov	r18, r25
     c6a:	26 60       	ori	r18, 0x06	; 6
     c6c:	b2 2e       	mov	r11, r18
     c6e:	06 c0       	rjmp	.+12     	; 0xc7c <vfprintf+0x294>
     c70:	28 e0       	ldi	r18, 0x08	; 8
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	05 c0       	rjmp	.+10     	; 0xc80 <vfprintf+0x298>
     c76:	20 e1       	ldi	r18, 0x10	; 16
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <vfprintf+0x298>
     c7c:	20 e1       	ldi	r18, 0x10	; 16
     c7e:	32 e0       	ldi	r19, 0x02	; 2
     c80:	f8 01       	movw	r30, r16
     c82:	b7 fe       	sbrs	r11, 7
     c84:	07 c0       	rjmp	.+14     	; 0xc94 <vfprintf+0x2ac>
     c86:	60 81       	ld	r22, Z
     c88:	71 81       	ldd	r23, Z+1	; 0x01
     c8a:	82 81       	ldd	r24, Z+2	; 0x02
     c8c:	93 81       	ldd	r25, Z+3	; 0x03
     c8e:	0c 5f       	subi	r16, 0xFC	; 252
     c90:	1f 4f       	sbci	r17, 0xFF	; 255
     c92:	06 c0       	rjmp	.+12     	; 0xca0 <vfprintf+0x2b8>
     c94:	60 81       	ld	r22, Z
     c96:	71 81       	ldd	r23, Z+1	; 0x01
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	0e 5f       	subi	r16, 0xFE	; 254
     c9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ca0:	a3 01       	movw	r20, r6
     ca2:	33 d2       	rcall	.+1126   	; 0x110a <__ultoa_invert>
     ca4:	88 2e       	mov	r8, r24
     ca6:	86 18       	sub	r8, r6
     ca8:	fb 2d       	mov	r31, r11
     caa:	ff 77       	andi	r31, 0x7F	; 127
     cac:	3f 2e       	mov	r3, r31
     cae:	36 fe       	sbrs	r3, 6
     cb0:	0d c0       	rjmp	.+26     	; 0xccc <vfprintf+0x2e4>
     cb2:	23 2d       	mov	r18, r3
     cb4:	2e 7f       	andi	r18, 0xFE	; 254
     cb6:	a2 2e       	mov	r10, r18
     cb8:	89 14       	cp	r8, r9
     cba:	58 f4       	brcc	.+22     	; 0xcd2 <vfprintf+0x2ea>
     cbc:	34 fe       	sbrs	r3, 4
     cbe:	0b c0       	rjmp	.+22     	; 0xcd6 <vfprintf+0x2ee>
     cc0:	32 fc       	sbrc	r3, 2
     cc2:	09 c0       	rjmp	.+18     	; 0xcd6 <vfprintf+0x2ee>
     cc4:	83 2d       	mov	r24, r3
     cc6:	8e 7e       	andi	r24, 0xEE	; 238
     cc8:	a8 2e       	mov	r10, r24
     cca:	05 c0       	rjmp	.+10     	; 0xcd6 <vfprintf+0x2ee>
     ccc:	b8 2c       	mov	r11, r8
     cce:	a3 2c       	mov	r10, r3
     cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <vfprintf+0x2f0>
     cd2:	b8 2c       	mov	r11, r8
     cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <vfprintf+0x2f0>
     cd6:	b9 2c       	mov	r11, r9
     cd8:	a4 fe       	sbrs	r10, 4
     cda:	0f c0       	rjmp	.+30     	; 0xcfa <vfprintf+0x312>
     cdc:	fe 01       	movw	r30, r28
     cde:	e8 0d       	add	r30, r8
     ce0:	f1 1d       	adc	r31, r1
     ce2:	80 81       	ld	r24, Z
     ce4:	80 33       	cpi	r24, 0x30	; 48
     ce6:	21 f4       	brne	.+8      	; 0xcf0 <vfprintf+0x308>
     ce8:	9a 2d       	mov	r25, r10
     cea:	99 7e       	andi	r25, 0xE9	; 233
     cec:	a9 2e       	mov	r10, r25
     cee:	09 c0       	rjmp	.+18     	; 0xd02 <vfprintf+0x31a>
     cf0:	a2 fe       	sbrs	r10, 2
     cf2:	06 c0       	rjmp	.+12     	; 0xd00 <vfprintf+0x318>
     cf4:	b3 94       	inc	r11
     cf6:	b3 94       	inc	r11
     cf8:	04 c0       	rjmp	.+8      	; 0xd02 <vfprintf+0x31a>
     cfa:	8a 2d       	mov	r24, r10
     cfc:	86 78       	andi	r24, 0x86	; 134
     cfe:	09 f0       	breq	.+2      	; 0xd02 <vfprintf+0x31a>
     d00:	b3 94       	inc	r11
     d02:	a3 fc       	sbrc	r10, 3
     d04:	10 c0       	rjmp	.+32     	; 0xd26 <vfprintf+0x33e>
     d06:	a0 fe       	sbrs	r10, 0
     d08:	06 c0       	rjmp	.+12     	; 0xd16 <vfprintf+0x32e>
     d0a:	b2 14       	cp	r11, r2
     d0c:	80 f4       	brcc	.+32     	; 0xd2e <vfprintf+0x346>
     d0e:	28 0c       	add	r2, r8
     d10:	92 2c       	mov	r9, r2
     d12:	9b 18       	sub	r9, r11
     d14:	0d c0       	rjmp	.+26     	; 0xd30 <vfprintf+0x348>
     d16:	b2 14       	cp	r11, r2
     d18:	58 f4       	brcc	.+22     	; 0xd30 <vfprintf+0x348>
     d1a:	b6 01       	movw	r22, r12
     d1c:	80 e2       	ldi	r24, 0x20	; 32
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	b8 d1       	rcall	.+880    	; 0x1092 <fputc>
     d22:	b3 94       	inc	r11
     d24:	f8 cf       	rjmp	.-16     	; 0xd16 <vfprintf+0x32e>
     d26:	b2 14       	cp	r11, r2
     d28:	18 f4       	brcc	.+6      	; 0xd30 <vfprintf+0x348>
     d2a:	2b 18       	sub	r2, r11
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <vfprintf+0x34a>
     d2e:	98 2c       	mov	r9, r8
     d30:	21 2c       	mov	r2, r1
     d32:	a4 fe       	sbrs	r10, 4
     d34:	0f c0       	rjmp	.+30     	; 0xd54 <vfprintf+0x36c>
     d36:	b6 01       	movw	r22, r12
     d38:	80 e3       	ldi	r24, 0x30	; 48
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	aa d1       	rcall	.+852    	; 0x1092 <fputc>
     d3e:	a2 fe       	sbrs	r10, 2
     d40:	16 c0       	rjmp	.+44     	; 0xd6e <vfprintf+0x386>
     d42:	a1 fc       	sbrc	r10, 1
     d44:	03 c0       	rjmp	.+6      	; 0xd4c <vfprintf+0x364>
     d46:	88 e7       	ldi	r24, 0x78	; 120
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <vfprintf+0x368>
     d4c:	88 e5       	ldi	r24, 0x58	; 88
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	b6 01       	movw	r22, r12
     d52:	0c c0       	rjmp	.+24     	; 0xd6c <vfprintf+0x384>
     d54:	8a 2d       	mov	r24, r10
     d56:	86 78       	andi	r24, 0x86	; 134
     d58:	51 f0       	breq	.+20     	; 0xd6e <vfprintf+0x386>
     d5a:	a1 fe       	sbrs	r10, 1
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <vfprintf+0x37a>
     d5e:	8b e2       	ldi	r24, 0x2B	; 43
     d60:	01 c0       	rjmp	.+2      	; 0xd64 <vfprintf+0x37c>
     d62:	80 e2       	ldi	r24, 0x20	; 32
     d64:	a7 fc       	sbrc	r10, 7
     d66:	8d e2       	ldi	r24, 0x2D	; 45
     d68:	b6 01       	movw	r22, r12
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	92 d1       	rcall	.+804    	; 0x1092 <fputc>
     d6e:	89 14       	cp	r8, r9
     d70:	30 f4       	brcc	.+12     	; 0xd7e <vfprintf+0x396>
     d72:	b6 01       	movw	r22, r12
     d74:	80 e3       	ldi	r24, 0x30	; 48
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	8c d1       	rcall	.+792    	; 0x1092 <fputc>
     d7a:	9a 94       	dec	r9
     d7c:	f8 cf       	rjmp	.-16     	; 0xd6e <vfprintf+0x386>
     d7e:	8a 94       	dec	r8
     d80:	f3 01       	movw	r30, r6
     d82:	e8 0d       	add	r30, r8
     d84:	f1 1d       	adc	r31, r1
     d86:	80 81       	ld	r24, Z
     d88:	b6 01       	movw	r22, r12
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	82 d1       	rcall	.+772    	; 0x1092 <fputc>
     d8e:	81 10       	cpse	r8, r1
     d90:	f6 cf       	rjmp	.-20     	; 0xd7e <vfprintf+0x396>
     d92:	22 20       	and	r2, r2
     d94:	09 f4       	brne	.+2      	; 0xd98 <vfprintf+0x3b0>
     d96:	4e ce       	rjmp	.-868    	; 0xa34 <vfprintf+0x4c>
     d98:	b6 01       	movw	r22, r12
     d9a:	80 e2       	ldi	r24, 0x20	; 32
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	79 d1       	rcall	.+754    	; 0x1092 <fputc>
     da0:	2a 94       	dec	r2
     da2:	f7 cf       	rjmp	.-18     	; 0xd92 <vfprintf+0x3aa>
     da4:	f6 01       	movw	r30, r12
     da6:	86 81       	ldd	r24, Z+6	; 0x06
     da8:	97 81       	ldd	r25, Z+7	; 0x07
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <vfprintf+0x3c8>
     dac:	8f ef       	ldi	r24, 0xFF	; 255
     dae:	9f ef       	ldi	r25, 0xFF	; 255
     db0:	2b 96       	adiw	r28, 0x0b	; 11
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	ff 90       	pop	r15
     dc6:	ef 90       	pop	r14
     dc8:	df 90       	pop	r13
     dca:	cf 90       	pop	r12
     dcc:	bf 90       	pop	r11
     dce:	af 90       	pop	r10
     dd0:	9f 90       	pop	r9
     dd2:	8f 90       	pop	r8
     dd4:	7f 90       	pop	r7
     dd6:	6f 90       	pop	r6
     dd8:	5f 90       	pop	r5
     dda:	4f 90       	pop	r4
     ddc:	3f 90       	pop	r3
     dde:	2f 90       	pop	r2
     de0:	08 95       	ret

00000de2 <calloc>:
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	86 9f       	mul	r24, r22
     dec:	80 01       	movw	r16, r0
     dee:	87 9f       	mul	r24, r23
     df0:	10 0d       	add	r17, r0
     df2:	96 9f       	mul	r25, r22
     df4:	10 0d       	add	r17, r0
     df6:	11 24       	eor	r1, r1
     df8:	c8 01       	movw	r24, r16
     dfa:	0d d0       	rcall	.+26     	; 0xe16 <malloc>
     dfc:	ec 01       	movw	r28, r24
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	21 f0       	breq	.+8      	; 0xe0a <calloc+0x28>
     e02:	a8 01       	movw	r20, r16
     e04:	60 e0       	ldi	r22, 0x00	; 0
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	32 d1       	rcall	.+612    	; 0x106e <memset>
     e0a:	ce 01       	movw	r24, r28
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	08 95       	ret

00000e16 <malloc>:
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	82 30       	cpi	r24, 0x02	; 2
     e20:	91 05       	cpc	r25, r1
     e22:	10 f4       	brcc	.+4      	; 0xe28 <malloc+0x12>
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <__flp>
     e2c:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <__flp+0x1>
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	a0 e0       	ldi	r26, 0x00	; 0
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	30 97       	sbiw	r30, 0x00	; 0
     e3a:	19 f1       	breq	.+70     	; 0xe82 <malloc+0x6c>
     e3c:	40 81       	ld	r20, Z
     e3e:	51 81       	ldd	r21, Z+1	; 0x01
     e40:	02 81       	ldd	r16, Z+2	; 0x02
     e42:	13 81       	ldd	r17, Z+3	; 0x03
     e44:	48 17       	cp	r20, r24
     e46:	59 07       	cpc	r21, r25
     e48:	c8 f0       	brcs	.+50     	; 0xe7c <malloc+0x66>
     e4a:	84 17       	cp	r24, r20
     e4c:	95 07       	cpc	r25, r21
     e4e:	69 f4       	brne	.+26     	; 0xe6a <malloc+0x54>
     e50:	10 97       	sbiw	r26, 0x00	; 0
     e52:	31 f0       	breq	.+12     	; 0xe60 <malloc+0x4a>
     e54:	12 96       	adiw	r26, 0x02	; 2
     e56:	0c 93       	st	X, r16
     e58:	12 97       	sbiw	r26, 0x02	; 2
     e5a:	13 96       	adiw	r26, 0x03	; 3
     e5c:	1c 93       	st	X, r17
     e5e:	27 c0       	rjmp	.+78     	; 0xeae <malloc+0x98>
     e60:	00 93 58 02 	sts	0x0258, r16	; 0x800258 <__flp>
     e64:	10 93 59 02 	sts	0x0259, r17	; 0x800259 <__flp+0x1>
     e68:	22 c0       	rjmp	.+68     	; 0xeae <malloc+0x98>
     e6a:	21 15       	cp	r18, r1
     e6c:	31 05       	cpc	r19, r1
     e6e:	19 f0       	breq	.+6      	; 0xe76 <malloc+0x60>
     e70:	42 17       	cp	r20, r18
     e72:	53 07       	cpc	r21, r19
     e74:	18 f4       	brcc	.+6      	; 0xe7c <malloc+0x66>
     e76:	9a 01       	movw	r18, r20
     e78:	bd 01       	movw	r22, r26
     e7a:	ef 01       	movw	r28, r30
     e7c:	df 01       	movw	r26, r30
     e7e:	f8 01       	movw	r30, r16
     e80:	db cf       	rjmp	.-74     	; 0xe38 <malloc+0x22>
     e82:	21 15       	cp	r18, r1
     e84:	31 05       	cpc	r19, r1
     e86:	f9 f0       	breq	.+62     	; 0xec6 <malloc+0xb0>
     e88:	28 1b       	sub	r18, r24
     e8a:	39 0b       	sbc	r19, r25
     e8c:	24 30       	cpi	r18, 0x04	; 4
     e8e:	31 05       	cpc	r19, r1
     e90:	80 f4       	brcc	.+32     	; 0xeb2 <malloc+0x9c>
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	9b 81       	ldd	r25, Y+3	; 0x03
     e96:	61 15       	cp	r22, r1
     e98:	71 05       	cpc	r23, r1
     e9a:	21 f0       	breq	.+8      	; 0xea4 <malloc+0x8e>
     e9c:	fb 01       	movw	r30, r22
     e9e:	93 83       	std	Z+3, r25	; 0x03
     ea0:	82 83       	std	Z+2, r24	; 0x02
     ea2:	04 c0       	rjmp	.+8      	; 0xeac <malloc+0x96>
     ea4:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <__flp+0x1>
     ea8:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__flp>
     eac:	fe 01       	movw	r30, r28
     eae:	32 96       	adiw	r30, 0x02	; 2
     eb0:	44 c0       	rjmp	.+136    	; 0xf3a <malloc+0x124>
     eb2:	fe 01       	movw	r30, r28
     eb4:	e2 0f       	add	r30, r18
     eb6:	f3 1f       	adc	r31, r19
     eb8:	81 93       	st	Z+, r24
     eba:	91 93       	st	Z+, r25
     ebc:	22 50       	subi	r18, 0x02	; 2
     ebe:	31 09       	sbc	r19, r1
     ec0:	39 83       	std	Y+1, r19	; 0x01
     ec2:	28 83       	st	Y, r18
     ec4:	3a c0       	rjmp	.+116    	; 0xf3a <malloc+0x124>
     ec6:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <__brkval>
     eca:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <__brkval+0x1>
     ece:	23 2b       	or	r18, r19
     ed0:	41 f4       	brne	.+16     	; 0xee2 <malloc+0xcc>
     ed2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
     ed6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
     eda:	30 93 57 02 	sts	0x0257, r19	; 0x800257 <__brkval+0x1>
     ede:	20 93 56 02 	sts	0x0256, r18	; 0x800256 <__brkval>
     ee2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
     ee6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
     eea:	21 15       	cp	r18, r1
     eec:	31 05       	cpc	r19, r1
     eee:	41 f4       	brne	.+16     	; 0xf00 <malloc+0xea>
     ef0:	2d b7       	in	r18, 0x3d	; 61
     ef2:	3e b7       	in	r19, 0x3e	; 62
     ef4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
     ef8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
     efc:	24 1b       	sub	r18, r20
     efe:	35 0b       	sbc	r19, r21
     f00:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <__brkval>
     f04:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <__brkval+0x1>
     f08:	e2 17       	cp	r30, r18
     f0a:	f3 07       	cpc	r31, r19
     f0c:	a0 f4       	brcc	.+40     	; 0xf36 <malloc+0x120>
     f0e:	2e 1b       	sub	r18, r30
     f10:	3f 0b       	sbc	r19, r31
     f12:	28 17       	cp	r18, r24
     f14:	39 07       	cpc	r19, r25
     f16:	78 f0       	brcs	.+30     	; 0xf36 <malloc+0x120>
     f18:	ac 01       	movw	r20, r24
     f1a:	4e 5f       	subi	r20, 0xFE	; 254
     f1c:	5f 4f       	sbci	r21, 0xFF	; 255
     f1e:	24 17       	cp	r18, r20
     f20:	35 07       	cpc	r19, r21
     f22:	48 f0       	brcs	.+18     	; 0xf36 <malloc+0x120>
     f24:	4e 0f       	add	r20, r30
     f26:	5f 1f       	adc	r21, r31
     f28:	50 93 57 02 	sts	0x0257, r21	; 0x800257 <__brkval+0x1>
     f2c:	40 93 56 02 	sts	0x0256, r20	; 0x800256 <__brkval>
     f30:	81 93       	st	Z+, r24
     f32:	91 93       	st	Z+, r25
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <malloc+0x124>
     f36:	e0 e0       	ldi	r30, 0x00	; 0
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	cf 01       	movw	r24, r30
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	08 95       	ret

00000f46 <free>:
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	09 f4       	brne	.+2      	; 0xf50 <free+0xa>
     f4e:	81 c0       	rjmp	.+258    	; 0x1052 <free+0x10c>
     f50:	fc 01       	movw	r30, r24
     f52:	32 97       	sbiw	r30, 0x02	; 2
     f54:	13 82       	std	Z+3, r1	; 0x03
     f56:	12 82       	std	Z+2, r1	; 0x02
     f58:	a0 91 58 02 	lds	r26, 0x0258	; 0x800258 <__flp>
     f5c:	b0 91 59 02 	lds	r27, 0x0259	; 0x800259 <__flp+0x1>
     f60:	10 97       	sbiw	r26, 0x00	; 0
     f62:	81 f4       	brne	.+32     	; 0xf84 <free+0x3e>
     f64:	20 81       	ld	r18, Z
     f66:	31 81       	ldd	r19, Z+1	; 0x01
     f68:	82 0f       	add	r24, r18
     f6a:	93 1f       	adc	r25, r19
     f6c:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <__brkval>
     f70:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <__brkval+0x1>
     f74:	28 17       	cp	r18, r24
     f76:	39 07       	cpc	r19, r25
     f78:	51 f5       	brne	.+84     	; 0xfce <free+0x88>
     f7a:	f0 93 57 02 	sts	0x0257, r31	; 0x800257 <__brkval+0x1>
     f7e:	e0 93 56 02 	sts	0x0256, r30	; 0x800256 <__brkval>
     f82:	67 c0       	rjmp	.+206    	; 0x1052 <free+0x10c>
     f84:	ed 01       	movw	r28, r26
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	ce 17       	cp	r28, r30
     f8c:	df 07       	cpc	r29, r31
     f8e:	40 f4       	brcc	.+16     	; 0xfa0 <free+0x5a>
     f90:	4a 81       	ldd	r20, Y+2	; 0x02
     f92:	5b 81       	ldd	r21, Y+3	; 0x03
     f94:	9e 01       	movw	r18, r28
     f96:	41 15       	cp	r20, r1
     f98:	51 05       	cpc	r21, r1
     f9a:	f1 f0       	breq	.+60     	; 0xfd8 <free+0x92>
     f9c:	ea 01       	movw	r28, r20
     f9e:	f5 cf       	rjmp	.-22     	; 0xf8a <free+0x44>
     fa0:	d3 83       	std	Z+3, r29	; 0x03
     fa2:	c2 83       	std	Z+2, r28	; 0x02
     fa4:	40 81       	ld	r20, Z
     fa6:	51 81       	ldd	r21, Z+1	; 0x01
     fa8:	84 0f       	add	r24, r20
     faa:	95 1f       	adc	r25, r21
     fac:	c8 17       	cp	r28, r24
     fae:	d9 07       	cpc	r29, r25
     fb0:	59 f4       	brne	.+22     	; 0xfc8 <free+0x82>
     fb2:	88 81       	ld	r24, Y
     fb4:	99 81       	ldd	r25, Y+1	; 0x01
     fb6:	84 0f       	add	r24, r20
     fb8:	95 1f       	adc	r25, r21
     fba:	02 96       	adiw	r24, 0x02	; 2
     fbc:	91 83       	std	Z+1, r25	; 0x01
     fbe:	80 83       	st	Z, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	9b 81       	ldd	r25, Y+3	; 0x03
     fc4:	93 83       	std	Z+3, r25	; 0x03
     fc6:	82 83       	std	Z+2, r24	; 0x02
     fc8:	21 15       	cp	r18, r1
     fca:	31 05       	cpc	r19, r1
     fcc:	29 f4       	brne	.+10     	; 0xfd8 <free+0x92>
     fce:	f0 93 59 02 	sts	0x0259, r31	; 0x800259 <__flp+0x1>
     fd2:	e0 93 58 02 	sts	0x0258, r30	; 0x800258 <__flp>
     fd6:	3d c0       	rjmp	.+122    	; 0x1052 <free+0x10c>
     fd8:	e9 01       	movw	r28, r18
     fda:	fb 83       	std	Y+3, r31	; 0x03
     fdc:	ea 83       	std	Y+2, r30	; 0x02
     fde:	49 91       	ld	r20, Y+
     fe0:	59 91       	ld	r21, Y+
     fe2:	c4 0f       	add	r28, r20
     fe4:	d5 1f       	adc	r29, r21
     fe6:	ec 17       	cp	r30, r28
     fe8:	fd 07       	cpc	r31, r29
     fea:	61 f4       	brne	.+24     	; 0x1004 <free+0xbe>
     fec:	80 81       	ld	r24, Z
     fee:	91 81       	ldd	r25, Z+1	; 0x01
     ff0:	84 0f       	add	r24, r20
     ff2:	95 1f       	adc	r25, r21
     ff4:	02 96       	adiw	r24, 0x02	; 2
     ff6:	e9 01       	movw	r28, r18
     ff8:	99 83       	std	Y+1, r25	; 0x01
     ffa:	88 83       	st	Y, r24
     ffc:	82 81       	ldd	r24, Z+2	; 0x02
     ffe:	93 81       	ldd	r25, Z+3	; 0x03
    1000:	9b 83       	std	Y+3, r25	; 0x03
    1002:	8a 83       	std	Y+2, r24	; 0x02
    1004:	e0 e0       	ldi	r30, 0x00	; 0
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	12 96       	adiw	r26, 0x02	; 2
    100a:	8d 91       	ld	r24, X+
    100c:	9c 91       	ld	r25, X
    100e:	13 97       	sbiw	r26, 0x03	; 3
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	19 f0       	breq	.+6      	; 0x101a <free+0xd4>
    1014:	fd 01       	movw	r30, r26
    1016:	dc 01       	movw	r26, r24
    1018:	f7 cf       	rjmp	.-18     	; 0x1008 <free+0xc2>
    101a:	8d 91       	ld	r24, X+
    101c:	9c 91       	ld	r25, X
    101e:	11 97       	sbiw	r26, 0x01	; 1
    1020:	9d 01       	movw	r18, r26
    1022:	2e 5f       	subi	r18, 0xFE	; 254
    1024:	3f 4f       	sbci	r19, 0xFF	; 255
    1026:	82 0f       	add	r24, r18
    1028:	93 1f       	adc	r25, r19
    102a:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <__brkval>
    102e:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <__brkval+0x1>
    1032:	28 17       	cp	r18, r24
    1034:	39 07       	cpc	r19, r25
    1036:	69 f4       	brne	.+26     	; 0x1052 <free+0x10c>
    1038:	30 97       	sbiw	r30, 0x00	; 0
    103a:	29 f4       	brne	.+10     	; 0x1046 <free+0x100>
    103c:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <__flp+0x1>
    1040:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <__flp>
    1044:	02 c0       	rjmp	.+4      	; 0x104a <free+0x104>
    1046:	13 82       	std	Z+3, r1	; 0x03
    1048:	12 82       	std	Z+2, r1	; 0x02
    104a:	b0 93 57 02 	sts	0x0257, r27	; 0x800257 <__brkval+0x1>
    104e:	a0 93 56 02 	sts	0x0256, r26	; 0x800256 <__brkval>
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	08 95       	ret

00001058 <strnlen_P>:
    1058:	fc 01       	movw	r30, r24
    105a:	05 90       	lpm	r0, Z+
    105c:	61 50       	subi	r22, 0x01	; 1
    105e:	70 40       	sbci	r23, 0x00	; 0
    1060:	01 10       	cpse	r0, r1
    1062:	d8 f7       	brcc	.-10     	; 0x105a <strnlen_P+0x2>
    1064:	80 95       	com	r24
    1066:	90 95       	com	r25
    1068:	8e 0f       	add	r24, r30
    106a:	9f 1f       	adc	r25, r31
    106c:	08 95       	ret

0000106e <memset>:
    106e:	dc 01       	movw	r26, r24
    1070:	01 c0       	rjmp	.+2      	; 0x1074 <memset+0x6>
    1072:	6d 93       	st	X+, r22
    1074:	41 50       	subi	r20, 0x01	; 1
    1076:	50 40       	sbci	r21, 0x00	; 0
    1078:	e0 f7       	brcc	.-8      	; 0x1072 <memset+0x4>
    107a:	08 95       	ret

0000107c <strnlen>:
    107c:	fc 01       	movw	r30, r24
    107e:	61 50       	subi	r22, 0x01	; 1
    1080:	70 40       	sbci	r23, 0x00	; 0
    1082:	01 90       	ld	r0, Z+
    1084:	01 10       	cpse	r0, r1
    1086:	d8 f7       	brcc	.-10     	; 0x107e <strnlen+0x2>
    1088:	80 95       	com	r24
    108a:	90 95       	com	r25
    108c:	8e 0f       	add	r24, r30
    108e:	9f 1f       	adc	r25, r31
    1090:	08 95       	ret

00001092 <fputc>:
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	fb 01       	movw	r30, r22
    109c:	23 81       	ldd	r18, Z+3	; 0x03
    109e:	21 fd       	sbrc	r18, 1
    10a0:	03 c0       	rjmp	.+6      	; 0x10a8 <fputc+0x16>
    10a2:	8f ef       	ldi	r24, 0xFF	; 255
    10a4:	9f ef       	ldi	r25, 0xFF	; 255
    10a6:	2c c0       	rjmp	.+88     	; 0x1100 <fputc+0x6e>
    10a8:	22 ff       	sbrs	r18, 2
    10aa:	16 c0       	rjmp	.+44     	; 0x10d8 <fputc+0x46>
    10ac:	46 81       	ldd	r20, Z+6	; 0x06
    10ae:	57 81       	ldd	r21, Z+7	; 0x07
    10b0:	24 81       	ldd	r18, Z+4	; 0x04
    10b2:	35 81       	ldd	r19, Z+5	; 0x05
    10b4:	42 17       	cp	r20, r18
    10b6:	53 07       	cpc	r21, r19
    10b8:	44 f4       	brge	.+16     	; 0x10ca <fputc+0x38>
    10ba:	a0 81       	ld	r26, Z
    10bc:	b1 81       	ldd	r27, Z+1	; 0x01
    10be:	9d 01       	movw	r18, r26
    10c0:	2f 5f       	subi	r18, 0xFF	; 255
    10c2:	3f 4f       	sbci	r19, 0xFF	; 255
    10c4:	31 83       	std	Z+1, r19	; 0x01
    10c6:	20 83       	st	Z, r18
    10c8:	8c 93       	st	X, r24
    10ca:	26 81       	ldd	r18, Z+6	; 0x06
    10cc:	37 81       	ldd	r19, Z+7	; 0x07
    10ce:	2f 5f       	subi	r18, 0xFF	; 255
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
    10d2:	37 83       	std	Z+7, r19	; 0x07
    10d4:	26 83       	std	Z+6, r18	; 0x06
    10d6:	14 c0       	rjmp	.+40     	; 0x1100 <fputc+0x6e>
    10d8:	8b 01       	movw	r16, r22
    10da:	ec 01       	movw	r28, r24
    10dc:	fb 01       	movw	r30, r22
    10de:	00 84       	ldd	r0, Z+8	; 0x08
    10e0:	f1 85       	ldd	r31, Z+9	; 0x09
    10e2:	e0 2d       	mov	r30, r0
    10e4:	19 95       	eicall
    10e6:	89 2b       	or	r24, r25
    10e8:	e1 f6       	brne	.-72     	; 0x10a2 <fputc+0x10>
    10ea:	d8 01       	movw	r26, r16
    10ec:	16 96       	adiw	r26, 0x06	; 6
    10ee:	8d 91       	ld	r24, X+
    10f0:	9c 91       	ld	r25, X
    10f2:	17 97       	sbiw	r26, 0x07	; 7
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	17 96       	adiw	r26, 0x07	; 7
    10f8:	9c 93       	st	X, r25
    10fa:	8e 93       	st	-X, r24
    10fc:	16 97       	sbiw	r26, 0x06	; 6
    10fe:	ce 01       	movw	r24, r28
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	08 95       	ret

0000110a <__ultoa_invert>:
    110a:	fa 01       	movw	r30, r20
    110c:	aa 27       	eor	r26, r26
    110e:	28 30       	cpi	r18, 0x08	; 8
    1110:	51 f1       	breq	.+84     	; 0x1166 <__ultoa_invert+0x5c>
    1112:	20 31       	cpi	r18, 0x10	; 16
    1114:	81 f1       	breq	.+96     	; 0x1176 <__ultoa_invert+0x6c>
    1116:	e8 94       	clt
    1118:	6f 93       	push	r22
    111a:	6e 7f       	andi	r22, 0xFE	; 254
    111c:	6e 5f       	subi	r22, 0xFE	; 254
    111e:	7f 4f       	sbci	r23, 0xFF	; 255
    1120:	8f 4f       	sbci	r24, 0xFF	; 255
    1122:	9f 4f       	sbci	r25, 0xFF	; 255
    1124:	af 4f       	sbci	r26, 0xFF	; 255
    1126:	b1 e0       	ldi	r27, 0x01	; 1
    1128:	3e d0       	rcall	.+124    	; 0x11a6 <__ultoa_invert+0x9c>
    112a:	b4 e0       	ldi	r27, 0x04	; 4
    112c:	3c d0       	rcall	.+120    	; 0x11a6 <__ultoa_invert+0x9c>
    112e:	67 0f       	add	r22, r23
    1130:	78 1f       	adc	r23, r24
    1132:	89 1f       	adc	r24, r25
    1134:	9a 1f       	adc	r25, r26
    1136:	a1 1d       	adc	r26, r1
    1138:	68 0f       	add	r22, r24
    113a:	79 1f       	adc	r23, r25
    113c:	8a 1f       	adc	r24, r26
    113e:	91 1d       	adc	r25, r1
    1140:	a1 1d       	adc	r26, r1
    1142:	6a 0f       	add	r22, r26
    1144:	71 1d       	adc	r23, r1
    1146:	81 1d       	adc	r24, r1
    1148:	91 1d       	adc	r25, r1
    114a:	a1 1d       	adc	r26, r1
    114c:	20 d0       	rcall	.+64     	; 0x118e <__ultoa_invert+0x84>
    114e:	09 f4       	brne	.+2      	; 0x1152 <__ultoa_invert+0x48>
    1150:	68 94       	set
    1152:	3f 91       	pop	r19
    1154:	2a e0       	ldi	r18, 0x0A	; 10
    1156:	26 9f       	mul	r18, r22
    1158:	11 24       	eor	r1, r1
    115a:	30 19       	sub	r19, r0
    115c:	30 5d       	subi	r19, 0xD0	; 208
    115e:	31 93       	st	Z+, r19
    1160:	de f6       	brtc	.-74     	; 0x1118 <__ultoa_invert+0xe>
    1162:	cf 01       	movw	r24, r30
    1164:	08 95       	ret
    1166:	46 2f       	mov	r20, r22
    1168:	47 70       	andi	r20, 0x07	; 7
    116a:	40 5d       	subi	r20, 0xD0	; 208
    116c:	41 93       	st	Z+, r20
    116e:	b3 e0       	ldi	r27, 0x03	; 3
    1170:	0f d0       	rcall	.+30     	; 0x1190 <__ultoa_invert+0x86>
    1172:	c9 f7       	brne	.-14     	; 0x1166 <__ultoa_invert+0x5c>
    1174:	f6 cf       	rjmp	.-20     	; 0x1162 <__ultoa_invert+0x58>
    1176:	46 2f       	mov	r20, r22
    1178:	4f 70       	andi	r20, 0x0F	; 15
    117a:	40 5d       	subi	r20, 0xD0	; 208
    117c:	4a 33       	cpi	r20, 0x3A	; 58
    117e:	18 f0       	brcs	.+6      	; 0x1186 <__ultoa_invert+0x7c>
    1180:	49 5d       	subi	r20, 0xD9	; 217
    1182:	31 fd       	sbrc	r19, 1
    1184:	40 52       	subi	r20, 0x20	; 32
    1186:	41 93       	st	Z+, r20
    1188:	02 d0       	rcall	.+4      	; 0x118e <__ultoa_invert+0x84>
    118a:	a9 f7       	brne	.-22     	; 0x1176 <__ultoa_invert+0x6c>
    118c:	ea cf       	rjmp	.-44     	; 0x1162 <__ultoa_invert+0x58>
    118e:	b4 e0       	ldi	r27, 0x04	; 4
    1190:	a6 95       	lsr	r26
    1192:	97 95       	ror	r25
    1194:	87 95       	ror	r24
    1196:	77 95       	ror	r23
    1198:	67 95       	ror	r22
    119a:	ba 95       	dec	r27
    119c:	c9 f7       	brne	.-14     	; 0x1190 <__ultoa_invert+0x86>
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	61 05       	cpc	r22, r1
    11a2:	71 05       	cpc	r23, r1
    11a4:	08 95       	ret
    11a6:	9b 01       	movw	r18, r22
    11a8:	ac 01       	movw	r20, r24
    11aa:	0a 2e       	mov	r0, r26
    11ac:	06 94       	lsr	r0
    11ae:	57 95       	ror	r21
    11b0:	47 95       	ror	r20
    11b2:	37 95       	ror	r19
    11b4:	27 95       	ror	r18
    11b6:	ba 95       	dec	r27
    11b8:	c9 f7       	brne	.-14     	; 0x11ac <__ultoa_invert+0xa2>
    11ba:	62 0f       	add	r22, r18
    11bc:	73 1f       	adc	r23, r19
    11be:	84 1f       	adc	r24, r20
    11c0:	95 1f       	adc	r25, r21
    11c2:	a0 1d       	adc	r26, r0
    11c4:	08 95       	ret

000011c6 <_exit>:
    11c6:	f8 94       	cli

000011c8 <__stop_program>:
    11c8:	ff cf       	rjmp	.-2      	; 0x11c8 <__stop_program>
