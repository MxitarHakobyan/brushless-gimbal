
drv_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f4  00800200  00002542  000025d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002542  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000053  008003f4  008003f4  000027ca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000027ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002828  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00002868  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d71  00000000  00000000  00002aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000167f  00000000  00000000  00005811  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001546  00000000  00000000  00006e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b0  00000000  00000000  000083d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bd9  00000000  00000000  00008a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e31  00000000  00000000  00009661  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  0000b492  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b5 c0       	rjmp	.+362    	; 0x16c <__ctors_end>
       2:	00 00       	nop
       4:	d3 c0       	rjmp	.+422    	; 0x1ac <__bad_interrupt>
       6:	00 00       	nop
       8:	d1 c0       	rjmp	.+418    	; 0x1ac <__bad_interrupt>
       a:	00 00       	nop
       c:	cf c0       	rjmp	.+414    	; 0x1ac <__bad_interrupt>
       e:	00 00       	nop
      10:	cd c0       	rjmp	.+410    	; 0x1ac <__bad_interrupt>
      12:	00 00       	nop
      14:	cb c0       	rjmp	.+406    	; 0x1ac <__bad_interrupt>
      16:	00 00       	nop
      18:	c9 c0       	rjmp	.+402    	; 0x1ac <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c7 c0       	rjmp	.+398    	; 0x1ac <__bad_interrupt>
      1e:	00 00       	nop
      20:	c5 c0       	rjmp	.+394    	; 0x1ac <__bad_interrupt>
      22:	00 00       	nop
      24:	c3 c0       	rjmp	.+390    	; 0x1ac <__bad_interrupt>
      26:	00 00       	nop
      28:	c1 c0       	rjmp	.+386    	; 0x1ac <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bf c0       	rjmp	.+382    	; 0x1ac <__bad_interrupt>
      2e:	00 00       	nop
      30:	bd c0       	rjmp	.+378    	; 0x1ac <__bad_interrupt>
      32:	00 00       	nop
      34:	bb c0       	rjmp	.+374    	; 0x1ac <__bad_interrupt>
      36:	00 00       	nop
      38:	b9 c0       	rjmp	.+370    	; 0x1ac <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b7 c0       	rjmp	.+366    	; 0x1ac <__bad_interrupt>
      3e:	00 00       	nop
      40:	b5 c0       	rjmp	.+362    	; 0x1ac <__bad_interrupt>
      42:	00 00       	nop
      44:	b3 c0       	rjmp	.+358    	; 0x1ac <__bad_interrupt>
      46:	00 00       	nop
      48:	b1 c0       	rjmp	.+354    	; 0x1ac <__bad_interrupt>
      4a:	00 00       	nop
      4c:	af c0       	rjmp	.+350    	; 0x1ac <__bad_interrupt>
      4e:	00 00       	nop
      50:	ad c0       	rjmp	.+346    	; 0x1ac <__bad_interrupt>
      52:	00 00       	nop
      54:	ab c0       	rjmp	.+342    	; 0x1ac <__bad_interrupt>
      56:	00 00       	nop
      58:	a9 c0       	rjmp	.+338    	; 0x1ac <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__vector_23>
      60:	a5 c0       	rjmp	.+330    	; 0x1ac <__bad_interrupt>
      62:	00 00       	nop
      64:	a3 c0       	rjmp	.+326    	; 0x1ac <__bad_interrupt>
      66:	00 00       	nop
      68:	a1 c0       	rjmp	.+322    	; 0x1ac <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9f c0       	rjmp	.+318    	; 0x1ac <__bad_interrupt>
      6e:	00 00       	nop
      70:	9d c0       	rjmp	.+314    	; 0x1ac <__bad_interrupt>
      72:	00 00       	nop
      74:	9b c0       	rjmp	.+310    	; 0x1ac <__bad_interrupt>
      76:	00 00       	nop
      78:	99 c0       	rjmp	.+306    	; 0x1ac <__bad_interrupt>
      7a:	00 00       	nop
      7c:	97 c0       	rjmp	.+302    	; 0x1ac <__bad_interrupt>
      7e:	00 00       	nop
      80:	95 c0       	rjmp	.+298    	; 0x1ac <__bad_interrupt>
      82:	00 00       	nop
      84:	93 c0       	rjmp	.+294    	; 0x1ac <__bad_interrupt>
      86:	00 00       	nop
      88:	91 c0       	rjmp	.+290    	; 0x1ac <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8f c0       	rjmp	.+286    	; 0x1ac <__bad_interrupt>
      8e:	00 00       	nop
      90:	8d c0       	rjmp	.+282    	; 0x1ac <__bad_interrupt>
      92:	00 00       	nop
      94:	8b c0       	rjmp	.+278    	; 0x1ac <__bad_interrupt>
      96:	00 00       	nop
      98:	89 c0       	rjmp	.+274    	; 0x1ac <__bad_interrupt>
      9a:	00 00       	nop
      9c:	87 c0       	rjmp	.+270    	; 0x1ac <__bad_interrupt>
      9e:	00 00       	nop
      a0:	85 c0       	rjmp	.+266    	; 0x1ac <__bad_interrupt>
      a2:	00 00       	nop
      a4:	83 c0       	rjmp	.+262    	; 0x1ac <__bad_interrupt>
      a6:	00 00       	nop
      a8:	81 c0       	rjmp	.+258    	; 0x1ac <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7f c0       	rjmp	.+254    	; 0x1ac <__bad_interrupt>
      ae:	00 00       	nop
      b0:	7d c0       	rjmp	.+250    	; 0x1ac <__bad_interrupt>
      b2:	00 00       	nop
      b4:	7b c0       	rjmp	.+246    	; 0x1ac <__bad_interrupt>
      b6:	00 00       	nop
      b8:	79 c0       	rjmp	.+242    	; 0x1ac <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 96 08 	jmp	0x112c	; 0x112c <__vector_47>
      c0:	75 c0       	rjmp	.+234    	; 0x1ac <__bad_interrupt>
      c2:	00 00       	nop
      c4:	73 c0       	rjmp	.+230    	; 0x1ac <__bad_interrupt>
      c6:	00 00       	nop
      c8:	71 c0       	rjmp	.+226    	; 0x1ac <__bad_interrupt>
      ca:	00 00       	nop
      cc:	6f c0       	rjmp	.+222    	; 0x1ac <__bad_interrupt>
      ce:	00 00       	nop
      d0:	6d c0       	rjmp	.+218    	; 0x1ac <__bad_interrupt>
      d2:	00 00       	nop
      d4:	6b c0       	rjmp	.+214    	; 0x1ac <__bad_interrupt>
      d6:	00 00       	nop
      d8:	69 c0       	rjmp	.+210    	; 0x1ac <__bad_interrupt>
      da:	00 00       	nop
      dc:	67 c0       	rjmp	.+206    	; 0x1ac <__bad_interrupt>
      de:	00 00       	nop
      e0:	65 c0       	rjmp	.+202    	; 0x1ac <__bad_interrupt>
      e2:	00 00       	nop
      e4:	03 6e       	ori	r16, 0xE3	; 227
      e6:	db 36       	cpi	r29, 0x6B	; 107
      e8:	3d 9a       	sbi	0x07, 5	; 7
      ea:	99 99       	sbic	0x13, 1	; 19
      ec:	99 3d       	cpi	r25, 0xD9	; 217
      ee:	ab aa       	std	Y+51, r10	; 0x33
      f0:	aa 2a       	or	r10, r26
      f2:	3e 00       	.word	0x003e	; ????
      f4:	00 00       	nop
      f6:	80 3f       	cpi	r24, 0xF0	; 240
      f8:	08 4a       	sbci	r16, 0xA8	; 168
      fa:	d7 3b       	cpi	r29, 0xB7	; 183
      fc:	3b ce       	rjmp	.-906    	; 0xfffffd74 <__eeprom_end+0xff7efd74>
      fe:	01 6e       	ori	r16, 0xE1	; 225
     100:	84 bc       	out	0x24, r8	; 36
     102:	bf fd       	.word	0xfdbf	; ????
     104:	c1 2f       	mov	r28, r17
     106:	3d 6c       	ori	r19, 0xCD	; 205
     108:	74 31       	cpi	r23, 0x14	; 20
     10a:	9a bd       	out	0x2a, r25	; 42
     10c:	56 83       	std	Z+6, r21	; 0x06
     10e:	3d da       	rcall	.-2950   	; 0xfffff58a <__eeprom_end+0xff7ef58a>
     110:	3d 00       	.word	0x003d	; ????
     112:	c7 7f       	andi	r28, 0xF7	; 247
     114:	11 be       	out	0x31, r1	; 49
     116:	d9 e4       	ldi	r29, 0x49	; 73
     118:	bb 4c       	sbci	r27, 0xCB	; 203
     11a:	3e 91       	ld	r19, -X
     11c:	6b aa       	std	Y+51, r6	; 0x33
     11e:	aa be       	out	0x3a, r10	; 58
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	3f 07       	cpc	r19, r31
     126:	2c 7a       	andi	r18, 0xAC	; 172
     128:	a5 ba       	out	0x15, r10	; 21
     12a:	6c c5       	rjmp	.+2776   	; 0xc04 <main+0x576>
     12c:	90 da       	rcall	.-2784   	; 0xfffff64e <__eeprom_end+0xff7ef64e>
     12e:	3b 93       	.word	0x933b	; ????
     130:	65 fc       	sbrc	r6, 5
     132:	8b bc       	out	0x2b, r8	; 43
     134:	53 f8       	bld	r5, 3
     136:	10 fd       	sbrc	r17, 0
     138:	3c 56       	subi	r19, 0x6C	; 108
     13a:	92 83       	std	Z+2, r25	; 0x02
     13c:	4d bd       	out	0x2d, r20	; 45
     13e:	87 9d       	mul	r24, r7
     140:	3a b6       	in	r3, 0x3a	; 58
     142:	3d cb       	rjmp	.-2438   	; 0xfffff7be <__eeprom_end+0xff7ef7be>
     144:	c9 bf       	out	0x39, r28	; 57
     146:	5b be       	out	0x3b, r5	; 59
     148:	73 da       	rcall	.-2842   	; 0xfffff630 <__eeprom_end+0xff7ef630>
     14a:	0f c9       	rjmp	.-3554   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
     14c:	3f 05       	cpc	r19, r15
     14e:	a8 4c       	sbci	r26, 0xC8	; 200
     150:	cd b2       	in	r12, 0x1d	; 29
     152:	d4 4e       	sbci	r29, 0xE4	; 228
     154:	b9 38       	cpi	r27, 0x89	; 137
     156:	36 a9       	ldd	r19, Z+54	; 0x36
     158:	02 0c       	add	r0, r2
     15a:	50 b9       	out	0x00, r21	; 0
     15c:	91 86       	std	Z+9, r9	; 0x09
     15e:	88 08       	sbc	r8, r8
     160:	3c a6       	std	Y+44, r3	; 0x2c
     162:	aa aa       	std	Y+50, r10	; 0x32
     164:	2a be       	out	0x3a, r2	; 58
     166:	00 00       	nop
     168:	00 80       	ld	r0, Z
     16a:	3f 00       	.word	0x003f	; ????

0000016c <__ctors_end>:
     16c:	11 24       	eor	r1, r1
     16e:	1f be       	out	0x3f, r1	; 63
     170:	cf ef       	ldi	r28, 0xFF	; 255
     172:	d1 e2       	ldi	r29, 0x21	; 33
     174:	de bf       	out	0x3e, r29	; 62
     176:	cd bf       	out	0x3d, r28	; 61
     178:	00 e0       	ldi	r16, 0x00	; 0
     17a:	0c bf       	out	0x3c, r16	; 60

0000017c <__do_copy_data>:
     17c:	13 e0       	ldi	r17, 0x03	; 3
     17e:	a0 e0       	ldi	r26, 0x00	; 0
     180:	b2 e0       	ldi	r27, 0x02	; 2
     182:	e2 e4       	ldi	r30, 0x42	; 66
     184:	f5 e2       	ldi	r31, 0x25	; 37
     186:	00 e0       	ldi	r16, 0x00	; 0
     188:	0b bf       	out	0x3b, r16	; 59
     18a:	02 c0       	rjmp	.+4      	; 0x190 <__do_copy_data+0x14>
     18c:	07 90       	elpm	r0, Z+
     18e:	0d 92       	st	X+, r0
     190:	a4 3f       	cpi	r26, 0xF4	; 244
     192:	b1 07       	cpc	r27, r17
     194:	d9 f7       	brne	.-10     	; 0x18c <__do_copy_data+0x10>

00000196 <__do_clear_bss>:
     196:	24 e0       	ldi	r18, 0x04	; 4
     198:	a4 ef       	ldi	r26, 0xF4	; 244
     19a:	b3 e0       	ldi	r27, 0x03	; 3
     19c:	01 c0       	rjmp	.+2      	; 0x1a0 <.do_clear_bss_start>

0000019e <.do_clear_bss_loop>:
     19e:	1d 92       	st	X+, r1

000001a0 <.do_clear_bss_start>:
     1a0:	a7 34       	cpi	r26, 0x47	; 71
     1a2:	b2 07       	cpc	r27, r18
     1a4:	e1 f7       	brne	.-8      	; 0x19e <.do_clear_bss_loop>
     1a6:	73 d2       	rcall	.+1254   	; 0x68e <main>
     1a8:	0c 94 9f 12 	jmp	0x253e	; 0x253e <_exit>

000001ac <__bad_interrupt>:
     1ac:	29 cf       	rjmp	.-430    	; 0x0 <__vectors>

000001ae <init_gpio>:
{
	if (a>b && a>c) return a;
	if (b>a && b>c) return b;
	if (c>a && c>b) return c;
	return a;
}
     1ae:	e1 e0       	ldi	r30, 0x01	; 1
     1b0:	f1 e0       	ldi	r31, 0x01	; 1
     1b2:	80 81       	ld	r24, Z
     1b4:	88 60       	ori	r24, 0x08	; 8
     1b6:	80 83       	st	Z, r24
     1b8:	80 81       	ld	r24, Z
     1ba:	80 61       	ori	r24, 0x10	; 16
     1bc:	80 83       	st	Z, r24
     1be:	80 81       	ld	r24, Z
     1c0:	80 62       	ori	r24, 0x20	; 32
     1c2:	80 83       	st	Z, r24
     1c4:	08 95       	ret

000001c6 <PWM_update>:
void PWM_update()//motor pwm update
{
	U_PWM=pwmSin[U_step];
     1c6:	e0 91 f4 03 	lds	r30, 0x03F4	; 0x8003f4 <__data_end>
     1ca:	f0 91 f5 03 	lds	r31, 0x03F5	; 0x8003f5 <__data_end+0x1>
     1ce:	ea 5f       	subi	r30, 0xFA	; 250
     1d0:	fd 4f       	sbci	r31, 0xFD	; 253
     1d2:	80 81       	ld	r24, Z
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     1da:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
	V_PWM=pwmSin[V_step];
     1de:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <V_step>
     1e2:	f0 91 72 03 	lds	r31, 0x0372	; 0x800372 <V_step+0x1>
     1e6:	ea 5f       	subi	r30, 0xFA	; 250
     1e8:	fd 4f       	sbci	r31, 0xFD	; 253
     1ea:	80 81       	ld	r24, Z
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     1f2:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
	W_PWM=pwmSin[W_step];
     1f6:	e0 91 6f 03 	lds	r30, 0x036F	; 0x80036f <W_step>
     1fa:	f0 91 70 03 	lds	r31, 0x0370	; 0x800370 <W_step+0x1>
     1fe:	ea 5f       	subi	r30, 0xFA	; 250
     200:	fd 4f       	sbci	r31, 0xFD	; 253
     202:	80 81       	ld	r24, Z
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
     20a:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
	U_step=U_step+incr;
     20e:	60 91 03 04 	lds	r22, 0x0403	; 0x800403 <incr>
     212:	70 91 04 04 	lds	r23, 0x0404	; 0x800404 <incr+0x1>
     216:	40 91 f4 03 	lds	r20, 0x03F4	; 0x8003f4 <__data_end>
     21a:	50 91 f5 03 	lds	r21, 0x03F5	; 0x8003f5 <__data_end+0x1>
     21e:	46 0f       	add	r20, r22
     220:	57 1f       	adc	r21, r23
     222:	50 93 f5 03 	sts	0x03F5, r21	; 0x8003f5 <__data_end+0x1>
     226:	40 93 f4 03 	sts	0x03F4, r20	; 0x8003f4 <__data_end>
	V_step=V_step+incr;
     22a:	20 91 71 03 	lds	r18, 0x0371	; 0x800371 <V_step>
     22e:	30 91 72 03 	lds	r19, 0x0372	; 0x800372 <V_step+0x1>
     232:	26 0f       	add	r18, r22
     234:	37 1f       	adc	r19, r23
     236:	30 93 72 03 	sts	0x0372, r19	; 0x800372 <V_step+0x1>
     23a:	20 93 71 03 	sts	0x0371, r18	; 0x800371 <V_step>
	W_step=W_step+incr;
     23e:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <W_step>
     242:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <W_step+0x1>
     246:	86 0f       	add	r24, r22
     248:	97 1f       	adc	r25, r23
     24a:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <W_step+0x1>
     24e:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <W_step>
	if(U_step > SINE_TABLE_SZ)
     252:	49 36       	cpi	r20, 0x69	; 105
     254:	61 e0       	ldi	r22, 0x01	; 1
     256:	56 07       	cpc	r21, r22
     258:	2c f0       	brlt	.+10     	; 0x264 <PWM_update+0x9e>
	U_step = 0;
     25a:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <__data_end+0x1>
     25e:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <__data_end>
     262:	08 c0       	rjmp	.+16     	; 0x274 <PWM_update+0xae>
	if(U_step < 0)
     264:	55 23       	and	r21, r21
     266:	34 f4       	brge	.+12     	; 0x274 <PWM_update+0xae>
	U_step = SINE_TABLE_SZ;
     268:	48 e6       	ldi	r20, 0x68	; 104
     26a:	51 e0       	ldi	r21, 0x01	; 1
     26c:	50 93 f5 03 	sts	0x03F5, r21	; 0x8003f5 <__data_end+0x1>
     270:	40 93 f4 03 	sts	0x03F4, r20	; 0x8003f4 <__data_end>
	
	if(V_step > SINE_TABLE_SZ)
     274:	29 36       	cpi	r18, 0x69	; 105
     276:	41 e0       	ldi	r20, 0x01	; 1
     278:	34 07       	cpc	r19, r20
     27a:	2c f0       	brlt	.+10     	; 0x286 <PWM_update+0xc0>
	V_step = 0;
     27c:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <V_step+0x1>
     280:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <V_step>
     284:	08 c0       	rjmp	.+16     	; 0x296 <PWM_update+0xd0>
	if(V_step < 0)
     286:	33 23       	and	r19, r19
     288:	34 f4       	brge	.+12     	; 0x296 <PWM_update+0xd0>
	V_step = SINE_TABLE_SZ;
     28a:	28 e6       	ldi	r18, 0x68	; 104
     28c:	31 e0       	ldi	r19, 0x01	; 1
     28e:	30 93 72 03 	sts	0x0372, r19	; 0x800372 <V_step+0x1>
     292:	20 93 71 03 	sts	0x0371, r18	; 0x800371 <V_step>
	
	if(W_step > SINE_TABLE_SZ)
     296:	89 36       	cpi	r24, 0x69	; 105
     298:	61 e0       	ldi	r22, 0x01	; 1
     29a:	96 07       	cpc	r25, r22
     29c:	2c f0       	brlt	.+10     	; 0x2a8 <PWM_update+0xe2>
	W_step = 0;
     29e:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <W_step+0x1>
     2a2:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <W_step>
     2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <PWM_update+0xf2>
	if(W_step < 0)
     2a8:	99 23       	and	r25, r25
     2aa:	34 f4       	brge	.+12     	; 0x2b8 <PWM_update+0xf2>
	W_step = SINE_TABLE_SZ;
     2ac:	88 e6       	ldi	r24, 0x68	; 104
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <W_step+0x1>
     2b4:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <W_step>
	//_delay_us(100);
	OCR5A=pwm_delay;
     2b8:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <pwm_delay>
     2bc:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <pwm_delay+0x1>
     2c0:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     2c4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     2c8:	08 95       	ret

000002ca <getAngle>:
#include "KALMAN.h"

float getAngle(float newAngle, float newRate, float dt) {
     2ca:	4f 92       	push	r4
     2cc:	5f 92       	push	r5
     2ce:	6f 92       	push	r6
     2d0:	7f 92       	push	r7
     2d2:	8f 92       	push	r8
     2d4:	9f 92       	push	r9
     2d6:	af 92       	push	r10
     2d8:	bf 92       	push	r11
     2da:	cf 92       	push	r12
     2dc:	df 92       	push	r13
     2de:	ef 92       	push	r14
     2e0:	ff 92       	push	r15
     2e2:	0f 93       	push	r16
     2e4:	1f 93       	push	r17
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
     2ee:	6c 97       	sbiw	r28, 0x1c	; 28
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	69 8b       	std	Y+17, r22	; 0x11
     2fc:	7a 8b       	std	Y+18, r23	; 0x12
     2fe:	8b 8b       	std	Y+19, r24	; 0x13
     300:	9c 8b       	std	Y+20, r25	; 0x14
     302:	ca 01       	movw	r24, r20
     304:	b9 01       	movw	r22, r18
     306:	e9 82       	std	Y+1, r14	; 0x01
     308:	fa 82       	std	Y+2, r15	; 0x02
     30a:	0b 83       	std	Y+3, r16	; 0x03
     30c:	1c 83       	std	Y+4, r17	; 0x04
	// See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

	// Discrete Kalman filter time update equations - Time Update ("Predict")
	// Update xhat - Project the state ahead
	/* Step 1 */
	rate = newRate - bias;
     30e:	c0 90 11 04 	lds	r12, 0x0411	; 0x800411 <bias>
     312:	d0 90 12 04 	lds	r13, 0x0412	; 0x800412 <bias+0x1>
     316:	e0 90 13 04 	lds	r14, 0x0413	; 0x800413 <bias+0x2>
     31a:	f0 90 14 04 	lds	r15, 0x0414	; 0x800414 <bias+0x3>
     31e:	a7 01       	movw	r20, r14
     320:	96 01       	movw	r18, r12
     322:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__subsf3>
     326:	60 93 09 04 	sts	0x0409, r22	; 0x800409 <rate>
     32a:	70 93 0a 04 	sts	0x040A, r23	; 0x80040a <rate+0x1>
     32e:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <rate+0x2>
     332:	90 93 0c 04 	sts	0x040C, r25	; 0x80040c <rate+0x3>
	angle += dt * rate;
     336:	29 81       	ldd	r18, Y+1	; 0x01
     338:	3a 81       	ldd	r19, Y+2	; 0x02
     33a:	4b 81       	ldd	r20, Y+3	; 0x03
     33c:	5c 81       	ldd	r21, Y+4	; 0x04
     33e:	0e 94 80 0c 	call	0x1900	; 0x1900 <__mulsf3>
     342:	20 91 19 04 	lds	r18, 0x0419	; 0x800419 <angle>
     346:	30 91 1a 04 	lds	r19, 0x041A	; 0x80041a <angle+0x1>
     34a:	40 91 1b 04 	lds	r20, 0x041B	; 0x80041b <angle+0x2>
     34e:	50 91 1c 04 	lds	r21, 0x041C	; 0x80041c <angle+0x3>
     352:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__addsf3>
     356:	6d 8b       	std	Y+21, r22	; 0x15
     358:	7e 8b       	std	Y+22, r23	; 0x16
     35a:	8f 8b       	std	Y+23, r24	; 0x17
     35c:	98 8f       	std	Y+24, r25	; 0x18

	// Update estimation error covariance - Project the error covariance ahead
	/* Step 2 */
	P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
     35e:	80 90 29 04 	lds	r8, 0x0429	; 0x800429 <P+0xc>
     362:	90 90 2a 04 	lds	r9, 0x042A	; 0x80042a <P+0xd>
     366:	a0 90 2b 04 	lds	r10, 0x042B	; 0x80042b <P+0xe>
     36a:	b0 90 2c 04 	lds	r11, 0x042C	; 0x80042c <P+0xf>
     36e:	a5 01       	movw	r20, r10
     370:	94 01       	movw	r18, r8
     372:	69 81       	ldd	r22, Y+1	; 0x01
     374:	7a 81       	ldd	r23, Y+2	; 0x02
     376:	8b 81       	ldd	r24, Y+3	; 0x03
     378:	9c 81       	ldd	r25, Y+4	; 0x04
     37a:	0e 94 80 0c 	call	0x1900	; 0x1900 <__mulsf3>
     37e:	6d 83       	std	Y+5, r22	; 0x05
     380:	7e 83       	std	Y+6, r23	; 0x06
     382:	8f 83       	std	Y+7, r24	; 0x07
     384:	98 87       	std	Y+8, r25	; 0x08
     386:	40 90 21 04 	lds	r4, 0x0421	; 0x800421 <P+0x4>
     38a:	50 90 22 04 	lds	r5, 0x0422	; 0x800422 <P+0x5>
     38e:	60 90 23 04 	lds	r6, 0x0423	; 0x800423 <P+0x6>
     392:	70 90 24 04 	lds	r7, 0x0424	; 0x800424 <P+0x7>
     396:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <P+0x8>
     39a:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <P+0x9>
     39e:	a0 91 27 04 	lds	r26, 0x0427	; 0x800427 <P+0xa>
     3a2:	b0 91 28 04 	lds	r27, 0x0428	; 0x800428 <P+0xb>
     3a6:	8d 87       	std	Y+13, r24	; 0x0d
     3a8:	9e 87       	std	Y+14, r25	; 0x0e
     3aa:	af 87       	std	Y+15, r26	; 0x0f
     3ac:	b8 8b       	std	Y+16, r27	; 0x10
     3ae:	a3 01       	movw	r20, r6
     3b0:	92 01       	movw	r18, r4
     3b2:	6d 81       	ldd	r22, Y+5	; 0x05
     3b4:	7e 81       	ldd	r23, Y+6	; 0x06
     3b6:	8f 81       	ldd	r24, Y+7	; 0x07
     3b8:	98 85       	ldd	r25, Y+8	; 0x08
     3ba:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__subsf3>
     3be:	2d 85       	ldd	r18, Y+13	; 0x0d
     3c0:	3e 85       	ldd	r19, Y+14	; 0x0e
     3c2:	4f 85       	ldd	r20, Y+15	; 0x0f
     3c4:	58 89       	ldd	r21, Y+16	; 0x10
     3c6:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__subsf3>
     3ca:	20 91 0d 04 	lds	r18, 0x040D	; 0x80040d <Q_angle>
     3ce:	30 91 0e 04 	lds	r19, 0x040E	; 0x80040e <Q_angle+0x1>
     3d2:	40 91 0f 04 	lds	r20, 0x040F	; 0x80040f <Q_angle+0x2>
     3d6:	50 91 10 04 	lds	r21, 0x0410	; 0x800410 <Q_angle+0x3>
     3da:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__addsf3>
     3de:	29 81       	ldd	r18, Y+1	; 0x01
     3e0:	3a 81       	ldd	r19, Y+2	; 0x02
     3e2:	4b 81       	ldd	r20, Y+3	; 0x03
     3e4:	5c 81       	ldd	r21, Y+4	; 0x04
     3e6:	0e 94 80 0c 	call	0x1900	; 0x1900 <__mulsf3>
     3ea:	ad e1       	ldi	r26, 0x1D	; 29
     3ec:	b4 e0       	ldi	r27, 0x04	; 4
     3ee:	2d 91       	ld	r18, X+
     3f0:	3d 91       	ld	r19, X+
     3f2:	4d 91       	ld	r20, X+
     3f4:	5c 91       	ld	r21, X
     3f6:	fc d7       	rcall	.+4088   	; 0x13f0 <__addsf3>
     3f8:	69 87       	std	Y+9, r22	; 0x09
     3fa:	7a 87       	std	Y+10, r23	; 0x0a
     3fc:	8b 87       	std	Y+11, r24	; 0x0b
     3fe:	9c 87       	std	Y+12, r25	; 0x0c
	P[0][1] -= dt * P[1][1];
     400:	2d 81       	ldd	r18, Y+5	; 0x05
     402:	3e 81       	ldd	r19, Y+6	; 0x06
     404:	4f 81       	ldd	r20, Y+7	; 0x07
     406:	58 85       	ldd	r21, Y+8	; 0x08
     408:	c3 01       	movw	r24, r6
     40a:	b2 01       	movw	r22, r4
     40c:	f0 d7       	rcall	.+4064   	; 0x13ee <__subsf3>
     40e:	2b 01       	movw	r4, r22
     410:	3c 01       	movw	r6, r24
	P[1][0] -= dt * P[1][1];
     412:	2d 81       	ldd	r18, Y+5	; 0x05
     414:	3e 81       	ldd	r19, Y+6	; 0x06
     416:	4f 81       	ldd	r20, Y+7	; 0x07
     418:	58 85       	ldd	r21, Y+8	; 0x08
     41a:	6d 85       	ldd	r22, Y+13	; 0x0d
     41c:	7e 85       	ldd	r23, Y+14	; 0x0e
     41e:	8f 85       	ldd	r24, Y+15	; 0x0f
     420:	98 89       	ldd	r25, Y+16	; 0x10
     422:	e5 d7       	rcall	.+4042   	; 0x13ee <__subsf3>
     424:	6d 87       	std	Y+13, r22	; 0x0d
     426:	7e 87       	std	Y+14, r23	; 0x0e
     428:	8f 87       	std	Y+15, r24	; 0x0f
     42a:	98 8b       	std	Y+16, r25	; 0x10
	P[1][1] += Q_bias * dt;
     42c:	20 91 05 04 	lds	r18, 0x0405	; 0x800405 <Q_bias>
     430:	30 91 06 04 	lds	r19, 0x0406	; 0x800406 <Q_bias+0x1>
     434:	40 91 07 04 	lds	r20, 0x0407	; 0x800407 <Q_bias+0x2>
     438:	50 91 08 04 	lds	r21, 0x0408	; 0x800408 <Q_bias+0x3>
     43c:	69 81       	ldd	r22, Y+1	; 0x01
     43e:	7a 81       	ldd	r23, Y+2	; 0x02
     440:	8b 81       	ldd	r24, Y+3	; 0x03
     442:	9c 81       	ldd	r25, Y+4	; 0x04
     444:	0e 94 80 0c 	call	0x1900	; 0x1900 <__mulsf3>
     448:	a5 01       	movw	r20, r10
     44a:	94 01       	movw	r18, r8
     44c:	d1 d7       	rcall	.+4002   	; 0x13f0 <__addsf3>
     44e:	69 8f       	std	Y+25, r22	; 0x19
     450:	7a 8f       	std	Y+26, r23	; 0x1a
     452:	8b 8f       	std	Y+27, r24	; 0x1b
     454:	9c 8f       	std	Y+28, r25	; 0x1c

	// Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
	// Calculate Kalman gain - Compute the Kalman gain
	/* Step 4 */
	float S = P[0][0] + R_measure; // Estimate error
     456:	20 91 15 04 	lds	r18, 0x0415	; 0x800415 <R_measure>
     45a:	30 91 16 04 	lds	r19, 0x0416	; 0x800416 <R_measure+0x1>
     45e:	40 91 17 04 	lds	r20, 0x0417	; 0x800417 <R_measure+0x2>
     462:	50 91 18 04 	lds	r21, 0x0418	; 0x800418 <R_measure+0x3>
     466:	69 85       	ldd	r22, Y+9	; 0x09
     468:	7a 85       	ldd	r23, Y+10	; 0x0a
     46a:	8b 85       	ldd	r24, Y+11	; 0x0b
     46c:	9c 85       	ldd	r25, Y+12	; 0x0c
     46e:	c0 d7       	rcall	.+3968   	; 0x13f0 <__addsf3>
     470:	4b 01       	movw	r8, r22
     472:	5c 01       	movw	r10, r24
	/* Step 5 */
	float K[2]; // Kalman gain - This is a 2x1 vector
	K[0] = P[0][0] / S;
     474:	9b 01       	movw	r18, r22
     476:	ac 01       	movw	r20, r24
     478:	69 85       	ldd	r22, Y+9	; 0x09
     47a:	7a 85       	ldd	r23, Y+10	; 0x0a
     47c:	8b 85       	ldd	r24, Y+11	; 0x0b
     47e:	9c 85       	ldd	r25, Y+12	; 0x0c
     480:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__divsf3>
     484:	69 83       	std	Y+1, r22	; 0x01
     486:	7a 83       	std	Y+2, r23	; 0x02
     488:	8b 83       	std	Y+3, r24	; 0x03
     48a:	9c 83       	std	Y+4, r25	; 0x04
	K[1] = P[1][0] / S;
     48c:	a5 01       	movw	r20, r10
     48e:	94 01       	movw	r18, r8
     490:	6d 85       	ldd	r22, Y+13	; 0x0d
     492:	7e 85       	ldd	r23, Y+14	; 0x0e
     494:	8f 85       	ldd	r24, Y+15	; 0x0f
     496:	98 89       	ldd	r25, Y+16	; 0x10
     498:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__divsf3>
     49c:	6d 83       	std	Y+5, r22	; 0x05
     49e:	7e 83       	std	Y+6, r23	; 0x06
     4a0:	8f 83       	std	Y+7, r24	; 0x07
     4a2:	98 87       	std	Y+8, r25	; 0x08

	// Calculate angle and bias - Update estimate with measurement zk (newAngle)
	/* Step 3 */
	float y = newAngle - angle; // Angle difference
     4a4:	2d 89       	ldd	r18, Y+21	; 0x15
     4a6:	3e 89       	ldd	r19, Y+22	; 0x16
     4a8:	4f 89       	ldd	r20, Y+23	; 0x17
     4aa:	58 8d       	ldd	r21, Y+24	; 0x18
     4ac:	69 89       	ldd	r22, Y+17	; 0x11
     4ae:	7a 89       	ldd	r23, Y+18	; 0x12
     4b0:	8b 89       	ldd	r24, Y+19	; 0x13
     4b2:	9c 89       	ldd	r25, Y+20	; 0x14
     4b4:	9c d7       	rcall	.+3896   	; 0x13ee <__subsf3>
     4b6:	69 8b       	std	Y+17, r22	; 0x11
     4b8:	7a 8b       	std	Y+18, r23	; 0x12
     4ba:	8b 8b       	std	Y+19, r24	; 0x13
     4bc:	9c 8b       	std	Y+20, r25	; 0x14
	/* Step 6 */
	angle += K[0] * y;
     4be:	9b 01       	movw	r18, r22
     4c0:	ac 01       	movw	r20, r24
     4c2:	69 81       	ldd	r22, Y+1	; 0x01
     4c4:	7a 81       	ldd	r23, Y+2	; 0x02
     4c6:	8b 81       	ldd	r24, Y+3	; 0x03
     4c8:	9c 81       	ldd	r25, Y+4	; 0x04
     4ca:	0e 94 80 0c 	call	0x1900	; 0x1900 <__mulsf3>
     4ce:	2d 89       	ldd	r18, Y+21	; 0x15
     4d0:	3e 89       	ldd	r19, Y+22	; 0x16
     4d2:	4f 89       	ldd	r20, Y+23	; 0x17
     4d4:	58 8d       	ldd	r21, Y+24	; 0x18
     4d6:	8c d7       	rcall	.+3864   	; 0x13f0 <__addsf3>
     4d8:	4b 01       	movw	r8, r22
     4da:	5c 01       	movw	r10, r24
     4dc:	60 93 19 04 	sts	0x0419, r22	; 0x800419 <angle>
     4e0:	70 93 1a 04 	sts	0x041A, r23	; 0x80041a <angle+0x1>
     4e4:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <angle+0x2>
     4e8:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <angle+0x3>
	bias += K[1] * y;
     4ec:	29 89       	ldd	r18, Y+17	; 0x11
     4ee:	3a 89       	ldd	r19, Y+18	; 0x12
     4f0:	4b 89       	ldd	r20, Y+19	; 0x13
     4f2:	5c 89       	ldd	r21, Y+20	; 0x14
     4f4:	6d 81       	ldd	r22, Y+5	; 0x05
     4f6:	7e 81       	ldd	r23, Y+6	; 0x06
     4f8:	8f 81       	ldd	r24, Y+7	; 0x07
     4fa:	98 85       	ldd	r25, Y+8	; 0x08
     4fc:	0e 94 80 0c 	call	0x1900	; 0x1900 <__mulsf3>
     500:	a7 01       	movw	r20, r14
     502:	96 01       	movw	r18, r12
     504:	75 d7       	rcall	.+3818   	; 0x13f0 <__addsf3>
     506:	60 93 11 04 	sts	0x0411, r22	; 0x800411 <bias>
     50a:	70 93 12 04 	sts	0x0412, r23	; 0x800412 <bias+0x1>
     50e:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <bias+0x2>
     512:	90 93 14 04 	sts	0x0414, r25	; 0x800414 <bias+0x3>
	// Calculate estimation error covariance - Update the error covariance
	/* Step 7 */
	float P00_temp = P[0][0];
	float P01_temp = P[0][1];

	P[0][0] -= K[0] * P00_temp;
     516:	29 81       	ldd	r18, Y+1	; 0x01
     518:	3a 81       	ldd	r19, Y+2	; 0x02
     51a:	4b 81       	ldd	r20, Y+3	; 0x03
     51c:	5c 81       	ldd	r21, Y+4	; 0x04
     51e:	69 85       	ldd	r22, Y+9	; 0x09
     520:	7a 85       	ldd	r23, Y+10	; 0x0a
     522:	8b 85       	ldd	r24, Y+11	; 0x0b
     524:	9c 85       	ldd	r25, Y+12	; 0x0c
     526:	0e 94 80 0c 	call	0x1900	; 0x1900 <__mulsf3>
     52a:	9b 01       	movw	r18, r22
     52c:	ac 01       	movw	r20, r24
     52e:	69 85       	ldd	r22, Y+9	; 0x09
     530:	7a 85       	ldd	r23, Y+10	; 0x0a
     532:	8b 85       	ldd	r24, Y+11	; 0x0b
     534:	9c 85       	ldd	r25, Y+12	; 0x0c
     536:	5b d7       	rcall	.+3766   	; 0x13ee <__subsf3>
     538:	ed e1       	ldi	r30, 0x1D	; 29
     53a:	f4 e0       	ldi	r31, 0x04	; 4
     53c:	60 83       	st	Z, r22
     53e:	71 83       	std	Z+1, r23	; 0x01
     540:	82 83       	std	Z+2, r24	; 0x02
     542:	93 83       	std	Z+3, r25	; 0x03
	P[0][1] -= K[0] * P01_temp;
     544:	29 81       	ldd	r18, Y+1	; 0x01
     546:	3a 81       	ldd	r19, Y+2	; 0x02
     548:	4b 81       	ldd	r20, Y+3	; 0x03
     54a:	5c 81       	ldd	r21, Y+4	; 0x04
     54c:	c3 01       	movw	r24, r6
     54e:	b2 01       	movw	r22, r4
     550:	0e 94 80 0c 	call	0x1900	; 0x1900 <__mulsf3>
     554:	9b 01       	movw	r18, r22
     556:	ac 01       	movw	r20, r24
     558:	c3 01       	movw	r24, r6
     55a:	b2 01       	movw	r22, r4
     55c:	48 d7       	rcall	.+3728   	; 0x13ee <__subsf3>
     55e:	60 93 21 04 	sts	0x0421, r22	; 0x800421 <P+0x4>
     562:	70 93 22 04 	sts	0x0422, r23	; 0x800422 <P+0x5>
     566:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <P+0x6>
     56a:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <P+0x7>
	P[1][0] -= K[1] * P00_temp;
     56e:	2d 81       	ldd	r18, Y+5	; 0x05
     570:	3e 81       	ldd	r19, Y+6	; 0x06
     572:	4f 81       	ldd	r20, Y+7	; 0x07
     574:	58 85       	ldd	r21, Y+8	; 0x08
     576:	69 85       	ldd	r22, Y+9	; 0x09
     578:	7a 85       	ldd	r23, Y+10	; 0x0a
     57a:	8b 85       	ldd	r24, Y+11	; 0x0b
     57c:	9c 85       	ldd	r25, Y+12	; 0x0c
     57e:	0e 94 80 0c 	call	0x1900	; 0x1900 <__mulsf3>
     582:	9b 01       	movw	r18, r22
     584:	ac 01       	movw	r20, r24
     586:	6d 85       	ldd	r22, Y+13	; 0x0d
     588:	7e 85       	ldd	r23, Y+14	; 0x0e
     58a:	8f 85       	ldd	r24, Y+15	; 0x0f
     58c:	98 89       	ldd	r25, Y+16	; 0x10
     58e:	2f d7       	rcall	.+3678   	; 0x13ee <__subsf3>
     590:	60 93 25 04 	sts	0x0425, r22	; 0x800425 <P+0x8>
     594:	70 93 26 04 	sts	0x0426, r23	; 0x800426 <P+0x9>
     598:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <P+0xa>
     59c:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <P+0xb>
	P[1][1] -= K[1] * P01_temp;
     5a0:	2d 81       	ldd	r18, Y+5	; 0x05
     5a2:	3e 81       	ldd	r19, Y+6	; 0x06
     5a4:	4f 81       	ldd	r20, Y+7	; 0x07
     5a6:	58 85       	ldd	r21, Y+8	; 0x08
     5a8:	c3 01       	movw	r24, r6
     5aa:	b2 01       	movw	r22, r4
     5ac:	0e 94 80 0c 	call	0x1900	; 0x1900 <__mulsf3>
     5b0:	9b 01       	movw	r18, r22
     5b2:	ac 01       	movw	r20, r24
     5b4:	69 8d       	ldd	r22, Y+25	; 0x19
     5b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     5b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5bc:	18 d7       	rcall	.+3632   	; 0x13ee <__subsf3>
     5be:	60 93 29 04 	sts	0x0429, r22	; 0x800429 <P+0xc>
     5c2:	70 93 2a 04 	sts	0x042A, r23	; 0x80042a <P+0xd>
     5c6:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <P+0xe>
     5ca:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <P+0xf>

	return angle;
};
     5ce:	c5 01       	movw	r24, r10
     5d0:	b4 01       	movw	r22, r8
     5d2:	6c 96       	adiw	r28, 0x1c	; 28
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	ff 90       	pop	r15
     5e8:	ef 90       	pop	r14
     5ea:	df 90       	pop	r13
     5ec:	cf 90       	pop	r12
     5ee:	bf 90       	pop	r11
     5f0:	af 90       	pop	r10
     5f2:	9f 90       	pop	r9
     5f4:	8f 90       	pop	r8
     5f6:	7f 90       	pop	r7
     5f8:	6f 90       	pop	r6
     5fa:	5f 90       	pop	r5
     5fc:	4f 90       	pop	r4
     5fe:	08 95       	ret

00000600 <Kalman_init>:
void Kalman_init() {
	/* We will set the variables like so, these can also be tuned by the user */
	Q_angle = 0.001f;
     600:	8f e6       	ldi	r24, 0x6F	; 111
     602:	92 e1       	ldi	r25, 0x12	; 18
     604:	a3 e8       	ldi	r26, 0x83	; 131
     606:	ba e3       	ldi	r27, 0x3A	; 58
     608:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <Q_angle>
     60c:	90 93 0e 04 	sts	0x040E, r25	; 0x80040e <Q_angle+0x1>
     610:	a0 93 0f 04 	sts	0x040F, r26	; 0x80040f <Q_angle+0x2>
     614:	b0 93 10 04 	sts	0x0410, r27	; 0x800410 <Q_angle+0x3>
	Q_bias = 0.003f;
     618:	86 ea       	ldi	r24, 0xA6	; 166
     61a:	9b e9       	ldi	r25, 0x9B	; 155
     61c:	a4 e4       	ldi	r26, 0x44	; 68
     61e:	bb e3       	ldi	r27, 0x3B	; 59
     620:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <Q_bias>
     624:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <Q_bias+0x1>
     628:	a0 93 07 04 	sts	0x0407, r26	; 0x800407 <Q_bias+0x2>
     62c:	b0 93 08 04 	sts	0x0408, r27	; 0x800408 <Q_bias+0x3>
	R_measure = 0.03f;
     630:	8f e8       	ldi	r24, 0x8F	; 143
     632:	92 ec       	ldi	r25, 0xC2	; 194
     634:	a5 ef       	ldi	r26, 0xF5	; 245
     636:	bc e3       	ldi	r27, 0x3C	; 60
     638:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <R_measure>
     63c:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <R_measure+0x1>
     640:	a0 93 17 04 	sts	0x0417, r26	; 0x800417 <R_measure+0x2>
     644:	b0 93 18 04 	sts	0x0418, r27	; 0x800418 <R_measure+0x3>

	angle = 0.0f; // Reset the angle
     648:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <angle>
     64c:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <angle+0x1>
     650:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <angle+0x2>
     654:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <angle+0x3>
	bias = 0.0f; // Reset bias
     658:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <bias>
     65c:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <bias+0x1>
     660:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <bias+0x2>
     664:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <bias+0x3>

	P[0][0] = 0.0f; // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so - see: http://en.wikipedia.org/wiki/Kalman_filter#Example_application.2C_technical
     668:	ed e1       	ldi	r30, 0x1D	; 29
     66a:	f4 e0       	ldi	r31, 0x04	; 4
     66c:	10 82       	st	Z, r1
     66e:	11 82       	std	Z+1, r1	; 0x01
     670:	12 82       	std	Z+2, r1	; 0x02
     672:	13 82       	std	Z+3, r1	; 0x03
	P[0][1] = 0.0f;
     674:	14 82       	std	Z+4, r1	; 0x04
     676:	15 82       	std	Z+5, r1	; 0x05
     678:	16 82       	std	Z+6, r1	; 0x06
     67a:	17 82       	std	Z+7, r1	; 0x07
	P[1][0] = 0.0f;
     67c:	10 86       	std	Z+8, r1	; 0x08
     67e:	11 86       	std	Z+9, r1	; 0x09
     680:	12 86       	std	Z+10, r1	; 0x0a
     682:	13 86       	std	Z+11, r1	; 0x0b
	P[1][1] = 0.0f;
     684:	14 86       	std	Z+12, r1	; 0x0c
     686:	15 86       	std	Z+13, r1	; 0x0d
     688:	16 86       	std	Z+14, r1	; 0x0e
     68a:	17 86       	std	Z+15, r1	; 0x0f
     68c:	08 95       	ret

0000068e <main>:
#include <time.h>
uint8_t buffer[14];
bool loop_bool=true;
/*-----------------------------------start of main----------------------------------*/
int main(void)
{	
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	ec 97       	sbiw	r28, 0x3c	; 60
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	cd bf       	out	0x3d, r28	; 61
	U_step=U_step_predefine;
     6a2:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <__data_end+0x1>
     6a6:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <__data_end>
	V_step=V_step_predefine;
     6aa:	88 e7       	ldi	r24, 0x78	; 120
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <V_step+0x1>
     6b2:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <V_step>
	W_step=W_step_predefine;
     6b6:	80 ef       	ldi	r24, 0xF0	; 240
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <W_step+0x1>
     6be:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <W_step>
	incr=-1;
     6c2:	8f ef       	ldi	r24, 0xFF	; 255
     6c4:	9f ef       	ldi	r25, 0xFF	; 255
     6c6:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <incr+0x1>
     6ca:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <incr>
	pwm_delay=2000;
     6ce:	80 ed       	ldi	r24, 0xD0	; 208
     6d0:	97 e0       	ldi	r25, 0x07	; 7
     6d2:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <pwm_delay+0x1>
     6d6:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <pwm_delay>
	cli();
	init_gpio();
		#ifdef GYRO
			i2c_init();
     6da:	f8 94       	cli
		#endif
	USART_Init(MY_UBRR);
     6dc:	68 dd       	rcall	.-1328   	; 0x1ae <init_gpio>
     6de:	4d d5       	rcall	.+2714   	; 0x117a <i2c_init>
     6e0:	80 e1       	ldi	r24, 0x10	; 16
	uart_str = fdevopen(uart_putchar, NULL);
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	fb d5       	rcall	.+3062   	; 0x12dc <USART_Init>
     6e6:	60 e0       	ldi	r22, 0x00	; 0
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	88 ec       	ldi	r24, 0xC8	; 200
     6ec:	99 e0       	ldi	r25, 0x09	; 9
	setup_timer0();
	Enable_timer0_overflow_interrupt();//micros
     6ee:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <fdevopen>
	setup_timer4();//pwm
     6f2:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <uart_str+0x1>
	setup_timer5();
     6f6:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <uart_str>
	Enable_timer5_compare_interrupt();//motor
	OCR5A=4000;
     6fa:	9b d4       	rcall	.+2358   	; 0x1032 <setup_timer0>
     6fc:	a1 d4       	rcall	.+2370   	; 0x1040 <Enable_timer0_overflow_interrupt>
     6fe:	76 d4       	rcall	.+2284   	; 0xfec <setup_timer4>
     700:	89 d4       	rcall	.+2322   	; 0x1014 <setup_timer5>
     702:	91 d4       	rcall	.+2338   	; 0x1026 <Enable_timer5_compare_interrupt>
     704:	80 ea       	ldi	r24, 0xA0	; 160
	unsigned long timer1=micros();
     706:	9f e0       	ldi	r25, 0x0F	; 15
     708:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     70c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     710:	9d d4       	rcall	.+2362   	; 0x104c <micros>
		double acc_total_vector=0;
		double angle_pitch_acc=0;
		double angle_roll_acc=0;
		bool set_gyro_angles=false;
			#ifdef CALIBERATED_DATA
				int32_t gyroX_calib_=0;
     712:	6b ab       	std	Y+51, r22	; 0x33
     714:	7c ab       	std	Y+52, r23	; 0x34
     716:	8d ab       	std	Y+53, r24	; 0x35
     718:	9e ab       	std	Y+54, r25	; 0x36
				int32_t gyroY_calib_=0;
     71a:	1d 86       	std	Y+13, r1	; 0x0d
     71c:	1e 86       	std	Y+14, r1	; 0x0e
     71e:	1f 86       	std	Y+15, r1	; 0x0f
     720:	18 8a       	std	Y+16, r1	; 0x10
				int32_t gyroZ_calib_=0;
     722:	19 8a       	std	Y+17, r1	; 0x11
     724:	1a 8a       	std	Y+18, r1	; 0x12
     726:	1b 8a       	std	Y+19, r1	; 0x13
				int32_t accelY_calib_=0;
				int32_t accelZ_calib_=0;				
				//uint16_t gyroX_angle_calib=0; 
				uint16_t gyroY_angle_calib=0; 
				//uint16_t gyroZ_angle_calib=0; 				
				mpu6050_calibrate_gyro(&gyroX_calib_,&gyroY_calib_,&gyroZ_calib_);
     728:	1c 8a       	std	Y+20, r1	; 0x14
     72a:	1d 8a       	std	Y+21, r1	; 0x15
     72c:	1e 8a       	std	Y+22, r1	; 0x16
     72e:	1f 8a       	std	Y+23, r1	; 0x17
     730:	18 8e       	std	Y+24, r1	; 0x18
     732:	ae 01       	movw	r20, r28
     734:	4b 5e       	subi	r20, 0xEB	; 235
     736:	5f 4f       	sbci	r21, 0xFF	; 255
     738:	be 01       	movw	r22, r28
     73a:	6f 5e       	subi	r22, 0xEF	; 239
				int16_t gyroX_calib=gyroX_calib_;
     73c:	7f 4f       	sbci	r23, 0xFF	; 255
     73e:	ce 01       	movw	r24, r28
     740:	0d 96       	adiw	r24, 0x0d	; 13
				int16_t gyroY_calib=gyroY_calib_;
     742:	b3 d2       	rcall	.+1382   	; 0xcaa <mpu6050_calibrate_gyro>
     744:	2d 85       	ldd	r18, Y+13	; 0x0d
				int16_t gyroZ_calib=gyroZ_calib_;
     746:	3e 85       	ldd	r19, Y+14	; 0x0e
     748:	38 af       	std	Y+56, r19	; 0x38
     74a:	2f ab       	std	Y+55, r18	; 0x37
				int16_t accelX_calib=accelX_calib_;
				int16_t accelY_calib=accelY_calib_;
				int16_t accelZ_calib=accelZ_calib_;				
				//mpu6050_calibrate_accel(&accelX_calib,&accelY_calib,&accelZ_calib);
			#endif
		mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV,7);
     74c:	49 89       	ldd	r20, Y+17	; 0x11
     74e:	5a 89       	ldd	r21, Y+18	; 0x12
		mpu6050_writeByte(MPU6050_RA_CONFIG,0x00);
     750:	5a af       	std	Y+58, r21	; 0x3a
     752:	49 af       	std	Y+57, r20	; 0x39
		mpu6050_writeByte(MPU6050_RA_GYRO_CONFIG,0x08);//gyro sensitivity set to 500 o/s
     754:	8d 89       	ldd	r24, Y+21	; 0x15
     756:	9e 89       	ldd	r25, Y+22	; 0x16
     758:	9c af       	std	Y+60, r25	; 0x3c
		mpu6050_writeByte(MPU6050_RA_ACCEL_CONFIG,0x10);//accel sensitivity -/+ 8g
     75a:	8b af       	std	Y+59, r24	; 0x3b
     75c:	67 e0       	ldi	r22, 0x07	; 7
     75e:	89 e1       	ldi	r24, 0x19	; 25
		mpu6050_writeByte(MPU6050_RA_PWR_MGMT_1,0x01);
     760:	84 d3       	rcall	.+1800   	; 0xe6a <mpu6050_writeByte>
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	8a e1       	ldi	r24, 0x1A	; 26
     766:	81 d3       	rcall	.+1794   	; 0xe6a <mpu6050_writeByte>
		double gyroXangle;
		double gyroYangle;
		double compAngleX;
		double compAngleY;
	#endif  
	Kalman_init();
     768:	68 e0       	ldi	r22, 0x08	; 8
	double angle_roll_kalman=0;
	double roll  = atan2(accel_y, accel_z) * RAD_TO_DEG;
     76a:	8b e1       	ldi	r24, 0x1B	; 27
     76c:	7e d3       	rcall	.+1788   	; 0xe6a <mpu6050_writeByte>
     76e:	60 e1       	ldi	r22, 0x10	; 16
     770:	8c e1       	ldi	r24, 0x1C	; 28
     772:	7b d3       	rcall	.+1782   	; 0xe6a <mpu6050_writeByte>
     774:	61 e0       	ldi	r22, 0x01	; 1
     776:	8b e6       	ldi	r24, 0x6B	; 107
     778:	78 d3       	rcall	.+1776   	; 0xe6a <mpu6050_writeByte>
     77a:	42 df       	rcall	.-380    	; 0x600 <Kalman_init>
     77c:	6b 85       	ldd	r22, Y+11	; 0x0b
     77e:	7c 85       	ldd	r23, Y+12	; 0x0c
     780:	07 2e       	mov	r0, r23
     782:	00 0c       	add	r0, r0
     784:	88 0b       	sbc	r24, r24
     786:	99 0b       	sbc	r25, r25
     788:	af d7       	rcall	.+3934   	; 0x16e8 <__floatsisf>
     78a:	6b 01       	movw	r12, r22
     78c:	7c 01       	movw	r14, r24
     78e:	69 85       	ldd	r22, Y+9	; 0x09
     790:	7a 85       	ldd	r23, Y+10	; 0x0a
     792:	07 2e       	mov	r0, r23
	angle=roll;//set starting angle
     794:	00 0c       	add	r0, r0
     796:	88 0b       	sbc	r24, r24
     798:	99 0b       	sbc	r25, r25
     79a:	a6 d7       	rcall	.+3916   	; 0x16e8 <__floatsisf>
     79c:	a7 01       	movw	r20, r14
     79e:	96 01       	movw	r18, r12
     7a0:	b1 d6       	rcall	.+3426   	; 0x1504 <atan2>
     7a2:	25 e3       	ldi	r18, 0x35	; 53
     7a4:	3a ef       	ldi	r19, 0xFA	; 250
     7a6:	4e e8       	ldi	r20, 0x8E	; 142
     7a8:	5c e3       	ldi	r21, 0x3C	; 60
     7aa:	0e 94 80 0c 	call	0x1900	; 0x1900 <__mulsf3>
     7ae:	60 93 19 04 	sts	0x0419, r22	; 0x800419 <angle>
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		double angle_pitch=0;
		double angle_roll=0;
     7b2:	70 93 1a 04 	sts	0x041A, r23	; 0x80041a <angle+0x1>
     7b6:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <angle+0x2>
		int16_t gyro_y;
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		double angle_pitch=0;
     7ba:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <angle+0x3>
     7be:	78 94       	sei
     7c0:	1f 8e       	std	Y+31, r1	; 0x1f
			reg=final_angleY;
			printSI("final_angleY=",reg);	
			#ifdef DRV8313
				int absoulute_y=abs(final_angleY);
				uint16_t learing_rate=500;				
				uint16_t local_motor_delay=(32735-(absoulute_y*learing_rate));
     7c2:	18 a2       	std	Y+32, r1	; 0x20
     7c4:	19 a2       	std	Y+33, r1	; 0x21
     7c6:	1a a2       	std	Y+34, r1	; 0x22
     7c8:	1b a2       	std	Y+35, r1	; 0x23
     7ca:	1c a2       	std	Y+36, r1	; 0x24
	angle=roll;//set starting angle
	sei();
    while (1) /*---------------------------while(1)---------------------------------*/
    {
		#ifdef GYRO
    		mpu6050_getRawData(&accel_x,&accel_y,&accel_z,&gyro_x,&gyro_y,&gyro_z);//15us to do
     7cc:	1d a2       	std	Y+37, r1	; 0x25
     7ce:	1e a2       	std	Y+38, r1	; 0x26
     7d0:	0f 2e       	mov	r0, r31
     7d2:	ff ed       	ldi	r31, 0xDF	; 223
     7d4:	6f 2e       	mov	r6, r31
     7d6:	ff e7       	ldi	r31, 0x7F	; 127
     7d8:	7f 2e       	mov	r7, r31
     7da:	f0 2d       	mov	r31, r0
     7dc:	9e 01       	movw	r18, r28
     7de:	2b 5f       	subi	r18, 0xFB	; 251
     7e0:	3f 4f       	sbci	r19, 0xFF	; 255
     7e2:	79 01       	movw	r14, r18
     7e4:	8e 01       	movw	r16, r28
     7e6:	0d 5f       	subi	r16, 0xFD	; 253
     7e8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ea:	24 50       	subi	r18, 0x04	; 4
     7ec:	31 09       	sbc	r19, r1
     7ee:	ae 01       	movw	r20, r28
		#ifdef GYRO
			#ifdef CALIBERATED_DATA
				accX;
				accY;
				accZ;
				grX;
     7f0:	45 5f       	subi	r20, 0xF5	; 245
     7f2:	5f 4f       	sbci	r21, 0xFF	; 255
     7f4:	be 01       	movw	r22, r28
     7f6:	67 5f       	subi	r22, 0xF7	; 247
     7f8:	7f 4f       	sbci	r23, 0xFF	; 255
     7fa:	ce 01       	movw	r24, r28
     7fc:	07 96       	adiw	r24, 0x07	; 7
				grY;
     7fe:	8b d3       	rcall	.+1814   	; 0xf16 <mpu6050_getRawData>
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	9a 81       	ldd	r25, Y+2	; 0x02
     804:	4f a9       	ldd	r20, Y+55	; 0x37
     806:	58 ad       	ldd	r21, Y+56	; 0x38
     808:	84 1b       	sub	r24, r20
     80a:	95 0b       	sbc	r25, r21
				grZ;
     80c:	9a 83       	std	Y+2, r25	; 0x02
     80e:	89 83       	std	Y+1, r24	; 0x01
     810:	8b 81       	ldd	r24, Y+3	; 0x03
     812:	9c 81       	ldd	r25, Y+4	; 0x04
     814:	29 ad       	ldd	r18, Y+57	; 0x39
     816:	3a ad       	ldd	r19, Y+58	; 0x3a
     818:	82 1b       	sub	r24, r18
			printSI("ay=",accel_y);
			printSI("az=",accel_z);
			/*--------end------*/			
		#else
			
			double dt = ((double)(micros() - timer1))/1000000;
     81a:	93 0b       	sbc	r25, r19
     81c:	9c 83       	std	Y+4, r25	; 0x04
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	9e 81       	ldd	r25, Y+6	; 0x06
     824:	4b ad       	ldd	r20, Y+59	; 0x3b
     826:	5c ad       	ldd	r21, Y+60	; 0x3c
     828:	84 1b       	sub	r24, r20
     82a:	95 0b       	sbc	r25, r21
     82c:	9e 83       	std	Y+6, r25	; 0x06
     82e:	8d 83       	std	Y+5, r24	; 0x05
     830:	0d d4       	rcall	.+2074   	; 0x104c <micros>
     832:	2b a9       	ldd	r18, Y+51	; 0x33
     834:	3c a9       	ldd	r19, Y+52	; 0x34
     836:	4d a9       	ldd	r20, Y+53	; 0x35
     838:	5e a9       	ldd	r21, Y+54	; 0x36
     83a:	62 1b       	sub	r22, r18
     83c:	73 0b       	sbc	r23, r19
     83e:	84 0b       	sbc	r24, r20
			timer1=micros();
     840:	95 0b       	sbc	r25, r21
     842:	50 d7       	rcall	.+3744   	; 0x16e4 <__floatunsisf>
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	34 e2       	ldi	r19, 0x24	; 36
     848:	44 e7       	ldi	r20, 0x74	; 116
     84a:	59 e4       	ldi	r21, 0x49	; 73
			double gyroXrate = gyro_x/65.5;// deg/s 
			double gyroYrate = gyro_y/65.5;// deg/s
     84c:	b2 d6       	rcall	.+3428   	; 0x15b2 <__divsf3>
     84e:	6f a3       	std	Y+39, r22	; 0x27
     850:	78 a7       	std	Y+40, r23	; 0x28
     852:	89 a7       	std	Y+41, r24	; 0x29
     854:	9a a7       	std	Y+42, r25	; 0x2a
     856:	fa d3       	rcall	.+2036   	; 0x104c <micros>
     858:	6b ab       	std	Y+51, r22	; 0x33
     85a:	7c ab       	std	Y+52, r23	; 0x34
     85c:	8d ab       	std	Y+53, r24	; 0x35
     85e:	9e ab       	std	Y+54, r25	; 0x36
     860:	6b 81       	ldd	r22, Y+3	; 0x03
     862:	7c 81       	ldd	r23, Y+4	; 0x04
     864:	07 2e       	mov	r0, r23
     866:	00 0c       	add	r0, r0
     868:	88 0b       	sbc	r24, r24
     86a:	99 0b       	sbc	r25, r25
			if (!loop_bool) {
     86c:	3d d7       	rcall	.+3706   	; 0x16e8 <__floatsisf>
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	43 e8       	ldi	r20, 0x83	; 131
     874:	52 e4       	ldi	r21, 0x42	; 66
				angle_pitch += gyroXrate*dt; //Calculate the traveled pitch angle and add this to the angle_pitch variable
     876:	9d d6       	rcall	.+3386   	; 0x15b2 <__divsf3>
     878:	6f a7       	std	Y+47, r22	; 0x2f
     87a:	78 ab       	std	Y+48, r23	; 0x30
     87c:	89 ab       	std	Y+49, r24	; 0x31
     87e:	9a ab       	std	Y+50, r25	; 0x32
     880:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <loop_bool>
     884:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <loop_bool+0x1>
     888:	89 2b       	or	r24, r25
     88a:	99 f5       	brne	.+102    	; 0x8f2 <main+0x264>
     88c:	69 81       	ldd	r22, Y+1	; 0x01
     88e:	7a 81       	ldd	r23, Y+2	; 0x02
     890:	07 2e       	mov	r0, r23
     892:	00 0c       	add	r0, r0
     894:	88 0b       	sbc	r24, r24
     896:	99 0b       	sbc	r25, r25
     898:	27 d7       	rcall	.+3662   	; 0x16e8 <__floatsisf>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	43 e8       	ldi	r20, 0x83	; 131
     8a0:	52 e4       	ldi	r21, 0x42	; 66
     8a2:	87 d6       	rcall	.+3342   	; 0x15b2 <__divsf3>
     8a4:	2f a1       	ldd	r18, Y+39	; 0x27
     8a6:	38 a5       	ldd	r19, Y+40	; 0x28
     8a8:	49 a5       	ldd	r20, Y+41	; 0x29
     8aa:	5a a5       	ldd	r21, Y+42	; 0x2a
     8ac:	0e 94 80 0c 	call	0x1900	; 0x1900 <__mulsf3>
     8b0:	9b 01       	movw	r18, r22
				angle_roll += gyroYrate*dt;  //Calculate the traveled roll angle and add this to the angle_roll variable			
     8b2:	ac 01       	movw	r20, r24
     8b4:	6b a1       	ldd	r22, Y+35	; 0x23
     8b6:	7c a1       	ldd	r23, Y+36	; 0x24
     8b8:	8d a1       	ldd	r24, Y+37	; 0x25
     8ba:	9e a1       	ldd	r25, Y+38	; 0x26
     8bc:	99 d5       	rcall	.+2866   	; 0x13f0 <__addsf3>
     8be:	6b a3       	std	Y+35, r22	; 0x23
     8c0:	7c a3       	std	Y+36, r23	; 0x24
     8c2:	8d a3       	std	Y+37, r24	; 0x25
     8c4:	9e a3       	std	Y+38, r25	; 0x26
     8c6:	2f a5       	ldd	r18, Y+47	; 0x2f
     8c8:	38 a9       	ldd	r19, Y+48	; 0x30
     8ca:	49 a9       	ldd	r20, Y+49	; 0x31
     8cc:	5a a9       	ldd	r21, Y+50	; 0x32
     8ce:	6f a1       	ldd	r22, Y+39	; 0x27
     8d0:	78 a5       	ldd	r23, Y+40	; 0x28
     8d2:	89 a5       	ldd	r24, Y+41	; 0x29
     8d4:	9a a5       	ldd	r25, Y+42	; 0x2a
     8d6:	0e 94 80 0c 	call	0x1900	; 0x1900 <__mulsf3>
			}
			else loop_bool=false;	
     8da:	9b 01       	movw	r18, r22
     8dc:	ac 01       	movw	r20, r24
     8de:	6f 8d       	ldd	r22, Y+31	; 0x1f
			angle_pitch += angle_roll * sin(gyro_z * (dt/65.5*pi/180));               //If the IMU has yawed transfer the roll angle to the pitch angel
     8e0:	78 a1       	ldd	r23, Y+32	; 0x20
     8e2:	89 a1       	ldd	r24, Y+33	; 0x21
     8e4:	9a a1       	ldd	r25, Y+34	; 0x22
     8e6:	84 d5       	rcall	.+2824   	; 0x13f0 <__addsf3>
     8e8:	6f 8f       	std	Y+31, r22	; 0x1f
     8ea:	78 a3       	std	Y+32, r23	; 0x20
     8ec:	89 a3       	std	Y+33, r24	; 0x21
     8ee:	9a a3       	std	Y+34, r25	; 0x22
     8f0:	04 c0       	rjmp	.+8      	; 0x8fa <main+0x26c>
     8f2:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <loop_bool+0x1>
     8f6:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <loop_bool>
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	43 e8       	ldi	r20, 0x83	; 131
     900:	52 e4       	ldi	r21, 0x42	; 66
     902:	6f a1       	ldd	r22, Y+39	; 0x27
     904:	78 a5       	ldd	r23, Y+40	; 0x28
     906:	89 a5       	ldd	r24, Y+41	; 0x29
     908:	9a a5       	ldd	r25, Y+42	; 0x2a
     90a:	53 d6       	rcall	.+3238   	; 0x15b2 <__divsf3>
     90c:	2b ed       	ldi	r18, 0xDB	; 219
     90e:	3f e0       	ldi	r19, 0x0F	; 15
     910:	49 e4       	ldi	r20, 0x49	; 73
     912:	50 e4       	ldi	r21, 0x40	; 64
     914:	f5 d7       	rcall	.+4074   	; 0x1900 <__mulsf3>
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	44 e3       	ldi	r20, 0x34	; 52
     91c:	53 e4       	ldi	r21, 0x43	; 67
     91e:	49 d6       	rcall	.+3218   	; 0x15b2 <__divsf3>
     920:	6b 01       	movw	r12, r22
     922:	7c 01       	movw	r14, r24
     924:	6d 81       	ldd	r22, Y+5	; 0x05
     926:	7e 81       	ldd	r23, Y+6	; 0x06
     928:	07 2e       	mov	r0, r23
     92a:	00 0c       	add	r0, r0
     92c:	88 0b       	sbc	r24, r24
     92e:	99 0b       	sbc	r25, r25
     930:	db d6       	rcall	.+3510   	; 0x16e8 <__floatsisf>
     932:	9b 01       	movw	r18, r22
     934:	ac 01       	movw	r20, r24
     936:	c7 01       	movw	r24, r14
     938:	b6 01       	movw	r22, r12
     93a:	e2 d7       	rcall	.+4036   	; 0x1900 <__mulsf3>
     93c:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <sin>
     940:	6b 01       	movw	r12, r22
     942:	7c 01       	movw	r14, r24
     944:	9b 01       	movw	r18, r22
     946:	ac 01       	movw	r20, r24
     948:	6f 8d       	ldd	r22, Y+31	; 0x1f
     94a:	78 a1       	ldd	r23, Y+32	; 0x20
     94c:	89 a1       	ldd	r24, Y+33	; 0x21
     94e:	9a a1       	ldd	r25, Y+34	; 0x22
			angle_roll -= angle_pitch * sin(gyro_z * (dt/65.5*pi/180));               //If the IMU has yawed transfer the pitch angle to the roll angel
     950:	d7 d7       	rcall	.+4014   	; 0x1900 <__mulsf3>
     952:	9b 01       	movw	r18, r22
     954:	ac 01       	movw	r20, r24
     956:	6b a1       	ldd	r22, Y+35	; 0x23
     958:	7c a1       	ldd	r23, Y+36	; 0x24
     95a:	8d a1       	ldd	r24, Y+37	; 0x25
     95c:	9e a1       	ldd	r25, Y+38	; 0x26
     95e:	48 d5       	rcall	.+2704   	; 0x13f0 <__addsf3>
     960:	6b a3       	std	Y+35, r22	; 0x23
     962:	7c a3       	std	Y+36, r23	; 0x24
     964:	8d a3       	std	Y+37, r24	; 0x25
     966:	9e a3       	std	Y+38, r25	; 0x26
     968:	9b 01       	movw	r18, r22
     96a:	ac 01       	movw	r20, r24
     96c:	c7 01       	movw	r24, r14
     96e:	b6 01       	movw	r22, r12
     970:	c7 d7       	rcall	.+3982   	; 0x1900 <__mulsf3>
			
			double temporar_accel_x=accel_x/100;
     972:	9b 01       	movw	r18, r22
     974:	ac 01       	movw	r20, r24
     976:	6f 8d       	ldd	r22, Y+31	; 0x1f
     978:	78 a1       	ldd	r23, Y+32	; 0x20
     97a:	89 a1       	ldd	r24, Y+33	; 0x21
     97c:	9a a1       	ldd	r25, Y+34	; 0x22
     97e:	37 d5       	rcall	.+2670   	; 0x13ee <__subsf3>
     980:	6f 8f       	std	Y+31, r22	; 0x1f
     982:	78 a3       	std	Y+32, r23	; 0x20
     984:	89 a3       	std	Y+33, r24	; 0x21
     986:	9a a3       	std	Y+34, r25	; 0x22
     988:	2f 80       	ldd	r2, Y+7	; 0x07
     98a:	38 84       	ldd	r3, Y+8	; 0x08
     98c:	c1 01       	movw	r24, r2
     98e:	64 e6       	ldi	r22, 0x64	; 100
			double temporar_accel_y=accel_y/100;
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__divmodhi4>
     996:	07 2e       	mov	r0, r23
     998:	00 0c       	add	r0, r0
     99a:	88 0b       	sbc	r24, r24
     99c:	99 0b       	sbc	r25, r25
     99e:	a4 d6       	rcall	.+3400   	; 0x16e8 <__floatsisf>
     9a0:	6b 8f       	std	Y+27, r22	; 0x1b
     9a2:	7c 8f       	std	Y+28, r23	; 0x1c
     9a4:	8d 8f       	std	Y+29, r24	; 0x1d
     9a6:	9e 8f       	std	Y+30, r25	; 0x1e
     9a8:	49 84       	ldd	r4, Y+9	; 0x09
     9aa:	5a 84       	ldd	r5, Y+10	; 0x0a
			double temporar_accel_z=accel_z/100;	
     9ac:	c2 01       	movw	r24, r4
     9ae:	64 e6       	ldi	r22, 0x64	; 100
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__divmodhi4>
     9b6:	07 2e       	mov	r0, r23
     9b8:	00 0c       	add	r0, r0
     9ba:	88 0b       	sbc	r24, r24
     9bc:	99 0b       	sbc	r25, r25
     9be:	94 d6       	rcall	.+3368   	; 0x16e8 <__floatsisf>
     9c0:	4b 01       	movw	r8, r22
     9c2:	5c 01       	movw	r10, r24
     9c4:	0b 85       	ldd	r16, Y+11	; 0x0b
			acc_total_vector = sqrt((temporar_accel_x*temporar_accel_x)+(temporar_accel_y*temporar_accel_y)+(temporar_accel_z*temporar_accel_z));  //Calculate the total accelerometer vector
     9c6:	1c 85       	ldd	r17, Y+12	; 0x0c
     9c8:	c8 01       	movw	r24, r16
     9ca:	64 e6       	ldi	r22, 0x64	; 100
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__divmodhi4>
     9d2:	07 2e       	mov	r0, r23
     9d4:	00 0c       	add	r0, r0
     9d6:	88 0b       	sbc	r24, r24
     9d8:	99 0b       	sbc	r25, r25
     9da:	86 d6       	rcall	.+3340   	; 0x16e8 <__floatsisf>
     9dc:	6b 01       	movw	r12, r22
     9de:	7c 01       	movw	r14, r24
     9e0:	2b 8d       	ldd	r18, Y+27	; 0x1b
     9e2:	3c 8d       	ldd	r19, Y+28	; 0x1c
     9e4:	4d 8d       	ldd	r20, Y+29	; 0x1d
     9e6:	5e 8d       	ldd	r21, Y+30	; 0x1e
     9e8:	ca 01       	movw	r24, r20
     9ea:	b9 01       	movw	r22, r18
     9ec:	89 d7       	rcall	.+3858   	; 0x1900 <__mulsf3>
     9ee:	6b a7       	std	Y+43, r22	; 0x2b
     9f0:	7c a7       	std	Y+44, r23	; 0x2c
     9f2:	8d a7       	std	Y+45, r24	; 0x2d
     9f4:	9e a7       	std	Y+46, r25	; 0x2e
     9f6:	a5 01       	movw	r20, r10
     9f8:	94 01       	movw	r18, r8
     9fa:	c5 01       	movw	r24, r10
     9fc:	b4 01       	movw	r22, r8
     9fe:	80 d7       	rcall	.+3840   	; 0x1900 <__mulsf3>
     a00:	9b 01       	movw	r18, r22
     a02:	ac 01       	movw	r20, r24
     a04:	6b a5       	ldd	r22, Y+43	; 0x2b
     a06:	7c a5       	ldd	r23, Y+44	; 0x2c
     a08:	8d a5       	ldd	r24, Y+45	; 0x2d
     a0a:	9e a5       	ldd	r25, Y+46	; 0x2e
     a0c:	f1 d4       	rcall	.+2530   	; 0x13f0 <__addsf3>
     a0e:	6b a7       	std	Y+43, r22	; 0x2b
     a10:	7c a7       	std	Y+44, r23	; 0x2c
     a12:	8d a7       	std	Y+45, r24	; 0x2d
     a14:	9e a7       	std	Y+46, r25	; 0x2e
     a16:	2b 8d       	ldd	r18, Y+27	; 0x1b
     a18:	3c 8d       	ldd	r19, Y+28	; 0x1c
     a1a:	4d 8d       	ldd	r20, Y+29	; 0x1d
     a1c:	5e 8d       	ldd	r21, Y+30	; 0x1e
     a1e:	ca 01       	movw	r24, r20
     a20:	b9 01       	movw	r22, r18
     a22:	6e d7       	rcall	.+3804   	; 0x1900 <__mulsf3>
     a24:	6b 8f       	std	Y+27, r22	; 0x1b
     a26:	7c 8f       	std	Y+28, r23	; 0x1c
     a28:	8d 8f       	std	Y+29, r24	; 0x1d
     a2a:	9e 8f       	std	Y+30, r25	; 0x1e
     a2c:	a5 01       	movw	r20, r10
     a2e:	94 01       	movw	r18, r8
     a30:	c5 01       	movw	r24, r10
     a32:	b4 01       	movw	r22, r8
     a34:	65 d7       	rcall	.+3786   	; 0x1900 <__mulsf3>
     a36:	9b 01       	movw	r18, r22
     a38:	ac 01       	movw	r20, r24
     a3a:	6b 8d       	ldd	r22, Y+27	; 0x1b
     a3c:	7c 8d       	ldd	r23, Y+28	; 0x1c
     a3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a40:	9e 8d       	ldd	r25, Y+30	; 0x1e
     a42:	d6 d4       	rcall	.+2476   	; 0x13f0 <__addsf3>
			acc_total_vector*=100;
		    angle_pitch_acc = asin((double)accel_y/acc_total_vector)* 57.296;       //Calculate the pitch angle
			angle_roll_acc = asin((double)accel_x/acc_total_vector)* -57.296;       //Calculate the roll angle
     a44:	4b 01       	movw	r8, r22
     a46:	5c 01       	movw	r10, r24
     a48:	a7 01       	movw	r20, r14
     a4a:	96 01       	movw	r18, r12
     a4c:	c7 01       	movw	r24, r14
     a4e:	b6 01       	movw	r22, r12
     a50:	57 d7       	rcall	.+3758   	; 0x1900 <__mulsf3>
     a52:	9b 01       	movw	r18, r22
     a54:	ac 01       	movw	r20, r24
     a56:	c5 01       	movw	r24, r10
     a58:	b4 01       	movw	r22, r8
     a5a:	ca d4       	rcall	.+2452   	; 0x13f0 <__addsf3>
     a5c:	be d7       	rcall	.+3964   	; 0x19da <sqrt>
     a5e:	4b 01       	movw	r8, r22
     a60:	5c 01       	movw	r10, r24
     a62:	b1 01       	movw	r22, r2
     a64:	33 0c       	add	r3, r3
     a66:	88 0b       	sbc	r24, r24
     a68:	99 0b       	sbc	r25, r25
     a6a:	3e d6       	rcall	.+3196   	; 0x16e8 <__floatsisf>
				
			//kalman
			double roll  = atan2(accel_y, accel_z) * RAD_TO_DEG;
     a6c:	6b 01       	movw	r12, r22
     a6e:	7c 01       	movw	r14, r24
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	48 ec       	ldi	r20, 0xC8	; 200
     a76:	52 e4       	ldi	r21, 0x42	; 66
     a78:	c5 01       	movw	r24, r10
     a7a:	b4 01       	movw	r22, r8
     a7c:	41 d7       	rcall	.+3714   	; 0x1900 <__mulsf3>
     a7e:	9b 01       	movw	r18, r22
     a80:	ac 01       	movw	r20, r24
     a82:	c7 01       	movw	r24, r14
     a84:	b6 01       	movw	r22, r12
     a86:	95 d5       	rcall	.+2858   	; 0x15b2 <__divsf3>
     a88:	17 d5       	rcall	.+2606   	; 0x14b8 <asin>
     a8a:	4b 01       	movw	r8, r22
			float kalman_angle=getAngle(roll,gyroYrate,dt);
     a8c:	5c 01       	movw	r10, r24
     a8e:	b8 01       	movw	r22, r16
     a90:	11 0f       	add	r17, r17
     a92:	88 0b       	sbc	r24, r24
     a94:	99 0b       	sbc	r25, r25
     a96:	28 d6       	rcall	.+3152   	; 0x16e8 <__floatsisf>
     a98:	6b 01       	movw	r12, r22
     a9a:	7c 01       	movw	r14, r24
     a9c:	b2 01       	movw	r22, r4
     a9e:	55 0c       	add	r5, r5
     aa0:	88 0b       	sbc	r24, r24
     aa2:	99 0b       	sbc	r25, r25
			//angle_roll_kalman+=pop*kalman_angle;	
			
			int16_t reg;
			reg=kalman_angle;
			printSI("kalman_angle=",reg);
     aa4:	21 d6       	rcall	.+3138   	; 0x16e8 <__floatsisf>
     aa6:	a7 01       	movw	r20, r14
     aa8:	96 01       	movw	r18, r12
     aaa:	2c d5       	rcall	.+2648   	; 0x1504 <atan2>
     aac:	25 e3       	ldi	r18, 0x35	; 53
     aae:	3a ef       	ldi	r19, 0xFA	; 250
			reg=angle_roll;
			printSI("gyroY_angle=",reg);
     ab0:	4e e8       	ldi	r20, 0x8E	; 142
     ab2:	5c e3       	ldi	r21, 0x3C	; 60
     ab4:	25 d7       	rcall	.+3658   	; 0x1900 <__mulsf3>
     ab6:	ef a0       	ldd	r14, Y+39	; 0x27
     ab8:	f8 a4       	ldd	r15, Y+40	; 0x28
     aba:	09 a5       	ldd	r16, Y+41	; 0x29
     abc:	1a a5       	ldd	r17, Y+42	; 0x2a
     abe:	2f a5       	ldd	r18, Y+47	; 0x2f
     ac0:	38 a9       	ldd	r19, Y+48	; 0x30
     ac2:	49 a9       	ldd	r20, Y+49	; 0x31
				
			double xff=angle_roll_acc;
			double final_angleY=(angle_roll*0.996)+(xff*0.004);
     ac4:	5a a9       	ldd	r21, Y+50	; 0x32
     ac6:	01 dc       	rcall	.-2046   	; 0x2ca <getAngle>
     ac8:	dc d5       	rcall	.+3000   	; 0x1682 <__fixsfsi>
     aca:	85 e7       	ldi	r24, 0x75	; 117
     acc:	93 e0       	ldi	r25, 0x03	; 3
     ace:	71 d4       	rcall	.+2274   	; 0x13b2 <printSI>
     ad0:	6f 8d       	ldd	r22, Y+31	; 0x1f
     ad2:	78 a1       	ldd	r23, Y+32	; 0x20
     ad4:	89 a1       	ldd	r24, Y+33	; 0x21
     ad6:	9a a1       	ldd	r25, Y+34	; 0x22
     ad8:	d4 d5       	rcall	.+2984   	; 0x1682 <__fixsfsi>
     ada:	83 e8       	ldi	r24, 0x83	; 131
     adc:	93 e0       	ldi	r25, 0x03	; 3
     ade:	69 d4       	rcall	.+2258   	; 0x13b2 <printSI>
     ae0:	2b e1       	ldi	r18, 0x1B	; 27
     ae2:	3f e2       	ldi	r19, 0x2F	; 47
     ae4:	45 e6       	ldi	r20, 0x65	; 101
     ae6:	52 ec       	ldi	r21, 0xC2	; 194
     ae8:	c5 01       	movw	r24, r10
     aea:	b4 01       	movw	r22, r8
     aec:	09 d7       	rcall	.+3602   	; 0x1900 <__mulsf3>
     aee:	2f e6       	ldi	r18, 0x6F	; 111
     af0:	32 e1       	ldi	r19, 0x12	; 18
     af2:	43 e8       	ldi	r20, 0x83	; 131
     af4:	5b e3       	ldi	r21, 0x3B	; 59
     af6:	04 d7       	rcall	.+3592   	; 0x1900 <__mulsf3>
     af8:	6b 01       	movw	r12, r22
     afa:	7c 01       	movw	r14, r24
     afc:	2b ed       	ldi	r18, 0xDB	; 219
     afe:	39 ef       	ldi	r19, 0xF9	; 249
			reg=final_angleY;
     b00:	4e e7       	ldi	r20, 0x7E	; 126
     b02:	5f e3       	ldi	r21, 0x3F	; 63
     b04:	6f 8d       	ldd	r22, Y+31	; 0x1f
     b06:	78 a1       	ldd	r23, Y+32	; 0x20
			printSI("final_angleY=",reg);	
     b08:	89 a1       	ldd	r24, Y+33	; 0x21
     b0a:	9a a1       	ldd	r25, Y+34	; 0x22
     b0c:	f9 d6       	rcall	.+3570   	; 0x1900 <__mulsf3>
     b0e:	9b 01       	movw	r18, r22
			#ifdef DRV8313
				int absoulute_y=abs(final_angleY);
     b10:	ac 01       	movw	r20, r24
     b12:	c7 01       	movw	r24, r14
     b14:	b6 01       	movw	r22, r12
     b16:	6c d4       	rcall	.+2264   	; 0x13f0 <__addsf3>
     b18:	4b 01       	movw	r8, r22
     b1a:	5c 01       	movw	r10, r24
     b1c:	b2 d5       	rcall	.+2916   	; 0x1682 <__fixsfsi>
     b1e:	6b 01       	movw	r12, r22
				uint16_t learing_rate=500;				
				uint16_t local_motor_delay=(32735-(absoulute_y*learing_rate));
     b20:	7c 01       	movw	r14, r24
     b22:	80 e9       	ldi	r24, 0x90	; 144
     b24:	93 e0       	ldi	r25, 0x03	; 3
     b26:	45 d4       	rcall	.+2186   	; 0x13b2 <printSI>
     b28:	c6 01       	movw	r24, r12
     b2a:	99 23       	and	r25, r25
     b2c:	24 f4       	brge	.+8      	; 0xb36 <main+0x4a8>
     b2e:	88 27       	eor	r24, r24
     b30:	99 27       	eor	r25, r25
     b32:	8c 19       	sub	r24, r12
     b34:	9d 09       	sbc	r25, r13
				if (local_motor_delay>2000)
     b36:	8c 01       	movw	r16, r24
     b38:	44 ef       	ldi	r20, 0xF4	; 244
     b3a:	51 e0       	ldi	r21, 0x01	; 1
     b3c:	84 9f       	mul	r24, r20
				{
					pwm_delay=local_motor_delay;
     b3e:	90 01       	movw	r18, r0
     b40:	85 9f       	mul	r24, r21
     b42:	30 0d       	add	r19, r0
     b44:	94 9f       	mul	r25, r20
				}
				int16_t reg_ = local_motor_delay;
				printSI("ocr=",reg_);
     b46:	30 0d       	add	r19, r0
     b48:	11 24       	eor	r1, r1
     b4a:	b3 01       	movw	r22, r6
     b4c:	62 1b       	sub	r22, r18
				if ((absoulute_y<=0.8) || (final_angleY >90))
     b4e:	73 0b       	sbc	r23, r19
     b50:	61 3d       	cpi	r22, 0xD1	; 209
     b52:	57 e0       	ldi	r21, 0x07	; 7
     b54:	75 07       	cpc	r23, r21
     b56:	20 f0       	brcs	.+8      	; 0xb60 <main+0x4d2>
     b58:	70 93 00 04 	sts	0x0400, r23	; 0x800400 <pwm_delay+0x1>
     b5c:	60 93 ff 03 	sts	0x03FF, r22	; 0x8003ff <pwm_delay>
     b60:	8e e9       	ldi	r24, 0x9E	; 158
     b62:	93 e0       	ldi	r25, 0x03	; 3
     b64:	26 d4       	rcall	.+2124   	; 0x13b2 <printSI>
     b66:	b8 01       	movw	r22, r16
     b68:	11 0f       	add	r17, r17
     b6a:	88 0b       	sbc	r24, r24
     b6c:	99 0b       	sbc	r25, r25
     b6e:	bc d5       	rcall	.+2936   	; 0x16e8 <__floatsisf>
     b70:	2d ec       	ldi	r18, 0xCD	; 205
     b72:	3c ec       	ldi	r19, 0xCC	; 204
     b74:	4c e4       	ldi	r20, 0x4C	; 76
     b76:	5f e3       	ldi	r21, 0x3F	; 63
     b78:	18 d5       	rcall	.+2608   	; 0x15aa <__cmpsf2>
     b7a:	18 16       	cp	r1, r24
				{
					incr=0;
     b7c:	4c f4       	brge	.+18     	; 0xb90 <main+0x502>
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	44 eb       	ldi	r20, 0xB4	; 180
					printf("\n");	
     b84:	52 e4       	ldi	r21, 0x42	; 66
     b86:	c5 01       	movw	r24, r10
     b88:	b4 01       	movw	r22, r8
     b8a:	af d6       	rcall	.+3422   	; 0x18ea <__gesf2>
				}
				else 
					if (final_angleY>0.8)
     b8c:	18 16       	cp	r1, r24
     b8e:	4c f4       	brge	.+18     	; 0xba2 <main+0x514>
     b90:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <incr+0x1>
     b94:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <incr>
     b98:	8a e0       	ldi	r24, 0x0A	; 10
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <putchar>
					{
						cli();
						incr=1;
     ba0:	1d ce       	rjmp	.-966    	; 0x7dc <main+0x14e>
     ba2:	2d ec       	ldi	r18, 0xCD	; 205
     ba4:	3c ec       	ldi	r19, 0xCC	; 204
     ba6:	4c e4       	ldi	r20, 0x4C	; 76
     ba8:	5f e3       	ldi	r21, 0x3F	; 63
     baa:	c5 01       	movw	r24, r10
						printf(" ");
     bac:	b4 01       	movw	r22, r8
     bae:	9d d6       	rcall	.+3386   	; 0x18ea <__gesf2>
     bb0:	18 16       	cp	r1, r24
     bb2:	f4 f4       	brge	.+60     	; 0xbf0 <main+0x562>
						int16_t val=pwmSin[U_step];
     bb4:	f8 94       	cli
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <incr+0x1>
     bbe:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <incr>
     bc2:	80 e2       	ldi	r24, 0x20	; 32
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <putchar>
						print16(&val);
     bca:	e0 91 f4 03 	lds	r30, 0x03F4	; 0x8003f4 <__data_end>
     bce:	f0 91 f5 03 	lds	r31, 0x03F5	; 0x8003f5 <__data_end+0x1>
						printf(" yes\n");
     bd2:	ea 5f       	subi	r30, 0xFA	; 250
     bd4:	fd 4f       	sbci	r31, 0xFD	; 253
     bd6:	80 81       	ld	r24, Z
						
						sei();
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	9a 8f       	std	Y+26, r25	; 0x1a
					}
					else
					{	cli();
     bdc:	89 8f       	std	Y+25, r24	; 0x19
						incr=-1;
     bde:	ce 01       	movw	r24, r28
     be0:	49 96       	adiw	r24, 0x19	; 25
     be2:	87 d3       	rcall	.+1806   	; 0x12f2 <print16>
     be4:	83 ea       	ldi	r24, 0xA3	; 163
     be6:	93 e0       	ldi	r25, 0x03	; 3
     be8:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <puts>
						printf(" ");
     bec:	78 94       	sei
     bee:	f6 cd       	rjmp	.-1044   	; 0x7dc <main+0x14e>
     bf0:	f8 94       	cli
						int16_t val=pwmSin[U_step];
     bf2:	2f ef       	ldi	r18, 0xFF	; 255
     bf4:	3f ef       	ldi	r19, 0xFF	; 255
     bf6:	30 93 04 04 	sts	0x0404, r19	; 0x800404 <incr+0x1>
     bfa:	20 93 03 04 	sts	0x0403, r18	; 0x800403 <incr>
     bfe:	80 e2       	ldi	r24, 0x20	; 32
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <putchar>
						print16(&val);
     c06:	e0 91 f4 03 	lds	r30, 0x03F4	; 0x8003f4 <__data_end>
     c0a:	f0 91 f5 03 	lds	r31, 0x03F5	; 0x8003f5 <__data_end+0x1>
						printf(" no\n");
     c0e:	ea 5f       	subi	r30, 0xFA	; 250
     c10:	fd 4f       	sbci	r31, 0xFD	; 253
     c12:	80 81       	ld	r24, Z
     c14:	90 e0       	ldi	r25, 0x00	; 0
						sei();
     c16:	9a 8f       	std	Y+26, r25	; 0x1a
     c18:	89 8f       	std	Y+25, r24	; 0x19
     c1a:	ce 01       	movw	r24, r28
     c1c:	49 96       	adiw	r24, 0x19	; 25
     c1e:	69 d3       	rcall	.+1746   	; 0x12f2 <print16>
     c20:	88 ea       	ldi	r24, 0xA8	; 168
     c22:	93 e0       	ldi	r25, 0x03	; 3
     c24:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <puts>
     c28:	78 94       	sei
     c2a:	d8 cd       	rjmp	.-1104   	; 0x7dc <main+0x14e>

00000c2c <mpu6050_readByte>:
	printf("  ");
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/
}
     c2c:	cf 93       	push	r28
     c2e:	c8 2f       	mov	r28, r24
     c30:	80 ed       	ldi	r24, 0xD0	; 208
     c32:	a9 d2       	rcall	.+1362   	; 0x1186 <i2c_start>
     c34:	8c 2f       	mov	r24, r28
     c36:	fd d2       	rcall	.+1530   	; 0x1232 <i2c_write>
     c38:	ec d2       	rcall	.+1496   	; 0x1212 <i2c_stop>
     c3a:	81 ed       	ldi	r24, 0xD1	; 209
     c3c:	a4 d2       	rcall	.+1352   	; 0x1186 <i2c_start>
     c3e:	34 d3       	rcall	.+1640   	; 0x12a8 <i2c_readNak>
     c40:	c8 2f       	mov	r28, r24
     c42:	e7 d2       	rcall	.+1486   	; 0x1212 <i2c_stop>
     c44:	8c 2f       	mov	r24, r28
     c46:	cf 91       	pop	r28
     c48:	08 95       	ret

00000c4a <mpu6050_read_gyroX>:
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	83 e4       	ldi	r24, 0x43	; 67
     c50:	ed df       	rcall	.-38     	; 0xc2c <mpu6050_readByte>
     c52:	c8 2f       	mov	r28, r24
     c54:	d0 e0       	ldi	r29, 0x00	; 0
     c56:	dc 2f       	mov	r29, r28
     c58:	cc 27       	eor	r28, r28
     c5a:	84 e4       	ldi	r24, 0x44	; 68
     c5c:	e7 df       	rcall	.-50     	; 0xc2c <mpu6050_readByte>
     c5e:	9e 01       	movw	r18, r28
     c60:	28 2b       	or	r18, r24
     c62:	c9 01       	movw	r24, r18
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	08 95       	ret

00000c6a <mpu6050_read_gyroY>:
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	85 e4       	ldi	r24, 0x45	; 69
     c70:	dd df       	rcall	.-70     	; 0xc2c <mpu6050_readByte>
     c72:	c8 2f       	mov	r28, r24
     c74:	d0 e0       	ldi	r29, 0x00	; 0
     c76:	dc 2f       	mov	r29, r28
     c78:	cc 27       	eor	r28, r28
     c7a:	86 e4       	ldi	r24, 0x46	; 70
     c7c:	d7 df       	rcall	.-82     	; 0xc2c <mpu6050_readByte>
     c7e:	9e 01       	movw	r18, r28
     c80:	28 2b       	or	r18, r24
     c82:	c9 01       	movw	r24, r18
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	08 95       	ret

00000c8a <mpu6050_read_gyroZ>:
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	87 e4       	ldi	r24, 0x47	; 71
     c90:	cd df       	rcall	.-102    	; 0xc2c <mpu6050_readByte>
     c92:	c8 2f       	mov	r28, r24
     c94:	d0 e0       	ldi	r29, 0x00	; 0
     c96:	dc 2f       	mov	r29, r28
     c98:	cc 27       	eor	r28, r28
     c9a:	88 e4       	ldi	r24, 0x48	; 72
     c9c:	c7 df       	rcall	.-114    	; 0xc2c <mpu6050_readByte>
     c9e:	9e 01       	movw	r18, r28
     ca0:	28 2b       	or	r18, r24
     ca2:	c9 01       	movw	r24, r18
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	08 95       	ret

00000caa <mpu6050_calibrate_gyro>:
     caa:	cf 92       	push	r12
     cac:	df 92       	push	r13
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	6c 01       	movw	r12, r24
     cbc:	7b 01       	movw	r14, r22
     cbe:	8a 01       	movw	r16, r20
     cc0:	8c ea       	ldi	r24, 0xAC	; 172
     cc2:	93 e0       	ldi	r25, 0x03	; 3
     cc4:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <puts>
     cc8:	c8 ec       	ldi	r28, 0xC8	; 200
     cca:	d0 e0       	ldi	r29, 0x00	; 0
     ccc:	be df       	rcall	.-132    	; 0xc4a <mpu6050_read_gyroX>
     cce:	f6 01       	movw	r30, r12
     cd0:	40 81       	ld	r20, Z
     cd2:	51 81       	ldd	r21, Z+1	; 0x01
     cd4:	62 81       	ldd	r22, Z+2	; 0x02
     cd6:	73 81       	ldd	r23, Z+3	; 0x03
     cd8:	48 0f       	add	r20, r24
     cda:	59 1f       	adc	r21, r25
     cdc:	61 1d       	adc	r22, r1
     cde:	71 1d       	adc	r23, r1
     ce0:	40 83       	st	Z, r20
     ce2:	51 83       	std	Z+1, r21	; 0x01
     ce4:	62 83       	std	Z+2, r22	; 0x02
     ce6:	73 83       	std	Z+3, r23	; 0x03
     ce8:	c0 df       	rcall	.-128    	; 0xc6a <mpu6050_read_gyroY>
     cea:	f7 01       	movw	r30, r14
     cec:	40 81       	ld	r20, Z
     cee:	51 81       	ldd	r21, Z+1	; 0x01
     cf0:	62 81       	ldd	r22, Z+2	; 0x02
     cf2:	73 81       	ldd	r23, Z+3	; 0x03
     cf4:	48 0f       	add	r20, r24
     cf6:	59 1f       	adc	r21, r25
     cf8:	61 1d       	adc	r22, r1
     cfa:	71 1d       	adc	r23, r1
     cfc:	40 83       	st	Z, r20
     cfe:	51 83       	std	Z+1, r21	; 0x01
     d00:	62 83       	std	Z+2, r22	; 0x02
     d02:	73 83       	std	Z+3, r23	; 0x03
     d04:	c2 df       	rcall	.-124    	; 0xc8a <mpu6050_read_gyroZ>
     d06:	f8 01       	movw	r30, r16
     d08:	40 81       	ld	r20, Z
     d0a:	51 81       	ldd	r21, Z+1	; 0x01
     d0c:	62 81       	ldd	r22, Z+2	; 0x02
     d0e:	73 81       	ldd	r23, Z+3	; 0x03
     d10:	48 0f       	add	r20, r24
     d12:	59 1f       	adc	r21, r25
     d14:	61 1d       	adc	r22, r1
     d16:	71 1d       	adc	r23, r1
     d18:	40 83       	st	Z, r20
     d1a:	51 83       	std	Z+1, r21	; 0x01
     d1c:	62 83       	std	Z+2, r22	; 0x02
     d1e:	73 83       	std	Z+3, r23	; 0x03
     d20:	8f e3       	ldi	r24, 0x3F	; 63
     d22:	9f e1       	ldi	r25, 0x1F	; 31
     d24:	01 97       	sbiw	r24, 0x01	; 1
     d26:	f1 f7       	brne	.-4      	; 0xd24 <mpu6050_calibrate_gyro+0x7a>
     d28:	00 c0       	rjmp	.+0      	; 0xd2a <mpu6050_calibrate_gyro+0x80>
     d2a:	00 00       	nop
     d2c:	21 97       	sbiw	r28, 0x01	; 1
     d2e:	71 f6       	brne	.-100    	; 0xccc <mpu6050_calibrate_gyro+0x22>
     d30:	f6 01       	movw	r30, r12
     d32:	60 81       	ld	r22, Z
     d34:	71 81       	ldd	r23, Z+1	; 0x01
     d36:	82 81       	ldd	r24, Z+2	; 0x02
     d38:	93 81       	ldd	r25, Z+3	; 0x03
     d3a:	99 23       	and	r25, r25
     d3c:	ac f4       	brge	.+42     	; 0xd68 <mpu6050_calibrate_gyro+0xbe>
     d3e:	9b 01       	movw	r18, r22
     d40:	77 23       	and	r23, r23
     d42:	24 f4       	brge	.+8      	; 0xd4c <mpu6050_calibrate_gyro+0xa2>
     d44:	22 27       	eor	r18, r18
     d46:	33 27       	eor	r19, r19
     d48:	26 1b       	sub	r18, r22
     d4a:	37 0b       	sbc	r19, r23
     d4c:	c9 01       	movw	r24, r18
     d4e:	68 ec       	ldi	r22, 0xC8	; 200
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	d2 d6       	rcall	.+3492   	; 0x1af8 <__divmodhi4>
     d54:	cb 01       	movw	r24, r22
     d56:	77 0f       	add	r23, r23
     d58:	aa 0b       	sbc	r26, r26
     d5a:	bb 0b       	sbc	r27, r27
     d5c:	f6 01       	movw	r30, r12
     d5e:	80 83       	st	Z, r24
     d60:	91 83       	std	Z+1, r25	; 0x01
     d62:	a2 83       	std	Z+2, r26	; 0x02
     d64:	b3 83       	std	Z+3, r27	; 0x03
     d66:	0a c0       	rjmp	.+20     	; 0xd7c <mpu6050_calibrate_gyro+0xd2>
     d68:	28 ec       	ldi	r18, 0xC8	; 200
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e0       	ldi	r20, 0x00	; 0
     d6e:	50 e0       	ldi	r21, 0x00	; 0
     d70:	d6 d6       	rcall	.+3500   	; 0x1b1e <__divmodsi4>
     d72:	f6 01       	movw	r30, r12
     d74:	20 83       	st	Z, r18
     d76:	31 83       	std	Z+1, r19	; 0x01
     d78:	42 83       	std	Z+2, r20	; 0x02
     d7a:	53 83       	std	Z+3, r21	; 0x03
     d7c:	f7 01       	movw	r30, r14
     d7e:	60 81       	ld	r22, Z
     d80:	71 81       	ldd	r23, Z+1	; 0x01
     d82:	82 81       	ldd	r24, Z+2	; 0x02
     d84:	93 81       	ldd	r25, Z+3	; 0x03
     d86:	99 23       	and	r25, r25
     d88:	ac f4       	brge	.+42     	; 0xdb4 <mpu6050_calibrate_gyro+0x10a>
     d8a:	9b 01       	movw	r18, r22
     d8c:	77 23       	and	r23, r23
     d8e:	24 f4       	brge	.+8      	; 0xd98 <mpu6050_calibrate_gyro+0xee>
     d90:	22 27       	eor	r18, r18
     d92:	33 27       	eor	r19, r19
     d94:	26 1b       	sub	r18, r22
     d96:	37 0b       	sbc	r19, r23
     d98:	c9 01       	movw	r24, r18
     d9a:	68 ec       	ldi	r22, 0xC8	; 200
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	ac d6       	rcall	.+3416   	; 0x1af8 <__divmodhi4>
     da0:	cb 01       	movw	r24, r22
     da2:	77 0f       	add	r23, r23
     da4:	aa 0b       	sbc	r26, r26
     da6:	bb 0b       	sbc	r27, r27
     da8:	f7 01       	movw	r30, r14
     daa:	80 83       	st	Z, r24
     dac:	91 83       	std	Z+1, r25	; 0x01
     dae:	a2 83       	std	Z+2, r26	; 0x02
     db0:	b3 83       	std	Z+3, r27	; 0x03
     db2:	0a c0       	rjmp	.+20     	; 0xdc8 <mpu6050_calibrate_gyro+0x11e>
     db4:	28 ec       	ldi	r18, 0xC8	; 200
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 e0       	ldi	r20, 0x00	; 0
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	b0 d6       	rcall	.+3424   	; 0x1b1e <__divmodsi4>
     dbe:	f7 01       	movw	r30, r14
     dc0:	20 83       	st	Z, r18
     dc2:	31 83       	std	Z+1, r19	; 0x01
     dc4:	42 83       	std	Z+2, r20	; 0x02
     dc6:	53 83       	std	Z+3, r21	; 0x03
     dc8:	f8 01       	movw	r30, r16
     dca:	60 81       	ld	r22, Z
     dcc:	71 81       	ldd	r23, Z+1	; 0x01
     dce:	82 81       	ldd	r24, Z+2	; 0x02
     dd0:	93 81       	ldd	r25, Z+3	; 0x03
     dd2:	99 23       	and	r25, r25
     dd4:	ac f4       	brge	.+42     	; 0xe00 <mpu6050_calibrate_gyro+0x156>
     dd6:	9b 01       	movw	r18, r22
     dd8:	77 23       	and	r23, r23
     dda:	24 f4       	brge	.+8      	; 0xde4 <mpu6050_calibrate_gyro+0x13a>
     ddc:	22 27       	eor	r18, r18
     dde:	33 27       	eor	r19, r19
     de0:	26 1b       	sub	r18, r22
     de2:	37 0b       	sbc	r19, r23
     de4:	c9 01       	movw	r24, r18
     de6:	68 ec       	ldi	r22, 0xC8	; 200
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	86 d6       	rcall	.+3340   	; 0x1af8 <__divmodhi4>
     dec:	cb 01       	movw	r24, r22
     dee:	77 0f       	add	r23, r23
     df0:	aa 0b       	sbc	r26, r26
     df2:	bb 0b       	sbc	r27, r27
     df4:	f8 01       	movw	r30, r16
     df6:	80 83       	st	Z, r24
     df8:	91 83       	std	Z+1, r25	; 0x01
     dfa:	a2 83       	std	Z+2, r26	; 0x02
     dfc:	b3 83       	std	Z+3, r27	; 0x03
     dfe:	0a c0       	rjmp	.+20     	; 0xe14 <mpu6050_calibrate_gyro+0x16a>
     e00:	28 ec       	ldi	r18, 0xC8	; 200
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	8a d6       	rcall	.+3348   	; 0x1b1e <__divmodsi4>
     e0a:	f8 01       	movw	r30, r16
     e0c:	20 83       	st	Z, r18
     e0e:	31 83       	std	Z+1, r19	; 0x01
     e10:	42 83       	std	Z+2, r20	; 0x02
     e12:	53 83       	std	Z+3, r21	; 0x03
     e14:	82 ec       	ldi	r24, 0xC2	; 194
     e16:	93 e0       	ldi	r25, 0x03	; 3
     e18:	9f 93       	push	r25
     e1a:	8f 93       	push	r24
     e1c:	49 d7       	rcall	.+3730   	; 0x1cb0 <printf>
     e1e:	c6 01       	movw	r24, r12
     e20:	68 d2       	rcall	.+1232   	; 0x12f2 <print16>
     e22:	c3 ed       	ldi	r28, 0xD3	; 211
     e24:	d3 e0       	ldi	r29, 0x03	; 3
     e26:	df 93       	push	r29
     e28:	cf 93       	push	r28
     e2a:	42 d7       	rcall	.+3716   	; 0x1cb0 <printf>
     e2c:	c7 01       	movw	r24, r14
     e2e:	61 d2       	rcall	.+1218   	; 0x12f2 <print16>
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	3d d7       	rcall	.+3706   	; 0x1cb0 <printf>
     e36:	c8 01       	movw	r24, r16
     e38:	82 d2       	rcall	.+1284   	; 0x133e <print16ln>
     e3a:	ef ef       	ldi	r30, 0xFF	; 255
     e3c:	f3 ed       	ldi	r31, 0xD3	; 211
     e3e:	20 e3       	ldi	r18, 0x30	; 48
     e40:	e1 50       	subi	r30, 0x01	; 1
     e42:	f0 40       	sbci	r31, 0x00	; 0
     e44:	20 40       	sbci	r18, 0x00	; 0
     e46:	e1 f7       	brne	.-8      	; 0xe40 <mpu6050_calibrate_gyro+0x196>
     e48:	00 c0       	rjmp	.+0      	; 0xe4a <mpu6050_calibrate_gyro+0x1a0>
     e4a:	00 00       	nop
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	1f 91       	pop	r17
     e5e:	0f 91       	pop	r16
     e60:	ff 90       	pop	r15
     e62:	ef 90       	pop	r14
     e64:	df 90       	pop	r13
     e66:	cf 90       	pop	r12
     e68:	08 95       	ret

00000e6a <mpu6050_writeByte>:
	uint8_t byteToReturn=i2c_readNak();
	i2c_stop();
	return byteToReturn;
}
void mpu6050_writeByte(uint8_t wereToWrite,uint8_t byteToWrite)//writebyte
{
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	d8 2f       	mov	r29, r24
     e70:	c6 2f       	mov	r28, r22
	i2c_start(MPU6050_WRITE);
     e72:	80 ed       	ldi	r24, 0xD0	; 208
	i2c_write(wereToWrite);
	i2c_write(byteToWrite);
     e74:	88 d1       	rcall	.+784    	; 0x1186 <i2c_start>
     e76:	8d 2f       	mov	r24, r29
	i2c_stop();
     e78:	dc d1       	rcall	.+952    	; 0x1232 <i2c_write>
     e7a:	8c 2f       	mov	r24, r28
}
     e7c:	da d1       	rcall	.+948    	; 0x1232 <i2c_write>
     e7e:	c9 d1       	rcall	.+914    	; 0x1212 <i2c_stop>
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	08 95       	ret

00000e86 <mpu6050_readBytes>:
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
     e86:	af 92       	push	r10
     e88:	bf 92       	push	r11
     e8a:	cf 92       	push	r12
     e8c:	df 92       	push	r13
     e8e:	ff 92       	push	r15
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
     e98:	66 23       	and	r22, r22
     e9a:	89 f1       	breq	.+98     	; 0xefe <mpu6050_readBytes+0x78>
     e9c:	c5 2f       	mov	r28, r21
     e9e:	d4 2f       	mov	r29, r20
     ea0:	f6 2e       	mov	r15, r22
     ea2:	18 2f       	mov	r17, r24
		//request register
		i2c_start(MPU6050_WRITE);
     ea4:	80 ed       	ldi	r24, 0xD0	; 208
		i2c_write(regAddr);
     ea6:	6f d1       	rcall	.+734    	; 0x1186 <i2c_start>
     ea8:	81 2f       	mov	r24, r17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     eaa:	c3 d1       	rcall	.+902    	; 0x1232 <i2c_write>
     eac:	85 e3       	ldi	r24, 0x35	; 53
     eae:	8a 95       	dec	r24
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
     eb0:	f1 f7       	brne	.-4      	; 0xeae <mpu6050_readBytes+0x28>
     eb2:	00 00       	nop
     eb4:	81 ed       	ldi	r24, 0xD1	; 209
     eb6:	67 d1       	rcall	.+718    	; 0x1186 <i2c_start>
     eb8:	0d 2f       	mov	r16, r29
     eba:	1c 2f       	mov	r17, r28
     ebc:	cc 24       	eor	r12, r12
     ebe:	ca 94       	dec	r12
     ec0:	cf 0c       	add	r12, r15
     ec2:	d1 2c       	mov	r13, r1
     ec4:	ef ef       	ldi	r30, 0xFF	; 255
     ec6:	ce 1a       	sub	r12, r30
     ec8:	de 0a       	sbc	r13, r30
     eca:	c0 e0       	ldi	r28, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
     ecc:	d0 e0       	ldi	r29, 0x00	; 0
     ece:	af 2c       	mov	r10, r15
     ed0:	b1 2c       	mov	r11, r1
     ed2:	f1 e0       	ldi	r31, 0x01	; 1
     ed4:	af 1a       	sub	r10, r31
     ed6:	b1 08       	sbc	r11, r1
     ed8:	ac 16       	cp	r10, r28
			data[i] = i2c_readNak();
     eda:	bd 06       	cpc	r11, r29
     edc:	21 f4       	brne	.+8      	; 0xee6 <mpu6050_readBytes+0x60>
     ede:	e4 d1       	rcall	.+968    	; 0x12a8 <i2c_readNak>
     ee0:	f8 01       	movw	r30, r16
			else
			data[i] = i2c_readAck();
     ee2:	80 83       	st	Z, r24
     ee4:	03 c0       	rjmp	.+6      	; 0xeec <mpu6050_readBytes+0x66>
     ee6:	c6 d1       	rcall	.+908    	; 0x1274 <i2c_readAck>
     ee8:	f8 01       	movw	r30, r16
     eea:	80 83       	st	Z, r24
     eec:	21 96       	adiw	r28, 0x01	; 1
		i2c_start(MPU6050_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
		for(i=0; i<length; i++) {
     eee:	0f 5f       	subi	r16, 0xFF	; 255
     ef0:	1f 4f       	sbci	r17, 0xFF	; 255
     ef2:	cc 15       	cp	r28, r12
     ef4:	dd 05       	cpc	r29, r13
			if(i==length-1)
			data[i] = i2c_readNak();
			else
			data[i] = i2c_readAck();
		}
		i2c_stop();
     ef6:	81 f7       	brne	.-32     	; 0xed8 <mpu6050_readBytes+0x52>
     ef8:	cf 2d       	mov	r28, r15
     efa:	8b d1       	rcall	.+790    	; 0x1212 <i2c_stop>
	i2c_write(byteToWrite);
	i2c_stop();
}
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
	uint8_t i = 0;
	int8_t count = 0;
     efc:	01 c0       	rjmp	.+2      	; 0xf00 <mpu6050_readBytes+0x7a>
			data[i] = i2c_readAck();
		}
		i2c_stop();
	}
	return count;
}
     efe:	c0 e0       	ldi	r28, 0x00	; 0
     f00:	8c 2f       	mov	r24, r28
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	df 90       	pop	r13
     f0e:	cf 90       	pop	r12
     f10:	bf 90       	pop	r11
     f12:	af 90       	pop	r10
     f14:	08 95       	ret

00000f16 <mpu6050_getRawData>:
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     f16:	6f 92       	push	r6
     f18:	7f 92       	push	r7
     f1a:	8f 92       	push	r8
     f1c:	9f 92       	push	r9
     f1e:	af 92       	push	r10
     f20:	bf 92       	push	r11
     f22:	cf 92       	push	r12
     f24:	df 92       	push	r13
     f26:	ef 92       	push	r14
     f28:	ff 92       	push	r15
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	2e 97       	sbiw	r28, 0x0e	; 14
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	4c 01       	movw	r8, r24
     f44:	5b 01       	movw	r10, r22
     f46:	6a 01       	movw	r12, r20
     f48:	39 01       	movw	r6, r18
	uint8_t buffer[14];
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14,  buffer);
     f4a:	ae 01       	movw	r20, r28
     f4c:	4f 5f       	subi	r20, 0xFF	; 255
     f4e:	5f 4f       	sbci	r21, 0xFF	; 255
     f50:	6e e0       	ldi	r22, 0x0E	; 14
     f52:	8b e3       	ldi	r24, 0x3B	; 59
     f54:	98 df       	rcall	.-208    	; 0xe86 <mpu6050_readBytes>
	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	98 2f       	mov	r25, r24
     f5c:	88 27       	eor	r24, r24
     f5e:	2a 81       	ldd	r18, Y+2	; 0x02
     f60:	82 2b       	or	r24, r18
     f62:	f4 01       	movw	r30, r8
     f64:	91 83       	std	Z+1, r25	; 0x01
     f66:	80 83       	st	Z, r24
	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	98 2f       	mov	r25, r24
     f6e:	88 27       	eor	r24, r24
     f70:	2c 81       	ldd	r18, Y+4	; 0x04
     f72:	82 2b       	or	r24, r18
     f74:	f5 01       	movw	r30, r10
     f76:	91 83       	std	Z+1, r25	; 0x01
     f78:	80 83       	st	Z, r24
	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
     f7a:	8d 81       	ldd	r24, Y+5	; 0x05
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	98 2f       	mov	r25, r24
     f80:	88 27       	eor	r24, r24
     f82:	2e 81       	ldd	r18, Y+6	; 0x06
     f84:	82 2b       	or	r24, r18
     f86:	f6 01       	movw	r30, r12
     f88:	91 83       	std	Z+1, r25	; 0x01
     f8a:	80 83       	st	Z, r24
	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     f8c:	89 85       	ldd	r24, Y+9	; 0x09
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	98 2f       	mov	r25, r24
     f92:	88 27       	eor	r24, r24
     f94:	2a 85       	ldd	r18, Y+10	; 0x0a
     f96:	82 2b       	or	r24, r18
     f98:	f3 01       	movw	r30, r6
     f9a:	91 83       	std	Z+1, r25	; 0x01
     f9c:	80 83       	st	Z, r24
	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     f9e:	8b 85       	ldd	r24, Y+11	; 0x0b
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	98 2f       	mov	r25, r24
     fa4:	88 27       	eor	r24, r24
     fa6:	2c 85       	ldd	r18, Y+12	; 0x0c
     fa8:	82 2b       	or	r24, r18
     faa:	f8 01       	movw	r30, r16
     fac:	91 83       	std	Z+1, r25	; 0x01
     fae:	80 83       	st	Z, r24
	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	98 2f       	mov	r25, r24
     fb6:	88 27       	eor	r24, r24
     fb8:	2e 85       	ldd	r18, Y+14	; 0x0e
     fba:	82 2b       	or	r24, r18
     fbc:	f7 01       	movw	r30, r14
     fbe:	91 83       	std	Z+1, r25	; 0x01
     fc0:	80 83       	st	Z, r24
     fc2:	2e 96       	adiw	r28, 0x0e	; 14
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	1f 91       	pop	r17
     fd4:	0f 91       	pop	r16
     fd6:	ff 90       	pop	r15
     fd8:	ef 90       	pop	r14
     fda:	df 90       	pop	r13
     fdc:	cf 90       	pop	r12
     fde:	bf 90       	pop	r11
     fe0:	af 90       	pop	r10
     fe2:	9f 90       	pop	r9
     fe4:	8f 90       	pop	r8
     fe6:	7f 90       	pop	r7
     fe8:	6f 90       	pop	r6
     fea:	08 95       	ret

00000fec <setup_timer4>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     fec:	e1 ea       	ldi	r30, 0xA1	; 161
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	81 60       	ori	r24, 0x01	; 1
     ff4:	80 83       	st	Z, r24
     ff6:	e0 ea       	ldi	r30, 0xA0	; 160
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	81 60       	ori	r24, 0x01	; 1
     ffe:	80 83       	st	Z, r24
    1000:	80 81       	ld	r24, Z
    1002:	80 68       	ori	r24, 0x80	; 128
    1004:	80 83       	st	Z, r24
    1006:	80 81       	ld	r24, Z
    1008:	80 62       	ori	r24, 0x20	; 32
    100a:	80 83       	st	Z, r24
    100c:	80 81       	ld	r24, Z
    100e:	88 60       	ori	r24, 0x08	; 8
    1010:	80 83       	st	Z, r24
    1012:	08 95       	ret

00001014 <setup_timer5>:
    1014:	e1 e2       	ldi	r30, 0x21	; 33
    1016:	f1 e0       	ldi	r31, 0x01	; 1
    1018:	80 81       	ld	r24, Z
    101a:	81 60       	ori	r24, 0x01	; 1
    101c:	80 83       	st	Z, r24
    101e:	80 81       	ld	r24, Z
    1020:	88 60       	ori	r24, 0x08	; 8
    1022:	80 83       	st	Z, r24
    1024:	08 95       	ret

00001026 <Enable_timer5_compare_interrupt>:
    1026:	e3 e7       	ldi	r30, 0x73	; 115
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	82 60       	ori	r24, 0x02	; 2
    102e:	80 83       	st	Z, r24
    1030:	08 95       	ret

00001032 <setup_timer0>:
    1032:	85 b5       	in	r24, 0x25	; 37
    1034:	81 60       	ori	r24, 0x01	; 1
    1036:	85 bd       	out	0x25, r24	; 37
    1038:	85 b5       	in	r24, 0x25	; 37
    103a:	82 60       	ori	r24, 0x02	; 2
    103c:	85 bd       	out	0x25, r24	; 37
    103e:	08 95       	ret

00001040 <Enable_timer0_overflow_interrupt>:
    1040:	ee e6       	ldi	r30, 0x6E	; 110
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	81 60       	ori	r24, 0x01	; 1
    1048:	80 83       	st	Z, r24
    104a:	08 95       	ret

0000104c <micros>:
    104c:	3f b7       	in	r19, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <timer0_overflow_count>
    1054:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <timer0_overflow_count+0x1>
    1058:	a0 91 fd 03 	lds	r26, 0x03FD	; 0x8003fd <timer0_overflow_count+0x2>
    105c:	b0 91 fe 03 	lds	r27, 0x03FE	; 0x8003fe <timer0_overflow_count+0x3>
    1060:	26 b5       	in	r18, 0x26	; 38
    1062:	a8 9b       	sbis	0x15, 0	; 21
    1064:	05 c0       	rjmp	.+10     	; 0x1070 <micros+0x24>
    1066:	2f 3f       	cpi	r18, 0xFF	; 255
    1068:	19 f0       	breq	.+6      	; 0x1070 <micros+0x24>
    106a:	01 96       	adiw	r24, 0x01	; 1
    106c:	a1 1d       	adc	r26, r1
    106e:	b1 1d       	adc	r27, r1
    1070:	3f bf       	out	0x3f, r19	; 63
    1072:	ba 2f       	mov	r27, r26
    1074:	a9 2f       	mov	r26, r25
    1076:	98 2f       	mov	r25, r24
    1078:	88 27       	eor	r24, r24
    107a:	82 0f       	add	r24, r18
    107c:	91 1d       	adc	r25, r1
    107e:	a1 1d       	adc	r26, r1
    1080:	b1 1d       	adc	r27, r1
    1082:	bc 01       	movw	r22, r24
    1084:	cd 01       	movw	r24, r26
    1086:	66 0f       	add	r22, r22
    1088:	77 1f       	adc	r23, r23
    108a:	88 1f       	adc	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	66 0f       	add	r22, r22
    1090:	77 1f       	adc	r23, r23
    1092:	88 1f       	adc	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	08 95       	ret

00001098 <__vector_23>:
ISR(TIMER0_OVF_vect)//10 microsecconed timer interrupt
{
    1098:	1f 92       	push	r1
    109a:	0f 92       	push	r0
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	0f 92       	push	r0
    10a0:	11 24       	eor	r1, r1
    10a2:	2f 93       	push	r18
    10a4:	3f 93       	push	r19
    10a6:	8f 93       	push	r24
    10a8:	9f 93       	push	r25
    10aa:	af 93       	push	r26
    10ac:	bf 93       	push	r27
	unsigned long m = timer0_millis;
    10ae:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <timer0_millis>
    10b2:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <timer0_millis+0x1>
    10b6:	a0 91 f9 03 	lds	r26, 0x03F9	; 0x8003f9 <timer0_millis+0x2>
    10ba:	b0 91 fa 03 	lds	r27, 0x03FA	; 0x8003fa <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    10be:	30 91 f6 03 	lds	r19, 0x03F6	; 0x8003f6 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    10c2:	23 e0       	ldi	r18, 0x03	; 3
    10c4:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    10c6:	2d 37       	cpi	r18, 0x7D	; 125
    10c8:	20 f4       	brcc	.+8      	; 0x10d2 <__vector_23+0x3a>
ISR(TIMER0_OVF_vect)//10 microsecconed timer interrupt
{
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    10ca:	01 96       	adiw	r24, 0x01	; 1
    10cc:	a1 1d       	adc	r26, r1
    10ce:	b1 1d       	adc	r27, r1
    10d0:	05 c0       	rjmp	.+10     	; 0x10dc <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    10d2:	26 e8       	ldi	r18, 0x86	; 134
    10d4:	23 0f       	add	r18, r19
		m += 1;
    10d6:	02 96       	adiw	r24, 0x02	; 2
    10d8:	a1 1d       	adc	r26, r1
    10da:	b1 1d       	adc	r27, r1
	}


	timer0_fract = f;
    10dc:	20 93 f6 03 	sts	0x03F6, r18	; 0x8003f6 <timer0_fract>
	timer0_millis = m;
    10e0:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <timer0_millis>
    10e4:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <timer0_millis+0x1>
    10e8:	a0 93 f9 03 	sts	0x03F9, r26	; 0x8003f9 <timer0_millis+0x2>
    10ec:	b0 93 fa 03 	sts	0x03FA, r27	; 0x8003fa <timer0_millis+0x3>
	timer0_overflow_count++;
    10f0:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <timer0_overflow_count>
    10f4:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <timer0_overflow_count+0x1>
    10f8:	a0 91 fd 03 	lds	r26, 0x03FD	; 0x8003fd <timer0_overflow_count+0x2>
    10fc:	b0 91 fe 03 	lds	r27, 0x03FE	; 0x8003fe <timer0_overflow_count+0x3>
    1100:	01 96       	adiw	r24, 0x01	; 1
    1102:	a1 1d       	adc	r26, r1
    1104:	b1 1d       	adc	r27, r1
    1106:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <timer0_overflow_count>
    110a:	90 93 fc 03 	sts	0x03FC, r25	; 0x8003fc <timer0_overflow_count+0x1>
    110e:	a0 93 fd 03 	sts	0x03FD, r26	; 0x8003fd <timer0_overflow_count+0x2>
    1112:	b0 93 fe 03 	sts	0x03FE, r27	; 0x8003fe <timer0_overflow_count+0x3>
}
    1116:	bf 91       	pop	r27
    1118:	af 91       	pop	r26
    111a:	9f 91       	pop	r25
    111c:	8f 91       	pop	r24
    111e:	3f 91       	pop	r19
    1120:	2f 91       	pop	r18
    1122:	0f 90       	pop	r0
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	0f 90       	pop	r0
    1128:	1f 90       	pop	r1
    112a:	18 95       	reti

0000112c <__vector_47>:

ISR(TIMER5_COMPA_vect)//motor update interrupt routine
{
    112c:	1f 92       	push	r1
    112e:	0f 92       	push	r0
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	0f 92       	push	r0
    1134:	11 24       	eor	r1, r1
    1136:	0b b6       	in	r0, 0x3b	; 59
    1138:	0f 92       	push	r0
    113a:	2f 93       	push	r18
    113c:	3f 93       	push	r19
    113e:	4f 93       	push	r20
    1140:	5f 93       	push	r21
    1142:	6f 93       	push	r22
    1144:	7f 93       	push	r23
    1146:	8f 93       	push	r24
    1148:	9f 93       	push	r25
    114a:	af 93       	push	r26
    114c:	bf 93       	push	r27
    114e:	ef 93       	push	r30
	PWM_update();
    1150:	ff 93       	push	r31
    1152:	39 d8       	rcall	.-3982   	; 0x1c6 <PWM_update>
    1154:	ff 91       	pop	r31
    1156:	ef 91       	pop	r30
    1158:	bf 91       	pop	r27
    115a:	af 91       	pop	r26
    115c:	9f 91       	pop	r25
    115e:	8f 91       	pop	r24
    1160:	7f 91       	pop	r23
    1162:	6f 91       	pop	r22
    1164:	5f 91       	pop	r21
    1166:	4f 91       	pop	r20
    1168:	3f 91       	pop	r19
    116a:	2f 91       	pop	r18
    116c:	0f 90       	pop	r0
    116e:	0b be       	out	0x3b, r0	; 59
    1170:	0f 90       	pop	r0
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	0f 90       	pop	r0
    1176:	1f 90       	pop	r1
    1178:	18 95       	reti

0000117a <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    117a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    117e:	8c e0       	ldi	r24, 0x0C	; 12
    1180:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    1184:	08 95       	ret

00001186 <i2c_start>:
    1186:	94 ea       	ldi	r25, 0xA4	; 164
    1188:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    118c:	4f ef       	ldi	r20, 0xFF	; 255
    118e:	50 e0       	ldi	r21, 0x00	; 0
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	ec eb       	ldi	r30, 0xBC	; 188
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	90 81       	ld	r25, Z
    119a:	99 23       	and	r25, r25
    119c:	34 f0       	brlt	.+12     	; 0x11aa <i2c_start+0x24>
    119e:	41 50       	subi	r20, 0x01	; 1
    11a0:	51 09       	sbc	r21, r1
    11a2:	61 09       	sbc	r22, r1
    11a4:	71 09       	sbc	r23, r1
    11a6:	c0 f7       	brcc	.-16     	; 0x1198 <i2c_start+0x12>
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <i2c_start+0x2c>
    11aa:	45 2b       	or	r20, r21
    11ac:	46 2b       	or	r20, r22
    11ae:	47 2b       	or	r20, r23
    11b0:	41 f1       	breq	.+80     	; 0x1202 <i2c_start+0x7c>
    11b2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    11b6:	98 7f       	andi	r25, 0xF8	; 248
    11b8:	98 30       	cpi	r25, 0x08	; 8
    11ba:	11 f0       	breq	.+4      	; 0x11c0 <i2c_start+0x3a>
    11bc:	90 31       	cpi	r25, 0x10	; 16
    11be:	19 f5       	brne	.+70     	; 0x1206 <i2c_start+0x80>
    11c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    11c4:	84 e8       	ldi	r24, 0x84	; 132
    11c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    11ca:	8f ef       	ldi	r24, 0xFF	; 255
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	a0 e0       	ldi	r26, 0x00	; 0
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	ec eb       	ldi	r30, 0xBC	; 188
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	20 81       	ld	r18, Z
    11d8:	22 23       	and	r18, r18
    11da:	2c f0       	brlt	.+10     	; 0x11e6 <i2c_start+0x60>
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	a1 09       	sbc	r26, r1
    11e0:	b1 09       	sbc	r27, r1
    11e2:	c8 f7       	brcc	.-14     	; 0x11d6 <i2c_start+0x50>
    11e4:	04 c0       	rjmp	.+8      	; 0x11ee <i2c_start+0x68>
    11e6:	89 2b       	or	r24, r25
    11e8:	8a 2b       	or	r24, r26
    11ea:	8b 2b       	or	r24, r27
    11ec:	71 f0       	breq	.+28     	; 0x120a <i2c_start+0x84>
    11ee:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    11f2:	98 7f       	andi	r25, 0xF8	; 248
    11f4:	98 31       	cpi	r25, 0x18	; 24
    11f6:	59 f0       	breq	.+22     	; 0x120e <i2c_start+0x88>
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 34       	cpi	r25, 0x40	; 64
    11fc:	49 f4       	brne	.+18     	; 0x1210 <i2c_start+0x8a>
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	08 95       	ret
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	08 95       	ret
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	08 95       	ret
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	08 95       	ret
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	08 95       	ret

00001212 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1212:	84 e9       	ldi	r24, 0x94	; 148
    1214:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	ec eb       	ldi	r30, 0xBC	; 188
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	20 81       	ld	r18, Z
    1222:	24 ff       	sbrs	r18, 4
    1224:	05 c0       	rjmp	.+10     	; 0x1230 <i2c_stop+0x1e>
    1226:	01 96       	adiw	r24, 0x01	; 1
    1228:	81 15       	cp	r24, r1
    122a:	21 e0       	ldi	r18, 0x01	; 1
    122c:	92 07       	cpc	r25, r18
    122e:	c1 f7       	brne	.-16     	; 0x1220 <i2c_stop+0xe>
    1230:	08 95       	ret

00001232 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1232:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    1236:	84 e8       	ldi	r24, 0x84	; 132
    1238:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    123c:	8f ef       	ldi	r24, 0xFF	; 255
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	a0 e0       	ldi	r26, 0x00	; 0
    1242:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1244:	ec eb       	ldi	r30, 0xBC	; 188
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	20 81       	ld	r18, Z
    124a:	22 23       	and	r18, r18
    124c:	2c f0       	brlt	.+10     	; 0x1258 <i2c_write+0x26>
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	a1 09       	sbc	r26, r1
    1252:	b1 09       	sbc	r27, r1
    1254:	c8 f7       	brcc	.-14     	; 0x1248 <i2c_write+0x16>
    1256:	04 c0       	rjmp	.+8      	; 0x1260 <i2c_write+0x2e>
	if(i2c_timer == 0)
    1258:	89 2b       	or	r24, r25
    125a:	8a 2b       	or	r24, r26
    125c:	8b 2b       	or	r24, r27
    125e:	41 f0       	breq	.+16     	; 0x1270 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1260:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    1264:	98 7f       	andi	r25, 0xF8	; 248
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	98 32       	cpi	r25, 0x28	; 40
    126a:	19 f4       	brne	.+6      	; 0x1272 <i2c_write+0x40>
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	08 95       	ret
    1270:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    1272:	08 95       	ret

00001274 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1274:	84 ec       	ldi	r24, 0xC4	; 196
    1276:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
    127a:	8f ef       	ldi	r24, 0xFF	; 255
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a0 e0       	ldi	r26, 0x00	; 0
    1280:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1282:	ec eb       	ldi	r30, 0xBC	; 188
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	20 81       	ld	r18, Z
    1288:	22 23       	and	r18, r18
    128a:	2c f0       	brlt	.+10     	; 0x1296 <i2c_readAck+0x22>
    128c:	01 97       	sbiw	r24, 0x01	; 1
    128e:	a1 09       	sbc	r26, r1
    1290:	b1 09       	sbc	r27, r1
    1292:	c8 f7       	brcc	.-14     	; 0x1286 <i2c_readAck+0x12>
    1294:	04 c0       	rjmp	.+8      	; 0x129e <i2c_readAck+0x2a>
	if(i2c_timer == 0)
    1296:	89 2b       	or	r24, r25
    1298:	8a 2b       	or	r24, r26
    129a:	8b 2b       	or	r24, r27
    129c:	19 f0       	breq	.+6      	; 0x12a4 <i2c_readAck+0x30>
		return 0;

    return TWDR;
    129e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    12a2:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    12a4:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    12a6:	08 95       	ret

000012a8 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    12a8:	84 e8       	ldi	r24, 0x84	; 132
    12aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
    12ae:	8f ef       	ldi	r24, 0xFF	; 255
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	a0 e0       	ldi	r26, 0x00	; 0
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    12b6:	ec eb       	ldi	r30, 0xBC	; 188
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	20 81       	ld	r18, Z
    12bc:	22 23       	and	r18, r18
    12be:	2c f0       	brlt	.+10     	; 0x12ca <i2c_readNak+0x22>
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	a1 09       	sbc	r26, r1
    12c4:	b1 09       	sbc	r27, r1
    12c6:	c8 f7       	brcc	.-14     	; 0x12ba <i2c_readNak+0x12>
    12c8:	04 c0       	rjmp	.+8      	; 0x12d2 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
    12ca:	89 2b       	or	r24, r25
    12cc:	8a 2b       	or	r24, r26
    12ce:	8b 2b       	or	r24, r27
    12d0:	19 f0       	breq	.+6      	; 0x12d8 <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
    12d2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    12d6:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    12d8:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    12da:	08 95       	ret

000012dc <USART_Init>:
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
    12dc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    12e0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    12e4:	88 e0       	ldi	r24, 0x08	; 8
    12e6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    12ea:	8e e0       	ldi	r24, 0x0E	; 14
    12ec:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    12f0:	08 95       	ret

000012f2 <print16>:
}
void print16(int16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	2a 97       	sbiw	r28, 0x0a	; 10
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
	char c[10];
	itoa(*value, c, 10);
    130a:	4a e0       	ldi	r20, 0x0A	; 10
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	8e 01       	movw	r16, r28
    1310:	0f 5f       	subi	r16, 0xFF	; 255
    1312:	1f 4f       	sbci	r17, 0xFF	; 255
    1314:	b8 01       	movw	r22, r16
    1316:	fc 01       	movw	r30, r24
    1318:	80 81       	ld	r24, Z
    131a:	91 81       	ldd	r25, Z+1	; 0x01
    131c:	52 d4       	rcall	.+2212   	; 0x1bc2 <itoa>
	printf(c);
    131e:	1f 93       	push	r17
    1320:	0f 93       	push	r16
    1322:	c6 d4       	rcall	.+2444   	; 0x1cb0 <printf>
	//printf("\n");
}
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	2a 96       	adiw	r28, 0x0a	; 10
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	1f 91       	pop	r17
    133a:	0f 91       	pop	r16
    133c:	08 95       	ret

0000133e <print16ln>:

void print16ln(int16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
    133e:	0f 93       	push	r16
    1340:	1f 93       	push	r17
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	2a 97       	sbiw	r28, 0x0a	; 10
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
	char c[10];
	itoa(*value, c, 10);
    1356:	4a e0       	ldi	r20, 0x0A	; 10
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	8e 01       	movw	r16, r28
    135c:	0f 5f       	subi	r16, 0xFF	; 255
    135e:	1f 4f       	sbci	r17, 0xFF	; 255
    1360:	b8 01       	movw	r22, r16
    1362:	fc 01       	movw	r30, r24
    1364:	80 81       	ld	r24, Z
    1366:	91 81       	ldd	r25, Z+1	; 0x01
    1368:	2c d4       	rcall	.+2136   	; 0x1bc2 <itoa>
	printf(c);
    136a:	1f 93       	push	r17
    136c:	0f 93       	push	r16
	printf("\n");
    136e:	a0 d4       	rcall	.+2368   	; 0x1cb0 <printf>
    1370:	8a e0       	ldi	r24, 0x0A	; 10
    1372:	90 e0       	ldi	r25, 0x00	; 0
}
    1374:	b0 d4       	rcall	.+2400   	; 0x1cd6 <putchar>
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	2a 96       	adiw	r28, 0x0a	; 10
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	08 95       	ret

00001390 <uart_putchar>:

int uart_putchar(char c, FILE *stream)
{
    1390:	cf 93       	push	r28
    1392:	c8 2f       	mov	r28, r24
	if (c == '\n')
    1394:	8a 30       	cpi	r24, 0x0A	; 10
    1396:	11 f4       	brne	.+4      	; 0x139c <uart_putchar+0xc>
	uart_putchar('\r', stream);
    1398:	8d e0       	ldi	r24, 0x0D	; 13
    139a:	fa df       	rcall	.-12     	; 0x1390 <uart_putchar>
	while (!( UCSR0A & (1<<UDRE0)));
    139c:	e0 ec       	ldi	r30, 0xC0	; 192
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	85 ff       	sbrs	r24, 5
    13a4:	fd cf       	rjmp	.-6      	; 0x13a0 <uart_putchar+0x10>

	UDR0 = c;
    13a6:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	return 0;
}
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	cf 91       	pop	r28
    13b0:	08 95       	ret

000013b2 <printSI>:
void printSI(char c[20],int16_t intToPrint)
{
    13b2:	0f 93       	push	r16
    13b4:	1f 93       	push	r17
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	1f 92       	push	r1
    13bc:	1f 92       	push	r1
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	18 2f       	mov	r17, r24
    13c4:	09 2f       	mov	r16, r25
    13c6:	7a 83       	std	Y+2, r23	; 0x02
    13c8:	69 83       	std	Y+1, r22	; 0x01
	printf(" ");
    13ca:	80 e2       	ldi	r24, 0x20	; 32
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	83 d4       	rcall	.+2310   	; 0x1cd6 <putchar>
	printf(c);
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
	//printf(" ");
	print16(&intToPrint);
    13d4:	6d d4       	rcall	.+2266   	; 0x1cb0 <printf>
    13d6:	ce 01       	movw	r24, r28
    13d8:	01 96       	adiw	r24, 0x01	; 1
    13da:	8b df       	rcall	.-234    	; 0x12f2 <print16>
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	08 95       	ret

000013ee <__subsf3>:
    13ee:	50 58       	subi	r21, 0x80	; 128

000013f0 <__addsf3>:
    13f0:	bb 27       	eor	r27, r27
    13f2:	aa 27       	eor	r26, r26
    13f4:	0e d0       	rcall	.+28     	; 0x1412 <__addsf3x>
    13f6:	3f c2       	rjmp	.+1150   	; 0x1876 <__fp_round>
    13f8:	30 d2       	rcall	.+1120   	; 0x185a <__fp_pscA>
    13fa:	30 f0       	brcs	.+12     	; 0x1408 <__addsf3+0x18>
    13fc:	35 d2       	rcall	.+1130   	; 0x1868 <__fp_pscB>
    13fe:	20 f0       	brcs	.+8      	; 0x1408 <__addsf3+0x18>
    1400:	31 f4       	brne	.+12     	; 0x140e <__addsf3+0x1e>
    1402:	9f 3f       	cpi	r25, 0xFF	; 255
    1404:	11 f4       	brne	.+4      	; 0x140a <__addsf3+0x1a>
    1406:	1e f4       	brtc	.+6      	; 0x140e <__addsf3+0x1e>
    1408:	ef c1       	rjmp	.+990    	; 0x17e8 <__fp_nan>
    140a:	0e f4       	brtc	.+2      	; 0x140e <__addsf3+0x1e>
    140c:	e0 95       	com	r30
    140e:	e7 fb       	bst	r30, 7
    1410:	e5 c1       	rjmp	.+970    	; 0x17dc <__fp_inf>

00001412 <__addsf3x>:
    1412:	e9 2f       	mov	r30, r25
    1414:	41 d2       	rcall	.+1154   	; 0x1898 <__fp_split3>
    1416:	80 f3       	brcs	.-32     	; 0x13f8 <__addsf3+0x8>
    1418:	ba 17       	cp	r27, r26
    141a:	62 07       	cpc	r22, r18
    141c:	73 07       	cpc	r23, r19
    141e:	84 07       	cpc	r24, r20
    1420:	95 07       	cpc	r25, r21
    1422:	18 f0       	brcs	.+6      	; 0x142a <__addsf3x+0x18>
    1424:	71 f4       	brne	.+28     	; 0x1442 <__addsf3x+0x30>
    1426:	9e f5       	brtc	.+102    	; 0x148e <__addsf3x+0x7c>
    1428:	59 c2       	rjmp	.+1202   	; 0x18dc <__fp_zero>
    142a:	0e f4       	brtc	.+2      	; 0x142e <__addsf3x+0x1c>
    142c:	e0 95       	com	r30
    142e:	0b 2e       	mov	r0, r27
    1430:	ba 2f       	mov	r27, r26
    1432:	a0 2d       	mov	r26, r0
    1434:	0b 01       	movw	r0, r22
    1436:	b9 01       	movw	r22, r18
    1438:	90 01       	movw	r18, r0
    143a:	0c 01       	movw	r0, r24
    143c:	ca 01       	movw	r24, r20
    143e:	a0 01       	movw	r20, r0
    1440:	11 24       	eor	r1, r1
    1442:	ff 27       	eor	r31, r31
    1444:	59 1b       	sub	r21, r25
    1446:	99 f0       	breq	.+38     	; 0x146e <__addsf3x+0x5c>
    1448:	59 3f       	cpi	r21, 0xF9	; 249
    144a:	50 f4       	brcc	.+20     	; 0x1460 <__addsf3x+0x4e>
    144c:	50 3e       	cpi	r21, 0xE0	; 224
    144e:	68 f1       	brcs	.+90     	; 0x14aa <__addsf3x+0x98>
    1450:	1a 16       	cp	r1, r26
    1452:	f0 40       	sbci	r31, 0x00	; 0
    1454:	a2 2f       	mov	r26, r18
    1456:	23 2f       	mov	r18, r19
    1458:	34 2f       	mov	r19, r20
    145a:	44 27       	eor	r20, r20
    145c:	58 5f       	subi	r21, 0xF8	; 248
    145e:	f3 cf       	rjmp	.-26     	; 0x1446 <__addsf3x+0x34>
    1460:	46 95       	lsr	r20
    1462:	37 95       	ror	r19
    1464:	27 95       	ror	r18
    1466:	a7 95       	ror	r26
    1468:	f0 40       	sbci	r31, 0x00	; 0
    146a:	53 95       	inc	r21
    146c:	c9 f7       	brne	.-14     	; 0x1460 <__addsf3x+0x4e>
    146e:	7e f4       	brtc	.+30     	; 0x148e <__addsf3x+0x7c>
    1470:	1f 16       	cp	r1, r31
    1472:	ba 0b       	sbc	r27, r26
    1474:	62 0b       	sbc	r22, r18
    1476:	73 0b       	sbc	r23, r19
    1478:	84 0b       	sbc	r24, r20
    147a:	ba f0       	brmi	.+46     	; 0x14aa <__addsf3x+0x98>
    147c:	91 50       	subi	r25, 0x01	; 1
    147e:	a1 f0       	breq	.+40     	; 0x14a8 <__addsf3x+0x96>
    1480:	ff 0f       	add	r31, r31
    1482:	bb 1f       	adc	r27, r27
    1484:	66 1f       	adc	r22, r22
    1486:	77 1f       	adc	r23, r23
    1488:	88 1f       	adc	r24, r24
    148a:	c2 f7       	brpl	.-16     	; 0x147c <__addsf3x+0x6a>
    148c:	0e c0       	rjmp	.+28     	; 0x14aa <__addsf3x+0x98>
    148e:	ba 0f       	add	r27, r26
    1490:	62 1f       	adc	r22, r18
    1492:	73 1f       	adc	r23, r19
    1494:	84 1f       	adc	r24, r20
    1496:	48 f4       	brcc	.+18     	; 0x14aa <__addsf3x+0x98>
    1498:	87 95       	ror	r24
    149a:	77 95       	ror	r23
    149c:	67 95       	ror	r22
    149e:	b7 95       	ror	r27
    14a0:	f7 95       	ror	r31
    14a2:	9e 3f       	cpi	r25, 0xFE	; 254
    14a4:	08 f0       	brcs	.+2      	; 0x14a8 <__addsf3x+0x96>
    14a6:	b3 cf       	rjmp	.-154    	; 0x140e <__addsf3+0x1e>
    14a8:	93 95       	inc	r25
    14aa:	88 0f       	add	r24, r24
    14ac:	08 f0       	brcs	.+2      	; 0x14b0 <__addsf3x+0x9e>
    14ae:	99 27       	eor	r25, r25
    14b0:	ee 0f       	add	r30, r30
    14b2:	97 95       	ror	r25
    14b4:	87 95       	ror	r24
    14b6:	08 95       	ret

000014b8 <asin>:
    14b8:	9f 93       	push	r25
    14ba:	9f 77       	andi	r25, 0x7F	; 127
    14bc:	ee e3       	ldi	r30, 0x3E	; 62
    14be:	89 37       	cpi	r24, 0x79	; 121
    14c0:	9e 07       	cpc	r25, r30
    14c2:	20 f4       	brcc	.+8      	; 0x14cc <asin+0x14>
    14c4:	e4 ee       	ldi	r30, 0xE4	; 228
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	b7 d1       	rcall	.+878    	; 0x1838 <__fp_powsodd>
    14ca:	09 c0       	rjmp	.+18     	; 0x14de <asin+0x26>
    14cc:	48 d1       	rcall	.+656    	; 0x175e <__fp_arccos>
    14ce:	90 58       	subi	r25, 0x80	; 128
    14d0:	a2 ea       	ldi	r26, 0xA2	; 162
    14d2:	2a ed       	ldi	r18, 0xDA	; 218
    14d4:	3f e0       	ldi	r19, 0x0F	; 15
    14d6:	49 ec       	ldi	r20, 0xC9	; 201
    14d8:	5f e3       	ldi	r21, 0x3F	; 63
    14da:	9b df       	rcall	.-202    	; 0x1412 <__addsf3x>
    14dc:	cc d1       	rcall	.+920    	; 0x1876 <__fp_round>
    14de:	0f 90       	pop	r0
    14e0:	07 fc       	sbrc	r0, 7
    14e2:	90 58       	subi	r25, 0x80	; 128
    14e4:	08 95       	ret
    14e6:	b9 d1       	rcall	.+882    	; 0x185a <__fp_pscA>
    14e8:	58 f0       	brcs	.+22     	; 0x1500 <asin+0x48>
    14ea:	80 e8       	ldi	r24, 0x80	; 128
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <asin+0x3a>
    14f0:	9e ef       	ldi	r25, 0xFE	; 254
    14f2:	ba d1       	rcall	.+884    	; 0x1868 <__fp_pscB>
    14f4:	28 f0       	brcs	.+10     	; 0x1500 <asin+0x48>
    14f6:	40 e8       	ldi	r20, 0x80	; 128
    14f8:	51 e0       	ldi	r21, 0x01	; 1
    14fa:	59 f4       	brne	.+22     	; 0x1512 <atan2+0xe>
    14fc:	5e ef       	ldi	r21, 0xFE	; 254
    14fe:	09 c0       	rjmp	.+18     	; 0x1512 <atan2+0xe>
    1500:	73 c1       	rjmp	.+742    	; 0x17e8 <__fp_nan>
    1502:	ec c1       	rjmp	.+984    	; 0x18dc <__fp_zero>

00001504 <atan2>:
    1504:	e9 2f       	mov	r30, r25
    1506:	e0 78       	andi	r30, 0x80	; 128
    1508:	c7 d1       	rcall	.+910    	; 0x1898 <__fp_split3>
    150a:	68 f3       	brcs	.-38     	; 0x14e6 <asin+0x2e>
    150c:	09 2e       	mov	r0, r25
    150e:	05 2a       	or	r0, r21
    1510:	c1 f3       	breq	.-16     	; 0x1502 <asin+0x4a>
    1512:	26 17       	cp	r18, r22
    1514:	37 07       	cpc	r19, r23
    1516:	48 07       	cpc	r20, r24
    1518:	59 07       	cpc	r21, r25
    151a:	38 f0       	brcs	.+14     	; 0x152a <atan2+0x26>
    151c:	0e 2e       	mov	r0, r30
    151e:	07 f8       	bld	r0, 7
    1520:	e0 25       	eor	r30, r0
    1522:	69 f0       	breq	.+26     	; 0x153e <atan2+0x3a>
    1524:	e0 25       	eor	r30, r0
    1526:	e0 64       	ori	r30, 0x40	; 64
    1528:	0a c0       	rjmp	.+20     	; 0x153e <atan2+0x3a>
    152a:	ef 63       	ori	r30, 0x3F	; 63
    152c:	07 f8       	bld	r0, 7
    152e:	00 94       	com	r0
    1530:	07 fa       	bst	r0, 7
    1532:	db 01       	movw	r26, r22
    1534:	b9 01       	movw	r22, r18
    1536:	9d 01       	movw	r18, r26
    1538:	dc 01       	movw	r26, r24
    153a:	ca 01       	movw	r24, r20
    153c:	ad 01       	movw	r20, r26
    153e:	ef 93       	push	r30
    1540:	47 d0       	rcall	.+142    	; 0x15d0 <__divsf3_pse>
    1542:	99 d1       	rcall	.+818    	; 0x1876 <__fp_round>
    1544:	0a d0       	rcall	.+20     	; 0x155a <atan>
    1546:	5f 91       	pop	r21
    1548:	55 23       	and	r21, r21
    154a:	31 f0       	breq	.+12     	; 0x1558 <atan2+0x54>
    154c:	2b ed       	ldi	r18, 0xDB	; 219
    154e:	3f e0       	ldi	r19, 0x0F	; 15
    1550:	49 e4       	ldi	r20, 0x49	; 73
    1552:	50 fd       	sbrc	r21, 0
    1554:	49 ec       	ldi	r20, 0xC9	; 201
    1556:	4c cf       	rjmp	.-360    	; 0x13f0 <__addsf3>
    1558:	08 95       	ret

0000155a <atan>:
    155a:	df 93       	push	r29
    155c:	dd 27       	eor	r29, r29
    155e:	b9 2f       	mov	r27, r25
    1560:	bf 77       	andi	r27, 0x7F	; 127
    1562:	40 e8       	ldi	r20, 0x80	; 128
    1564:	5f e3       	ldi	r21, 0x3F	; 63
    1566:	16 16       	cp	r1, r22
    1568:	17 06       	cpc	r1, r23
    156a:	48 07       	cpc	r20, r24
    156c:	5b 07       	cpc	r21, r27
    156e:	10 f4       	brcc	.+4      	; 0x1574 <atan+0x1a>
    1570:	d9 2f       	mov	r29, r25
    1572:	bf d1       	rcall	.+894    	; 0x18f2 <inverse>
    1574:	9f 93       	push	r25
    1576:	8f 93       	push	r24
    1578:	7f 93       	push	r23
    157a:	6f 93       	push	r22
    157c:	6c d2       	rcall	.+1240   	; 0x1a56 <square>
    157e:	e8 ef       	ldi	r30, 0xF8	; 248
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	35 d1       	rcall	.+618    	; 0x17ee <__fp_powser>
    1584:	78 d1       	rcall	.+752    	; 0x1876 <__fp_round>
    1586:	2f 91       	pop	r18
    1588:	3f 91       	pop	r19
    158a:	4f 91       	pop	r20
    158c:	5f 91       	pop	r21
    158e:	c4 d1       	rcall	.+904    	; 0x1918 <__mulsf3x>
    1590:	dd 23       	and	r29, r29
    1592:	49 f0       	breq	.+18     	; 0x15a6 <atan+0x4c>
    1594:	90 58       	subi	r25, 0x80	; 128
    1596:	a2 ea       	ldi	r26, 0xA2	; 162
    1598:	2a ed       	ldi	r18, 0xDA	; 218
    159a:	3f e0       	ldi	r19, 0x0F	; 15
    159c:	49 ec       	ldi	r20, 0xC9	; 201
    159e:	5f e3       	ldi	r21, 0x3F	; 63
    15a0:	d0 78       	andi	r29, 0x80	; 128
    15a2:	5d 27       	eor	r21, r29
    15a4:	36 df       	rcall	.-404    	; 0x1412 <__addsf3x>
    15a6:	df 91       	pop	r29
    15a8:	66 c1       	rjmp	.+716    	; 0x1876 <__fp_round>

000015aa <__cmpsf2>:
    15aa:	f4 d0       	rcall	.+488    	; 0x1794 <__fp_cmp>
    15ac:	08 f4       	brcc	.+2      	; 0x15b0 <__cmpsf2+0x6>
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	08 95       	ret

000015b2 <__divsf3>:
    15b2:	0c d0       	rcall	.+24     	; 0x15cc <__divsf3x>
    15b4:	60 c1       	rjmp	.+704    	; 0x1876 <__fp_round>
    15b6:	58 d1       	rcall	.+688    	; 0x1868 <__fp_pscB>
    15b8:	40 f0       	brcs	.+16     	; 0x15ca <__divsf3+0x18>
    15ba:	4f d1       	rcall	.+670    	; 0x185a <__fp_pscA>
    15bc:	30 f0       	brcs	.+12     	; 0x15ca <__divsf3+0x18>
    15be:	21 f4       	brne	.+8      	; 0x15c8 <__divsf3+0x16>
    15c0:	5f 3f       	cpi	r21, 0xFF	; 255
    15c2:	19 f0       	breq	.+6      	; 0x15ca <__divsf3+0x18>
    15c4:	0b c1       	rjmp	.+534    	; 0x17dc <__fp_inf>
    15c6:	51 11       	cpse	r21, r1
    15c8:	8a c1       	rjmp	.+788    	; 0x18de <__fp_szero>
    15ca:	0e c1       	rjmp	.+540    	; 0x17e8 <__fp_nan>

000015cc <__divsf3x>:
    15cc:	65 d1       	rcall	.+714    	; 0x1898 <__fp_split3>
    15ce:	98 f3       	brcs	.-26     	; 0x15b6 <__divsf3+0x4>

000015d0 <__divsf3_pse>:
    15d0:	99 23       	and	r25, r25
    15d2:	c9 f3       	breq	.-14     	; 0x15c6 <__divsf3+0x14>
    15d4:	55 23       	and	r21, r21
    15d6:	b1 f3       	breq	.-20     	; 0x15c4 <__divsf3+0x12>
    15d8:	95 1b       	sub	r25, r21
    15da:	55 0b       	sbc	r21, r21
    15dc:	bb 27       	eor	r27, r27
    15de:	aa 27       	eor	r26, r26
    15e0:	62 17       	cp	r22, r18
    15e2:	73 07       	cpc	r23, r19
    15e4:	84 07       	cpc	r24, r20
    15e6:	38 f0       	brcs	.+14     	; 0x15f6 <__divsf3_pse+0x26>
    15e8:	9f 5f       	subi	r25, 0xFF	; 255
    15ea:	5f 4f       	sbci	r21, 0xFF	; 255
    15ec:	22 0f       	add	r18, r18
    15ee:	33 1f       	adc	r19, r19
    15f0:	44 1f       	adc	r20, r20
    15f2:	aa 1f       	adc	r26, r26
    15f4:	a9 f3       	breq	.-22     	; 0x15e0 <__divsf3_pse+0x10>
    15f6:	33 d0       	rcall	.+102    	; 0x165e <__divsf3_pse+0x8e>
    15f8:	0e 2e       	mov	r0, r30
    15fa:	3a f0       	brmi	.+14     	; 0x160a <__divsf3_pse+0x3a>
    15fc:	e0 e8       	ldi	r30, 0x80	; 128
    15fe:	30 d0       	rcall	.+96     	; 0x1660 <__divsf3_pse+0x90>
    1600:	91 50       	subi	r25, 0x01	; 1
    1602:	50 40       	sbci	r21, 0x00	; 0
    1604:	e6 95       	lsr	r30
    1606:	00 1c       	adc	r0, r0
    1608:	ca f7       	brpl	.-14     	; 0x15fc <__divsf3_pse+0x2c>
    160a:	29 d0       	rcall	.+82     	; 0x165e <__divsf3_pse+0x8e>
    160c:	fe 2f       	mov	r31, r30
    160e:	27 d0       	rcall	.+78     	; 0x165e <__divsf3_pse+0x8e>
    1610:	66 0f       	add	r22, r22
    1612:	77 1f       	adc	r23, r23
    1614:	88 1f       	adc	r24, r24
    1616:	bb 1f       	adc	r27, r27
    1618:	26 17       	cp	r18, r22
    161a:	37 07       	cpc	r19, r23
    161c:	48 07       	cpc	r20, r24
    161e:	ab 07       	cpc	r26, r27
    1620:	b0 e8       	ldi	r27, 0x80	; 128
    1622:	09 f0       	breq	.+2      	; 0x1626 <__divsf3_pse+0x56>
    1624:	bb 0b       	sbc	r27, r27
    1626:	80 2d       	mov	r24, r0
    1628:	bf 01       	movw	r22, r30
    162a:	ff 27       	eor	r31, r31
    162c:	93 58       	subi	r25, 0x83	; 131
    162e:	5f 4f       	sbci	r21, 0xFF	; 255
    1630:	2a f0       	brmi	.+10     	; 0x163c <__divsf3_pse+0x6c>
    1632:	9e 3f       	cpi	r25, 0xFE	; 254
    1634:	51 05       	cpc	r21, r1
    1636:	68 f0       	brcs	.+26     	; 0x1652 <__divsf3_pse+0x82>
    1638:	d1 c0       	rjmp	.+418    	; 0x17dc <__fp_inf>
    163a:	51 c1       	rjmp	.+674    	; 0x18de <__fp_szero>
    163c:	5f 3f       	cpi	r21, 0xFF	; 255
    163e:	ec f3       	brlt	.-6      	; 0x163a <__divsf3_pse+0x6a>
    1640:	98 3e       	cpi	r25, 0xE8	; 232
    1642:	dc f3       	brlt	.-10     	; 0x163a <__divsf3_pse+0x6a>
    1644:	86 95       	lsr	r24
    1646:	77 95       	ror	r23
    1648:	67 95       	ror	r22
    164a:	b7 95       	ror	r27
    164c:	f7 95       	ror	r31
    164e:	9f 5f       	subi	r25, 0xFF	; 255
    1650:	c9 f7       	brne	.-14     	; 0x1644 <__divsf3_pse+0x74>
    1652:	88 0f       	add	r24, r24
    1654:	91 1d       	adc	r25, r1
    1656:	96 95       	lsr	r25
    1658:	87 95       	ror	r24
    165a:	97 f9       	bld	r25, 7
    165c:	08 95       	ret
    165e:	e1 e0       	ldi	r30, 0x01	; 1
    1660:	66 0f       	add	r22, r22
    1662:	77 1f       	adc	r23, r23
    1664:	88 1f       	adc	r24, r24
    1666:	bb 1f       	adc	r27, r27
    1668:	62 17       	cp	r22, r18
    166a:	73 07       	cpc	r23, r19
    166c:	84 07       	cpc	r24, r20
    166e:	ba 07       	cpc	r27, r26
    1670:	20 f0       	brcs	.+8      	; 0x167a <__divsf3_pse+0xaa>
    1672:	62 1b       	sub	r22, r18
    1674:	73 0b       	sbc	r23, r19
    1676:	84 0b       	sbc	r24, r20
    1678:	ba 0b       	sbc	r27, r26
    167a:	ee 1f       	adc	r30, r30
    167c:	88 f7       	brcc	.-30     	; 0x1660 <__divsf3_pse+0x90>
    167e:	e0 95       	com	r30
    1680:	08 95       	ret

00001682 <__fixsfsi>:
    1682:	04 d0       	rcall	.+8      	; 0x168c <__fixunssfsi>
    1684:	68 94       	set
    1686:	b1 11       	cpse	r27, r1
    1688:	2a c1       	rjmp	.+596    	; 0x18de <__fp_szero>
    168a:	08 95       	ret

0000168c <__fixunssfsi>:
    168c:	0d d1       	rcall	.+538    	; 0x18a8 <__fp_splitA>
    168e:	88 f0       	brcs	.+34     	; 0x16b2 <__fixunssfsi+0x26>
    1690:	9f 57       	subi	r25, 0x7F	; 127
    1692:	90 f0       	brcs	.+36     	; 0x16b8 <__fixunssfsi+0x2c>
    1694:	b9 2f       	mov	r27, r25
    1696:	99 27       	eor	r25, r25
    1698:	b7 51       	subi	r27, 0x17	; 23
    169a:	a0 f0       	brcs	.+40     	; 0x16c4 <__fixunssfsi+0x38>
    169c:	d1 f0       	breq	.+52     	; 0x16d2 <__fixunssfsi+0x46>
    169e:	66 0f       	add	r22, r22
    16a0:	77 1f       	adc	r23, r23
    16a2:	88 1f       	adc	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	1a f0       	brmi	.+6      	; 0x16ae <__fixunssfsi+0x22>
    16a8:	ba 95       	dec	r27
    16aa:	c9 f7       	brne	.-14     	; 0x169e <__fixunssfsi+0x12>
    16ac:	12 c0       	rjmp	.+36     	; 0x16d2 <__fixunssfsi+0x46>
    16ae:	b1 30       	cpi	r27, 0x01	; 1
    16b0:	81 f0       	breq	.+32     	; 0x16d2 <__fixunssfsi+0x46>
    16b2:	14 d1       	rcall	.+552    	; 0x18dc <__fp_zero>
    16b4:	b1 e0       	ldi	r27, 0x01	; 1
    16b6:	08 95       	ret
    16b8:	11 c1       	rjmp	.+546    	; 0x18dc <__fp_zero>
    16ba:	67 2f       	mov	r22, r23
    16bc:	78 2f       	mov	r23, r24
    16be:	88 27       	eor	r24, r24
    16c0:	b8 5f       	subi	r27, 0xF8	; 248
    16c2:	39 f0       	breq	.+14     	; 0x16d2 <__fixunssfsi+0x46>
    16c4:	b9 3f       	cpi	r27, 0xF9	; 249
    16c6:	cc f3       	brlt	.-14     	; 0x16ba <__fixunssfsi+0x2e>
    16c8:	86 95       	lsr	r24
    16ca:	77 95       	ror	r23
    16cc:	67 95       	ror	r22
    16ce:	b3 95       	inc	r27
    16d0:	d9 f7       	brne	.-10     	; 0x16c8 <__fixunssfsi+0x3c>
    16d2:	3e f4       	brtc	.+14     	; 0x16e2 <__fixunssfsi+0x56>
    16d4:	90 95       	com	r25
    16d6:	80 95       	com	r24
    16d8:	70 95       	com	r23
    16da:	61 95       	neg	r22
    16dc:	7f 4f       	sbci	r23, 0xFF	; 255
    16de:	8f 4f       	sbci	r24, 0xFF	; 255
    16e0:	9f 4f       	sbci	r25, 0xFF	; 255
    16e2:	08 95       	ret

000016e4 <__floatunsisf>:
    16e4:	e8 94       	clt
    16e6:	09 c0       	rjmp	.+18     	; 0x16fa <__floatsisf+0x12>

000016e8 <__floatsisf>:
    16e8:	97 fb       	bst	r25, 7
    16ea:	3e f4       	brtc	.+14     	; 0x16fa <__floatsisf+0x12>
    16ec:	90 95       	com	r25
    16ee:	80 95       	com	r24
    16f0:	70 95       	com	r23
    16f2:	61 95       	neg	r22
    16f4:	7f 4f       	sbci	r23, 0xFF	; 255
    16f6:	8f 4f       	sbci	r24, 0xFF	; 255
    16f8:	9f 4f       	sbci	r25, 0xFF	; 255
    16fa:	99 23       	and	r25, r25
    16fc:	a9 f0       	breq	.+42     	; 0x1728 <__floatsisf+0x40>
    16fe:	f9 2f       	mov	r31, r25
    1700:	96 e9       	ldi	r25, 0x96	; 150
    1702:	bb 27       	eor	r27, r27
    1704:	93 95       	inc	r25
    1706:	f6 95       	lsr	r31
    1708:	87 95       	ror	r24
    170a:	77 95       	ror	r23
    170c:	67 95       	ror	r22
    170e:	b7 95       	ror	r27
    1710:	f1 11       	cpse	r31, r1
    1712:	f8 cf       	rjmp	.-16     	; 0x1704 <__floatsisf+0x1c>
    1714:	fa f4       	brpl	.+62     	; 0x1754 <__floatsisf+0x6c>
    1716:	bb 0f       	add	r27, r27
    1718:	11 f4       	brne	.+4      	; 0x171e <__floatsisf+0x36>
    171a:	60 ff       	sbrs	r22, 0
    171c:	1b c0       	rjmp	.+54     	; 0x1754 <__floatsisf+0x6c>
    171e:	6f 5f       	subi	r22, 0xFF	; 255
    1720:	7f 4f       	sbci	r23, 0xFF	; 255
    1722:	8f 4f       	sbci	r24, 0xFF	; 255
    1724:	9f 4f       	sbci	r25, 0xFF	; 255
    1726:	16 c0       	rjmp	.+44     	; 0x1754 <__floatsisf+0x6c>
    1728:	88 23       	and	r24, r24
    172a:	11 f0       	breq	.+4      	; 0x1730 <__floatsisf+0x48>
    172c:	96 e9       	ldi	r25, 0x96	; 150
    172e:	11 c0       	rjmp	.+34     	; 0x1752 <__floatsisf+0x6a>
    1730:	77 23       	and	r23, r23
    1732:	21 f0       	breq	.+8      	; 0x173c <__floatsisf+0x54>
    1734:	9e e8       	ldi	r25, 0x8E	; 142
    1736:	87 2f       	mov	r24, r23
    1738:	76 2f       	mov	r23, r22
    173a:	05 c0       	rjmp	.+10     	; 0x1746 <__floatsisf+0x5e>
    173c:	66 23       	and	r22, r22
    173e:	71 f0       	breq	.+28     	; 0x175c <__floatsisf+0x74>
    1740:	96 e8       	ldi	r25, 0x86	; 134
    1742:	86 2f       	mov	r24, r22
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	2a f0       	brmi	.+10     	; 0x1754 <__floatsisf+0x6c>
    174a:	9a 95       	dec	r25
    174c:	66 0f       	add	r22, r22
    174e:	77 1f       	adc	r23, r23
    1750:	88 1f       	adc	r24, r24
    1752:	da f7       	brpl	.-10     	; 0x174a <__floatsisf+0x62>
    1754:	88 0f       	add	r24, r24
    1756:	96 95       	lsr	r25
    1758:	87 95       	ror	r24
    175a:	97 f9       	bld	r25, 7
    175c:	08 95       	ret

0000175e <__fp_arccos>:
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	1f 93       	push	r17
    1764:	0f 93       	push	r16
    1766:	8b 01       	movw	r16, r22
    1768:	ec 01       	movw	r28, r24
    176a:	e5 e2       	ldi	r30, 0x25	; 37
    176c:	f1 e0       	ldi	r31, 0x01	; 1
    176e:	3f d0       	rcall	.+126    	; 0x17ee <__fp_powser>
    1770:	82 d0       	rcall	.+260    	; 0x1876 <__fp_round>
    1772:	98 01       	movw	r18, r16
    1774:	ae 01       	movw	r20, r28
    1776:	8b 01       	movw	r16, r22
    1778:	ec 01       	movw	r28, r24
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	70 e0       	ldi	r23, 0x00	; 0
    177e:	80 e8       	ldi	r24, 0x80	; 128
    1780:	9f e3       	ldi	r25, 0x3F	; 63
    1782:	35 de       	rcall	.-918    	; 0x13ee <__subsf3>
    1784:	2a d1       	rcall	.+596    	; 0x19da <sqrt>
    1786:	98 01       	movw	r18, r16
    1788:	ae 01       	movw	r20, r28
    178a:	0f 91       	pop	r16
    178c:	1f 91       	pop	r17
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	c2 c0       	rjmp	.+388    	; 0x1918 <__mulsf3x>

00001794 <__fp_cmp>:
    1794:	99 0f       	add	r25, r25
    1796:	00 08       	sbc	r0, r0
    1798:	55 0f       	add	r21, r21
    179a:	aa 0b       	sbc	r26, r26
    179c:	e0 e8       	ldi	r30, 0x80	; 128
    179e:	fe ef       	ldi	r31, 0xFE	; 254
    17a0:	16 16       	cp	r1, r22
    17a2:	17 06       	cpc	r1, r23
    17a4:	e8 07       	cpc	r30, r24
    17a6:	f9 07       	cpc	r31, r25
    17a8:	c0 f0       	brcs	.+48     	; 0x17da <__fp_cmp+0x46>
    17aa:	12 16       	cp	r1, r18
    17ac:	13 06       	cpc	r1, r19
    17ae:	e4 07       	cpc	r30, r20
    17b0:	f5 07       	cpc	r31, r21
    17b2:	98 f0       	brcs	.+38     	; 0x17da <__fp_cmp+0x46>
    17b4:	62 1b       	sub	r22, r18
    17b6:	73 0b       	sbc	r23, r19
    17b8:	84 0b       	sbc	r24, r20
    17ba:	95 0b       	sbc	r25, r21
    17bc:	39 f4       	brne	.+14     	; 0x17cc <__fp_cmp+0x38>
    17be:	0a 26       	eor	r0, r26
    17c0:	61 f0       	breq	.+24     	; 0x17da <__fp_cmp+0x46>
    17c2:	23 2b       	or	r18, r19
    17c4:	24 2b       	or	r18, r20
    17c6:	25 2b       	or	r18, r21
    17c8:	21 f4       	brne	.+8      	; 0x17d2 <__fp_cmp+0x3e>
    17ca:	08 95       	ret
    17cc:	0a 26       	eor	r0, r26
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <__fp_cmp+0x3e>
    17d0:	a1 40       	sbci	r26, 0x01	; 1
    17d2:	a6 95       	lsr	r26
    17d4:	8f ef       	ldi	r24, 0xFF	; 255
    17d6:	81 1d       	adc	r24, r1
    17d8:	81 1d       	adc	r24, r1
    17da:	08 95       	ret

000017dc <__fp_inf>:
    17dc:	97 f9       	bld	r25, 7
    17de:	9f 67       	ori	r25, 0x7F	; 127
    17e0:	80 e8       	ldi	r24, 0x80	; 128
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	60 e0       	ldi	r22, 0x00	; 0
    17e6:	08 95       	ret

000017e8 <__fp_nan>:
    17e8:	9f ef       	ldi	r25, 0xFF	; 255
    17ea:	80 ec       	ldi	r24, 0xC0	; 192
    17ec:	08 95       	ret

000017ee <__fp_powser>:
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	1f 93       	push	r17
    17f4:	0f 93       	push	r16
    17f6:	ff 92       	push	r15
    17f8:	ef 92       	push	r14
    17fa:	df 92       	push	r13
    17fc:	7b 01       	movw	r14, r22
    17fe:	8c 01       	movw	r16, r24
    1800:	68 94       	set
    1802:	05 c0       	rjmp	.+10     	; 0x180e <__fp_powser+0x20>
    1804:	da 2e       	mov	r13, r26
    1806:	ef 01       	movw	r28, r30
    1808:	87 d0       	rcall	.+270    	; 0x1918 <__mulsf3x>
    180a:	fe 01       	movw	r30, r28
    180c:	e8 94       	clt
    180e:	a5 91       	lpm	r26, Z+
    1810:	25 91       	lpm	r18, Z+
    1812:	35 91       	lpm	r19, Z+
    1814:	45 91       	lpm	r20, Z+
    1816:	55 91       	lpm	r21, Z+
    1818:	ae f3       	brts	.-22     	; 0x1804 <__fp_powser+0x16>
    181a:	ef 01       	movw	r28, r30
    181c:	fa dd       	rcall	.-1036   	; 0x1412 <__addsf3x>
    181e:	fe 01       	movw	r30, r28
    1820:	97 01       	movw	r18, r14
    1822:	a8 01       	movw	r20, r16
    1824:	da 94       	dec	r13
    1826:	79 f7       	brne	.-34     	; 0x1806 <__fp_powser+0x18>
    1828:	df 90       	pop	r13
    182a:	ef 90       	pop	r14
    182c:	ff 90       	pop	r15
    182e:	0f 91       	pop	r16
    1830:	1f 91       	pop	r17
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <__fp_powsodd>:
    1838:	9f 93       	push	r25
    183a:	8f 93       	push	r24
    183c:	7f 93       	push	r23
    183e:	6f 93       	push	r22
    1840:	ff 93       	push	r31
    1842:	ef 93       	push	r30
    1844:	9b 01       	movw	r18, r22
    1846:	ac 01       	movw	r20, r24
    1848:	5b d0       	rcall	.+182    	; 0x1900 <__mulsf3>
    184a:	ef 91       	pop	r30
    184c:	ff 91       	pop	r31
    184e:	cf df       	rcall	.-98     	; 0x17ee <__fp_powser>
    1850:	2f 91       	pop	r18
    1852:	3f 91       	pop	r19
    1854:	4f 91       	pop	r20
    1856:	5f 91       	pop	r21
    1858:	53 c0       	rjmp	.+166    	; 0x1900 <__mulsf3>

0000185a <__fp_pscA>:
    185a:	00 24       	eor	r0, r0
    185c:	0a 94       	dec	r0
    185e:	16 16       	cp	r1, r22
    1860:	17 06       	cpc	r1, r23
    1862:	18 06       	cpc	r1, r24
    1864:	09 06       	cpc	r0, r25
    1866:	08 95       	ret

00001868 <__fp_pscB>:
    1868:	00 24       	eor	r0, r0
    186a:	0a 94       	dec	r0
    186c:	12 16       	cp	r1, r18
    186e:	13 06       	cpc	r1, r19
    1870:	14 06       	cpc	r1, r20
    1872:	05 06       	cpc	r0, r21
    1874:	08 95       	ret

00001876 <__fp_round>:
    1876:	09 2e       	mov	r0, r25
    1878:	03 94       	inc	r0
    187a:	00 0c       	add	r0, r0
    187c:	11 f4       	brne	.+4      	; 0x1882 <__fp_round+0xc>
    187e:	88 23       	and	r24, r24
    1880:	52 f0       	brmi	.+20     	; 0x1896 <__fp_round+0x20>
    1882:	bb 0f       	add	r27, r27
    1884:	40 f4       	brcc	.+16     	; 0x1896 <__fp_round+0x20>
    1886:	bf 2b       	or	r27, r31
    1888:	11 f4       	brne	.+4      	; 0x188e <__fp_round+0x18>
    188a:	60 ff       	sbrs	r22, 0
    188c:	04 c0       	rjmp	.+8      	; 0x1896 <__fp_round+0x20>
    188e:	6f 5f       	subi	r22, 0xFF	; 255
    1890:	7f 4f       	sbci	r23, 0xFF	; 255
    1892:	8f 4f       	sbci	r24, 0xFF	; 255
    1894:	9f 4f       	sbci	r25, 0xFF	; 255
    1896:	08 95       	ret

00001898 <__fp_split3>:
    1898:	57 fd       	sbrc	r21, 7
    189a:	90 58       	subi	r25, 0x80	; 128
    189c:	44 0f       	add	r20, r20
    189e:	55 1f       	adc	r21, r21
    18a0:	59 f0       	breq	.+22     	; 0x18b8 <__fp_splitA+0x10>
    18a2:	5f 3f       	cpi	r21, 0xFF	; 255
    18a4:	71 f0       	breq	.+28     	; 0x18c2 <__fp_splitA+0x1a>
    18a6:	47 95       	ror	r20

000018a8 <__fp_splitA>:
    18a8:	88 0f       	add	r24, r24
    18aa:	97 fb       	bst	r25, 7
    18ac:	99 1f       	adc	r25, r25
    18ae:	61 f0       	breq	.+24     	; 0x18c8 <__fp_splitA+0x20>
    18b0:	9f 3f       	cpi	r25, 0xFF	; 255
    18b2:	79 f0       	breq	.+30     	; 0x18d2 <__fp_splitA+0x2a>
    18b4:	87 95       	ror	r24
    18b6:	08 95       	ret
    18b8:	12 16       	cp	r1, r18
    18ba:	13 06       	cpc	r1, r19
    18bc:	14 06       	cpc	r1, r20
    18be:	55 1f       	adc	r21, r21
    18c0:	f2 cf       	rjmp	.-28     	; 0x18a6 <__fp_split3+0xe>
    18c2:	46 95       	lsr	r20
    18c4:	f1 df       	rcall	.-30     	; 0x18a8 <__fp_splitA>
    18c6:	08 c0       	rjmp	.+16     	; 0x18d8 <__fp_splitA+0x30>
    18c8:	16 16       	cp	r1, r22
    18ca:	17 06       	cpc	r1, r23
    18cc:	18 06       	cpc	r1, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	f1 cf       	rjmp	.-30     	; 0x18b4 <__fp_splitA+0xc>
    18d2:	86 95       	lsr	r24
    18d4:	71 05       	cpc	r23, r1
    18d6:	61 05       	cpc	r22, r1
    18d8:	08 94       	sec
    18da:	08 95       	ret

000018dc <__fp_zero>:
    18dc:	e8 94       	clt

000018de <__fp_szero>:
    18de:	bb 27       	eor	r27, r27
    18e0:	66 27       	eor	r22, r22
    18e2:	77 27       	eor	r23, r23
    18e4:	cb 01       	movw	r24, r22
    18e6:	97 f9       	bld	r25, 7
    18e8:	08 95       	ret

000018ea <__gesf2>:
    18ea:	54 df       	rcall	.-344    	; 0x1794 <__fp_cmp>
    18ec:	08 f4       	brcc	.+2      	; 0x18f0 <__gesf2+0x6>
    18ee:	8f ef       	ldi	r24, 0xFF	; 255
    18f0:	08 95       	ret

000018f2 <inverse>:
    18f2:	9b 01       	movw	r18, r22
    18f4:	ac 01       	movw	r20, r24
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	80 e8       	ldi	r24, 0x80	; 128
    18fc:	9f e3       	ldi	r25, 0x3F	; 63
    18fe:	59 ce       	rjmp	.-846    	; 0x15b2 <__divsf3>

00001900 <__mulsf3>:
    1900:	0b d0       	rcall	.+22     	; 0x1918 <__mulsf3x>
    1902:	b9 cf       	rjmp	.-142    	; 0x1876 <__fp_round>
    1904:	aa df       	rcall	.-172    	; 0x185a <__fp_pscA>
    1906:	28 f0       	brcs	.+10     	; 0x1912 <__mulsf3+0x12>
    1908:	af df       	rcall	.-162    	; 0x1868 <__fp_pscB>
    190a:	18 f0       	brcs	.+6      	; 0x1912 <__mulsf3+0x12>
    190c:	95 23       	and	r25, r21
    190e:	09 f0       	breq	.+2      	; 0x1912 <__mulsf3+0x12>
    1910:	65 cf       	rjmp	.-310    	; 0x17dc <__fp_inf>
    1912:	6a cf       	rjmp	.-300    	; 0x17e8 <__fp_nan>
    1914:	11 24       	eor	r1, r1
    1916:	e3 cf       	rjmp	.-58     	; 0x18de <__fp_szero>

00001918 <__mulsf3x>:
    1918:	bf df       	rcall	.-130    	; 0x1898 <__fp_split3>
    191a:	a0 f3       	brcs	.-24     	; 0x1904 <__mulsf3+0x4>

0000191c <__mulsf3_pse>:
    191c:	95 9f       	mul	r25, r21
    191e:	d1 f3       	breq	.-12     	; 0x1914 <__mulsf3+0x14>
    1920:	95 0f       	add	r25, r21
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	55 1f       	adc	r21, r21
    1926:	62 9f       	mul	r22, r18
    1928:	f0 01       	movw	r30, r0
    192a:	72 9f       	mul	r23, r18
    192c:	bb 27       	eor	r27, r27
    192e:	f0 0d       	add	r31, r0
    1930:	b1 1d       	adc	r27, r1
    1932:	63 9f       	mul	r22, r19
    1934:	aa 27       	eor	r26, r26
    1936:	f0 0d       	add	r31, r0
    1938:	b1 1d       	adc	r27, r1
    193a:	aa 1f       	adc	r26, r26
    193c:	64 9f       	mul	r22, r20
    193e:	66 27       	eor	r22, r22
    1940:	b0 0d       	add	r27, r0
    1942:	a1 1d       	adc	r26, r1
    1944:	66 1f       	adc	r22, r22
    1946:	82 9f       	mul	r24, r18
    1948:	22 27       	eor	r18, r18
    194a:	b0 0d       	add	r27, r0
    194c:	a1 1d       	adc	r26, r1
    194e:	62 1f       	adc	r22, r18
    1950:	73 9f       	mul	r23, r19
    1952:	b0 0d       	add	r27, r0
    1954:	a1 1d       	adc	r26, r1
    1956:	62 1f       	adc	r22, r18
    1958:	83 9f       	mul	r24, r19
    195a:	a0 0d       	add	r26, r0
    195c:	61 1d       	adc	r22, r1
    195e:	22 1f       	adc	r18, r18
    1960:	74 9f       	mul	r23, r20
    1962:	33 27       	eor	r19, r19
    1964:	a0 0d       	add	r26, r0
    1966:	61 1d       	adc	r22, r1
    1968:	23 1f       	adc	r18, r19
    196a:	84 9f       	mul	r24, r20
    196c:	60 0d       	add	r22, r0
    196e:	21 1d       	adc	r18, r1
    1970:	82 2f       	mov	r24, r18
    1972:	76 2f       	mov	r23, r22
    1974:	6a 2f       	mov	r22, r26
    1976:	11 24       	eor	r1, r1
    1978:	9f 57       	subi	r25, 0x7F	; 127
    197a:	50 40       	sbci	r21, 0x00	; 0
    197c:	8a f0       	brmi	.+34     	; 0x19a0 <__mulsf3_pse+0x84>
    197e:	e1 f0       	breq	.+56     	; 0x19b8 <__mulsf3_pse+0x9c>
    1980:	88 23       	and	r24, r24
    1982:	4a f0       	brmi	.+18     	; 0x1996 <__mulsf3_pse+0x7a>
    1984:	ee 0f       	add	r30, r30
    1986:	ff 1f       	adc	r31, r31
    1988:	bb 1f       	adc	r27, r27
    198a:	66 1f       	adc	r22, r22
    198c:	77 1f       	adc	r23, r23
    198e:	88 1f       	adc	r24, r24
    1990:	91 50       	subi	r25, 0x01	; 1
    1992:	50 40       	sbci	r21, 0x00	; 0
    1994:	a9 f7       	brne	.-22     	; 0x1980 <__mulsf3_pse+0x64>
    1996:	9e 3f       	cpi	r25, 0xFE	; 254
    1998:	51 05       	cpc	r21, r1
    199a:	70 f0       	brcs	.+28     	; 0x19b8 <__mulsf3_pse+0x9c>
    199c:	1f cf       	rjmp	.-450    	; 0x17dc <__fp_inf>
    199e:	9f cf       	rjmp	.-194    	; 0x18de <__fp_szero>
    19a0:	5f 3f       	cpi	r21, 0xFF	; 255
    19a2:	ec f3       	brlt	.-6      	; 0x199e <__mulsf3_pse+0x82>
    19a4:	98 3e       	cpi	r25, 0xE8	; 232
    19a6:	dc f3       	brlt	.-10     	; 0x199e <__mulsf3_pse+0x82>
    19a8:	86 95       	lsr	r24
    19aa:	77 95       	ror	r23
    19ac:	67 95       	ror	r22
    19ae:	b7 95       	ror	r27
    19b0:	f7 95       	ror	r31
    19b2:	e7 95       	ror	r30
    19b4:	9f 5f       	subi	r25, 0xFF	; 255
    19b6:	c1 f7       	brne	.-16     	; 0x19a8 <__mulsf3_pse+0x8c>
    19b8:	fe 2b       	or	r31, r30
    19ba:	88 0f       	add	r24, r24
    19bc:	91 1d       	adc	r25, r1
    19be:	96 95       	lsr	r25
    19c0:	87 95       	ror	r24
    19c2:	97 f9       	bld	r25, 7
    19c4:	08 95       	ret

000019c6 <sin>:
    19c6:	9f 93       	push	r25
    19c8:	5f d0       	rcall	.+190    	; 0x1a88 <__fp_rempio2>
    19ca:	0f 90       	pop	r0
    19cc:	07 fc       	sbrc	r0, 7
    19ce:	ee 5f       	subi	r30, 0xFE	; 254
    19d0:	82 c0       	rjmp	.+260    	; 0x1ad6 <__fp_sinus>
    19d2:	11 f4       	brne	.+4      	; 0x19d8 <sin+0x12>
    19d4:	0e f4       	brtc	.+2      	; 0x19d8 <sin+0x12>
    19d6:	08 cf       	rjmp	.-496    	; 0x17e8 <__fp_nan>
    19d8:	41 c0       	rjmp	.+130    	; 0x1a5c <__fp_mpack>

000019da <sqrt>:
    19da:	66 df       	rcall	.-308    	; 0x18a8 <__fp_splitA>
    19dc:	d0 f3       	brcs	.-12     	; 0x19d2 <sin+0xc>
    19de:	99 23       	and	r25, r25
    19e0:	d9 f3       	breq	.-10     	; 0x19d8 <sin+0x12>
    19e2:	ce f3       	brts	.-14     	; 0x19d6 <sin+0x10>
    19e4:	9f 57       	subi	r25, 0x7F	; 127
    19e6:	55 0b       	sbc	r21, r21
    19e8:	87 ff       	sbrs	r24, 7
    19ea:	46 d0       	rcall	.+140    	; 0x1a78 <__fp_norm2>
    19ec:	00 24       	eor	r0, r0
    19ee:	a0 e6       	ldi	r26, 0x60	; 96
    19f0:	40 ea       	ldi	r20, 0xA0	; 160
    19f2:	90 01       	movw	r18, r0
    19f4:	80 58       	subi	r24, 0x80	; 128
    19f6:	56 95       	lsr	r21
    19f8:	97 95       	ror	r25
    19fa:	28 f4       	brcc	.+10     	; 0x1a06 <sqrt+0x2c>
    19fc:	80 5c       	subi	r24, 0xC0	; 192
    19fe:	66 0f       	add	r22, r22
    1a00:	77 1f       	adc	r23, r23
    1a02:	88 1f       	adc	r24, r24
    1a04:	20 f0       	brcs	.+8      	; 0x1a0e <sqrt+0x34>
    1a06:	26 17       	cp	r18, r22
    1a08:	37 07       	cpc	r19, r23
    1a0a:	48 07       	cpc	r20, r24
    1a0c:	30 f4       	brcc	.+12     	; 0x1a1a <sqrt+0x40>
    1a0e:	62 1b       	sub	r22, r18
    1a10:	73 0b       	sbc	r23, r19
    1a12:	84 0b       	sbc	r24, r20
    1a14:	20 29       	or	r18, r0
    1a16:	31 29       	or	r19, r1
    1a18:	4a 2b       	or	r20, r26
    1a1a:	a6 95       	lsr	r26
    1a1c:	17 94       	ror	r1
    1a1e:	07 94       	ror	r0
    1a20:	20 25       	eor	r18, r0
    1a22:	31 25       	eor	r19, r1
    1a24:	4a 27       	eor	r20, r26
    1a26:	58 f7       	brcc	.-42     	; 0x19fe <sqrt+0x24>
    1a28:	66 0f       	add	r22, r22
    1a2a:	77 1f       	adc	r23, r23
    1a2c:	88 1f       	adc	r24, r24
    1a2e:	20 f0       	brcs	.+8      	; 0x1a38 <sqrt+0x5e>
    1a30:	26 17       	cp	r18, r22
    1a32:	37 07       	cpc	r19, r23
    1a34:	48 07       	cpc	r20, r24
    1a36:	30 f4       	brcc	.+12     	; 0x1a44 <sqrt+0x6a>
    1a38:	62 0b       	sbc	r22, r18
    1a3a:	73 0b       	sbc	r23, r19
    1a3c:	84 0b       	sbc	r24, r20
    1a3e:	20 0d       	add	r18, r0
    1a40:	31 1d       	adc	r19, r1
    1a42:	41 1d       	adc	r20, r1
    1a44:	a0 95       	com	r26
    1a46:	81 f7       	brne	.-32     	; 0x1a28 <sqrt+0x4e>
    1a48:	b9 01       	movw	r22, r18
    1a4a:	84 2f       	mov	r24, r20
    1a4c:	91 58       	subi	r25, 0x81	; 129
    1a4e:	88 0f       	add	r24, r24
    1a50:	96 95       	lsr	r25
    1a52:	87 95       	ror	r24
    1a54:	08 95       	ret

00001a56 <square>:
    1a56:	9b 01       	movw	r18, r22
    1a58:	ac 01       	movw	r20, r24
    1a5a:	52 cf       	rjmp	.-348    	; 0x1900 <__mulsf3>

00001a5c <__fp_mpack>:
    1a5c:	9f 3f       	cpi	r25, 0xFF	; 255
    1a5e:	31 f0       	breq	.+12     	; 0x1a6c <__fp_mpack_finite+0xc>

00001a60 <__fp_mpack_finite>:
    1a60:	91 50       	subi	r25, 0x01	; 1
    1a62:	20 f4       	brcc	.+8      	; 0x1a6c <__fp_mpack_finite+0xc>
    1a64:	87 95       	ror	r24
    1a66:	77 95       	ror	r23
    1a68:	67 95       	ror	r22
    1a6a:	b7 95       	ror	r27
    1a6c:	88 0f       	add	r24, r24
    1a6e:	91 1d       	adc	r25, r1
    1a70:	96 95       	lsr	r25
    1a72:	87 95       	ror	r24
    1a74:	97 f9       	bld	r25, 7
    1a76:	08 95       	ret

00001a78 <__fp_norm2>:
    1a78:	91 50       	subi	r25, 0x01	; 1
    1a7a:	50 40       	sbci	r21, 0x00	; 0
    1a7c:	66 0f       	add	r22, r22
    1a7e:	77 1f       	adc	r23, r23
    1a80:	88 1f       	adc	r24, r24
    1a82:	d2 f7       	brpl	.-12     	; 0x1a78 <__fp_norm2>
    1a84:	08 95       	ret
    1a86:	b0 ce       	rjmp	.-672    	; 0x17e8 <__fp_nan>

00001a88 <__fp_rempio2>:
    1a88:	0f df       	rcall	.-482    	; 0x18a8 <__fp_splitA>
    1a8a:	e8 f3       	brcs	.-6      	; 0x1a86 <__fp_norm2+0xe>
    1a8c:	e8 94       	clt
    1a8e:	e0 e0       	ldi	r30, 0x00	; 0
    1a90:	bb 27       	eor	r27, r27
    1a92:	9f 57       	subi	r25, 0x7F	; 127
    1a94:	f0 f0       	brcs	.+60     	; 0x1ad2 <__fp_rempio2+0x4a>
    1a96:	2a ed       	ldi	r18, 0xDA	; 218
    1a98:	3f e0       	ldi	r19, 0x0F	; 15
    1a9a:	49 ec       	ldi	r20, 0xC9	; 201
    1a9c:	06 c0       	rjmp	.+12     	; 0x1aaa <__fp_rempio2+0x22>
    1a9e:	ee 0f       	add	r30, r30
    1aa0:	bb 0f       	add	r27, r27
    1aa2:	66 1f       	adc	r22, r22
    1aa4:	77 1f       	adc	r23, r23
    1aa6:	88 1f       	adc	r24, r24
    1aa8:	28 f0       	brcs	.+10     	; 0x1ab4 <__fp_rempio2+0x2c>
    1aaa:	b2 3a       	cpi	r27, 0xA2	; 162
    1aac:	62 07       	cpc	r22, r18
    1aae:	73 07       	cpc	r23, r19
    1ab0:	84 07       	cpc	r24, r20
    1ab2:	28 f0       	brcs	.+10     	; 0x1abe <__fp_rempio2+0x36>
    1ab4:	b2 5a       	subi	r27, 0xA2	; 162
    1ab6:	62 0b       	sbc	r22, r18
    1ab8:	73 0b       	sbc	r23, r19
    1aba:	84 0b       	sbc	r24, r20
    1abc:	e3 95       	inc	r30
    1abe:	9a 95       	dec	r25
    1ac0:	72 f7       	brpl	.-36     	; 0x1a9e <__fp_rempio2+0x16>
    1ac2:	80 38       	cpi	r24, 0x80	; 128
    1ac4:	30 f4       	brcc	.+12     	; 0x1ad2 <__fp_rempio2+0x4a>
    1ac6:	9a 95       	dec	r25
    1ac8:	bb 0f       	add	r27, r27
    1aca:	66 1f       	adc	r22, r22
    1acc:	77 1f       	adc	r23, r23
    1ace:	88 1f       	adc	r24, r24
    1ad0:	d2 f7       	brpl	.-12     	; 0x1ac6 <__fp_rempio2+0x3e>
    1ad2:	90 48       	sbci	r25, 0x80	; 128
    1ad4:	c5 cf       	rjmp	.-118    	; 0x1a60 <__fp_mpack_finite>

00001ad6 <__fp_sinus>:
    1ad6:	ef 93       	push	r30
    1ad8:	e0 ff       	sbrs	r30, 0
    1ada:	06 c0       	rjmp	.+12     	; 0x1ae8 <__fp_sinus+0x12>
    1adc:	a2 ea       	ldi	r26, 0xA2	; 162
    1ade:	2a ed       	ldi	r18, 0xDA	; 218
    1ae0:	3f e0       	ldi	r19, 0x0F	; 15
    1ae2:	49 ec       	ldi	r20, 0xC9	; 201
    1ae4:	5f eb       	ldi	r21, 0xBF	; 191
    1ae6:	95 dc       	rcall	.-1750   	; 0x1412 <__addsf3x>
    1ae8:	c6 de       	rcall	.-628    	; 0x1876 <__fp_round>
    1aea:	0f 90       	pop	r0
    1aec:	03 94       	inc	r0
    1aee:	01 fc       	sbrc	r0, 1
    1af0:	90 58       	subi	r25, 0x80	; 128
    1af2:	ed e4       	ldi	r30, 0x4D	; 77
    1af4:	f1 e0       	ldi	r31, 0x01	; 1
    1af6:	a0 ce       	rjmp	.-704    	; 0x1838 <__fp_powsodd>

00001af8 <__divmodhi4>:
    1af8:	97 fb       	bst	r25, 7
    1afa:	07 2e       	mov	r0, r23
    1afc:	16 f4       	brtc	.+4      	; 0x1b02 <__divmodhi4+0xa>
    1afe:	00 94       	com	r0
    1b00:	06 d0       	rcall	.+12     	; 0x1b0e <__divmodhi4_neg1>
    1b02:	77 fd       	sbrc	r23, 7
    1b04:	08 d0       	rcall	.+16     	; 0x1b16 <__divmodhi4_neg2>
    1b06:	27 d0       	rcall	.+78     	; 0x1b56 <__udivmodhi4>
    1b08:	07 fc       	sbrc	r0, 7
    1b0a:	05 d0       	rcall	.+10     	; 0x1b16 <__divmodhi4_neg2>
    1b0c:	3e f4       	brtc	.+14     	; 0x1b1c <__divmodhi4_exit>

00001b0e <__divmodhi4_neg1>:
    1b0e:	90 95       	com	r25
    1b10:	81 95       	neg	r24
    1b12:	9f 4f       	sbci	r25, 0xFF	; 255
    1b14:	08 95       	ret

00001b16 <__divmodhi4_neg2>:
    1b16:	70 95       	com	r23
    1b18:	61 95       	neg	r22
    1b1a:	7f 4f       	sbci	r23, 0xFF	; 255

00001b1c <__divmodhi4_exit>:
    1b1c:	08 95       	ret

00001b1e <__divmodsi4>:
    1b1e:	05 2e       	mov	r0, r21
    1b20:	97 fb       	bst	r25, 7
    1b22:	16 f4       	brtc	.+4      	; 0x1b28 <__divmodsi4+0xa>
    1b24:	00 94       	com	r0
    1b26:	0f d0       	rcall	.+30     	; 0x1b46 <__negsi2>
    1b28:	57 fd       	sbrc	r21, 7
    1b2a:	05 d0       	rcall	.+10     	; 0x1b36 <__divmodsi4_neg2>
    1b2c:	28 d0       	rcall	.+80     	; 0x1b7e <__udivmodsi4>
    1b2e:	07 fc       	sbrc	r0, 7
    1b30:	02 d0       	rcall	.+4      	; 0x1b36 <__divmodsi4_neg2>
    1b32:	46 f4       	brtc	.+16     	; 0x1b44 <__divmodsi4_exit>
    1b34:	08 c0       	rjmp	.+16     	; 0x1b46 <__negsi2>

00001b36 <__divmodsi4_neg2>:
    1b36:	50 95       	com	r21
    1b38:	40 95       	com	r20
    1b3a:	30 95       	com	r19
    1b3c:	21 95       	neg	r18
    1b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b40:	4f 4f       	sbci	r20, 0xFF	; 255
    1b42:	5f 4f       	sbci	r21, 0xFF	; 255

00001b44 <__divmodsi4_exit>:
    1b44:	08 95       	ret

00001b46 <__negsi2>:
    1b46:	90 95       	com	r25
    1b48:	80 95       	com	r24
    1b4a:	70 95       	com	r23
    1b4c:	61 95       	neg	r22
    1b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b50:	8f 4f       	sbci	r24, 0xFF	; 255
    1b52:	9f 4f       	sbci	r25, 0xFF	; 255
    1b54:	08 95       	ret

00001b56 <__udivmodhi4>:
    1b56:	aa 1b       	sub	r26, r26
    1b58:	bb 1b       	sub	r27, r27
    1b5a:	51 e1       	ldi	r21, 0x11	; 17
    1b5c:	07 c0       	rjmp	.+14     	; 0x1b6c <__udivmodhi4_ep>

00001b5e <__udivmodhi4_loop>:
    1b5e:	aa 1f       	adc	r26, r26
    1b60:	bb 1f       	adc	r27, r27
    1b62:	a6 17       	cp	r26, r22
    1b64:	b7 07       	cpc	r27, r23
    1b66:	10 f0       	brcs	.+4      	; 0x1b6c <__udivmodhi4_ep>
    1b68:	a6 1b       	sub	r26, r22
    1b6a:	b7 0b       	sbc	r27, r23

00001b6c <__udivmodhi4_ep>:
    1b6c:	88 1f       	adc	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	5a 95       	dec	r21
    1b72:	a9 f7       	brne	.-22     	; 0x1b5e <__udivmodhi4_loop>
    1b74:	80 95       	com	r24
    1b76:	90 95       	com	r25
    1b78:	bc 01       	movw	r22, r24
    1b7a:	cd 01       	movw	r24, r26
    1b7c:	08 95       	ret

00001b7e <__udivmodsi4>:
    1b7e:	a1 e2       	ldi	r26, 0x21	; 33
    1b80:	1a 2e       	mov	r1, r26
    1b82:	aa 1b       	sub	r26, r26
    1b84:	bb 1b       	sub	r27, r27
    1b86:	fd 01       	movw	r30, r26
    1b88:	0d c0       	rjmp	.+26     	; 0x1ba4 <__udivmodsi4_ep>

00001b8a <__udivmodsi4_loop>:
    1b8a:	aa 1f       	adc	r26, r26
    1b8c:	bb 1f       	adc	r27, r27
    1b8e:	ee 1f       	adc	r30, r30
    1b90:	ff 1f       	adc	r31, r31
    1b92:	a2 17       	cp	r26, r18
    1b94:	b3 07       	cpc	r27, r19
    1b96:	e4 07       	cpc	r30, r20
    1b98:	f5 07       	cpc	r31, r21
    1b9a:	20 f0       	brcs	.+8      	; 0x1ba4 <__udivmodsi4_ep>
    1b9c:	a2 1b       	sub	r26, r18
    1b9e:	b3 0b       	sbc	r27, r19
    1ba0:	e4 0b       	sbc	r30, r20
    1ba2:	f5 0b       	sbc	r31, r21

00001ba4 <__udivmodsi4_ep>:
    1ba4:	66 1f       	adc	r22, r22
    1ba6:	77 1f       	adc	r23, r23
    1ba8:	88 1f       	adc	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	1a 94       	dec	r1
    1bae:	69 f7       	brne	.-38     	; 0x1b8a <__udivmodsi4_loop>
    1bb0:	60 95       	com	r22
    1bb2:	70 95       	com	r23
    1bb4:	80 95       	com	r24
    1bb6:	90 95       	com	r25
    1bb8:	9b 01       	movw	r18, r22
    1bba:	ac 01       	movw	r20, r24
    1bbc:	bd 01       	movw	r22, r26
    1bbe:	cf 01       	movw	r24, r30
    1bc0:	08 95       	ret

00001bc2 <itoa>:
    1bc2:	45 32       	cpi	r20, 0x25	; 37
    1bc4:	51 05       	cpc	r21, r1
    1bc6:	18 f4       	brcc	.+6      	; 0x1bce <itoa+0xc>
    1bc8:	42 30       	cpi	r20, 0x02	; 2
    1bca:	08 f0       	brcs	.+2      	; 0x1bce <itoa+0xc>
    1bcc:	04 c0       	rjmp	.+8      	; 0x1bd6 <__itoa_ncheck>
    1bce:	fb 01       	movw	r30, r22
    1bd0:	10 82       	st	Z, r1
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	08 95       	ret

00001bd6 <__itoa_ncheck>:
    1bd6:	bb 27       	eor	r27, r27
    1bd8:	4a 30       	cpi	r20, 0x0A	; 10
    1bda:	31 f4       	brne	.+12     	; 0x1be8 <__itoa_ncheck+0x12>
    1bdc:	99 23       	and	r25, r25
    1bde:	22 f4       	brpl	.+8      	; 0x1be8 <__itoa_ncheck+0x12>
    1be0:	bd e2       	ldi	r27, 0x2D	; 45
    1be2:	90 95       	com	r25
    1be4:	81 95       	neg	r24
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	01 c0       	rjmp	.+2      	; 0x1bec <__utoa_common>

00001bea <__utoa_ncheck>:
    1bea:	bb 27       	eor	r27, r27

00001bec <__utoa_common>:
    1bec:	fb 01       	movw	r30, r22
    1bee:	55 27       	eor	r21, r21
    1bf0:	aa 27       	eor	r26, r26
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	aa 1f       	adc	r26, r26
    1bf8:	a4 17       	cp	r26, r20
    1bfa:	10 f0       	brcs	.+4      	; 0x1c00 <__utoa_common+0x14>
    1bfc:	a4 1b       	sub	r26, r20
    1bfe:	83 95       	inc	r24
    1c00:	50 51       	subi	r21, 0x10	; 16
    1c02:	b9 f7       	brne	.-18     	; 0x1bf2 <__utoa_common+0x6>
    1c04:	a0 5d       	subi	r26, 0xD0	; 208
    1c06:	aa 33       	cpi	r26, 0x3A	; 58
    1c08:	08 f0       	brcs	.+2      	; 0x1c0c <__utoa_common+0x20>
    1c0a:	a9 5d       	subi	r26, 0xD9	; 217
    1c0c:	a1 93       	st	Z+, r26
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	79 f7       	brne	.-34     	; 0x1bf0 <__utoa_common+0x4>
    1c12:	b1 11       	cpse	r27, r1
    1c14:	b1 93       	st	Z+, r27
    1c16:	11 92       	st	Z+, r1
    1c18:	cb 01       	movw	r24, r22
    1c1a:	e7 c3       	rjmp	.+1998   	; 0x23ea <strrev>

00001c1c <fdevopen>:
    1c1c:	0f 93       	push	r16
    1c1e:	1f 93       	push	r17
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	31 f4       	brne	.+12     	; 0x1c34 <fdevopen+0x18>
    1c28:	61 15       	cp	r22, r1
    1c2a:	71 05       	cpc	r23, r1
    1c2c:	19 f4       	brne	.+6      	; 0x1c34 <fdevopen+0x18>
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	39 c0       	rjmp	.+114    	; 0x1ca6 <fdevopen+0x8a>
    1c34:	8b 01       	movw	r16, r22
    1c36:	ec 01       	movw	r28, r24
    1c38:	6e e0       	ldi	r22, 0x0E	; 14
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	7c d2       	rcall	.+1272   	; 0x213a <calloc>
    1c42:	fc 01       	movw	r30, r24
    1c44:	89 2b       	or	r24, r25
    1c46:	99 f3       	breq	.-26     	; 0x1c2e <fdevopen+0x12>
    1c48:	80 e8       	ldi	r24, 0x80	; 128
    1c4a:	83 83       	std	Z+3, r24	; 0x03
    1c4c:	01 15       	cp	r16, r1
    1c4e:	11 05       	cpc	r17, r1
    1c50:	71 f0       	breq	.+28     	; 0x1c6e <fdevopen+0x52>
    1c52:	13 87       	std	Z+11, r17	; 0x0b
    1c54:	02 87       	std	Z+10, r16	; 0x0a
    1c56:	81 e8       	ldi	r24, 0x81	; 129
    1c58:	83 83       	std	Z+3, r24	; 0x03
    1c5a:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <__iob>
    1c5e:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <__iob+0x1>
    1c62:	89 2b       	or	r24, r25
    1c64:	21 f4       	brne	.+8      	; 0x1c6e <fdevopen+0x52>
    1c66:	f0 93 3e 04 	sts	0x043E, r31	; 0x80043e <__iob+0x1>
    1c6a:	e0 93 3d 04 	sts	0x043D, r30	; 0x80043d <__iob>
    1c6e:	20 97       	sbiw	r28, 0x00	; 0
    1c70:	c9 f0       	breq	.+50     	; 0x1ca4 <fdevopen+0x88>
    1c72:	d1 87       	std	Z+9, r29	; 0x09
    1c74:	c0 87       	std	Z+8, r28	; 0x08
    1c76:	83 81       	ldd	r24, Z+3	; 0x03
    1c78:	82 60       	ori	r24, 0x02	; 2
    1c7a:	83 83       	std	Z+3, r24	; 0x03
    1c7c:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <__iob+0x2>
    1c80:	90 91 40 04 	lds	r25, 0x0440	; 0x800440 <__iob+0x3>
    1c84:	89 2b       	or	r24, r25
    1c86:	71 f4       	brne	.+28     	; 0x1ca4 <fdevopen+0x88>
    1c88:	f0 93 40 04 	sts	0x0440, r31	; 0x800440 <__iob+0x3>
    1c8c:	e0 93 3f 04 	sts	0x043F, r30	; 0x80043f <__iob+0x2>
    1c90:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <__iob+0x4>
    1c94:	90 91 42 04 	lds	r25, 0x0442	; 0x800442 <__iob+0x5>
    1c98:	89 2b       	or	r24, r25
    1c9a:	21 f4       	brne	.+8      	; 0x1ca4 <fdevopen+0x88>
    1c9c:	f0 93 42 04 	sts	0x0442, r31	; 0x800442 <__iob+0x5>
    1ca0:	e0 93 41 04 	sts	0x0441, r30	; 0x800441 <__iob+0x4>
    1ca4:	cf 01       	movw	r24, r30
    1ca6:	df 91       	pop	r29
    1ca8:	cf 91       	pop	r28
    1caa:	1f 91       	pop	r17
    1cac:	0f 91       	pop	r16
    1cae:	08 95       	ret

00001cb0 <printf>:
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	ae 01       	movw	r20, r28
    1cba:	4a 5f       	subi	r20, 0xFA	; 250
    1cbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1cbe:	fa 01       	movw	r30, r20
    1cc0:	61 91       	ld	r22, Z+
    1cc2:	71 91       	ld	r23, Z+
    1cc4:	af 01       	movw	r20, r30
    1cc6:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <__iob+0x2>
    1cca:	90 91 40 04 	lds	r25, 0x0440	; 0x800440 <__iob+0x3>
    1cce:	38 d0       	rcall	.+112    	; 0x1d40 <vfprintf>
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	08 95       	ret

00001cd6 <putchar>:
    1cd6:	60 91 3f 04 	lds	r22, 0x043F	; 0x80043f <__iob+0x2>
    1cda:	70 91 40 04 	lds	r23, 0x0440	; 0x800440 <__iob+0x3>
    1cde:	95 c3       	rjmp	.+1834   	; 0x240a <fputc>

00001ce0 <puts>:
    1ce0:	0f 93       	push	r16
    1ce2:	1f 93       	push	r17
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	e0 91 3f 04 	lds	r30, 0x043F	; 0x80043f <__iob+0x2>
    1cec:	f0 91 40 04 	lds	r31, 0x0440	; 0x800440 <__iob+0x3>
    1cf0:	23 81       	ldd	r18, Z+3	; 0x03
    1cf2:	21 ff       	sbrs	r18, 1
    1cf4:	1b c0       	rjmp	.+54     	; 0x1d2c <puts+0x4c>
    1cf6:	8c 01       	movw	r16, r24
    1cf8:	d0 e0       	ldi	r29, 0x00	; 0
    1cfa:	c0 e0       	ldi	r28, 0x00	; 0
    1cfc:	f8 01       	movw	r30, r16
    1cfe:	81 91       	ld	r24, Z+
    1d00:	8f 01       	movw	r16, r30
    1d02:	60 91 3f 04 	lds	r22, 0x043F	; 0x80043f <__iob+0x2>
    1d06:	70 91 40 04 	lds	r23, 0x0440	; 0x800440 <__iob+0x3>
    1d0a:	db 01       	movw	r26, r22
    1d0c:	18 96       	adiw	r26, 0x08	; 8
    1d0e:	ed 91       	ld	r30, X+
    1d10:	fc 91       	ld	r31, X
    1d12:	19 97       	sbiw	r26, 0x09	; 9
    1d14:	88 23       	and	r24, r24
    1d16:	31 f0       	breq	.+12     	; 0x1d24 <puts+0x44>
    1d18:	19 95       	eicall
    1d1a:	89 2b       	or	r24, r25
    1d1c:	79 f3       	breq	.-34     	; 0x1cfc <puts+0x1c>
    1d1e:	df ef       	ldi	r29, 0xFF	; 255
    1d20:	cf ef       	ldi	r28, 0xFF	; 255
    1d22:	ec cf       	rjmp	.-40     	; 0x1cfc <puts+0x1c>
    1d24:	8a e0       	ldi	r24, 0x0A	; 10
    1d26:	19 95       	eicall
    1d28:	89 2b       	or	r24, r25
    1d2a:	19 f0       	breq	.+6      	; 0x1d32 <puts+0x52>
    1d2c:	8f ef       	ldi	r24, 0xFF	; 255
    1d2e:	9f ef       	ldi	r25, 0xFF	; 255
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <puts+0x56>
    1d32:	8d 2f       	mov	r24, r29
    1d34:	9c 2f       	mov	r25, r28
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	1f 91       	pop	r17
    1d3c:	0f 91       	pop	r16
    1d3e:	08 95       	ret

00001d40 <vfprintf>:
    1d40:	2f 92       	push	r2
    1d42:	3f 92       	push	r3
    1d44:	4f 92       	push	r4
    1d46:	5f 92       	push	r5
    1d48:	6f 92       	push	r6
    1d4a:	7f 92       	push	r7
    1d4c:	8f 92       	push	r8
    1d4e:	9f 92       	push	r9
    1d50:	af 92       	push	r10
    1d52:	bf 92       	push	r11
    1d54:	cf 92       	push	r12
    1d56:	df 92       	push	r13
    1d58:	ef 92       	push	r14
    1d5a:	ff 92       	push	r15
    1d5c:	0f 93       	push	r16
    1d5e:	1f 93       	push	r17
    1d60:	cf 93       	push	r28
    1d62:	df 93       	push	r29
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	2b 97       	sbiw	r28, 0x0b	; 11
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	de bf       	out	0x3e, r29	; 62
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	cd bf       	out	0x3d, r28	; 61
    1d74:	6c 01       	movw	r12, r24
    1d76:	7b 01       	movw	r14, r22
    1d78:	8a 01       	movw	r16, r20
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	17 82       	std	Z+7, r1	; 0x07
    1d7e:	16 82       	std	Z+6, r1	; 0x06
    1d80:	83 81       	ldd	r24, Z+3	; 0x03
    1d82:	81 ff       	sbrs	r24, 1
    1d84:	bf c1       	rjmp	.+894    	; 0x2104 <vfprintf+0x3c4>
    1d86:	ce 01       	movw	r24, r28
    1d88:	01 96       	adiw	r24, 0x01	; 1
    1d8a:	3c 01       	movw	r6, r24
    1d8c:	f6 01       	movw	r30, r12
    1d8e:	93 81       	ldd	r25, Z+3	; 0x03
    1d90:	f7 01       	movw	r30, r14
    1d92:	93 fd       	sbrc	r25, 3
    1d94:	85 91       	lpm	r24, Z+
    1d96:	93 ff       	sbrs	r25, 3
    1d98:	81 91       	ld	r24, Z+
    1d9a:	7f 01       	movw	r14, r30
    1d9c:	88 23       	and	r24, r24
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <vfprintf+0x62>
    1da0:	ad c1       	rjmp	.+858    	; 0x20fc <vfprintf+0x3bc>
    1da2:	85 32       	cpi	r24, 0x25	; 37
    1da4:	39 f4       	brne	.+14     	; 0x1db4 <vfprintf+0x74>
    1da6:	93 fd       	sbrc	r25, 3
    1da8:	85 91       	lpm	r24, Z+
    1daa:	93 ff       	sbrs	r25, 3
    1dac:	81 91       	ld	r24, Z+
    1dae:	7f 01       	movw	r14, r30
    1db0:	85 32       	cpi	r24, 0x25	; 37
    1db2:	21 f4       	brne	.+8      	; 0x1dbc <vfprintf+0x7c>
    1db4:	b6 01       	movw	r22, r12
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	28 d3       	rcall	.+1616   	; 0x240a <fputc>
    1dba:	e8 cf       	rjmp	.-48     	; 0x1d8c <vfprintf+0x4c>
    1dbc:	91 2c       	mov	r9, r1
    1dbe:	21 2c       	mov	r2, r1
    1dc0:	31 2c       	mov	r3, r1
    1dc2:	ff e1       	ldi	r31, 0x1F	; 31
    1dc4:	f3 15       	cp	r31, r3
    1dc6:	d8 f0       	brcs	.+54     	; 0x1dfe <vfprintf+0xbe>
    1dc8:	8b 32       	cpi	r24, 0x2B	; 43
    1dca:	79 f0       	breq	.+30     	; 0x1dea <vfprintf+0xaa>
    1dcc:	38 f4       	brcc	.+14     	; 0x1ddc <vfprintf+0x9c>
    1dce:	80 32       	cpi	r24, 0x20	; 32
    1dd0:	79 f0       	breq	.+30     	; 0x1df0 <vfprintf+0xb0>
    1dd2:	83 32       	cpi	r24, 0x23	; 35
    1dd4:	a1 f4       	brne	.+40     	; 0x1dfe <vfprintf+0xbe>
    1dd6:	23 2d       	mov	r18, r3
    1dd8:	20 61       	ori	r18, 0x10	; 16
    1dda:	1d c0       	rjmp	.+58     	; 0x1e16 <vfprintf+0xd6>
    1ddc:	8d 32       	cpi	r24, 0x2D	; 45
    1dde:	61 f0       	breq	.+24     	; 0x1df8 <vfprintf+0xb8>
    1de0:	80 33       	cpi	r24, 0x30	; 48
    1de2:	69 f4       	brne	.+26     	; 0x1dfe <vfprintf+0xbe>
    1de4:	23 2d       	mov	r18, r3
    1de6:	21 60       	ori	r18, 0x01	; 1
    1de8:	16 c0       	rjmp	.+44     	; 0x1e16 <vfprintf+0xd6>
    1dea:	83 2d       	mov	r24, r3
    1dec:	82 60       	ori	r24, 0x02	; 2
    1dee:	38 2e       	mov	r3, r24
    1df0:	e3 2d       	mov	r30, r3
    1df2:	e4 60       	ori	r30, 0x04	; 4
    1df4:	3e 2e       	mov	r3, r30
    1df6:	2a c0       	rjmp	.+84     	; 0x1e4c <vfprintf+0x10c>
    1df8:	f3 2d       	mov	r31, r3
    1dfa:	f8 60       	ori	r31, 0x08	; 8
    1dfc:	1d c0       	rjmp	.+58     	; 0x1e38 <vfprintf+0xf8>
    1dfe:	37 fc       	sbrc	r3, 7
    1e00:	2d c0       	rjmp	.+90     	; 0x1e5c <vfprintf+0x11c>
    1e02:	20 ed       	ldi	r18, 0xD0	; 208
    1e04:	28 0f       	add	r18, r24
    1e06:	2a 30       	cpi	r18, 0x0A	; 10
    1e08:	40 f0       	brcs	.+16     	; 0x1e1a <vfprintf+0xda>
    1e0a:	8e 32       	cpi	r24, 0x2E	; 46
    1e0c:	b9 f4       	brne	.+46     	; 0x1e3c <vfprintf+0xfc>
    1e0e:	36 fc       	sbrc	r3, 6
    1e10:	75 c1       	rjmp	.+746    	; 0x20fc <vfprintf+0x3bc>
    1e12:	23 2d       	mov	r18, r3
    1e14:	20 64       	ori	r18, 0x40	; 64
    1e16:	32 2e       	mov	r3, r18
    1e18:	19 c0       	rjmp	.+50     	; 0x1e4c <vfprintf+0x10c>
    1e1a:	36 fe       	sbrs	r3, 6
    1e1c:	06 c0       	rjmp	.+12     	; 0x1e2a <vfprintf+0xea>
    1e1e:	8a e0       	ldi	r24, 0x0A	; 10
    1e20:	98 9e       	mul	r9, r24
    1e22:	20 0d       	add	r18, r0
    1e24:	11 24       	eor	r1, r1
    1e26:	92 2e       	mov	r9, r18
    1e28:	11 c0       	rjmp	.+34     	; 0x1e4c <vfprintf+0x10c>
    1e2a:	ea e0       	ldi	r30, 0x0A	; 10
    1e2c:	2e 9e       	mul	r2, r30
    1e2e:	20 0d       	add	r18, r0
    1e30:	11 24       	eor	r1, r1
    1e32:	22 2e       	mov	r2, r18
    1e34:	f3 2d       	mov	r31, r3
    1e36:	f0 62       	ori	r31, 0x20	; 32
    1e38:	3f 2e       	mov	r3, r31
    1e3a:	08 c0       	rjmp	.+16     	; 0x1e4c <vfprintf+0x10c>
    1e3c:	8c 36       	cpi	r24, 0x6C	; 108
    1e3e:	21 f4       	brne	.+8      	; 0x1e48 <vfprintf+0x108>
    1e40:	83 2d       	mov	r24, r3
    1e42:	80 68       	ori	r24, 0x80	; 128
    1e44:	38 2e       	mov	r3, r24
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <vfprintf+0x10c>
    1e48:	88 36       	cpi	r24, 0x68	; 104
    1e4a:	41 f4       	brne	.+16     	; 0x1e5c <vfprintf+0x11c>
    1e4c:	f7 01       	movw	r30, r14
    1e4e:	93 fd       	sbrc	r25, 3
    1e50:	85 91       	lpm	r24, Z+
    1e52:	93 ff       	sbrs	r25, 3
    1e54:	81 91       	ld	r24, Z+
    1e56:	7f 01       	movw	r14, r30
    1e58:	81 11       	cpse	r24, r1
    1e5a:	b3 cf       	rjmp	.-154    	; 0x1dc2 <vfprintf+0x82>
    1e5c:	98 2f       	mov	r25, r24
    1e5e:	9f 7d       	andi	r25, 0xDF	; 223
    1e60:	95 54       	subi	r25, 0x45	; 69
    1e62:	93 30       	cpi	r25, 0x03	; 3
    1e64:	28 f4       	brcc	.+10     	; 0x1e70 <vfprintf+0x130>
    1e66:	0c 5f       	subi	r16, 0xFC	; 252
    1e68:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6a:	9f e3       	ldi	r25, 0x3F	; 63
    1e6c:	99 83       	std	Y+1, r25	; 0x01
    1e6e:	0d c0       	rjmp	.+26     	; 0x1e8a <vfprintf+0x14a>
    1e70:	83 36       	cpi	r24, 0x63	; 99
    1e72:	31 f0       	breq	.+12     	; 0x1e80 <vfprintf+0x140>
    1e74:	83 37       	cpi	r24, 0x73	; 115
    1e76:	71 f0       	breq	.+28     	; 0x1e94 <vfprintf+0x154>
    1e78:	83 35       	cpi	r24, 0x53	; 83
    1e7a:	09 f0       	breq	.+2      	; 0x1e7e <vfprintf+0x13e>
    1e7c:	55 c0       	rjmp	.+170    	; 0x1f28 <vfprintf+0x1e8>
    1e7e:	20 c0       	rjmp	.+64     	; 0x1ec0 <vfprintf+0x180>
    1e80:	f8 01       	movw	r30, r16
    1e82:	80 81       	ld	r24, Z
    1e84:	89 83       	std	Y+1, r24	; 0x01
    1e86:	0e 5f       	subi	r16, 0xFE	; 254
    1e88:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8a:	88 24       	eor	r8, r8
    1e8c:	83 94       	inc	r8
    1e8e:	91 2c       	mov	r9, r1
    1e90:	53 01       	movw	r10, r6
    1e92:	12 c0       	rjmp	.+36     	; 0x1eb8 <vfprintf+0x178>
    1e94:	28 01       	movw	r4, r16
    1e96:	f2 e0       	ldi	r31, 0x02	; 2
    1e98:	4f 0e       	add	r4, r31
    1e9a:	51 1c       	adc	r5, r1
    1e9c:	f8 01       	movw	r30, r16
    1e9e:	a0 80       	ld	r10, Z
    1ea0:	b1 80       	ldd	r11, Z+1	; 0x01
    1ea2:	36 fe       	sbrs	r3, 6
    1ea4:	03 c0       	rjmp	.+6      	; 0x1eac <vfprintf+0x16c>
    1ea6:	69 2d       	mov	r22, r9
    1ea8:	70 e0       	ldi	r23, 0x00	; 0
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <vfprintf+0x170>
    1eac:	6f ef       	ldi	r22, 0xFF	; 255
    1eae:	7f ef       	ldi	r23, 0xFF	; 255
    1eb0:	c5 01       	movw	r24, r10
    1eb2:	90 d2       	rcall	.+1312   	; 0x23d4 <strnlen>
    1eb4:	4c 01       	movw	r8, r24
    1eb6:	82 01       	movw	r16, r4
    1eb8:	f3 2d       	mov	r31, r3
    1eba:	ff 77       	andi	r31, 0x7F	; 127
    1ebc:	3f 2e       	mov	r3, r31
    1ebe:	15 c0       	rjmp	.+42     	; 0x1eea <vfprintf+0x1aa>
    1ec0:	28 01       	movw	r4, r16
    1ec2:	22 e0       	ldi	r18, 0x02	; 2
    1ec4:	42 0e       	add	r4, r18
    1ec6:	51 1c       	adc	r5, r1
    1ec8:	f8 01       	movw	r30, r16
    1eca:	a0 80       	ld	r10, Z
    1ecc:	b1 80       	ldd	r11, Z+1	; 0x01
    1ece:	36 fe       	sbrs	r3, 6
    1ed0:	03 c0       	rjmp	.+6      	; 0x1ed8 <vfprintf+0x198>
    1ed2:	69 2d       	mov	r22, r9
    1ed4:	70 e0       	ldi	r23, 0x00	; 0
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <vfprintf+0x19c>
    1ed8:	6f ef       	ldi	r22, 0xFF	; 255
    1eda:	7f ef       	ldi	r23, 0xFF	; 255
    1edc:	c5 01       	movw	r24, r10
    1ede:	68 d2       	rcall	.+1232   	; 0x23b0 <strnlen_P>
    1ee0:	4c 01       	movw	r8, r24
    1ee2:	f3 2d       	mov	r31, r3
    1ee4:	f0 68       	ori	r31, 0x80	; 128
    1ee6:	3f 2e       	mov	r3, r31
    1ee8:	82 01       	movw	r16, r4
    1eea:	33 fc       	sbrc	r3, 3
    1eec:	19 c0       	rjmp	.+50     	; 0x1f20 <vfprintf+0x1e0>
    1eee:	82 2d       	mov	r24, r2
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	88 16       	cp	r8, r24
    1ef4:	99 06       	cpc	r9, r25
    1ef6:	a0 f4       	brcc	.+40     	; 0x1f20 <vfprintf+0x1e0>
    1ef8:	b6 01       	movw	r22, r12
    1efa:	80 e2       	ldi	r24, 0x20	; 32
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	85 d2       	rcall	.+1290   	; 0x240a <fputc>
    1f00:	2a 94       	dec	r2
    1f02:	f5 cf       	rjmp	.-22     	; 0x1eee <vfprintf+0x1ae>
    1f04:	f5 01       	movw	r30, r10
    1f06:	37 fc       	sbrc	r3, 7
    1f08:	85 91       	lpm	r24, Z+
    1f0a:	37 fe       	sbrs	r3, 7
    1f0c:	81 91       	ld	r24, Z+
    1f0e:	5f 01       	movw	r10, r30
    1f10:	b6 01       	movw	r22, r12
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	7a d2       	rcall	.+1268   	; 0x240a <fputc>
    1f16:	21 10       	cpse	r2, r1
    1f18:	2a 94       	dec	r2
    1f1a:	21 e0       	ldi	r18, 0x01	; 1
    1f1c:	82 1a       	sub	r8, r18
    1f1e:	91 08       	sbc	r9, r1
    1f20:	81 14       	cp	r8, r1
    1f22:	91 04       	cpc	r9, r1
    1f24:	79 f7       	brne	.-34     	; 0x1f04 <vfprintf+0x1c4>
    1f26:	e1 c0       	rjmp	.+450    	; 0x20ea <vfprintf+0x3aa>
    1f28:	84 36       	cpi	r24, 0x64	; 100
    1f2a:	11 f0       	breq	.+4      	; 0x1f30 <vfprintf+0x1f0>
    1f2c:	89 36       	cpi	r24, 0x69	; 105
    1f2e:	39 f5       	brne	.+78     	; 0x1f7e <vfprintf+0x23e>
    1f30:	f8 01       	movw	r30, r16
    1f32:	37 fe       	sbrs	r3, 7
    1f34:	07 c0       	rjmp	.+14     	; 0x1f44 <vfprintf+0x204>
    1f36:	60 81       	ld	r22, Z
    1f38:	71 81       	ldd	r23, Z+1	; 0x01
    1f3a:	82 81       	ldd	r24, Z+2	; 0x02
    1f3c:	93 81       	ldd	r25, Z+3	; 0x03
    1f3e:	0c 5f       	subi	r16, 0xFC	; 252
    1f40:	1f 4f       	sbci	r17, 0xFF	; 255
    1f42:	08 c0       	rjmp	.+16     	; 0x1f54 <vfprintf+0x214>
    1f44:	60 81       	ld	r22, Z
    1f46:	71 81       	ldd	r23, Z+1	; 0x01
    1f48:	07 2e       	mov	r0, r23
    1f4a:	00 0c       	add	r0, r0
    1f4c:	88 0b       	sbc	r24, r24
    1f4e:	99 0b       	sbc	r25, r25
    1f50:	0e 5f       	subi	r16, 0xFE	; 254
    1f52:	1f 4f       	sbci	r17, 0xFF	; 255
    1f54:	f3 2d       	mov	r31, r3
    1f56:	ff 76       	andi	r31, 0x6F	; 111
    1f58:	3f 2e       	mov	r3, r31
    1f5a:	97 ff       	sbrs	r25, 7
    1f5c:	09 c0       	rjmp	.+18     	; 0x1f70 <vfprintf+0x230>
    1f5e:	90 95       	com	r25
    1f60:	80 95       	com	r24
    1f62:	70 95       	com	r23
    1f64:	61 95       	neg	r22
    1f66:	7f 4f       	sbci	r23, 0xFF	; 255
    1f68:	8f 4f       	sbci	r24, 0xFF	; 255
    1f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6c:	f0 68       	ori	r31, 0x80	; 128
    1f6e:	3f 2e       	mov	r3, r31
    1f70:	2a e0       	ldi	r18, 0x0A	; 10
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	a3 01       	movw	r20, r6
    1f76:	85 d2       	rcall	.+1290   	; 0x2482 <__ultoa_invert>
    1f78:	88 2e       	mov	r8, r24
    1f7a:	86 18       	sub	r8, r6
    1f7c:	44 c0       	rjmp	.+136    	; 0x2006 <vfprintf+0x2c6>
    1f7e:	85 37       	cpi	r24, 0x75	; 117
    1f80:	31 f4       	brne	.+12     	; 0x1f8e <vfprintf+0x24e>
    1f82:	23 2d       	mov	r18, r3
    1f84:	2f 7e       	andi	r18, 0xEF	; 239
    1f86:	b2 2e       	mov	r11, r18
    1f88:	2a e0       	ldi	r18, 0x0A	; 10
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	25 c0       	rjmp	.+74     	; 0x1fd8 <vfprintf+0x298>
    1f8e:	93 2d       	mov	r25, r3
    1f90:	99 7f       	andi	r25, 0xF9	; 249
    1f92:	b9 2e       	mov	r11, r25
    1f94:	8f 36       	cpi	r24, 0x6F	; 111
    1f96:	c1 f0       	breq	.+48     	; 0x1fc8 <vfprintf+0x288>
    1f98:	18 f4       	brcc	.+6      	; 0x1fa0 <vfprintf+0x260>
    1f9a:	88 35       	cpi	r24, 0x58	; 88
    1f9c:	79 f0       	breq	.+30     	; 0x1fbc <vfprintf+0x27c>
    1f9e:	ae c0       	rjmp	.+348    	; 0x20fc <vfprintf+0x3bc>
    1fa0:	80 37       	cpi	r24, 0x70	; 112
    1fa2:	19 f0       	breq	.+6      	; 0x1faa <vfprintf+0x26a>
    1fa4:	88 37       	cpi	r24, 0x78	; 120
    1fa6:	21 f0       	breq	.+8      	; 0x1fb0 <vfprintf+0x270>
    1fa8:	a9 c0       	rjmp	.+338    	; 0x20fc <vfprintf+0x3bc>
    1faa:	e9 2f       	mov	r30, r25
    1fac:	e0 61       	ori	r30, 0x10	; 16
    1fae:	be 2e       	mov	r11, r30
    1fb0:	b4 fe       	sbrs	r11, 4
    1fb2:	0d c0       	rjmp	.+26     	; 0x1fce <vfprintf+0x28e>
    1fb4:	fb 2d       	mov	r31, r11
    1fb6:	f4 60       	ori	r31, 0x04	; 4
    1fb8:	bf 2e       	mov	r11, r31
    1fba:	09 c0       	rjmp	.+18     	; 0x1fce <vfprintf+0x28e>
    1fbc:	34 fe       	sbrs	r3, 4
    1fbe:	0a c0       	rjmp	.+20     	; 0x1fd4 <vfprintf+0x294>
    1fc0:	29 2f       	mov	r18, r25
    1fc2:	26 60       	ori	r18, 0x06	; 6
    1fc4:	b2 2e       	mov	r11, r18
    1fc6:	06 c0       	rjmp	.+12     	; 0x1fd4 <vfprintf+0x294>
    1fc8:	28 e0       	ldi	r18, 0x08	; 8
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	05 c0       	rjmp	.+10     	; 0x1fd8 <vfprintf+0x298>
    1fce:	20 e1       	ldi	r18, 0x10	; 16
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <vfprintf+0x298>
    1fd4:	20 e1       	ldi	r18, 0x10	; 16
    1fd6:	32 e0       	ldi	r19, 0x02	; 2
    1fd8:	f8 01       	movw	r30, r16
    1fda:	b7 fe       	sbrs	r11, 7
    1fdc:	07 c0       	rjmp	.+14     	; 0x1fec <vfprintf+0x2ac>
    1fde:	60 81       	ld	r22, Z
    1fe0:	71 81       	ldd	r23, Z+1	; 0x01
    1fe2:	82 81       	ldd	r24, Z+2	; 0x02
    1fe4:	93 81       	ldd	r25, Z+3	; 0x03
    1fe6:	0c 5f       	subi	r16, 0xFC	; 252
    1fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fea:	06 c0       	rjmp	.+12     	; 0x1ff8 <vfprintf+0x2b8>
    1fec:	60 81       	ld	r22, Z
    1fee:	71 81       	ldd	r23, Z+1	; 0x01
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	0e 5f       	subi	r16, 0xFE	; 254
    1ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff8:	a3 01       	movw	r20, r6
    1ffa:	43 d2       	rcall	.+1158   	; 0x2482 <__ultoa_invert>
    1ffc:	88 2e       	mov	r8, r24
    1ffe:	86 18       	sub	r8, r6
    2000:	fb 2d       	mov	r31, r11
    2002:	ff 77       	andi	r31, 0x7F	; 127
    2004:	3f 2e       	mov	r3, r31
    2006:	36 fe       	sbrs	r3, 6
    2008:	0d c0       	rjmp	.+26     	; 0x2024 <vfprintf+0x2e4>
    200a:	23 2d       	mov	r18, r3
    200c:	2e 7f       	andi	r18, 0xFE	; 254
    200e:	a2 2e       	mov	r10, r18
    2010:	89 14       	cp	r8, r9
    2012:	58 f4       	brcc	.+22     	; 0x202a <vfprintf+0x2ea>
    2014:	34 fe       	sbrs	r3, 4
    2016:	0b c0       	rjmp	.+22     	; 0x202e <vfprintf+0x2ee>
    2018:	32 fc       	sbrc	r3, 2
    201a:	09 c0       	rjmp	.+18     	; 0x202e <vfprintf+0x2ee>
    201c:	83 2d       	mov	r24, r3
    201e:	8e 7e       	andi	r24, 0xEE	; 238
    2020:	a8 2e       	mov	r10, r24
    2022:	05 c0       	rjmp	.+10     	; 0x202e <vfprintf+0x2ee>
    2024:	b8 2c       	mov	r11, r8
    2026:	a3 2c       	mov	r10, r3
    2028:	03 c0       	rjmp	.+6      	; 0x2030 <vfprintf+0x2f0>
    202a:	b8 2c       	mov	r11, r8
    202c:	01 c0       	rjmp	.+2      	; 0x2030 <vfprintf+0x2f0>
    202e:	b9 2c       	mov	r11, r9
    2030:	a4 fe       	sbrs	r10, 4
    2032:	0f c0       	rjmp	.+30     	; 0x2052 <vfprintf+0x312>
    2034:	fe 01       	movw	r30, r28
    2036:	e8 0d       	add	r30, r8
    2038:	f1 1d       	adc	r31, r1
    203a:	80 81       	ld	r24, Z
    203c:	80 33       	cpi	r24, 0x30	; 48
    203e:	21 f4       	brne	.+8      	; 0x2048 <vfprintf+0x308>
    2040:	9a 2d       	mov	r25, r10
    2042:	99 7e       	andi	r25, 0xE9	; 233
    2044:	a9 2e       	mov	r10, r25
    2046:	09 c0       	rjmp	.+18     	; 0x205a <vfprintf+0x31a>
    2048:	a2 fe       	sbrs	r10, 2
    204a:	06 c0       	rjmp	.+12     	; 0x2058 <vfprintf+0x318>
    204c:	b3 94       	inc	r11
    204e:	b3 94       	inc	r11
    2050:	04 c0       	rjmp	.+8      	; 0x205a <vfprintf+0x31a>
    2052:	8a 2d       	mov	r24, r10
    2054:	86 78       	andi	r24, 0x86	; 134
    2056:	09 f0       	breq	.+2      	; 0x205a <vfprintf+0x31a>
    2058:	b3 94       	inc	r11
    205a:	a3 fc       	sbrc	r10, 3
    205c:	10 c0       	rjmp	.+32     	; 0x207e <vfprintf+0x33e>
    205e:	a0 fe       	sbrs	r10, 0
    2060:	06 c0       	rjmp	.+12     	; 0x206e <vfprintf+0x32e>
    2062:	b2 14       	cp	r11, r2
    2064:	80 f4       	brcc	.+32     	; 0x2086 <vfprintf+0x346>
    2066:	28 0c       	add	r2, r8
    2068:	92 2c       	mov	r9, r2
    206a:	9b 18       	sub	r9, r11
    206c:	0d c0       	rjmp	.+26     	; 0x2088 <vfprintf+0x348>
    206e:	b2 14       	cp	r11, r2
    2070:	58 f4       	brcc	.+22     	; 0x2088 <vfprintf+0x348>
    2072:	b6 01       	movw	r22, r12
    2074:	80 e2       	ldi	r24, 0x20	; 32
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	c8 d1       	rcall	.+912    	; 0x240a <fputc>
    207a:	b3 94       	inc	r11
    207c:	f8 cf       	rjmp	.-16     	; 0x206e <vfprintf+0x32e>
    207e:	b2 14       	cp	r11, r2
    2080:	18 f4       	brcc	.+6      	; 0x2088 <vfprintf+0x348>
    2082:	2b 18       	sub	r2, r11
    2084:	02 c0       	rjmp	.+4      	; 0x208a <vfprintf+0x34a>
    2086:	98 2c       	mov	r9, r8
    2088:	21 2c       	mov	r2, r1
    208a:	a4 fe       	sbrs	r10, 4
    208c:	0f c0       	rjmp	.+30     	; 0x20ac <vfprintf+0x36c>
    208e:	b6 01       	movw	r22, r12
    2090:	80 e3       	ldi	r24, 0x30	; 48
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	ba d1       	rcall	.+884    	; 0x240a <fputc>
    2096:	a2 fe       	sbrs	r10, 2
    2098:	16 c0       	rjmp	.+44     	; 0x20c6 <vfprintf+0x386>
    209a:	a1 fc       	sbrc	r10, 1
    209c:	03 c0       	rjmp	.+6      	; 0x20a4 <vfprintf+0x364>
    209e:	88 e7       	ldi	r24, 0x78	; 120
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <vfprintf+0x368>
    20a4:	88 e5       	ldi	r24, 0x58	; 88
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	b6 01       	movw	r22, r12
    20aa:	0c c0       	rjmp	.+24     	; 0x20c4 <vfprintf+0x384>
    20ac:	8a 2d       	mov	r24, r10
    20ae:	86 78       	andi	r24, 0x86	; 134
    20b0:	51 f0       	breq	.+20     	; 0x20c6 <vfprintf+0x386>
    20b2:	a1 fe       	sbrs	r10, 1
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <vfprintf+0x37a>
    20b6:	8b e2       	ldi	r24, 0x2B	; 43
    20b8:	01 c0       	rjmp	.+2      	; 0x20bc <vfprintf+0x37c>
    20ba:	80 e2       	ldi	r24, 0x20	; 32
    20bc:	a7 fc       	sbrc	r10, 7
    20be:	8d e2       	ldi	r24, 0x2D	; 45
    20c0:	b6 01       	movw	r22, r12
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	a2 d1       	rcall	.+836    	; 0x240a <fputc>
    20c6:	89 14       	cp	r8, r9
    20c8:	30 f4       	brcc	.+12     	; 0x20d6 <vfprintf+0x396>
    20ca:	b6 01       	movw	r22, r12
    20cc:	80 e3       	ldi	r24, 0x30	; 48
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	9c d1       	rcall	.+824    	; 0x240a <fputc>
    20d2:	9a 94       	dec	r9
    20d4:	f8 cf       	rjmp	.-16     	; 0x20c6 <vfprintf+0x386>
    20d6:	8a 94       	dec	r8
    20d8:	f3 01       	movw	r30, r6
    20da:	e8 0d       	add	r30, r8
    20dc:	f1 1d       	adc	r31, r1
    20de:	80 81       	ld	r24, Z
    20e0:	b6 01       	movw	r22, r12
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	92 d1       	rcall	.+804    	; 0x240a <fputc>
    20e6:	81 10       	cpse	r8, r1
    20e8:	f6 cf       	rjmp	.-20     	; 0x20d6 <vfprintf+0x396>
    20ea:	22 20       	and	r2, r2
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <vfprintf+0x3b0>
    20ee:	4e ce       	rjmp	.-868    	; 0x1d8c <vfprintf+0x4c>
    20f0:	b6 01       	movw	r22, r12
    20f2:	80 e2       	ldi	r24, 0x20	; 32
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	89 d1       	rcall	.+786    	; 0x240a <fputc>
    20f8:	2a 94       	dec	r2
    20fa:	f7 cf       	rjmp	.-18     	; 0x20ea <vfprintf+0x3aa>
    20fc:	f6 01       	movw	r30, r12
    20fe:	86 81       	ldd	r24, Z+6	; 0x06
    2100:	97 81       	ldd	r25, Z+7	; 0x07
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <vfprintf+0x3c8>
    2104:	8f ef       	ldi	r24, 0xFF	; 255
    2106:	9f ef       	ldi	r25, 0xFF	; 255
    2108:	2b 96       	adiw	r28, 0x0b	; 11
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	cd bf       	out	0x3d, r28	; 61
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    2118:	1f 91       	pop	r17
    211a:	0f 91       	pop	r16
    211c:	ff 90       	pop	r15
    211e:	ef 90       	pop	r14
    2120:	df 90       	pop	r13
    2122:	cf 90       	pop	r12
    2124:	bf 90       	pop	r11
    2126:	af 90       	pop	r10
    2128:	9f 90       	pop	r9
    212a:	8f 90       	pop	r8
    212c:	7f 90       	pop	r7
    212e:	6f 90       	pop	r6
    2130:	5f 90       	pop	r5
    2132:	4f 90       	pop	r4
    2134:	3f 90       	pop	r3
    2136:	2f 90       	pop	r2
    2138:	08 95       	ret

0000213a <calloc>:
    213a:	0f 93       	push	r16
    213c:	1f 93       	push	r17
    213e:	cf 93       	push	r28
    2140:	df 93       	push	r29
    2142:	86 9f       	mul	r24, r22
    2144:	80 01       	movw	r16, r0
    2146:	87 9f       	mul	r24, r23
    2148:	10 0d       	add	r17, r0
    214a:	96 9f       	mul	r25, r22
    214c:	10 0d       	add	r17, r0
    214e:	11 24       	eor	r1, r1
    2150:	c8 01       	movw	r24, r16
    2152:	0d d0       	rcall	.+26     	; 0x216e <malloc>
    2154:	ec 01       	movw	r28, r24
    2156:	00 97       	sbiw	r24, 0x00	; 0
    2158:	21 f0       	breq	.+8      	; 0x2162 <calloc+0x28>
    215a:	a8 01       	movw	r20, r16
    215c:	60 e0       	ldi	r22, 0x00	; 0
    215e:	70 e0       	ldi	r23, 0x00	; 0
    2160:	32 d1       	rcall	.+612    	; 0x23c6 <memset>
    2162:	ce 01       	movw	r24, r28
    2164:	df 91       	pop	r29
    2166:	cf 91       	pop	r28
    2168:	1f 91       	pop	r17
    216a:	0f 91       	pop	r16
    216c:	08 95       	ret

0000216e <malloc>:
    216e:	0f 93       	push	r16
    2170:	1f 93       	push	r17
    2172:	cf 93       	push	r28
    2174:	df 93       	push	r29
    2176:	82 30       	cpi	r24, 0x02	; 2
    2178:	91 05       	cpc	r25, r1
    217a:	10 f4       	brcc	.+4      	; 0x2180 <malloc+0x12>
    217c:	82 e0       	ldi	r24, 0x02	; 2
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <__flp>
    2184:	f0 91 46 04 	lds	r31, 0x0446	; 0x800446 <__flp+0x1>
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	a0 e0       	ldi	r26, 0x00	; 0
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	30 97       	sbiw	r30, 0x00	; 0
    2192:	19 f1       	breq	.+70     	; 0x21da <malloc+0x6c>
    2194:	40 81       	ld	r20, Z
    2196:	51 81       	ldd	r21, Z+1	; 0x01
    2198:	02 81       	ldd	r16, Z+2	; 0x02
    219a:	13 81       	ldd	r17, Z+3	; 0x03
    219c:	48 17       	cp	r20, r24
    219e:	59 07       	cpc	r21, r25
    21a0:	c8 f0       	brcs	.+50     	; 0x21d4 <malloc+0x66>
    21a2:	84 17       	cp	r24, r20
    21a4:	95 07       	cpc	r25, r21
    21a6:	69 f4       	brne	.+26     	; 0x21c2 <malloc+0x54>
    21a8:	10 97       	sbiw	r26, 0x00	; 0
    21aa:	31 f0       	breq	.+12     	; 0x21b8 <malloc+0x4a>
    21ac:	12 96       	adiw	r26, 0x02	; 2
    21ae:	0c 93       	st	X, r16
    21b0:	12 97       	sbiw	r26, 0x02	; 2
    21b2:	13 96       	adiw	r26, 0x03	; 3
    21b4:	1c 93       	st	X, r17
    21b6:	27 c0       	rjmp	.+78     	; 0x2206 <__stack+0x7>
    21b8:	00 93 45 04 	sts	0x0445, r16	; 0x800445 <__flp>
    21bc:	10 93 46 04 	sts	0x0446, r17	; 0x800446 <__flp+0x1>
    21c0:	22 c0       	rjmp	.+68     	; 0x2206 <__stack+0x7>
    21c2:	21 15       	cp	r18, r1
    21c4:	31 05       	cpc	r19, r1
    21c6:	19 f0       	breq	.+6      	; 0x21ce <malloc+0x60>
    21c8:	42 17       	cp	r20, r18
    21ca:	53 07       	cpc	r21, r19
    21cc:	18 f4       	brcc	.+6      	; 0x21d4 <malloc+0x66>
    21ce:	9a 01       	movw	r18, r20
    21d0:	bd 01       	movw	r22, r26
    21d2:	ef 01       	movw	r28, r30
    21d4:	df 01       	movw	r26, r30
    21d6:	f8 01       	movw	r30, r16
    21d8:	db cf       	rjmp	.-74     	; 0x2190 <malloc+0x22>
    21da:	21 15       	cp	r18, r1
    21dc:	31 05       	cpc	r19, r1
    21de:	f9 f0       	breq	.+62     	; 0x221e <__stack+0x1f>
    21e0:	28 1b       	sub	r18, r24
    21e2:	39 0b       	sbc	r19, r25
    21e4:	24 30       	cpi	r18, 0x04	; 4
    21e6:	31 05       	cpc	r19, r1
    21e8:	80 f4       	brcc	.+32     	; 0x220a <__stack+0xb>
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	9b 81       	ldd	r25, Y+3	; 0x03
    21ee:	61 15       	cp	r22, r1
    21f0:	71 05       	cpc	r23, r1
    21f2:	21 f0       	breq	.+8      	; 0x21fc <malloc+0x8e>
    21f4:	fb 01       	movw	r30, r22
    21f6:	93 83       	std	Z+3, r25	; 0x03
    21f8:	82 83       	std	Z+2, r24	; 0x02
    21fa:	04 c0       	rjmp	.+8      	; 0x2204 <__stack+0x5>
    21fc:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <__flp+0x1>
    2200:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__flp>
    2204:	fe 01       	movw	r30, r28
    2206:	32 96       	adiw	r30, 0x02	; 2
    2208:	44 c0       	rjmp	.+136    	; 0x2292 <__stack+0x93>
    220a:	fe 01       	movw	r30, r28
    220c:	e2 0f       	add	r30, r18
    220e:	f3 1f       	adc	r31, r19
    2210:	81 93       	st	Z+, r24
    2212:	91 93       	st	Z+, r25
    2214:	22 50       	subi	r18, 0x02	; 2
    2216:	31 09       	sbc	r19, r1
    2218:	39 83       	std	Y+1, r19	; 0x01
    221a:	28 83       	st	Y, r18
    221c:	3a c0       	rjmp	.+116    	; 0x2292 <__stack+0x93>
    221e:	20 91 43 04 	lds	r18, 0x0443	; 0x800443 <__brkval>
    2222:	30 91 44 04 	lds	r19, 0x0444	; 0x800444 <__brkval+0x1>
    2226:	23 2b       	or	r18, r19
    2228:	41 f4       	brne	.+16     	; 0x223a <__stack+0x3b>
    222a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    222e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2232:	30 93 44 04 	sts	0x0444, r19	; 0x800444 <__brkval+0x1>
    2236:	20 93 43 04 	sts	0x0443, r18	; 0x800443 <__brkval>
    223a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    223e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    2242:	21 15       	cp	r18, r1
    2244:	31 05       	cpc	r19, r1
    2246:	41 f4       	brne	.+16     	; 0x2258 <__stack+0x59>
    2248:	2d b7       	in	r18, 0x3d	; 61
    224a:	3e b7       	in	r19, 0x3e	; 62
    224c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2250:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2254:	24 1b       	sub	r18, r20
    2256:	35 0b       	sbc	r19, r21
    2258:	e0 91 43 04 	lds	r30, 0x0443	; 0x800443 <__brkval>
    225c:	f0 91 44 04 	lds	r31, 0x0444	; 0x800444 <__brkval+0x1>
    2260:	e2 17       	cp	r30, r18
    2262:	f3 07       	cpc	r31, r19
    2264:	a0 f4       	brcc	.+40     	; 0x228e <__stack+0x8f>
    2266:	2e 1b       	sub	r18, r30
    2268:	3f 0b       	sbc	r19, r31
    226a:	28 17       	cp	r18, r24
    226c:	39 07       	cpc	r19, r25
    226e:	78 f0       	brcs	.+30     	; 0x228e <__stack+0x8f>
    2270:	ac 01       	movw	r20, r24
    2272:	4e 5f       	subi	r20, 0xFE	; 254
    2274:	5f 4f       	sbci	r21, 0xFF	; 255
    2276:	24 17       	cp	r18, r20
    2278:	35 07       	cpc	r19, r21
    227a:	48 f0       	brcs	.+18     	; 0x228e <__stack+0x8f>
    227c:	4e 0f       	add	r20, r30
    227e:	5f 1f       	adc	r21, r31
    2280:	50 93 44 04 	sts	0x0444, r21	; 0x800444 <__brkval+0x1>
    2284:	40 93 43 04 	sts	0x0443, r20	; 0x800443 <__brkval>
    2288:	81 93       	st	Z+, r24
    228a:	91 93       	st	Z+, r25
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <__stack+0x93>
    228e:	e0 e0       	ldi	r30, 0x00	; 0
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	cf 01       	movw	r24, r30
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	1f 91       	pop	r17
    229a:	0f 91       	pop	r16
    229c:	08 95       	ret

0000229e <free>:
    229e:	cf 93       	push	r28
    22a0:	df 93       	push	r29
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <free+0xa>
    22a6:	81 c0       	rjmp	.+258    	; 0x23aa <free+0x10c>
    22a8:	fc 01       	movw	r30, r24
    22aa:	32 97       	sbiw	r30, 0x02	; 2
    22ac:	13 82       	std	Z+3, r1	; 0x03
    22ae:	12 82       	std	Z+2, r1	; 0x02
    22b0:	a0 91 45 04 	lds	r26, 0x0445	; 0x800445 <__flp>
    22b4:	b0 91 46 04 	lds	r27, 0x0446	; 0x800446 <__flp+0x1>
    22b8:	10 97       	sbiw	r26, 0x00	; 0
    22ba:	81 f4       	brne	.+32     	; 0x22dc <free+0x3e>
    22bc:	20 81       	ld	r18, Z
    22be:	31 81       	ldd	r19, Z+1	; 0x01
    22c0:	82 0f       	add	r24, r18
    22c2:	93 1f       	adc	r25, r19
    22c4:	20 91 43 04 	lds	r18, 0x0443	; 0x800443 <__brkval>
    22c8:	30 91 44 04 	lds	r19, 0x0444	; 0x800444 <__brkval+0x1>
    22cc:	28 17       	cp	r18, r24
    22ce:	39 07       	cpc	r19, r25
    22d0:	51 f5       	brne	.+84     	; 0x2326 <free+0x88>
    22d2:	f0 93 44 04 	sts	0x0444, r31	; 0x800444 <__brkval+0x1>
    22d6:	e0 93 43 04 	sts	0x0443, r30	; 0x800443 <__brkval>
    22da:	67 c0       	rjmp	.+206    	; 0x23aa <free+0x10c>
    22dc:	ed 01       	movw	r28, r26
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	ce 17       	cp	r28, r30
    22e4:	df 07       	cpc	r29, r31
    22e6:	40 f4       	brcc	.+16     	; 0x22f8 <free+0x5a>
    22e8:	4a 81       	ldd	r20, Y+2	; 0x02
    22ea:	5b 81       	ldd	r21, Y+3	; 0x03
    22ec:	9e 01       	movw	r18, r28
    22ee:	41 15       	cp	r20, r1
    22f0:	51 05       	cpc	r21, r1
    22f2:	f1 f0       	breq	.+60     	; 0x2330 <free+0x92>
    22f4:	ea 01       	movw	r28, r20
    22f6:	f5 cf       	rjmp	.-22     	; 0x22e2 <free+0x44>
    22f8:	d3 83       	std	Z+3, r29	; 0x03
    22fa:	c2 83       	std	Z+2, r28	; 0x02
    22fc:	40 81       	ld	r20, Z
    22fe:	51 81       	ldd	r21, Z+1	; 0x01
    2300:	84 0f       	add	r24, r20
    2302:	95 1f       	adc	r25, r21
    2304:	c8 17       	cp	r28, r24
    2306:	d9 07       	cpc	r29, r25
    2308:	59 f4       	brne	.+22     	; 0x2320 <free+0x82>
    230a:	88 81       	ld	r24, Y
    230c:	99 81       	ldd	r25, Y+1	; 0x01
    230e:	84 0f       	add	r24, r20
    2310:	95 1f       	adc	r25, r21
    2312:	02 96       	adiw	r24, 0x02	; 2
    2314:	91 83       	std	Z+1, r25	; 0x01
    2316:	80 83       	st	Z, r24
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	9b 81       	ldd	r25, Y+3	; 0x03
    231c:	93 83       	std	Z+3, r25	; 0x03
    231e:	82 83       	std	Z+2, r24	; 0x02
    2320:	21 15       	cp	r18, r1
    2322:	31 05       	cpc	r19, r1
    2324:	29 f4       	brne	.+10     	; 0x2330 <free+0x92>
    2326:	f0 93 46 04 	sts	0x0446, r31	; 0x800446 <__flp+0x1>
    232a:	e0 93 45 04 	sts	0x0445, r30	; 0x800445 <__flp>
    232e:	3d c0       	rjmp	.+122    	; 0x23aa <free+0x10c>
    2330:	e9 01       	movw	r28, r18
    2332:	fb 83       	std	Y+3, r31	; 0x03
    2334:	ea 83       	std	Y+2, r30	; 0x02
    2336:	49 91       	ld	r20, Y+
    2338:	59 91       	ld	r21, Y+
    233a:	c4 0f       	add	r28, r20
    233c:	d5 1f       	adc	r29, r21
    233e:	ec 17       	cp	r30, r28
    2340:	fd 07       	cpc	r31, r29
    2342:	61 f4       	brne	.+24     	; 0x235c <free+0xbe>
    2344:	80 81       	ld	r24, Z
    2346:	91 81       	ldd	r25, Z+1	; 0x01
    2348:	84 0f       	add	r24, r20
    234a:	95 1f       	adc	r25, r21
    234c:	02 96       	adiw	r24, 0x02	; 2
    234e:	e9 01       	movw	r28, r18
    2350:	99 83       	std	Y+1, r25	; 0x01
    2352:	88 83       	st	Y, r24
    2354:	82 81       	ldd	r24, Z+2	; 0x02
    2356:	93 81       	ldd	r25, Z+3	; 0x03
    2358:	9b 83       	std	Y+3, r25	; 0x03
    235a:	8a 83       	std	Y+2, r24	; 0x02
    235c:	e0 e0       	ldi	r30, 0x00	; 0
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	12 96       	adiw	r26, 0x02	; 2
    2362:	8d 91       	ld	r24, X+
    2364:	9c 91       	ld	r25, X
    2366:	13 97       	sbiw	r26, 0x03	; 3
    2368:	00 97       	sbiw	r24, 0x00	; 0
    236a:	19 f0       	breq	.+6      	; 0x2372 <free+0xd4>
    236c:	fd 01       	movw	r30, r26
    236e:	dc 01       	movw	r26, r24
    2370:	f7 cf       	rjmp	.-18     	; 0x2360 <free+0xc2>
    2372:	8d 91       	ld	r24, X+
    2374:	9c 91       	ld	r25, X
    2376:	11 97       	sbiw	r26, 0x01	; 1
    2378:	9d 01       	movw	r18, r26
    237a:	2e 5f       	subi	r18, 0xFE	; 254
    237c:	3f 4f       	sbci	r19, 0xFF	; 255
    237e:	82 0f       	add	r24, r18
    2380:	93 1f       	adc	r25, r19
    2382:	20 91 43 04 	lds	r18, 0x0443	; 0x800443 <__brkval>
    2386:	30 91 44 04 	lds	r19, 0x0444	; 0x800444 <__brkval+0x1>
    238a:	28 17       	cp	r18, r24
    238c:	39 07       	cpc	r19, r25
    238e:	69 f4       	brne	.+26     	; 0x23aa <free+0x10c>
    2390:	30 97       	sbiw	r30, 0x00	; 0
    2392:	29 f4       	brne	.+10     	; 0x239e <free+0x100>
    2394:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <__flp+0x1>
    2398:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <__flp>
    239c:	02 c0       	rjmp	.+4      	; 0x23a2 <free+0x104>
    239e:	13 82       	std	Z+3, r1	; 0x03
    23a0:	12 82       	std	Z+2, r1	; 0x02
    23a2:	b0 93 44 04 	sts	0x0444, r27	; 0x800444 <__brkval+0x1>
    23a6:	a0 93 43 04 	sts	0x0443, r26	; 0x800443 <__brkval>
    23aa:	df 91       	pop	r29
    23ac:	cf 91       	pop	r28
    23ae:	08 95       	ret

000023b0 <strnlen_P>:
    23b0:	fc 01       	movw	r30, r24
    23b2:	05 90       	lpm	r0, Z+
    23b4:	61 50       	subi	r22, 0x01	; 1
    23b6:	70 40       	sbci	r23, 0x00	; 0
    23b8:	01 10       	cpse	r0, r1
    23ba:	d8 f7       	brcc	.-10     	; 0x23b2 <strnlen_P+0x2>
    23bc:	80 95       	com	r24
    23be:	90 95       	com	r25
    23c0:	8e 0f       	add	r24, r30
    23c2:	9f 1f       	adc	r25, r31
    23c4:	08 95       	ret

000023c6 <memset>:
    23c6:	dc 01       	movw	r26, r24
    23c8:	01 c0       	rjmp	.+2      	; 0x23cc <memset+0x6>
    23ca:	6d 93       	st	X+, r22
    23cc:	41 50       	subi	r20, 0x01	; 1
    23ce:	50 40       	sbci	r21, 0x00	; 0
    23d0:	e0 f7       	brcc	.-8      	; 0x23ca <memset+0x4>
    23d2:	08 95       	ret

000023d4 <strnlen>:
    23d4:	fc 01       	movw	r30, r24
    23d6:	61 50       	subi	r22, 0x01	; 1
    23d8:	70 40       	sbci	r23, 0x00	; 0
    23da:	01 90       	ld	r0, Z+
    23dc:	01 10       	cpse	r0, r1
    23de:	d8 f7       	brcc	.-10     	; 0x23d6 <strnlen+0x2>
    23e0:	80 95       	com	r24
    23e2:	90 95       	com	r25
    23e4:	8e 0f       	add	r24, r30
    23e6:	9f 1f       	adc	r25, r31
    23e8:	08 95       	ret

000023ea <strrev>:
    23ea:	dc 01       	movw	r26, r24
    23ec:	fc 01       	movw	r30, r24
    23ee:	67 2f       	mov	r22, r23
    23f0:	71 91       	ld	r23, Z+
    23f2:	77 23       	and	r23, r23
    23f4:	e1 f7       	brne	.-8      	; 0x23ee <strrev+0x4>
    23f6:	32 97       	sbiw	r30, 0x02	; 2
    23f8:	04 c0       	rjmp	.+8      	; 0x2402 <strrev+0x18>
    23fa:	7c 91       	ld	r23, X
    23fc:	6d 93       	st	X+, r22
    23fe:	70 83       	st	Z, r23
    2400:	62 91       	ld	r22, -Z
    2402:	ae 17       	cp	r26, r30
    2404:	bf 07       	cpc	r27, r31
    2406:	c8 f3       	brcs	.-14     	; 0x23fa <strrev+0x10>
    2408:	08 95       	ret

0000240a <fputc>:
    240a:	0f 93       	push	r16
    240c:	1f 93       	push	r17
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	fb 01       	movw	r30, r22
    2414:	23 81       	ldd	r18, Z+3	; 0x03
    2416:	21 fd       	sbrc	r18, 1
    2418:	03 c0       	rjmp	.+6      	; 0x2420 <fputc+0x16>
    241a:	8f ef       	ldi	r24, 0xFF	; 255
    241c:	9f ef       	ldi	r25, 0xFF	; 255
    241e:	2c c0       	rjmp	.+88     	; 0x2478 <fputc+0x6e>
    2420:	22 ff       	sbrs	r18, 2
    2422:	16 c0       	rjmp	.+44     	; 0x2450 <fputc+0x46>
    2424:	46 81       	ldd	r20, Z+6	; 0x06
    2426:	57 81       	ldd	r21, Z+7	; 0x07
    2428:	24 81       	ldd	r18, Z+4	; 0x04
    242a:	35 81       	ldd	r19, Z+5	; 0x05
    242c:	42 17       	cp	r20, r18
    242e:	53 07       	cpc	r21, r19
    2430:	44 f4       	brge	.+16     	; 0x2442 <fputc+0x38>
    2432:	a0 81       	ld	r26, Z
    2434:	b1 81       	ldd	r27, Z+1	; 0x01
    2436:	9d 01       	movw	r18, r26
    2438:	2f 5f       	subi	r18, 0xFF	; 255
    243a:	3f 4f       	sbci	r19, 0xFF	; 255
    243c:	31 83       	std	Z+1, r19	; 0x01
    243e:	20 83       	st	Z, r18
    2440:	8c 93       	st	X, r24
    2442:	26 81       	ldd	r18, Z+6	; 0x06
    2444:	37 81       	ldd	r19, Z+7	; 0x07
    2446:	2f 5f       	subi	r18, 0xFF	; 255
    2448:	3f 4f       	sbci	r19, 0xFF	; 255
    244a:	37 83       	std	Z+7, r19	; 0x07
    244c:	26 83       	std	Z+6, r18	; 0x06
    244e:	14 c0       	rjmp	.+40     	; 0x2478 <fputc+0x6e>
    2450:	8b 01       	movw	r16, r22
    2452:	ec 01       	movw	r28, r24
    2454:	fb 01       	movw	r30, r22
    2456:	00 84       	ldd	r0, Z+8	; 0x08
    2458:	f1 85       	ldd	r31, Z+9	; 0x09
    245a:	e0 2d       	mov	r30, r0
    245c:	19 95       	eicall
    245e:	89 2b       	or	r24, r25
    2460:	e1 f6       	brne	.-72     	; 0x241a <fputc+0x10>
    2462:	d8 01       	movw	r26, r16
    2464:	16 96       	adiw	r26, 0x06	; 6
    2466:	8d 91       	ld	r24, X+
    2468:	9c 91       	ld	r25, X
    246a:	17 97       	sbiw	r26, 0x07	; 7
    246c:	01 96       	adiw	r24, 0x01	; 1
    246e:	17 96       	adiw	r26, 0x07	; 7
    2470:	9c 93       	st	X, r25
    2472:	8e 93       	st	-X, r24
    2474:	16 97       	sbiw	r26, 0x06	; 6
    2476:	ce 01       	movw	r24, r28
    2478:	df 91       	pop	r29
    247a:	cf 91       	pop	r28
    247c:	1f 91       	pop	r17
    247e:	0f 91       	pop	r16
    2480:	08 95       	ret

00002482 <__ultoa_invert>:
    2482:	fa 01       	movw	r30, r20
    2484:	aa 27       	eor	r26, r26
    2486:	28 30       	cpi	r18, 0x08	; 8
    2488:	51 f1       	breq	.+84     	; 0x24de <__ultoa_invert+0x5c>
    248a:	20 31       	cpi	r18, 0x10	; 16
    248c:	81 f1       	breq	.+96     	; 0x24ee <__ultoa_invert+0x6c>
    248e:	e8 94       	clt
    2490:	6f 93       	push	r22
    2492:	6e 7f       	andi	r22, 0xFE	; 254
    2494:	6e 5f       	subi	r22, 0xFE	; 254
    2496:	7f 4f       	sbci	r23, 0xFF	; 255
    2498:	8f 4f       	sbci	r24, 0xFF	; 255
    249a:	9f 4f       	sbci	r25, 0xFF	; 255
    249c:	af 4f       	sbci	r26, 0xFF	; 255
    249e:	b1 e0       	ldi	r27, 0x01	; 1
    24a0:	3e d0       	rcall	.+124    	; 0x251e <__ultoa_invert+0x9c>
    24a2:	b4 e0       	ldi	r27, 0x04	; 4
    24a4:	3c d0       	rcall	.+120    	; 0x251e <__ultoa_invert+0x9c>
    24a6:	67 0f       	add	r22, r23
    24a8:	78 1f       	adc	r23, r24
    24aa:	89 1f       	adc	r24, r25
    24ac:	9a 1f       	adc	r25, r26
    24ae:	a1 1d       	adc	r26, r1
    24b0:	68 0f       	add	r22, r24
    24b2:	79 1f       	adc	r23, r25
    24b4:	8a 1f       	adc	r24, r26
    24b6:	91 1d       	adc	r25, r1
    24b8:	a1 1d       	adc	r26, r1
    24ba:	6a 0f       	add	r22, r26
    24bc:	71 1d       	adc	r23, r1
    24be:	81 1d       	adc	r24, r1
    24c0:	91 1d       	adc	r25, r1
    24c2:	a1 1d       	adc	r26, r1
    24c4:	20 d0       	rcall	.+64     	; 0x2506 <__ultoa_invert+0x84>
    24c6:	09 f4       	brne	.+2      	; 0x24ca <__ultoa_invert+0x48>
    24c8:	68 94       	set
    24ca:	3f 91       	pop	r19
    24cc:	2a e0       	ldi	r18, 0x0A	; 10
    24ce:	26 9f       	mul	r18, r22
    24d0:	11 24       	eor	r1, r1
    24d2:	30 19       	sub	r19, r0
    24d4:	30 5d       	subi	r19, 0xD0	; 208
    24d6:	31 93       	st	Z+, r19
    24d8:	de f6       	brtc	.-74     	; 0x2490 <__ultoa_invert+0xe>
    24da:	cf 01       	movw	r24, r30
    24dc:	08 95       	ret
    24de:	46 2f       	mov	r20, r22
    24e0:	47 70       	andi	r20, 0x07	; 7
    24e2:	40 5d       	subi	r20, 0xD0	; 208
    24e4:	41 93       	st	Z+, r20
    24e6:	b3 e0       	ldi	r27, 0x03	; 3
    24e8:	0f d0       	rcall	.+30     	; 0x2508 <__ultoa_invert+0x86>
    24ea:	c9 f7       	brne	.-14     	; 0x24de <__ultoa_invert+0x5c>
    24ec:	f6 cf       	rjmp	.-20     	; 0x24da <__ultoa_invert+0x58>
    24ee:	46 2f       	mov	r20, r22
    24f0:	4f 70       	andi	r20, 0x0F	; 15
    24f2:	40 5d       	subi	r20, 0xD0	; 208
    24f4:	4a 33       	cpi	r20, 0x3A	; 58
    24f6:	18 f0       	brcs	.+6      	; 0x24fe <__ultoa_invert+0x7c>
    24f8:	49 5d       	subi	r20, 0xD9	; 217
    24fa:	31 fd       	sbrc	r19, 1
    24fc:	40 52       	subi	r20, 0x20	; 32
    24fe:	41 93       	st	Z+, r20
    2500:	02 d0       	rcall	.+4      	; 0x2506 <__ultoa_invert+0x84>
    2502:	a9 f7       	brne	.-22     	; 0x24ee <__ultoa_invert+0x6c>
    2504:	ea cf       	rjmp	.-44     	; 0x24da <__ultoa_invert+0x58>
    2506:	b4 e0       	ldi	r27, 0x04	; 4
    2508:	a6 95       	lsr	r26
    250a:	97 95       	ror	r25
    250c:	87 95       	ror	r24
    250e:	77 95       	ror	r23
    2510:	67 95       	ror	r22
    2512:	ba 95       	dec	r27
    2514:	c9 f7       	brne	.-14     	; 0x2508 <__ultoa_invert+0x86>
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	61 05       	cpc	r22, r1
    251a:	71 05       	cpc	r23, r1
    251c:	08 95       	ret
    251e:	9b 01       	movw	r18, r22
    2520:	ac 01       	movw	r20, r24
    2522:	0a 2e       	mov	r0, r26
    2524:	06 94       	lsr	r0
    2526:	57 95       	ror	r21
    2528:	47 95       	ror	r20
    252a:	37 95       	ror	r19
    252c:	27 95       	ror	r18
    252e:	ba 95       	dec	r27
    2530:	c9 f7       	brne	.-14     	; 0x2524 <__ultoa_invert+0xa2>
    2532:	62 0f       	add	r22, r18
    2534:	73 1f       	adc	r23, r19
    2536:	84 1f       	adc	r24, r20
    2538:	95 1f       	adc	r25, r21
    253a:	a0 1d       	adc	r26, r0
    253c:	08 95       	ret

0000253e <_exit>:
    253e:	f8 94       	cli

00002540 <__stop_program>:
    2540:	ff cf       	rjmp	.-2      	; 0x2540 <__stop_program>
