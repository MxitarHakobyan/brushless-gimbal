
drv_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800200  0000146c  00001500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000146c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800258  00800258  00001558  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000206d  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001198  00000000  00000000  000037a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000de2  00000000  00000000  00004939  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000410  00000000  00000000  0000571c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000947  00000000  00000000  00005b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001386  00000000  00000000  00006473  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000077f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec e6       	ldi	r30, 0x6C	; 108
      fc:	f4 e1       	ldi	r31, 0x14	; 20
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 35       	cpi	r26, 0x58	; 88
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a8 e5       	ldi	r26, 0x58	; 88
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a2 37       	cpi	r26, 0x72	; 114
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	39 d0       	rcall	.+114    	; 0x192 <main>
     120:	0c 94 34 0a 	jmp	0x1468	; 0x1468 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <uart_putchar>:
		}
	}
	return true;
}
static int uart_putchar(char c, FILE *stream)
{
     126:	cf 93       	push	r28
     128:	c8 2f       	mov	r28, r24

	if (c == '\n')
     12a:	8a 30       	cpi	r24, 0x0A	; 10
     12c:	11 f4       	brne	.+4      	; 0x132 <uart_putchar+0xc>
	uart_putchar('\r', stream);
     12e:	8d e0       	ldi	r24, 0x0D	; 13
     130:	fa df       	rcall	.-12     	; 0x126 <uart_putchar>
	while ( !( UCSR0A & (1<<UDRE0)) )
     132:	e0 ec       	ldi	r30, 0xC0	; 192
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	85 ff       	sbrs	r24, 5
     13a:	fd cf       	rjmp	.-6      	; 0x136 <uart_putchar+0x10>
	;
	/* Put data into buffer, sends the data */
	UDR0 = c;
     13c:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	return 0;
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	cf 91       	pop	r28
     146:	08 95       	ret

00000148 <print16>:
//}

void print16(uint16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     148:	0f 93       	push	r16
     14a:	1f 93       	push	r17
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
     154:	2a 97       	sbiw	r28, 0x0a	; 10
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     160:	4a e0       	ldi	r20, 0x0A	; 10
     162:	8e 01       	movw	r16, r28
     164:	0f 5f       	subi	r16, 0xFF	; 255
     166:	1f 4f       	sbci	r17, 0xFF	; 255
     168:	b8 01       	movw	r22, r16
     16a:	fc 01       	movw	r30, r24
     16c:	80 81       	ld	r24, Z
     16e:	91 81       	ldd	r25, Z+1	; 0x01
     170:	c7 d4       	rcall	.+2446   	; 0xb00 <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     172:	1f 93       	push	r17
     174:	0f 93       	push	r16
     176:	31 d5       	rcall	.+2658   	; 0xbda <printf>
	//printf("\n");
}
     178:	0f 90       	pop	r0
     17a:	0f 90       	pop	r0
     17c:	2a 96       	adiw	r28, 0x0a	; 10
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	f8 94       	cli
     182:	de bf       	out	0x3e, r29	; 62
     184:	0f be       	out	0x3f, r0	; 63
     186:	cd bf       	out	0x3d, r28	; 61
     188:	df 91       	pop	r29
     18a:	cf 91       	pop	r28
     18c:	1f 91       	pop	r17
     18e:	0f 91       	pop	r16
     190:	08 95       	ret

00000192 <main>:
uint16_t ADC_max=0;
uint8_t buffer[14];

int main(void)

{	
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	cd b7       	in	r28, 0x3d	; 61
     198:	de b7       	in	r29, 0x3e	; 62
     19a:	a4 97       	sbiw	r28, 0x24	; 36
     19c:	0f b6       	in	r0, 0x3f	; 63
     19e:	f8 94       	cli
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	0f be       	out	0x3f, r0	; 63
     1a4:	cd bf       	out	0x3d, r28	; 61

	USART_Init(MY_UBRR);
     1a6:	80 e1       	ldi	r24, 0x10	; 16
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	3a d4       	rcall	.+2164   	; 0xa20 <USART_Init>
	//uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
	uart_str = fdevopen(uart_putchar, NULL);
     1ac:	60 e0       	ldi	r22, 0x00	; 0
     1ae:	70 e0       	ldi	r23, 0x00	; 0
     1b0:	83 e9       	ldi	r24, 0x93	; 147
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	c8 d4       	rcall	.+2448   	; 0xb46 <fdevopen>
     1b6:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <__data_end+0x1>
     1ba:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
	//init_gpio();
	sei();
	//sbi(ADCSRA,ADSC);
	
	/*----------MPU6050 twi init---------*/
	i2c_init();
     1be:	78 94       	sei
	uint16_t accel_x;
	uint16_t accel_y;
	uint16_t accel_z;
	double angle_pitch=0;
	double angle_roll=0;
	printf("\n");
     1c0:	7e d3       	rcall	.+1788   	; 0x8be <i2c_init>
     1c2:	8a e0       	ldi	r24, 0x0A	; 10
     1c4:	90 e0       	ldi	r25, 0x00	; 0
	mpu6050_writeByte(MPU6050_RA_GYRO_CONFIG,0x08);//gyro sensitivity set to 500 o/s
     1c6:	1c d5       	rcall	.+2616   	; 0xc00 <putchar>
     1c8:	68 e0       	ldi	r22, 0x08	; 8
     1ca:	8b e1       	ldi	r24, 0x1B	; 27
	mpu6050_writeByte(MPU6050_RA_ACCEL_CONFIG,0x10);//accel sensitivity -/+ 8g
     1cc:	b1 d2       	rcall	.+1378   	; 0x730 <mpu6050_writeByte>
     1ce:	60 e1       	ldi	r22, 0x10	; 16
     1d0:	8c e1       	ldi	r24, 0x1C	; 28
     1d2:	ae d2       	rcall	.+1372   	; 0x730 <mpu6050_writeByte>
	#ifdef CALIBERATED_DATA
		int32_t gyroX_calib=0;
     1d4:	1d 86       	std	Y+13, r1	; 0x0d
     1d6:	1e 86       	std	Y+14, r1	; 0x0e
     1d8:	1f 86       	std	Y+15, r1	; 0x0f
     1da:	18 8a       	std	Y+16, r1	; 0x10
		int32_t gyroY_calib=0;
     1dc:	19 8a       	std	Y+17, r1	; 0x11
     1de:	1a 8a       	std	Y+18, r1	; 0x12
     1e0:	1b 8a       	std	Y+19, r1	; 0x13
     1e2:	1c 8a       	std	Y+20, r1	; 0x14
		int32_t gyroZ_calib=0;
     1e4:	1d 8a       	std	Y+21, r1	; 0x15
     1e6:	1e 8a       	std	Y+22, r1	; 0x16
     1e8:	1f 8a       	std	Y+23, r1	; 0x17
     1ea:	18 8e       	std	Y+24, r1	; 0x18
		int32_t accelX_calib=0;
     1ec:	19 8e       	std	Y+25, r1	; 0x19
     1ee:	1a 8e       	std	Y+26, r1	; 0x1a
     1f0:	1b 8e       	std	Y+27, r1	; 0x1b
     1f2:	1c 8e       	std	Y+28, r1	; 0x1c
		int32_t accelY_calib=0;
     1f4:	1d 8e       	std	Y+29, r1	; 0x1d
     1f6:	1e 8e       	std	Y+30, r1	; 0x1e
     1f8:	1f 8e       	std	Y+31, r1	; 0x1f
     1fa:	18 a2       	std	Y+32, r1	; 0x20
		int32_t accelZ_calib=0;
     1fc:	19 a2       	std	Y+33, r1	; 0x21
     1fe:	1a a2       	std	Y+34, r1	; 0x22
     200:	1b a2       	std	Y+35, r1	; 0x23
     202:	1c a2       	std	Y+36, r1	; 0x24
		mpu6050_calibrate_gyro(&gyroX_calib,&gyroY_calib,&gyroZ_calib);
     204:	ae 01       	movw	r20, r28
     206:	4b 5e       	subi	r20, 0xEB	; 235
     208:	5f 4f       	sbci	r21, 0xFF	; 255
     20a:	be 01       	movw	r22, r28
     20c:	6f 5e       	subi	r22, 0xEF	; 239
     20e:	7f 4f       	sbci	r23, 0xFF	; 255
     210:	ce 01       	movw	r24, r28
     212:	0d 96       	adiw	r24, 0x0d	; 13
     214:	ef d0       	rcall	.+478    	; 0x3f4 <mpu6050_calibrate_gyro>
		mpu6050_calibrate_accel(&accelX_calib,&accelY_calib,&accelZ_calib);
     216:	ae 01       	movw	r20, r28
     218:	4f 5d       	subi	r20, 0xDF	; 223
     21a:	5f 4f       	sbci	r21, 0xFF	; 255
     21c:	be 01       	movw	r22, r28
     21e:	63 5e       	subi	r22, 0xE3	; 227
     220:	7f 4f       	sbci	r23, 0xFF	; 255
     222:	ce 01       	movw	r24, r28
     224:	49 96       	adiw	r24, 0x19	; 25
     226:	cd d1       	rcall	.+922    	; 0x5c2 <mpu6050_calibrate_accel>
				grZ;
			#endif
		#ifdef PRINT_RAW_DATA
			/*--------raw data gyro-accel------*/
			
			printf("x= ");
     228:	0f 2e       	mov	r0, r31
     22a:	f6 e0       	ldi	r31, 0x06	; 6
     22c:	6f 2e       	mov	r6, r31
     22e:	f2 e0       	ldi	r31, 0x02	; 2
     230:	7f 2e       	mov	r7, r31
     232:	f0 2d       	mov	r31, r0
			print16(&gyro_x);
			printf("  ");
     234:	0f 2e       	mov	r0, r31
     236:	fa e0       	ldi	r31, 0x0A	; 10
     238:	cf 2e       	mov	r12, r31
     23a:	f2 e0       	ldi	r31, 0x02	; 2
     23c:	df 2e       	mov	r13, r31
     23e:	f0 2d       	mov	r31, r0
			
			printf("y= ");
     240:	0f 2e       	mov	r0, r31
     242:	fd e0       	ldi	r31, 0x0D	; 13
     244:	8f 2e       	mov	r8, r31
     246:	f2 e0       	ldi	r31, 0x02	; 2
     248:	9f 2e       	mov	r9, r31
     24a:	f0 2d       	mov	r31, r0
			print16(&gyro_y);
			printf("  ");
			
			printf("Z= ");
     24c:	0f 2e       	mov	r0, r31
     24e:	f2 e2       	ldi	r31, 0x22	; 34
     250:	af 2e       	mov	r10, r31
     252:	f2 e0       	ldi	r31, 0x02	; 2
     254:	bf 2e       	mov	r11, r31
     256:	f0 2d       	mov	r31, r0
			print16(&gyro_z);
			printf("  ");
			
			
			printf("accX= ");
     258:	0f 2e       	mov	r0, r31
     25a:	f1 e1       	ldi	r31, 0x11	; 17
     25c:	4f 2e       	mov	r4, r31
     25e:	f2 e0       	ldi	r31, 0x02	; 2
     260:	5f 2e       	mov	r5, r31
     262:	f0 2d       	mov	r31, r0
			print16(&accel_x);
			printf("  ");
			
			printf("accY= ");
     264:	0f 2e       	mov	r0, r31
     266:	f8 e1       	ldi	r31, 0x18	; 24
     268:	2f 2e       	mov	r2, r31
     26a:	f2 e0       	ldi	r31, 0x02	; 2
     26c:	3f 2e       	mov	r3, r31
     26e:	f0 2d       	mov	r31, r0
	
	
	/*-----------------end---------------*/
    while (1) //hesa kgam
    {
    	mpu6050_getRawData(&accel_x,&accel_y,&accel_z,&gyro_x,&gyro_y,&gyro_z);
     270:	ce 01       	movw	r24, r28
     272:	05 96       	adiw	r24, 0x05	; 5
     274:	7c 01       	movw	r14, r24
     276:	8e 01       	movw	r16, r28
     278:	0d 5f       	subi	r16, 0xFD	; 253
     27a:	1f 4f       	sbci	r17, 0xFF	; 255
     27c:	9e 01       	movw	r18, r28
     27e:	2f 5f       	subi	r18, 0xFF	; 255
     280:	3f 4f       	sbci	r19, 0xFF	; 255
     282:	ae 01       	movw	r20, r28
     284:	45 5f       	subi	r20, 0xF5	; 245
     286:	5f 4f       	sbci	r21, 0xFF	; 255
     288:	be 01       	movw	r22, r28
     28a:	67 5f       	subi	r22, 0xF7	; 247
     28c:	7f 4f       	sbci	r23, 0xFF	; 255
     28e:	02 96       	adiw	r24, 0x02	; 2
     290:	ab d2       	rcall	.+1366   	; 0x7e8 <mpu6050_getRawData>
			#ifdef CALIBERATED_DATA
				accX;
     292:	8f 81       	ldd	r24, Y+7	; 0x07
     294:	98 85       	ldd	r25, Y+8	; 0x08
     296:	29 8d       	ldd	r18, Y+25	; 0x19
     298:	3a 8d       	ldd	r19, Y+26	; 0x1a
     29a:	82 1b       	sub	r24, r18
     29c:	93 0b       	sbc	r25, r19
     29e:	98 87       	std	Y+8, r25	; 0x08
     2a0:	8f 83       	std	Y+7, r24	; 0x07
				accY;
     2a2:	89 85       	ldd	r24, Y+9	; 0x09
     2a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     2a6:	2d 8d       	ldd	r18, Y+29	; 0x1d
     2a8:	3e 8d       	ldd	r19, Y+30	; 0x1e
     2aa:	82 1b       	sub	r24, r18
     2ac:	93 0b       	sbc	r25, r19
     2ae:	9a 87       	std	Y+10, r25	; 0x0a
     2b0:	89 87       	std	Y+9, r24	; 0x09
				accZ;
     2b2:	8b 85       	ldd	r24, Y+11	; 0x0b
     2b4:	9c 85       	ldd	r25, Y+12	; 0x0c
     2b6:	29 a1       	ldd	r18, Y+33	; 0x21
     2b8:	3a a1       	ldd	r19, Y+34	; 0x22
     2ba:	82 1b       	sub	r24, r18
     2bc:	93 0b       	sbc	r25, r19
     2be:	9c 87       	std	Y+12, r25	; 0x0c
     2c0:	8b 87       	std	Y+11, r24	; 0x0b
				grX;
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	9a 81       	ldd	r25, Y+2	; 0x02
     2c6:	2d 85       	ldd	r18, Y+13	; 0x0d
     2c8:	3e 85       	ldd	r19, Y+14	; 0x0e
     2ca:	82 1b       	sub	r24, r18
     2cc:	93 0b       	sbc	r25, r19
     2ce:	9a 83       	std	Y+2, r25	; 0x02
     2d0:	89 83       	std	Y+1, r24	; 0x01
				grY;
     2d2:	8b 81       	ldd	r24, Y+3	; 0x03
     2d4:	9c 81       	ldd	r25, Y+4	; 0x04
     2d6:	29 89       	ldd	r18, Y+17	; 0x11
     2d8:	3a 89       	ldd	r19, Y+18	; 0x12
     2da:	82 1b       	sub	r24, r18
     2dc:	93 0b       	sbc	r25, r19
     2de:	9c 83       	std	Y+4, r25	; 0x04
     2e0:	8b 83       	std	Y+3, r24	; 0x03
				grZ;
     2e2:	8d 81       	ldd	r24, Y+5	; 0x05
     2e4:	9e 81       	ldd	r25, Y+6	; 0x06
     2e6:	2d 89       	ldd	r18, Y+21	; 0x15
     2e8:	3e 89       	ldd	r19, Y+22	; 0x16
     2ea:	82 1b       	sub	r24, r18
			#endif
		#ifdef PRINT_RAW_DATA
			/*--------raw data gyro-accel------*/
			
			printf("x= ");
     2ec:	93 0b       	sbc	r25, r19
     2ee:	9e 83       	std	Y+6, r25	; 0x06
			print16(&gyro_x);
     2f0:	8d 83       	std	Y+5, r24	; 0x05
     2f2:	7f 92       	push	r7
			printf("  ");
     2f4:	6f 92       	push	r6
     2f6:	71 d4       	rcall	.+2274   	; 0xbda <printf>
			
			printf("y= ");
     2f8:	ce 01       	movw	r24, r28
     2fa:	01 96       	adiw	r24, 0x01	; 1
			print16(&gyro_y);
     2fc:	25 df       	rcall	.-438    	; 0x148 <print16>
     2fe:	df 92       	push	r13
			printf("  ");
     300:	cf 92       	push	r12
     302:	6b d4       	rcall	.+2262   	; 0xbda <printf>
     304:	9f 92       	push	r9
			
			printf("Z= ");
     306:	8f 92       	push	r8
     308:	68 d4       	rcall	.+2256   	; 0xbda <printf>
			print16(&gyro_z);
     30a:	c8 01       	movw	r24, r16
			printf("  ");
     30c:	1d df       	rcall	.-454    	; 0x148 <print16>
     30e:	df 92       	push	r13
			
			
			printf("accX= ");
     310:	cf 92       	push	r12
     312:	63 d4       	rcall	.+2246   	; 0xbda <printf>
     314:	bf 92       	push	r11
			print16(&accel_x);
     316:	af 92       	push	r10
     318:	60 d4       	rcall	.+2240   	; 0xbda <printf>
			printf("  ");
     31a:	c7 01       	movw	r24, r14
     31c:	15 df       	rcall	.-470    	; 0x148 <print16>
     31e:	df 92       	push	r13
			
			printf("accY= ");
     320:	cf 92       	push	r12
     322:	5b d4       	rcall	.+2230   	; 0xbda <printf>
     324:	5f 92       	push	r5
			print16(&accel_y);
     326:	4f 92       	push	r4
     328:	58 d4       	rcall	.+2224   	; 0xbda <printf>
     32a:	ce 01       	movw	r24, r28
     32c:	07 96       	adiw	r24, 0x07	; 7
			printf("  ");
     32e:	0c df       	rcall	.-488    	; 0x148 <print16>
     330:	df 92       	push	r13
     332:	cf 92       	push	r12
     334:	52 d4       	rcall	.+2212   	; 0xbda <printf>
			
			printf("accZ= ");
     336:	3f 92       	push	r3
     338:	2f 92       	push	r2
     33a:	4f d4       	rcall	.+2206   	; 0xbda <printf>
     33c:	ce 01       	movw	r24, r28
     33e:	09 96       	adiw	r24, 0x09	; 9
     340:	03 df       	rcall	.-506    	; 0x148 <print16>
			print16(&accel_z);
     342:	df 92       	push	r13
     344:	cf 92       	push	r12
     346:	49 d4       	rcall	.+2194   	; 0xbda <printf>
     348:	8f e1       	ldi	r24, 0x1F	; 31
			printf("  ");
     34a:	92 e0       	ldi	r25, 0x02	; 2
     34c:	9f 93       	push	r25
     34e:	8f 93       	push	r24
     350:	44 d4       	rcall	.+2184   	; 0xbda <printf>
			printf("\n");
     352:	ce 01       	movw	r24, r28
     354:	0b 96       	adiw	r24, 0x0b	; 11
     356:	f8 de       	rcall	.-528    	; 0x148 <print16>
     358:	df 92       	push	r13
     35a:	cf 92       	push	r12
     35c:	3e d4       	rcall	.+2172   	; 0xbda <printf>
     35e:	8a e0       	ldi	r24, 0x0A	; 10
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	4e d4       	rcall	.+2204   	; 0xc00 <putchar>
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	f8 94       	cli
     368:	de bf       	out	0x3e, r29	; 62
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	cd bf       	out	0x3d, r28	; 61
     36e:	80 cf       	rjmp	.-256    	; 0x270 <main+0xde>

00000370 <mpu6050_readByte>:
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_H);
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_L);
	return axis_value;
}
uint8_t mpu6050_readByte(uint8_t byteToRead)//readbyte
{
     370:	cf 93       	push	r28
     372:	c8 2f       	mov	r28, r24
	i2c_start(MPU6050_WRITE);
     374:	80 ed       	ldi	r24, 0xD0	; 208
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	a8 d2       	rcall	.+1360   	; 0x8ca <i2c_start>
	i2c_write(byteToRead);
     37a:	8c 2f       	mov	r24, r28
     37c:	90 e0       	ldi	r25, 0x00	; 0
	i2c_stop();
	
	i2c_start(MPU6050_READ);
     37e:	fb d2       	rcall	.+1526   	; 0x976 <i2c_write>
     380:	ea d2       	rcall	.+1492   	; 0x956 <i2c_stop>
	uint8_t byteToReturn=i2c_readNak();
     382:	81 ed       	ldi	r24, 0xD1	; 209
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	a1 d2       	rcall	.+1346   	; 0x8ca <i2c_start>
	i2c_stop();
     388:	31 d3       	rcall	.+1634   	; 0x9ec <i2c_readNak>
     38a:	c8 2f       	mov	r28, r24
	return byteToReturn;
}
     38c:	e4 d2       	rcall	.+1480   	; 0x956 <i2c_stop>
     38e:	8c 2f       	mov	r24, r28
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <mpu6050_read_gyroX>:
	//-----------------------------------
	*/
}
#endif
uint16_t mpu6050_read_gyroX()//axis x=0,y=1,z=2
{
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_XOUT_H);
     398:	83 e4       	ldi	r24, 0x43	; 67
     39a:	ea df       	rcall	.-44     	; 0x370 <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_XOUT_L);
     39c:	c8 2f       	mov	r28, r24
     39e:	d0 e0       	ldi	r29, 0x00	; 0
     3a0:	dc 2f       	mov	r29, r28
     3a2:	cc 27       	eor	r28, r28
     3a4:	84 e4       	ldi	r24, 0x44	; 68
     3a6:	e4 df       	rcall	.-56     	; 0x370 <mpu6050_readByte>
	return axis_value;
}
     3a8:	9e 01       	movw	r18, r28
     3aa:	28 2b       	or	r18, r24
     3ac:	c9 01       	movw	r24, r18
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <mpu6050_read_gyroY>:
uint16_t mpu6050_read_gyroY()//axis x=0,y=1,z=2
{
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_YOUT_H);
     3b8:	85 e4       	ldi	r24, 0x45	; 69
     3ba:	da df       	rcall	.-76     	; 0x370 <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_YOUT_L);
     3bc:	c8 2f       	mov	r28, r24
     3be:	d0 e0       	ldi	r29, 0x00	; 0
     3c0:	dc 2f       	mov	r29, r28
     3c2:	cc 27       	eor	r28, r28
     3c4:	86 e4       	ldi	r24, 0x46	; 70
     3c6:	d4 df       	rcall	.-88     	; 0x370 <mpu6050_readByte>
	return axis_value;
}
     3c8:	9e 01       	movw	r18, r28
     3ca:	28 2b       	or	r18, r24
     3cc:	c9 01       	movw	r24, r18
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	08 95       	ret

000003d4 <mpu6050_read_gyroZ>:
uint16_t mpu6050_read_gyroZ()//axis x=0,y=1,z=2
{
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_H);
     3d8:	87 e4       	ldi	r24, 0x47	; 71
     3da:	ca df       	rcall	.-108    	; 0x370 <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_L);
     3dc:	c8 2f       	mov	r28, r24
     3de:	d0 e0       	ldi	r29, 0x00	; 0
     3e0:	dc 2f       	mov	r29, r28
     3e2:	cc 27       	eor	r28, r28
     3e4:	88 e4       	ldi	r24, 0x48	; 72
     3e6:	c4 df       	rcall	.-120    	; 0x370 <mpu6050_readByte>
	return axis_value;
}
     3e8:	9e 01       	movw	r18, r28
     3ea:	28 2b       	or	r18, r24
     3ec:	c9 01       	movw	r24, r18
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	08 95       	ret

000003f4 <mpu6050_calibrate_gyro>:
 *  Author: HP
 */ 
#include "MPU6050.h"
#ifdef CALIBERATED_DATA
void mpu6050_calibrate_gyro(int32_t *x,int32_t *y, int32_t *z)
{
     3f4:	cf 92       	push	r12
     3f6:	df 92       	push	r13
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	6c 01       	movw	r12, r24
     406:	7b 01       	movw	r14, r22
     408:	8a 01       	movw	r16, r20
	printf("Calibrating Gyro...\n");
     40a:	86 e2       	ldi	r24, 0x26	; 38
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	fd d3       	rcall	.+2042   	; 0xc0a <puts>
     410:	c0 ed       	ldi	r28, 0xD0	; 208
	for (int i=0;i<calibration_counter;i++)
	{
		(*x)+=mpu6050_read_gyroX();
     412:	d7 e0       	ldi	r29, 0x07	; 7
     414:	bf df       	rcall	.-130    	; 0x394 <mpu6050_read_gyroX>
     416:	f6 01       	movw	r30, r12
     418:	40 81       	ld	r20, Z
     41a:	51 81       	ldd	r21, Z+1	; 0x01
     41c:	62 81       	ldd	r22, Z+2	; 0x02
     41e:	73 81       	ldd	r23, Z+3	; 0x03
     420:	48 0f       	add	r20, r24
     422:	59 1f       	adc	r21, r25
     424:	61 1d       	adc	r22, r1
     426:	71 1d       	adc	r23, r1
     428:	40 83       	st	Z, r20
     42a:	51 83       	std	Z+1, r21	; 0x01
     42c:	62 83       	std	Z+2, r22	; 0x02
		(*y)+=mpu6050_read_gyroY();
     42e:	73 83       	std	Z+3, r23	; 0x03
     430:	c1 df       	rcall	.-126    	; 0x3b4 <mpu6050_read_gyroY>
     432:	f7 01       	movw	r30, r14
     434:	40 81       	ld	r20, Z
     436:	51 81       	ldd	r21, Z+1	; 0x01
     438:	62 81       	ldd	r22, Z+2	; 0x02
     43a:	73 81       	ldd	r23, Z+3	; 0x03
     43c:	48 0f       	add	r20, r24
     43e:	59 1f       	adc	r21, r25
     440:	61 1d       	adc	r22, r1
     442:	71 1d       	adc	r23, r1
     444:	40 83       	st	Z, r20
     446:	51 83       	std	Z+1, r21	; 0x01
     448:	62 83       	std	Z+2, r22	; 0x02
		(*z)+=mpu6050_read_gyroZ();
     44a:	73 83       	std	Z+3, r23	; 0x03
     44c:	c3 df       	rcall	.-122    	; 0x3d4 <mpu6050_read_gyroZ>
     44e:	f8 01       	movw	r30, r16
     450:	40 81       	ld	r20, Z
     452:	51 81       	ldd	r21, Z+1	; 0x01
     454:	62 81       	ldd	r22, Z+2	; 0x02
     456:	73 81       	ldd	r23, Z+3	; 0x03
     458:	48 0f       	add	r20, r24
     45a:	59 1f       	adc	r21, r25
     45c:	61 1d       	adc	r22, r1
     45e:	71 1d       	adc	r23, r1
     460:	40 83       	st	Z, r20
     462:	51 83       	std	Z+1, r21	; 0x01
     464:	62 83       	std	Z+2, r22	; 0x02
     466:	73 83       	std	Z+3, r23	; 0x03
     468:	21 97       	sbiw	r28, 0x01	; 1
#include "MPU6050.h"
#ifdef CALIBERATED_DATA
void mpu6050_calibrate_gyro(int32_t *x,int32_t *y, int32_t *z)
{
	printf("Calibrating Gyro...\n");
	for (int i=0;i<calibration_counter;i++)
     46a:	a1 f6       	brne	.-88     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		(*x)+=mpu6050_read_gyroX();
		(*y)+=mpu6050_read_gyroY();
		(*z)+=mpu6050_read_gyroZ();
		_delay_ms(caliberation_wait_delay);
	}
		if(*x<0)
     46c:	f6 01       	movw	r30, r12
     46e:	60 81       	ld	r22, Z
     470:	71 81       	ldd	r23, Z+1	; 0x01
     472:	82 81       	ldd	r24, Z+2	; 0x02
     474:	93 81       	ldd	r25, Z+3	; 0x03
     476:	99 23       	and	r25, r25
     478:	ac f4       	brge	.+42     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		(*x)=abs(*x)/calibration_counter;
     47a:	9b 01       	movw	r18, r22
     47c:	77 23       	and	r23, r23
     47e:	24 f4       	brge	.+8      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     480:	22 27       	eor	r18, r18
     482:	33 27       	eor	r19, r19
     484:	26 1b       	sub	r18, r22
     486:	37 0b       	sbc	r19, r23
     488:	c9 01       	movw	r24, r18
     48a:	60 ed       	ldi	r22, 0xD0	; 208
     48c:	77 e0       	ldi	r23, 0x07	; 7
     48e:	d3 d2       	rcall	.+1446   	; 0xa36 <__divmodhi4>
     490:	cb 01       	movw	r24, r22
     492:	77 0f       	add	r23, r23
     494:	aa 0b       	sbc	r26, r26
     496:	bb 0b       	sbc	r27, r27
     498:	f6 01       	movw	r30, r12
     49a:	80 83       	st	Z, r24
     49c:	91 83       	std	Z+1, r25	; 0x01
     49e:	a2 83       	std	Z+2, r26	; 0x02
     4a0:	b3 83       	std	Z+3, r27	; 0x03
		else
		(*x)=(*x)/calibration_counter;
     4a2:	0a c0       	rjmp	.+20     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     4a4:	20 ed       	ldi	r18, 0xD0	; 208
     4a6:	37 e0       	ldi	r19, 0x07	; 7
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	d7 d2       	rcall	.+1454   	; 0xa5c <__divmodsi4>
     4ae:	f6 01       	movw	r30, r12
     4b0:	20 83       	st	Z, r18
     4b2:	31 83       	std	Z+1, r19	; 0x01
     4b4:	42 83       	std	Z+2, r20	; 0x02
     4b6:	53 83       	std	Z+3, r21	; 0x03
		
		if(*y<0)
     4b8:	f7 01       	movw	r30, r14
     4ba:	60 81       	ld	r22, Z
     4bc:	71 81       	ldd	r23, Z+1	; 0x01
     4be:	82 81       	ldd	r24, Z+2	; 0x02
     4c0:	93 81       	ldd	r25, Z+3	; 0x03
     4c2:	99 23       	and	r25, r25
     4c4:	ac f4       	brge	.+42     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
		(*y)=abs(*y)/calibration_counter;
     4c6:	9b 01       	movw	r18, r22
     4c8:	77 23       	and	r23, r23
     4ca:	24 f4       	brge	.+8      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4cc:	22 27       	eor	r18, r18
     4ce:	33 27       	eor	r19, r19
     4d0:	26 1b       	sub	r18, r22
     4d2:	37 0b       	sbc	r19, r23
     4d4:	c9 01       	movw	r24, r18
     4d6:	60 ed       	ldi	r22, 0xD0	; 208
     4d8:	77 e0       	ldi	r23, 0x07	; 7
     4da:	ad d2       	rcall	.+1370   	; 0xa36 <__divmodhi4>
     4dc:	cb 01       	movw	r24, r22
     4de:	77 0f       	add	r23, r23
     4e0:	aa 0b       	sbc	r26, r26
     4e2:	bb 0b       	sbc	r27, r27
     4e4:	f7 01       	movw	r30, r14
     4e6:	80 83       	st	Z, r24
     4e8:	91 83       	std	Z+1, r25	; 0x01
     4ea:	a2 83       	std	Z+2, r26	; 0x02
     4ec:	b3 83       	std	Z+3, r27	; 0x03
		else
		(*y)=(*y)/calibration_counter;
     4ee:	0a c0       	rjmp	.+20     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     4f0:	20 ed       	ldi	r18, 0xD0	; 208
     4f2:	37 e0       	ldi	r19, 0x07	; 7
     4f4:	40 e0       	ldi	r20, 0x00	; 0
     4f6:	50 e0       	ldi	r21, 0x00	; 0
     4f8:	b1 d2       	rcall	.+1378   	; 0xa5c <__divmodsi4>
     4fa:	f7 01       	movw	r30, r14
     4fc:	20 83       	st	Z, r18
     4fe:	31 83       	std	Z+1, r19	; 0x01
     500:	42 83       	std	Z+2, r20	; 0x02
     502:	53 83       	std	Z+3, r21	; 0x03
		
		if(*z<0)
     504:	f8 01       	movw	r30, r16
     506:	60 81       	ld	r22, Z
     508:	71 81       	ldd	r23, Z+1	; 0x01
     50a:	82 81       	ldd	r24, Z+2	; 0x02
     50c:	93 81       	ldd	r25, Z+3	; 0x03
     50e:	99 23       	and	r25, r25
     510:	ac f4       	brge	.+42     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
		(*z)=abs(*z)/calibration_counter;
     512:	9b 01       	movw	r18, r22
     514:	77 23       	and	r23, r23
     516:	24 f4       	brge	.+8      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     518:	22 27       	eor	r18, r18
     51a:	33 27       	eor	r19, r19
     51c:	26 1b       	sub	r18, r22
     51e:	37 0b       	sbc	r19, r23
     520:	c9 01       	movw	r24, r18
     522:	60 ed       	ldi	r22, 0xD0	; 208
     524:	77 e0       	ldi	r23, 0x07	; 7
     526:	87 d2       	rcall	.+1294   	; 0xa36 <__divmodhi4>
     528:	cb 01       	movw	r24, r22
     52a:	77 0f       	add	r23, r23
     52c:	aa 0b       	sbc	r26, r26
     52e:	bb 0b       	sbc	r27, r27
     530:	f8 01       	movw	r30, r16
     532:	80 83       	st	Z, r24
     534:	91 83       	std	Z+1, r25	; 0x01
     536:	a2 83       	std	Z+2, r26	; 0x02
     538:	b3 83       	std	Z+3, r27	; 0x03
		else
		(*z)=(*z)/calibration_counter;
     53a:	0a c0       	rjmp	.+20     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     53c:	20 ed       	ldi	r18, 0xD0	; 208
     53e:	37 e0       	ldi	r19, 0x07	; 7
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	50 e0       	ldi	r21, 0x00	; 0
     544:	8b d2       	rcall	.+1302   	; 0xa5c <__divmodsi4>
     546:	f8 01       	movw	r30, r16
     548:	20 83       	st	Z, r18
     54a:	31 83       	std	Z+1, r19	; 0x01
     54c:	42 83       	std	Z+2, r20	; 0x02
     54e:	53 83       	std	Z+3, r21	; 0x03
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/			
	
}
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	ff 90       	pop	r15
     55a:	ef 90       	pop	r14
     55c:	df 90       	pop	r13
     55e:	cf 90       	pop	r12
     560:	08 95       	ret

00000562 <mpu6050_read_accelX>:
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_H);
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_L);
	return axis_value;
}
uint16_t mpu6050_read_accelX()
{
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_XOUT_H);
     566:	8b e3       	ldi	r24, 0x3B	; 59
     568:	03 df       	rcall	.-506    	; 0x370 <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_XOUT_L);
     56a:	c8 2f       	mov	r28, r24
     56c:	d0 e0       	ldi	r29, 0x00	; 0
     56e:	dc 2f       	mov	r29, r28
     570:	cc 27       	eor	r28, r28
     572:	8c e3       	ldi	r24, 0x3C	; 60
     574:	fd de       	rcall	.-518    	; 0x370 <mpu6050_readByte>
	return axis_value;
}
     576:	9e 01       	movw	r18, r28
     578:	28 2b       	or	r18, r24
     57a:	c9 01       	movw	r24, r18
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <mpu6050_read_accelY>:
uint16_t mpu6050_read_accelY()
{
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_YOUT_H);
     586:	8d e3       	ldi	r24, 0x3D	; 61
     588:	f3 de       	rcall	.-538    	; 0x370 <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_YOUT_L);
     58a:	c8 2f       	mov	r28, r24
     58c:	d0 e0       	ldi	r29, 0x00	; 0
     58e:	dc 2f       	mov	r29, r28
     590:	cc 27       	eor	r28, r28
     592:	8e e3       	ldi	r24, 0x3E	; 62
     594:	ed de       	rcall	.-550    	; 0x370 <mpu6050_readByte>
	return axis_value;
}
     596:	9e 01       	movw	r18, r28
     598:	28 2b       	or	r18, r24
     59a:	c9 01       	movw	r24, r18
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret

000005a2 <mpu6050_read_accelZ>:
uint16_t mpu6050_read_accelZ()
{
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_H);
     5a6:	8f e3       	ldi	r24, 0x3F	; 63
     5a8:	e3 de       	rcall	.-570    	; 0x370 <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_L);
     5aa:	c8 2f       	mov	r28, r24
     5ac:	d0 e0       	ldi	r29, 0x00	; 0
     5ae:	dc 2f       	mov	r29, r28
     5b0:	cc 27       	eor	r28, r28
     5b2:	80 e4       	ldi	r24, 0x40	; 64
     5b4:	dd de       	rcall	.-582    	; 0x370 <mpu6050_readByte>
	return axis_value;
}
     5b6:	9e 01       	movw	r18, r28
     5b8:	28 2b       	or	r18, r24
     5ba:	c9 01       	movw	r24, r18
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	08 95       	ret

000005c2 <mpu6050_calibrate_accel>:
	*/			
	
}

void mpu6050_calibrate_accel(int32_t *x,int32_t *y, int32_t *z)
{
     5c2:	cf 92       	push	r12
     5c4:	df 92       	push	r13
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	6c 01       	movw	r12, r24
     5d4:	7b 01       	movw	r14, r22
     5d6:	8a 01       	movw	r16, r20
	
	printf("Calibrating Accelerometer...\n");
     5d8:	8a e3       	ldi	r24, 0x3A	; 58
     5da:	92 e0       	ldi	r25, 0x02	; 2
     5dc:	16 d3       	rcall	.+1580   	; 0xc0a <puts>
     5de:	c0 ed       	ldi	r28, 0xD0	; 208
	for(int i=0;i<calibration_counter;i++){
		(*x)+=mpu6050_read_accelX();
     5e0:	d7 e0       	ldi	r29, 0x07	; 7
     5e2:	bf df       	rcall	.-130    	; 0x562 <mpu6050_read_accelX>
     5e4:	f6 01       	movw	r30, r12
     5e6:	40 81       	ld	r20, Z
     5e8:	51 81       	ldd	r21, Z+1	; 0x01
     5ea:	62 81       	ldd	r22, Z+2	; 0x02
     5ec:	73 81       	ldd	r23, Z+3	; 0x03
     5ee:	48 0f       	add	r20, r24
     5f0:	59 1f       	adc	r21, r25
     5f2:	61 1d       	adc	r22, r1
     5f4:	71 1d       	adc	r23, r1
     5f6:	40 83       	st	Z, r20
     5f8:	51 83       	std	Z+1, r21	; 0x01
     5fa:	62 83       	std	Z+2, r22	; 0x02
		(*y)+=mpu6050_read_accelY();
     5fc:	73 83       	std	Z+3, r23	; 0x03
     5fe:	c1 df       	rcall	.-126    	; 0x582 <mpu6050_read_accelY>
     600:	f7 01       	movw	r30, r14
     602:	40 81       	ld	r20, Z
     604:	51 81       	ldd	r21, Z+1	; 0x01
     606:	62 81       	ldd	r22, Z+2	; 0x02
     608:	73 81       	ldd	r23, Z+3	; 0x03
     60a:	48 0f       	add	r20, r24
     60c:	59 1f       	adc	r21, r25
     60e:	61 1d       	adc	r22, r1
     610:	71 1d       	adc	r23, r1
     612:	40 83       	st	Z, r20
     614:	51 83       	std	Z+1, r21	; 0x01
     616:	62 83       	std	Z+2, r22	; 0x02
		(*z)+=mpu6050_read_accelZ();
     618:	73 83       	std	Z+3, r23	; 0x03
     61a:	c3 df       	rcall	.-122    	; 0x5a2 <mpu6050_read_accelZ>
     61c:	f8 01       	movw	r30, r16
     61e:	40 81       	ld	r20, Z
     620:	51 81       	ldd	r21, Z+1	; 0x01
     622:	62 81       	ldd	r22, Z+2	; 0x02
     624:	73 81       	ldd	r23, Z+3	; 0x03
     626:	48 0f       	add	r20, r24
     628:	59 1f       	adc	r21, r25
     62a:	61 1d       	adc	r22, r1
     62c:	71 1d       	adc	r23, r1
     62e:	40 83       	st	Z, r20
     630:	51 83       	std	Z+1, r21	; 0x01
     632:	62 83       	std	Z+2, r22	; 0x02
     634:	73 83       	std	Z+3, r23	; 0x03
     636:	21 97       	sbiw	r28, 0x01	; 1

void mpu6050_calibrate_accel(int32_t *x,int32_t *y, int32_t *z)
{
	
	printf("Calibrating Accelerometer...\n");
	for(int i=0;i<calibration_counter;i++){
     638:	a1 f6       	brne	.-88     	; 0x5e2 <mpu6050_calibrate_accel+0x20>
		(*x)+=mpu6050_read_accelX();
		(*y)+=mpu6050_read_accelY();
		(*z)+=mpu6050_read_accelZ();
		_delay_ms(caliberation_wait_delay);
	}
	if(*x<0)
     63a:	f6 01       	movw	r30, r12
     63c:	60 81       	ld	r22, Z
     63e:	71 81       	ldd	r23, Z+1	; 0x01
     640:	82 81       	ldd	r24, Z+2	; 0x02
     642:	93 81       	ldd	r25, Z+3	; 0x03
     644:	99 23       	and	r25, r25
     646:	ac f4       	brge	.+42     	; 0x672 <mpu6050_calibrate_accel+0xb0>
	(*x)=abs(*x)/calibration_counter;
     648:	9b 01       	movw	r18, r22
     64a:	77 23       	and	r23, r23
     64c:	24 f4       	brge	.+8      	; 0x656 <mpu6050_calibrate_accel+0x94>
     64e:	22 27       	eor	r18, r18
     650:	33 27       	eor	r19, r19
     652:	26 1b       	sub	r18, r22
     654:	37 0b       	sbc	r19, r23
     656:	c9 01       	movw	r24, r18
     658:	60 ed       	ldi	r22, 0xD0	; 208
     65a:	77 e0       	ldi	r23, 0x07	; 7
     65c:	ec d1       	rcall	.+984    	; 0xa36 <__divmodhi4>
     65e:	cb 01       	movw	r24, r22
     660:	77 0f       	add	r23, r23
     662:	aa 0b       	sbc	r26, r26
     664:	bb 0b       	sbc	r27, r27
     666:	f6 01       	movw	r30, r12
     668:	80 83       	st	Z, r24
     66a:	91 83       	std	Z+1, r25	; 0x01
     66c:	a2 83       	std	Z+2, r26	; 0x02
     66e:	b3 83       	std	Z+3, r27	; 0x03
	else
	(*x)=(*x)/calibration_counter;
     670:	0a c0       	rjmp	.+20     	; 0x686 <mpu6050_calibrate_accel+0xc4>
     672:	20 ed       	ldi	r18, 0xD0	; 208
     674:	37 e0       	ldi	r19, 0x07	; 7
     676:	40 e0       	ldi	r20, 0x00	; 0
     678:	50 e0       	ldi	r21, 0x00	; 0
     67a:	f0 d1       	rcall	.+992    	; 0xa5c <__divmodsi4>
     67c:	f6 01       	movw	r30, r12
     67e:	20 83       	st	Z, r18
     680:	31 83       	std	Z+1, r19	; 0x01
     682:	42 83       	std	Z+2, r20	; 0x02
     684:	53 83       	std	Z+3, r21	; 0x03
	
	if(*y<0)
     686:	f7 01       	movw	r30, r14
     688:	60 81       	ld	r22, Z
     68a:	71 81       	ldd	r23, Z+1	; 0x01
     68c:	82 81       	ldd	r24, Z+2	; 0x02
     68e:	93 81       	ldd	r25, Z+3	; 0x03
     690:	99 23       	and	r25, r25
     692:	ac f4       	brge	.+42     	; 0x6be <mpu6050_calibrate_accel+0xfc>
	(*y)=abs(*y)/calibration_counter;
     694:	9b 01       	movw	r18, r22
     696:	77 23       	and	r23, r23
     698:	24 f4       	brge	.+8      	; 0x6a2 <mpu6050_calibrate_accel+0xe0>
     69a:	22 27       	eor	r18, r18
     69c:	33 27       	eor	r19, r19
     69e:	26 1b       	sub	r18, r22
     6a0:	37 0b       	sbc	r19, r23
     6a2:	c9 01       	movw	r24, r18
     6a4:	60 ed       	ldi	r22, 0xD0	; 208
     6a6:	77 e0       	ldi	r23, 0x07	; 7
     6a8:	c6 d1       	rcall	.+908    	; 0xa36 <__divmodhi4>
     6aa:	cb 01       	movw	r24, r22
     6ac:	77 0f       	add	r23, r23
     6ae:	aa 0b       	sbc	r26, r26
     6b0:	bb 0b       	sbc	r27, r27
     6b2:	f7 01       	movw	r30, r14
     6b4:	80 83       	st	Z, r24
     6b6:	91 83       	std	Z+1, r25	; 0x01
     6b8:	a2 83       	std	Z+2, r26	; 0x02
     6ba:	b3 83       	std	Z+3, r27	; 0x03
	else
	(*y)=(*y)/calibration_counter;
     6bc:	0a c0       	rjmp	.+20     	; 0x6d2 <mpu6050_calibrate_accel+0x110>
     6be:	20 ed       	ldi	r18, 0xD0	; 208
     6c0:	37 e0       	ldi	r19, 0x07	; 7
     6c2:	40 e0       	ldi	r20, 0x00	; 0
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	ca d1       	rcall	.+916    	; 0xa5c <__divmodsi4>
     6c8:	f7 01       	movw	r30, r14
     6ca:	20 83       	st	Z, r18
     6cc:	31 83       	std	Z+1, r19	; 0x01
     6ce:	42 83       	std	Z+2, r20	; 0x02
     6d0:	53 83       	std	Z+3, r21	; 0x03
	
	if(*z<0)
     6d2:	f8 01       	movw	r30, r16
     6d4:	60 81       	ld	r22, Z
     6d6:	71 81       	ldd	r23, Z+1	; 0x01
     6d8:	82 81       	ldd	r24, Z+2	; 0x02
     6da:	93 81       	ldd	r25, Z+3	; 0x03
     6dc:	99 23       	and	r25, r25
     6de:	ac f4       	brge	.+42     	; 0x70a <mpu6050_calibrate_accel+0x148>
	(*z)=abs(*z)/calibration_counter;
     6e0:	9b 01       	movw	r18, r22
     6e2:	77 23       	and	r23, r23
     6e4:	24 f4       	brge	.+8      	; 0x6ee <mpu6050_calibrate_accel+0x12c>
     6e6:	22 27       	eor	r18, r18
     6e8:	33 27       	eor	r19, r19
     6ea:	26 1b       	sub	r18, r22
     6ec:	37 0b       	sbc	r19, r23
     6ee:	c9 01       	movw	r24, r18
     6f0:	60 ed       	ldi	r22, 0xD0	; 208
     6f2:	77 e0       	ldi	r23, 0x07	; 7
     6f4:	a0 d1       	rcall	.+832    	; 0xa36 <__divmodhi4>
     6f6:	cb 01       	movw	r24, r22
     6f8:	77 0f       	add	r23, r23
     6fa:	aa 0b       	sbc	r26, r26
     6fc:	bb 0b       	sbc	r27, r27
     6fe:	f8 01       	movw	r30, r16
     700:	80 83       	st	Z, r24
     702:	91 83       	std	Z+1, r25	; 0x01
     704:	a2 83       	std	Z+2, r26	; 0x02
     706:	b3 83       	std	Z+3, r27	; 0x03
	else
	(*z)=(*z)/calibration_counter;
     708:	0a c0       	rjmp	.+20     	; 0x71e <mpu6050_calibrate_accel+0x15c>
     70a:	20 ed       	ldi	r18, 0xD0	; 208
     70c:	37 e0       	ldi	r19, 0x07	; 7
     70e:	40 e0       	ldi	r20, 0x00	; 0
     710:	50 e0       	ldi	r21, 0x00	; 0
     712:	a4 d1       	rcall	.+840    	; 0xa5c <__divmodsi4>
     714:	f8 01       	movw	r30, r16
     716:	20 83       	st	Z, r18
     718:	31 83       	std	Z+1, r19	; 0x01
     71a:	42 83       	std	Z+2, r20	; 0x02
     71c:	53 83       	std	Z+3, r21	; 0x03
	printf("  ");
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/
}
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	ff 90       	pop	r15
     728:	ef 90       	pop	r14
     72a:	df 90       	pop	r13
     72c:	cf 90       	pop	r12
     72e:	08 95       	ret

00000730 <mpu6050_writeByte>:
	uint8_t byteToReturn=i2c_readNak();
	i2c_stop();
	return byteToReturn;
}
void mpu6050_writeByte(uint8_t wereToWrite,uint8_t byteToWrite)//writebyte
{
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	d8 2f       	mov	r29, r24
     736:	c6 2f       	mov	r28, r22
	i2c_start(MPU6050_WRITE);
     738:	80 ed       	ldi	r24, 0xD0	; 208
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	c6 d0       	rcall	.+396    	; 0x8ca <i2c_start>
	i2c_write(wereToWrite);
     73e:	8d 2f       	mov	r24, r29
     740:	90 e0       	ldi	r25, 0x00	; 0
	i2c_write(byteToWrite);
     742:	19 d1       	rcall	.+562    	; 0x976 <i2c_write>
     744:	8c 2f       	mov	r24, r28
	i2c_stop();
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	16 d1       	rcall	.+556    	; 0x976 <i2c_write>
}
     74a:	05 d1       	rcall	.+522    	; 0x956 <i2c_stop>
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	08 95       	ret

00000752 <mpu6050_readBytes>:
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
     752:	af 92       	push	r10
     754:	bf 92       	push	r11
     756:	cf 92       	push	r12
     758:	df 92       	push	r13
     75a:	ff 92       	push	r15
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
     764:	66 23       	and	r22, r22
     766:	a1 f1       	breq	.+104    	; 0x7d0 <mpu6050_readBytes+0x7e>
     768:	c5 2f       	mov	r28, r21
     76a:	d4 2f       	mov	r29, r20
     76c:	f6 2e       	mov	r15, r22
     76e:	18 2f       	mov	r17, r24
		//request register
		i2c_start(MPU6050_WRITE);
     770:	80 ed       	ldi	r24, 0xD0	; 208
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	aa d0       	rcall	.+340    	; 0x8ca <i2c_start>
		i2c_write(regAddr);
     776:	81 2f       	mov	r24, r17
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	fd d0       	rcall	.+506    	; 0x976 <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     77c:	85 e3       	ldi	r24, 0x35	; 53
     77e:	8a 95       	dec	r24
     780:	f1 f7       	brne	.-4      	; 0x77e <mpu6050_readBytes+0x2c>
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
     782:	00 00       	nop
     784:	81 ed       	ldi	r24, 0xD1	; 209
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	a0 d0       	rcall	.+320    	; 0x8ca <i2c_start>
     78a:	0d 2f       	mov	r16, r29
     78c:	1c 2f       	mov	r17, r28
     78e:	cc 24       	eor	r12, r12
     790:	ca 94       	dec	r12
     792:	cf 0c       	add	r12, r15
     794:	d1 2c       	mov	r13, r1
     796:	ef ef       	ldi	r30, 0xFF	; 255
     798:	ce 1a       	sub	r12, r30
     79a:	de 0a       	sbc	r13, r30
     79c:	c0 e0       	ldi	r28, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
     79e:	d0 e0       	ldi	r29, 0x00	; 0
     7a0:	af 2c       	mov	r10, r15
     7a2:	b1 2c       	mov	r11, r1
     7a4:	f1 e0       	ldi	r31, 0x01	; 1
     7a6:	af 1a       	sub	r10, r31
     7a8:	b1 08       	sbc	r11, r1
     7aa:	ac 16       	cp	r10, r28
			data[i] = i2c_readNak();
     7ac:	bd 06       	cpc	r11, r29
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <mpu6050_readBytes+0x66>
     7b0:	1d d1       	rcall	.+570    	; 0x9ec <i2c_readNak>
     7b2:	f8 01       	movw	r30, r16
			else
			data[i] = i2c_readAck();
     7b4:	80 83       	st	Z, r24
     7b6:	03 c0       	rjmp	.+6      	; 0x7be <mpu6050_readBytes+0x6c>
     7b8:	ff d0       	rcall	.+510    	; 0x9b8 <i2c_readAck>
     7ba:	f8 01       	movw	r30, r16
     7bc:	80 83       	st	Z, r24
     7be:	21 96       	adiw	r28, 0x01	; 1
		i2c_start(MPU6050_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
		for(i=0; i<length; i++) {
     7c0:	0f 5f       	subi	r16, 0xFF	; 255
     7c2:	1f 4f       	sbci	r17, 0xFF	; 255
     7c4:	cc 15       	cp	r28, r12
     7c6:	dd 05       	cpc	r29, r13
			if(i==length-1)
			data[i] = i2c_readNak();
			else
			data[i] = i2c_readAck();
		}
		i2c_stop();
     7c8:	81 f7       	brne	.-32     	; 0x7aa <mpu6050_readBytes+0x58>
     7ca:	cf 2d       	mov	r28, r15
     7cc:	c4 d0       	rcall	.+392    	; 0x956 <i2c_stop>
	i2c_write(byteToWrite);
	i2c_stop();
}
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
	uint8_t i = 0;
	int8_t count = 0;
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <mpu6050_readBytes+0x80>
			data[i] = i2c_readAck();
		}
		i2c_stop();
	}
	return count;
}
     7d0:	c0 e0       	ldi	r28, 0x00	; 0
     7d2:	8c 2f       	mov	r24, r28
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	df 90       	pop	r13
     7e0:	cf 90       	pop	r12
     7e2:	bf 90       	pop	r11
     7e4:	af 90       	pop	r10
     7e6:	08 95       	ret

000007e8 <mpu6050_getRawData>:
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     7e8:	6f 92       	push	r6
     7ea:	7f 92       	push	r7
     7ec:	8f 92       	push	r8
     7ee:	9f 92       	push	r9
     7f0:	af 92       	push	r10
     7f2:	bf 92       	push	r11
     7f4:	cf 92       	push	r12
     7f6:	df 92       	push	r13
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	2e 97       	sbiw	r28, 0x0e	; 14
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	de bf       	out	0x3e, r29	; 62
     810:	0f be       	out	0x3f, r0	; 63
     812:	cd bf       	out	0x3d, r28	; 61
     814:	4c 01       	movw	r8, r24
     816:	5b 01       	movw	r10, r22
     818:	6a 01       	movw	r12, r20
     81a:	39 01       	movw	r6, r18
	uint8_t buffer[14];
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14,  buffer);
     81c:	ae 01       	movw	r20, r28
     81e:	4f 5f       	subi	r20, 0xFF	; 255
     820:	5f 4f       	sbci	r21, 0xFF	; 255
     822:	6e e0       	ldi	r22, 0x0E	; 14
     824:	8b e3       	ldi	r24, 0x3B	; 59
     826:	95 df       	rcall	.-214    	; 0x752 <mpu6050_readBytes>
	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     828:	89 81       	ldd	r24, Y+1	; 0x01
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	98 2f       	mov	r25, r24
     82e:	88 27       	eor	r24, r24
     830:	2a 81       	ldd	r18, Y+2	; 0x02
     832:	82 2b       	or	r24, r18
     834:	f4 01       	movw	r30, r8
     836:	91 83       	std	Z+1, r25	; 0x01
     838:	80 83       	st	Z, r24
	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     83a:	8b 81       	ldd	r24, Y+3	; 0x03
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	98 2f       	mov	r25, r24
     840:	88 27       	eor	r24, r24
     842:	2c 81       	ldd	r18, Y+4	; 0x04
     844:	82 2b       	or	r24, r18
     846:	f5 01       	movw	r30, r10
     848:	91 83       	std	Z+1, r25	; 0x01
     84a:	80 83       	st	Z, r24
	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
     84c:	8d 81       	ldd	r24, Y+5	; 0x05
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	98 2f       	mov	r25, r24
     852:	88 27       	eor	r24, r24
     854:	2e 81       	ldd	r18, Y+6	; 0x06
     856:	82 2b       	or	r24, r18
     858:	f6 01       	movw	r30, r12
     85a:	91 83       	std	Z+1, r25	; 0x01
     85c:	80 83       	st	Z, r24
	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     85e:	89 85       	ldd	r24, Y+9	; 0x09
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	98 2f       	mov	r25, r24
     864:	88 27       	eor	r24, r24
     866:	2a 85       	ldd	r18, Y+10	; 0x0a
     868:	82 2b       	or	r24, r18
     86a:	f3 01       	movw	r30, r6
     86c:	91 83       	std	Z+1, r25	; 0x01
     86e:	80 83       	st	Z, r24
	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     870:	8b 85       	ldd	r24, Y+11	; 0x0b
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	98 2f       	mov	r25, r24
     876:	88 27       	eor	r24, r24
     878:	2c 85       	ldd	r18, Y+12	; 0x0c
     87a:	82 2b       	or	r24, r18
     87c:	f8 01       	movw	r30, r16
     87e:	91 83       	std	Z+1, r25	; 0x01
     880:	80 83       	st	Z, r24
	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     882:	8d 85       	ldd	r24, Y+13	; 0x0d
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	98 2f       	mov	r25, r24
     888:	88 27       	eor	r24, r24
     88a:	2e 85       	ldd	r18, Y+14	; 0x0e
     88c:	82 2b       	or	r24, r18
     88e:	f7 01       	movw	r30, r14
     890:	91 83       	std	Z+1, r25	; 0x01
     892:	80 83       	st	Z, r24
}
     894:	2e 96       	adiw	r28, 0x0e	; 14
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	de bf       	out	0x3e, r29	; 62
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	cd bf       	out	0x3d, r28	; 61
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	df 90       	pop	r13
     8ae:	cf 90       	pop	r12
     8b0:	bf 90       	pop	r11
     8b2:	af 90       	pop	r10
     8b4:	9f 90       	pop	r9
     8b6:	8f 90       	pop	r8
     8b8:	7f 90       	pop	r7
     8ba:	6f 90       	pop	r6
     8bc:	08 95       	ret

000008be <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     8be:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     8c2:	8c e0       	ldi	r24, 0x0C	; 12
     8c4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     8c8:	08 95       	ret

000008ca <i2c_start>:
     8ca:	94 ea       	ldi	r25, 0xA4	; 164
     8cc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     8d0:	4f ef       	ldi	r20, 0xFF	; 255
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	ec eb       	ldi	r30, 0xBC	; 188
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	90 81       	ld	r25, Z
     8de:	99 23       	and	r25, r25
     8e0:	34 f0       	brlt	.+12     	; 0x8ee <i2c_start+0x24>
     8e2:	41 50       	subi	r20, 0x01	; 1
     8e4:	51 09       	sbc	r21, r1
     8e6:	61 09       	sbc	r22, r1
     8e8:	71 09       	sbc	r23, r1
     8ea:	c0 f7       	brcc	.-16     	; 0x8dc <i2c_start+0x12>
     8ec:	04 c0       	rjmp	.+8      	; 0x8f6 <i2c_start+0x2c>
     8ee:	45 2b       	or	r20, r21
     8f0:	46 2b       	or	r20, r22
     8f2:	47 2b       	or	r20, r23
     8f4:	41 f1       	breq	.+80     	; 0x946 <i2c_start+0x7c>
     8f6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     8fa:	98 7f       	andi	r25, 0xF8	; 248
     8fc:	98 30       	cpi	r25, 0x08	; 8
     8fe:	11 f0       	breq	.+4      	; 0x904 <i2c_start+0x3a>
     900:	90 31       	cpi	r25, 0x10	; 16
     902:	19 f5       	brne	.+70     	; 0x94a <i2c_start+0x80>
     904:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     908:	84 e8       	ldi	r24, 0x84	; 132
     90a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     90e:	8f ef       	ldi	r24, 0xFF	; 255
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	a0 e0       	ldi	r26, 0x00	; 0
     914:	b0 e0       	ldi	r27, 0x00	; 0
     916:	ec eb       	ldi	r30, 0xBC	; 188
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	20 81       	ld	r18, Z
     91c:	22 23       	and	r18, r18
     91e:	2c f0       	brlt	.+10     	; 0x92a <i2c_start+0x60>
     920:	01 97       	sbiw	r24, 0x01	; 1
     922:	a1 09       	sbc	r26, r1
     924:	b1 09       	sbc	r27, r1
     926:	c8 f7       	brcc	.-14     	; 0x91a <i2c_start+0x50>
     928:	04 c0       	rjmp	.+8      	; 0x932 <i2c_start+0x68>
     92a:	89 2b       	or	r24, r25
     92c:	8a 2b       	or	r24, r26
     92e:	8b 2b       	or	r24, r27
     930:	71 f0       	breq	.+28     	; 0x94e <i2c_start+0x84>
     932:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     936:	98 7f       	andi	r25, 0xF8	; 248
     938:	98 31       	cpi	r25, 0x18	; 24
     93a:	59 f0       	breq	.+22     	; 0x952 <i2c_start+0x88>
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	90 34       	cpi	r25, 0x40	; 64
     940:	49 f4       	brne	.+18     	; 0x954 <i2c_start+0x8a>
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	08 95       	ret
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	08 95       	ret
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	08 95       	ret
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	08 95       	ret
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	08 95       	ret

00000956 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     956:	84 e9       	ldi	r24, 0x94	; 148
     958:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	ec eb       	ldi	r30, 0xBC	; 188
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	20 81       	ld	r18, Z
     966:	24 ff       	sbrs	r18, 4
     968:	05 c0       	rjmp	.+10     	; 0x974 <i2c_stop+0x1e>
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	81 15       	cp	r24, r1
     96e:	21 e0       	ldi	r18, 0x01	; 1
     970:	92 07       	cpc	r25, r18
     972:	c1 f7       	brne	.-16     	; 0x964 <i2c_stop+0xe>
     974:	08 95       	ret

00000976 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     976:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     97a:	84 e8       	ldi	r24, 0x84	; 132
     97c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     980:	8f ef       	ldi	r24, 0xFF	; 255
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	a0 e0       	ldi	r26, 0x00	; 0
     986:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     988:	ec eb       	ldi	r30, 0xBC	; 188
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	20 81       	ld	r18, Z
     98e:	22 23       	and	r18, r18
     990:	2c f0       	brlt	.+10     	; 0x99c <i2c_write+0x26>
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	a1 09       	sbc	r26, r1
     996:	b1 09       	sbc	r27, r1
     998:	c8 f7       	brcc	.-14     	; 0x98c <i2c_write+0x16>
     99a:	04 c0       	rjmp	.+8      	; 0x9a4 <i2c_write+0x2e>
	if(i2c_timer == 0)
     99c:	89 2b       	or	r24, r25
     99e:	8a 2b       	or	r24, r26
     9a0:	8b 2b       	or	r24, r27
     9a2:	41 f0       	breq	.+16     	; 0x9b4 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     9a4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     9a8:	98 7f       	andi	r25, 0xF8	; 248
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	98 32       	cpi	r25, 0x28	; 40
     9ae:	19 f4       	brne	.+6      	; 0x9b6 <i2c_write+0x40>
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	08 95       	ret
     9b4:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     9b6:	08 95       	ret

000009b8 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     9b8:	84 ec       	ldi	r24, 0xC4	; 196
     9ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
     9be:	8f ef       	ldi	r24, 0xFF	; 255
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	a0 e0       	ldi	r26, 0x00	; 0
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     9c6:	ec eb       	ldi	r30, 0xBC	; 188
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	20 81       	ld	r18, Z
     9cc:	22 23       	and	r18, r18
     9ce:	2c f0       	brlt	.+10     	; 0x9da <i2c_readAck+0x22>
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	a1 09       	sbc	r26, r1
     9d4:	b1 09       	sbc	r27, r1
     9d6:	c8 f7       	brcc	.-14     	; 0x9ca <i2c_readAck+0x12>
     9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     9da:	89 2b       	or	r24, r25
     9dc:	8a 2b       	or	r24, r26
     9de:	8b 2b       	or	r24, r27
     9e0:	19 f0       	breq	.+6      	; 0x9e8 <i2c_readAck+0x30>
		return 0;

    return TWDR;
     9e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     9e6:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     9e8:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     9ea:	08 95       	ret

000009ec <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     9ec:	84 e8       	ldi	r24, 0x84	; 132
     9ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
     9f2:	8f ef       	ldi	r24, 0xFF	; 255
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	a0 e0       	ldi	r26, 0x00	; 0
     9f8:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     9fa:	ec eb       	ldi	r30, 0xBC	; 188
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	20 81       	ld	r18, Z
     a00:	22 23       	and	r18, r18
     a02:	2c f0       	brlt	.+10     	; 0xa0e <i2c_readNak+0x22>
     a04:	01 97       	sbiw	r24, 0x01	; 1
     a06:	a1 09       	sbc	r26, r1
     a08:	b1 09       	sbc	r27, r1
     a0a:	c8 f7       	brcc	.-14     	; 0x9fe <i2c_readNak+0x12>
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     a0e:	89 2b       	or	r24, r25
     a10:	8a 2b       	or	r24, r26
     a12:	8b 2b       	or	r24, r27
     a14:	19 f0       	breq	.+6      	; 0xa1c <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     a16:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     a1a:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     a1c:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     a1e:	08 95       	ret

00000a20 <USART_Init>:
#include <avr/io.h>
#include <stdio.h>
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     a20:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;
     a24:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	UCSR0B = (1<<TXEN0);// | (1<<TXCIE0);
     a28:	88 e0       	ldi	r24, 0x08	; 8
     a2a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);//2 stop bit 8 bit
     a2e:	8e e0       	ldi	r24, 0x0E	; 14
     a30:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     a34:	08 95       	ret

00000a36 <__divmodhi4>:
     a36:	97 fb       	bst	r25, 7
     a38:	07 2e       	mov	r0, r23
     a3a:	16 f4       	brtc	.+4      	; 0xa40 <__divmodhi4+0xa>
     a3c:	00 94       	com	r0
     a3e:	06 d0       	rcall	.+12     	; 0xa4c <__divmodhi4_neg1>
     a40:	77 fd       	sbrc	r23, 7
     a42:	08 d0       	rcall	.+16     	; 0xa54 <__divmodhi4_neg2>
     a44:	27 d0       	rcall	.+78     	; 0xa94 <__udivmodhi4>
     a46:	07 fc       	sbrc	r0, 7
     a48:	05 d0       	rcall	.+10     	; 0xa54 <__divmodhi4_neg2>
     a4a:	3e f4       	brtc	.+14     	; 0xa5a <__divmodhi4_exit>

00000a4c <__divmodhi4_neg1>:
     a4c:	90 95       	com	r25
     a4e:	81 95       	neg	r24
     a50:	9f 4f       	sbci	r25, 0xFF	; 255
     a52:	08 95       	ret

00000a54 <__divmodhi4_neg2>:
     a54:	70 95       	com	r23
     a56:	61 95       	neg	r22
     a58:	7f 4f       	sbci	r23, 0xFF	; 255

00000a5a <__divmodhi4_exit>:
     a5a:	08 95       	ret

00000a5c <__divmodsi4>:
     a5c:	05 2e       	mov	r0, r21
     a5e:	97 fb       	bst	r25, 7
     a60:	16 f4       	brtc	.+4      	; 0xa66 <__divmodsi4+0xa>
     a62:	00 94       	com	r0
     a64:	0f d0       	rcall	.+30     	; 0xa84 <__negsi2>
     a66:	57 fd       	sbrc	r21, 7
     a68:	05 d0       	rcall	.+10     	; 0xa74 <__divmodsi4_neg2>
     a6a:	28 d0       	rcall	.+80     	; 0xabc <__udivmodsi4>
     a6c:	07 fc       	sbrc	r0, 7
     a6e:	02 d0       	rcall	.+4      	; 0xa74 <__divmodsi4_neg2>
     a70:	46 f4       	brtc	.+16     	; 0xa82 <__divmodsi4_exit>
     a72:	08 c0       	rjmp	.+16     	; 0xa84 <__negsi2>

00000a74 <__divmodsi4_neg2>:
     a74:	50 95       	com	r21
     a76:	40 95       	com	r20
     a78:	30 95       	com	r19
     a7a:	21 95       	neg	r18
     a7c:	3f 4f       	sbci	r19, 0xFF	; 255
     a7e:	4f 4f       	sbci	r20, 0xFF	; 255
     a80:	5f 4f       	sbci	r21, 0xFF	; 255

00000a82 <__divmodsi4_exit>:
     a82:	08 95       	ret

00000a84 <__negsi2>:
     a84:	90 95       	com	r25
     a86:	80 95       	com	r24
     a88:	70 95       	com	r23
     a8a:	61 95       	neg	r22
     a8c:	7f 4f       	sbci	r23, 0xFF	; 255
     a8e:	8f 4f       	sbci	r24, 0xFF	; 255
     a90:	9f 4f       	sbci	r25, 0xFF	; 255
     a92:	08 95       	ret

00000a94 <__udivmodhi4>:
     a94:	aa 1b       	sub	r26, r26
     a96:	bb 1b       	sub	r27, r27
     a98:	51 e1       	ldi	r21, 0x11	; 17
     a9a:	07 c0       	rjmp	.+14     	; 0xaaa <__udivmodhi4_ep>

00000a9c <__udivmodhi4_loop>:
     a9c:	aa 1f       	adc	r26, r26
     a9e:	bb 1f       	adc	r27, r27
     aa0:	a6 17       	cp	r26, r22
     aa2:	b7 07       	cpc	r27, r23
     aa4:	10 f0       	brcs	.+4      	; 0xaaa <__udivmodhi4_ep>
     aa6:	a6 1b       	sub	r26, r22
     aa8:	b7 0b       	sbc	r27, r23

00000aaa <__udivmodhi4_ep>:
     aaa:	88 1f       	adc	r24, r24
     aac:	99 1f       	adc	r25, r25
     aae:	5a 95       	dec	r21
     ab0:	a9 f7       	brne	.-22     	; 0xa9c <__udivmodhi4_loop>
     ab2:	80 95       	com	r24
     ab4:	90 95       	com	r25
     ab6:	bc 01       	movw	r22, r24
     ab8:	cd 01       	movw	r24, r26
     aba:	08 95       	ret

00000abc <__udivmodsi4>:
     abc:	a1 e2       	ldi	r26, 0x21	; 33
     abe:	1a 2e       	mov	r1, r26
     ac0:	aa 1b       	sub	r26, r26
     ac2:	bb 1b       	sub	r27, r27
     ac4:	fd 01       	movw	r30, r26
     ac6:	0d c0       	rjmp	.+26     	; 0xae2 <__udivmodsi4_ep>

00000ac8 <__udivmodsi4_loop>:
     ac8:	aa 1f       	adc	r26, r26
     aca:	bb 1f       	adc	r27, r27
     acc:	ee 1f       	adc	r30, r30
     ace:	ff 1f       	adc	r31, r31
     ad0:	a2 17       	cp	r26, r18
     ad2:	b3 07       	cpc	r27, r19
     ad4:	e4 07       	cpc	r30, r20
     ad6:	f5 07       	cpc	r31, r21
     ad8:	20 f0       	brcs	.+8      	; 0xae2 <__udivmodsi4_ep>
     ada:	a2 1b       	sub	r26, r18
     adc:	b3 0b       	sbc	r27, r19
     ade:	e4 0b       	sbc	r30, r20
     ae0:	f5 0b       	sbc	r31, r21

00000ae2 <__udivmodsi4_ep>:
     ae2:	66 1f       	adc	r22, r22
     ae4:	77 1f       	adc	r23, r23
     ae6:	88 1f       	adc	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	1a 94       	dec	r1
     aec:	69 f7       	brne	.-38     	; 0xac8 <__udivmodsi4_loop>
     aee:	60 95       	com	r22
     af0:	70 95       	com	r23
     af2:	80 95       	com	r24
     af4:	90 95       	com	r25
     af6:	9b 01       	movw	r18, r22
     af8:	ac 01       	movw	r20, r24
     afa:	bd 01       	movw	r22, r26
     afc:	cf 01       	movw	r24, r30
     afe:	08 95       	ret

00000b00 <__itoa_ncheck>:
     b00:	bb 27       	eor	r27, r27
     b02:	4a 30       	cpi	r20, 0x0A	; 10
     b04:	31 f4       	brne	.+12     	; 0xb12 <__itoa_ncheck+0x12>
     b06:	99 23       	and	r25, r25
     b08:	22 f4       	brpl	.+8      	; 0xb12 <__itoa_ncheck+0x12>
     b0a:	bd e2       	ldi	r27, 0x2D	; 45
     b0c:	90 95       	com	r25
     b0e:	81 95       	neg	r24
     b10:	9f 4f       	sbci	r25, 0xFF	; 255
     b12:	01 c0       	rjmp	.+2      	; 0xb16 <__utoa_common>

00000b14 <__utoa_ncheck>:
     b14:	bb 27       	eor	r27, r27

00000b16 <__utoa_common>:
     b16:	fb 01       	movw	r30, r22
     b18:	55 27       	eor	r21, r21
     b1a:	aa 27       	eor	r26, r26
     b1c:	88 0f       	add	r24, r24
     b1e:	99 1f       	adc	r25, r25
     b20:	aa 1f       	adc	r26, r26
     b22:	a4 17       	cp	r26, r20
     b24:	10 f0       	brcs	.+4      	; 0xb2a <__utoa_common+0x14>
     b26:	a4 1b       	sub	r26, r20
     b28:	83 95       	inc	r24
     b2a:	50 51       	subi	r21, 0x10	; 16
     b2c:	b9 f7       	brne	.-18     	; 0xb1c <__utoa_common+0x6>
     b2e:	a0 5d       	subi	r26, 0xD0	; 208
     b30:	aa 33       	cpi	r26, 0x3A	; 58
     b32:	08 f0       	brcs	.+2      	; 0xb36 <__utoa_common+0x20>
     b34:	a9 5d       	subi	r26, 0xD9	; 217
     b36:	a1 93       	st	Z+, r26
     b38:	00 97       	sbiw	r24, 0x00	; 0
     b3a:	79 f7       	brne	.-34     	; 0xb1a <__utoa_common+0x4>
     b3c:	b1 11       	cpse	r27, r1
     b3e:	b1 93       	st	Z+, r27
     b40:	11 92       	st	Z+, r1
     b42:	cb 01       	movw	r24, r22
     b44:	e7 c3       	rjmp	.+1998   	; 0x1314 <strrev>

00000b46 <fdevopen>:
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	00 97       	sbiw	r24, 0x00	; 0
     b50:	31 f4       	brne	.+12     	; 0xb5e <fdevopen+0x18>
     b52:	61 15       	cp	r22, r1
     b54:	71 05       	cpc	r23, r1
     b56:	19 f4       	brne	.+6      	; 0xb5e <fdevopen+0x18>
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	39 c0       	rjmp	.+114    	; 0xbd0 <fdevopen+0x8a>
     b5e:	8b 01       	movw	r16, r22
     b60:	ec 01       	movw	r28, r24
     b62:	6e e0       	ldi	r22, 0x0E	; 14
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	7c d2       	rcall	.+1272   	; 0x1064 <calloc>
     b6c:	fc 01       	movw	r30, r24
     b6e:	89 2b       	or	r24, r25
     b70:	99 f3       	breq	.-26     	; 0xb58 <fdevopen+0x12>
     b72:	80 e8       	ldi	r24, 0x80	; 128
     b74:	83 83       	std	Z+3, r24	; 0x03
     b76:	01 15       	cp	r16, r1
     b78:	11 05       	cpc	r17, r1
     b7a:	71 f0       	breq	.+28     	; 0xb98 <fdevopen+0x52>
     b7c:	13 87       	std	Z+11, r17	; 0x0b
     b7e:	02 87       	std	Z+10, r16	; 0x0a
     b80:	81 e8       	ldi	r24, 0x81	; 129
     b82:	83 83       	std	Z+3, r24	; 0x03
     b84:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <__iob>
     b88:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <__iob+0x1>
     b8c:	89 2b       	or	r24, r25
     b8e:	21 f4       	brne	.+8      	; 0xb98 <fdevopen+0x52>
     b90:	f0 93 69 02 	sts	0x0269, r31	; 0x800269 <__iob+0x1>
     b94:	e0 93 68 02 	sts	0x0268, r30	; 0x800268 <__iob>
     b98:	20 97       	sbiw	r28, 0x00	; 0
     b9a:	c9 f0       	breq	.+50     	; 0xbce <fdevopen+0x88>
     b9c:	d1 87       	std	Z+9, r29	; 0x09
     b9e:	c0 87       	std	Z+8, r28	; 0x08
     ba0:	83 81       	ldd	r24, Z+3	; 0x03
     ba2:	82 60       	ori	r24, 0x02	; 2
     ba4:	83 83       	std	Z+3, r24	; 0x03
     ba6:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <__iob+0x2>
     baa:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <__iob+0x3>
     bae:	89 2b       	or	r24, r25
     bb0:	71 f4       	brne	.+28     	; 0xbce <fdevopen+0x88>
     bb2:	f0 93 6b 02 	sts	0x026B, r31	; 0x80026b <__iob+0x3>
     bb6:	e0 93 6a 02 	sts	0x026A, r30	; 0x80026a <__iob+0x2>
     bba:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__iob+0x4>
     bbe:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <__iob+0x5>
     bc2:	89 2b       	or	r24, r25
     bc4:	21 f4       	brne	.+8      	; 0xbce <fdevopen+0x88>
     bc6:	f0 93 6d 02 	sts	0x026D, r31	; 0x80026d <__iob+0x5>
     bca:	e0 93 6c 02 	sts	0x026C, r30	; 0x80026c <__iob+0x4>
     bce:	cf 01       	movw	r24, r30
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	08 95       	ret

00000bda <printf>:
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	ae 01       	movw	r20, r28
     be4:	4a 5f       	subi	r20, 0xFA	; 250
     be6:	5f 4f       	sbci	r21, 0xFF	; 255
     be8:	fa 01       	movw	r30, r20
     bea:	61 91       	ld	r22, Z+
     bec:	71 91       	ld	r23, Z+
     bee:	af 01       	movw	r20, r30
     bf0:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <__iob+0x2>
     bf4:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <__iob+0x3>
     bf8:	38 d0       	rcall	.+112    	; 0xc6a <vfprintf>
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	08 95       	ret

00000c00 <putchar>:
     c00:	60 91 6a 02 	lds	r22, 0x026A	; 0x80026a <__iob+0x2>
     c04:	70 91 6b 02 	lds	r23, 0x026B	; 0x80026b <__iob+0x3>
     c08:	95 c3       	rjmp	.+1834   	; 0x1334 <fputc>

00000c0a <puts>:
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <__iob+0x2>
     c16:	f0 91 6b 02 	lds	r31, 0x026B	; 0x80026b <__iob+0x3>
     c1a:	23 81       	ldd	r18, Z+3	; 0x03
     c1c:	21 ff       	sbrs	r18, 1
     c1e:	1b c0       	rjmp	.+54     	; 0xc56 <puts+0x4c>
     c20:	8c 01       	movw	r16, r24
     c22:	d0 e0       	ldi	r29, 0x00	; 0
     c24:	c0 e0       	ldi	r28, 0x00	; 0
     c26:	f8 01       	movw	r30, r16
     c28:	81 91       	ld	r24, Z+
     c2a:	8f 01       	movw	r16, r30
     c2c:	60 91 6a 02 	lds	r22, 0x026A	; 0x80026a <__iob+0x2>
     c30:	70 91 6b 02 	lds	r23, 0x026B	; 0x80026b <__iob+0x3>
     c34:	db 01       	movw	r26, r22
     c36:	18 96       	adiw	r26, 0x08	; 8
     c38:	ed 91       	ld	r30, X+
     c3a:	fc 91       	ld	r31, X
     c3c:	19 97       	sbiw	r26, 0x09	; 9
     c3e:	88 23       	and	r24, r24
     c40:	31 f0       	breq	.+12     	; 0xc4e <puts+0x44>
     c42:	19 95       	eicall
     c44:	89 2b       	or	r24, r25
     c46:	79 f3       	breq	.-34     	; 0xc26 <puts+0x1c>
     c48:	df ef       	ldi	r29, 0xFF	; 255
     c4a:	cf ef       	ldi	r28, 0xFF	; 255
     c4c:	ec cf       	rjmp	.-40     	; 0xc26 <puts+0x1c>
     c4e:	8a e0       	ldi	r24, 0x0A	; 10
     c50:	19 95       	eicall
     c52:	89 2b       	or	r24, r25
     c54:	19 f0       	breq	.+6      	; 0xc5c <puts+0x52>
     c56:	8f ef       	ldi	r24, 0xFF	; 255
     c58:	9f ef       	ldi	r25, 0xFF	; 255
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <puts+0x56>
     c5c:	8d 2f       	mov	r24, r29
     c5e:	9c 2f       	mov	r25, r28
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	08 95       	ret

00000c6a <vfprintf>:
     c6a:	2f 92       	push	r2
     c6c:	3f 92       	push	r3
     c6e:	4f 92       	push	r4
     c70:	5f 92       	push	r5
     c72:	6f 92       	push	r6
     c74:	7f 92       	push	r7
     c76:	8f 92       	push	r8
     c78:	9f 92       	push	r9
     c7a:	af 92       	push	r10
     c7c:	bf 92       	push	r11
     c7e:	cf 92       	push	r12
     c80:	df 92       	push	r13
     c82:	ef 92       	push	r14
     c84:	ff 92       	push	r15
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
     c92:	2b 97       	sbiw	r28, 0x0b	; 11
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
     c9e:	6c 01       	movw	r12, r24
     ca0:	7b 01       	movw	r14, r22
     ca2:	8a 01       	movw	r16, r20
     ca4:	fc 01       	movw	r30, r24
     ca6:	17 82       	std	Z+7, r1	; 0x07
     ca8:	16 82       	std	Z+6, r1	; 0x06
     caa:	83 81       	ldd	r24, Z+3	; 0x03
     cac:	81 ff       	sbrs	r24, 1
     cae:	bf c1       	rjmp	.+894    	; 0x102e <vfprintf+0x3c4>
     cb0:	ce 01       	movw	r24, r28
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	3c 01       	movw	r6, r24
     cb6:	f6 01       	movw	r30, r12
     cb8:	93 81       	ldd	r25, Z+3	; 0x03
     cba:	f7 01       	movw	r30, r14
     cbc:	93 fd       	sbrc	r25, 3
     cbe:	85 91       	lpm	r24, Z+
     cc0:	93 ff       	sbrs	r25, 3
     cc2:	81 91       	ld	r24, Z+
     cc4:	7f 01       	movw	r14, r30
     cc6:	88 23       	and	r24, r24
     cc8:	09 f4       	brne	.+2      	; 0xccc <vfprintf+0x62>
     cca:	ad c1       	rjmp	.+858    	; 0x1026 <vfprintf+0x3bc>
     ccc:	85 32       	cpi	r24, 0x25	; 37
     cce:	39 f4       	brne	.+14     	; 0xcde <vfprintf+0x74>
     cd0:	93 fd       	sbrc	r25, 3
     cd2:	85 91       	lpm	r24, Z+
     cd4:	93 ff       	sbrs	r25, 3
     cd6:	81 91       	ld	r24, Z+
     cd8:	7f 01       	movw	r14, r30
     cda:	85 32       	cpi	r24, 0x25	; 37
     cdc:	21 f4       	brne	.+8      	; 0xce6 <vfprintf+0x7c>
     cde:	b6 01       	movw	r22, r12
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	28 d3       	rcall	.+1616   	; 0x1334 <fputc>
     ce4:	e8 cf       	rjmp	.-48     	; 0xcb6 <vfprintf+0x4c>
     ce6:	91 2c       	mov	r9, r1
     ce8:	21 2c       	mov	r2, r1
     cea:	31 2c       	mov	r3, r1
     cec:	ff e1       	ldi	r31, 0x1F	; 31
     cee:	f3 15       	cp	r31, r3
     cf0:	d8 f0       	brcs	.+54     	; 0xd28 <vfprintf+0xbe>
     cf2:	8b 32       	cpi	r24, 0x2B	; 43
     cf4:	79 f0       	breq	.+30     	; 0xd14 <vfprintf+0xaa>
     cf6:	38 f4       	brcc	.+14     	; 0xd06 <vfprintf+0x9c>
     cf8:	80 32       	cpi	r24, 0x20	; 32
     cfa:	79 f0       	breq	.+30     	; 0xd1a <vfprintf+0xb0>
     cfc:	83 32       	cpi	r24, 0x23	; 35
     cfe:	a1 f4       	brne	.+40     	; 0xd28 <vfprintf+0xbe>
     d00:	23 2d       	mov	r18, r3
     d02:	20 61       	ori	r18, 0x10	; 16
     d04:	1d c0       	rjmp	.+58     	; 0xd40 <vfprintf+0xd6>
     d06:	8d 32       	cpi	r24, 0x2D	; 45
     d08:	61 f0       	breq	.+24     	; 0xd22 <vfprintf+0xb8>
     d0a:	80 33       	cpi	r24, 0x30	; 48
     d0c:	69 f4       	brne	.+26     	; 0xd28 <vfprintf+0xbe>
     d0e:	23 2d       	mov	r18, r3
     d10:	21 60       	ori	r18, 0x01	; 1
     d12:	16 c0       	rjmp	.+44     	; 0xd40 <vfprintf+0xd6>
     d14:	83 2d       	mov	r24, r3
     d16:	82 60       	ori	r24, 0x02	; 2
     d18:	38 2e       	mov	r3, r24
     d1a:	e3 2d       	mov	r30, r3
     d1c:	e4 60       	ori	r30, 0x04	; 4
     d1e:	3e 2e       	mov	r3, r30
     d20:	2a c0       	rjmp	.+84     	; 0xd76 <vfprintf+0x10c>
     d22:	f3 2d       	mov	r31, r3
     d24:	f8 60       	ori	r31, 0x08	; 8
     d26:	1d c0       	rjmp	.+58     	; 0xd62 <vfprintf+0xf8>
     d28:	37 fc       	sbrc	r3, 7
     d2a:	2d c0       	rjmp	.+90     	; 0xd86 <vfprintf+0x11c>
     d2c:	20 ed       	ldi	r18, 0xD0	; 208
     d2e:	28 0f       	add	r18, r24
     d30:	2a 30       	cpi	r18, 0x0A	; 10
     d32:	40 f0       	brcs	.+16     	; 0xd44 <vfprintf+0xda>
     d34:	8e 32       	cpi	r24, 0x2E	; 46
     d36:	b9 f4       	brne	.+46     	; 0xd66 <vfprintf+0xfc>
     d38:	36 fc       	sbrc	r3, 6
     d3a:	75 c1       	rjmp	.+746    	; 0x1026 <vfprintf+0x3bc>
     d3c:	23 2d       	mov	r18, r3
     d3e:	20 64       	ori	r18, 0x40	; 64
     d40:	32 2e       	mov	r3, r18
     d42:	19 c0       	rjmp	.+50     	; 0xd76 <vfprintf+0x10c>
     d44:	36 fe       	sbrs	r3, 6
     d46:	06 c0       	rjmp	.+12     	; 0xd54 <vfprintf+0xea>
     d48:	8a e0       	ldi	r24, 0x0A	; 10
     d4a:	98 9e       	mul	r9, r24
     d4c:	20 0d       	add	r18, r0
     d4e:	11 24       	eor	r1, r1
     d50:	92 2e       	mov	r9, r18
     d52:	11 c0       	rjmp	.+34     	; 0xd76 <vfprintf+0x10c>
     d54:	ea e0       	ldi	r30, 0x0A	; 10
     d56:	2e 9e       	mul	r2, r30
     d58:	20 0d       	add	r18, r0
     d5a:	11 24       	eor	r1, r1
     d5c:	22 2e       	mov	r2, r18
     d5e:	f3 2d       	mov	r31, r3
     d60:	f0 62       	ori	r31, 0x20	; 32
     d62:	3f 2e       	mov	r3, r31
     d64:	08 c0       	rjmp	.+16     	; 0xd76 <vfprintf+0x10c>
     d66:	8c 36       	cpi	r24, 0x6C	; 108
     d68:	21 f4       	brne	.+8      	; 0xd72 <vfprintf+0x108>
     d6a:	83 2d       	mov	r24, r3
     d6c:	80 68       	ori	r24, 0x80	; 128
     d6e:	38 2e       	mov	r3, r24
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <vfprintf+0x10c>
     d72:	88 36       	cpi	r24, 0x68	; 104
     d74:	41 f4       	brne	.+16     	; 0xd86 <vfprintf+0x11c>
     d76:	f7 01       	movw	r30, r14
     d78:	93 fd       	sbrc	r25, 3
     d7a:	85 91       	lpm	r24, Z+
     d7c:	93 ff       	sbrs	r25, 3
     d7e:	81 91       	ld	r24, Z+
     d80:	7f 01       	movw	r14, r30
     d82:	81 11       	cpse	r24, r1
     d84:	b3 cf       	rjmp	.-154    	; 0xcec <vfprintf+0x82>
     d86:	98 2f       	mov	r25, r24
     d88:	9f 7d       	andi	r25, 0xDF	; 223
     d8a:	95 54       	subi	r25, 0x45	; 69
     d8c:	93 30       	cpi	r25, 0x03	; 3
     d8e:	28 f4       	brcc	.+10     	; 0xd9a <vfprintf+0x130>
     d90:	0c 5f       	subi	r16, 0xFC	; 252
     d92:	1f 4f       	sbci	r17, 0xFF	; 255
     d94:	9f e3       	ldi	r25, 0x3F	; 63
     d96:	99 83       	std	Y+1, r25	; 0x01
     d98:	0d c0       	rjmp	.+26     	; 0xdb4 <vfprintf+0x14a>
     d9a:	83 36       	cpi	r24, 0x63	; 99
     d9c:	31 f0       	breq	.+12     	; 0xdaa <vfprintf+0x140>
     d9e:	83 37       	cpi	r24, 0x73	; 115
     da0:	71 f0       	breq	.+28     	; 0xdbe <vfprintf+0x154>
     da2:	83 35       	cpi	r24, 0x53	; 83
     da4:	09 f0       	breq	.+2      	; 0xda8 <vfprintf+0x13e>
     da6:	55 c0       	rjmp	.+170    	; 0xe52 <vfprintf+0x1e8>
     da8:	20 c0       	rjmp	.+64     	; 0xdea <vfprintf+0x180>
     daa:	f8 01       	movw	r30, r16
     dac:	80 81       	ld	r24, Z
     dae:	89 83       	std	Y+1, r24	; 0x01
     db0:	0e 5f       	subi	r16, 0xFE	; 254
     db2:	1f 4f       	sbci	r17, 0xFF	; 255
     db4:	88 24       	eor	r8, r8
     db6:	83 94       	inc	r8
     db8:	91 2c       	mov	r9, r1
     dba:	53 01       	movw	r10, r6
     dbc:	12 c0       	rjmp	.+36     	; 0xde2 <vfprintf+0x178>
     dbe:	28 01       	movw	r4, r16
     dc0:	f2 e0       	ldi	r31, 0x02	; 2
     dc2:	4f 0e       	add	r4, r31
     dc4:	51 1c       	adc	r5, r1
     dc6:	f8 01       	movw	r30, r16
     dc8:	a0 80       	ld	r10, Z
     dca:	b1 80       	ldd	r11, Z+1	; 0x01
     dcc:	36 fe       	sbrs	r3, 6
     dce:	03 c0       	rjmp	.+6      	; 0xdd6 <vfprintf+0x16c>
     dd0:	69 2d       	mov	r22, r9
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <vfprintf+0x170>
     dd6:	6f ef       	ldi	r22, 0xFF	; 255
     dd8:	7f ef       	ldi	r23, 0xFF	; 255
     dda:	c5 01       	movw	r24, r10
     ddc:	90 d2       	rcall	.+1312   	; 0x12fe <strnlen>
     dde:	4c 01       	movw	r8, r24
     de0:	82 01       	movw	r16, r4
     de2:	f3 2d       	mov	r31, r3
     de4:	ff 77       	andi	r31, 0x7F	; 127
     de6:	3f 2e       	mov	r3, r31
     de8:	15 c0       	rjmp	.+42     	; 0xe14 <vfprintf+0x1aa>
     dea:	28 01       	movw	r4, r16
     dec:	22 e0       	ldi	r18, 0x02	; 2
     dee:	42 0e       	add	r4, r18
     df0:	51 1c       	adc	r5, r1
     df2:	f8 01       	movw	r30, r16
     df4:	a0 80       	ld	r10, Z
     df6:	b1 80       	ldd	r11, Z+1	; 0x01
     df8:	36 fe       	sbrs	r3, 6
     dfa:	03 c0       	rjmp	.+6      	; 0xe02 <vfprintf+0x198>
     dfc:	69 2d       	mov	r22, r9
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <vfprintf+0x19c>
     e02:	6f ef       	ldi	r22, 0xFF	; 255
     e04:	7f ef       	ldi	r23, 0xFF	; 255
     e06:	c5 01       	movw	r24, r10
     e08:	68 d2       	rcall	.+1232   	; 0x12da <strnlen_P>
     e0a:	4c 01       	movw	r8, r24
     e0c:	f3 2d       	mov	r31, r3
     e0e:	f0 68       	ori	r31, 0x80	; 128
     e10:	3f 2e       	mov	r3, r31
     e12:	82 01       	movw	r16, r4
     e14:	33 fc       	sbrc	r3, 3
     e16:	19 c0       	rjmp	.+50     	; 0xe4a <vfprintf+0x1e0>
     e18:	82 2d       	mov	r24, r2
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	88 16       	cp	r8, r24
     e1e:	99 06       	cpc	r9, r25
     e20:	a0 f4       	brcc	.+40     	; 0xe4a <vfprintf+0x1e0>
     e22:	b6 01       	movw	r22, r12
     e24:	80 e2       	ldi	r24, 0x20	; 32
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	85 d2       	rcall	.+1290   	; 0x1334 <fputc>
     e2a:	2a 94       	dec	r2
     e2c:	f5 cf       	rjmp	.-22     	; 0xe18 <vfprintf+0x1ae>
     e2e:	f5 01       	movw	r30, r10
     e30:	37 fc       	sbrc	r3, 7
     e32:	85 91       	lpm	r24, Z+
     e34:	37 fe       	sbrs	r3, 7
     e36:	81 91       	ld	r24, Z+
     e38:	5f 01       	movw	r10, r30
     e3a:	b6 01       	movw	r22, r12
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	7a d2       	rcall	.+1268   	; 0x1334 <fputc>
     e40:	21 10       	cpse	r2, r1
     e42:	2a 94       	dec	r2
     e44:	21 e0       	ldi	r18, 0x01	; 1
     e46:	82 1a       	sub	r8, r18
     e48:	91 08       	sbc	r9, r1
     e4a:	81 14       	cp	r8, r1
     e4c:	91 04       	cpc	r9, r1
     e4e:	79 f7       	brne	.-34     	; 0xe2e <vfprintf+0x1c4>
     e50:	e1 c0       	rjmp	.+450    	; 0x1014 <vfprintf+0x3aa>
     e52:	84 36       	cpi	r24, 0x64	; 100
     e54:	11 f0       	breq	.+4      	; 0xe5a <vfprintf+0x1f0>
     e56:	89 36       	cpi	r24, 0x69	; 105
     e58:	39 f5       	brne	.+78     	; 0xea8 <vfprintf+0x23e>
     e5a:	f8 01       	movw	r30, r16
     e5c:	37 fe       	sbrs	r3, 7
     e5e:	07 c0       	rjmp	.+14     	; 0xe6e <vfprintf+0x204>
     e60:	60 81       	ld	r22, Z
     e62:	71 81       	ldd	r23, Z+1	; 0x01
     e64:	82 81       	ldd	r24, Z+2	; 0x02
     e66:	93 81       	ldd	r25, Z+3	; 0x03
     e68:	0c 5f       	subi	r16, 0xFC	; 252
     e6a:	1f 4f       	sbci	r17, 0xFF	; 255
     e6c:	08 c0       	rjmp	.+16     	; 0xe7e <vfprintf+0x214>
     e6e:	60 81       	ld	r22, Z
     e70:	71 81       	ldd	r23, Z+1	; 0x01
     e72:	07 2e       	mov	r0, r23
     e74:	00 0c       	add	r0, r0
     e76:	88 0b       	sbc	r24, r24
     e78:	99 0b       	sbc	r25, r25
     e7a:	0e 5f       	subi	r16, 0xFE	; 254
     e7c:	1f 4f       	sbci	r17, 0xFF	; 255
     e7e:	f3 2d       	mov	r31, r3
     e80:	ff 76       	andi	r31, 0x6F	; 111
     e82:	3f 2e       	mov	r3, r31
     e84:	97 ff       	sbrs	r25, 7
     e86:	09 c0       	rjmp	.+18     	; 0xe9a <vfprintf+0x230>
     e88:	90 95       	com	r25
     e8a:	80 95       	com	r24
     e8c:	70 95       	com	r23
     e8e:	61 95       	neg	r22
     e90:	7f 4f       	sbci	r23, 0xFF	; 255
     e92:	8f 4f       	sbci	r24, 0xFF	; 255
     e94:	9f 4f       	sbci	r25, 0xFF	; 255
     e96:	f0 68       	ori	r31, 0x80	; 128
     e98:	3f 2e       	mov	r3, r31
     e9a:	2a e0       	ldi	r18, 0x0A	; 10
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	a3 01       	movw	r20, r6
     ea0:	85 d2       	rcall	.+1290   	; 0x13ac <__ultoa_invert>
     ea2:	88 2e       	mov	r8, r24
     ea4:	86 18       	sub	r8, r6
     ea6:	44 c0       	rjmp	.+136    	; 0xf30 <vfprintf+0x2c6>
     ea8:	85 37       	cpi	r24, 0x75	; 117
     eaa:	31 f4       	brne	.+12     	; 0xeb8 <vfprintf+0x24e>
     eac:	23 2d       	mov	r18, r3
     eae:	2f 7e       	andi	r18, 0xEF	; 239
     eb0:	b2 2e       	mov	r11, r18
     eb2:	2a e0       	ldi	r18, 0x0A	; 10
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	25 c0       	rjmp	.+74     	; 0xf02 <vfprintf+0x298>
     eb8:	93 2d       	mov	r25, r3
     eba:	99 7f       	andi	r25, 0xF9	; 249
     ebc:	b9 2e       	mov	r11, r25
     ebe:	8f 36       	cpi	r24, 0x6F	; 111
     ec0:	c1 f0       	breq	.+48     	; 0xef2 <vfprintf+0x288>
     ec2:	18 f4       	brcc	.+6      	; 0xeca <vfprintf+0x260>
     ec4:	88 35       	cpi	r24, 0x58	; 88
     ec6:	79 f0       	breq	.+30     	; 0xee6 <vfprintf+0x27c>
     ec8:	ae c0       	rjmp	.+348    	; 0x1026 <vfprintf+0x3bc>
     eca:	80 37       	cpi	r24, 0x70	; 112
     ecc:	19 f0       	breq	.+6      	; 0xed4 <vfprintf+0x26a>
     ece:	88 37       	cpi	r24, 0x78	; 120
     ed0:	21 f0       	breq	.+8      	; 0xeda <vfprintf+0x270>
     ed2:	a9 c0       	rjmp	.+338    	; 0x1026 <vfprintf+0x3bc>
     ed4:	e9 2f       	mov	r30, r25
     ed6:	e0 61       	ori	r30, 0x10	; 16
     ed8:	be 2e       	mov	r11, r30
     eda:	b4 fe       	sbrs	r11, 4
     edc:	0d c0       	rjmp	.+26     	; 0xef8 <vfprintf+0x28e>
     ede:	fb 2d       	mov	r31, r11
     ee0:	f4 60       	ori	r31, 0x04	; 4
     ee2:	bf 2e       	mov	r11, r31
     ee4:	09 c0       	rjmp	.+18     	; 0xef8 <vfprintf+0x28e>
     ee6:	34 fe       	sbrs	r3, 4
     ee8:	0a c0       	rjmp	.+20     	; 0xefe <vfprintf+0x294>
     eea:	29 2f       	mov	r18, r25
     eec:	26 60       	ori	r18, 0x06	; 6
     eee:	b2 2e       	mov	r11, r18
     ef0:	06 c0       	rjmp	.+12     	; 0xefe <vfprintf+0x294>
     ef2:	28 e0       	ldi	r18, 0x08	; 8
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	05 c0       	rjmp	.+10     	; 0xf02 <vfprintf+0x298>
     ef8:	20 e1       	ldi	r18, 0x10	; 16
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <vfprintf+0x298>
     efe:	20 e1       	ldi	r18, 0x10	; 16
     f00:	32 e0       	ldi	r19, 0x02	; 2
     f02:	f8 01       	movw	r30, r16
     f04:	b7 fe       	sbrs	r11, 7
     f06:	07 c0       	rjmp	.+14     	; 0xf16 <vfprintf+0x2ac>
     f08:	60 81       	ld	r22, Z
     f0a:	71 81       	ldd	r23, Z+1	; 0x01
     f0c:	82 81       	ldd	r24, Z+2	; 0x02
     f0e:	93 81       	ldd	r25, Z+3	; 0x03
     f10:	0c 5f       	subi	r16, 0xFC	; 252
     f12:	1f 4f       	sbci	r17, 0xFF	; 255
     f14:	06 c0       	rjmp	.+12     	; 0xf22 <vfprintf+0x2b8>
     f16:	60 81       	ld	r22, Z
     f18:	71 81       	ldd	r23, Z+1	; 0x01
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	0e 5f       	subi	r16, 0xFE	; 254
     f20:	1f 4f       	sbci	r17, 0xFF	; 255
     f22:	a3 01       	movw	r20, r6
     f24:	43 d2       	rcall	.+1158   	; 0x13ac <__ultoa_invert>
     f26:	88 2e       	mov	r8, r24
     f28:	86 18       	sub	r8, r6
     f2a:	fb 2d       	mov	r31, r11
     f2c:	ff 77       	andi	r31, 0x7F	; 127
     f2e:	3f 2e       	mov	r3, r31
     f30:	36 fe       	sbrs	r3, 6
     f32:	0d c0       	rjmp	.+26     	; 0xf4e <vfprintf+0x2e4>
     f34:	23 2d       	mov	r18, r3
     f36:	2e 7f       	andi	r18, 0xFE	; 254
     f38:	a2 2e       	mov	r10, r18
     f3a:	89 14       	cp	r8, r9
     f3c:	58 f4       	brcc	.+22     	; 0xf54 <vfprintf+0x2ea>
     f3e:	34 fe       	sbrs	r3, 4
     f40:	0b c0       	rjmp	.+22     	; 0xf58 <vfprintf+0x2ee>
     f42:	32 fc       	sbrc	r3, 2
     f44:	09 c0       	rjmp	.+18     	; 0xf58 <vfprintf+0x2ee>
     f46:	83 2d       	mov	r24, r3
     f48:	8e 7e       	andi	r24, 0xEE	; 238
     f4a:	a8 2e       	mov	r10, r24
     f4c:	05 c0       	rjmp	.+10     	; 0xf58 <vfprintf+0x2ee>
     f4e:	b8 2c       	mov	r11, r8
     f50:	a3 2c       	mov	r10, r3
     f52:	03 c0       	rjmp	.+6      	; 0xf5a <vfprintf+0x2f0>
     f54:	b8 2c       	mov	r11, r8
     f56:	01 c0       	rjmp	.+2      	; 0xf5a <vfprintf+0x2f0>
     f58:	b9 2c       	mov	r11, r9
     f5a:	a4 fe       	sbrs	r10, 4
     f5c:	0f c0       	rjmp	.+30     	; 0xf7c <vfprintf+0x312>
     f5e:	fe 01       	movw	r30, r28
     f60:	e8 0d       	add	r30, r8
     f62:	f1 1d       	adc	r31, r1
     f64:	80 81       	ld	r24, Z
     f66:	80 33       	cpi	r24, 0x30	; 48
     f68:	21 f4       	brne	.+8      	; 0xf72 <vfprintf+0x308>
     f6a:	9a 2d       	mov	r25, r10
     f6c:	99 7e       	andi	r25, 0xE9	; 233
     f6e:	a9 2e       	mov	r10, r25
     f70:	09 c0       	rjmp	.+18     	; 0xf84 <vfprintf+0x31a>
     f72:	a2 fe       	sbrs	r10, 2
     f74:	06 c0       	rjmp	.+12     	; 0xf82 <vfprintf+0x318>
     f76:	b3 94       	inc	r11
     f78:	b3 94       	inc	r11
     f7a:	04 c0       	rjmp	.+8      	; 0xf84 <vfprintf+0x31a>
     f7c:	8a 2d       	mov	r24, r10
     f7e:	86 78       	andi	r24, 0x86	; 134
     f80:	09 f0       	breq	.+2      	; 0xf84 <vfprintf+0x31a>
     f82:	b3 94       	inc	r11
     f84:	a3 fc       	sbrc	r10, 3
     f86:	10 c0       	rjmp	.+32     	; 0xfa8 <vfprintf+0x33e>
     f88:	a0 fe       	sbrs	r10, 0
     f8a:	06 c0       	rjmp	.+12     	; 0xf98 <vfprintf+0x32e>
     f8c:	b2 14       	cp	r11, r2
     f8e:	80 f4       	brcc	.+32     	; 0xfb0 <vfprintf+0x346>
     f90:	28 0c       	add	r2, r8
     f92:	92 2c       	mov	r9, r2
     f94:	9b 18       	sub	r9, r11
     f96:	0d c0       	rjmp	.+26     	; 0xfb2 <vfprintf+0x348>
     f98:	b2 14       	cp	r11, r2
     f9a:	58 f4       	brcc	.+22     	; 0xfb2 <vfprintf+0x348>
     f9c:	b6 01       	movw	r22, r12
     f9e:	80 e2       	ldi	r24, 0x20	; 32
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	c8 d1       	rcall	.+912    	; 0x1334 <fputc>
     fa4:	b3 94       	inc	r11
     fa6:	f8 cf       	rjmp	.-16     	; 0xf98 <vfprintf+0x32e>
     fa8:	b2 14       	cp	r11, r2
     faa:	18 f4       	brcc	.+6      	; 0xfb2 <vfprintf+0x348>
     fac:	2b 18       	sub	r2, r11
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <vfprintf+0x34a>
     fb0:	98 2c       	mov	r9, r8
     fb2:	21 2c       	mov	r2, r1
     fb4:	a4 fe       	sbrs	r10, 4
     fb6:	0f c0       	rjmp	.+30     	; 0xfd6 <vfprintf+0x36c>
     fb8:	b6 01       	movw	r22, r12
     fba:	80 e3       	ldi	r24, 0x30	; 48
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	ba d1       	rcall	.+884    	; 0x1334 <fputc>
     fc0:	a2 fe       	sbrs	r10, 2
     fc2:	16 c0       	rjmp	.+44     	; 0xff0 <vfprintf+0x386>
     fc4:	a1 fc       	sbrc	r10, 1
     fc6:	03 c0       	rjmp	.+6      	; 0xfce <vfprintf+0x364>
     fc8:	88 e7       	ldi	r24, 0x78	; 120
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <vfprintf+0x368>
     fce:	88 e5       	ldi	r24, 0x58	; 88
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	b6 01       	movw	r22, r12
     fd4:	0c c0       	rjmp	.+24     	; 0xfee <vfprintf+0x384>
     fd6:	8a 2d       	mov	r24, r10
     fd8:	86 78       	andi	r24, 0x86	; 134
     fda:	51 f0       	breq	.+20     	; 0xff0 <vfprintf+0x386>
     fdc:	a1 fe       	sbrs	r10, 1
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <vfprintf+0x37a>
     fe0:	8b e2       	ldi	r24, 0x2B	; 43
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <vfprintf+0x37c>
     fe4:	80 e2       	ldi	r24, 0x20	; 32
     fe6:	a7 fc       	sbrc	r10, 7
     fe8:	8d e2       	ldi	r24, 0x2D	; 45
     fea:	b6 01       	movw	r22, r12
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	a2 d1       	rcall	.+836    	; 0x1334 <fputc>
     ff0:	89 14       	cp	r8, r9
     ff2:	30 f4       	brcc	.+12     	; 0x1000 <vfprintf+0x396>
     ff4:	b6 01       	movw	r22, r12
     ff6:	80 e3       	ldi	r24, 0x30	; 48
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	9c d1       	rcall	.+824    	; 0x1334 <fputc>
     ffc:	9a 94       	dec	r9
     ffe:	f8 cf       	rjmp	.-16     	; 0xff0 <vfprintf+0x386>
    1000:	8a 94       	dec	r8
    1002:	f3 01       	movw	r30, r6
    1004:	e8 0d       	add	r30, r8
    1006:	f1 1d       	adc	r31, r1
    1008:	80 81       	ld	r24, Z
    100a:	b6 01       	movw	r22, r12
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	92 d1       	rcall	.+804    	; 0x1334 <fputc>
    1010:	81 10       	cpse	r8, r1
    1012:	f6 cf       	rjmp	.-20     	; 0x1000 <vfprintf+0x396>
    1014:	22 20       	and	r2, r2
    1016:	09 f4       	brne	.+2      	; 0x101a <vfprintf+0x3b0>
    1018:	4e ce       	rjmp	.-868    	; 0xcb6 <vfprintf+0x4c>
    101a:	b6 01       	movw	r22, r12
    101c:	80 e2       	ldi	r24, 0x20	; 32
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	89 d1       	rcall	.+786    	; 0x1334 <fputc>
    1022:	2a 94       	dec	r2
    1024:	f7 cf       	rjmp	.-18     	; 0x1014 <vfprintf+0x3aa>
    1026:	f6 01       	movw	r30, r12
    1028:	86 81       	ldd	r24, Z+6	; 0x06
    102a:	97 81       	ldd	r25, Z+7	; 0x07
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <vfprintf+0x3c8>
    102e:	8f ef       	ldi	r24, 0xFF	; 255
    1030:	9f ef       	ldi	r25, 0xFF	; 255
    1032:	2b 96       	adiw	r28, 0x0b	; 11
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	ff 90       	pop	r15
    1048:	ef 90       	pop	r14
    104a:	df 90       	pop	r13
    104c:	cf 90       	pop	r12
    104e:	bf 90       	pop	r11
    1050:	af 90       	pop	r10
    1052:	9f 90       	pop	r9
    1054:	8f 90       	pop	r8
    1056:	7f 90       	pop	r7
    1058:	6f 90       	pop	r6
    105a:	5f 90       	pop	r5
    105c:	4f 90       	pop	r4
    105e:	3f 90       	pop	r3
    1060:	2f 90       	pop	r2
    1062:	08 95       	ret

00001064 <calloc>:
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	86 9f       	mul	r24, r22
    106e:	80 01       	movw	r16, r0
    1070:	87 9f       	mul	r24, r23
    1072:	10 0d       	add	r17, r0
    1074:	96 9f       	mul	r25, r22
    1076:	10 0d       	add	r17, r0
    1078:	11 24       	eor	r1, r1
    107a:	c8 01       	movw	r24, r16
    107c:	0d d0       	rcall	.+26     	; 0x1098 <malloc>
    107e:	ec 01       	movw	r28, r24
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	21 f0       	breq	.+8      	; 0x108c <calloc+0x28>
    1084:	a8 01       	movw	r20, r16
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	32 d1       	rcall	.+612    	; 0x12f0 <memset>
    108c:	ce 01       	movw	r24, r28
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	1f 91       	pop	r17
    1094:	0f 91       	pop	r16
    1096:	08 95       	ret

00001098 <malloc>:
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	82 30       	cpi	r24, 0x02	; 2
    10a2:	91 05       	cpc	r25, r1
    10a4:	10 f4       	brcc	.+4      	; 0x10aa <malloc+0x12>
    10a6:	82 e0       	ldi	r24, 0x02	; 2
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	e0 91 70 02 	lds	r30, 0x0270	; 0x800270 <__flp>
    10ae:	f0 91 71 02 	lds	r31, 0x0271	; 0x800271 <__flp+0x1>
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	a0 e0       	ldi	r26, 0x00	; 0
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	30 97       	sbiw	r30, 0x00	; 0
    10bc:	19 f1       	breq	.+70     	; 0x1104 <malloc+0x6c>
    10be:	40 81       	ld	r20, Z
    10c0:	51 81       	ldd	r21, Z+1	; 0x01
    10c2:	02 81       	ldd	r16, Z+2	; 0x02
    10c4:	13 81       	ldd	r17, Z+3	; 0x03
    10c6:	48 17       	cp	r20, r24
    10c8:	59 07       	cpc	r21, r25
    10ca:	c8 f0       	brcs	.+50     	; 0x10fe <malloc+0x66>
    10cc:	84 17       	cp	r24, r20
    10ce:	95 07       	cpc	r25, r21
    10d0:	69 f4       	brne	.+26     	; 0x10ec <malloc+0x54>
    10d2:	10 97       	sbiw	r26, 0x00	; 0
    10d4:	31 f0       	breq	.+12     	; 0x10e2 <malloc+0x4a>
    10d6:	12 96       	adiw	r26, 0x02	; 2
    10d8:	0c 93       	st	X, r16
    10da:	12 97       	sbiw	r26, 0x02	; 2
    10dc:	13 96       	adiw	r26, 0x03	; 3
    10de:	1c 93       	st	X, r17
    10e0:	27 c0       	rjmp	.+78     	; 0x1130 <malloc+0x98>
    10e2:	00 93 70 02 	sts	0x0270, r16	; 0x800270 <__flp>
    10e6:	10 93 71 02 	sts	0x0271, r17	; 0x800271 <__flp+0x1>
    10ea:	22 c0       	rjmp	.+68     	; 0x1130 <malloc+0x98>
    10ec:	21 15       	cp	r18, r1
    10ee:	31 05       	cpc	r19, r1
    10f0:	19 f0       	breq	.+6      	; 0x10f8 <malloc+0x60>
    10f2:	42 17       	cp	r20, r18
    10f4:	53 07       	cpc	r21, r19
    10f6:	18 f4       	brcc	.+6      	; 0x10fe <malloc+0x66>
    10f8:	9a 01       	movw	r18, r20
    10fa:	bd 01       	movw	r22, r26
    10fc:	ef 01       	movw	r28, r30
    10fe:	df 01       	movw	r26, r30
    1100:	f8 01       	movw	r30, r16
    1102:	db cf       	rjmp	.-74     	; 0x10ba <malloc+0x22>
    1104:	21 15       	cp	r18, r1
    1106:	31 05       	cpc	r19, r1
    1108:	f9 f0       	breq	.+62     	; 0x1148 <malloc+0xb0>
    110a:	28 1b       	sub	r18, r24
    110c:	39 0b       	sbc	r19, r25
    110e:	24 30       	cpi	r18, 0x04	; 4
    1110:	31 05       	cpc	r19, r1
    1112:	80 f4       	brcc	.+32     	; 0x1134 <malloc+0x9c>
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	9b 81       	ldd	r25, Y+3	; 0x03
    1118:	61 15       	cp	r22, r1
    111a:	71 05       	cpc	r23, r1
    111c:	21 f0       	breq	.+8      	; 0x1126 <malloc+0x8e>
    111e:	fb 01       	movw	r30, r22
    1120:	93 83       	std	Z+3, r25	; 0x03
    1122:	82 83       	std	Z+2, r24	; 0x02
    1124:	04 c0       	rjmp	.+8      	; 0x112e <malloc+0x96>
    1126:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <__flp+0x1>
    112a:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <__flp>
    112e:	fe 01       	movw	r30, r28
    1130:	32 96       	adiw	r30, 0x02	; 2
    1132:	44 c0       	rjmp	.+136    	; 0x11bc <malloc+0x124>
    1134:	fe 01       	movw	r30, r28
    1136:	e2 0f       	add	r30, r18
    1138:	f3 1f       	adc	r31, r19
    113a:	81 93       	st	Z+, r24
    113c:	91 93       	st	Z+, r25
    113e:	22 50       	subi	r18, 0x02	; 2
    1140:	31 09       	sbc	r19, r1
    1142:	39 83       	std	Y+1, r19	; 0x01
    1144:	28 83       	st	Y, r18
    1146:	3a c0       	rjmp	.+116    	; 0x11bc <malloc+0x124>
    1148:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <__brkval>
    114c:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <__brkval+0x1>
    1150:	23 2b       	or	r18, r19
    1152:	41 f4       	brne	.+16     	; 0x1164 <malloc+0xcc>
    1154:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1158:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    115c:	30 93 6f 02 	sts	0x026F, r19	; 0x80026f <__brkval+0x1>
    1160:	20 93 6e 02 	sts	0x026E, r18	; 0x80026e <__brkval>
    1164:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1168:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    116c:	21 15       	cp	r18, r1
    116e:	31 05       	cpc	r19, r1
    1170:	41 f4       	brne	.+16     	; 0x1182 <malloc+0xea>
    1172:	2d b7       	in	r18, 0x3d	; 61
    1174:	3e b7       	in	r19, 0x3e	; 62
    1176:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    117a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    117e:	24 1b       	sub	r18, r20
    1180:	35 0b       	sbc	r19, r21
    1182:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <__brkval>
    1186:	f0 91 6f 02 	lds	r31, 0x026F	; 0x80026f <__brkval+0x1>
    118a:	e2 17       	cp	r30, r18
    118c:	f3 07       	cpc	r31, r19
    118e:	a0 f4       	brcc	.+40     	; 0x11b8 <malloc+0x120>
    1190:	2e 1b       	sub	r18, r30
    1192:	3f 0b       	sbc	r19, r31
    1194:	28 17       	cp	r18, r24
    1196:	39 07       	cpc	r19, r25
    1198:	78 f0       	brcs	.+30     	; 0x11b8 <malloc+0x120>
    119a:	ac 01       	movw	r20, r24
    119c:	4e 5f       	subi	r20, 0xFE	; 254
    119e:	5f 4f       	sbci	r21, 0xFF	; 255
    11a0:	24 17       	cp	r18, r20
    11a2:	35 07       	cpc	r19, r21
    11a4:	48 f0       	brcs	.+18     	; 0x11b8 <malloc+0x120>
    11a6:	4e 0f       	add	r20, r30
    11a8:	5f 1f       	adc	r21, r31
    11aa:	50 93 6f 02 	sts	0x026F, r21	; 0x80026f <__brkval+0x1>
    11ae:	40 93 6e 02 	sts	0x026E, r20	; 0x80026e <__brkval>
    11b2:	81 93       	st	Z+, r24
    11b4:	91 93       	st	Z+, r25
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <malloc+0x124>
    11b8:	e0 e0       	ldi	r30, 0x00	; 0
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	cf 01       	movw	r24, r30
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	08 95       	ret

000011c8 <free>:
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	00 97       	sbiw	r24, 0x00	; 0
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <free+0xa>
    11d0:	81 c0       	rjmp	.+258    	; 0x12d4 <free+0x10c>
    11d2:	fc 01       	movw	r30, r24
    11d4:	32 97       	sbiw	r30, 0x02	; 2
    11d6:	13 82       	std	Z+3, r1	; 0x03
    11d8:	12 82       	std	Z+2, r1	; 0x02
    11da:	a0 91 70 02 	lds	r26, 0x0270	; 0x800270 <__flp>
    11de:	b0 91 71 02 	lds	r27, 0x0271	; 0x800271 <__flp+0x1>
    11e2:	10 97       	sbiw	r26, 0x00	; 0
    11e4:	81 f4       	brne	.+32     	; 0x1206 <free+0x3e>
    11e6:	20 81       	ld	r18, Z
    11e8:	31 81       	ldd	r19, Z+1	; 0x01
    11ea:	82 0f       	add	r24, r18
    11ec:	93 1f       	adc	r25, r19
    11ee:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <__brkval>
    11f2:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <__brkval+0x1>
    11f6:	28 17       	cp	r18, r24
    11f8:	39 07       	cpc	r19, r25
    11fa:	51 f5       	brne	.+84     	; 0x1250 <free+0x88>
    11fc:	f0 93 6f 02 	sts	0x026F, r31	; 0x80026f <__brkval+0x1>
    1200:	e0 93 6e 02 	sts	0x026E, r30	; 0x80026e <__brkval>
    1204:	67 c0       	rjmp	.+206    	; 0x12d4 <free+0x10c>
    1206:	ed 01       	movw	r28, r26
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	ce 17       	cp	r28, r30
    120e:	df 07       	cpc	r29, r31
    1210:	40 f4       	brcc	.+16     	; 0x1222 <free+0x5a>
    1212:	4a 81       	ldd	r20, Y+2	; 0x02
    1214:	5b 81       	ldd	r21, Y+3	; 0x03
    1216:	9e 01       	movw	r18, r28
    1218:	41 15       	cp	r20, r1
    121a:	51 05       	cpc	r21, r1
    121c:	f1 f0       	breq	.+60     	; 0x125a <free+0x92>
    121e:	ea 01       	movw	r28, r20
    1220:	f5 cf       	rjmp	.-22     	; 0x120c <free+0x44>
    1222:	d3 83       	std	Z+3, r29	; 0x03
    1224:	c2 83       	std	Z+2, r28	; 0x02
    1226:	40 81       	ld	r20, Z
    1228:	51 81       	ldd	r21, Z+1	; 0x01
    122a:	84 0f       	add	r24, r20
    122c:	95 1f       	adc	r25, r21
    122e:	c8 17       	cp	r28, r24
    1230:	d9 07       	cpc	r29, r25
    1232:	59 f4       	brne	.+22     	; 0x124a <free+0x82>
    1234:	88 81       	ld	r24, Y
    1236:	99 81       	ldd	r25, Y+1	; 0x01
    1238:	84 0f       	add	r24, r20
    123a:	95 1f       	adc	r25, r21
    123c:	02 96       	adiw	r24, 0x02	; 2
    123e:	91 83       	std	Z+1, r25	; 0x01
    1240:	80 83       	st	Z, r24
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	9b 81       	ldd	r25, Y+3	; 0x03
    1246:	93 83       	std	Z+3, r25	; 0x03
    1248:	82 83       	std	Z+2, r24	; 0x02
    124a:	21 15       	cp	r18, r1
    124c:	31 05       	cpc	r19, r1
    124e:	29 f4       	brne	.+10     	; 0x125a <free+0x92>
    1250:	f0 93 71 02 	sts	0x0271, r31	; 0x800271 <__flp+0x1>
    1254:	e0 93 70 02 	sts	0x0270, r30	; 0x800270 <__flp>
    1258:	3d c0       	rjmp	.+122    	; 0x12d4 <free+0x10c>
    125a:	e9 01       	movw	r28, r18
    125c:	fb 83       	std	Y+3, r31	; 0x03
    125e:	ea 83       	std	Y+2, r30	; 0x02
    1260:	49 91       	ld	r20, Y+
    1262:	59 91       	ld	r21, Y+
    1264:	c4 0f       	add	r28, r20
    1266:	d5 1f       	adc	r29, r21
    1268:	ec 17       	cp	r30, r28
    126a:	fd 07       	cpc	r31, r29
    126c:	61 f4       	brne	.+24     	; 0x1286 <free+0xbe>
    126e:	80 81       	ld	r24, Z
    1270:	91 81       	ldd	r25, Z+1	; 0x01
    1272:	84 0f       	add	r24, r20
    1274:	95 1f       	adc	r25, r21
    1276:	02 96       	adiw	r24, 0x02	; 2
    1278:	e9 01       	movw	r28, r18
    127a:	99 83       	std	Y+1, r25	; 0x01
    127c:	88 83       	st	Y, r24
    127e:	82 81       	ldd	r24, Z+2	; 0x02
    1280:	93 81       	ldd	r25, Z+3	; 0x03
    1282:	9b 83       	std	Y+3, r25	; 0x03
    1284:	8a 83       	std	Y+2, r24	; 0x02
    1286:	e0 e0       	ldi	r30, 0x00	; 0
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	12 96       	adiw	r26, 0x02	; 2
    128c:	8d 91       	ld	r24, X+
    128e:	9c 91       	ld	r25, X
    1290:	13 97       	sbiw	r26, 0x03	; 3
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	19 f0       	breq	.+6      	; 0x129c <free+0xd4>
    1296:	fd 01       	movw	r30, r26
    1298:	dc 01       	movw	r26, r24
    129a:	f7 cf       	rjmp	.-18     	; 0x128a <free+0xc2>
    129c:	8d 91       	ld	r24, X+
    129e:	9c 91       	ld	r25, X
    12a0:	11 97       	sbiw	r26, 0x01	; 1
    12a2:	9d 01       	movw	r18, r26
    12a4:	2e 5f       	subi	r18, 0xFE	; 254
    12a6:	3f 4f       	sbci	r19, 0xFF	; 255
    12a8:	82 0f       	add	r24, r18
    12aa:	93 1f       	adc	r25, r19
    12ac:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <__brkval>
    12b0:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <__brkval+0x1>
    12b4:	28 17       	cp	r18, r24
    12b6:	39 07       	cpc	r19, r25
    12b8:	69 f4       	brne	.+26     	; 0x12d4 <free+0x10c>
    12ba:	30 97       	sbiw	r30, 0x00	; 0
    12bc:	29 f4       	brne	.+10     	; 0x12c8 <free+0x100>
    12be:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <__flp+0x1>
    12c2:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <__flp>
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <free+0x104>
    12c8:	13 82       	std	Z+3, r1	; 0x03
    12ca:	12 82       	std	Z+2, r1	; 0x02
    12cc:	b0 93 6f 02 	sts	0x026F, r27	; 0x80026f <__brkval+0x1>
    12d0:	a0 93 6e 02 	sts	0x026E, r26	; 0x80026e <__brkval>
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	08 95       	ret

000012da <strnlen_P>:
    12da:	fc 01       	movw	r30, r24
    12dc:	05 90       	lpm	r0, Z+
    12de:	61 50       	subi	r22, 0x01	; 1
    12e0:	70 40       	sbci	r23, 0x00	; 0
    12e2:	01 10       	cpse	r0, r1
    12e4:	d8 f7       	brcc	.-10     	; 0x12dc <strnlen_P+0x2>
    12e6:	80 95       	com	r24
    12e8:	90 95       	com	r25
    12ea:	8e 0f       	add	r24, r30
    12ec:	9f 1f       	adc	r25, r31
    12ee:	08 95       	ret

000012f0 <memset>:
    12f0:	dc 01       	movw	r26, r24
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <memset+0x6>
    12f4:	6d 93       	st	X+, r22
    12f6:	41 50       	subi	r20, 0x01	; 1
    12f8:	50 40       	sbci	r21, 0x00	; 0
    12fa:	e0 f7       	brcc	.-8      	; 0x12f4 <memset+0x4>
    12fc:	08 95       	ret

000012fe <strnlen>:
    12fe:	fc 01       	movw	r30, r24
    1300:	61 50       	subi	r22, 0x01	; 1
    1302:	70 40       	sbci	r23, 0x00	; 0
    1304:	01 90       	ld	r0, Z+
    1306:	01 10       	cpse	r0, r1
    1308:	d8 f7       	brcc	.-10     	; 0x1300 <strnlen+0x2>
    130a:	80 95       	com	r24
    130c:	90 95       	com	r25
    130e:	8e 0f       	add	r24, r30
    1310:	9f 1f       	adc	r25, r31
    1312:	08 95       	ret

00001314 <strrev>:
    1314:	dc 01       	movw	r26, r24
    1316:	fc 01       	movw	r30, r24
    1318:	67 2f       	mov	r22, r23
    131a:	71 91       	ld	r23, Z+
    131c:	77 23       	and	r23, r23
    131e:	e1 f7       	brne	.-8      	; 0x1318 <strrev+0x4>
    1320:	32 97       	sbiw	r30, 0x02	; 2
    1322:	04 c0       	rjmp	.+8      	; 0x132c <strrev+0x18>
    1324:	7c 91       	ld	r23, X
    1326:	6d 93       	st	X+, r22
    1328:	70 83       	st	Z, r23
    132a:	62 91       	ld	r22, -Z
    132c:	ae 17       	cp	r26, r30
    132e:	bf 07       	cpc	r27, r31
    1330:	c8 f3       	brcs	.-14     	; 0x1324 <strrev+0x10>
    1332:	08 95       	ret

00001334 <fputc>:
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	fb 01       	movw	r30, r22
    133e:	23 81       	ldd	r18, Z+3	; 0x03
    1340:	21 fd       	sbrc	r18, 1
    1342:	03 c0       	rjmp	.+6      	; 0x134a <fputc+0x16>
    1344:	8f ef       	ldi	r24, 0xFF	; 255
    1346:	9f ef       	ldi	r25, 0xFF	; 255
    1348:	2c c0       	rjmp	.+88     	; 0x13a2 <fputc+0x6e>
    134a:	22 ff       	sbrs	r18, 2
    134c:	16 c0       	rjmp	.+44     	; 0x137a <fputc+0x46>
    134e:	46 81       	ldd	r20, Z+6	; 0x06
    1350:	57 81       	ldd	r21, Z+7	; 0x07
    1352:	24 81       	ldd	r18, Z+4	; 0x04
    1354:	35 81       	ldd	r19, Z+5	; 0x05
    1356:	42 17       	cp	r20, r18
    1358:	53 07       	cpc	r21, r19
    135a:	44 f4       	brge	.+16     	; 0x136c <fputc+0x38>
    135c:	a0 81       	ld	r26, Z
    135e:	b1 81       	ldd	r27, Z+1	; 0x01
    1360:	9d 01       	movw	r18, r26
    1362:	2f 5f       	subi	r18, 0xFF	; 255
    1364:	3f 4f       	sbci	r19, 0xFF	; 255
    1366:	31 83       	std	Z+1, r19	; 0x01
    1368:	20 83       	st	Z, r18
    136a:	8c 93       	st	X, r24
    136c:	26 81       	ldd	r18, Z+6	; 0x06
    136e:	37 81       	ldd	r19, Z+7	; 0x07
    1370:	2f 5f       	subi	r18, 0xFF	; 255
    1372:	3f 4f       	sbci	r19, 0xFF	; 255
    1374:	37 83       	std	Z+7, r19	; 0x07
    1376:	26 83       	std	Z+6, r18	; 0x06
    1378:	14 c0       	rjmp	.+40     	; 0x13a2 <fputc+0x6e>
    137a:	8b 01       	movw	r16, r22
    137c:	ec 01       	movw	r28, r24
    137e:	fb 01       	movw	r30, r22
    1380:	00 84       	ldd	r0, Z+8	; 0x08
    1382:	f1 85       	ldd	r31, Z+9	; 0x09
    1384:	e0 2d       	mov	r30, r0
    1386:	19 95       	eicall
    1388:	89 2b       	or	r24, r25
    138a:	e1 f6       	brne	.-72     	; 0x1344 <fputc+0x10>
    138c:	d8 01       	movw	r26, r16
    138e:	16 96       	adiw	r26, 0x06	; 6
    1390:	8d 91       	ld	r24, X+
    1392:	9c 91       	ld	r25, X
    1394:	17 97       	sbiw	r26, 0x07	; 7
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	17 96       	adiw	r26, 0x07	; 7
    139a:	9c 93       	st	X, r25
    139c:	8e 93       	st	-X, r24
    139e:	16 97       	sbiw	r26, 0x06	; 6
    13a0:	ce 01       	movw	r24, r28
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	08 95       	ret

000013ac <__ultoa_invert>:
    13ac:	fa 01       	movw	r30, r20
    13ae:	aa 27       	eor	r26, r26
    13b0:	28 30       	cpi	r18, 0x08	; 8
    13b2:	51 f1       	breq	.+84     	; 0x1408 <__ultoa_invert+0x5c>
    13b4:	20 31       	cpi	r18, 0x10	; 16
    13b6:	81 f1       	breq	.+96     	; 0x1418 <__ultoa_invert+0x6c>
    13b8:	e8 94       	clt
    13ba:	6f 93       	push	r22
    13bc:	6e 7f       	andi	r22, 0xFE	; 254
    13be:	6e 5f       	subi	r22, 0xFE	; 254
    13c0:	7f 4f       	sbci	r23, 0xFF	; 255
    13c2:	8f 4f       	sbci	r24, 0xFF	; 255
    13c4:	9f 4f       	sbci	r25, 0xFF	; 255
    13c6:	af 4f       	sbci	r26, 0xFF	; 255
    13c8:	b1 e0       	ldi	r27, 0x01	; 1
    13ca:	3e d0       	rcall	.+124    	; 0x1448 <__ultoa_invert+0x9c>
    13cc:	b4 e0       	ldi	r27, 0x04	; 4
    13ce:	3c d0       	rcall	.+120    	; 0x1448 <__ultoa_invert+0x9c>
    13d0:	67 0f       	add	r22, r23
    13d2:	78 1f       	adc	r23, r24
    13d4:	89 1f       	adc	r24, r25
    13d6:	9a 1f       	adc	r25, r26
    13d8:	a1 1d       	adc	r26, r1
    13da:	68 0f       	add	r22, r24
    13dc:	79 1f       	adc	r23, r25
    13de:	8a 1f       	adc	r24, r26
    13e0:	91 1d       	adc	r25, r1
    13e2:	a1 1d       	adc	r26, r1
    13e4:	6a 0f       	add	r22, r26
    13e6:	71 1d       	adc	r23, r1
    13e8:	81 1d       	adc	r24, r1
    13ea:	91 1d       	adc	r25, r1
    13ec:	a1 1d       	adc	r26, r1
    13ee:	20 d0       	rcall	.+64     	; 0x1430 <__ultoa_invert+0x84>
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <__ultoa_invert+0x48>
    13f2:	68 94       	set
    13f4:	3f 91       	pop	r19
    13f6:	2a e0       	ldi	r18, 0x0A	; 10
    13f8:	26 9f       	mul	r18, r22
    13fa:	11 24       	eor	r1, r1
    13fc:	30 19       	sub	r19, r0
    13fe:	30 5d       	subi	r19, 0xD0	; 208
    1400:	31 93       	st	Z+, r19
    1402:	de f6       	brtc	.-74     	; 0x13ba <__ultoa_invert+0xe>
    1404:	cf 01       	movw	r24, r30
    1406:	08 95       	ret
    1408:	46 2f       	mov	r20, r22
    140a:	47 70       	andi	r20, 0x07	; 7
    140c:	40 5d       	subi	r20, 0xD0	; 208
    140e:	41 93       	st	Z+, r20
    1410:	b3 e0       	ldi	r27, 0x03	; 3
    1412:	0f d0       	rcall	.+30     	; 0x1432 <__ultoa_invert+0x86>
    1414:	c9 f7       	brne	.-14     	; 0x1408 <__ultoa_invert+0x5c>
    1416:	f6 cf       	rjmp	.-20     	; 0x1404 <__ultoa_invert+0x58>
    1418:	46 2f       	mov	r20, r22
    141a:	4f 70       	andi	r20, 0x0F	; 15
    141c:	40 5d       	subi	r20, 0xD0	; 208
    141e:	4a 33       	cpi	r20, 0x3A	; 58
    1420:	18 f0       	brcs	.+6      	; 0x1428 <__ultoa_invert+0x7c>
    1422:	49 5d       	subi	r20, 0xD9	; 217
    1424:	31 fd       	sbrc	r19, 1
    1426:	40 52       	subi	r20, 0x20	; 32
    1428:	41 93       	st	Z+, r20
    142a:	02 d0       	rcall	.+4      	; 0x1430 <__ultoa_invert+0x84>
    142c:	a9 f7       	brne	.-22     	; 0x1418 <__ultoa_invert+0x6c>
    142e:	ea cf       	rjmp	.-44     	; 0x1404 <__ultoa_invert+0x58>
    1430:	b4 e0       	ldi	r27, 0x04	; 4
    1432:	a6 95       	lsr	r26
    1434:	97 95       	ror	r25
    1436:	87 95       	ror	r24
    1438:	77 95       	ror	r23
    143a:	67 95       	ror	r22
    143c:	ba 95       	dec	r27
    143e:	c9 f7       	brne	.-14     	; 0x1432 <__ultoa_invert+0x86>
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	61 05       	cpc	r22, r1
    1444:	71 05       	cpc	r23, r1
    1446:	08 95       	ret
    1448:	9b 01       	movw	r18, r22
    144a:	ac 01       	movw	r20, r24
    144c:	0a 2e       	mov	r0, r26
    144e:	06 94       	lsr	r0
    1450:	57 95       	ror	r21
    1452:	47 95       	ror	r20
    1454:	37 95       	ror	r19
    1456:	27 95       	ror	r18
    1458:	ba 95       	dec	r27
    145a:	c9 f7       	brne	.-14     	; 0x144e <__ultoa_invert+0xa2>
    145c:	62 0f       	add	r22, r18
    145e:	73 1f       	adc	r23, r19
    1460:	84 1f       	adc	r24, r20
    1462:	95 1f       	adc	r25, r21
    1464:	a0 1d       	adc	r26, r0
    1466:	08 95       	ret

00001468 <_exit>:
    1468:	f8 94       	cli

0000146a <__stop_program>:
    146a:	ff cf       	rjmp	.-2      	; 0x146a <__stop_program>
