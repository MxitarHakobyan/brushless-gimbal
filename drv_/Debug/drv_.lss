
drv_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000cc  00800200  0000206a  000020fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000206a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002f7  008002cc  008002cc  000021ca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000021ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002228  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002928  00000000  00000000  00002428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013bb  00000000  00000000  00004d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001202  00000000  00000000  0000610b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000053c  00000000  00000000  00007310  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b7e  00000000  00000000  0000784c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017fb  00000000  00000000  000083ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00009bc5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9e c0       	rjmp	.+316    	; 0x13e <__ctors_end>
       2:	00 00       	nop
       4:	bc c0       	rjmp	.+376    	; 0x17e <__bad_interrupt>
       6:	00 00       	nop
       8:	ba c0       	rjmp	.+372    	; 0x17e <__bad_interrupt>
       a:	00 00       	nop
       c:	b8 c0       	rjmp	.+368    	; 0x17e <__bad_interrupt>
       e:	00 00       	nop
      10:	b6 c0       	rjmp	.+364    	; 0x17e <__bad_interrupt>
      12:	00 00       	nop
      14:	b4 c0       	rjmp	.+360    	; 0x17e <__bad_interrupt>
      16:	00 00       	nop
      18:	b2 c0       	rjmp	.+356    	; 0x17e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b0 c0       	rjmp	.+352    	; 0x17e <__bad_interrupt>
      1e:	00 00       	nop
      20:	ae c0       	rjmp	.+348    	; 0x17e <__bad_interrupt>
      22:	00 00       	nop
      24:	ac c0       	rjmp	.+344    	; 0x17e <__bad_interrupt>
      26:	00 00       	nop
      28:	aa c0       	rjmp	.+340    	; 0x17e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a8 c0       	rjmp	.+336    	; 0x17e <__bad_interrupt>
      2e:	00 00       	nop
      30:	a6 c0       	rjmp	.+332    	; 0x17e <__bad_interrupt>
      32:	00 00       	nop
      34:	a4 c0       	rjmp	.+328    	; 0x17e <__bad_interrupt>
      36:	00 00       	nop
      38:	a2 c0       	rjmp	.+324    	; 0x17e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a0 c0       	rjmp	.+320    	; 0x17e <__bad_interrupt>
      3e:	00 00       	nop
      40:	9e c0       	rjmp	.+316    	; 0x17e <__bad_interrupt>
      42:	00 00       	nop
      44:	9c c0       	rjmp	.+312    	; 0x17e <__bad_interrupt>
      46:	00 00       	nop
      48:	9a c0       	rjmp	.+308    	; 0x17e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	98 c0       	rjmp	.+304    	; 0x17e <__bad_interrupt>
      4e:	00 00       	nop
      50:	96 c0       	rjmp	.+300    	; 0x17e <__bad_interrupt>
      52:	00 00       	nop
      54:	94 c0       	rjmp	.+296    	; 0x17e <__bad_interrupt>
      56:	00 00       	nop
      58:	92 c0       	rjmp	.+292    	; 0x17e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c1       	rjmp	.+620    	; 0x2ca <__vector_23>
      5e:	00 00       	nop
      60:	8e c0       	rjmp	.+284    	; 0x17e <__bad_interrupt>
      62:	00 00       	nop
      64:	8c c0       	rjmp	.+280    	; 0x17e <__bad_interrupt>
      66:	00 00       	nop
      68:	8a c0       	rjmp	.+276    	; 0x17e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	88 c0       	rjmp	.+272    	; 0x17e <__bad_interrupt>
      6e:	00 00       	nop
      70:	86 c0       	rjmp	.+268    	; 0x17e <__bad_interrupt>
      72:	00 00       	nop
      74:	84 c0       	rjmp	.+264    	; 0x17e <__bad_interrupt>
      76:	00 00       	nop
      78:	82 c0       	rjmp	.+260    	; 0x17e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	80 c0       	rjmp	.+256    	; 0x17e <__bad_interrupt>
      7e:	00 00       	nop
      80:	7e c0       	rjmp	.+252    	; 0x17e <__bad_interrupt>
      82:	00 00       	nop
      84:	7c c0       	rjmp	.+248    	; 0x17e <__bad_interrupt>
      86:	00 00       	nop
      88:	7a c0       	rjmp	.+244    	; 0x17e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	78 c0       	rjmp	.+240    	; 0x17e <__bad_interrupt>
      8e:	00 00       	nop
      90:	76 c0       	rjmp	.+236    	; 0x17e <__bad_interrupt>
      92:	00 00       	nop
      94:	74 c0       	rjmp	.+232    	; 0x17e <__bad_interrupt>
      96:	00 00       	nop
      98:	72 c0       	rjmp	.+228    	; 0x17e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	70 c0       	rjmp	.+224    	; 0x17e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6e c0       	rjmp	.+220    	; 0x17e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6c c0       	rjmp	.+216    	; 0x17e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6a c0       	rjmp	.+212    	; 0x17e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	68 c0       	rjmp	.+208    	; 0x17e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	66 c0       	rjmp	.+204    	; 0x17e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	64 c0       	rjmp	.+200    	; 0x17e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	62 c0       	rjmp	.+196    	; 0x17e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	f8 c1       	rjmp	.+1008   	; 0x4ae <__vector_47>
      be:	00 00       	nop
      c0:	5e c0       	rjmp	.+188    	; 0x17e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	5c c0       	rjmp	.+184    	; 0x17e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	5a c0       	rjmp	.+180    	; 0x17e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	58 c0       	rjmp	.+176    	; 0x17e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	56 c0       	rjmp	.+172    	; 0x17e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	54 c0       	rjmp	.+168    	; 0x17e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	52 c0       	rjmp	.+164    	; 0x17e <__bad_interrupt>
      da:	00 00       	nop
      dc:	50 c0       	rjmp	.+160    	; 0x17e <__bad_interrupt>
      de:	00 00       	nop
      e0:	4e c0       	rjmp	.+156    	; 0x17e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	03 6e       	ori	r16, 0xE3	; 227
      e6:	db 36       	cpi	r29, 0x6B	; 107
      e8:	3d 9a       	sbi	0x07, 5	; 7
      ea:	99 99       	sbic	0x13, 1	; 19
      ec:	99 3d       	cpi	r25, 0xD9	; 217
      ee:	ab aa       	std	Y+51, r10	; 0x33
      f0:	aa 2a       	or	r10, r26
      f2:	3e 00       	.word	0x003e	; ????
      f4:	00 00       	nop
      f6:	80 3f       	cpi	r24, 0xF0	; 240
      f8:	07 2c       	mov	r0, r7
      fa:	7a a5       	ldd	r23, Y+42	; 0x2a
      fc:	ba 6c       	ori	r27, 0xCA	; 202
      fe:	c5 90       	lpm	r12, Z+
     100:	da 3b       	cpi	r29, 0xBA	; 186
     102:	93 65       	ori	r25, 0x53	; 83
     104:	fc 8b       	std	Y+20, r31	; 0x14
     106:	bc 53       	subi	r27, 0x3C	; 60
     108:	f8 10       	cpse	r15, r8
     10a:	fd 3c       	cpi	r31, 0xCD	; 205
     10c:	56 92       	lac	Z, r5
     10e:	83 4d       	sbci	r24, 0xD3	; 211
     110:	bd 87       	std	Y+13, r27	; 0x0d
     112:	9d 3a       	cpi	r25, 0xAD	; 173
     114:	b6 3d       	cpi	r27, 0xD6	; 214
     116:	cb c9       	rjmp	.-3178   	; 0xfffff4ae <__eeprom_end+0xff7ef4ae>
     118:	bf 5b       	subi	r27, 0xBF	; 191
     11a:	be 73       	andi	r27, 0x3E	; 62
     11c:	da 0f       	add	r29, r26
     11e:	c9 3f       	cpi	r28, 0xF9	; 249
     120:	05 a8       	ldd	r0, Z+53	; 0x35
     122:	4c cd       	rjmp	.-1384   	; 0xfffffbbc <__eeprom_end+0xff7efbbc>
     124:	b2 d4       	rcall	.+2404   	; 0xa8a <main+0x4ea>
     126:	4e b9       	out	0x0e, r20	; 14
     128:	38 36       	cpi	r19, 0x68	; 104
     12a:	a9 02       	muls	r26, r25
     12c:	0c 50       	subi	r16, 0x0C	; 12
     12e:	b9 91       	ld	r27, Y+
     130:	86 88       	ldd	r8, Z+22	; 0x16
     132:	08 3c       	cpi	r16, 0xC8	; 200
     134:	a6 aa       	std	Z+54, r10	; 0x36
     136:	aa 2a       	or	r10, r26
     138:	be 00       	.word	0x00be	; ????
     13a:	00 00       	nop
     13c:	80 3f       	cpi	r24, 0xF0	; 240

0000013e <__ctors_end>:
     13e:	11 24       	eor	r1, r1
     140:	1f be       	out	0x3f, r1	; 63
     142:	cf ef       	ldi	r28, 0xFF	; 255
     144:	d1 e2       	ldi	r29, 0x21	; 33
     146:	de bf       	out	0x3e, r29	; 62
     148:	cd bf       	out	0x3d, r28	; 61
     14a:	00 e0       	ldi	r16, 0x00	; 0
     14c:	0c bf       	out	0x3c, r16	; 60

0000014e <__do_copy_data>:
     14e:	12 e0       	ldi	r17, 0x02	; 2
     150:	a0 e0       	ldi	r26, 0x00	; 0
     152:	b2 e0       	ldi	r27, 0x02	; 2
     154:	ea e6       	ldi	r30, 0x6A	; 106
     156:	f0 e2       	ldi	r31, 0x20	; 32
     158:	00 e0       	ldi	r16, 0x00	; 0
     15a:	0b bf       	out	0x3b, r16	; 59
     15c:	02 c0       	rjmp	.+4      	; 0x162 <__do_copy_data+0x14>
     15e:	07 90       	elpm	r0, Z+
     160:	0d 92       	st	X+, r0
     162:	ac 3c       	cpi	r26, 0xCC	; 204
     164:	b1 07       	cpc	r27, r17
     166:	d9 f7       	brne	.-10     	; 0x15e <__do_copy_data+0x10>

00000168 <__do_clear_bss>:
     168:	25 e0       	ldi	r18, 0x05	; 5
     16a:	ac ec       	ldi	r26, 0xCC	; 204
     16c:	b2 e0       	ldi	r27, 0x02	; 2
     16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
     170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
     172:	a3 3c       	cpi	r26, 0xC3	; 195
     174:	b2 07       	cpc	r27, r18
     176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
     178:	13 d2       	rcall	.+1062   	; 0x5a0 <main>
     17a:	0c 94 33 10 	jmp	0x2066	; 0x2066 <_exit>

0000017e <__bad_interrupt>:
     17e:	40 cf       	rjmp	.-384    	; 0x0 <__vectors>

00000180 <init_gpio>:
	*/
	//DDRB|=(1<<PB5);//LED13
	//sbi(DDRB,4);//digital 10
	//sbi(DDRB,5);//digital 11
	//sbi(DDRB,6);//digital 12
	sbi(DDRH,3);//digital 6 OC4A
     180:	e1 e0       	ldi	r30, 0x01	; 1
     182:	f1 e0       	ldi	r31, 0x01	; 1
     184:	80 81       	ld	r24, Z
     186:	88 60       	ori	r24, 0x08	; 8
     188:	80 83       	st	Z, r24
	sbi(DDRH,4);//digital 7 OC4B
     18a:	80 81       	ld	r24, Z
     18c:	80 61       	ori	r24, 0x10	; 16
     18e:	80 83       	st	Z, r24
	sbi(DDRH,5);//digital 8 OC4C
     190:	80 81       	ld	r24, Z
     192:	80 62       	ori	r24, 0x20	; 32
     194:	80 83       	st	Z, r24
     196:	08 95       	ret

00000198 <getSinTable>:
	//sbi(DDRH,6);//digital 9
}
void getSinTable(uint16_t sinTableSize,uint8_t *pwmSin,uint16_t sineScale)
{
     198:	4f 92       	push	r4
     19a:	5f 92       	push	r5
     19c:	6f 92       	push	r6
     19e:	7f 92       	push	r7
     1a0:	8f 92       	push	r8
     1a2:	9f 92       	push	r9
     1a4:	af 92       	push	r10
     1a6:	bf 92       	push	r11
     1a8:	cf 92       	push	r12
     1aa:	df 92       	push	r13
     1ac:	ef 92       	push	r14
     1ae:	ff 92       	push	r15
     1b0:	0f 93       	push	r16
     1b2:	1f 93       	push	r17
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	2a 97       	sbiw	r28, 0x0a	; 10
     1be:	0f b6       	in	r0, 0x3f	; 63
     1c0:	f8 94       	cli
     1c2:	de bf       	out	0x3e, r29	; 62
     1c4:	0f be       	out	0x3f, r0	; 63
     1c6:	cd bf       	out	0x3d, r28	; 61
	for (int i = 0; i < sinTableSize; i++)
     1c8:	00 97       	sbiw	r24, 0x00	; 0
     1ca:	09 f4       	brne	.+2      	; 0x1ce <getSinTable+0x36>
     1cc:	56 c0       	rjmp	.+172    	; 0x27a <getSinTable+0xe2>
     1ce:	a6 2e       	mov	r10, r22
     1d0:	b7 2e       	mov	r11, r23
     1d2:	4c 01       	movw	r8, r24
     1d4:	00 e0       	ldi	r16, 0x00	; 0
     1d6:	10 e0       	ldi	r17, 0x00	; 0
				print16(&reg);
				printf("\n");
			}
		#else
			double x = i * (2 * pi) / sinTableSize;
			pwmSin[i] = (sin(x) * sineScale) + sineScale;
     1d8:	6c 01       	movw	r12, r24
     1da:	e1 2c       	mov	r14, r1
     1dc:	f1 2c       	mov	r15, r1
     1de:	cb 82       	std	Y+3, r12	; 0x03
     1e0:	dc 82       	std	Y+4, r13	; 0x04
     1e2:	ed 82       	std	Y+5, r14	; 0x05
     1e4:	fe 82       	std	Y+6, r15	; 0x06
     1e6:	6a 01       	movw	r12, r20
     1e8:	e1 2c       	mov	r14, r1
     1ea:	f1 2c       	mov	r15, r1
     1ec:	cf 82       	std	Y+7, r12	; 0x07
     1ee:	d8 86       	std	Y+8, r13	; 0x08
     1f0:	e9 86       	std	Y+9, r14	; 0x09
     1f2:	fa 86       	std	Y+10, r15	; 0x0a
     1f4:	b8 01       	movw	r22, r16
     1f6:	01 2e       	mov	r0, r17
     1f8:	00 0c       	add	r0, r0
     1fa:	88 0b       	sbc	r24, r24
     1fc:	99 0b       	sbc	r25, r25
     1fe:	0e 94 44 09 	call	0x1288	; 0x1288 <__floatsisf>
     202:	2b ed       	ldi	r18, 0xDB	; 219
     204:	3f e0       	ldi	r19, 0x0F	; 15
     206:	49 ec       	ldi	r20, 0xC9	; 201
     208:	50 e4       	ldi	r21, 0x40	; 64
     20a:	0e 94 21 0a 	call	0x1442	; 0x1442 <__mulsf3>
     20e:	6b 01       	movw	r12, r22
     210:	7c 01       	movw	r14, r24
     212:	6b 81       	ldd	r22, Y+3	; 0x03
     214:	7c 81       	ldd	r23, Y+4	; 0x04
     216:	8d 81       	ldd	r24, Y+5	; 0x05
     218:	9e 81       	ldd	r25, Y+6	; 0x06
     21a:	0e 94 42 09 	call	0x1284	; 0x1284 <__floatunsisf>
     21e:	9b 01       	movw	r18, r22
     220:	ac 01       	movw	r20, r24
     222:	c7 01       	movw	r24, r14
     224:	b6 01       	movw	r22, r12
     226:	95 d7       	rcall	.+3882   	; 0x1152 <__divsf3>
     228:	0e 94 84 0a 	call	0x1508	; 0x1508 <sin>
     22c:	2b 01       	movw	r4, r22
     22e:	3c 01       	movw	r6, r24
     230:	6f 81       	ldd	r22, Y+7	; 0x07
     232:	78 85       	ldd	r23, Y+8	; 0x08
     234:	89 85       	ldd	r24, Y+9	; 0x09
     236:	9a 85       	ldd	r25, Y+10	; 0x0a
     238:	0e 94 42 09 	call	0x1284	; 0x1284 <__floatunsisf>
     23c:	6b 01       	movw	r12, r22
     23e:	7c 01       	movw	r14, r24
     240:	9b 01       	movw	r18, r22
     242:	ac 01       	movw	r20, r24
     244:	c3 01       	movw	r24, r6
     246:	b2 01       	movw	r22, r4
     248:	0e 94 21 0a 	call	0x1442	; 0x1442 <__mulsf3>
     24c:	a7 01       	movw	r20, r14
     24e:	96 01       	movw	r18, r12
     250:	05 d7       	rcall	.+3594   	; 0x105c <__addsf3>
     252:	ec d7       	rcall	.+4056   	; 0x122c <__fixunssfsi>
     254:	d5 01       	movw	r26, r10
     256:	6d 93       	st	X+, r22
     258:	5d 01       	movw	r10, r26
			uint16_t reg=pwmSin[i];
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	7a 83       	std	Y+2, r23	; 0x02
     25e:	69 83       	std	Y+1, r22	; 0x01
			print16(&reg);
     260:	ce 01       	movw	r24, r28
     262:	01 96       	adiw	r24, 0x01	; 1
     264:	4b d1       	rcall	.+662    	; 0x4fc <print16>
			printf("\n");
     266:	8a e0       	ldi	r24, 0x0A	; 10
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <putchar>
	sbi(DDRH,5);//digital 8 OC4C
	//sbi(DDRH,6);//digital 9
}
void getSinTable(uint16_t sinTableSize,uint8_t *pwmSin,uint16_t sineScale)
{
	for (int i = 0; i < sinTableSize; i++)
     26e:	0f 5f       	subi	r16, 0xFF	; 255
     270:	1f 4f       	sbci	r17, 0xFF	; 255
     272:	08 15       	cp	r16, r8
     274:	19 05       	cpc	r17, r9
     276:	09 f0       	breq	.+2      	; 0x27a <getSinTable+0xe2>
     278:	bd cf       	rjmp	.-134    	; 0x1f4 <getSinTable+0x5c>
			uint16_t reg=pwmSin[i];
			print16(&reg);
			printf("\n");
		#endif
	}
}
     27a:	2a 96       	adiw	r28, 0x0a	; 10
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	f8 94       	cli
     280:	de bf       	out	0x3e, r29	; 62
     282:	0f be       	out	0x3f, r0	; 63
     284:	cd bf       	out	0x3d, r28	; 61
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	1f 91       	pop	r17
     28c:	0f 91       	pop	r16
     28e:	ff 90       	pop	r15
     290:	ef 90       	pop	r14
     292:	df 90       	pop	r13
     294:	cf 90       	pop	r12
     296:	bf 90       	pop	r11
     298:	af 90       	pop	r10
     29a:	9f 90       	pop	r9
     29c:	8f 90       	pop	r8
     29e:	7f 90       	pop	r7
     2a0:	6f 90       	pop	r6
     2a2:	5f 90       	pop	r5
     2a4:	4f 90       	pop	r4
     2a6:	08 95       	ret

000002a8 <uart_putchar>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     2a8:	cf 93       	push	r28
     2aa:	c8 2f       	mov	r28, r24
     2ac:	8a 30       	cpi	r24, 0x0A	; 10
     2ae:	11 f4       	brne	.+4      	; 0x2b4 <uart_putchar+0xc>
     2b0:	8d e0       	ldi	r24, 0x0D	; 13
     2b2:	fa df       	rcall	.-12     	; 0x2a8 <uart_putchar>
     2b4:	e0 ec       	ldi	r30, 0xC0	; 192
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	80 81       	ld	r24, Z
     2ba:	85 ff       	sbrs	r24, 5
     2bc:	fd cf       	rjmp	.-6      	; 0x2b8 <uart_putchar+0x10>
     2be:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	cf 91       	pop	r28
     2c8:	08 95       	ret

000002ca <__vector_23>:
     2ca:	1f 92       	push	r1
     2cc:	0f 92       	push	r0
     2ce:	0f b6       	in	r0, 0x3f	; 63
     2d0:	0f 92       	push	r0
     2d2:	11 24       	eor	r1, r1
     2d4:	2f 93       	push	r18
     2d6:	3f 93       	push	r19
     2d8:	8f 93       	push	r24
     2da:	9f 93       	push	r25
     2dc:	af 93       	push	r26
     2de:	bf 93       	push	r27
     2e0:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <timer0_millis>
     2e4:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <timer0_millis+0x1>
     2e8:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <timer0_millis+0x2>
     2ec:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <timer0_millis+0x3>
     2f0:	30 91 ce 02 	lds	r19, 0x02CE	; 0x8002ce <timer0_fract>
     2f4:	23 e0       	ldi	r18, 0x03	; 3
     2f6:	23 0f       	add	r18, r19
     2f8:	2d 37       	cpi	r18, 0x7D	; 125
     2fa:	20 f4       	brcc	.+8      	; 0x304 <__vector_23+0x3a>
     2fc:	01 96       	adiw	r24, 0x01	; 1
     2fe:	a1 1d       	adc	r26, r1
     300:	b1 1d       	adc	r27, r1
     302:	05 c0       	rjmp	.+10     	; 0x30e <__vector_23+0x44>
     304:	26 e8       	ldi	r18, 0x86	; 134
     306:	23 0f       	add	r18, r19
     308:	02 96       	adiw	r24, 0x02	; 2
     30a:	a1 1d       	adc	r26, r1
     30c:	b1 1d       	adc	r27, r1
     30e:	20 93 ce 02 	sts	0x02CE, r18	; 0x8002ce <timer0_fract>
     312:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <timer0_millis>
     316:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <timer0_millis+0x1>
     31a:	a0 93 d1 02 	sts	0x02D1, r26	; 0x8002d1 <timer0_millis+0x2>
     31e:	b0 93 d2 02 	sts	0x02D2, r27	; 0x8002d2 <timer0_millis+0x3>
     322:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <timer0_overflow_count>
     326:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <timer0_overflow_count+0x1>
     32a:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <timer0_overflow_count+0x2>
     32e:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <timer0_overflow_count+0x3>
     332:	01 96       	adiw	r24, 0x01	; 1
     334:	a1 1d       	adc	r26, r1
     336:	b1 1d       	adc	r27, r1
     338:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <timer0_overflow_count>
     33c:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <timer0_overflow_count+0x1>
     340:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <timer0_overflow_count+0x2>
     344:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <timer0_overflow_count+0x3>
     348:	bf 91       	pop	r27
     34a:	af 91       	pop	r26
     34c:	9f 91       	pop	r25
     34e:	8f 91       	pop	r24
     350:	3f 91       	pop	r19
     352:	2f 91       	pop	r18
     354:	0f 90       	pop	r0
     356:	0f be       	out	0x3f, r0	; 63
     358:	0f 90       	pop	r0
     35a:	1f 90       	pop	r1
     35c:	18 95       	reti

0000035e <micros>:
     35e:	3f b7       	in	r19, 0x3f	; 63
     360:	f8 94       	cli
     362:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <timer0_overflow_count>
     366:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <timer0_overflow_count+0x1>
     36a:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <timer0_overflow_count+0x2>
     36e:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <timer0_overflow_count+0x3>
     372:	26 b5       	in	r18, 0x26	; 38
     374:	a8 9b       	sbis	0x15, 0	; 21
     376:	05 c0       	rjmp	.+10     	; 0x382 <micros+0x24>
     378:	2f 3f       	cpi	r18, 0xFF	; 255
     37a:	19 f0       	breq	.+6      	; 0x382 <micros+0x24>
     37c:	01 96       	adiw	r24, 0x01	; 1
     37e:	a1 1d       	adc	r26, r1
     380:	b1 1d       	adc	r27, r1
     382:	3f bf       	out	0x3f, r19	; 63
     384:	ba 2f       	mov	r27, r26
     386:	a9 2f       	mov	r26, r25
     388:	98 2f       	mov	r25, r24
     38a:	88 27       	eor	r24, r24
     38c:	82 0f       	add	r24, r18
     38e:	91 1d       	adc	r25, r1
     390:	a1 1d       	adc	r26, r1
     392:	b1 1d       	adc	r27, r1
     394:	bc 01       	movw	r22, r24
     396:	cd 01       	movw	r24, r26
     398:	66 0f       	add	r22, r22
     39a:	77 1f       	adc	r23, r23
     39c:	88 1f       	adc	r24, r24
     39e:	99 1f       	adc	r25, r25
     3a0:	66 0f       	add	r22, r22
     3a2:	77 1f       	adc	r23, r23
     3a4:	88 1f       	adc	r24, r24
     3a6:	99 1f       	adc	r25, r25
     3a8:	08 95       	ret

000003aa <PWM_update>:
{
	PWM_update();
}
void PWM_update()//motor pwm update 
{
	U_PWM=pwmSin[U_step];
     3aa:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <__data_end>
     3ae:	f0 91 cd 02 	lds	r31, 0x02CD	; 0x8002cd <__data_end+0x1>
     3b2:	e7 51       	subi	r30, 0x17	; 23
     3b4:	fd 4f       	sbci	r31, 0xFD	; 253
     3b6:	80 81       	ld	r24, Z
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     3be:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
	V_PWM=pwmSin[V_step];
     3c2:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <V_step>
     3c6:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <V_step+0x1>
     3ca:	e7 51       	subi	r30, 0x17	; 23
     3cc:	fd 4f       	sbci	r31, 0xFD	; 253
     3ce:	80 81       	ld	r24, Z
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     3d6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
	W_PWM=pwmSin[W_step];
     3da:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <W_step>
     3de:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <W_step+0x1>
     3e2:	e7 51       	subi	r30, 0x17	; 23
     3e4:	fd 4f       	sbci	r31, 0xFD	; 253
     3e6:	80 81       	ld	r24, Z
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
     3ee:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
	U_step=U_step+incr;
     3f2:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <incr>
     3f6:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <incr+0x1>
     3fa:	40 91 cc 02 	lds	r20, 0x02CC	; 0x8002cc <__data_end>
     3fe:	50 91 cd 02 	lds	r21, 0x02CD	; 0x8002cd <__data_end+0x1>
     402:	46 0f       	add	r20, r22
     404:	57 1f       	adc	r21, r23
     406:	50 93 cd 02 	sts	0x02CD, r21	; 0x8002cd <__data_end+0x1>
     40a:	40 93 cc 02 	sts	0x02CC, r20	; 0x8002cc <__data_end>
	V_step=V_step+incr;
     40e:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <V_step>
     412:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <V_step+0x1>
     416:	26 0f       	add	r18, r22
     418:	37 1f       	adc	r19, r23
     41a:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <V_step+0x1>
     41e:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <V_step>
	W_step=W_step+incr;
     422:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <W_step>
     426:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <W_step+0x1>
     42a:	86 0f       	add	r24, r22
     42c:	97 1f       	adc	r25, r23
     42e:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <W_step+0x1>
     432:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <W_step>
	if(U_step > SINE_TABLE_SZ)  
     436:	41 3d       	cpi	r20, 0xD1	; 209
     438:	62 e0       	ldi	r22, 0x02	; 2
     43a:	56 07       	cpc	r21, r22
     43c:	2c f0       	brlt	.+10     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		U_step = 0;
     43e:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <__data_end+0x1>
     442:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <__data_end>
     446:	08 c0       	rjmp	.+16     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
	if(U_step < 0)  
     448:	55 23       	and	r21, r21
     44a:	34 f4       	brge	.+12     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		U_step = SINE_TABLE_SZ;
     44c:	40 ed       	ldi	r20, 0xD0	; 208
     44e:	52 e0       	ldi	r21, 0x02	; 2
     450:	50 93 cd 02 	sts	0x02CD, r21	; 0x8002cd <__data_end+0x1>
     454:	40 93 cc 02 	sts	0x02CC, r20	; 0x8002cc <__data_end>
	
	if(V_step > SINE_TABLE_SZ)  
     458:	21 3d       	cpi	r18, 0xD1	; 209
     45a:	42 e0       	ldi	r20, 0x02	; 2
     45c:	34 07       	cpc	r19, r20
     45e:	2c f0       	brlt	.+10     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		V_step = 0;
     460:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <V_step+0x1>
     464:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <V_step>
     468:	08 c0       	rjmp	.+16     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
	if(V_step < 0)  
     46a:	33 23       	and	r19, r19
     46c:	34 f4       	brge	.+12     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		V_step = SINE_TABLE_SZ;
     46e:	20 ed       	ldi	r18, 0xD0	; 208
     470:	32 e0       	ldi	r19, 0x02	; 2
     472:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <V_step+0x1>
     476:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <V_step>
	
	if(W_step > SINE_TABLE_SZ)  
     47a:	81 3d       	cpi	r24, 0xD1	; 209
     47c:	62 e0       	ldi	r22, 0x02	; 2
     47e:	96 07       	cpc	r25, r22
     480:	2c f0       	brlt	.+10     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		W_step = 0;
     482:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <W_step+0x1>
     486:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <W_step>
     48a:	08 c0       	rjmp	.+16     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
	if(W_step < 0) 
     48c:	99 23       	and	r25, r25
     48e:	34 f4       	brge	.+12     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		W_step = SINE_TABLE_SZ;
     490:	80 ed       	ldi	r24, 0xD0	; 208
     492:	92 e0       	ldi	r25, 0x02	; 2
     494:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <W_step+0x1>
     498:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <W_step>
	//_delay_us(100);
	OCR5A=pwm_delay;
     49c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <pwm_delay>
     4a0:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <pwm_delay+0x1>
     4a4:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     4a8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     4ac:	08 95       	ret

000004ae <__vector_47>:
	SREG = oldSREG;

	return m;
}
ISR(TIMER5_COMPA_vect)//motor update interrupt routine
{
     4ae:	1f 92       	push	r1
     4b0:	0f 92       	push	r0
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	0f 92       	push	r0
     4b6:	11 24       	eor	r1, r1
     4b8:	0b b6       	in	r0, 0x3b	; 59
     4ba:	0f 92       	push	r0
     4bc:	2f 93       	push	r18
     4be:	3f 93       	push	r19
     4c0:	4f 93       	push	r20
     4c2:	5f 93       	push	r21
     4c4:	6f 93       	push	r22
     4c6:	7f 93       	push	r23
     4c8:	8f 93       	push	r24
     4ca:	9f 93       	push	r25
     4cc:	af 93       	push	r26
     4ce:	bf 93       	push	r27
     4d0:	ef 93       	push	r30
	PWM_update();
     4d2:	ff 93       	push	r31
}
     4d4:	6a df       	rcall	.-300    	; 0x3aa <PWM_update>
     4d6:	ff 91       	pop	r31
     4d8:	ef 91       	pop	r30
     4da:	bf 91       	pop	r27
     4dc:	af 91       	pop	r26
     4de:	9f 91       	pop	r25
     4e0:	8f 91       	pop	r24
     4e2:	7f 91       	pop	r23
     4e4:	6f 91       	pop	r22
     4e6:	5f 91       	pop	r21
     4e8:	4f 91       	pop	r20
     4ea:	3f 91       	pop	r19
     4ec:	2f 91       	pop	r18
     4ee:	0f 90       	pop	r0
     4f0:	0b be       	out	0x3b, r0	; 59
     4f2:	0f 90       	pop	r0
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	0f 90       	pop	r0
     4f8:	1f 90       	pop	r1
     4fa:	18 95       	reti

000004fc <print16>:
	OCR5A=pwm_delay;
}
void print16(int16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
     508:	2a 97       	sbiw	r28, 0x0a	; 10
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     514:	4a e0       	ldi	r20, 0x0A	; 10
     516:	8e 01       	movw	r16, r28
     518:	0f 5f       	subi	r16, 0xFF	; 255
     51a:	1f 4f       	sbci	r17, 0xFF	; 255
     51c:	b8 01       	movw	r22, r16
     51e:	fc 01       	movw	r30, r24
     520:	80 81       	ld	r24, Z
     522:	91 81       	ldd	r25, Z+1	; 0x01
     524:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     528:	1f 93       	push	r17
     52a:	0f 93       	push	r16
     52c:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <printf>
	//printf("\n");
}
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	2a 96       	adiw	r28, 0x0a	; 10
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	de bf       	out	0x3e, r29	; 62
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	cd bf       	out	0x3d, r28	; 61
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	08 95       	ret

0000054a <print16ln>:

void print16ln(int16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	2a 97       	sbiw	r28, 0x0a	; 10
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	0f be       	out	0x3f, r0	; 63
     560:	cd bf       	out	0x3d, r28	; 61
     562:	4a e0       	ldi	r20, 0x0A	; 10
     564:	8e 01       	movw	r16, r28
     566:	0f 5f       	subi	r16, 0xFF	; 255
     568:	1f 4f       	sbci	r17, 0xFF	; 255
     56a:	b8 01       	movw	r22, r16
     56c:	fc 01       	movw	r30, r24
     56e:	80 81       	ld	r24, Z
     570:	91 81       	ldd	r25, Z+1	; 0x01
     572:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     576:	1f 93       	push	r17
     578:	0f 93       	push	r16
     57a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <printf>
	printf("\n");
     57e:	8a e0       	ldi	r24, 0x0A	; 10
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <putchar>
}
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	2a 96       	adiw	r28, 0x0a	; 10
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	de bf       	out	0x3e, r29	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	cd bf       	out	0x3d, r28	; 61
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	08 95       	ret

000005a0 <main>:
uint8_t pwmSin[SINE_TABLE_SZ];
//uint8_t pwmSin[] = {128, 132, 136, 140, 143, 147, 151, 155, 159, 162, 166, 170, 174, 178, 181, 185, 189, 192, 196, 200, 203, 207, 211, 214, 218, 221, 225, 228, 232, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 248, 249, 250, 250, 251, 252, 252, 253, 253, 253, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 253, 253, 253, 252, 252, 251, 250, 250, 249, 248, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 248, 249, 250, 250, 251, 252, 252, 253, 253, 253, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 253, 253, 253, 252, 252, 251, 250, 250, 249, 248, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 235, 232, 228, 225, 221, 218, 214, 211, 207, 203, 200, 196, 192, 189, 185, 181, 178, 174, 170, 166, 162, 159, 155, 151, 147, 143, 140, 136, 132, 128, 124, 120, 116, 113, 109, 105, 101, 97, 94, 90, 86, 82, 78, 75, 71, 67, 64, 60, 56, 53, 49, 45, 42, 38, 35, 31, 28, 24, 21, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 8, 7, 6, 6, 5, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 8, 7, 6, 6, 5, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 24, 28, 31, 35, 38, 42, 45, 49, 53, 56, 60, 64, 67, 71, 75, 78, 82, 86, 90, 94, 97, 101, 105, 109, 113, 116, 120, 124};

/*-----------------------------------start of main----------------------------------*/
int main(void)
{				
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	e2 97       	sbiw	r28, 0x32	; 50
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	cd bf       	out	0x3d, r28	; 61
		
	cli();
	init_gpio();
		#ifdef GYRO
			i2c_init();
     5b4:	f8 94       	cli
		#endif
	USART_Init(MY_UBRR);
     5b6:	e4 dd       	rcall	.-1080   	; 0x180 <init_gpio>
     5b8:	8c d4       	rcall	.+2328   	; 0xed2 <i2c_init>
     5ba:	80 e1       	ldi	r24, 0x10	; 16
	uart_str = fdevopen(uart_putchar, NULL);	
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	3a d5       	rcall	.+2676   	; 0x1034 <USART_Init>
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	84 e5       	ldi	r24, 0x54	; 84
     5c6:	91 e0       	ldi	r25, 0x01	; 1
	setup_timer0();
	Enable_timer0_overflow_interrupt();//micros
     5c8:	0e 94 a2 0b 	call	0x1744	; 0x1744 <fdevopen>
	setup_timer4();//pwm
     5cc:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <uart_str+0x1>
	setup_timer5();
     5d0:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <uart_str>
	Enable_timer5_compare_interrupt();//motor
     5d4:	71 d4       	rcall	.+2274   	; 0xeb8 <setup_timer0>
     5d6:	77 d4       	rcall	.+2286   	; 0xec6 <Enable_timer0_overflow_interrupt>
	OCR5A=4000;
     5d8:	4c d4       	rcall	.+2200   	; 0xe72 <setup_timer4>
     5da:	5f d4       	rcall	.+2238   	; 0xe9a <setup_timer5>
     5dc:	67 d4       	rcall	.+2254   	; 0xeac <Enable_timer5_compare_interrupt>
     5de:	80 ea       	ldi	r24, 0xA0	; 160
     5e0:	9f e0       	ldi	r25, 0x0F	; 15
     5e2:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
		double acc_total_vector=0;
		double angle_pitch_acc=0;
		double angle_roll_acc=0;
		bool set_gyro_angles=false;
			#ifdef CALIBERATED_DATA
				int32_t gyroX_calib_=0;
     5e6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     5ea:	1d 86       	std	Y+13, r1	; 0x0d
				int32_t gyroY_calib_=0;
     5ec:	1e 86       	std	Y+14, r1	; 0x0e
     5ee:	1f 86       	std	Y+15, r1	; 0x0f
     5f0:	18 8a       	std	Y+16, r1	; 0x10
     5f2:	19 8a       	std	Y+17, r1	; 0x11
				int32_t gyroZ_calib_=0;
     5f4:	1a 8a       	std	Y+18, r1	; 0x12
     5f6:	1b 8a       	std	Y+19, r1	; 0x13
     5f8:	1c 8a       	std	Y+20, r1	; 0x14
				int32_t accelY_calib_=0;
				int32_t accelZ_calib_=0;				
				//uint16_t gyroX_angle_calib=0; 
				uint16_t gyroY_angle_calib=0; 
				//uint16_t gyroZ_angle_calib=0; 				
				mpu6050_calibrate_gyro(&gyroX_calib_,&gyroY_calib_,&gyroZ_calib_);
     5fa:	1d 8a       	std	Y+21, r1	; 0x15
     5fc:	1e 8a       	std	Y+22, r1	; 0x16
     5fe:	1f 8a       	std	Y+23, r1	; 0x17
     600:	18 8e       	std	Y+24, r1	; 0x18
     602:	ae 01       	movw	r20, r28
     604:	4b 5e       	subi	r20, 0xEB	; 235
     606:	5f 4f       	sbci	r21, 0xFF	; 255
     608:	be 01       	movw	r22, r28
     60a:	6f 5e       	subi	r22, 0xEF	; 239
				int16_t gyroX_calib=gyroX_calib_;
     60c:	7f 4f       	sbci	r23, 0xFF	; 255
     60e:	ce 01       	movw	r24, r28
				int16_t gyroY_calib=gyroY_calib_;
     610:	0d 96       	adiw	r24, 0x0d	; 13
     612:	89 d2       	rcall	.+1298   	; 0xb26 <mpu6050_calibrate_gyro>
				int16_t gyroZ_calib=gyroZ_calib_;
     614:	2d 84       	ldd	r2, Y+13	; 0x0d
     616:	3e 84       	ldd	r3, Y+14	; 0x0e
				int16_t accelX_calib=accelX_calib_;
				int16_t accelY_calib=accelY_calib_;
				int16_t accelZ_calib=accelZ_calib_;				
				//mpu6050_calibrate_accel(&accelX_calib,&accelY_calib,&accelZ_calib);
			#endif
		mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV,7);
     618:	29 89       	ldd	r18, Y+17	; 0x11
     61a:	3a 89       	ldd	r19, Y+18	; 0x12
     61c:	38 ab       	std	Y+48, r19	; 0x30
		mpu6050_writeByte(MPU6050_RA_CONFIG,0x00);
     61e:	2f a7       	std	Y+47, r18	; 0x2f
     620:	8d 89       	ldd	r24, Y+21	; 0x15
     622:	9e 89       	ldd	r25, Y+22	; 0x16
		mpu6050_writeByte(MPU6050_RA_GYRO_CONFIG,0x08);//gyro sensitivity set to 500 o/s
     624:	9a ab       	std	Y+50, r25	; 0x32
     626:	89 ab       	std	Y+49, r24	; 0x31
     628:	67 e0       	ldi	r22, 0x07	; 7
		mpu6050_writeByte(MPU6050_RA_ACCEL_CONFIG,0x10);//accel sensitivity -/+ 8g
     62a:	89 e1       	ldi	r24, 0x19	; 25
     62c:	5b d3       	rcall	.+1718   	; 0xce4 <mpu6050_writeByte>
     62e:	60 e0       	ldi	r22, 0x00	; 0
		mpu6050_writeByte(MPU6050_RA_PWR_MGMT_1,0x01);
     630:	8a e1       	ldi	r24, 0x1A	; 26
     632:	58 d3       	rcall	.+1712   	; 0xce4 <mpu6050_writeByte>
     634:	68 e0       	ldi	r22, 0x08	; 8
     636:	8b e1       	ldi	r24, 0x1B	; 27
	#endif
	/*----------------------end mpu definition ----------------------*/
	
	/*----------------------------motor init-------------------------*/
	getSinTable(SINE_TABLE_SZ,pwmSin,sinScale);
     638:	55 d3       	rcall	.+1706   	; 0xce4 <mpu6050_writeByte>
     63a:	60 e1       	ldi	r22, 0x10	; 16
     63c:	8c e1       	ldi	r24, 0x1C	; 28
     63e:	52 d3       	rcall	.+1700   	; 0xce4 <mpu6050_writeByte>
     640:	61 e0       	ldi	r22, 0x01	; 1
     642:	8b e6       	ldi	r24, 0x6B	; 107
     644:	4f d3       	rcall	.+1694   	; 0xce4 <mpu6050_writeByte>
	printf("U_step_predefine="); print16ln(&U_step);
     646:	4f e7       	ldi	r20, 0x7F	; 127
     648:	50 e0       	ldi	r21, 0x00	; 0
     64a:	69 ee       	ldi	r22, 0xE9	; 233
     64c:	72 e0       	ldi	r23, 0x02	; 2
     64e:	80 ed       	ldi	r24, 0xD0	; 208
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	a2 dd       	rcall	.-1212   	; 0x198 <getSinTable>
     654:	80 e1       	ldi	r24, 0x10	; 16
     656:	92 e0       	ldi	r25, 0x02	; 2
	printf("  V_step_predefine="); print16ln(&V_step);
     658:	9f 93       	push	r25
     65a:	8f 93       	push	r24
     65c:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <printf>
     660:	8c ec       	ldi	r24, 0xCC	; 204
     662:	92 e0       	ldi	r25, 0x02	; 2
     664:	72 df       	rcall	.-284    	; 0x54a <print16ln>
     666:	82 e2       	ldi	r24, 0x22	; 34
	printf("  W_step_predefine="); print16ln(&W_step);   
     668:	92 e0       	ldi	r25, 0x02	; 2
     66a:	9f 93       	push	r25
     66c:	8f 93       	push	r24
     66e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <printf>
     672:	88 e0       	ldi	r24, 0x08	; 8
     674:	92 e0       	ldi	r25, 0x02	; 2
     676:	69 df       	rcall	.-302    	; 0x54a <print16ln>
     678:	86 e3       	ldi	r24, 0x36	; 54
     67a:	92 e0       	ldi	r25, 0x02	; 2
	USART_Transmit(0xfe); 
     67c:	9f 93       	push	r25
     67e:	8f 93       	push	r24
     680:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <printf>
	sei();
     684:	86 e0       	ldi	r24, 0x06	; 6
     686:	92 e0       	ldi	r25, 0x02	; 2
     688:	60 df       	rcall	.-320    	; 0x54a <print16ln>
     68a:	8e ef       	ldi	r24, 0xFE	; 254
     68c:	de d4       	rcall	.+2492   	; 0x104a <USART_Transmit>
     68e:	78 94       	sei
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		double angle_pitch=0;
		double angle_roll=0;
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
		int16_t gyro_y;
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		double angle_pitch=0;
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	1f 8e       	std	Y+31, r1	; 0x1f
	USART_Transmit(0xfe); 
	sei();
    while (1) /*---------------------------while(1)---------------------------------*/
    {
		#ifdef GYRO
    		mpu6050_getRawData(&accel_x,&accel_y,&accel_z,&gyro_x,&gyro_y,&gyro_z);//15us to do
     69e:	18 a2       	std	Y+32, r1	; 0x20
     6a0:	19 a2       	std	Y+33, r1	; 0x21
     6a2:	1a a2       	std	Y+34, r1	; 0x22
     6a4:	1b a2       	std	Y+35, r1	; 0x23
     6a6:	1c a2       	std	Y+36, r1	; 0x24
     6a8:	1d a2       	std	Y+37, r1	; 0x25
     6aa:	1e a2       	std	Y+38, r1	; 0x26
     6ac:	9e 01       	movw	r18, r28
     6ae:	2b 5f       	subi	r18, 0xFB	; 251
     6b0:	3f 4f       	sbci	r19, 0xFF	; 255
     6b2:	79 01       	movw	r14, r18
     6b4:	8e 01       	movw	r16, r28
     6b6:	0d 5f       	subi	r16, 0xFD	; 253
     6b8:	1f 4f       	sbci	r17, 0xFF	; 255
     6ba:	24 50       	subi	r18, 0x04	; 4
     6bc:	31 09       	sbc	r19, r1
     6be:	ae 01       	movw	r20, r28
     6c0:	45 5f       	subi	r20, 0xF5	; 245
     6c2:	5f 4f       	sbci	r21, 0xFF	; 255
		#ifdef GYRO
			#ifdef CALIBERATED_DATA
				accX;
				accY;
				accZ;
				grX;
     6c4:	be 01       	movw	r22, r28
     6c6:	67 5f       	subi	r22, 0xF7	; 247
     6c8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ca:	ce 01       	movw	r24, r28
     6cc:	07 96       	adiw	r24, 0x07	; 7
				grY;
     6ce:	66 d3       	rcall	.+1740   	; 0xd9c <mpu6050_getRawData>
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	9a 81       	ldd	r25, Y+2	; 0x02
     6d4:	82 19       	sub	r24, r2
     6d6:	93 09       	sbc	r25, r3
     6d8:	9a 83       	std	Y+2, r25	; 0x02
				grZ;
     6da:	89 83       	std	Y+1, r24	; 0x01
     6dc:	8b 81       	ldd	r24, Y+3	; 0x03
     6de:	9c 81       	ldd	r25, Y+4	; 0x04
     6e0:	2f a5       	ldd	r18, Y+47	; 0x2f
     6e2:	38 a9       	ldd	r19, Y+48	; 0x30
     6e4:	82 1b       	sub	r24, r18
     6e6:	93 0b       	sbc	r25, r19
			printf("  ");
			printf("\n");
			/*--------end------*/			
		#else
			
			double dt = (double)((micros() - timer1));
     6e8:	9c 83       	std	Y+4, r25	; 0x04
     6ea:	8b 83       	std	Y+3, r24	; 0x03
     6ec:	8d 81       	ldd	r24, Y+5	; 0x05
     6ee:	9e 81       	ldd	r25, Y+6	; 0x06
     6f0:	29 a9       	ldd	r18, Y+49	; 0x31
     6f2:	3a a9       	ldd	r19, Y+50	; 0x32
     6f4:	82 1b       	sub	r24, r18
     6f6:	93 0b       	sbc	r25, r19
     6f8:	9e 83       	std	Y+6, r25	; 0x06
			timer1=micros();
     6fa:	8d 83       	std	Y+5, r24	; 0x05
     6fc:	30 de       	rcall	.-928    	; 0x35e <micros>
     6fe:	64 19       	sub	r22, r4
     700:	75 09       	sbc	r23, r5
			//double hz=1000000/dt;
			double pop=1/(65.5*1000000/dt);
     702:	86 09       	sbc	r24, r6
     704:	97 09       	sbc	r25, r7
     706:	be d5       	rcall	.+2940   	; 0x1284 <__floatunsisf>
     708:	6b 01       	movw	r12, r22
     70a:	7c 01       	movw	r14, r24
     70c:	28 de       	rcall	.-944    	; 0x35e <micros>
     70e:	2b 01       	movw	r4, r22
     710:	3c 01       	movw	r6, r24
     712:	a7 01       	movw	r20, r14
     714:	96 01       	movw	r18, r12
     716:	68 ed       	ldi	r22, 0xD8	; 216
     718:	7c ed       	ldi	r23, 0xDC	; 220
     71a:	89 e7       	ldi	r24, 0x79	; 121
     71c:	9c e4       	ldi	r25, 0x4C	; 76
     71e:	19 d5       	rcall	.+2610   	; 0x1152 <__divsf3>
			//if(loop_bool)
			//{
			//	gyroYrate-=tpel;
			//	loop_bool=false;
			//}
			if (!loop_bool)
     720:	9b 01       	movw	r18, r22
     722:	ac 01       	movw	r20, r24
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	80 e8       	ldi	r24, 0x80	; 128
     72a:	9f e3       	ldi	r25, 0x3F	; 63
			{
				angle_pitch += gyroXrate; //Calculate the traveled pitch angle and add this to the angle_pitch variable
     72c:	12 d5       	rcall	.+2596   	; 0x1152 <__divsf3>
     72e:	6b 01       	movw	r12, r22
     730:	7c 01       	movw	r14, r24
     732:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <loop_bool>
     736:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <loop_bool+0x1>
     73a:	89 2b       	or	r24, r25
     73c:	59 f5       	brne	.+86     	; 0x794 <main+0x1f4>
     73e:	69 81       	ldd	r22, Y+1	; 0x01
     740:	7a 81       	ldd	r23, Y+2	; 0x02
     742:	07 2e       	mov	r0, r23
     744:	00 0c       	add	r0, r0
     746:	88 0b       	sbc	r24, r24
     748:	99 0b       	sbc	r25, r25
     74a:	9e d5       	rcall	.+2876   	; 0x1288 <__floatsisf>
     74c:	a7 01       	movw	r20, r14
     74e:	96 01       	movw	r18, r12
     750:	78 d6       	rcall	.+3312   	; 0x1442 <__mulsf3>
     752:	9b 01       	movw	r18, r22
     754:	ac 01       	movw	r20, r24
				angle_roll += gyroYrate;  //Calculate the traveled roll angle and add this to the angle_roll variable			
     756:	6b a1       	ldd	r22, Y+35	; 0x23
     758:	7c a1       	ldd	r23, Y+36	; 0x24
     75a:	8d a1       	ldd	r24, Y+37	; 0x25
     75c:	9e a1       	ldd	r25, Y+38	; 0x26
     75e:	7e d4       	rcall	.+2300   	; 0x105c <__addsf3>
     760:	6b a3       	std	Y+35, r22	; 0x23
     762:	7c a3       	std	Y+36, r23	; 0x24
     764:	8d a3       	std	Y+37, r24	; 0x25
     766:	9e a3       	std	Y+38, r25	; 0x26
     768:	6b 81       	ldd	r22, Y+3	; 0x03
     76a:	7c 81       	ldd	r23, Y+4	; 0x04
     76c:	07 2e       	mov	r0, r23
     76e:	00 0c       	add	r0, r0
     770:	88 0b       	sbc	r24, r24
     772:	99 0b       	sbc	r25, r25
     774:	89 d5       	rcall	.+2834   	; 0x1288 <__floatsisf>
     776:	a7 01       	movw	r20, r14
     778:	96 01       	movw	r18, r12
     77a:	63 d6       	rcall	.+3270   	; 0x1442 <__mulsf3>
     77c:	9b 01       	movw	r18, r22
     77e:	ac 01       	movw	r20, r24
			}
			else
			{
				loop_bool=false;
     780:	6f 8d       	ldd	r22, Y+31	; 0x1f
     782:	78 a1       	ldd	r23, Y+32	; 0x20
     784:	89 a1       	ldd	r24, Y+33	; 0x21
			}					
					//0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
			pop*=(3.142/180);	
			angle_pitch += angle_roll * sin(gyro_z * pop);               //If the IMU has yawed transfer the roll angle to the pitch angel
     786:	9a a1       	ldd	r25, Y+34	; 0x22
     788:	69 d4       	rcall	.+2258   	; 0x105c <__addsf3>
     78a:	6f 8f       	std	Y+31, r22	; 0x1f
     78c:	78 a3       	std	Y+32, r23	; 0x20
     78e:	89 a3       	std	Y+33, r24	; 0x21
     790:	9a a3       	std	Y+34, r25	; 0x22
     792:	04 c0       	rjmp	.+8      	; 0x79c <main+0x1fc>
     794:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <loop_bool+0x1>
     798:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <loop_bool>
     79c:	6d 81       	ldd	r22, Y+5	; 0x05
     79e:	7e 81       	ldd	r23, Y+6	; 0x06
     7a0:	07 2e       	mov	r0, r23
     7a2:	00 0c       	add	r0, r0
     7a4:	88 0b       	sbc	r24, r24
     7a6:	99 0b       	sbc	r25, r25
     7a8:	6f d5       	rcall	.+2782   	; 0x1288 <__floatsisf>
     7aa:	4b 01       	movw	r8, r22
     7ac:	5c 01       	movw	r10, r24
     7ae:	24 ef       	ldi	r18, 0xF4	; 244
     7b0:	3e ef       	ldi	r19, 0xFE	; 254
     7b2:	4e e8       	ldi	r20, 0x8E	; 142
     7b4:	5c e3       	ldi	r21, 0x3C	; 60
     7b6:	c7 01       	movw	r24, r14
     7b8:	b6 01       	movw	r22, r12
     7ba:	43 d6       	rcall	.+3206   	; 0x1442 <__mulsf3>
     7bc:	9b 01       	movw	r18, r22
     7be:	ac 01       	movw	r20, r24
     7c0:	c5 01       	movw	r24, r10
     7c2:	b4 01       	movw	r22, r8
     7c4:	3e d6       	rcall	.+3196   	; 0x1442 <__mulsf3>
     7c6:	a0 d6       	rcall	.+3392   	; 0x1508 <sin>
     7c8:	6b 01       	movw	r12, r22
     7ca:	7c 01       	movw	r14, r24
     7cc:	9b 01       	movw	r18, r22
     7ce:	ac 01       	movw	r20, r24
     7d0:	6f 8d       	ldd	r22, Y+31	; 0x1f
     7d2:	78 a1       	ldd	r23, Y+32	; 0x20
     7d4:	89 a1       	ldd	r24, Y+33	; 0x21
     7d6:	9a a1       	ldd	r25, Y+34	; 0x22
     7d8:	34 d6       	rcall	.+3176   	; 0x1442 <__mulsf3>
			angle_roll -= angle_pitch * sin(gyro_z * pop);               //If the IMU has yawed transfer the pitch angle to the roll angel
     7da:	9b 01       	movw	r18, r22
     7dc:	ac 01       	movw	r20, r24
     7de:	6b a1       	ldd	r22, Y+35	; 0x23
     7e0:	7c a1       	ldd	r23, Y+36	; 0x24
     7e2:	8d a1       	ldd	r24, Y+37	; 0x25
     7e4:	9e a1       	ldd	r25, Y+38	; 0x26
     7e6:	3a d4       	rcall	.+2164   	; 0x105c <__addsf3>
     7e8:	6b a3       	std	Y+35, r22	; 0x23
     7ea:	7c a3       	std	Y+36, r23	; 0x24
     7ec:	8d a3       	std	Y+37, r24	; 0x25
     7ee:	9e a3       	std	Y+38, r25	; 0x26
     7f0:	9b 01       	movw	r18, r22
     7f2:	ac 01       	movw	r20, r24
     7f4:	c7 01       	movw	r24, r14
     7f6:	b6 01       	movw	r22, r12
			
			double temporar_accel_x=accel_x/100;
     7f8:	24 d6       	rcall	.+3144   	; 0x1442 <__mulsf3>
     7fa:	9b 01       	movw	r18, r22
     7fc:	ac 01       	movw	r20, r24
     7fe:	6f 8d       	ldd	r22, Y+31	; 0x1f
     800:	78 a1       	ldd	r23, Y+32	; 0x20
     802:	89 a1       	ldd	r24, Y+33	; 0x21
     804:	9a a1       	ldd	r25, Y+34	; 0x22
     806:	29 d4       	rcall	.+2130   	; 0x105a <__subsf3>
     808:	6f 8f       	std	Y+31, r22	; 0x1f
     80a:	78 a3       	std	Y+32, r23	; 0x20
     80c:	89 a3       	std	Y+33, r24	; 0x21
     80e:	9a a3       	std	Y+34, r25	; 0x22
     810:	0f 81       	ldd	r16, Y+7	; 0x07
			double temporar_accel_y=accel_y/100;
     812:	18 85       	ldd	r17, Y+8	; 0x08
     814:	c8 01       	movw	r24, r16
     816:	64 e6       	ldi	r22, 0x64	; 100
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	0c d7       	rcall	.+3608   	; 0x1634 <__divmodhi4>
     81c:	07 2e       	mov	r0, r23
     81e:	00 0c       	add	r0, r0
     820:	88 0b       	sbc	r24, r24
     822:	99 0b       	sbc	r25, r25
     824:	31 d5       	rcall	.+2658   	; 0x1288 <__floatsisf>
     826:	4b 01       	movw	r8, r22
     828:	5c 01       	movw	r10, r24
     82a:	89 85       	ldd	r24, Y+9	; 0x09
			double temporar_accel_z=accel_z/100;
     82c:	9a 85       	ldd	r25, Y+10	; 0x0a
     82e:	64 e6       	ldi	r22, 0x64	; 100
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	00 d7       	rcall	.+3584   	; 0x1634 <__divmodhi4>
     834:	07 2e       	mov	r0, r23
     836:	00 0c       	add	r0, r0
     838:	88 0b       	sbc	r24, r24
     83a:	99 0b       	sbc	r25, r25
     83c:	25 d5       	rcall	.+2634   	; 0x1288 <__floatsisf>
     83e:	6f a3       	std	Y+39, r22	; 0x27
     840:	78 a7       	std	Y+40, r23	; 0x28
			
			acc_total_vector = sqrt((temporar_accel_x*temporar_accel_x)+(temporar_accel_y*temporar_accel_y)+(temporar_accel_z*temporar_accel_z));  //Calculate the total accelerometer vector
     842:	89 a7       	std	Y+41, r24	; 0x29
     844:	9a a7       	std	Y+42, r25	; 0x2a
     846:	8b 85       	ldd	r24, Y+11	; 0x0b
     848:	9c 85       	ldd	r25, Y+12	; 0x0c
     84a:	64 e6       	ldi	r22, 0x64	; 100
     84c:	70 e0       	ldi	r23, 0x00	; 0
     84e:	f2 d6       	rcall	.+3556   	; 0x1634 <__divmodhi4>
     850:	07 2e       	mov	r0, r23
     852:	00 0c       	add	r0, r0
     854:	88 0b       	sbc	r24, r24
     856:	99 0b       	sbc	r25, r25
     858:	17 d5       	rcall	.+2606   	; 0x1288 <__floatsisf>
     85a:	6b 01       	movw	r12, r22
     85c:	7c 01       	movw	r14, r24
     85e:	a5 01       	movw	r20, r10
     860:	94 01       	movw	r18, r8
     862:	c5 01       	movw	r24, r10
     864:	b4 01       	movw	r22, r8
     866:	ed d5       	rcall	.+3034   	; 0x1442 <__mulsf3>
     868:	6b a7       	std	Y+43, r22	; 0x2b
     86a:	7c a7       	std	Y+44, r23	; 0x2c
     86c:	8d a7       	std	Y+45, r24	; 0x2d
     86e:	9e a7       	std	Y+46, r25	; 0x2e
     870:	2f a1       	ldd	r18, Y+39	; 0x27
     872:	38 a5       	ldd	r19, Y+40	; 0x28
     874:	49 a5       	ldd	r20, Y+41	; 0x29
     876:	5a a5       	ldd	r21, Y+42	; 0x2a
     878:	ca 01       	movw	r24, r20
     87a:	b9 01       	movw	r22, r18
     87c:	e2 d5       	rcall	.+3012   	; 0x1442 <__mulsf3>
     87e:	9b 01       	movw	r18, r22
     880:	ac 01       	movw	r20, r24
     882:	6b a5       	ldd	r22, Y+43	; 0x2b
     884:	7c a5       	ldd	r23, Y+44	; 0x2c
     886:	8d a5       	ldd	r24, Y+45	; 0x2d
     888:	9e a5       	ldd	r25, Y+46	; 0x2e
     88a:	e8 d3       	rcall	.+2000   	; 0x105c <__addsf3>
     88c:	6b a7       	std	Y+43, r22	; 0x2b
     88e:	7c a7       	std	Y+44, r23	; 0x2c
     890:	8d a7       	std	Y+45, r24	; 0x2d
     892:	9e a7       	std	Y+46, r25	; 0x2e
     894:	a5 01       	movw	r20, r10
     896:	94 01       	movw	r18, r8
     898:	c5 01       	movw	r24, r10
     89a:	b4 01       	movw	r22, r8
     89c:	d2 d5       	rcall	.+2980   	; 0x1442 <__mulsf3>
     89e:	4b 01       	movw	r8, r22
     8a0:	5c 01       	movw	r10, r24
     8a2:	2f a1       	ldd	r18, Y+39	; 0x27
     8a4:	38 a5       	ldd	r19, Y+40	; 0x28
     8a6:	49 a5       	ldd	r20, Y+41	; 0x29
     8a8:	5a a5       	ldd	r21, Y+42	; 0x2a
     8aa:	ca 01       	movw	r24, r20
     8ac:	b9 01       	movw	r22, r18
     8ae:	c9 d5       	rcall	.+2962   	; 0x1442 <__mulsf3>
					//57.296 = 1 / (3.142 / 180) The Arduino asin function is in radians
			acc_total_vector*=100;
		    angle_pitch_acc = asin((double)accel_y/acc_total_vector)* 57.296;       //Calculate the pitch angle
			angle_roll_acc = asin((double)accel_x/acc_total_vector)* -57.296;       //Calculate the roll angle
     8b0:	9b 01       	movw	r18, r22
     8b2:	ac 01       	movw	r20, r24
     8b4:	c5 01       	movw	r24, r10
     8b6:	b4 01       	movw	r22, r8
     8b8:	d1 d3       	rcall	.+1954   	; 0x105c <__addsf3>
     8ba:	4b 01       	movw	r8, r22
     8bc:	5c 01       	movw	r10, r24
     8be:	a7 01       	movw	r20, r14
     8c0:	96 01       	movw	r18, r12
     8c2:	c7 01       	movw	r24, r14
     8c4:	b6 01       	movw	r22, r12
     8c6:	bd d5       	rcall	.+2938   	; 0x1442 <__mulsf3>
     8c8:	9b 01       	movw	r18, r22
     8ca:	ac 01       	movw	r20, r24
     8cc:	c5 01       	movw	r24, r10
     8ce:	b4 01       	movw	r22, r8
     8d0:	c5 d3       	rcall	.+1930   	; 0x105c <__addsf3>
     8d2:	24 d6       	rcall	.+3144   	; 0x151c <sqrt>
     8d4:	6b 01       	movw	r12, r22
     8d6:	7c 01       	movw	r14, r24
     8d8:	b8 01       	movw	r22, r16
     8da:	11 0f       	add	r17, r17
     8dc:	88 0b       	sbc	r24, r24
					
			uint16_t reg=angle_pitch;
     8de:	99 0b       	sbc	r25, r25
     8e0:	d3 d4       	rcall	.+2470   	; 0x1288 <__floatsisf>
     8e2:	4b 01       	movw	r8, r22
     8e4:	5c 01       	movw	r10, r24
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	48 ec       	ldi	r20, 0xC8	; 200
			printf(" ");
     8ec:	52 e4       	ldi	r21, 0x42	; 66
     8ee:	c7 01       	movw	r24, r14
			printf("gyroX_angle= ");
     8f0:	b6 01       	movw	r22, r12
     8f2:	a7 d5       	rcall	.+2894   	; 0x1442 <__mulsf3>
     8f4:	9b 01       	movw	r18, r22
     8f6:	ac 01       	movw	r20, r24
			print16(&reg);
     8f8:	c5 01       	movw	r24, r10
     8fa:	b4 01       	movw	r22, r8
     8fc:	2a d4       	rcall	.+2132   	; 0x1152 <__divsf3>
			reg=angle_roll;
     8fe:	12 d4       	rcall	.+2084   	; 0x1124 <asin>
     900:	6b 01       	movw	r12, r22
     902:	7c 01       	movw	r14, r24
     904:	6b a1       	ldd	r22, Y+35	; 0x23
     906:	7c a1       	ldd	r23, Y+36	; 0x24
			printf(" ");
     908:	8d a1       	ldd	r24, Y+37	; 0x25
     90a:	9e a1       	ldd	r25, Y+38	; 0x26
     90c:	8f d4       	rcall	.+2334   	; 0x122c <__fixunssfsi>
     90e:	7e 8f       	std	Y+30, r23	; 0x1e
			printf("gyroY_angle= ");
     910:	6d 8f       	std	Y+29, r22	; 0x1d
     912:	80 e2       	ldi	r24, 0x20	; 32
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	73 d7       	rcall	.+3814   	; 0x17fe <putchar>
     918:	8a e4       	ldi	r24, 0x4A	; 74
     91a:	92 e0       	ldi	r25, 0x02	; 2
			print16(&reg);
     91c:	9f 93       	push	r25
     91e:	8f 93       	push	r24
     920:	5b d7       	rcall	.+3766   	; 0x17d8 <printf>
     922:	ce 01       	movw	r24, r28
			
			double xff=angle_roll_acc;
			double final_angleY=(angle_roll*0.996)+(xff*0.004);
     924:	4d 96       	adiw	r24, 0x1d	; 29
     926:	ea dd       	rcall	.-1068   	; 0x4fc <print16>
     928:	6f 8d       	ldd	r22, Y+31	; 0x1f
     92a:	78 a1       	ldd	r23, Y+32	; 0x20
     92c:	89 a1       	ldd	r24, Y+33	; 0x21
     92e:	9a a1       	ldd	r25, Y+34	; 0x22
     930:	7d d4       	rcall	.+2298   	; 0x122c <__fixunssfsi>
     932:	7e 8f       	std	Y+30, r23	; 0x1e
     934:	6d 8f       	std	Y+29, r22	; 0x1d
     936:	80 e2       	ldi	r24, 0x20	; 32
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	61 d7       	rcall	.+3778   	; 0x17fe <putchar>
     93c:	88 e5       	ldi	r24, 0x58	; 88
     93e:	92 e0       	ldi	r25, 0x02	; 2
     940:	9f 93       	push	r25
     942:	8f 93       	push	r24
     944:	49 d7       	rcall	.+3730   	; 0x17d8 <printf>
     946:	ce 01       	movw	r24, r28
     948:	4d 96       	adiw	r24, 0x1d	; 29
     94a:	d8 dd       	rcall	.-1104   	; 0x4fc <print16>
     94c:	2b e1       	ldi	r18, 0x1B	; 27
     94e:	3f e2       	ldi	r19, 0x2F	; 47
     950:	45 e6       	ldi	r20, 0x65	; 101
     952:	52 ec       	ldi	r21, 0xC2	; 194
     954:	c7 01       	movw	r24, r14
     956:	b6 01       	movw	r22, r12
     958:	74 d5       	rcall	.+2792   	; 0x1442 <__mulsf3>
     95a:	2f e6       	ldi	r18, 0x6F	; 111
     95c:	32 e1       	ldi	r19, 0x12	; 18
     95e:	43 e8       	ldi	r20, 0x83	; 131
     960:	5b e3       	ldi	r21, 0x3B	; 59
			reg=final_angleY;
     962:	6f d5       	rcall	.+2782   	; 0x1442 <__mulsf3>
     964:	6b 01       	movw	r12, r22
     966:	7c 01       	movw	r14, r24
			printf(" ");	
     968:	2b ed       	ldi	r18, 0xDB	; 219
     96a:	39 ef       	ldi	r19, 0xF9	; 249
     96c:	4e e7       	ldi	r20, 0x7E	; 126
     96e:	5f e3       	ldi	r21, 0x3F	; 63
			printf("final_angleY= ");
     970:	6f 8d       	ldd	r22, Y+31	; 0x1f
     972:	78 a1       	ldd	r23, Y+32	; 0x20
     974:	89 a1       	ldd	r24, Y+33	; 0x21
     976:	9a a1       	ldd	r25, Y+34	; 0x22
     978:	64 d5       	rcall	.+2760   	; 0x1442 <__mulsf3>
			print16(&reg);
     97a:	9b 01       	movw	r18, r22
     97c:	ac 01       	movw	r20, r24
     97e:	c7 01       	movw	r24, r14
						
			#ifdef DRV8313
				uint16_t reg_print=final_angleY;
				int absoulute_y=abs(final_angleY);
     980:	b6 01       	movw	r22, r12
     982:	6c d3       	rcall	.+1752   	; 0x105c <__addsf3>
     984:	6b 01       	movw	r12, r22
     986:	7c 01       	movw	r14, r24
     988:	51 d4       	rcall	.+2210   	; 0x122c <__fixunssfsi>
				uint16_t learing_rate=1000;				
				uint16_t local_motor_delay=(32735-(absoulute_y*learing_rate));
     98a:	7e 8f       	std	Y+30, r23	; 0x1e
     98c:	6d 8f       	std	Y+29, r22	; 0x1d
     98e:	80 e2       	ldi	r24, 0x20	; 32
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	35 d7       	rcall	.+3690   	; 0x17fe <putchar>
     994:	86 e6       	ldi	r24, 0x66	; 102
     996:	92 e0       	ldi	r25, 0x02	; 2
     998:	9f 93       	push	r25
     99a:	8f 93       	push	r24
     99c:	1d d7       	rcall	.+3642   	; 0x17d8 <printf>
     99e:	ce 01       	movw	r24, r28
     9a0:	4d 96       	adiw	r24, 0x1d	; 29
     9a2:	ac dd       	rcall	.-1192   	; 0x4fc <print16>
     9a4:	c7 01       	movw	r24, r14
     9a6:	b6 01       	movw	r22, r12
     9a8:	3c d4       	rcall	.+2168   	; 0x1222 <__fixsfsi>
     9aa:	8b 01       	movw	r16, r22
     9ac:	9b 01       	movw	r18, r22
				if (local_motor_delay>2000)
     9ae:	77 23       	and	r23, r23
     9b0:	24 f4       	brge	.+8      	; 0x9ba <main+0x41a>
     9b2:	22 27       	eor	r18, r18
     9b4:	33 27       	eor	r19, r19
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	88 ee       	ldi	r24, 0xE8	; 232
     9bc:	93 e0       	ldi	r25, 0x03	; 3
     9be:	28 9f       	mul	r18, r24
				{
					pwm_delay=local_motor_delay;
     9c0:	a0 01       	movw	r20, r0
     9c2:	29 9f       	mul	r18, r25
     9c4:	50 0d       	add	r21, r0
				}
				uint16_t reg_ = local_motor_delay;
     9c6:	38 9f       	mul	r19, r24
     9c8:	50 0d       	add	r21, r0
				printf("  ");
     9ca:	11 24       	eor	r1, r1
     9cc:	8f ed       	ldi	r24, 0xDF	; 223
     9ce:	9f e7       	ldi	r25, 0x7F	; 127
     9d0:	84 1b       	sub	r24, r20
     9d2:	95 0b       	sbc	r25, r21
     9d4:	0f 90       	pop	r0
				printf("ocr= ");
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
				print16(&reg_);
     9e0:	81 3d       	cpi	r24, 0xD1	; 209
     9e2:	37 e0       	ldi	r19, 0x07	; 7
     9e4:	93 07       	cpc	r25, r19
				if ((int)final_angleY==0)
     9e6:	20 f0       	brcs	.+8      	; 0x9f0 <main+0x450>
     9e8:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <pwm_delay+0x1>
     9ec:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <pwm_delay>
     9f0:	9c 8f       	std	Y+28, r25	; 0x1c
     9f2:	8b 8f       	std	Y+27, r24	; 0x1b
				{
					incr=0;
     9f4:	85 e7       	ldi	r24, 0x75	; 117
     9f6:	92 e0       	ldi	r25, 0x02	; 2
     9f8:	9f 93       	push	r25
     9fa:	8f 93       	push	r24
					printf("\n");	
     9fc:	ed d6       	rcall	.+3546   	; 0x17d8 <printf>
     9fe:	88 e7       	ldi	r24, 0x78	; 120
     a00:	92 e0       	ldi	r25, 0x02	; 2
     a02:	9f 93       	push	r25
     a04:	8f 93       	push	r24
				}
				else 
					if ((int)final_angleY>0)
     a06:	e8 d6       	rcall	.+3536   	; 0x17d8 <printf>
     a08:	ce 01       	movw	r24, r28
     a0a:	4b 96       	adiw	r24, 0x1b	; 27
					{
						cli();
     a0c:	77 dd       	rcall	.-1298   	; 0x4fc <print16>
						incr=1;
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	0f 90       	pop	r0
     a16:	01 15       	cp	r16, r1
     a18:	11 05       	cpc	r17, r1
						printf(" ");
     a1a:	41 f4       	brne	.+16     	; 0xa2c <main+0x48c>
     a1c:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <incr+0x1>
     a20:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <incr>
						uint16_t val=pwmSin[U_step];
     a24:	8a e0       	ldi	r24, 0x0A	; 10
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	ea d6       	rcall	.+3540   	; 0x17fe <putchar>
     a2a:	40 ce       	rjmp	.-896    	; 0x6ac <main+0x10c>
     a2c:	10 16       	cp	r1, r16
     a2e:	11 06       	cpc	r1, r17
     a30:	e4 f4       	brge	.+56     	; 0xa6a <main+0x4ca>
     a32:	f8 94       	cli
     a34:	81 e0       	ldi	r24, 0x01	; 1
						print16(&val);
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <incr+0x1>
     a3c:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <incr>
						printf(" yes\n");
     a40:	80 e2       	ldi	r24, 0x20	; 32
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	dc d6       	rcall	.+3512   	; 0x17fe <putchar>
						
						sei();
     a46:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <__data_end>
					}
					else
					{	cli();
     a4a:	f0 91 cd 02 	lds	r31, 0x02CD	; 0x8002cd <__data_end+0x1>
						incr=-1;
     a4e:	e7 51       	subi	r30, 0x17	; 23
     a50:	fd 4f       	sbci	r31, 0xFD	; 253
     a52:	80 81       	ld	r24, Z
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	9a 8f       	std	Y+26, r25	; 0x1a
						printf(" ");
     a58:	89 8f       	std	Y+25, r24	; 0x19
     a5a:	ce 01       	movw	r24, r28
     a5c:	49 96       	adiw	r24, 0x19	; 25
     a5e:	4e dd       	rcall	.-1380   	; 0x4fc <print16>
						uint16_t val=pwmSin[U_step];
     a60:	8e e7       	ldi	r24, 0x7E	; 126
     a62:	92 e0       	ldi	r25, 0x02	; 2
     a64:	d1 d6       	rcall	.+3490   	; 0x1808 <puts>
     a66:	78 94       	sei
     a68:	21 ce       	rjmp	.-958    	; 0x6ac <main+0x10c>
     a6a:	f8 94       	cli
     a6c:	8f ef       	ldi	r24, 0xFF	; 255
     a6e:	9f ef       	ldi	r25, 0xFF	; 255
     a70:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <incr+0x1>
						print16(&val);
     a74:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <incr>
     a78:	80 e2       	ldi	r24, 0x20	; 32
     a7a:	90 e0       	ldi	r25, 0x00	; 0
						printf(" no\n");
     a7c:	c0 d6       	rcall	.+3456   	; 0x17fe <putchar>
     a7e:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <__data_end>
     a82:	f0 91 cd 02 	lds	r31, 0x02CD	; 0x8002cd <__data_end+0x1>
			//	 set_gyro_angles = true;                                            //Set the IMU started flag
			//}
			
			#endif //PRINT_RAW_DATA			
		#endif //GYRO
	}
     a86:	e7 51       	subi	r30, 0x17	; 23
     a88:	fd 4f       	sbci	r31, 0xFD	; 253
     a8a:	80 81       	ld	r24, Z
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	9a 8f       	std	Y+26, r25	; 0x1a
     a90:	89 8f       	std	Y+25, r24	; 0x19
     a92:	ce 01       	movw	r24, r28
     a94:	49 96       	adiw	r24, 0x19	; 25
     a96:	32 dd       	rcall	.-1436   	; 0x4fc <print16>
     a98:	83 e8       	ldi	r24, 0x83	; 131
     a9a:	92 e0       	ldi	r25, 0x02	; 2
     a9c:	b5 d6       	rcall	.+3434   	; 0x1808 <puts>
     a9e:	78 94       	sei
     aa0:	05 ce       	rjmp	.-1014   	; 0x6ac <main+0x10c>

00000aa2 <mpu6050_readByte>:
	printf("  ");
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/
}
     aa2:	cf 93       	push	r28
     aa4:	c8 2f       	mov	r28, r24
     aa6:	80 ed       	ldi	r24, 0xD0	; 208
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	19 d2       	rcall	.+1074   	; 0xede <i2c_start>
     aac:	8c 2f       	mov	r24, r28
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	6c d2       	rcall	.+1240   	; 0xf8a <i2c_write>
     ab2:	5b d2       	rcall	.+1206   	; 0xf6a <i2c_stop>
     ab4:	81 ed       	ldi	r24, 0xD1	; 209
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	12 d2       	rcall	.+1060   	; 0xede <i2c_start>
     aba:	a2 d2       	rcall	.+1348   	; 0x1000 <i2c_readNak>
     abc:	c8 2f       	mov	r28, r24
     abe:	55 d2       	rcall	.+1194   	; 0xf6a <i2c_stop>
     ac0:	8c 2f       	mov	r24, r28
     ac2:	cf 91       	pop	r28
     ac4:	08 95       	ret

00000ac6 <mpu6050_read_gyroX>:
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	83 e4       	ldi	r24, 0x43	; 67
     acc:	ea df       	rcall	.-44     	; 0xaa2 <mpu6050_readByte>
     ace:	c8 2f       	mov	r28, r24
     ad0:	d0 e0       	ldi	r29, 0x00	; 0
     ad2:	dc 2f       	mov	r29, r28
     ad4:	cc 27       	eor	r28, r28
     ad6:	84 e4       	ldi	r24, 0x44	; 68
     ad8:	e4 df       	rcall	.-56     	; 0xaa2 <mpu6050_readByte>
     ada:	9e 01       	movw	r18, r28
     adc:	28 2b       	or	r18, r24
     ade:	c9 01       	movw	r24, r18
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	08 95       	ret

00000ae6 <mpu6050_read_gyroY>:
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	85 e4       	ldi	r24, 0x45	; 69
     aec:	da df       	rcall	.-76     	; 0xaa2 <mpu6050_readByte>
     aee:	c8 2f       	mov	r28, r24
     af0:	d0 e0       	ldi	r29, 0x00	; 0
     af2:	dc 2f       	mov	r29, r28
     af4:	cc 27       	eor	r28, r28
     af6:	86 e4       	ldi	r24, 0x46	; 70
     af8:	d4 df       	rcall	.-88     	; 0xaa2 <mpu6050_readByte>
     afa:	9e 01       	movw	r18, r28
     afc:	28 2b       	or	r18, r24
     afe:	c9 01       	movw	r24, r18
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	08 95       	ret

00000b06 <mpu6050_read_gyroZ>:
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	87 e4       	ldi	r24, 0x47	; 71
     b0c:	ca df       	rcall	.-108    	; 0xaa2 <mpu6050_readByte>
     b0e:	c8 2f       	mov	r28, r24
     b10:	d0 e0       	ldi	r29, 0x00	; 0
     b12:	dc 2f       	mov	r29, r28
     b14:	cc 27       	eor	r28, r28
     b16:	88 e4       	ldi	r24, 0x48	; 72
     b18:	c4 df       	rcall	.-120    	; 0xaa2 <mpu6050_readByte>
     b1a:	9e 01       	movw	r18, r28
     b1c:	28 2b       	or	r18, r24
     b1e:	c9 01       	movw	r24, r18
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	08 95       	ret

00000b26 <mpu6050_calibrate_gyro>:
     b26:	cf 92       	push	r12
     b28:	df 92       	push	r13
     b2a:	ef 92       	push	r14
     b2c:	ff 92       	push	r15
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	6c 01       	movw	r12, r24
     b38:	7b 01       	movw	r14, r22
     b3a:	8a 01       	movw	r16, r20
     b3c:	87 e8       	ldi	r24, 0x87	; 135
     b3e:	92 e0       	ldi	r25, 0x02	; 2
     b40:	63 d6       	rcall	.+3270   	; 0x1808 <puts>
     b42:	c8 ec       	ldi	r28, 0xC8	; 200
     b44:	d0 e0       	ldi	r29, 0x00	; 0
     b46:	bf df       	rcall	.-130    	; 0xac6 <mpu6050_read_gyroX>
     b48:	f6 01       	movw	r30, r12
     b4a:	40 81       	ld	r20, Z
     b4c:	51 81       	ldd	r21, Z+1	; 0x01
     b4e:	62 81       	ldd	r22, Z+2	; 0x02
     b50:	73 81       	ldd	r23, Z+3	; 0x03
     b52:	48 0f       	add	r20, r24
     b54:	59 1f       	adc	r21, r25
     b56:	61 1d       	adc	r22, r1
     b58:	71 1d       	adc	r23, r1
     b5a:	40 83       	st	Z, r20
     b5c:	51 83       	std	Z+1, r21	; 0x01
     b5e:	62 83       	std	Z+2, r22	; 0x02
     b60:	73 83       	std	Z+3, r23	; 0x03
     b62:	c1 df       	rcall	.-126    	; 0xae6 <mpu6050_read_gyroY>
     b64:	f7 01       	movw	r30, r14
     b66:	40 81       	ld	r20, Z
     b68:	51 81       	ldd	r21, Z+1	; 0x01
     b6a:	62 81       	ldd	r22, Z+2	; 0x02
     b6c:	73 81       	ldd	r23, Z+3	; 0x03
     b6e:	48 0f       	add	r20, r24
     b70:	59 1f       	adc	r21, r25
     b72:	61 1d       	adc	r22, r1
     b74:	71 1d       	adc	r23, r1
     b76:	40 83       	st	Z, r20
     b78:	51 83       	std	Z+1, r21	; 0x01
     b7a:	62 83       	std	Z+2, r22	; 0x02
     b7c:	73 83       	std	Z+3, r23	; 0x03
     b7e:	c3 df       	rcall	.-122    	; 0xb06 <mpu6050_read_gyroZ>
     b80:	f8 01       	movw	r30, r16
     b82:	40 81       	ld	r20, Z
     b84:	51 81       	ldd	r21, Z+1	; 0x01
     b86:	62 81       	ldd	r22, Z+2	; 0x02
     b88:	73 81       	ldd	r23, Z+3	; 0x03
     b8a:	48 0f       	add	r20, r24
     b8c:	59 1f       	adc	r21, r25
     b8e:	61 1d       	adc	r22, r1
     b90:	71 1d       	adc	r23, r1
     b92:	40 83       	st	Z, r20
     b94:	51 83       	std	Z+1, r21	; 0x01
     b96:	62 83       	std	Z+2, r22	; 0x02
     b98:	73 83       	std	Z+3, r23	; 0x03
     b9a:	8f e3       	ldi	r24, 0x3F	; 63
     b9c:	9f e1       	ldi	r25, 0x1F	; 31
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <mpu6050_calibrate_gyro+0x78>
     ba2:	00 c0       	rjmp	.+0      	; 0xba4 <mpu6050_calibrate_gyro+0x7e>
     ba4:	00 00       	nop
     ba6:	21 97       	sbiw	r28, 0x01	; 1
     ba8:	71 f6       	brne	.-100    	; 0xb46 <mpu6050_calibrate_gyro+0x20>
     baa:	f6 01       	movw	r30, r12
     bac:	60 81       	ld	r22, Z
     bae:	71 81       	ldd	r23, Z+1	; 0x01
     bb0:	82 81       	ldd	r24, Z+2	; 0x02
     bb2:	93 81       	ldd	r25, Z+3	; 0x03
     bb4:	99 23       	and	r25, r25
     bb6:	ac f4       	brge	.+42     	; 0xbe2 <mpu6050_calibrate_gyro+0xbc>
     bb8:	9b 01       	movw	r18, r22
     bba:	77 23       	and	r23, r23
     bbc:	24 f4       	brge	.+8      	; 0xbc6 <mpu6050_calibrate_gyro+0xa0>
     bbe:	22 27       	eor	r18, r18
     bc0:	33 27       	eor	r19, r19
     bc2:	26 1b       	sub	r18, r22
     bc4:	37 0b       	sbc	r19, r23
     bc6:	c9 01       	movw	r24, r18
     bc8:	68 ec       	ldi	r22, 0xC8	; 200
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	33 d5       	rcall	.+2662   	; 0x1634 <__divmodhi4>
     bce:	cb 01       	movw	r24, r22
     bd0:	77 0f       	add	r23, r23
     bd2:	aa 0b       	sbc	r26, r26
     bd4:	bb 0b       	sbc	r27, r27
     bd6:	f6 01       	movw	r30, r12
     bd8:	80 83       	st	Z, r24
     bda:	91 83       	std	Z+1, r25	; 0x01
     bdc:	a2 83       	std	Z+2, r26	; 0x02
     bde:	b3 83       	std	Z+3, r27	; 0x03
     be0:	0a c0       	rjmp	.+20     	; 0xbf6 <mpu6050_calibrate_gyro+0xd0>
     be2:	28 ec       	ldi	r18, 0xC8	; 200
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e0       	ldi	r20, 0x00	; 0
     be8:	50 e0       	ldi	r21, 0x00	; 0
     bea:	37 d5       	rcall	.+2670   	; 0x165a <__divmodsi4>
     bec:	f6 01       	movw	r30, r12
     bee:	20 83       	st	Z, r18
     bf0:	31 83       	std	Z+1, r19	; 0x01
     bf2:	42 83       	std	Z+2, r20	; 0x02
     bf4:	53 83       	std	Z+3, r21	; 0x03
     bf6:	f7 01       	movw	r30, r14
     bf8:	60 81       	ld	r22, Z
     bfa:	71 81       	ldd	r23, Z+1	; 0x01
     bfc:	82 81       	ldd	r24, Z+2	; 0x02
     bfe:	93 81       	ldd	r25, Z+3	; 0x03
     c00:	99 23       	and	r25, r25
     c02:	ac f4       	brge	.+42     	; 0xc2e <mpu6050_calibrate_gyro+0x108>
     c04:	9b 01       	movw	r18, r22
     c06:	77 23       	and	r23, r23
     c08:	24 f4       	brge	.+8      	; 0xc12 <mpu6050_calibrate_gyro+0xec>
     c0a:	22 27       	eor	r18, r18
     c0c:	33 27       	eor	r19, r19
     c0e:	26 1b       	sub	r18, r22
     c10:	37 0b       	sbc	r19, r23
     c12:	c9 01       	movw	r24, r18
     c14:	68 ec       	ldi	r22, 0xC8	; 200
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	0d d5       	rcall	.+2586   	; 0x1634 <__divmodhi4>
     c1a:	cb 01       	movw	r24, r22
     c1c:	77 0f       	add	r23, r23
     c1e:	aa 0b       	sbc	r26, r26
     c20:	bb 0b       	sbc	r27, r27
     c22:	f7 01       	movw	r30, r14
     c24:	80 83       	st	Z, r24
     c26:	91 83       	std	Z+1, r25	; 0x01
     c28:	a2 83       	std	Z+2, r26	; 0x02
     c2a:	b3 83       	std	Z+3, r27	; 0x03
     c2c:	0a c0       	rjmp	.+20     	; 0xc42 <mpu6050_calibrate_gyro+0x11c>
     c2e:	28 ec       	ldi	r18, 0xC8	; 200
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	40 e0       	ldi	r20, 0x00	; 0
     c34:	50 e0       	ldi	r21, 0x00	; 0
     c36:	11 d5       	rcall	.+2594   	; 0x165a <__divmodsi4>
     c38:	f7 01       	movw	r30, r14
     c3a:	20 83       	st	Z, r18
     c3c:	31 83       	std	Z+1, r19	; 0x01
     c3e:	42 83       	std	Z+2, r20	; 0x02
     c40:	53 83       	std	Z+3, r21	; 0x03
     c42:	f8 01       	movw	r30, r16
     c44:	60 81       	ld	r22, Z
     c46:	71 81       	ldd	r23, Z+1	; 0x01
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	99 23       	and	r25, r25
     c4e:	ac f4       	brge	.+42     	; 0xc7a <mpu6050_calibrate_gyro+0x154>
     c50:	9b 01       	movw	r18, r22
     c52:	77 23       	and	r23, r23
     c54:	24 f4       	brge	.+8      	; 0xc5e <mpu6050_calibrate_gyro+0x138>
     c56:	22 27       	eor	r18, r18
     c58:	33 27       	eor	r19, r19
     c5a:	26 1b       	sub	r18, r22
     c5c:	37 0b       	sbc	r19, r23
     c5e:	c9 01       	movw	r24, r18
     c60:	68 ec       	ldi	r22, 0xC8	; 200
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	e7 d4       	rcall	.+2510   	; 0x1634 <__divmodhi4>
     c66:	cb 01       	movw	r24, r22
     c68:	77 0f       	add	r23, r23
     c6a:	aa 0b       	sbc	r26, r26
     c6c:	bb 0b       	sbc	r27, r27
     c6e:	f8 01       	movw	r30, r16
     c70:	80 83       	st	Z, r24
     c72:	91 83       	std	Z+1, r25	; 0x01
     c74:	a2 83       	std	Z+2, r26	; 0x02
     c76:	b3 83       	std	Z+3, r27	; 0x03
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <mpu6050_calibrate_gyro+0x168>
     c7a:	28 ec       	ldi	r18, 0xC8	; 200
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	eb d4       	rcall	.+2518   	; 0x165a <__divmodsi4>
     c84:	f8 01       	movw	r30, r16
     c86:	20 83       	st	Z, r18
     c88:	31 83       	std	Z+1, r19	; 0x01
     c8a:	42 83       	std	Z+2, r20	; 0x02
     c8c:	53 83       	std	Z+3, r21	; 0x03
     c8e:	8d e9       	ldi	r24, 0x9D	; 157
     c90:	92 e0       	ldi	r25, 0x02	; 2
     c92:	9f 93       	push	r25
     c94:	8f 93       	push	r24
     c96:	a0 d5       	rcall	.+2880   	; 0x17d8 <printf>
     c98:	c6 01       	movw	r24, r12
     c9a:	30 dc       	rcall	.-1952   	; 0x4fc <print16>
     c9c:	c5 e7       	ldi	r28, 0x75	; 117
     c9e:	d2 e0       	ldi	r29, 0x02	; 2
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	99 d5       	rcall	.+2866   	; 0x17d8 <printf>
     ca6:	c7 01       	movw	r24, r14
     ca8:	29 dc       	rcall	.-1966   	; 0x4fc <print16>
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	94 d5       	rcall	.+2856   	; 0x17d8 <printf>
     cb0:	c8 01       	movw	r24, r16
     cb2:	4b dc       	rcall	.-1898   	; 0x54a <print16ln>
     cb4:	ef ef       	ldi	r30, 0xFF	; 255
     cb6:	f3 ed       	ldi	r31, 0xD3	; 211
     cb8:	20 e3       	ldi	r18, 0x30	; 48
     cba:	e1 50       	subi	r30, 0x01	; 1
     cbc:	f0 40       	sbci	r31, 0x00	; 0
     cbe:	20 40       	sbci	r18, 0x00	; 0
     cc0:	e1 f7       	brne	.-8      	; 0xcba <mpu6050_calibrate_gyro+0x194>
     cc2:	00 c0       	rjmp	.+0      	; 0xcc4 <mpu6050_calibrate_gyro+0x19e>
     cc4:	00 00       	nop
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	1f 91       	pop	r17
     cd8:	0f 91       	pop	r16
     cda:	ff 90       	pop	r15
     cdc:	ef 90       	pop	r14
     cde:	df 90       	pop	r13
     ce0:	cf 90       	pop	r12
     ce2:	08 95       	ret

00000ce4 <mpu6050_writeByte>:
	uint8_t byteToReturn=i2c_readNak();
	i2c_stop();
	return byteToReturn;
}
void mpu6050_writeByte(uint8_t wereToWrite,uint8_t byteToWrite)//writebyte
{
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	d8 2f       	mov	r29, r24
     cea:	c6 2f       	mov	r28, r22
	i2c_start(MPU6050_WRITE);
     cec:	80 ed       	ldi	r24, 0xD0	; 208
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	f6 d0       	rcall	.+492    	; 0xede <i2c_start>
	i2c_write(wereToWrite);
     cf2:	8d 2f       	mov	r24, r29
     cf4:	90 e0       	ldi	r25, 0x00	; 0
	i2c_write(byteToWrite);
     cf6:	49 d1       	rcall	.+658    	; 0xf8a <i2c_write>
     cf8:	8c 2f       	mov	r24, r28
	i2c_stop();
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	46 d1       	rcall	.+652    	; 0xf8a <i2c_write>
}
     cfe:	35 d1       	rcall	.+618    	; 0xf6a <i2c_stop>
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	08 95       	ret

00000d06 <mpu6050_readBytes>:
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
     d06:	af 92       	push	r10
     d08:	bf 92       	push	r11
     d0a:	cf 92       	push	r12
     d0c:	df 92       	push	r13
     d0e:	ff 92       	push	r15
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
     d18:	66 23       	and	r22, r22
     d1a:	a1 f1       	breq	.+104    	; 0xd84 <mpu6050_readBytes+0x7e>
     d1c:	c5 2f       	mov	r28, r21
     d1e:	d4 2f       	mov	r29, r20
     d20:	f6 2e       	mov	r15, r22
     d22:	18 2f       	mov	r17, r24
		//request register
		i2c_start(MPU6050_WRITE);
     d24:	80 ed       	ldi	r24, 0xD0	; 208
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	da d0       	rcall	.+436    	; 0xede <i2c_start>
		i2c_write(regAddr);
     d2a:	81 2f       	mov	r24, r17
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	2d d1       	rcall	.+602    	; 0xf8a <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d30:	85 e3       	ldi	r24, 0x35	; 53
     d32:	8a 95       	dec	r24
     d34:	f1 f7       	brne	.-4      	; 0xd32 <mpu6050_readBytes+0x2c>
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
     d36:	00 00       	nop
     d38:	81 ed       	ldi	r24, 0xD1	; 209
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	d0 d0       	rcall	.+416    	; 0xede <i2c_start>
     d3e:	0d 2f       	mov	r16, r29
     d40:	1c 2f       	mov	r17, r28
     d42:	cc 24       	eor	r12, r12
     d44:	ca 94       	dec	r12
     d46:	cf 0c       	add	r12, r15
     d48:	d1 2c       	mov	r13, r1
     d4a:	ef ef       	ldi	r30, 0xFF	; 255
     d4c:	ce 1a       	sub	r12, r30
     d4e:	de 0a       	sbc	r13, r30
     d50:	c0 e0       	ldi	r28, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
     d52:	d0 e0       	ldi	r29, 0x00	; 0
     d54:	af 2c       	mov	r10, r15
     d56:	b1 2c       	mov	r11, r1
     d58:	f1 e0       	ldi	r31, 0x01	; 1
     d5a:	af 1a       	sub	r10, r31
     d5c:	b1 08       	sbc	r11, r1
     d5e:	ac 16       	cp	r10, r28
			data[i] = i2c_readNak();
     d60:	bd 06       	cpc	r11, r29
     d62:	21 f4       	brne	.+8      	; 0xd6c <mpu6050_readBytes+0x66>
     d64:	4d d1       	rcall	.+666    	; 0x1000 <i2c_readNak>
     d66:	f8 01       	movw	r30, r16
			else
			data[i] = i2c_readAck();
     d68:	80 83       	st	Z, r24
     d6a:	03 c0       	rjmp	.+6      	; 0xd72 <mpu6050_readBytes+0x6c>
     d6c:	2f d1       	rcall	.+606    	; 0xfcc <i2c_readAck>
     d6e:	f8 01       	movw	r30, r16
     d70:	80 83       	st	Z, r24
     d72:	21 96       	adiw	r28, 0x01	; 1
		i2c_start(MPU6050_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
		for(i=0; i<length; i++) {
     d74:	0f 5f       	subi	r16, 0xFF	; 255
     d76:	1f 4f       	sbci	r17, 0xFF	; 255
     d78:	cc 15       	cp	r28, r12
     d7a:	dd 05       	cpc	r29, r13
			if(i==length-1)
			data[i] = i2c_readNak();
			else
			data[i] = i2c_readAck();
		}
		i2c_stop();
     d7c:	81 f7       	brne	.-32     	; 0xd5e <mpu6050_readBytes+0x58>
     d7e:	cf 2d       	mov	r28, r15
     d80:	f4 d0       	rcall	.+488    	; 0xf6a <i2c_stop>
	i2c_write(byteToWrite);
	i2c_stop();
}
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
	uint8_t i = 0;
	int8_t count = 0;
     d82:	01 c0       	rjmp	.+2      	; 0xd86 <mpu6050_readBytes+0x80>
			data[i] = i2c_readAck();
		}
		i2c_stop();
	}
	return count;
}
     d84:	c0 e0       	ldi	r28, 0x00	; 0
     d86:	8c 2f       	mov	r24, r28
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	ff 90       	pop	r15
     d92:	df 90       	pop	r13
     d94:	cf 90       	pop	r12
     d96:	bf 90       	pop	r11
     d98:	af 90       	pop	r10
     d9a:	08 95       	ret

00000d9c <mpu6050_getRawData>:
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     d9c:	6f 92       	push	r6
     d9e:	7f 92       	push	r7
     da0:	8f 92       	push	r8
     da2:	9f 92       	push	r9
     da4:	af 92       	push	r10
     da6:	bf 92       	push	r11
     da8:	cf 92       	push	r12
     daa:	df 92       	push	r13
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	2e 97       	sbiw	r28, 0x0e	; 14
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	4c 01       	movw	r8, r24
     dca:	5b 01       	movw	r10, r22
     dcc:	6a 01       	movw	r12, r20
     dce:	39 01       	movw	r6, r18
	uint8_t buffer[14];
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14,  buffer);
     dd0:	ae 01       	movw	r20, r28
     dd2:	4f 5f       	subi	r20, 0xFF	; 255
     dd4:	5f 4f       	sbci	r21, 0xFF	; 255
     dd6:	6e e0       	ldi	r22, 0x0E	; 14
     dd8:	8b e3       	ldi	r24, 0x3B	; 59
     dda:	95 df       	rcall	.-214    	; 0xd06 <mpu6050_readBytes>
	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	98 2f       	mov	r25, r24
     de2:	88 27       	eor	r24, r24
     de4:	2a 81       	ldd	r18, Y+2	; 0x02
     de6:	82 2b       	or	r24, r18
     de8:	f4 01       	movw	r30, r8
     dea:	91 83       	std	Z+1, r25	; 0x01
     dec:	80 83       	st	Z, r24
	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	98 2f       	mov	r25, r24
     df4:	88 27       	eor	r24, r24
     df6:	2c 81       	ldd	r18, Y+4	; 0x04
     df8:	82 2b       	or	r24, r18
     dfa:	f5 01       	movw	r30, r10
     dfc:	91 83       	std	Z+1, r25	; 0x01
     dfe:	80 83       	st	Z, r24
	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	98 2f       	mov	r25, r24
     e06:	88 27       	eor	r24, r24
     e08:	2e 81       	ldd	r18, Y+6	; 0x06
     e0a:	82 2b       	or	r24, r18
     e0c:	f6 01       	movw	r30, r12
     e0e:	91 83       	std	Z+1, r25	; 0x01
     e10:	80 83       	st	Z, r24
	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     e12:	89 85       	ldd	r24, Y+9	; 0x09
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	98 2f       	mov	r25, r24
     e18:	88 27       	eor	r24, r24
     e1a:	2a 85       	ldd	r18, Y+10	; 0x0a
     e1c:	82 2b       	or	r24, r18
     e1e:	f3 01       	movw	r30, r6
     e20:	91 83       	std	Z+1, r25	; 0x01
     e22:	80 83       	st	Z, r24
	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     e24:	8b 85       	ldd	r24, Y+11	; 0x0b
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	98 2f       	mov	r25, r24
     e2a:	88 27       	eor	r24, r24
     e2c:	2c 85       	ldd	r18, Y+12	; 0x0c
     e2e:	82 2b       	or	r24, r18
     e30:	f8 01       	movw	r30, r16
     e32:	91 83       	std	Z+1, r25	; 0x01
     e34:	80 83       	st	Z, r24
	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     e36:	8d 85       	ldd	r24, Y+13	; 0x0d
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	98 2f       	mov	r25, r24
     e3c:	88 27       	eor	r24, r24
     e3e:	2e 85       	ldd	r18, Y+14	; 0x0e
     e40:	82 2b       	or	r24, r18
     e42:	f7 01       	movw	r30, r14
     e44:	91 83       	std	Z+1, r25	; 0x01
     e46:	80 83       	st	Z, r24
     e48:	2e 96       	adiw	r28, 0x0e	; 14
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	ef 90       	pop	r14
     e60:	df 90       	pop	r13
     e62:	cf 90       	pop	r12
     e64:	bf 90       	pop	r11
     e66:	af 90       	pop	r10
     e68:	9f 90       	pop	r9
     e6a:	8f 90       	pop	r8
     e6c:	7f 90       	pop	r7
     e6e:	6f 90       	pop	r6
     e70:	08 95       	ret

00000e72 <setup_timer4>:

#define clockCyclesPerMicrosecond () ( F_CPU / 1000000L )

/*-----------Timter 1-----------*/
void setup_timer4(void){
    sbi (TCCR4B, CS40);//prescakaer 256
     e72:	e1 ea       	ldi	r30, 0xA1	; 161
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	81 60       	ori	r24, 0x01	; 1
     e7a:	80 83       	st	Z, r24
    sbi (TCCR4A, WGM40);//8 bit phase correct PWM
     e7c:	e0 ea       	ldi	r30, 0xA0	; 160
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	81 60       	ori	r24, 0x01	; 1
     e84:	80 83       	st	Z, r24
	
	//sbi (TCCR4A,COM4A0);
	sbi (TCCR4A,COM4A1);
     e86:	80 81       	ld	r24, Z
     e88:	80 68       	ori	r24, 0x80	; 128
     e8a:	80 83       	st	Z, r24
	//sbi (TCCR4A,COM4B0);
	sbi (TCCR4A,COM4B1);
     e8c:	80 81       	ld	r24, Z
     e8e:	80 62       	ori	r24, 0x20	; 32
     e90:	80 83       	st	Z, r24
	//sbi (TCCR4A,COM4C0);
	sbi (TCCR4A,COM4C1);
     e92:	80 81       	ld	r24, Z
     e94:	88 60       	ori	r24, 0x08	; 8
     e96:	80 83       	st	Z, r24
     e98:	08 95       	ret

00000e9a <setup_timer5>:
}


/*-----------Timter 5-----------*/
void setup_timer5(void){
	sbi (TCCR5B, CS50);//only this 8
     e9a:	e1 e2       	ldi	r30, 0x21	; 33
     e9c:	f1 e0       	ldi	r31, 0x01	; 1
     e9e:	80 81       	ld	r24, Z
     ea0:	81 60       	ori	r24, 0x01	; 1
     ea2:	80 83       	st	Z, r24
	//sbi (TCCR5B, CS52);//only this 256
	sbi (TCCR5B, WGM52);//OCR4A compare interrupt
     ea4:	80 81       	ld	r24, Z
     ea6:	88 60       	ori	r24, 0x08	; 8
     ea8:	80 83       	st	Z, r24
     eaa:	08 95       	ret

00000eac <Enable_timer5_compare_interrupt>:
	
}
void Enable_timer5_compare_interrupt(){
	sbi (TIMSK5, OCIE5A);
     eac:	e3 e7       	ldi	r30, 0x73	; 115
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	82 60       	ori	r24, 0x02	; 2
     eb4:	80 83       	st	Z, r24
     eb6:	08 95       	ret

00000eb8 <setup_timer0>:
}
/*-----------Timter 2-----------*/
void setup_timer0(void){
	sbi(TCCR0B,CS00);
     eb8:	85 b5       	in	r24, 0x25	; 37
     eba:	81 60       	ori	r24, 0x01	; 1
     ebc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B,CS01);;//prescaler 64 , 250khz timer
     ebe:	85 b5       	in	r24, 0x25	; 37
     ec0:	82 60       	ori	r24, 0x02	; 2
     ec2:	85 bd       	out	0x25, r24	; 37
     ec4:	08 95       	ret

00000ec6 <Enable_timer0_overflow_interrupt>:
}
void Enable_timer0_overflow_interrupt(){
	sbi(TIMSK0,TOIE0);
     ec6:	ee e6       	ldi	r30, 0x6E	; 110
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	81 60       	ori	r24, 0x01	; 1
     ece:	80 83       	st	Z, r24
     ed0:	08 95       	ret

00000ed2 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     ed2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     ed6:	8c e0       	ldi	r24, 0x0C	; 12
     ed8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     edc:	08 95       	ret

00000ede <i2c_start>:
     ede:	94 ea       	ldi	r25, 0xA4	; 164
     ee0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     ee4:	4f ef       	ldi	r20, 0xFF	; 255
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	ec eb       	ldi	r30, 0xBC	; 188
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	90 81       	ld	r25, Z
     ef2:	99 23       	and	r25, r25
     ef4:	34 f0       	brlt	.+12     	; 0xf02 <i2c_start+0x24>
     ef6:	41 50       	subi	r20, 0x01	; 1
     ef8:	51 09       	sbc	r21, r1
     efa:	61 09       	sbc	r22, r1
     efc:	71 09       	sbc	r23, r1
     efe:	c0 f7       	brcc	.-16     	; 0xef0 <i2c_start+0x12>
     f00:	04 c0       	rjmp	.+8      	; 0xf0a <i2c_start+0x2c>
     f02:	45 2b       	or	r20, r21
     f04:	46 2b       	or	r20, r22
     f06:	47 2b       	or	r20, r23
     f08:	41 f1       	breq	.+80     	; 0xf5a <i2c_start+0x7c>
     f0a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     f0e:	98 7f       	andi	r25, 0xF8	; 248
     f10:	98 30       	cpi	r25, 0x08	; 8
     f12:	11 f0       	breq	.+4      	; 0xf18 <i2c_start+0x3a>
     f14:	90 31       	cpi	r25, 0x10	; 16
     f16:	19 f5       	brne	.+70     	; 0xf5e <i2c_start+0x80>
     f18:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     f1c:	84 e8       	ldi	r24, 0x84	; 132
     f1e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     f22:	8f ef       	ldi	r24, 0xFF	; 255
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	a0 e0       	ldi	r26, 0x00	; 0
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	ec eb       	ldi	r30, 0xBC	; 188
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	20 81       	ld	r18, Z
     f30:	22 23       	and	r18, r18
     f32:	2c f0       	brlt	.+10     	; 0xf3e <i2c_start+0x60>
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	a1 09       	sbc	r26, r1
     f38:	b1 09       	sbc	r27, r1
     f3a:	c8 f7       	brcc	.-14     	; 0xf2e <i2c_start+0x50>
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <i2c_start+0x68>
     f3e:	89 2b       	or	r24, r25
     f40:	8a 2b       	or	r24, r26
     f42:	8b 2b       	or	r24, r27
     f44:	71 f0       	breq	.+28     	; 0xf62 <i2c_start+0x84>
     f46:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     f4a:	98 7f       	andi	r25, 0xF8	; 248
     f4c:	98 31       	cpi	r25, 0x18	; 24
     f4e:	59 f0       	breq	.+22     	; 0xf66 <i2c_start+0x88>
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 34       	cpi	r25, 0x40	; 64
     f54:	49 f4       	brne	.+18     	; 0xf68 <i2c_start+0x8a>
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	08 95       	ret
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	08 95       	ret
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	08 95       	ret
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	08 95       	ret
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	08 95       	ret

00000f6a <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     f6a:	84 e9       	ldi	r24, 0x94	; 148
     f6c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	ec eb       	ldi	r30, 0xBC	; 188
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	20 81       	ld	r18, Z
     f7a:	24 ff       	sbrs	r18, 4
     f7c:	05 c0       	rjmp	.+10     	; 0xf88 <i2c_stop+0x1e>
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	81 15       	cp	r24, r1
     f82:	21 e0       	ldi	r18, 0x01	; 1
     f84:	92 07       	cpc	r25, r18
     f86:	c1 f7       	brne	.-16     	; 0xf78 <i2c_stop+0xe>
     f88:	08 95       	ret

00000f8a <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     f8a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     f8e:	84 e8       	ldi	r24, 0x84	; 132
     f90:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     f94:	8f ef       	ldi	r24, 0xFF	; 255
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a0 e0       	ldi	r26, 0x00	; 0
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     f9c:	ec eb       	ldi	r30, 0xBC	; 188
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	20 81       	ld	r18, Z
     fa2:	22 23       	and	r18, r18
     fa4:	2c f0       	brlt	.+10     	; 0xfb0 <i2c_write+0x26>
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	a1 09       	sbc	r26, r1
     faa:	b1 09       	sbc	r27, r1
     fac:	c8 f7       	brcc	.-14     	; 0xfa0 <i2c_write+0x16>
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <i2c_write+0x2e>
	if(i2c_timer == 0)
     fb0:	89 2b       	or	r24, r25
     fb2:	8a 2b       	or	r24, r26
     fb4:	8b 2b       	or	r24, r27
     fb6:	41 f0       	breq	.+16     	; 0xfc8 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     fb8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     fbc:	98 7f       	andi	r25, 0xF8	; 248
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	98 32       	cpi	r25, 0x28	; 40
     fc2:	19 f4       	brne	.+6      	; 0xfca <i2c_write+0x40>
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	08 95       	ret
     fc8:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     fca:	08 95       	ret

00000fcc <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     fcc:	84 ec       	ldi	r24, 0xC4	; 196
     fce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
     fd2:	8f ef       	ldi	r24, 0xFF	; 255
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	a0 e0       	ldi	r26, 0x00	; 0
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     fda:	ec eb       	ldi	r30, 0xBC	; 188
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	20 81       	ld	r18, Z
     fe0:	22 23       	and	r18, r18
     fe2:	2c f0       	brlt	.+10     	; 0xfee <i2c_readAck+0x22>
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	a1 09       	sbc	r26, r1
     fe8:	b1 09       	sbc	r27, r1
     fea:	c8 f7       	brcc	.-14     	; 0xfde <i2c_readAck+0x12>
     fec:	04 c0       	rjmp	.+8      	; 0xff6 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     fee:	89 2b       	or	r24, r25
     ff0:	8a 2b       	or	r24, r26
     ff2:	8b 2b       	or	r24, r27
     ff4:	19 f0       	breq	.+6      	; 0xffc <i2c_readAck+0x30>
		return 0;

    return TWDR;
     ff6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     ffa:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     ffc:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     ffe:	08 95       	ret

00001000 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    1000:	84 e8       	ldi	r24, 0x84	; 132
    1002:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
    1006:	8f ef       	ldi	r24, 0xFF	; 255
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a0 e0       	ldi	r26, 0x00	; 0
    100c:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    100e:	ec eb       	ldi	r30, 0xBC	; 188
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	20 81       	ld	r18, Z
    1014:	22 23       	and	r18, r18
    1016:	2c f0       	brlt	.+10     	; 0x1022 <i2c_readNak+0x22>
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	a1 09       	sbc	r26, r1
    101c:	b1 09       	sbc	r27, r1
    101e:	c8 f7       	brcc	.-14     	; 0x1012 <i2c_readNak+0x12>
    1020:	04 c0       	rjmp	.+8      	; 0x102a <i2c_readNak+0x2a>
	if(i2c_timer == 0)
    1022:	89 2b       	or	r24, r25
    1024:	8a 2b       	or	r24, r26
    1026:	8b 2b       	or	r24, r27
    1028:	19 f0       	breq	.+6      	; 0x1030 <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
    102a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    102e:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    1030:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    1032:	08 95       	ret

00001034 <USART_Init>:
#include <avr/io.h>
#include <stdio.h>
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
    1034:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;
    1038:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	UCSR0B = (1<<TXEN0);// | (1<<TXCIE0);
    103c:	88 e0       	ldi	r24, 0x08	; 8
    103e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);//2 stop bit 8 bit
    1042:	8e e0       	ldi	r24, 0x0E	; 14
    1044:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1048:	08 95       	ret

0000104a <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
    104a:	e0 ec       	ldi	r30, 0xC0	; 192
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	90 81       	ld	r25, Z
    1050:	95 ff       	sbrs	r25, 5
    1052:	fd cf       	rjmp	.-6      	; 0x104e <USART_Transmit+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
    1054:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1058:	08 95       	ret

0000105a <__subsf3>:
    105a:	50 58       	subi	r21, 0x80	; 128

0000105c <__addsf3>:
    105c:	bb 27       	eor	r27, r27
    105e:	aa 27       	eor	r26, r26
    1060:	0e d0       	rcall	.+28     	; 0x107e <__addsf3x>
    1062:	b5 c1       	rjmp	.+874    	; 0x13ce <__fp_round>
    1064:	a6 d1       	rcall	.+844    	; 0x13b2 <__fp_pscA>
    1066:	30 f0       	brcs	.+12     	; 0x1074 <__addsf3+0x18>
    1068:	ab d1       	rcall	.+854    	; 0x13c0 <__fp_pscB>
    106a:	20 f0       	brcs	.+8      	; 0x1074 <__addsf3+0x18>
    106c:	31 f4       	brne	.+12     	; 0x107a <__addsf3+0x1e>
    106e:	9f 3f       	cpi	r25, 0xFF	; 255
    1070:	11 f4       	brne	.+4      	; 0x1076 <__addsf3+0x1a>
    1072:	1e f4       	brtc	.+6      	; 0x107a <__addsf3+0x1e>
    1074:	65 c1       	rjmp	.+714    	; 0x1340 <__fp_nan>
    1076:	0e f4       	brtc	.+2      	; 0x107a <__addsf3+0x1e>
    1078:	e0 95       	com	r30
    107a:	e7 fb       	bst	r30, 7
    107c:	5b c1       	rjmp	.+694    	; 0x1334 <__fp_inf>

0000107e <__addsf3x>:
    107e:	e9 2f       	mov	r30, r25
    1080:	b7 d1       	rcall	.+878    	; 0x13f0 <__fp_split3>
    1082:	80 f3       	brcs	.-32     	; 0x1064 <__addsf3+0x8>
    1084:	ba 17       	cp	r27, r26
    1086:	62 07       	cpc	r22, r18
    1088:	73 07       	cpc	r23, r19
    108a:	84 07       	cpc	r24, r20
    108c:	95 07       	cpc	r25, r21
    108e:	18 f0       	brcs	.+6      	; 0x1096 <__addsf3x+0x18>
    1090:	71 f4       	brne	.+28     	; 0x10ae <__addsf3x+0x30>
    1092:	9e f5       	brtc	.+102    	; 0x10fa <__addsf3x+0x7c>
    1094:	cf c1       	rjmp	.+926    	; 0x1434 <__fp_zero>
    1096:	0e f4       	brtc	.+2      	; 0x109a <__addsf3x+0x1c>
    1098:	e0 95       	com	r30
    109a:	0b 2e       	mov	r0, r27
    109c:	ba 2f       	mov	r27, r26
    109e:	a0 2d       	mov	r26, r0
    10a0:	0b 01       	movw	r0, r22
    10a2:	b9 01       	movw	r22, r18
    10a4:	90 01       	movw	r18, r0
    10a6:	0c 01       	movw	r0, r24
    10a8:	ca 01       	movw	r24, r20
    10aa:	a0 01       	movw	r20, r0
    10ac:	11 24       	eor	r1, r1
    10ae:	ff 27       	eor	r31, r31
    10b0:	59 1b       	sub	r21, r25
    10b2:	99 f0       	breq	.+38     	; 0x10da <__addsf3x+0x5c>
    10b4:	59 3f       	cpi	r21, 0xF9	; 249
    10b6:	50 f4       	brcc	.+20     	; 0x10cc <__addsf3x+0x4e>
    10b8:	50 3e       	cpi	r21, 0xE0	; 224
    10ba:	68 f1       	brcs	.+90     	; 0x1116 <__addsf3x+0x98>
    10bc:	1a 16       	cp	r1, r26
    10be:	f0 40       	sbci	r31, 0x00	; 0
    10c0:	a2 2f       	mov	r26, r18
    10c2:	23 2f       	mov	r18, r19
    10c4:	34 2f       	mov	r19, r20
    10c6:	44 27       	eor	r20, r20
    10c8:	58 5f       	subi	r21, 0xF8	; 248
    10ca:	f3 cf       	rjmp	.-26     	; 0x10b2 <__addsf3x+0x34>
    10cc:	46 95       	lsr	r20
    10ce:	37 95       	ror	r19
    10d0:	27 95       	ror	r18
    10d2:	a7 95       	ror	r26
    10d4:	f0 40       	sbci	r31, 0x00	; 0
    10d6:	53 95       	inc	r21
    10d8:	c9 f7       	brne	.-14     	; 0x10cc <__addsf3x+0x4e>
    10da:	7e f4       	brtc	.+30     	; 0x10fa <__addsf3x+0x7c>
    10dc:	1f 16       	cp	r1, r31
    10de:	ba 0b       	sbc	r27, r26
    10e0:	62 0b       	sbc	r22, r18
    10e2:	73 0b       	sbc	r23, r19
    10e4:	84 0b       	sbc	r24, r20
    10e6:	ba f0       	brmi	.+46     	; 0x1116 <__addsf3x+0x98>
    10e8:	91 50       	subi	r25, 0x01	; 1
    10ea:	a1 f0       	breq	.+40     	; 0x1114 <__addsf3x+0x96>
    10ec:	ff 0f       	add	r31, r31
    10ee:	bb 1f       	adc	r27, r27
    10f0:	66 1f       	adc	r22, r22
    10f2:	77 1f       	adc	r23, r23
    10f4:	88 1f       	adc	r24, r24
    10f6:	c2 f7       	brpl	.-16     	; 0x10e8 <__addsf3x+0x6a>
    10f8:	0e c0       	rjmp	.+28     	; 0x1116 <__addsf3x+0x98>
    10fa:	ba 0f       	add	r27, r26
    10fc:	62 1f       	adc	r22, r18
    10fe:	73 1f       	adc	r23, r19
    1100:	84 1f       	adc	r24, r20
    1102:	48 f4       	brcc	.+18     	; 0x1116 <__addsf3x+0x98>
    1104:	87 95       	ror	r24
    1106:	77 95       	ror	r23
    1108:	67 95       	ror	r22
    110a:	b7 95       	ror	r27
    110c:	f7 95       	ror	r31
    110e:	9e 3f       	cpi	r25, 0xFE	; 254
    1110:	08 f0       	brcs	.+2      	; 0x1114 <__addsf3x+0x96>
    1112:	b3 cf       	rjmp	.-154    	; 0x107a <__addsf3+0x1e>
    1114:	93 95       	inc	r25
    1116:	88 0f       	add	r24, r24
    1118:	08 f0       	brcs	.+2      	; 0x111c <__addsf3x+0x9e>
    111a:	99 27       	eor	r25, r25
    111c:	ee 0f       	add	r30, r30
    111e:	97 95       	ror	r25
    1120:	87 95       	ror	r24
    1122:	08 95       	ret

00001124 <asin>:
    1124:	9f 93       	push	r25
    1126:	9f 77       	andi	r25, 0x7F	; 127
    1128:	ee e3       	ldi	r30, 0x3E	; 62
    112a:	89 37       	cpi	r24, 0x79	; 121
    112c:	9e 07       	cpc	r25, r30
    112e:	20 f4       	brcc	.+8      	; 0x1138 <asin+0x14>
    1130:	e4 ee       	ldi	r30, 0xE4	; 228
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	2d d1       	rcall	.+602    	; 0x1390 <__fp_powsodd>
    1136:	09 c0       	rjmp	.+18     	; 0x114a <asin+0x26>
    1138:	e2 d0       	rcall	.+452    	; 0x12fe <__fp_arccos>
    113a:	90 58       	subi	r25, 0x80	; 128
    113c:	a2 ea       	ldi	r26, 0xA2	; 162
    113e:	2a ed       	ldi	r18, 0xDA	; 218
    1140:	3f e0       	ldi	r19, 0x0F	; 15
    1142:	49 ec       	ldi	r20, 0xC9	; 201
    1144:	5f e3       	ldi	r21, 0x3F	; 63
    1146:	9b df       	rcall	.-202    	; 0x107e <__addsf3x>
    1148:	42 d1       	rcall	.+644    	; 0x13ce <__fp_round>
    114a:	0f 90       	pop	r0
    114c:	07 fc       	sbrc	r0, 7
    114e:	90 58       	subi	r25, 0x80	; 128
    1150:	08 95       	ret

00001152 <__divsf3>:
    1152:	0c d0       	rcall	.+24     	; 0x116c <__divsf3x>
    1154:	3c c1       	rjmp	.+632    	; 0x13ce <__fp_round>
    1156:	34 d1       	rcall	.+616    	; 0x13c0 <__fp_pscB>
    1158:	40 f0       	brcs	.+16     	; 0x116a <__divsf3+0x18>
    115a:	2b d1       	rcall	.+598    	; 0x13b2 <__fp_pscA>
    115c:	30 f0       	brcs	.+12     	; 0x116a <__divsf3+0x18>
    115e:	21 f4       	brne	.+8      	; 0x1168 <__divsf3+0x16>
    1160:	5f 3f       	cpi	r21, 0xFF	; 255
    1162:	19 f0       	breq	.+6      	; 0x116a <__divsf3+0x18>
    1164:	e7 c0       	rjmp	.+462    	; 0x1334 <__fp_inf>
    1166:	51 11       	cpse	r21, r1
    1168:	66 c1       	rjmp	.+716    	; 0x1436 <__fp_szero>
    116a:	ea c0       	rjmp	.+468    	; 0x1340 <__fp_nan>

0000116c <__divsf3x>:
    116c:	41 d1       	rcall	.+642    	; 0x13f0 <__fp_split3>
    116e:	98 f3       	brcs	.-26     	; 0x1156 <__divsf3+0x4>

00001170 <__divsf3_pse>:
    1170:	99 23       	and	r25, r25
    1172:	c9 f3       	breq	.-14     	; 0x1166 <__divsf3+0x14>
    1174:	55 23       	and	r21, r21
    1176:	b1 f3       	breq	.-20     	; 0x1164 <__divsf3+0x12>
    1178:	95 1b       	sub	r25, r21
    117a:	55 0b       	sbc	r21, r21
    117c:	bb 27       	eor	r27, r27
    117e:	aa 27       	eor	r26, r26
    1180:	62 17       	cp	r22, r18
    1182:	73 07       	cpc	r23, r19
    1184:	84 07       	cpc	r24, r20
    1186:	38 f0       	brcs	.+14     	; 0x1196 <__divsf3_pse+0x26>
    1188:	9f 5f       	subi	r25, 0xFF	; 255
    118a:	5f 4f       	sbci	r21, 0xFF	; 255
    118c:	22 0f       	add	r18, r18
    118e:	33 1f       	adc	r19, r19
    1190:	44 1f       	adc	r20, r20
    1192:	aa 1f       	adc	r26, r26
    1194:	a9 f3       	breq	.-22     	; 0x1180 <__divsf3_pse+0x10>
    1196:	33 d0       	rcall	.+102    	; 0x11fe <__divsf3_pse+0x8e>
    1198:	0e 2e       	mov	r0, r30
    119a:	3a f0       	brmi	.+14     	; 0x11aa <__divsf3_pse+0x3a>
    119c:	e0 e8       	ldi	r30, 0x80	; 128
    119e:	30 d0       	rcall	.+96     	; 0x1200 <__divsf3_pse+0x90>
    11a0:	91 50       	subi	r25, 0x01	; 1
    11a2:	50 40       	sbci	r21, 0x00	; 0
    11a4:	e6 95       	lsr	r30
    11a6:	00 1c       	adc	r0, r0
    11a8:	ca f7       	brpl	.-14     	; 0x119c <__divsf3_pse+0x2c>
    11aa:	29 d0       	rcall	.+82     	; 0x11fe <__divsf3_pse+0x8e>
    11ac:	fe 2f       	mov	r31, r30
    11ae:	27 d0       	rcall	.+78     	; 0x11fe <__divsf3_pse+0x8e>
    11b0:	66 0f       	add	r22, r22
    11b2:	77 1f       	adc	r23, r23
    11b4:	88 1f       	adc	r24, r24
    11b6:	bb 1f       	adc	r27, r27
    11b8:	26 17       	cp	r18, r22
    11ba:	37 07       	cpc	r19, r23
    11bc:	48 07       	cpc	r20, r24
    11be:	ab 07       	cpc	r26, r27
    11c0:	b0 e8       	ldi	r27, 0x80	; 128
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <__divsf3_pse+0x56>
    11c4:	bb 0b       	sbc	r27, r27
    11c6:	80 2d       	mov	r24, r0
    11c8:	bf 01       	movw	r22, r30
    11ca:	ff 27       	eor	r31, r31
    11cc:	93 58       	subi	r25, 0x83	; 131
    11ce:	5f 4f       	sbci	r21, 0xFF	; 255
    11d0:	2a f0       	brmi	.+10     	; 0x11dc <__divsf3_pse+0x6c>
    11d2:	9e 3f       	cpi	r25, 0xFE	; 254
    11d4:	51 05       	cpc	r21, r1
    11d6:	68 f0       	brcs	.+26     	; 0x11f2 <__divsf3_pse+0x82>
    11d8:	ad c0       	rjmp	.+346    	; 0x1334 <__fp_inf>
    11da:	2d c1       	rjmp	.+602    	; 0x1436 <__fp_szero>
    11dc:	5f 3f       	cpi	r21, 0xFF	; 255
    11de:	ec f3       	brlt	.-6      	; 0x11da <__divsf3_pse+0x6a>
    11e0:	98 3e       	cpi	r25, 0xE8	; 232
    11e2:	dc f3       	brlt	.-10     	; 0x11da <__divsf3_pse+0x6a>
    11e4:	86 95       	lsr	r24
    11e6:	77 95       	ror	r23
    11e8:	67 95       	ror	r22
    11ea:	b7 95       	ror	r27
    11ec:	f7 95       	ror	r31
    11ee:	9f 5f       	subi	r25, 0xFF	; 255
    11f0:	c9 f7       	brne	.-14     	; 0x11e4 <__divsf3_pse+0x74>
    11f2:	88 0f       	add	r24, r24
    11f4:	91 1d       	adc	r25, r1
    11f6:	96 95       	lsr	r25
    11f8:	87 95       	ror	r24
    11fa:	97 f9       	bld	r25, 7
    11fc:	08 95       	ret
    11fe:	e1 e0       	ldi	r30, 0x01	; 1
    1200:	66 0f       	add	r22, r22
    1202:	77 1f       	adc	r23, r23
    1204:	88 1f       	adc	r24, r24
    1206:	bb 1f       	adc	r27, r27
    1208:	62 17       	cp	r22, r18
    120a:	73 07       	cpc	r23, r19
    120c:	84 07       	cpc	r24, r20
    120e:	ba 07       	cpc	r27, r26
    1210:	20 f0       	brcs	.+8      	; 0x121a <__divsf3_pse+0xaa>
    1212:	62 1b       	sub	r22, r18
    1214:	73 0b       	sbc	r23, r19
    1216:	84 0b       	sbc	r24, r20
    1218:	ba 0b       	sbc	r27, r26
    121a:	ee 1f       	adc	r30, r30
    121c:	88 f7       	brcc	.-30     	; 0x1200 <__divsf3_pse+0x90>
    121e:	e0 95       	com	r30
    1220:	08 95       	ret

00001222 <__fixsfsi>:
    1222:	04 d0       	rcall	.+8      	; 0x122c <__fixunssfsi>
    1224:	68 94       	set
    1226:	b1 11       	cpse	r27, r1
    1228:	06 c1       	rjmp	.+524    	; 0x1436 <__fp_szero>
    122a:	08 95       	ret

0000122c <__fixunssfsi>:
    122c:	e9 d0       	rcall	.+466    	; 0x1400 <__fp_splitA>
    122e:	88 f0       	brcs	.+34     	; 0x1252 <__fixunssfsi+0x26>
    1230:	9f 57       	subi	r25, 0x7F	; 127
    1232:	90 f0       	brcs	.+36     	; 0x1258 <__fixunssfsi+0x2c>
    1234:	b9 2f       	mov	r27, r25
    1236:	99 27       	eor	r25, r25
    1238:	b7 51       	subi	r27, 0x17	; 23
    123a:	a0 f0       	brcs	.+40     	; 0x1264 <__fixunssfsi+0x38>
    123c:	d1 f0       	breq	.+52     	; 0x1272 <__fixunssfsi+0x46>
    123e:	66 0f       	add	r22, r22
    1240:	77 1f       	adc	r23, r23
    1242:	88 1f       	adc	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	1a f0       	brmi	.+6      	; 0x124e <__fixunssfsi+0x22>
    1248:	ba 95       	dec	r27
    124a:	c9 f7       	brne	.-14     	; 0x123e <__fixunssfsi+0x12>
    124c:	12 c0       	rjmp	.+36     	; 0x1272 <__fixunssfsi+0x46>
    124e:	b1 30       	cpi	r27, 0x01	; 1
    1250:	81 f0       	breq	.+32     	; 0x1272 <__fixunssfsi+0x46>
    1252:	f0 d0       	rcall	.+480    	; 0x1434 <__fp_zero>
    1254:	b1 e0       	ldi	r27, 0x01	; 1
    1256:	08 95       	ret
    1258:	ed c0       	rjmp	.+474    	; 0x1434 <__fp_zero>
    125a:	67 2f       	mov	r22, r23
    125c:	78 2f       	mov	r23, r24
    125e:	88 27       	eor	r24, r24
    1260:	b8 5f       	subi	r27, 0xF8	; 248
    1262:	39 f0       	breq	.+14     	; 0x1272 <__fixunssfsi+0x46>
    1264:	b9 3f       	cpi	r27, 0xF9	; 249
    1266:	cc f3       	brlt	.-14     	; 0x125a <__fixunssfsi+0x2e>
    1268:	86 95       	lsr	r24
    126a:	77 95       	ror	r23
    126c:	67 95       	ror	r22
    126e:	b3 95       	inc	r27
    1270:	d9 f7       	brne	.-10     	; 0x1268 <__fixunssfsi+0x3c>
    1272:	3e f4       	brtc	.+14     	; 0x1282 <__fixunssfsi+0x56>
    1274:	90 95       	com	r25
    1276:	80 95       	com	r24
    1278:	70 95       	com	r23
    127a:	61 95       	neg	r22
    127c:	7f 4f       	sbci	r23, 0xFF	; 255
    127e:	8f 4f       	sbci	r24, 0xFF	; 255
    1280:	9f 4f       	sbci	r25, 0xFF	; 255
    1282:	08 95       	ret

00001284 <__floatunsisf>:
    1284:	e8 94       	clt
    1286:	09 c0       	rjmp	.+18     	; 0x129a <__floatsisf+0x12>

00001288 <__floatsisf>:
    1288:	97 fb       	bst	r25, 7
    128a:	3e f4       	brtc	.+14     	; 0x129a <__floatsisf+0x12>
    128c:	90 95       	com	r25
    128e:	80 95       	com	r24
    1290:	70 95       	com	r23
    1292:	61 95       	neg	r22
    1294:	7f 4f       	sbci	r23, 0xFF	; 255
    1296:	8f 4f       	sbci	r24, 0xFF	; 255
    1298:	9f 4f       	sbci	r25, 0xFF	; 255
    129a:	99 23       	and	r25, r25
    129c:	a9 f0       	breq	.+42     	; 0x12c8 <__floatsisf+0x40>
    129e:	f9 2f       	mov	r31, r25
    12a0:	96 e9       	ldi	r25, 0x96	; 150
    12a2:	bb 27       	eor	r27, r27
    12a4:	93 95       	inc	r25
    12a6:	f6 95       	lsr	r31
    12a8:	87 95       	ror	r24
    12aa:	77 95       	ror	r23
    12ac:	67 95       	ror	r22
    12ae:	b7 95       	ror	r27
    12b0:	f1 11       	cpse	r31, r1
    12b2:	f8 cf       	rjmp	.-16     	; 0x12a4 <__floatsisf+0x1c>
    12b4:	fa f4       	brpl	.+62     	; 0x12f4 <__floatsisf+0x6c>
    12b6:	bb 0f       	add	r27, r27
    12b8:	11 f4       	brne	.+4      	; 0x12be <__floatsisf+0x36>
    12ba:	60 ff       	sbrs	r22, 0
    12bc:	1b c0       	rjmp	.+54     	; 0x12f4 <__floatsisf+0x6c>
    12be:	6f 5f       	subi	r22, 0xFF	; 255
    12c0:	7f 4f       	sbci	r23, 0xFF	; 255
    12c2:	8f 4f       	sbci	r24, 0xFF	; 255
    12c4:	9f 4f       	sbci	r25, 0xFF	; 255
    12c6:	16 c0       	rjmp	.+44     	; 0x12f4 <__floatsisf+0x6c>
    12c8:	88 23       	and	r24, r24
    12ca:	11 f0       	breq	.+4      	; 0x12d0 <__floatsisf+0x48>
    12cc:	96 e9       	ldi	r25, 0x96	; 150
    12ce:	11 c0       	rjmp	.+34     	; 0x12f2 <__floatsisf+0x6a>
    12d0:	77 23       	and	r23, r23
    12d2:	21 f0       	breq	.+8      	; 0x12dc <__floatsisf+0x54>
    12d4:	9e e8       	ldi	r25, 0x8E	; 142
    12d6:	87 2f       	mov	r24, r23
    12d8:	76 2f       	mov	r23, r22
    12da:	05 c0       	rjmp	.+10     	; 0x12e6 <__floatsisf+0x5e>
    12dc:	66 23       	and	r22, r22
    12de:	71 f0       	breq	.+28     	; 0x12fc <__floatsisf+0x74>
    12e0:	96 e8       	ldi	r25, 0x86	; 134
    12e2:	86 2f       	mov	r24, r22
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	2a f0       	brmi	.+10     	; 0x12f4 <__floatsisf+0x6c>
    12ea:	9a 95       	dec	r25
    12ec:	66 0f       	add	r22, r22
    12ee:	77 1f       	adc	r23, r23
    12f0:	88 1f       	adc	r24, r24
    12f2:	da f7       	brpl	.-10     	; 0x12ea <__floatsisf+0x62>
    12f4:	88 0f       	add	r24, r24
    12f6:	96 95       	lsr	r25
    12f8:	87 95       	ror	r24
    12fa:	97 f9       	bld	r25, 7
    12fc:	08 95       	ret

000012fe <__fp_arccos>:
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	1f 93       	push	r17
    1304:	0f 93       	push	r16
    1306:	8b 01       	movw	r16, r22
    1308:	ec 01       	movw	r28, r24
    130a:	e8 ef       	ldi	r30, 0xF8	; 248
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	1b d0       	rcall	.+54     	; 0x1346 <__fp_powser>
    1310:	5e d0       	rcall	.+188    	; 0x13ce <__fp_round>
    1312:	98 01       	movw	r18, r16
    1314:	ae 01       	movw	r20, r28
    1316:	8b 01       	movw	r16, r22
    1318:	ec 01       	movw	r28, r24
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	80 e8       	ldi	r24, 0x80	; 128
    1320:	9f e3       	ldi	r25, 0x3F	; 63
    1322:	9b de       	rcall	.-714    	; 0x105a <__subsf3>
    1324:	fb d0       	rcall	.+502    	; 0x151c <sqrt>
    1326:	98 01       	movw	r18, r16
    1328:	ae 01       	movw	r20, r28
    132a:	0f 91       	pop	r16
    132c:	1f 91       	pop	r17
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	93 c0       	rjmp	.+294    	; 0x145a <__mulsf3x>

00001334 <__fp_inf>:
    1334:	97 f9       	bld	r25, 7
    1336:	9f 67       	ori	r25, 0x7F	; 127
    1338:	80 e8       	ldi	r24, 0x80	; 128
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	08 95       	ret

00001340 <__fp_nan>:
    1340:	9f ef       	ldi	r25, 0xFF	; 255
    1342:	80 ec       	ldi	r24, 0xC0	; 192
    1344:	08 95       	ret

00001346 <__fp_powser>:
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	1f 93       	push	r17
    134c:	0f 93       	push	r16
    134e:	ff 92       	push	r15
    1350:	ef 92       	push	r14
    1352:	df 92       	push	r13
    1354:	7b 01       	movw	r14, r22
    1356:	8c 01       	movw	r16, r24
    1358:	68 94       	set
    135a:	05 c0       	rjmp	.+10     	; 0x1366 <__fp_powser+0x20>
    135c:	da 2e       	mov	r13, r26
    135e:	ef 01       	movw	r28, r30
    1360:	7c d0       	rcall	.+248    	; 0x145a <__mulsf3x>
    1362:	fe 01       	movw	r30, r28
    1364:	e8 94       	clt
    1366:	a5 91       	lpm	r26, Z+
    1368:	25 91       	lpm	r18, Z+
    136a:	35 91       	lpm	r19, Z+
    136c:	45 91       	lpm	r20, Z+
    136e:	55 91       	lpm	r21, Z+
    1370:	ae f3       	brts	.-22     	; 0x135c <__fp_powser+0x16>
    1372:	ef 01       	movw	r28, r30
    1374:	84 de       	rcall	.-760    	; 0x107e <__addsf3x>
    1376:	fe 01       	movw	r30, r28
    1378:	97 01       	movw	r18, r14
    137a:	a8 01       	movw	r20, r16
    137c:	da 94       	dec	r13
    137e:	79 f7       	brne	.-34     	; 0x135e <__fp_powser+0x18>
    1380:	df 90       	pop	r13
    1382:	ef 90       	pop	r14
    1384:	ff 90       	pop	r15
    1386:	0f 91       	pop	r16
    1388:	1f 91       	pop	r17
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <__fp_powsodd>:
    1390:	9f 93       	push	r25
    1392:	8f 93       	push	r24
    1394:	7f 93       	push	r23
    1396:	6f 93       	push	r22
    1398:	ff 93       	push	r31
    139a:	ef 93       	push	r30
    139c:	9b 01       	movw	r18, r22
    139e:	ac 01       	movw	r20, r24
    13a0:	50 d0       	rcall	.+160    	; 0x1442 <__mulsf3>
    13a2:	ef 91       	pop	r30
    13a4:	ff 91       	pop	r31
    13a6:	cf df       	rcall	.-98     	; 0x1346 <__fp_powser>
    13a8:	2f 91       	pop	r18
    13aa:	3f 91       	pop	r19
    13ac:	4f 91       	pop	r20
    13ae:	5f 91       	pop	r21
    13b0:	48 c0       	rjmp	.+144    	; 0x1442 <__mulsf3>

000013b2 <__fp_pscA>:
    13b2:	00 24       	eor	r0, r0
    13b4:	0a 94       	dec	r0
    13b6:	16 16       	cp	r1, r22
    13b8:	17 06       	cpc	r1, r23
    13ba:	18 06       	cpc	r1, r24
    13bc:	09 06       	cpc	r0, r25
    13be:	08 95       	ret

000013c0 <__fp_pscB>:
    13c0:	00 24       	eor	r0, r0
    13c2:	0a 94       	dec	r0
    13c4:	12 16       	cp	r1, r18
    13c6:	13 06       	cpc	r1, r19
    13c8:	14 06       	cpc	r1, r20
    13ca:	05 06       	cpc	r0, r21
    13cc:	08 95       	ret

000013ce <__fp_round>:
    13ce:	09 2e       	mov	r0, r25
    13d0:	03 94       	inc	r0
    13d2:	00 0c       	add	r0, r0
    13d4:	11 f4       	brne	.+4      	; 0x13da <__fp_round+0xc>
    13d6:	88 23       	and	r24, r24
    13d8:	52 f0       	brmi	.+20     	; 0x13ee <__fp_round+0x20>
    13da:	bb 0f       	add	r27, r27
    13dc:	40 f4       	brcc	.+16     	; 0x13ee <__fp_round+0x20>
    13de:	bf 2b       	or	r27, r31
    13e0:	11 f4       	brne	.+4      	; 0x13e6 <__fp_round+0x18>
    13e2:	60 ff       	sbrs	r22, 0
    13e4:	04 c0       	rjmp	.+8      	; 0x13ee <__fp_round+0x20>
    13e6:	6f 5f       	subi	r22, 0xFF	; 255
    13e8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ea:	8f 4f       	sbci	r24, 0xFF	; 255
    13ec:	9f 4f       	sbci	r25, 0xFF	; 255
    13ee:	08 95       	ret

000013f0 <__fp_split3>:
    13f0:	57 fd       	sbrc	r21, 7
    13f2:	90 58       	subi	r25, 0x80	; 128
    13f4:	44 0f       	add	r20, r20
    13f6:	55 1f       	adc	r21, r21
    13f8:	59 f0       	breq	.+22     	; 0x1410 <__fp_splitA+0x10>
    13fa:	5f 3f       	cpi	r21, 0xFF	; 255
    13fc:	71 f0       	breq	.+28     	; 0x141a <__fp_splitA+0x1a>
    13fe:	47 95       	ror	r20

00001400 <__fp_splitA>:
    1400:	88 0f       	add	r24, r24
    1402:	97 fb       	bst	r25, 7
    1404:	99 1f       	adc	r25, r25
    1406:	61 f0       	breq	.+24     	; 0x1420 <__fp_splitA+0x20>
    1408:	9f 3f       	cpi	r25, 0xFF	; 255
    140a:	79 f0       	breq	.+30     	; 0x142a <__fp_splitA+0x2a>
    140c:	87 95       	ror	r24
    140e:	08 95       	ret
    1410:	12 16       	cp	r1, r18
    1412:	13 06       	cpc	r1, r19
    1414:	14 06       	cpc	r1, r20
    1416:	55 1f       	adc	r21, r21
    1418:	f2 cf       	rjmp	.-28     	; 0x13fe <__fp_split3+0xe>
    141a:	46 95       	lsr	r20
    141c:	f1 df       	rcall	.-30     	; 0x1400 <__fp_splitA>
    141e:	08 c0       	rjmp	.+16     	; 0x1430 <__fp_splitA+0x30>
    1420:	16 16       	cp	r1, r22
    1422:	17 06       	cpc	r1, r23
    1424:	18 06       	cpc	r1, r24
    1426:	99 1f       	adc	r25, r25
    1428:	f1 cf       	rjmp	.-30     	; 0x140c <__fp_splitA+0xc>
    142a:	86 95       	lsr	r24
    142c:	71 05       	cpc	r23, r1
    142e:	61 05       	cpc	r22, r1
    1430:	08 94       	sec
    1432:	08 95       	ret

00001434 <__fp_zero>:
    1434:	e8 94       	clt

00001436 <__fp_szero>:
    1436:	bb 27       	eor	r27, r27
    1438:	66 27       	eor	r22, r22
    143a:	77 27       	eor	r23, r23
    143c:	cb 01       	movw	r24, r22
    143e:	97 f9       	bld	r25, 7
    1440:	08 95       	ret

00001442 <__mulsf3>:
    1442:	0b d0       	rcall	.+22     	; 0x145a <__mulsf3x>
    1444:	c4 cf       	rjmp	.-120    	; 0x13ce <__fp_round>
    1446:	b5 df       	rcall	.-150    	; 0x13b2 <__fp_pscA>
    1448:	28 f0       	brcs	.+10     	; 0x1454 <__mulsf3+0x12>
    144a:	ba df       	rcall	.-140    	; 0x13c0 <__fp_pscB>
    144c:	18 f0       	brcs	.+6      	; 0x1454 <__mulsf3+0x12>
    144e:	95 23       	and	r25, r21
    1450:	09 f0       	breq	.+2      	; 0x1454 <__mulsf3+0x12>
    1452:	70 cf       	rjmp	.-288    	; 0x1334 <__fp_inf>
    1454:	75 cf       	rjmp	.-278    	; 0x1340 <__fp_nan>
    1456:	11 24       	eor	r1, r1
    1458:	ee cf       	rjmp	.-36     	; 0x1436 <__fp_szero>

0000145a <__mulsf3x>:
    145a:	ca df       	rcall	.-108    	; 0x13f0 <__fp_split3>
    145c:	a0 f3       	brcs	.-24     	; 0x1446 <__mulsf3+0x4>

0000145e <__mulsf3_pse>:
    145e:	95 9f       	mul	r25, r21
    1460:	d1 f3       	breq	.-12     	; 0x1456 <__mulsf3+0x14>
    1462:	95 0f       	add	r25, r21
    1464:	50 e0       	ldi	r21, 0x00	; 0
    1466:	55 1f       	adc	r21, r21
    1468:	62 9f       	mul	r22, r18
    146a:	f0 01       	movw	r30, r0
    146c:	72 9f       	mul	r23, r18
    146e:	bb 27       	eor	r27, r27
    1470:	f0 0d       	add	r31, r0
    1472:	b1 1d       	adc	r27, r1
    1474:	63 9f       	mul	r22, r19
    1476:	aa 27       	eor	r26, r26
    1478:	f0 0d       	add	r31, r0
    147a:	b1 1d       	adc	r27, r1
    147c:	aa 1f       	adc	r26, r26
    147e:	64 9f       	mul	r22, r20
    1480:	66 27       	eor	r22, r22
    1482:	b0 0d       	add	r27, r0
    1484:	a1 1d       	adc	r26, r1
    1486:	66 1f       	adc	r22, r22
    1488:	82 9f       	mul	r24, r18
    148a:	22 27       	eor	r18, r18
    148c:	b0 0d       	add	r27, r0
    148e:	a1 1d       	adc	r26, r1
    1490:	62 1f       	adc	r22, r18
    1492:	73 9f       	mul	r23, r19
    1494:	b0 0d       	add	r27, r0
    1496:	a1 1d       	adc	r26, r1
    1498:	62 1f       	adc	r22, r18
    149a:	83 9f       	mul	r24, r19
    149c:	a0 0d       	add	r26, r0
    149e:	61 1d       	adc	r22, r1
    14a0:	22 1f       	adc	r18, r18
    14a2:	74 9f       	mul	r23, r20
    14a4:	33 27       	eor	r19, r19
    14a6:	a0 0d       	add	r26, r0
    14a8:	61 1d       	adc	r22, r1
    14aa:	23 1f       	adc	r18, r19
    14ac:	84 9f       	mul	r24, r20
    14ae:	60 0d       	add	r22, r0
    14b0:	21 1d       	adc	r18, r1
    14b2:	82 2f       	mov	r24, r18
    14b4:	76 2f       	mov	r23, r22
    14b6:	6a 2f       	mov	r22, r26
    14b8:	11 24       	eor	r1, r1
    14ba:	9f 57       	subi	r25, 0x7F	; 127
    14bc:	50 40       	sbci	r21, 0x00	; 0
    14be:	8a f0       	brmi	.+34     	; 0x14e2 <__mulsf3_pse+0x84>
    14c0:	e1 f0       	breq	.+56     	; 0x14fa <__mulsf3_pse+0x9c>
    14c2:	88 23       	and	r24, r24
    14c4:	4a f0       	brmi	.+18     	; 0x14d8 <__mulsf3_pse+0x7a>
    14c6:	ee 0f       	add	r30, r30
    14c8:	ff 1f       	adc	r31, r31
    14ca:	bb 1f       	adc	r27, r27
    14cc:	66 1f       	adc	r22, r22
    14ce:	77 1f       	adc	r23, r23
    14d0:	88 1f       	adc	r24, r24
    14d2:	91 50       	subi	r25, 0x01	; 1
    14d4:	50 40       	sbci	r21, 0x00	; 0
    14d6:	a9 f7       	brne	.-22     	; 0x14c2 <__mulsf3_pse+0x64>
    14d8:	9e 3f       	cpi	r25, 0xFE	; 254
    14da:	51 05       	cpc	r21, r1
    14dc:	70 f0       	brcs	.+28     	; 0x14fa <__mulsf3_pse+0x9c>
    14de:	2a cf       	rjmp	.-428    	; 0x1334 <__fp_inf>
    14e0:	aa cf       	rjmp	.-172    	; 0x1436 <__fp_szero>
    14e2:	5f 3f       	cpi	r21, 0xFF	; 255
    14e4:	ec f3       	brlt	.-6      	; 0x14e0 <__mulsf3_pse+0x82>
    14e6:	98 3e       	cpi	r25, 0xE8	; 232
    14e8:	dc f3       	brlt	.-10     	; 0x14e0 <__mulsf3_pse+0x82>
    14ea:	86 95       	lsr	r24
    14ec:	77 95       	ror	r23
    14ee:	67 95       	ror	r22
    14f0:	b7 95       	ror	r27
    14f2:	f7 95       	ror	r31
    14f4:	e7 95       	ror	r30
    14f6:	9f 5f       	subi	r25, 0xFF	; 255
    14f8:	c1 f7       	brne	.-16     	; 0x14ea <__mulsf3_pse+0x8c>
    14fa:	fe 2b       	or	r31, r30
    14fc:	88 0f       	add	r24, r24
    14fe:	91 1d       	adc	r25, r1
    1500:	96 95       	lsr	r25
    1502:	87 95       	ror	r24
    1504:	97 f9       	bld	r25, 7
    1506:	08 95       	ret

00001508 <sin>:
    1508:	9f 93       	push	r25
    150a:	5c d0       	rcall	.+184    	; 0x15c4 <__fp_rempio2>
    150c:	0f 90       	pop	r0
    150e:	07 fc       	sbrc	r0, 7
    1510:	ee 5f       	subi	r30, 0xFE	; 254
    1512:	7f c0       	rjmp	.+254    	; 0x1612 <__fp_sinus>
    1514:	11 f4       	brne	.+4      	; 0x151a <sin+0x12>
    1516:	0e f4       	brtc	.+2      	; 0x151a <sin+0x12>
    1518:	13 cf       	rjmp	.-474    	; 0x1340 <__fp_nan>
    151a:	3e c0       	rjmp	.+124    	; 0x1598 <__fp_mpack>

0000151c <sqrt>:
    151c:	71 df       	rcall	.-286    	; 0x1400 <__fp_splitA>
    151e:	d0 f3       	brcs	.-12     	; 0x1514 <sin+0xc>
    1520:	99 23       	and	r25, r25
    1522:	d9 f3       	breq	.-10     	; 0x151a <sin+0x12>
    1524:	ce f3       	brts	.-14     	; 0x1518 <sin+0x10>
    1526:	9f 57       	subi	r25, 0x7F	; 127
    1528:	55 0b       	sbc	r21, r21
    152a:	87 ff       	sbrs	r24, 7
    152c:	43 d0       	rcall	.+134    	; 0x15b4 <__fp_norm2>
    152e:	00 24       	eor	r0, r0
    1530:	a0 e6       	ldi	r26, 0x60	; 96
    1532:	40 ea       	ldi	r20, 0xA0	; 160
    1534:	90 01       	movw	r18, r0
    1536:	80 58       	subi	r24, 0x80	; 128
    1538:	56 95       	lsr	r21
    153a:	97 95       	ror	r25
    153c:	28 f4       	brcc	.+10     	; 0x1548 <sqrt+0x2c>
    153e:	80 5c       	subi	r24, 0xC0	; 192
    1540:	66 0f       	add	r22, r22
    1542:	77 1f       	adc	r23, r23
    1544:	88 1f       	adc	r24, r24
    1546:	20 f0       	brcs	.+8      	; 0x1550 <sqrt+0x34>
    1548:	26 17       	cp	r18, r22
    154a:	37 07       	cpc	r19, r23
    154c:	48 07       	cpc	r20, r24
    154e:	30 f4       	brcc	.+12     	; 0x155c <sqrt+0x40>
    1550:	62 1b       	sub	r22, r18
    1552:	73 0b       	sbc	r23, r19
    1554:	84 0b       	sbc	r24, r20
    1556:	20 29       	or	r18, r0
    1558:	31 29       	or	r19, r1
    155a:	4a 2b       	or	r20, r26
    155c:	a6 95       	lsr	r26
    155e:	17 94       	ror	r1
    1560:	07 94       	ror	r0
    1562:	20 25       	eor	r18, r0
    1564:	31 25       	eor	r19, r1
    1566:	4a 27       	eor	r20, r26
    1568:	58 f7       	brcc	.-42     	; 0x1540 <sqrt+0x24>
    156a:	66 0f       	add	r22, r22
    156c:	77 1f       	adc	r23, r23
    156e:	88 1f       	adc	r24, r24
    1570:	20 f0       	brcs	.+8      	; 0x157a <sqrt+0x5e>
    1572:	26 17       	cp	r18, r22
    1574:	37 07       	cpc	r19, r23
    1576:	48 07       	cpc	r20, r24
    1578:	30 f4       	brcc	.+12     	; 0x1586 <sqrt+0x6a>
    157a:	62 0b       	sbc	r22, r18
    157c:	73 0b       	sbc	r23, r19
    157e:	84 0b       	sbc	r24, r20
    1580:	20 0d       	add	r18, r0
    1582:	31 1d       	adc	r19, r1
    1584:	41 1d       	adc	r20, r1
    1586:	a0 95       	com	r26
    1588:	81 f7       	brne	.-32     	; 0x156a <sqrt+0x4e>
    158a:	b9 01       	movw	r22, r18
    158c:	84 2f       	mov	r24, r20
    158e:	91 58       	subi	r25, 0x81	; 129
    1590:	88 0f       	add	r24, r24
    1592:	96 95       	lsr	r25
    1594:	87 95       	ror	r24
    1596:	08 95       	ret

00001598 <__fp_mpack>:
    1598:	9f 3f       	cpi	r25, 0xFF	; 255
    159a:	31 f0       	breq	.+12     	; 0x15a8 <__fp_mpack_finite+0xc>

0000159c <__fp_mpack_finite>:
    159c:	91 50       	subi	r25, 0x01	; 1
    159e:	20 f4       	brcc	.+8      	; 0x15a8 <__fp_mpack_finite+0xc>
    15a0:	87 95       	ror	r24
    15a2:	77 95       	ror	r23
    15a4:	67 95       	ror	r22
    15a6:	b7 95       	ror	r27
    15a8:	88 0f       	add	r24, r24
    15aa:	91 1d       	adc	r25, r1
    15ac:	96 95       	lsr	r25
    15ae:	87 95       	ror	r24
    15b0:	97 f9       	bld	r25, 7
    15b2:	08 95       	ret

000015b4 <__fp_norm2>:
    15b4:	91 50       	subi	r25, 0x01	; 1
    15b6:	50 40       	sbci	r21, 0x00	; 0
    15b8:	66 0f       	add	r22, r22
    15ba:	77 1f       	adc	r23, r23
    15bc:	88 1f       	adc	r24, r24
    15be:	d2 f7       	brpl	.-12     	; 0x15b4 <__fp_norm2>
    15c0:	08 95       	ret
    15c2:	be ce       	rjmp	.-644    	; 0x1340 <__fp_nan>

000015c4 <__fp_rempio2>:
    15c4:	1d df       	rcall	.-454    	; 0x1400 <__fp_splitA>
    15c6:	e8 f3       	brcs	.-6      	; 0x15c2 <__fp_norm2+0xe>
    15c8:	e8 94       	clt
    15ca:	e0 e0       	ldi	r30, 0x00	; 0
    15cc:	bb 27       	eor	r27, r27
    15ce:	9f 57       	subi	r25, 0x7F	; 127
    15d0:	f0 f0       	brcs	.+60     	; 0x160e <__fp_rempio2+0x4a>
    15d2:	2a ed       	ldi	r18, 0xDA	; 218
    15d4:	3f e0       	ldi	r19, 0x0F	; 15
    15d6:	49 ec       	ldi	r20, 0xC9	; 201
    15d8:	06 c0       	rjmp	.+12     	; 0x15e6 <__fp_rempio2+0x22>
    15da:	ee 0f       	add	r30, r30
    15dc:	bb 0f       	add	r27, r27
    15de:	66 1f       	adc	r22, r22
    15e0:	77 1f       	adc	r23, r23
    15e2:	88 1f       	adc	r24, r24
    15e4:	28 f0       	brcs	.+10     	; 0x15f0 <__fp_rempio2+0x2c>
    15e6:	b2 3a       	cpi	r27, 0xA2	; 162
    15e8:	62 07       	cpc	r22, r18
    15ea:	73 07       	cpc	r23, r19
    15ec:	84 07       	cpc	r24, r20
    15ee:	28 f0       	brcs	.+10     	; 0x15fa <__fp_rempio2+0x36>
    15f0:	b2 5a       	subi	r27, 0xA2	; 162
    15f2:	62 0b       	sbc	r22, r18
    15f4:	73 0b       	sbc	r23, r19
    15f6:	84 0b       	sbc	r24, r20
    15f8:	e3 95       	inc	r30
    15fa:	9a 95       	dec	r25
    15fc:	72 f7       	brpl	.-36     	; 0x15da <__fp_rempio2+0x16>
    15fe:	80 38       	cpi	r24, 0x80	; 128
    1600:	30 f4       	brcc	.+12     	; 0x160e <__fp_rempio2+0x4a>
    1602:	9a 95       	dec	r25
    1604:	bb 0f       	add	r27, r27
    1606:	66 1f       	adc	r22, r22
    1608:	77 1f       	adc	r23, r23
    160a:	88 1f       	adc	r24, r24
    160c:	d2 f7       	brpl	.-12     	; 0x1602 <__fp_rempio2+0x3e>
    160e:	90 48       	sbci	r25, 0x80	; 128
    1610:	c5 cf       	rjmp	.-118    	; 0x159c <__fp_mpack_finite>

00001612 <__fp_sinus>:
    1612:	ef 93       	push	r30
    1614:	e0 ff       	sbrs	r30, 0
    1616:	06 c0       	rjmp	.+12     	; 0x1624 <__fp_sinus+0x12>
    1618:	a2 ea       	ldi	r26, 0xA2	; 162
    161a:	2a ed       	ldi	r18, 0xDA	; 218
    161c:	3f e0       	ldi	r19, 0x0F	; 15
    161e:	49 ec       	ldi	r20, 0xC9	; 201
    1620:	5f eb       	ldi	r21, 0xBF	; 191
    1622:	2d dd       	rcall	.-1446   	; 0x107e <__addsf3x>
    1624:	d4 de       	rcall	.-600    	; 0x13ce <__fp_round>
    1626:	0f 90       	pop	r0
    1628:	03 94       	inc	r0
    162a:	01 fc       	sbrc	r0, 1
    162c:	90 58       	subi	r25, 0x80	; 128
    162e:	e0 e2       	ldi	r30, 0x20	; 32
    1630:	f1 e0       	ldi	r31, 0x01	; 1
    1632:	ae ce       	rjmp	.-676    	; 0x1390 <__fp_powsodd>

00001634 <__divmodhi4>:
    1634:	97 fb       	bst	r25, 7
    1636:	07 2e       	mov	r0, r23
    1638:	16 f4       	brtc	.+4      	; 0x163e <__divmodhi4+0xa>
    163a:	00 94       	com	r0
    163c:	06 d0       	rcall	.+12     	; 0x164a <__divmodhi4_neg1>
    163e:	77 fd       	sbrc	r23, 7
    1640:	08 d0       	rcall	.+16     	; 0x1652 <__divmodhi4_neg2>
    1642:	27 d0       	rcall	.+78     	; 0x1692 <__udivmodhi4>
    1644:	07 fc       	sbrc	r0, 7
    1646:	05 d0       	rcall	.+10     	; 0x1652 <__divmodhi4_neg2>
    1648:	3e f4       	brtc	.+14     	; 0x1658 <__divmodhi4_exit>

0000164a <__divmodhi4_neg1>:
    164a:	90 95       	com	r25
    164c:	81 95       	neg	r24
    164e:	9f 4f       	sbci	r25, 0xFF	; 255
    1650:	08 95       	ret

00001652 <__divmodhi4_neg2>:
    1652:	70 95       	com	r23
    1654:	61 95       	neg	r22
    1656:	7f 4f       	sbci	r23, 0xFF	; 255

00001658 <__divmodhi4_exit>:
    1658:	08 95       	ret

0000165a <__divmodsi4>:
    165a:	05 2e       	mov	r0, r21
    165c:	97 fb       	bst	r25, 7
    165e:	16 f4       	brtc	.+4      	; 0x1664 <__divmodsi4+0xa>
    1660:	00 94       	com	r0
    1662:	0f d0       	rcall	.+30     	; 0x1682 <__negsi2>
    1664:	57 fd       	sbrc	r21, 7
    1666:	05 d0       	rcall	.+10     	; 0x1672 <__divmodsi4_neg2>
    1668:	28 d0       	rcall	.+80     	; 0x16ba <__udivmodsi4>
    166a:	07 fc       	sbrc	r0, 7
    166c:	02 d0       	rcall	.+4      	; 0x1672 <__divmodsi4_neg2>
    166e:	46 f4       	brtc	.+16     	; 0x1680 <__divmodsi4_exit>
    1670:	08 c0       	rjmp	.+16     	; 0x1682 <__negsi2>

00001672 <__divmodsi4_neg2>:
    1672:	50 95       	com	r21
    1674:	40 95       	com	r20
    1676:	30 95       	com	r19
    1678:	21 95       	neg	r18
    167a:	3f 4f       	sbci	r19, 0xFF	; 255
    167c:	4f 4f       	sbci	r20, 0xFF	; 255
    167e:	5f 4f       	sbci	r21, 0xFF	; 255

00001680 <__divmodsi4_exit>:
    1680:	08 95       	ret

00001682 <__negsi2>:
    1682:	90 95       	com	r25
    1684:	80 95       	com	r24
    1686:	70 95       	com	r23
    1688:	61 95       	neg	r22
    168a:	7f 4f       	sbci	r23, 0xFF	; 255
    168c:	8f 4f       	sbci	r24, 0xFF	; 255
    168e:	9f 4f       	sbci	r25, 0xFF	; 255
    1690:	08 95       	ret

00001692 <__udivmodhi4>:
    1692:	aa 1b       	sub	r26, r26
    1694:	bb 1b       	sub	r27, r27
    1696:	51 e1       	ldi	r21, 0x11	; 17
    1698:	07 c0       	rjmp	.+14     	; 0x16a8 <__udivmodhi4_ep>

0000169a <__udivmodhi4_loop>:
    169a:	aa 1f       	adc	r26, r26
    169c:	bb 1f       	adc	r27, r27
    169e:	a6 17       	cp	r26, r22
    16a0:	b7 07       	cpc	r27, r23
    16a2:	10 f0       	brcs	.+4      	; 0x16a8 <__udivmodhi4_ep>
    16a4:	a6 1b       	sub	r26, r22
    16a6:	b7 0b       	sbc	r27, r23

000016a8 <__udivmodhi4_ep>:
    16a8:	88 1f       	adc	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	5a 95       	dec	r21
    16ae:	a9 f7       	brne	.-22     	; 0x169a <__udivmodhi4_loop>
    16b0:	80 95       	com	r24
    16b2:	90 95       	com	r25
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	08 95       	ret

000016ba <__udivmodsi4>:
    16ba:	a1 e2       	ldi	r26, 0x21	; 33
    16bc:	1a 2e       	mov	r1, r26
    16be:	aa 1b       	sub	r26, r26
    16c0:	bb 1b       	sub	r27, r27
    16c2:	fd 01       	movw	r30, r26
    16c4:	0d c0       	rjmp	.+26     	; 0x16e0 <__udivmodsi4_ep>

000016c6 <__udivmodsi4_loop>:
    16c6:	aa 1f       	adc	r26, r26
    16c8:	bb 1f       	adc	r27, r27
    16ca:	ee 1f       	adc	r30, r30
    16cc:	ff 1f       	adc	r31, r31
    16ce:	a2 17       	cp	r26, r18
    16d0:	b3 07       	cpc	r27, r19
    16d2:	e4 07       	cpc	r30, r20
    16d4:	f5 07       	cpc	r31, r21
    16d6:	20 f0       	brcs	.+8      	; 0x16e0 <__udivmodsi4_ep>
    16d8:	a2 1b       	sub	r26, r18
    16da:	b3 0b       	sbc	r27, r19
    16dc:	e4 0b       	sbc	r30, r20
    16de:	f5 0b       	sbc	r31, r21

000016e0 <__udivmodsi4_ep>:
    16e0:	66 1f       	adc	r22, r22
    16e2:	77 1f       	adc	r23, r23
    16e4:	88 1f       	adc	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	1a 94       	dec	r1
    16ea:	69 f7       	brne	.-38     	; 0x16c6 <__udivmodsi4_loop>
    16ec:	60 95       	com	r22
    16ee:	70 95       	com	r23
    16f0:	80 95       	com	r24
    16f2:	90 95       	com	r25
    16f4:	9b 01       	movw	r18, r22
    16f6:	ac 01       	movw	r20, r24
    16f8:	bd 01       	movw	r22, r26
    16fa:	cf 01       	movw	r24, r30
    16fc:	08 95       	ret

000016fe <__itoa_ncheck>:
    16fe:	bb 27       	eor	r27, r27
    1700:	4a 30       	cpi	r20, 0x0A	; 10
    1702:	31 f4       	brne	.+12     	; 0x1710 <__itoa_ncheck+0x12>
    1704:	99 23       	and	r25, r25
    1706:	22 f4       	brpl	.+8      	; 0x1710 <__itoa_ncheck+0x12>
    1708:	bd e2       	ldi	r27, 0x2D	; 45
    170a:	90 95       	com	r25
    170c:	81 95       	neg	r24
    170e:	9f 4f       	sbci	r25, 0xFF	; 255
    1710:	01 c0       	rjmp	.+2      	; 0x1714 <__utoa_common>

00001712 <__utoa_ncheck>:
    1712:	bb 27       	eor	r27, r27

00001714 <__utoa_common>:
    1714:	fb 01       	movw	r30, r22
    1716:	55 27       	eor	r21, r21
    1718:	aa 27       	eor	r26, r26
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	aa 1f       	adc	r26, r26
    1720:	a4 17       	cp	r26, r20
    1722:	10 f0       	brcs	.+4      	; 0x1728 <__utoa_common+0x14>
    1724:	a4 1b       	sub	r26, r20
    1726:	83 95       	inc	r24
    1728:	50 51       	subi	r21, 0x10	; 16
    172a:	b9 f7       	brne	.-18     	; 0x171a <__utoa_common+0x6>
    172c:	a0 5d       	subi	r26, 0xD0	; 208
    172e:	aa 33       	cpi	r26, 0x3A	; 58
    1730:	08 f0       	brcs	.+2      	; 0x1734 <__utoa_common+0x20>
    1732:	a9 5d       	subi	r26, 0xD9	; 217
    1734:	a1 93       	st	Z+, r26
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	79 f7       	brne	.-34     	; 0x1718 <__utoa_common+0x4>
    173a:	b1 11       	cpse	r27, r1
    173c:	b1 93       	st	Z+, r27
    173e:	11 92       	st	Z+, r1
    1740:	cb 01       	movw	r24, r22
    1742:	e7 c3       	rjmp	.+1998   	; 0x1f12 <strrev>

00001744 <fdevopen>:
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	31 f4       	brne	.+12     	; 0x175c <fdevopen+0x18>
    1750:	61 15       	cp	r22, r1
    1752:	71 05       	cpc	r23, r1
    1754:	19 f4       	brne	.+6      	; 0x175c <fdevopen+0x18>
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	39 c0       	rjmp	.+114    	; 0x17ce <fdevopen+0x8a>
    175c:	8b 01       	movw	r16, r22
    175e:	ec 01       	movw	r28, r24
    1760:	6e e0       	ldi	r22, 0x0E	; 14
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	7c d2       	rcall	.+1272   	; 0x1c62 <calloc>
    176a:	fc 01       	movw	r30, r24
    176c:	89 2b       	or	r24, r25
    176e:	99 f3       	breq	.-26     	; 0x1756 <fdevopen+0x12>
    1770:	80 e8       	ldi	r24, 0x80	; 128
    1772:	83 83       	std	Z+3, r24	; 0x03
    1774:	01 15       	cp	r16, r1
    1776:	11 05       	cpc	r17, r1
    1778:	71 f0       	breq	.+28     	; 0x1796 <fdevopen+0x52>
    177a:	13 87       	std	Z+11, r17	; 0x0b
    177c:	02 87       	std	Z+10, r16	; 0x0a
    177e:	81 e8       	ldi	r24, 0x81	; 129
    1780:	83 83       	std	Z+3, r24	; 0x03
    1782:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <__iob>
    1786:	90 91 ba 05 	lds	r25, 0x05BA	; 0x8005ba <__iob+0x1>
    178a:	89 2b       	or	r24, r25
    178c:	21 f4       	brne	.+8      	; 0x1796 <fdevopen+0x52>
    178e:	f0 93 ba 05 	sts	0x05BA, r31	; 0x8005ba <__iob+0x1>
    1792:	e0 93 b9 05 	sts	0x05B9, r30	; 0x8005b9 <__iob>
    1796:	20 97       	sbiw	r28, 0x00	; 0
    1798:	c9 f0       	breq	.+50     	; 0x17cc <fdevopen+0x88>
    179a:	d1 87       	std	Z+9, r29	; 0x09
    179c:	c0 87       	std	Z+8, r28	; 0x08
    179e:	83 81       	ldd	r24, Z+3	; 0x03
    17a0:	82 60       	ori	r24, 0x02	; 2
    17a2:	83 83       	std	Z+3, r24	; 0x03
    17a4:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <__iob+0x2>
    17a8:	90 91 bc 05 	lds	r25, 0x05BC	; 0x8005bc <__iob+0x3>
    17ac:	89 2b       	or	r24, r25
    17ae:	71 f4       	brne	.+28     	; 0x17cc <fdevopen+0x88>
    17b0:	f0 93 bc 05 	sts	0x05BC, r31	; 0x8005bc <__iob+0x3>
    17b4:	e0 93 bb 05 	sts	0x05BB, r30	; 0x8005bb <__iob+0x2>
    17b8:	80 91 bd 05 	lds	r24, 0x05BD	; 0x8005bd <__iob+0x4>
    17bc:	90 91 be 05 	lds	r25, 0x05BE	; 0x8005be <__iob+0x5>
    17c0:	89 2b       	or	r24, r25
    17c2:	21 f4       	brne	.+8      	; 0x17cc <fdevopen+0x88>
    17c4:	f0 93 be 05 	sts	0x05BE, r31	; 0x8005be <__iob+0x5>
    17c8:	e0 93 bd 05 	sts	0x05BD, r30	; 0x8005bd <__iob+0x4>
    17cc:	cf 01       	movw	r24, r30
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	1f 91       	pop	r17
    17d4:	0f 91       	pop	r16
    17d6:	08 95       	ret

000017d8 <printf>:
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	ae 01       	movw	r20, r28
    17e2:	4a 5f       	subi	r20, 0xFA	; 250
    17e4:	5f 4f       	sbci	r21, 0xFF	; 255
    17e6:	fa 01       	movw	r30, r20
    17e8:	61 91       	ld	r22, Z+
    17ea:	71 91       	ld	r23, Z+
    17ec:	af 01       	movw	r20, r30
    17ee:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <__iob+0x2>
    17f2:	90 91 bc 05 	lds	r25, 0x05BC	; 0x8005bc <__iob+0x3>
    17f6:	38 d0       	rcall	.+112    	; 0x1868 <vfprintf>
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	08 95       	ret

000017fe <putchar>:
    17fe:	60 91 bb 05 	lds	r22, 0x05BB	; 0x8005bb <__iob+0x2>
    1802:	70 91 bc 05 	lds	r23, 0x05BC	; 0x8005bc <__iob+0x3>
    1806:	95 c3       	rjmp	.+1834   	; 0x1f32 <fputc>

00001808 <puts>:
    1808:	0f 93       	push	r16
    180a:	1f 93       	push	r17
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	e0 91 bb 05 	lds	r30, 0x05BB	; 0x8005bb <__iob+0x2>
    1814:	f0 91 bc 05 	lds	r31, 0x05BC	; 0x8005bc <__iob+0x3>
    1818:	23 81       	ldd	r18, Z+3	; 0x03
    181a:	21 ff       	sbrs	r18, 1
    181c:	1b c0       	rjmp	.+54     	; 0x1854 <puts+0x4c>
    181e:	8c 01       	movw	r16, r24
    1820:	d0 e0       	ldi	r29, 0x00	; 0
    1822:	c0 e0       	ldi	r28, 0x00	; 0
    1824:	f8 01       	movw	r30, r16
    1826:	81 91       	ld	r24, Z+
    1828:	8f 01       	movw	r16, r30
    182a:	60 91 bb 05 	lds	r22, 0x05BB	; 0x8005bb <__iob+0x2>
    182e:	70 91 bc 05 	lds	r23, 0x05BC	; 0x8005bc <__iob+0x3>
    1832:	db 01       	movw	r26, r22
    1834:	18 96       	adiw	r26, 0x08	; 8
    1836:	ed 91       	ld	r30, X+
    1838:	fc 91       	ld	r31, X
    183a:	19 97       	sbiw	r26, 0x09	; 9
    183c:	88 23       	and	r24, r24
    183e:	31 f0       	breq	.+12     	; 0x184c <puts+0x44>
    1840:	19 95       	eicall
    1842:	89 2b       	or	r24, r25
    1844:	79 f3       	breq	.-34     	; 0x1824 <puts+0x1c>
    1846:	df ef       	ldi	r29, 0xFF	; 255
    1848:	cf ef       	ldi	r28, 0xFF	; 255
    184a:	ec cf       	rjmp	.-40     	; 0x1824 <puts+0x1c>
    184c:	8a e0       	ldi	r24, 0x0A	; 10
    184e:	19 95       	eicall
    1850:	89 2b       	or	r24, r25
    1852:	19 f0       	breq	.+6      	; 0x185a <puts+0x52>
    1854:	8f ef       	ldi	r24, 0xFF	; 255
    1856:	9f ef       	ldi	r25, 0xFF	; 255
    1858:	02 c0       	rjmp	.+4      	; 0x185e <puts+0x56>
    185a:	8d 2f       	mov	r24, r29
    185c:	9c 2f       	mov	r25, r28
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    1864:	0f 91       	pop	r16
    1866:	08 95       	ret

00001868 <vfprintf>:
    1868:	2f 92       	push	r2
    186a:	3f 92       	push	r3
    186c:	4f 92       	push	r4
    186e:	5f 92       	push	r5
    1870:	6f 92       	push	r6
    1872:	7f 92       	push	r7
    1874:	8f 92       	push	r8
    1876:	9f 92       	push	r9
    1878:	af 92       	push	r10
    187a:	bf 92       	push	r11
    187c:	cf 92       	push	r12
    187e:	df 92       	push	r13
    1880:	ef 92       	push	r14
    1882:	ff 92       	push	r15
    1884:	0f 93       	push	r16
    1886:	1f 93       	push	r17
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	2b 97       	sbiw	r28, 0x0b	; 11
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	de bf       	out	0x3e, r29	; 62
    1898:	0f be       	out	0x3f, r0	; 63
    189a:	cd bf       	out	0x3d, r28	; 61
    189c:	6c 01       	movw	r12, r24
    189e:	7b 01       	movw	r14, r22
    18a0:	8a 01       	movw	r16, r20
    18a2:	fc 01       	movw	r30, r24
    18a4:	17 82       	std	Z+7, r1	; 0x07
    18a6:	16 82       	std	Z+6, r1	; 0x06
    18a8:	83 81       	ldd	r24, Z+3	; 0x03
    18aa:	81 ff       	sbrs	r24, 1
    18ac:	bf c1       	rjmp	.+894    	; 0x1c2c <vfprintf+0x3c4>
    18ae:	ce 01       	movw	r24, r28
    18b0:	01 96       	adiw	r24, 0x01	; 1
    18b2:	3c 01       	movw	r6, r24
    18b4:	f6 01       	movw	r30, r12
    18b6:	93 81       	ldd	r25, Z+3	; 0x03
    18b8:	f7 01       	movw	r30, r14
    18ba:	93 fd       	sbrc	r25, 3
    18bc:	85 91       	lpm	r24, Z+
    18be:	93 ff       	sbrs	r25, 3
    18c0:	81 91       	ld	r24, Z+
    18c2:	7f 01       	movw	r14, r30
    18c4:	88 23       	and	r24, r24
    18c6:	09 f4       	brne	.+2      	; 0x18ca <vfprintf+0x62>
    18c8:	ad c1       	rjmp	.+858    	; 0x1c24 <vfprintf+0x3bc>
    18ca:	85 32       	cpi	r24, 0x25	; 37
    18cc:	39 f4       	brne	.+14     	; 0x18dc <vfprintf+0x74>
    18ce:	93 fd       	sbrc	r25, 3
    18d0:	85 91       	lpm	r24, Z+
    18d2:	93 ff       	sbrs	r25, 3
    18d4:	81 91       	ld	r24, Z+
    18d6:	7f 01       	movw	r14, r30
    18d8:	85 32       	cpi	r24, 0x25	; 37
    18da:	21 f4       	brne	.+8      	; 0x18e4 <vfprintf+0x7c>
    18dc:	b6 01       	movw	r22, r12
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	28 d3       	rcall	.+1616   	; 0x1f32 <fputc>
    18e2:	e8 cf       	rjmp	.-48     	; 0x18b4 <vfprintf+0x4c>
    18e4:	91 2c       	mov	r9, r1
    18e6:	21 2c       	mov	r2, r1
    18e8:	31 2c       	mov	r3, r1
    18ea:	ff e1       	ldi	r31, 0x1F	; 31
    18ec:	f3 15       	cp	r31, r3
    18ee:	d8 f0       	brcs	.+54     	; 0x1926 <vfprintf+0xbe>
    18f0:	8b 32       	cpi	r24, 0x2B	; 43
    18f2:	79 f0       	breq	.+30     	; 0x1912 <vfprintf+0xaa>
    18f4:	38 f4       	brcc	.+14     	; 0x1904 <vfprintf+0x9c>
    18f6:	80 32       	cpi	r24, 0x20	; 32
    18f8:	79 f0       	breq	.+30     	; 0x1918 <vfprintf+0xb0>
    18fa:	83 32       	cpi	r24, 0x23	; 35
    18fc:	a1 f4       	brne	.+40     	; 0x1926 <vfprintf+0xbe>
    18fe:	23 2d       	mov	r18, r3
    1900:	20 61       	ori	r18, 0x10	; 16
    1902:	1d c0       	rjmp	.+58     	; 0x193e <vfprintf+0xd6>
    1904:	8d 32       	cpi	r24, 0x2D	; 45
    1906:	61 f0       	breq	.+24     	; 0x1920 <vfprintf+0xb8>
    1908:	80 33       	cpi	r24, 0x30	; 48
    190a:	69 f4       	brne	.+26     	; 0x1926 <vfprintf+0xbe>
    190c:	23 2d       	mov	r18, r3
    190e:	21 60       	ori	r18, 0x01	; 1
    1910:	16 c0       	rjmp	.+44     	; 0x193e <vfprintf+0xd6>
    1912:	83 2d       	mov	r24, r3
    1914:	82 60       	ori	r24, 0x02	; 2
    1916:	38 2e       	mov	r3, r24
    1918:	e3 2d       	mov	r30, r3
    191a:	e4 60       	ori	r30, 0x04	; 4
    191c:	3e 2e       	mov	r3, r30
    191e:	2a c0       	rjmp	.+84     	; 0x1974 <vfprintf+0x10c>
    1920:	f3 2d       	mov	r31, r3
    1922:	f8 60       	ori	r31, 0x08	; 8
    1924:	1d c0       	rjmp	.+58     	; 0x1960 <vfprintf+0xf8>
    1926:	37 fc       	sbrc	r3, 7
    1928:	2d c0       	rjmp	.+90     	; 0x1984 <vfprintf+0x11c>
    192a:	20 ed       	ldi	r18, 0xD0	; 208
    192c:	28 0f       	add	r18, r24
    192e:	2a 30       	cpi	r18, 0x0A	; 10
    1930:	40 f0       	brcs	.+16     	; 0x1942 <vfprintf+0xda>
    1932:	8e 32       	cpi	r24, 0x2E	; 46
    1934:	b9 f4       	brne	.+46     	; 0x1964 <vfprintf+0xfc>
    1936:	36 fc       	sbrc	r3, 6
    1938:	75 c1       	rjmp	.+746    	; 0x1c24 <vfprintf+0x3bc>
    193a:	23 2d       	mov	r18, r3
    193c:	20 64       	ori	r18, 0x40	; 64
    193e:	32 2e       	mov	r3, r18
    1940:	19 c0       	rjmp	.+50     	; 0x1974 <vfprintf+0x10c>
    1942:	36 fe       	sbrs	r3, 6
    1944:	06 c0       	rjmp	.+12     	; 0x1952 <vfprintf+0xea>
    1946:	8a e0       	ldi	r24, 0x0A	; 10
    1948:	98 9e       	mul	r9, r24
    194a:	20 0d       	add	r18, r0
    194c:	11 24       	eor	r1, r1
    194e:	92 2e       	mov	r9, r18
    1950:	11 c0       	rjmp	.+34     	; 0x1974 <vfprintf+0x10c>
    1952:	ea e0       	ldi	r30, 0x0A	; 10
    1954:	2e 9e       	mul	r2, r30
    1956:	20 0d       	add	r18, r0
    1958:	11 24       	eor	r1, r1
    195a:	22 2e       	mov	r2, r18
    195c:	f3 2d       	mov	r31, r3
    195e:	f0 62       	ori	r31, 0x20	; 32
    1960:	3f 2e       	mov	r3, r31
    1962:	08 c0       	rjmp	.+16     	; 0x1974 <vfprintf+0x10c>
    1964:	8c 36       	cpi	r24, 0x6C	; 108
    1966:	21 f4       	brne	.+8      	; 0x1970 <vfprintf+0x108>
    1968:	83 2d       	mov	r24, r3
    196a:	80 68       	ori	r24, 0x80	; 128
    196c:	38 2e       	mov	r3, r24
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <vfprintf+0x10c>
    1970:	88 36       	cpi	r24, 0x68	; 104
    1972:	41 f4       	brne	.+16     	; 0x1984 <vfprintf+0x11c>
    1974:	f7 01       	movw	r30, r14
    1976:	93 fd       	sbrc	r25, 3
    1978:	85 91       	lpm	r24, Z+
    197a:	93 ff       	sbrs	r25, 3
    197c:	81 91       	ld	r24, Z+
    197e:	7f 01       	movw	r14, r30
    1980:	81 11       	cpse	r24, r1
    1982:	b3 cf       	rjmp	.-154    	; 0x18ea <vfprintf+0x82>
    1984:	98 2f       	mov	r25, r24
    1986:	9f 7d       	andi	r25, 0xDF	; 223
    1988:	95 54       	subi	r25, 0x45	; 69
    198a:	93 30       	cpi	r25, 0x03	; 3
    198c:	28 f4       	brcc	.+10     	; 0x1998 <vfprintf+0x130>
    198e:	0c 5f       	subi	r16, 0xFC	; 252
    1990:	1f 4f       	sbci	r17, 0xFF	; 255
    1992:	9f e3       	ldi	r25, 0x3F	; 63
    1994:	99 83       	std	Y+1, r25	; 0x01
    1996:	0d c0       	rjmp	.+26     	; 0x19b2 <vfprintf+0x14a>
    1998:	83 36       	cpi	r24, 0x63	; 99
    199a:	31 f0       	breq	.+12     	; 0x19a8 <vfprintf+0x140>
    199c:	83 37       	cpi	r24, 0x73	; 115
    199e:	71 f0       	breq	.+28     	; 0x19bc <vfprintf+0x154>
    19a0:	83 35       	cpi	r24, 0x53	; 83
    19a2:	09 f0       	breq	.+2      	; 0x19a6 <vfprintf+0x13e>
    19a4:	55 c0       	rjmp	.+170    	; 0x1a50 <vfprintf+0x1e8>
    19a6:	20 c0       	rjmp	.+64     	; 0x19e8 <vfprintf+0x180>
    19a8:	f8 01       	movw	r30, r16
    19aa:	80 81       	ld	r24, Z
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	0e 5f       	subi	r16, 0xFE	; 254
    19b0:	1f 4f       	sbci	r17, 0xFF	; 255
    19b2:	88 24       	eor	r8, r8
    19b4:	83 94       	inc	r8
    19b6:	91 2c       	mov	r9, r1
    19b8:	53 01       	movw	r10, r6
    19ba:	12 c0       	rjmp	.+36     	; 0x19e0 <vfprintf+0x178>
    19bc:	28 01       	movw	r4, r16
    19be:	f2 e0       	ldi	r31, 0x02	; 2
    19c0:	4f 0e       	add	r4, r31
    19c2:	51 1c       	adc	r5, r1
    19c4:	f8 01       	movw	r30, r16
    19c6:	a0 80       	ld	r10, Z
    19c8:	b1 80       	ldd	r11, Z+1	; 0x01
    19ca:	36 fe       	sbrs	r3, 6
    19cc:	03 c0       	rjmp	.+6      	; 0x19d4 <vfprintf+0x16c>
    19ce:	69 2d       	mov	r22, r9
    19d0:	70 e0       	ldi	r23, 0x00	; 0
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <vfprintf+0x170>
    19d4:	6f ef       	ldi	r22, 0xFF	; 255
    19d6:	7f ef       	ldi	r23, 0xFF	; 255
    19d8:	c5 01       	movw	r24, r10
    19da:	90 d2       	rcall	.+1312   	; 0x1efc <strnlen>
    19dc:	4c 01       	movw	r8, r24
    19de:	82 01       	movw	r16, r4
    19e0:	f3 2d       	mov	r31, r3
    19e2:	ff 77       	andi	r31, 0x7F	; 127
    19e4:	3f 2e       	mov	r3, r31
    19e6:	15 c0       	rjmp	.+42     	; 0x1a12 <vfprintf+0x1aa>
    19e8:	28 01       	movw	r4, r16
    19ea:	22 e0       	ldi	r18, 0x02	; 2
    19ec:	42 0e       	add	r4, r18
    19ee:	51 1c       	adc	r5, r1
    19f0:	f8 01       	movw	r30, r16
    19f2:	a0 80       	ld	r10, Z
    19f4:	b1 80       	ldd	r11, Z+1	; 0x01
    19f6:	36 fe       	sbrs	r3, 6
    19f8:	03 c0       	rjmp	.+6      	; 0x1a00 <vfprintf+0x198>
    19fa:	69 2d       	mov	r22, r9
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <vfprintf+0x19c>
    1a00:	6f ef       	ldi	r22, 0xFF	; 255
    1a02:	7f ef       	ldi	r23, 0xFF	; 255
    1a04:	c5 01       	movw	r24, r10
    1a06:	68 d2       	rcall	.+1232   	; 0x1ed8 <strnlen_P>
    1a08:	4c 01       	movw	r8, r24
    1a0a:	f3 2d       	mov	r31, r3
    1a0c:	f0 68       	ori	r31, 0x80	; 128
    1a0e:	3f 2e       	mov	r3, r31
    1a10:	82 01       	movw	r16, r4
    1a12:	33 fc       	sbrc	r3, 3
    1a14:	19 c0       	rjmp	.+50     	; 0x1a48 <vfprintf+0x1e0>
    1a16:	82 2d       	mov	r24, r2
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	88 16       	cp	r8, r24
    1a1c:	99 06       	cpc	r9, r25
    1a1e:	a0 f4       	brcc	.+40     	; 0x1a48 <vfprintf+0x1e0>
    1a20:	b6 01       	movw	r22, r12
    1a22:	80 e2       	ldi	r24, 0x20	; 32
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	85 d2       	rcall	.+1290   	; 0x1f32 <fputc>
    1a28:	2a 94       	dec	r2
    1a2a:	f5 cf       	rjmp	.-22     	; 0x1a16 <vfprintf+0x1ae>
    1a2c:	f5 01       	movw	r30, r10
    1a2e:	37 fc       	sbrc	r3, 7
    1a30:	85 91       	lpm	r24, Z+
    1a32:	37 fe       	sbrs	r3, 7
    1a34:	81 91       	ld	r24, Z+
    1a36:	5f 01       	movw	r10, r30
    1a38:	b6 01       	movw	r22, r12
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	7a d2       	rcall	.+1268   	; 0x1f32 <fputc>
    1a3e:	21 10       	cpse	r2, r1
    1a40:	2a 94       	dec	r2
    1a42:	21 e0       	ldi	r18, 0x01	; 1
    1a44:	82 1a       	sub	r8, r18
    1a46:	91 08       	sbc	r9, r1
    1a48:	81 14       	cp	r8, r1
    1a4a:	91 04       	cpc	r9, r1
    1a4c:	79 f7       	brne	.-34     	; 0x1a2c <vfprintf+0x1c4>
    1a4e:	e1 c0       	rjmp	.+450    	; 0x1c12 <vfprintf+0x3aa>
    1a50:	84 36       	cpi	r24, 0x64	; 100
    1a52:	11 f0       	breq	.+4      	; 0x1a58 <vfprintf+0x1f0>
    1a54:	89 36       	cpi	r24, 0x69	; 105
    1a56:	39 f5       	brne	.+78     	; 0x1aa6 <vfprintf+0x23e>
    1a58:	f8 01       	movw	r30, r16
    1a5a:	37 fe       	sbrs	r3, 7
    1a5c:	07 c0       	rjmp	.+14     	; 0x1a6c <vfprintf+0x204>
    1a5e:	60 81       	ld	r22, Z
    1a60:	71 81       	ldd	r23, Z+1	; 0x01
    1a62:	82 81       	ldd	r24, Z+2	; 0x02
    1a64:	93 81       	ldd	r25, Z+3	; 0x03
    1a66:	0c 5f       	subi	r16, 0xFC	; 252
    1a68:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6a:	08 c0       	rjmp	.+16     	; 0x1a7c <vfprintf+0x214>
    1a6c:	60 81       	ld	r22, Z
    1a6e:	71 81       	ldd	r23, Z+1	; 0x01
    1a70:	07 2e       	mov	r0, r23
    1a72:	00 0c       	add	r0, r0
    1a74:	88 0b       	sbc	r24, r24
    1a76:	99 0b       	sbc	r25, r25
    1a78:	0e 5f       	subi	r16, 0xFE	; 254
    1a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7c:	f3 2d       	mov	r31, r3
    1a7e:	ff 76       	andi	r31, 0x6F	; 111
    1a80:	3f 2e       	mov	r3, r31
    1a82:	97 ff       	sbrs	r25, 7
    1a84:	09 c0       	rjmp	.+18     	; 0x1a98 <vfprintf+0x230>
    1a86:	90 95       	com	r25
    1a88:	80 95       	com	r24
    1a8a:	70 95       	com	r23
    1a8c:	61 95       	neg	r22
    1a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a90:	8f 4f       	sbci	r24, 0xFF	; 255
    1a92:	9f 4f       	sbci	r25, 0xFF	; 255
    1a94:	f0 68       	ori	r31, 0x80	; 128
    1a96:	3f 2e       	mov	r3, r31
    1a98:	2a e0       	ldi	r18, 0x0A	; 10
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	a3 01       	movw	r20, r6
    1a9e:	85 d2       	rcall	.+1290   	; 0x1faa <__ultoa_invert>
    1aa0:	88 2e       	mov	r8, r24
    1aa2:	86 18       	sub	r8, r6
    1aa4:	44 c0       	rjmp	.+136    	; 0x1b2e <vfprintf+0x2c6>
    1aa6:	85 37       	cpi	r24, 0x75	; 117
    1aa8:	31 f4       	brne	.+12     	; 0x1ab6 <vfprintf+0x24e>
    1aaa:	23 2d       	mov	r18, r3
    1aac:	2f 7e       	andi	r18, 0xEF	; 239
    1aae:	b2 2e       	mov	r11, r18
    1ab0:	2a e0       	ldi	r18, 0x0A	; 10
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	25 c0       	rjmp	.+74     	; 0x1b00 <vfprintf+0x298>
    1ab6:	93 2d       	mov	r25, r3
    1ab8:	99 7f       	andi	r25, 0xF9	; 249
    1aba:	b9 2e       	mov	r11, r25
    1abc:	8f 36       	cpi	r24, 0x6F	; 111
    1abe:	c1 f0       	breq	.+48     	; 0x1af0 <vfprintf+0x288>
    1ac0:	18 f4       	brcc	.+6      	; 0x1ac8 <vfprintf+0x260>
    1ac2:	88 35       	cpi	r24, 0x58	; 88
    1ac4:	79 f0       	breq	.+30     	; 0x1ae4 <vfprintf+0x27c>
    1ac6:	ae c0       	rjmp	.+348    	; 0x1c24 <vfprintf+0x3bc>
    1ac8:	80 37       	cpi	r24, 0x70	; 112
    1aca:	19 f0       	breq	.+6      	; 0x1ad2 <vfprintf+0x26a>
    1acc:	88 37       	cpi	r24, 0x78	; 120
    1ace:	21 f0       	breq	.+8      	; 0x1ad8 <vfprintf+0x270>
    1ad0:	a9 c0       	rjmp	.+338    	; 0x1c24 <vfprintf+0x3bc>
    1ad2:	e9 2f       	mov	r30, r25
    1ad4:	e0 61       	ori	r30, 0x10	; 16
    1ad6:	be 2e       	mov	r11, r30
    1ad8:	b4 fe       	sbrs	r11, 4
    1ada:	0d c0       	rjmp	.+26     	; 0x1af6 <vfprintf+0x28e>
    1adc:	fb 2d       	mov	r31, r11
    1ade:	f4 60       	ori	r31, 0x04	; 4
    1ae0:	bf 2e       	mov	r11, r31
    1ae2:	09 c0       	rjmp	.+18     	; 0x1af6 <vfprintf+0x28e>
    1ae4:	34 fe       	sbrs	r3, 4
    1ae6:	0a c0       	rjmp	.+20     	; 0x1afc <vfprintf+0x294>
    1ae8:	29 2f       	mov	r18, r25
    1aea:	26 60       	ori	r18, 0x06	; 6
    1aec:	b2 2e       	mov	r11, r18
    1aee:	06 c0       	rjmp	.+12     	; 0x1afc <vfprintf+0x294>
    1af0:	28 e0       	ldi	r18, 0x08	; 8
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	05 c0       	rjmp	.+10     	; 0x1b00 <vfprintf+0x298>
    1af6:	20 e1       	ldi	r18, 0x10	; 16
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <vfprintf+0x298>
    1afc:	20 e1       	ldi	r18, 0x10	; 16
    1afe:	32 e0       	ldi	r19, 0x02	; 2
    1b00:	f8 01       	movw	r30, r16
    1b02:	b7 fe       	sbrs	r11, 7
    1b04:	07 c0       	rjmp	.+14     	; 0x1b14 <vfprintf+0x2ac>
    1b06:	60 81       	ld	r22, Z
    1b08:	71 81       	ldd	r23, Z+1	; 0x01
    1b0a:	82 81       	ldd	r24, Z+2	; 0x02
    1b0c:	93 81       	ldd	r25, Z+3	; 0x03
    1b0e:	0c 5f       	subi	r16, 0xFC	; 252
    1b10:	1f 4f       	sbci	r17, 0xFF	; 255
    1b12:	06 c0       	rjmp	.+12     	; 0x1b20 <vfprintf+0x2b8>
    1b14:	60 81       	ld	r22, Z
    1b16:	71 81       	ldd	r23, Z+1	; 0x01
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	0e 5f       	subi	r16, 0xFE	; 254
    1b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b20:	a3 01       	movw	r20, r6
    1b22:	43 d2       	rcall	.+1158   	; 0x1faa <__ultoa_invert>
    1b24:	88 2e       	mov	r8, r24
    1b26:	86 18       	sub	r8, r6
    1b28:	fb 2d       	mov	r31, r11
    1b2a:	ff 77       	andi	r31, 0x7F	; 127
    1b2c:	3f 2e       	mov	r3, r31
    1b2e:	36 fe       	sbrs	r3, 6
    1b30:	0d c0       	rjmp	.+26     	; 0x1b4c <vfprintf+0x2e4>
    1b32:	23 2d       	mov	r18, r3
    1b34:	2e 7f       	andi	r18, 0xFE	; 254
    1b36:	a2 2e       	mov	r10, r18
    1b38:	89 14       	cp	r8, r9
    1b3a:	58 f4       	brcc	.+22     	; 0x1b52 <vfprintf+0x2ea>
    1b3c:	34 fe       	sbrs	r3, 4
    1b3e:	0b c0       	rjmp	.+22     	; 0x1b56 <vfprintf+0x2ee>
    1b40:	32 fc       	sbrc	r3, 2
    1b42:	09 c0       	rjmp	.+18     	; 0x1b56 <vfprintf+0x2ee>
    1b44:	83 2d       	mov	r24, r3
    1b46:	8e 7e       	andi	r24, 0xEE	; 238
    1b48:	a8 2e       	mov	r10, r24
    1b4a:	05 c0       	rjmp	.+10     	; 0x1b56 <vfprintf+0x2ee>
    1b4c:	b8 2c       	mov	r11, r8
    1b4e:	a3 2c       	mov	r10, r3
    1b50:	03 c0       	rjmp	.+6      	; 0x1b58 <vfprintf+0x2f0>
    1b52:	b8 2c       	mov	r11, r8
    1b54:	01 c0       	rjmp	.+2      	; 0x1b58 <vfprintf+0x2f0>
    1b56:	b9 2c       	mov	r11, r9
    1b58:	a4 fe       	sbrs	r10, 4
    1b5a:	0f c0       	rjmp	.+30     	; 0x1b7a <vfprintf+0x312>
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	e8 0d       	add	r30, r8
    1b60:	f1 1d       	adc	r31, r1
    1b62:	80 81       	ld	r24, Z
    1b64:	80 33       	cpi	r24, 0x30	; 48
    1b66:	21 f4       	brne	.+8      	; 0x1b70 <vfprintf+0x308>
    1b68:	9a 2d       	mov	r25, r10
    1b6a:	99 7e       	andi	r25, 0xE9	; 233
    1b6c:	a9 2e       	mov	r10, r25
    1b6e:	09 c0       	rjmp	.+18     	; 0x1b82 <vfprintf+0x31a>
    1b70:	a2 fe       	sbrs	r10, 2
    1b72:	06 c0       	rjmp	.+12     	; 0x1b80 <vfprintf+0x318>
    1b74:	b3 94       	inc	r11
    1b76:	b3 94       	inc	r11
    1b78:	04 c0       	rjmp	.+8      	; 0x1b82 <vfprintf+0x31a>
    1b7a:	8a 2d       	mov	r24, r10
    1b7c:	86 78       	andi	r24, 0x86	; 134
    1b7e:	09 f0       	breq	.+2      	; 0x1b82 <vfprintf+0x31a>
    1b80:	b3 94       	inc	r11
    1b82:	a3 fc       	sbrc	r10, 3
    1b84:	10 c0       	rjmp	.+32     	; 0x1ba6 <vfprintf+0x33e>
    1b86:	a0 fe       	sbrs	r10, 0
    1b88:	06 c0       	rjmp	.+12     	; 0x1b96 <vfprintf+0x32e>
    1b8a:	b2 14       	cp	r11, r2
    1b8c:	80 f4       	brcc	.+32     	; 0x1bae <vfprintf+0x346>
    1b8e:	28 0c       	add	r2, r8
    1b90:	92 2c       	mov	r9, r2
    1b92:	9b 18       	sub	r9, r11
    1b94:	0d c0       	rjmp	.+26     	; 0x1bb0 <vfprintf+0x348>
    1b96:	b2 14       	cp	r11, r2
    1b98:	58 f4       	brcc	.+22     	; 0x1bb0 <vfprintf+0x348>
    1b9a:	b6 01       	movw	r22, r12
    1b9c:	80 e2       	ldi	r24, 0x20	; 32
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	c8 d1       	rcall	.+912    	; 0x1f32 <fputc>
    1ba2:	b3 94       	inc	r11
    1ba4:	f8 cf       	rjmp	.-16     	; 0x1b96 <vfprintf+0x32e>
    1ba6:	b2 14       	cp	r11, r2
    1ba8:	18 f4       	brcc	.+6      	; 0x1bb0 <vfprintf+0x348>
    1baa:	2b 18       	sub	r2, r11
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <vfprintf+0x34a>
    1bae:	98 2c       	mov	r9, r8
    1bb0:	21 2c       	mov	r2, r1
    1bb2:	a4 fe       	sbrs	r10, 4
    1bb4:	0f c0       	rjmp	.+30     	; 0x1bd4 <vfprintf+0x36c>
    1bb6:	b6 01       	movw	r22, r12
    1bb8:	80 e3       	ldi	r24, 0x30	; 48
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	ba d1       	rcall	.+884    	; 0x1f32 <fputc>
    1bbe:	a2 fe       	sbrs	r10, 2
    1bc0:	16 c0       	rjmp	.+44     	; 0x1bee <vfprintf+0x386>
    1bc2:	a1 fc       	sbrc	r10, 1
    1bc4:	03 c0       	rjmp	.+6      	; 0x1bcc <vfprintf+0x364>
    1bc6:	88 e7       	ldi	r24, 0x78	; 120
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <vfprintf+0x368>
    1bcc:	88 e5       	ldi	r24, 0x58	; 88
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	b6 01       	movw	r22, r12
    1bd2:	0c c0       	rjmp	.+24     	; 0x1bec <vfprintf+0x384>
    1bd4:	8a 2d       	mov	r24, r10
    1bd6:	86 78       	andi	r24, 0x86	; 134
    1bd8:	51 f0       	breq	.+20     	; 0x1bee <vfprintf+0x386>
    1bda:	a1 fe       	sbrs	r10, 1
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <vfprintf+0x37a>
    1bde:	8b e2       	ldi	r24, 0x2B	; 43
    1be0:	01 c0       	rjmp	.+2      	; 0x1be4 <vfprintf+0x37c>
    1be2:	80 e2       	ldi	r24, 0x20	; 32
    1be4:	a7 fc       	sbrc	r10, 7
    1be6:	8d e2       	ldi	r24, 0x2D	; 45
    1be8:	b6 01       	movw	r22, r12
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	a2 d1       	rcall	.+836    	; 0x1f32 <fputc>
    1bee:	89 14       	cp	r8, r9
    1bf0:	30 f4       	brcc	.+12     	; 0x1bfe <vfprintf+0x396>
    1bf2:	b6 01       	movw	r22, r12
    1bf4:	80 e3       	ldi	r24, 0x30	; 48
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	9c d1       	rcall	.+824    	; 0x1f32 <fputc>
    1bfa:	9a 94       	dec	r9
    1bfc:	f8 cf       	rjmp	.-16     	; 0x1bee <vfprintf+0x386>
    1bfe:	8a 94       	dec	r8
    1c00:	f3 01       	movw	r30, r6
    1c02:	e8 0d       	add	r30, r8
    1c04:	f1 1d       	adc	r31, r1
    1c06:	80 81       	ld	r24, Z
    1c08:	b6 01       	movw	r22, r12
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	92 d1       	rcall	.+804    	; 0x1f32 <fputc>
    1c0e:	81 10       	cpse	r8, r1
    1c10:	f6 cf       	rjmp	.-20     	; 0x1bfe <vfprintf+0x396>
    1c12:	22 20       	and	r2, r2
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <vfprintf+0x3b0>
    1c16:	4e ce       	rjmp	.-868    	; 0x18b4 <vfprintf+0x4c>
    1c18:	b6 01       	movw	r22, r12
    1c1a:	80 e2       	ldi	r24, 0x20	; 32
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	89 d1       	rcall	.+786    	; 0x1f32 <fputc>
    1c20:	2a 94       	dec	r2
    1c22:	f7 cf       	rjmp	.-18     	; 0x1c12 <vfprintf+0x3aa>
    1c24:	f6 01       	movw	r30, r12
    1c26:	86 81       	ldd	r24, Z+6	; 0x06
    1c28:	97 81       	ldd	r25, Z+7	; 0x07
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <vfprintf+0x3c8>
    1c2c:	8f ef       	ldi	r24, 0xFF	; 255
    1c2e:	9f ef       	ldi	r25, 0xFF	; 255
    1c30:	2b 96       	adiw	r28, 0x0b	; 11
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	1f 91       	pop	r17
    1c42:	0f 91       	pop	r16
    1c44:	ff 90       	pop	r15
    1c46:	ef 90       	pop	r14
    1c48:	df 90       	pop	r13
    1c4a:	cf 90       	pop	r12
    1c4c:	bf 90       	pop	r11
    1c4e:	af 90       	pop	r10
    1c50:	9f 90       	pop	r9
    1c52:	8f 90       	pop	r8
    1c54:	7f 90       	pop	r7
    1c56:	6f 90       	pop	r6
    1c58:	5f 90       	pop	r5
    1c5a:	4f 90       	pop	r4
    1c5c:	3f 90       	pop	r3
    1c5e:	2f 90       	pop	r2
    1c60:	08 95       	ret

00001c62 <calloc>:
    1c62:	0f 93       	push	r16
    1c64:	1f 93       	push	r17
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	86 9f       	mul	r24, r22
    1c6c:	80 01       	movw	r16, r0
    1c6e:	87 9f       	mul	r24, r23
    1c70:	10 0d       	add	r17, r0
    1c72:	96 9f       	mul	r25, r22
    1c74:	10 0d       	add	r17, r0
    1c76:	11 24       	eor	r1, r1
    1c78:	c8 01       	movw	r24, r16
    1c7a:	0d d0       	rcall	.+26     	; 0x1c96 <malloc>
    1c7c:	ec 01       	movw	r28, r24
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	21 f0       	breq	.+8      	; 0x1c8a <calloc+0x28>
    1c82:	a8 01       	movw	r20, r16
    1c84:	60 e0       	ldi	r22, 0x00	; 0
    1c86:	70 e0       	ldi	r23, 0x00	; 0
    1c88:	32 d1       	rcall	.+612    	; 0x1eee <memset>
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	1f 91       	pop	r17
    1c92:	0f 91       	pop	r16
    1c94:	08 95       	ret

00001c96 <malloc>:
    1c96:	0f 93       	push	r16
    1c98:	1f 93       	push	r17
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	82 30       	cpi	r24, 0x02	; 2
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	10 f4       	brcc	.+4      	; 0x1ca8 <malloc+0x12>
    1ca4:	82 e0       	ldi	r24, 0x02	; 2
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	e0 91 c1 05 	lds	r30, 0x05C1	; 0x8005c1 <__flp>
    1cac:	f0 91 c2 05 	lds	r31, 0x05C2	; 0x8005c2 <__flp+0x1>
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	a0 e0       	ldi	r26, 0x00	; 0
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	30 97       	sbiw	r30, 0x00	; 0
    1cba:	19 f1       	breq	.+70     	; 0x1d02 <malloc+0x6c>
    1cbc:	40 81       	ld	r20, Z
    1cbe:	51 81       	ldd	r21, Z+1	; 0x01
    1cc0:	02 81       	ldd	r16, Z+2	; 0x02
    1cc2:	13 81       	ldd	r17, Z+3	; 0x03
    1cc4:	48 17       	cp	r20, r24
    1cc6:	59 07       	cpc	r21, r25
    1cc8:	c8 f0       	brcs	.+50     	; 0x1cfc <malloc+0x66>
    1cca:	84 17       	cp	r24, r20
    1ccc:	95 07       	cpc	r25, r21
    1cce:	69 f4       	brne	.+26     	; 0x1cea <malloc+0x54>
    1cd0:	10 97       	sbiw	r26, 0x00	; 0
    1cd2:	31 f0       	breq	.+12     	; 0x1ce0 <malloc+0x4a>
    1cd4:	12 96       	adiw	r26, 0x02	; 2
    1cd6:	0c 93       	st	X, r16
    1cd8:	12 97       	sbiw	r26, 0x02	; 2
    1cda:	13 96       	adiw	r26, 0x03	; 3
    1cdc:	1c 93       	st	X, r17
    1cde:	27 c0       	rjmp	.+78     	; 0x1d2e <malloc+0x98>
    1ce0:	00 93 c1 05 	sts	0x05C1, r16	; 0x8005c1 <__flp>
    1ce4:	10 93 c2 05 	sts	0x05C2, r17	; 0x8005c2 <__flp+0x1>
    1ce8:	22 c0       	rjmp	.+68     	; 0x1d2e <malloc+0x98>
    1cea:	21 15       	cp	r18, r1
    1cec:	31 05       	cpc	r19, r1
    1cee:	19 f0       	breq	.+6      	; 0x1cf6 <malloc+0x60>
    1cf0:	42 17       	cp	r20, r18
    1cf2:	53 07       	cpc	r21, r19
    1cf4:	18 f4       	brcc	.+6      	; 0x1cfc <malloc+0x66>
    1cf6:	9a 01       	movw	r18, r20
    1cf8:	bd 01       	movw	r22, r26
    1cfa:	ef 01       	movw	r28, r30
    1cfc:	df 01       	movw	r26, r30
    1cfe:	f8 01       	movw	r30, r16
    1d00:	db cf       	rjmp	.-74     	; 0x1cb8 <malloc+0x22>
    1d02:	21 15       	cp	r18, r1
    1d04:	31 05       	cpc	r19, r1
    1d06:	f9 f0       	breq	.+62     	; 0x1d46 <malloc+0xb0>
    1d08:	28 1b       	sub	r18, r24
    1d0a:	39 0b       	sbc	r19, r25
    1d0c:	24 30       	cpi	r18, 0x04	; 4
    1d0e:	31 05       	cpc	r19, r1
    1d10:	80 f4       	brcc	.+32     	; 0x1d32 <malloc+0x9c>
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	9b 81       	ldd	r25, Y+3	; 0x03
    1d16:	61 15       	cp	r22, r1
    1d18:	71 05       	cpc	r23, r1
    1d1a:	21 f0       	breq	.+8      	; 0x1d24 <malloc+0x8e>
    1d1c:	fb 01       	movw	r30, r22
    1d1e:	93 83       	std	Z+3, r25	; 0x03
    1d20:	82 83       	std	Z+2, r24	; 0x02
    1d22:	04 c0       	rjmp	.+8      	; 0x1d2c <malloc+0x96>
    1d24:	90 93 c2 05 	sts	0x05C2, r25	; 0x8005c2 <__flp+0x1>
    1d28:	80 93 c1 05 	sts	0x05C1, r24	; 0x8005c1 <__flp>
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	32 96       	adiw	r30, 0x02	; 2
    1d30:	44 c0       	rjmp	.+136    	; 0x1dba <malloc+0x124>
    1d32:	fe 01       	movw	r30, r28
    1d34:	e2 0f       	add	r30, r18
    1d36:	f3 1f       	adc	r31, r19
    1d38:	81 93       	st	Z+, r24
    1d3a:	91 93       	st	Z+, r25
    1d3c:	22 50       	subi	r18, 0x02	; 2
    1d3e:	31 09       	sbc	r19, r1
    1d40:	39 83       	std	Y+1, r19	; 0x01
    1d42:	28 83       	st	Y, r18
    1d44:	3a c0       	rjmp	.+116    	; 0x1dba <malloc+0x124>
    1d46:	20 91 bf 05 	lds	r18, 0x05BF	; 0x8005bf <__brkval>
    1d4a:	30 91 c0 05 	lds	r19, 0x05C0	; 0x8005c0 <__brkval+0x1>
    1d4e:	23 2b       	or	r18, r19
    1d50:	41 f4       	brne	.+16     	; 0x1d62 <malloc+0xcc>
    1d52:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1d56:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1d5a:	30 93 c0 05 	sts	0x05C0, r19	; 0x8005c0 <__brkval+0x1>
    1d5e:	20 93 bf 05 	sts	0x05BF, r18	; 0x8005bf <__brkval>
    1d62:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1d66:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1d6a:	21 15       	cp	r18, r1
    1d6c:	31 05       	cpc	r19, r1
    1d6e:	41 f4       	brne	.+16     	; 0x1d80 <malloc+0xea>
    1d70:	2d b7       	in	r18, 0x3d	; 61
    1d72:	3e b7       	in	r19, 0x3e	; 62
    1d74:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1d78:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1d7c:	24 1b       	sub	r18, r20
    1d7e:	35 0b       	sbc	r19, r21
    1d80:	e0 91 bf 05 	lds	r30, 0x05BF	; 0x8005bf <__brkval>
    1d84:	f0 91 c0 05 	lds	r31, 0x05C0	; 0x8005c0 <__brkval+0x1>
    1d88:	e2 17       	cp	r30, r18
    1d8a:	f3 07       	cpc	r31, r19
    1d8c:	a0 f4       	brcc	.+40     	; 0x1db6 <malloc+0x120>
    1d8e:	2e 1b       	sub	r18, r30
    1d90:	3f 0b       	sbc	r19, r31
    1d92:	28 17       	cp	r18, r24
    1d94:	39 07       	cpc	r19, r25
    1d96:	78 f0       	brcs	.+30     	; 0x1db6 <malloc+0x120>
    1d98:	ac 01       	movw	r20, r24
    1d9a:	4e 5f       	subi	r20, 0xFE	; 254
    1d9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d9e:	24 17       	cp	r18, r20
    1da0:	35 07       	cpc	r19, r21
    1da2:	48 f0       	brcs	.+18     	; 0x1db6 <malloc+0x120>
    1da4:	4e 0f       	add	r20, r30
    1da6:	5f 1f       	adc	r21, r31
    1da8:	50 93 c0 05 	sts	0x05C0, r21	; 0x8005c0 <__brkval+0x1>
    1dac:	40 93 bf 05 	sts	0x05BF, r20	; 0x8005bf <__brkval>
    1db0:	81 93       	st	Z+, r24
    1db2:	91 93       	st	Z+, r25
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <malloc+0x124>
    1db6:	e0 e0       	ldi	r30, 0x00	; 0
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	cf 01       	movw	r24, r30
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	1f 91       	pop	r17
    1dc2:	0f 91       	pop	r16
    1dc4:	08 95       	ret

00001dc6 <free>:
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	00 97       	sbiw	r24, 0x00	; 0
    1dcc:	09 f4       	brne	.+2      	; 0x1dd0 <free+0xa>
    1dce:	81 c0       	rjmp	.+258    	; 0x1ed2 <free+0x10c>
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	32 97       	sbiw	r30, 0x02	; 2
    1dd4:	13 82       	std	Z+3, r1	; 0x03
    1dd6:	12 82       	std	Z+2, r1	; 0x02
    1dd8:	a0 91 c1 05 	lds	r26, 0x05C1	; 0x8005c1 <__flp>
    1ddc:	b0 91 c2 05 	lds	r27, 0x05C2	; 0x8005c2 <__flp+0x1>
    1de0:	10 97       	sbiw	r26, 0x00	; 0
    1de2:	81 f4       	brne	.+32     	; 0x1e04 <free+0x3e>
    1de4:	20 81       	ld	r18, Z
    1de6:	31 81       	ldd	r19, Z+1	; 0x01
    1de8:	82 0f       	add	r24, r18
    1dea:	93 1f       	adc	r25, r19
    1dec:	20 91 bf 05 	lds	r18, 0x05BF	; 0x8005bf <__brkval>
    1df0:	30 91 c0 05 	lds	r19, 0x05C0	; 0x8005c0 <__brkval+0x1>
    1df4:	28 17       	cp	r18, r24
    1df6:	39 07       	cpc	r19, r25
    1df8:	51 f5       	brne	.+84     	; 0x1e4e <free+0x88>
    1dfa:	f0 93 c0 05 	sts	0x05C0, r31	; 0x8005c0 <__brkval+0x1>
    1dfe:	e0 93 bf 05 	sts	0x05BF, r30	; 0x8005bf <__brkval>
    1e02:	67 c0       	rjmp	.+206    	; 0x1ed2 <free+0x10c>
    1e04:	ed 01       	movw	r28, r26
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	ce 17       	cp	r28, r30
    1e0c:	df 07       	cpc	r29, r31
    1e0e:	40 f4       	brcc	.+16     	; 0x1e20 <free+0x5a>
    1e10:	4a 81       	ldd	r20, Y+2	; 0x02
    1e12:	5b 81       	ldd	r21, Y+3	; 0x03
    1e14:	9e 01       	movw	r18, r28
    1e16:	41 15       	cp	r20, r1
    1e18:	51 05       	cpc	r21, r1
    1e1a:	f1 f0       	breq	.+60     	; 0x1e58 <free+0x92>
    1e1c:	ea 01       	movw	r28, r20
    1e1e:	f5 cf       	rjmp	.-22     	; 0x1e0a <free+0x44>
    1e20:	d3 83       	std	Z+3, r29	; 0x03
    1e22:	c2 83       	std	Z+2, r28	; 0x02
    1e24:	40 81       	ld	r20, Z
    1e26:	51 81       	ldd	r21, Z+1	; 0x01
    1e28:	84 0f       	add	r24, r20
    1e2a:	95 1f       	adc	r25, r21
    1e2c:	c8 17       	cp	r28, r24
    1e2e:	d9 07       	cpc	r29, r25
    1e30:	59 f4       	brne	.+22     	; 0x1e48 <free+0x82>
    1e32:	88 81       	ld	r24, Y
    1e34:	99 81       	ldd	r25, Y+1	; 0x01
    1e36:	84 0f       	add	r24, r20
    1e38:	95 1f       	adc	r25, r21
    1e3a:	02 96       	adiw	r24, 0x02	; 2
    1e3c:	91 83       	std	Z+1, r25	; 0x01
    1e3e:	80 83       	st	Z, r24
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	9b 81       	ldd	r25, Y+3	; 0x03
    1e44:	93 83       	std	Z+3, r25	; 0x03
    1e46:	82 83       	std	Z+2, r24	; 0x02
    1e48:	21 15       	cp	r18, r1
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	29 f4       	brne	.+10     	; 0x1e58 <free+0x92>
    1e4e:	f0 93 c2 05 	sts	0x05C2, r31	; 0x8005c2 <__flp+0x1>
    1e52:	e0 93 c1 05 	sts	0x05C1, r30	; 0x8005c1 <__flp>
    1e56:	3d c0       	rjmp	.+122    	; 0x1ed2 <free+0x10c>
    1e58:	e9 01       	movw	r28, r18
    1e5a:	fb 83       	std	Y+3, r31	; 0x03
    1e5c:	ea 83       	std	Y+2, r30	; 0x02
    1e5e:	49 91       	ld	r20, Y+
    1e60:	59 91       	ld	r21, Y+
    1e62:	c4 0f       	add	r28, r20
    1e64:	d5 1f       	adc	r29, r21
    1e66:	ec 17       	cp	r30, r28
    1e68:	fd 07       	cpc	r31, r29
    1e6a:	61 f4       	brne	.+24     	; 0x1e84 <free+0xbe>
    1e6c:	80 81       	ld	r24, Z
    1e6e:	91 81       	ldd	r25, Z+1	; 0x01
    1e70:	84 0f       	add	r24, r20
    1e72:	95 1f       	adc	r25, r21
    1e74:	02 96       	adiw	r24, 0x02	; 2
    1e76:	e9 01       	movw	r28, r18
    1e78:	99 83       	std	Y+1, r25	; 0x01
    1e7a:	88 83       	st	Y, r24
    1e7c:	82 81       	ldd	r24, Z+2	; 0x02
    1e7e:	93 81       	ldd	r25, Z+3	; 0x03
    1e80:	9b 83       	std	Y+3, r25	; 0x03
    1e82:	8a 83       	std	Y+2, r24	; 0x02
    1e84:	e0 e0       	ldi	r30, 0x00	; 0
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	12 96       	adiw	r26, 0x02	; 2
    1e8a:	8d 91       	ld	r24, X+
    1e8c:	9c 91       	ld	r25, X
    1e8e:	13 97       	sbiw	r26, 0x03	; 3
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	19 f0       	breq	.+6      	; 0x1e9a <free+0xd4>
    1e94:	fd 01       	movw	r30, r26
    1e96:	dc 01       	movw	r26, r24
    1e98:	f7 cf       	rjmp	.-18     	; 0x1e88 <free+0xc2>
    1e9a:	8d 91       	ld	r24, X+
    1e9c:	9c 91       	ld	r25, X
    1e9e:	11 97       	sbiw	r26, 0x01	; 1
    1ea0:	9d 01       	movw	r18, r26
    1ea2:	2e 5f       	subi	r18, 0xFE	; 254
    1ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea6:	82 0f       	add	r24, r18
    1ea8:	93 1f       	adc	r25, r19
    1eaa:	20 91 bf 05 	lds	r18, 0x05BF	; 0x8005bf <__brkval>
    1eae:	30 91 c0 05 	lds	r19, 0x05C0	; 0x8005c0 <__brkval+0x1>
    1eb2:	28 17       	cp	r18, r24
    1eb4:	39 07       	cpc	r19, r25
    1eb6:	69 f4       	brne	.+26     	; 0x1ed2 <free+0x10c>
    1eb8:	30 97       	sbiw	r30, 0x00	; 0
    1eba:	29 f4       	brne	.+10     	; 0x1ec6 <free+0x100>
    1ebc:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <__flp+0x1>
    1ec0:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <__flp>
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <free+0x104>
    1ec6:	13 82       	std	Z+3, r1	; 0x03
    1ec8:	12 82       	std	Z+2, r1	; 0x02
    1eca:	b0 93 c0 05 	sts	0x05C0, r27	; 0x8005c0 <__brkval+0x1>
    1ece:	a0 93 bf 05 	sts	0x05BF, r26	; 0x8005bf <__brkval>
    1ed2:	df 91       	pop	r29
    1ed4:	cf 91       	pop	r28
    1ed6:	08 95       	ret

00001ed8 <strnlen_P>:
    1ed8:	fc 01       	movw	r30, r24
    1eda:	05 90       	lpm	r0, Z+
    1edc:	61 50       	subi	r22, 0x01	; 1
    1ede:	70 40       	sbci	r23, 0x00	; 0
    1ee0:	01 10       	cpse	r0, r1
    1ee2:	d8 f7       	brcc	.-10     	; 0x1eda <strnlen_P+0x2>
    1ee4:	80 95       	com	r24
    1ee6:	90 95       	com	r25
    1ee8:	8e 0f       	add	r24, r30
    1eea:	9f 1f       	adc	r25, r31
    1eec:	08 95       	ret

00001eee <memset>:
    1eee:	dc 01       	movw	r26, r24
    1ef0:	01 c0       	rjmp	.+2      	; 0x1ef4 <memset+0x6>
    1ef2:	6d 93       	st	X+, r22
    1ef4:	41 50       	subi	r20, 0x01	; 1
    1ef6:	50 40       	sbci	r21, 0x00	; 0
    1ef8:	e0 f7       	brcc	.-8      	; 0x1ef2 <memset+0x4>
    1efa:	08 95       	ret

00001efc <strnlen>:
    1efc:	fc 01       	movw	r30, r24
    1efe:	61 50       	subi	r22, 0x01	; 1
    1f00:	70 40       	sbci	r23, 0x00	; 0
    1f02:	01 90       	ld	r0, Z+
    1f04:	01 10       	cpse	r0, r1
    1f06:	d8 f7       	brcc	.-10     	; 0x1efe <strnlen+0x2>
    1f08:	80 95       	com	r24
    1f0a:	90 95       	com	r25
    1f0c:	8e 0f       	add	r24, r30
    1f0e:	9f 1f       	adc	r25, r31
    1f10:	08 95       	ret

00001f12 <strrev>:
    1f12:	dc 01       	movw	r26, r24
    1f14:	fc 01       	movw	r30, r24
    1f16:	67 2f       	mov	r22, r23
    1f18:	71 91       	ld	r23, Z+
    1f1a:	77 23       	and	r23, r23
    1f1c:	e1 f7       	brne	.-8      	; 0x1f16 <strrev+0x4>
    1f1e:	32 97       	sbiw	r30, 0x02	; 2
    1f20:	04 c0       	rjmp	.+8      	; 0x1f2a <strrev+0x18>
    1f22:	7c 91       	ld	r23, X
    1f24:	6d 93       	st	X+, r22
    1f26:	70 83       	st	Z, r23
    1f28:	62 91       	ld	r22, -Z
    1f2a:	ae 17       	cp	r26, r30
    1f2c:	bf 07       	cpc	r27, r31
    1f2e:	c8 f3       	brcs	.-14     	; 0x1f22 <strrev+0x10>
    1f30:	08 95       	ret

00001f32 <fputc>:
    1f32:	0f 93       	push	r16
    1f34:	1f 93       	push	r17
    1f36:	cf 93       	push	r28
    1f38:	df 93       	push	r29
    1f3a:	fb 01       	movw	r30, r22
    1f3c:	23 81       	ldd	r18, Z+3	; 0x03
    1f3e:	21 fd       	sbrc	r18, 1
    1f40:	03 c0       	rjmp	.+6      	; 0x1f48 <fputc+0x16>
    1f42:	8f ef       	ldi	r24, 0xFF	; 255
    1f44:	9f ef       	ldi	r25, 0xFF	; 255
    1f46:	2c c0       	rjmp	.+88     	; 0x1fa0 <fputc+0x6e>
    1f48:	22 ff       	sbrs	r18, 2
    1f4a:	16 c0       	rjmp	.+44     	; 0x1f78 <fputc+0x46>
    1f4c:	46 81       	ldd	r20, Z+6	; 0x06
    1f4e:	57 81       	ldd	r21, Z+7	; 0x07
    1f50:	24 81       	ldd	r18, Z+4	; 0x04
    1f52:	35 81       	ldd	r19, Z+5	; 0x05
    1f54:	42 17       	cp	r20, r18
    1f56:	53 07       	cpc	r21, r19
    1f58:	44 f4       	brge	.+16     	; 0x1f6a <fputc+0x38>
    1f5a:	a0 81       	ld	r26, Z
    1f5c:	b1 81       	ldd	r27, Z+1	; 0x01
    1f5e:	9d 01       	movw	r18, r26
    1f60:	2f 5f       	subi	r18, 0xFF	; 255
    1f62:	3f 4f       	sbci	r19, 0xFF	; 255
    1f64:	31 83       	std	Z+1, r19	; 0x01
    1f66:	20 83       	st	Z, r18
    1f68:	8c 93       	st	X, r24
    1f6a:	26 81       	ldd	r18, Z+6	; 0x06
    1f6c:	37 81       	ldd	r19, Z+7	; 0x07
    1f6e:	2f 5f       	subi	r18, 0xFF	; 255
    1f70:	3f 4f       	sbci	r19, 0xFF	; 255
    1f72:	37 83       	std	Z+7, r19	; 0x07
    1f74:	26 83       	std	Z+6, r18	; 0x06
    1f76:	14 c0       	rjmp	.+40     	; 0x1fa0 <fputc+0x6e>
    1f78:	8b 01       	movw	r16, r22
    1f7a:	ec 01       	movw	r28, r24
    1f7c:	fb 01       	movw	r30, r22
    1f7e:	00 84       	ldd	r0, Z+8	; 0x08
    1f80:	f1 85       	ldd	r31, Z+9	; 0x09
    1f82:	e0 2d       	mov	r30, r0
    1f84:	19 95       	eicall
    1f86:	89 2b       	or	r24, r25
    1f88:	e1 f6       	brne	.-72     	; 0x1f42 <fputc+0x10>
    1f8a:	d8 01       	movw	r26, r16
    1f8c:	16 96       	adiw	r26, 0x06	; 6
    1f8e:	8d 91       	ld	r24, X+
    1f90:	9c 91       	ld	r25, X
    1f92:	17 97       	sbiw	r26, 0x07	; 7
    1f94:	01 96       	adiw	r24, 0x01	; 1
    1f96:	17 96       	adiw	r26, 0x07	; 7
    1f98:	9c 93       	st	X, r25
    1f9a:	8e 93       	st	-X, r24
    1f9c:	16 97       	sbiw	r26, 0x06	; 6
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	1f 91       	pop	r17
    1fa6:	0f 91       	pop	r16
    1fa8:	08 95       	ret

00001faa <__ultoa_invert>:
    1faa:	fa 01       	movw	r30, r20
    1fac:	aa 27       	eor	r26, r26
    1fae:	28 30       	cpi	r18, 0x08	; 8
    1fb0:	51 f1       	breq	.+84     	; 0x2006 <__ultoa_invert+0x5c>
    1fb2:	20 31       	cpi	r18, 0x10	; 16
    1fb4:	81 f1       	breq	.+96     	; 0x2016 <__ultoa_invert+0x6c>
    1fb6:	e8 94       	clt
    1fb8:	6f 93       	push	r22
    1fba:	6e 7f       	andi	r22, 0xFE	; 254
    1fbc:	6e 5f       	subi	r22, 0xFE	; 254
    1fbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc4:	af 4f       	sbci	r26, 0xFF	; 255
    1fc6:	b1 e0       	ldi	r27, 0x01	; 1
    1fc8:	3e d0       	rcall	.+124    	; 0x2046 <__ultoa_invert+0x9c>
    1fca:	b4 e0       	ldi	r27, 0x04	; 4
    1fcc:	3c d0       	rcall	.+120    	; 0x2046 <__ultoa_invert+0x9c>
    1fce:	67 0f       	add	r22, r23
    1fd0:	78 1f       	adc	r23, r24
    1fd2:	89 1f       	adc	r24, r25
    1fd4:	9a 1f       	adc	r25, r26
    1fd6:	a1 1d       	adc	r26, r1
    1fd8:	68 0f       	add	r22, r24
    1fda:	79 1f       	adc	r23, r25
    1fdc:	8a 1f       	adc	r24, r26
    1fde:	91 1d       	adc	r25, r1
    1fe0:	a1 1d       	adc	r26, r1
    1fe2:	6a 0f       	add	r22, r26
    1fe4:	71 1d       	adc	r23, r1
    1fe6:	81 1d       	adc	r24, r1
    1fe8:	91 1d       	adc	r25, r1
    1fea:	a1 1d       	adc	r26, r1
    1fec:	20 d0       	rcall	.+64     	; 0x202e <__ultoa_invert+0x84>
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <__ultoa_invert+0x48>
    1ff0:	68 94       	set
    1ff2:	3f 91       	pop	r19
    1ff4:	2a e0       	ldi	r18, 0x0A	; 10
    1ff6:	26 9f       	mul	r18, r22
    1ff8:	11 24       	eor	r1, r1
    1ffa:	30 19       	sub	r19, r0
    1ffc:	30 5d       	subi	r19, 0xD0	; 208
    1ffe:	31 93       	st	Z+, r19
    2000:	de f6       	brtc	.-74     	; 0x1fb8 <__ultoa_invert+0xe>
    2002:	cf 01       	movw	r24, r30
    2004:	08 95       	ret
    2006:	46 2f       	mov	r20, r22
    2008:	47 70       	andi	r20, 0x07	; 7
    200a:	40 5d       	subi	r20, 0xD0	; 208
    200c:	41 93       	st	Z+, r20
    200e:	b3 e0       	ldi	r27, 0x03	; 3
    2010:	0f d0       	rcall	.+30     	; 0x2030 <__ultoa_invert+0x86>
    2012:	c9 f7       	brne	.-14     	; 0x2006 <__ultoa_invert+0x5c>
    2014:	f6 cf       	rjmp	.-20     	; 0x2002 <__ultoa_invert+0x58>
    2016:	46 2f       	mov	r20, r22
    2018:	4f 70       	andi	r20, 0x0F	; 15
    201a:	40 5d       	subi	r20, 0xD0	; 208
    201c:	4a 33       	cpi	r20, 0x3A	; 58
    201e:	18 f0       	brcs	.+6      	; 0x2026 <__ultoa_invert+0x7c>
    2020:	49 5d       	subi	r20, 0xD9	; 217
    2022:	31 fd       	sbrc	r19, 1
    2024:	40 52       	subi	r20, 0x20	; 32
    2026:	41 93       	st	Z+, r20
    2028:	02 d0       	rcall	.+4      	; 0x202e <__ultoa_invert+0x84>
    202a:	a9 f7       	brne	.-22     	; 0x2016 <__ultoa_invert+0x6c>
    202c:	ea cf       	rjmp	.-44     	; 0x2002 <__ultoa_invert+0x58>
    202e:	b4 e0       	ldi	r27, 0x04	; 4
    2030:	a6 95       	lsr	r26
    2032:	97 95       	ror	r25
    2034:	87 95       	ror	r24
    2036:	77 95       	ror	r23
    2038:	67 95       	ror	r22
    203a:	ba 95       	dec	r27
    203c:	c9 f7       	brne	.-14     	; 0x2030 <__ultoa_invert+0x86>
    203e:	00 97       	sbiw	r24, 0x00	; 0
    2040:	61 05       	cpc	r22, r1
    2042:	71 05       	cpc	r23, r1
    2044:	08 95       	ret
    2046:	9b 01       	movw	r18, r22
    2048:	ac 01       	movw	r20, r24
    204a:	0a 2e       	mov	r0, r26
    204c:	06 94       	lsr	r0
    204e:	57 95       	ror	r21
    2050:	47 95       	ror	r20
    2052:	37 95       	ror	r19
    2054:	27 95       	ror	r18
    2056:	ba 95       	dec	r27
    2058:	c9 f7       	brne	.-14     	; 0x204c <__ultoa_invert+0xa2>
    205a:	62 0f       	add	r22, r18
    205c:	73 1f       	adc	r23, r19
    205e:	84 1f       	adc	r24, r20
    2060:	95 1f       	adc	r25, r21
    2062:	a0 1d       	adc	r26, r0
    2064:	08 95       	ret

00002066 <_exit>:
    2066:	f8 94       	cli

00002068 <__stop_program>:
    2068:	ff cf       	rjmp	.-2      	; 0x2068 <__stop_program>
