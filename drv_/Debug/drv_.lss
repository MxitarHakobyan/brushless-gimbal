
drv_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000023e  00800200  00001b4e  00001be2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  0080043e  0080043e  00001e20  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023b0  00000000  00000000  00002074  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012a1  00000000  00000000  00004424  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000106e  00000000  00000000  000056c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004bc  00000000  00000000  00006734  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a9a  00000000  00000000  00006bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013a9  00000000  00000000  0000768a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00008a33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	80 c0       	rjmp	.+256    	; 0x102 <__ctors_end>
       2:	00 00       	nop
       4:	9e c0       	rjmp	.+316    	; 0x142 <__bad_interrupt>
       6:	00 00       	nop
       8:	9c c0       	rjmp	.+312    	; 0x142 <__bad_interrupt>
       a:	00 00       	nop
       c:	9a c0       	rjmp	.+308    	; 0x142 <__bad_interrupt>
       e:	00 00       	nop
      10:	98 c0       	rjmp	.+304    	; 0x142 <__bad_interrupt>
      12:	00 00       	nop
      14:	96 c0       	rjmp	.+300    	; 0x142 <__bad_interrupt>
      16:	00 00       	nop
      18:	94 c0       	rjmp	.+296    	; 0x142 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	92 c0       	rjmp	.+292    	; 0x142 <__bad_interrupt>
      1e:	00 00       	nop
      20:	90 c0       	rjmp	.+288    	; 0x142 <__bad_interrupt>
      22:	00 00       	nop
      24:	8e c0       	rjmp	.+284    	; 0x142 <__bad_interrupt>
      26:	00 00       	nop
      28:	8c c0       	rjmp	.+280    	; 0x142 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8a c0       	rjmp	.+276    	; 0x142 <__bad_interrupt>
      2e:	00 00       	nop
      30:	88 c0       	rjmp	.+272    	; 0x142 <__bad_interrupt>
      32:	00 00       	nop
      34:	86 c0       	rjmp	.+268    	; 0x142 <__bad_interrupt>
      36:	00 00       	nop
      38:	84 c0       	rjmp	.+264    	; 0x142 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	82 c0       	rjmp	.+260    	; 0x142 <__bad_interrupt>
      3e:	00 00       	nop
      40:	80 c0       	rjmp	.+256    	; 0x142 <__bad_interrupt>
      42:	00 00       	nop
      44:	7e c0       	rjmp	.+252    	; 0x142 <__bad_interrupt>
      46:	00 00       	nop
      48:	7c c0       	rjmp	.+248    	; 0x142 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7a c0       	rjmp	.+244    	; 0x142 <__bad_interrupt>
      4e:	00 00       	nop
      50:	78 c0       	rjmp	.+240    	; 0x142 <__bad_interrupt>
      52:	00 00       	nop
      54:	76 c0       	rjmp	.+236    	; 0x142 <__bad_interrupt>
      56:	00 00       	nop
      58:	74 c0       	rjmp	.+232    	; 0x142 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	90 c0       	rjmp	.+288    	; 0x17e <__vector_23>
      5e:	00 00       	nop
      60:	70 c0       	rjmp	.+224    	; 0x142 <__bad_interrupt>
      62:	00 00       	nop
      64:	6e c0       	rjmp	.+220    	; 0x142 <__bad_interrupt>
      66:	00 00       	nop
      68:	6c c0       	rjmp	.+216    	; 0x142 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6a c0       	rjmp	.+212    	; 0x142 <__bad_interrupt>
      6e:	00 00       	nop
      70:	68 c0       	rjmp	.+208    	; 0x142 <__bad_interrupt>
      72:	00 00       	nop
      74:	66 c0       	rjmp	.+204    	; 0x142 <__bad_interrupt>
      76:	00 00       	nop
      78:	64 c0       	rjmp	.+200    	; 0x142 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	62 c0       	rjmp	.+196    	; 0x142 <__bad_interrupt>
      7e:	00 00       	nop
      80:	60 c0       	rjmp	.+192    	; 0x142 <__bad_interrupt>
      82:	00 00       	nop
      84:	5e c0       	rjmp	.+188    	; 0x142 <__bad_interrupt>
      86:	00 00       	nop
      88:	5c c0       	rjmp	.+184    	; 0x142 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5a c0       	rjmp	.+180    	; 0x142 <__bad_interrupt>
      8e:	00 00       	nop
      90:	58 c0       	rjmp	.+176    	; 0x142 <__bad_interrupt>
      92:	00 00       	nop
      94:	56 c0       	rjmp	.+172    	; 0x142 <__bad_interrupt>
      96:	00 00       	nop
      98:	54 c0       	rjmp	.+168    	; 0x142 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	52 c0       	rjmp	.+164    	; 0x142 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	50 c0       	rjmp	.+160    	; 0x142 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4e c0       	rjmp	.+156    	; 0x142 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4c c0       	rjmp	.+152    	; 0x142 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4a c0       	rjmp	.+148    	; 0x142 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	48 c0       	rjmp	.+144    	; 0x142 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	46 c0       	rjmp	.+140    	; 0x142 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	44 c0       	rjmp	.+136    	; 0x142 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	4d c1       	rjmp	.+666    	; 0x358 <__vector_47>
      be:	00 00       	nop
      c0:	40 c0       	rjmp	.+128    	; 0x142 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3e c0       	rjmp	.+124    	; 0x142 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3c c0       	rjmp	.+120    	; 0x142 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3a c0       	rjmp	.+116    	; 0x142 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	38 c0       	rjmp	.+112    	; 0x142 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	36 c0       	rjmp	.+108    	; 0x142 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	34 c0       	rjmp	.+104    	; 0x142 <__bad_interrupt>
      da:	00 00       	nop
      dc:	32 c0       	rjmp	.+100    	; 0x142 <__bad_interrupt>
      de:	00 00       	nop
      e0:	30 c0       	rjmp	.+96     	; 0x142 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	05 a8       	ldd	r0, Z+53	; 0x35
      e6:	4c cd       	rjmp	.-1384   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
      e8:	b2 d4       	rcall	.+2404   	; 0xa4e <mpu6050_getRawData+0xbe>
      ea:	4e b9       	out	0x0e, r20	; 14
      ec:	38 36       	cpi	r19, 0x68	; 104
      ee:	a9 02       	muls	r26, r25
      f0:	0c 50       	subi	r16, 0x0C	; 12
      f2:	b9 91       	ld	r27, Y+
      f4:	86 88       	ldd	r8, Z+22	; 0x16
      f6:	08 3c       	cpi	r16, 0xC8	; 200
      f8:	a6 aa       	std	Z+54, r10	; 0x36
      fa:	aa 2a       	or	r10, r26
      fc:	be 00       	.word	0x00be	; ????
      fe:	00 00       	nop
     100:	80 3f       	cpi	r24, 0xF0	; 240

00000102 <__ctors_end>:
     102:	11 24       	eor	r1, r1
     104:	1f be       	out	0x3f, r1	; 63
     106:	cf ef       	ldi	r28, 0xFF	; 255
     108:	d1 e2       	ldi	r29, 0x21	; 33
     10a:	de bf       	out	0x3e, r29	; 62
     10c:	cd bf       	out	0x3d, r28	; 61
     10e:	00 e0       	ldi	r16, 0x00	; 0
     110:	0c bf       	out	0x3c, r16	; 60

00000112 <__do_copy_data>:
     112:	14 e0       	ldi	r17, 0x04	; 4
     114:	a0 e0       	ldi	r26, 0x00	; 0
     116:	b2 e0       	ldi	r27, 0x02	; 2
     118:	ee e4       	ldi	r30, 0x4E	; 78
     11a:	fb e1       	ldi	r31, 0x1B	; 27
     11c:	00 e0       	ldi	r16, 0x00	; 0
     11e:	0b bf       	out	0x3b, r16	; 59
     120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x14>
     122:	07 90       	elpm	r0, Z+
     124:	0d 92       	st	X+, r0
     126:	ae 33       	cpi	r26, 0x3E	; 62
     128:	b1 07       	cpc	r27, r17
     12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0x10>

0000012c <__do_clear_bss>:
     12c:	24 e0       	ldi	r18, 0x04	; 4
     12e:	ae e3       	ldi	r26, 0x3E	; 62
     130:	b4 e0       	ldi	r27, 0x04	; 4
     132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
     134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
     136:	a5 36       	cpi	r26, 0x65	; 101
     138:	b2 07       	cpc	r27, r18
     13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
     13c:	81 d1       	rcall	.+770    	; 0x440 <main>
     13e:	0c 94 a5 0d 	jmp	0x1b4a	; 0x1b4a <_exit>

00000142 <__bad_interrupt>:
     142:	5e cf       	rjmp	.-324    	; 0x0 <__vectors>

00000144 <init_gpio>:
	*/
	//DDRB|=(1<<PB5);//LED13
	//sbi(DDRB,4);//digital 10
	//sbi(DDRB,5);//digital 11
	//sbi(DDRB,6);//digital 12
	sbi(DDRH,3);//digital 6 OC4A
     144:	e1 e0       	ldi	r30, 0x01	; 1
     146:	f1 e0       	ldi	r31, 0x01	; 1
     148:	80 81       	ld	r24, Z
     14a:	88 60       	ori	r24, 0x08	; 8
     14c:	80 83       	st	Z, r24
	sbi(DDRH,4);//digital 7 OC4B
     14e:	80 81       	ld	r24, Z
     150:	80 61       	ori	r24, 0x10	; 16
     152:	80 83       	st	Z, r24
	sbi(DDRH,5);//digital 8 OC4C
     154:	80 81       	ld	r24, Z
     156:	80 62       	ori	r24, 0x20	; 32
     158:	80 83       	st	Z, r24
     15a:	08 95       	ret

0000015c <uart_putchar>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     15c:	cf 93       	push	r28
     15e:	c8 2f       	mov	r28, r24
     160:	8a 30       	cpi	r24, 0x0A	; 10
     162:	11 f4       	brne	.+4      	; 0x168 <uart_putchar+0xc>
     164:	8d e0       	ldi	r24, 0x0D	; 13
     166:	fa df       	rcall	.-12     	; 0x15c <uart_putchar>
     168:	e0 ec       	ldi	r30, 0xC0	; 192
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	80 81       	ld	r24, Z
     16e:	85 ff       	sbrs	r24, 5
     170:	fd cf       	rjmp	.-6      	; 0x16c <uart_putchar+0x10>
     172:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <__vector_23>:
     17e:	1f 92       	push	r1
     180:	0f 92       	push	r0
     182:	0f b6       	in	r0, 0x3f	; 63
     184:	0f 92       	push	r0
     186:	11 24       	eor	r1, r1
     188:	2f 93       	push	r18
     18a:	3f 93       	push	r19
     18c:	8f 93       	push	r24
     18e:	9f 93       	push	r25
     190:	af 93       	push	r26
     192:	bf 93       	push	r27
     194:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <timer0_millis>
     198:	90 91 40 04 	lds	r25, 0x0440	; 0x800440 <timer0_millis+0x1>
     19c:	a0 91 41 04 	lds	r26, 0x0441	; 0x800441 <timer0_millis+0x2>
     1a0:	b0 91 42 04 	lds	r27, 0x0442	; 0x800442 <timer0_millis+0x3>
     1a4:	30 91 3e 04 	lds	r19, 0x043E	; 0x80043e <__data_end>
     1a8:	23 e0       	ldi	r18, 0x03	; 3
     1aa:	23 0f       	add	r18, r19
     1ac:	2d 37       	cpi	r18, 0x7D	; 125
     1ae:	20 f4       	brcc	.+8      	; 0x1b8 <__vector_23+0x3a>
     1b0:	01 96       	adiw	r24, 0x01	; 1
     1b2:	a1 1d       	adc	r26, r1
     1b4:	b1 1d       	adc	r27, r1
     1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <__vector_23+0x44>
     1b8:	26 e8       	ldi	r18, 0x86	; 134
     1ba:	23 0f       	add	r18, r19
     1bc:	02 96       	adiw	r24, 0x02	; 2
     1be:	a1 1d       	adc	r26, r1
     1c0:	b1 1d       	adc	r27, r1
     1c2:	20 93 3e 04 	sts	0x043E, r18	; 0x80043e <__data_end>
     1c6:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <timer0_millis>
     1ca:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <timer0_millis+0x1>
     1ce:	a0 93 41 04 	sts	0x0441, r26	; 0x800441 <timer0_millis+0x2>
     1d2:	b0 93 42 04 	sts	0x0442, r27	; 0x800442 <timer0_millis+0x3>
     1d6:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <timer0_overflow_count>
     1da:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <timer0_overflow_count+0x1>
     1de:	a0 91 45 04 	lds	r26, 0x0445	; 0x800445 <timer0_overflow_count+0x2>
     1e2:	b0 91 46 04 	lds	r27, 0x0446	; 0x800446 <timer0_overflow_count+0x3>
     1e6:	01 96       	adiw	r24, 0x01	; 1
     1e8:	a1 1d       	adc	r26, r1
     1ea:	b1 1d       	adc	r27, r1
     1ec:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <timer0_overflow_count>
     1f0:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <timer0_overflow_count+0x1>
     1f4:	a0 93 45 04 	sts	0x0445, r26	; 0x800445 <timer0_overflow_count+0x2>
     1f8:	b0 93 46 04 	sts	0x0446, r27	; 0x800446 <timer0_overflow_count+0x3>
     1fc:	bf 91       	pop	r27
     1fe:	af 91       	pop	r26
     200:	9f 91       	pop	r25
     202:	8f 91       	pop	r24
     204:	3f 91       	pop	r19
     206:	2f 91       	pop	r18
     208:	0f 90       	pop	r0
     20a:	0f be       	out	0x3f, r0	; 63
     20c:	0f 90       	pop	r0
     20e:	1f 90       	pop	r1
     210:	18 95       	reti

00000212 <micros>:
     212:	3f b7       	in	r19, 0x3f	; 63
     214:	f8 94       	cli
     216:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <timer0_overflow_count>
     21a:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <timer0_overflow_count+0x1>
     21e:	a0 91 45 04 	lds	r26, 0x0445	; 0x800445 <timer0_overflow_count+0x2>
     222:	b0 91 46 04 	lds	r27, 0x0446	; 0x800446 <timer0_overflow_count+0x3>
     226:	26 b5       	in	r18, 0x26	; 38
     228:	a8 9b       	sbis	0x15, 0	; 21
     22a:	05 c0       	rjmp	.+10     	; 0x236 <micros+0x24>
     22c:	2f 3f       	cpi	r18, 0xFF	; 255
     22e:	19 f0       	breq	.+6      	; 0x236 <micros+0x24>
     230:	01 96       	adiw	r24, 0x01	; 1
     232:	a1 1d       	adc	r26, r1
     234:	b1 1d       	adc	r27, r1
     236:	3f bf       	out	0x3f, r19	; 63
     238:	ba 2f       	mov	r27, r26
     23a:	a9 2f       	mov	r26, r25
     23c:	98 2f       	mov	r25, r24
     23e:	88 27       	eor	r24, r24
     240:	82 0f       	add	r24, r18
     242:	91 1d       	adc	r25, r1
     244:	a1 1d       	adc	r26, r1
     246:	b1 1d       	adc	r27, r1
     248:	bc 01       	movw	r22, r24
     24a:	cd 01       	movw	r24, r26
     24c:	66 0f       	add	r22, r22
     24e:	77 1f       	adc	r23, r23
     250:	88 1f       	adc	r24, r24
     252:	99 1f       	adc	r25, r25
     254:	66 0f       	add	r22, r22
     256:	77 1f       	adc	r23, r23
     258:	88 1f       	adc	r24, r24
     25a:	99 1f       	adc	r25, r25
     25c:	08 95       	ret

0000025e <PWM_update>:
{
	PWM_update();
}
void PWM_update()//motor pwm update 
{
	U_PWM=pwmSin[U_step];
     25e:	e0 91 47 04 	lds	r30, 0x0447	; 0x800447 <U_step>
     262:	f0 91 48 04 	lds	r31, 0x0448	; 0x800448 <U_step+0x1>
     266:	e4 5d       	subi	r30, 0xD4	; 212
     268:	fd 4f       	sbci	r31, 0xFD	; 253
     26a:	80 81       	ld	r24, Z
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     272:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
	V_PWM=pwmSin[V_step];
     276:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <V_step>
     27a:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <V_step+0x1>
     27e:	e4 5d       	subi	r30, 0xD4	; 212
     280:	fd 4f       	sbci	r31, 0xFD	; 253
     282:	80 81       	ld	r24, Z
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     28a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
	W_PWM=pwmSin[W_step];
     28e:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <W_step>
     292:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <W_step+0x1>
     296:	e4 5d       	subi	r30, 0xD4	; 212
     298:	fd 4f       	sbci	r31, 0xFD	; 253
     29a:	80 81       	ld	r24, Z
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
     2a2:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
	U_step=U_step+incr;
     2a6:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <incr>
     2aa:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <incr+0x1>
     2ae:	40 91 47 04 	lds	r20, 0x0447	; 0x800447 <U_step>
     2b2:	50 91 48 04 	lds	r21, 0x0448	; 0x800448 <U_step+0x1>
     2b6:	46 0f       	add	r20, r22
     2b8:	57 1f       	adc	r21, r23
     2ba:	50 93 48 04 	sts	0x0448, r21	; 0x800448 <U_step+0x1>
     2be:	40 93 47 04 	sts	0x0447, r20	; 0x800447 <U_step>
	V_step=V_step+incr;
     2c2:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <V_step>
     2c6:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <V_step+0x1>
     2ca:	26 0f       	add	r18, r22
     2cc:	37 1f       	adc	r19, r23
     2ce:	30 93 0d 02 	sts	0x020D, r19	; 0x80020d <V_step+0x1>
     2d2:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <V_step>
	W_step=W_step+incr;
     2d6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <W_step>
     2da:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <W_step+0x1>
     2de:	86 0f       	add	r24, r22
     2e0:	97 1f       	adc	r25, r23
     2e2:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <W_step+0x1>
     2e6:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <W_step>
	if(U_step > sinTableSize)  U_step = 0;
     2ea:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <sinTableSize>
     2ee:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <sinTableSize+0x1>
     2f2:	64 17       	cp	r22, r20
     2f4:	75 07       	cpc	r23, r21
     2f6:	2c f4       	brge	.+10     	; 0x302 <PWM_update+0xa4>
     2f8:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <U_step+0x1>
     2fc:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <U_step>
     300:	06 c0       	rjmp	.+12     	; 0x30e <PWM_update+0xb0>
	if(U_step < 0)  U_step = sinTableSize;
     302:	55 23       	and	r21, r21
     304:	24 f4       	brge	.+8      	; 0x30e <PWM_update+0xb0>
     306:	70 93 48 04 	sts	0x0448, r23	; 0x800448 <U_step+0x1>
     30a:	60 93 47 04 	sts	0x0447, r22	; 0x800447 <U_step>
	
	if(V_step > sinTableSize)  V_step = 0;
     30e:	62 17       	cp	r22, r18
     310:	73 07       	cpc	r23, r19
     312:	2c f4       	brge	.+10     	; 0x31e <PWM_update+0xc0>
     314:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <V_step+0x1>
     318:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <V_step>
     31c:	06 c0       	rjmp	.+12     	; 0x32a <PWM_update+0xcc>
	if(V_step < 0)  V_step = sinTableSize;
     31e:	33 23       	and	r19, r19
     320:	24 f4       	brge	.+8      	; 0x32a <PWM_update+0xcc>
     322:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <V_step+0x1>
     326:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <V_step>
	
	if(W_step > sinTableSize)  W_step = 0;
     32a:	68 17       	cp	r22, r24
     32c:	79 07       	cpc	r23, r25
     32e:	2c f4       	brge	.+10     	; 0x33a <PWM_update+0xdc>
     330:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <W_step+0x1>
     334:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <W_step>
     338:	06 c0       	rjmp	.+12     	; 0x346 <PWM_update+0xe8>
	if(W_step < 0) W_step = sinTableSize;
     33a:	99 23       	and	r25, r25
     33c:	24 f4       	brge	.+8      	; 0x346 <PWM_update+0xe8>
     33e:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <W_step+0x1>
     342:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <W_step>
	//_delay_us(100);
	OCR5A=pwm_delay;
     346:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <pwm_delay>
     34a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <pwm_delay+0x1>
     34e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     352:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     356:	08 95       	ret

00000358 <__vector_47>:
	SREG = oldSREG;

	return m;
}
ISR(TIMER5_COMPA_vect)//motor update interrupt routine
{
     358:	1f 92       	push	r1
     35a:	0f 92       	push	r0
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	0f 92       	push	r0
     360:	11 24       	eor	r1, r1
     362:	0b b6       	in	r0, 0x3b	; 59
     364:	0f 92       	push	r0
     366:	2f 93       	push	r18
     368:	3f 93       	push	r19
     36a:	4f 93       	push	r20
     36c:	5f 93       	push	r21
     36e:	6f 93       	push	r22
     370:	7f 93       	push	r23
     372:	8f 93       	push	r24
     374:	9f 93       	push	r25
     376:	af 93       	push	r26
     378:	bf 93       	push	r27
     37a:	ef 93       	push	r30
	PWM_update();
     37c:	ff 93       	push	r31
}
     37e:	6f df       	rcall	.-290    	; 0x25e <PWM_update>
     380:	ff 91       	pop	r31
     382:	ef 91       	pop	r30
     384:	bf 91       	pop	r27
     386:	af 91       	pop	r26
     388:	9f 91       	pop	r25
     38a:	8f 91       	pop	r24
     38c:	7f 91       	pop	r23
     38e:	6f 91       	pop	r22
     390:	5f 91       	pop	r21
     392:	4f 91       	pop	r20
     394:	3f 91       	pop	r19
     396:	2f 91       	pop	r18
     398:	0f 90       	pop	r0
     39a:	0b be       	out	0x3b, r0	; 59
     39c:	0f 90       	pop	r0
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	0f 90       	pop	r0
     3a2:	1f 90       	pop	r1
     3a4:	18 95       	reti

000003a6 <print16>:
	OCR5A=pwm_delay;
}
void print16(uint16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	2a 97       	sbiw	r28, 0x0a	; 10
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     3be:	4a e0       	ldi	r20, 0x0A	; 10
     3c0:	8e 01       	movw	r16, r28
     3c2:	0f 5f       	subi	r16, 0xFF	; 255
     3c4:	1f 4f       	sbci	r17, 0xFF	; 255
     3c6:	b8 01       	movw	r22, r16
     3c8:	fc 01       	movw	r30, r24
     3ca:	80 81       	ld	r24, Z
     3cc:	91 81       	ldd	r25, Z+1	; 0x01
     3ce:	09 d7       	rcall	.+3602   	; 0x11e2 <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     3d0:	1f 93       	push	r17
     3d2:	0f 93       	push	r16
     3d4:	73 d7       	rcall	.+3814   	; 0x12bc <printf>
	//printf("\n");
}
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	2a 96       	adiw	r28, 0x0a	; 10
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	08 95       	ret

000003f0 <print16ln>:

void print16ln(uint16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	cd b7       	in	r28, 0x3d	; 61
     3fa:	de b7       	in	r29, 0x3e	; 62
     3fc:	2a 97       	sbiw	r28, 0x0a	; 10
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	de bf       	out	0x3e, r29	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	cd bf       	out	0x3d, r28	; 61
     408:	4a e0       	ldi	r20, 0x0A	; 10
     40a:	8e 01       	movw	r16, r28
     40c:	0f 5f       	subi	r16, 0xFF	; 255
     40e:	1f 4f       	sbci	r17, 0xFF	; 255
     410:	b8 01       	movw	r22, r16
     412:	fc 01       	movw	r30, r24
     414:	80 81       	ld	r24, Z
     416:	91 81       	ldd	r25, Z+1	; 0x01
     418:	e4 d6       	rcall	.+3528   	; 0x11e2 <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     41a:	1f 93       	push	r17
     41c:	0f 93       	push	r16
	printf("\n");
     41e:	4e d7       	rcall	.+3740   	; 0x12bc <printf>
     420:	8a e0       	ldi	r24, 0x0A	; 10
     422:	90 e0       	ldi	r25, 0x00	; 0
}
     424:	5e d7       	rcall	.+3772   	; 0x12e2 <putchar>
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	2a 96       	adiw	r28, 0x0a	; 10
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	1f 91       	pop	r17
     43c:	0f 91       	pop	r16
     43e:	08 95       	ret

00000440 <main>:
//sizeof(pwmSin)/sizeof(int); // Find lookup table size
uint8_t phase = 60;//sinTableSize / 3;         // Find phase shift and initial A, B C phase values
uint16_t pwm_delay=2000;

int main(void)
{	
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62
     448:	a6 97       	sbiw	r28, 0x26	; 38
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	f8 94       	cli
     44e:	de bf       	out	0x3e, r29	; 62
     450:	0f be       	out	0x3f, r0	; 63
     452:	cd bf       	out	0x3d, r28	; 61
	cli();
	init_gpio();
		#ifdef GYRO
			i2c_init();
     454:	f8 94       	cli
		#endif
	USART_Init(MY_UBRR);
     456:	76 de       	rcall	.-788    	; 0x144 <init_gpio>
     458:	36 d3       	rcall	.+1644   	; 0xac6 <i2c_init>
     45a:	80 e1       	ldi	r24, 0x10	; 16
	uart_str = fdevopen(uart_putchar, NULL);
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	e4 d3       	rcall	.+1992   	; 0xc28 <USART_Init>
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	70 e0       	ldi	r23, 0x00	; 0
		
	setup_timer0();
     464:	8e ea       	ldi	r24, 0xAE	; 174
	Enable_timer0_overflow_interrupt();//micros
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	df d6       	rcall	.+3518   	; 0x1228 <fdevopen>
	
	setup_timer4();//pwm
     46a:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <uart_str+0x1>
	
	setup_timer5();
     46e:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <uart_str>
	Enable_timer5_compare_interrupt();//motor
     472:	1c d3       	rcall	.+1592   	; 0xaac <setup_timer0>
     474:	22 d3       	rcall	.+1604   	; 0xaba <Enable_timer0_overflow_interrupt>

	OCR5A=4000;
     476:	f7 d2       	rcall	.+1518   	; 0xa66 <setup_timer4>
     478:	0a d3       	rcall	.+1556   	; 0xa8e <setup_timer5>
     47a:	12 d3       	rcall	.+1572   	; 0xaa0 <Enable_timer5_compare_interrupt>
     47c:	80 ea       	ldi	r24, 0xA0	; 160
     47e:	9f e0       	ldi	r25, 0x0F	; 15
     480:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
		float acc_total_vector=0;
		float angle_pitch_acc=0;
		float angle_roll_acc=0;
		bool set_gyro_angles=false;
			#ifdef CALIBERATED_DATA
				int32_t gyroX_calib=0;
     484:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     488:	1d 86       	std	Y+13, r1	; 0x0d
				int32_t gyroY_calib=0;
     48a:	1e 86       	std	Y+14, r1	; 0x0e
     48c:	1f 86       	std	Y+15, r1	; 0x0f
     48e:	18 8a       	std	Y+16, r1	; 0x10
     490:	19 8a       	std	Y+17, r1	; 0x11
				int32_t gyroZ_calib=0;
     492:	1a 8a       	std	Y+18, r1	; 0x12
     494:	1b 8a       	std	Y+19, r1	; 0x13
     496:	1c 8a       	std	Y+20, r1	; 0x14
				int32_t accelX_calib=0;
				int32_t accelY_calib=0;
				int32_t accelZ_calib=0;
				mpu6050_calibrate_gyro(&gyroX_calib,&gyroY_calib,&gyroZ_calib);
     498:	1d 8a       	std	Y+21, r1	; 0x15
     49a:	1e 8a       	std	Y+22, r1	; 0x16
     49c:	1f 8a       	std	Y+23, r1	; 0x17
     49e:	18 8e       	std	Y+24, r1	; 0x18
     4a0:	ae 01       	movw	r20, r28
     4a2:	4b 5e       	subi	r20, 0xEB	; 235
     4a4:	5f 4f       	sbci	r21, 0xFF	; 255
				//mpu6050_calibrate_accel(&accelX_calib,&accelY_calib,&accelZ_calib);
			#endif
		mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV,7);
     4a6:	be 01       	movw	r22, r28
     4a8:	6f 5e       	subi	r22, 0xEF	; 239
		mpu6050_writeByte(MPU6050_RA_CONFIG,0x00);
     4aa:	7f 4f       	sbci	r23, 0xFF	; 255
     4ac:	ce 01       	movw	r24, r28
     4ae:	0d 96       	adiw	r24, 0x0d	; 13
		mpu6050_writeByte(MPU6050_RA_GYRO_CONFIG,0x08);//gyro sensitivity set to 500 o/s
     4b0:	5c d1       	rcall	.+696    	; 0x76a <mpu6050_calibrate_gyro>
     4b2:	67 e0       	ldi	r22, 0x07	; 7
     4b4:	89 e1       	ldi	r24, 0x19	; 25
     4b6:	10 d2       	rcall	.+1056   	; 0x8d8 <mpu6050_writeByte>
		mpu6050_writeByte(MPU6050_RA_ACCEL_CONFIG,0x10);//accel sensitivity -/+ 8g
     4b8:	60 e0       	ldi	r22, 0x00	; 0
     4ba:	8a e1       	ldi	r24, 0x1A	; 26
     4bc:	0d d2       	rcall	.+1050   	; 0x8d8 <mpu6050_writeByte>
     4be:	68 e0       	ldi	r22, 0x08	; 8
		mpu6050_writeByte(MPU6050_RA_PWR_MGMT_1,0x01);
     4c0:	8b e1       	ldi	r24, 0x1B	; 27
     4c2:	0a d2       	rcall	.+1044   	; 0x8d8 <mpu6050_writeByte>
     4c4:	60 e1       	ldi	r22, 0x10	; 16
     4c6:	8c e1       	ldi	r24, 0x1C	; 28
	#endif
	/*-----------------end mpu definition -----------------*/
	sei();
     4c8:	07 d2       	rcall	.+1038   	; 0x8d8 <mpu6050_writeByte>
		float angle_pitch=0;
		float angle_roll=0;
		float acc_total_vector=0;
		float angle_pitch_acc=0;
		float angle_roll_acc=0;
		bool set_gyro_angles=false;
     4ca:	61 e0       	ldi	r22, 0x01	; 1
     4cc:	8b e6       	ldi	r24, 0x6B	; 107
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		float angle_pitch=0;
		float angle_roll=0;
     4ce:	04 d2       	rcall	.+1032   	; 0x8d8 <mpu6050_writeByte>
     4d0:	78 94       	sei
     4d2:	c1 2c       	mov	r12, r1
     4d4:	d1 2c       	mov	r13, r1
		int16_t gyro_y;
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		float angle_pitch=0;
     4d6:	b1 2c       	mov	r11, r1
     4d8:	a1 2c       	mov	r10, r1
     4da:	91 2c       	mov	r9, r1
     4dc:	81 2c       	mov	r8, r1
				printf(" ");
				printf("gyrox_angle= ");
				print16(&reg);
				reg=angle_roll;
				printf(" ");
				printf("gyroy_angle= ");
     4de:	71 2c       	mov	r7, r1
     4e0:	61 2c       	mov	r6, r1
     4e2:	51 2c       	mov	r5, r1
     4e4:	41 2c       	mov	r4, r1
     4e6:	0f 2e       	mov	r0, r31
     4e8:	fe e1       	ldi	r31, 0x1E	; 30
	/*-----------------end mpu definition -----------------*/
	sei();
    while (1) 
    {
		#ifdef GYRO
    		mpu6050_getRawData(&accel_x,&accel_y,&accel_z,&gyro_x,&gyro_y,&gyro_z);//15us to do
     4ea:	2f 2e       	mov	r2, r31
     4ec:	f2 e0       	ldi	r31, 0x02	; 2
     4ee:	3f 2e       	mov	r3, r31
     4f0:	f0 2d       	mov	r31, r0
     4f2:	9e 01       	movw	r18, r28
     4f4:	2b 5f       	subi	r18, 0xFB	; 251
     4f6:	3f 4f       	sbci	r19, 0xFF	; 255
     4f8:	79 01       	movw	r14, r18
     4fa:	8e 01       	movw	r16, r28
     4fc:	0d 5f       	subi	r16, 0xFD	; 253
     4fe:	1f 4f       	sbci	r17, 0xFF	; 255
     500:	24 50       	subi	r18, 0x04	; 4
     502:	31 09       	sbc	r19, r1
     504:	ae 01       	movw	r20, r28
     506:	45 5f       	subi	r20, 0xF5	; 245
     508:	5f 4f       	sbci	r21, 0xFF	; 255
     50a:	be 01       	movw	r22, r28
     50c:	67 5f       	subi	r22, 0xF7	; 247
		#ifdef GYRO
			#ifdef CALIBERATED_DATA
				accX;
				accY;
				accZ;
				grX;
     50e:	7f 4f       	sbci	r23, 0xFF	; 255
     510:	ce 01       	movw	r24, r28
     512:	07 96       	adiw	r24, 0x07	; 7
     514:	3d d2       	rcall	.+1146   	; 0x990 <mpu6050_getRawData>
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	9a 81       	ldd	r25, Y+2	; 0x02
     51a:	2d 85       	ldd	r18, Y+13	; 0x0d
				grY;
     51c:	3e 85       	ldd	r19, Y+14	; 0x0e
     51e:	82 1b       	sub	r24, r18
     520:	93 0b       	sbc	r25, r19
     522:	9a 83       	std	Y+2, r25	; 0x02
     524:	89 83       	std	Y+1, r24	; 0x01
     526:	8b 81       	ldd	r24, Y+3	; 0x03
     528:	9c 81       	ldd	r25, Y+4	; 0x04
				grZ;
     52a:	29 89       	ldd	r18, Y+17	; 0x11
     52c:	3a 89       	ldd	r19, Y+18	; 0x12
     52e:	82 1b       	sub	r24, r18
     530:	93 0b       	sbc	r25, r19
     532:	9c 83       	std	Y+4, r25	; 0x04
     534:	8b 83       	std	Y+3, r24	; 0x03
			printf("\n");
			/*--------end------*/			
		#else
			
				
				double dt = (double)((micros() - timer1));
     536:	8d 81       	ldd	r24, Y+5	; 0x05
     538:	9e 81       	ldd	r25, Y+6	; 0x06
     53a:	2d 89       	ldd	r18, Y+21	; 0x15
     53c:	3e 89       	ldd	r19, Y+22	; 0x16
     53e:	82 1b       	sub	r24, r18
     540:	93 0b       	sbc	r25, r19
     542:	9e 83       	std	Y+6, r25	; 0x06
     544:	8d 83       	std	Y+5, r24	; 0x05
     546:	65 de       	rcall	.-822    	; 0x212 <micros>
     548:	2b a1       	ldd	r18, Y+35	; 0x23
     54a:	3c a1       	ldd	r19, Y+36	; 0x24
     54c:	4d a1       	ldd	r20, Y+37	; 0x25
     54e:	5e a1       	ldd	r21, Y+38	; 0x26
     550:	62 1b       	sub	r22, r18
				timer1=micros();
     552:	73 0b       	sbc	r23, r19
     554:	84 0b       	sbc	r24, r20
     556:	95 0b       	sbc	r25, r21
     558:	6b d4       	rcall	.+2262   	; 0xe30 <__floatunsisf>
     55a:	6b 8f       	std	Y+27, r22	; 0x1b
				
				double gyroXrate = gyro_x / 65.5; // Convert to deg/s
				double gyroYrate = gyro_x / 65.5; // Convert to deg/s
				
				angle_pitch += gyro_x*dt/1000000; //Calculate the traveled pitch angle and add this to the angle_pitch variable
     55c:	7c 8f       	std	Y+28, r23	; 0x1c
     55e:	8d 8f       	std	Y+29, r24	; 0x1d
     560:	9e 8f       	std	Y+30, r25	; 0x1e
     562:	57 de       	rcall	.-850    	; 0x212 <micros>
     564:	6b a3       	std	Y+35, r22	; 0x23
     566:	7c a3       	std	Y+36, r23	; 0x24
     568:	8d a3       	std	Y+37, r24	; 0x25
     56a:	9e a3       	std	Y+38, r25	; 0x26
     56c:	69 81       	ldd	r22, Y+1	; 0x01
     56e:	7a 81       	ldd	r23, Y+2	; 0x02
     570:	07 2e       	mov	r0, r23
     572:	00 0c       	add	r0, r0
     574:	88 0b       	sbc	r24, r24
     576:	99 0b       	sbc	r25, r25
     578:	5d d4       	rcall	.+2234   	; 0xe34 <__floatsisf>
     57a:	2b 8d       	ldd	r18, Y+27	; 0x1b
     57c:	3c 8d       	ldd	r19, Y+28	; 0x1c
     57e:	4d 8d       	ldd	r20, Y+29	; 0x1d
     580:	5e 8d       	ldd	r21, Y+30	; 0x1e
     582:	e4 d4       	rcall	.+2504   	; 0xf4c <__mulsf3>
     584:	20 e0       	ldi	r18, 0x00	; 0
     586:	34 e2       	ldi	r19, 0x24	; 36
     588:	44 e7       	ldi	r20, 0x74	; 116
				angle_roll += gyro_y*dt/1000000;  //Calculate the traveled roll angle and add this to the angle_roll variable
     58a:	59 e4       	ldi	r21, 0x49	; 73
     58c:	bd d3       	rcall	.+1914   	; 0xd08 <__divsf3>
     58e:	2b 2d       	mov	r18, r11
     590:	3a 2d       	mov	r19, r10
     592:	49 2d       	mov	r20, r9
     594:	58 2d       	mov	r21, r8
     596:	54 d3       	rcall	.+1704   	; 0xc40 <__addsf3>
     598:	4b 01       	movw	r8, r22
     59a:	5c 01       	movw	r10, r24
     59c:	6b 81       	ldd	r22, Y+3	; 0x03
     59e:	7c 81       	ldd	r23, Y+4	; 0x04
     5a0:	07 2e       	mov	r0, r23
     5a2:	00 0c       	add	r0, r0
     5a4:	88 0b       	sbc	r24, r24
     5a6:	99 0b       	sbc	r25, r25
     5a8:	45 d4       	rcall	.+2186   	; 0xe34 <__floatsisf>
     5aa:	2b 8d       	ldd	r18, Y+27	; 0x1b
     5ac:	3c 8d       	ldd	r19, Y+28	; 0x1c
     5ae:	4d 8d       	ldd	r20, Y+29	; 0x1d
     5b0:	5e 8d       	ldd	r21, Y+30	; 0x1e
     5b2:	cc d4       	rcall	.+2456   	; 0xf4c <__mulsf3>
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	34 e2       	ldi	r19, 0x24	; 36
				
				//0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
				angle_pitch += angle_roll * sin(gyro_z * 0.000001066);               //If the IMU has yawed transfer the roll angle to the pitch angel
     5b8:	44 e7       	ldi	r20, 0x74	; 116
     5ba:	59 e4       	ldi	r21, 0x49	; 73
     5bc:	a5 d3       	rcall	.+1866   	; 0xd08 <__divsf3>
     5be:	27 2d       	mov	r18, r7
     5c0:	36 2d       	mov	r19, r6
     5c2:	45 2d       	mov	r20, r5
     5c4:	54 2d       	mov	r21, r4
     5c6:	3c d3       	rcall	.+1656   	; 0xc40 <__addsf3>
     5c8:	2b 01       	movw	r4, r22
     5ca:	3c 01       	movw	r6, r24
     5cc:	6d 81       	ldd	r22, Y+5	; 0x05
     5ce:	7e 81       	ldd	r23, Y+6	; 0x06
     5d0:	07 2e       	mov	r0, r23
     5d2:	00 0c       	add	r0, r0
     5d4:	88 0b       	sbc	r24, r24
     5d6:	99 0b       	sbc	r25, r25
     5d8:	2d d4       	rcall	.+2138   	; 0xe34 <__floatsisf>
     5da:	2b e7       	ldi	r18, 0x7B	; 123
     5dc:	33 e1       	ldi	r19, 0x13	; 19
     5de:	4f e8       	ldi	r20, 0x8F	; 143
     5e0:	55 e3       	ldi	r21, 0x35	; 53
     5e2:	b4 d4       	rcall	.+2408   	; 0xf4c <__mulsf3>
     5e4:	16 d5       	rcall	.+2604   	; 0x1012 <sin>
     5e6:	6f 8f       	std	Y+31, r22	; 0x1f
     5e8:	78 a3       	std	Y+32, r23	; 0x20
				angle_roll -= angle_pitch * sin(gyro_z * 0.000001066);               //If the IMU has yawed transfer the pitch angle to the roll angel
     5ea:	89 a3       	std	Y+33, r24	; 0x21
     5ec:	9a a3       	std	Y+34, r25	; 0x22
     5ee:	9b 01       	movw	r18, r22
     5f0:	ac 01       	movw	r20, r24
     5f2:	c3 01       	movw	r24, r6
     5f4:	b2 01       	movw	r22, r4
     5f6:	aa d4       	rcall	.+2388   	; 0xf4c <__mulsf3>
     5f8:	a5 01       	movw	r20, r10
     5fa:	94 01       	movw	r18, r8
     5fc:	21 d3       	rcall	.+1602   	; 0xc40 <__addsf3>
     5fe:	4b 01       	movw	r8, r22
				/////57.296 = 1 / (3.142 / 180) The Arduino asin function is in radians
				///acc_total_vector*=100;
				///angle_pitch_acc = asin((float)accel_y/acc_total_vector)* 57.296;       //Calculate the pitch angle
				///angle_roll_acc = asin((float)accel_x/acc_total_vector)* -57.296;       //Calculate the roll angle
				
				uint16_t reg=angle_pitch;
     600:	5c 01       	movw	r10, r24
     602:	9b 01       	movw	r18, r22
     604:	ac 01       	movw	r20, r24
     606:	6f 8d       	ldd	r22, Y+31	; 0x1f
				printf(" ");
     608:	78 a1       	ldd	r23, Y+32	; 0x20
     60a:	89 a1       	ldd	r24, Y+33	; 0x21
     60c:	9a a1       	ldd	r25, Y+34	; 0x22
				printf("gyrox_angle= ");
     60e:	9e d4       	rcall	.+2364   	; 0xf4c <__mulsf3>
     610:	9b 01       	movw	r18, r22
     612:	ac 01       	movw	r20, r24
     614:	c3 01       	movw	r24, r6
     616:	b2 01       	movw	r22, r4
				print16(&reg);
     618:	12 d3       	rcall	.+1572   	; 0xc3e <__subsf3>
     61a:	2b 01       	movw	r4, r22
     61c:	3c 01       	movw	r6, r24
     61e:	c5 01       	movw	r24, r10
				reg=angle_roll;
     620:	b4 01       	movw	r22, r8
     622:	da d3       	rcall	.+1972   	; 0xdd8 <__fixunssfsi>
     624:	7a 8f       	std	Y+26, r23	; 0x1a
     626:	69 8f       	std	Y+25, r22	; 0x19
     628:	80 e2       	ldi	r24, 0x20	; 32
     62a:	90 e0       	ldi	r25, 0x00	; 0
				printf(" ");
     62c:	5a d6       	rcall	.+3252   	; 0x12e2 <putchar>
     62e:	40 e1       	ldi	r20, 0x10	; 16
     630:	52 e0       	ldi	r21, 0x02	; 2
				printf("gyroy_angle= ");
     632:	5f 93       	push	r21
     634:	4f 93       	push	r20
     636:	42 d6       	rcall	.+3204   	; 0x12bc <printf>
				print16(&reg);
     638:	ce 01       	movw	r24, r28
     63a:	49 96       	adiw	r24, 0x19	; 25
     63c:	b4 de       	rcall	.-664    	; 0x3a6 <print16>
     63e:	c3 01       	movw	r24, r6
				reg=dt;
     640:	b2 01       	movw	r22, r4
     642:	ca d3       	rcall	.+1940   	; 0xdd8 <__fixunssfsi>
     644:	7a 8f       	std	Y+26, r23	; 0x1a
     646:	69 8f       	std	Y+25, r22	; 0x19
     648:	80 e2       	ldi	r24, 0x20	; 32
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	4a d6       	rcall	.+3220   	; 0x12e2 <putchar>
				printf(" ");
     64e:	3f 92       	push	r3
     650:	2f 92       	push	r2
     652:	34 d6       	rcall	.+3176   	; 0x12bc <printf>
				printf("gyroy_angle= ");
     654:	ce 01       	movw	r24, r28
     656:	49 96       	adiw	r24, 0x19	; 25
     658:	a6 de       	rcall	.-692    	; 0x3a6 <print16>
     65a:	6b 8d       	ldd	r22, Y+27	; 0x1b
				print16ln(&reg);
     65c:	7c 8d       	ldd	r23, Y+28	; 0x1c
     65e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     660:	9e 8d       	ldd	r25, Y+30	; 0x1e
     662:	ba d3       	rcall	.+1908   	; 0xdd8 <__fixunssfsi>
							printf(" no\n");
							sei();
						}					
				#endif	//DRV8313
							 
				if(set_gyro_angles){                                                 //If the IMU is already started
     664:	7a 8f       	std	Y+26, r23	; 0x1a
     666:	69 8f       	std	Y+25, r22	; 0x19
     668:	80 e2       	ldi	r24, 0x20	; 32
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	3a d6       	rcall	.+3188   	; 0x12e2 <putchar>
     66e:	3f 92       	push	r3
     670:	2f 92       	push	r2
     672:	24 d6       	rcall	.+3144   	; 0x12bc <printf>
     674:	ce 01       	movw	r24, r28
					 angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;     //Correct the drift of the gyro pitch angle with the accelerometer pitch angle
     676:	49 96       	adiw	r24, 0x19	; 25
     678:	bb de       	rcall	.-650    	; 0x3f0 <print16ln>
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	c1 14       	cp	r12, r1
     688:	d1 04       	cpc	r13, r1
     68a:	09 f1       	breq	.+66     	; 0x6ce <main+0x28e>
     68c:	29 ec       	ldi	r18, 0xC9	; 201
     68e:	35 ee       	ldi	r19, 0xE5	; 229
     690:	4f e7       	ldi	r20, 0x7F	; 127
     692:	5f e3       	ldi	r21, 0x3F	; 63
     694:	c5 01       	movw	r24, r10
     696:	b4 01       	movw	r22, r8
     698:	59 d4       	rcall	.+2226   	; 0xf4c <__mulsf3>
					 angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;        //Correct the drift of the gyro roll angle with the accelerometer roll angle
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	40 e0       	ldi	r20, 0x00	; 0
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	ce d2       	rcall	.+1436   	; 0xc40 <__addsf3>
     6a4:	b6 2e       	mov	r11, r22
     6a6:	a7 2e       	mov	r10, r23
     6a8:	98 2e       	mov	r9, r24
     6aa:	89 2e       	mov	r8, r25
     6ac:	29 ec       	ldi	r18, 0xC9	; 201
     6ae:	35 ee       	ldi	r19, 0xE5	; 229
     6b0:	4f e7       	ldi	r20, 0x7F	; 127
     6b2:	5f e3       	ldi	r21, 0x3F	; 63
     6b4:	c3 01       	movw	r24, r6
     6b6:	b2 01       	movw	r22, r4
     6b8:	49 d4       	rcall	.+2194   	; 0xf4c <__mulsf3>
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e0       	ldi	r20, 0x00	; 0
				}
				else{                                                                //At first start
					 angle_pitch = angle_pitch_acc;                                     //Set the gyro pitch angle equal to the accelerometer pitch angle
					 angle_roll = angle_roll_acc;                                       //Set the gyro roll angle equal to the accelerometer roll angle
					 set_gyro_angles = true;                                            //Set the IMU started flag
     6c0:	50 e0       	ldi	r21, 0x00	; 0
     6c2:	be d2       	rcall	.+1404   	; 0xc40 <__addsf3>
     6c4:	76 2e       	mov	r7, r22
					 angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;     //Correct the drift of the gyro pitch angle with the accelerometer pitch angle
					 angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;        //Correct the drift of the gyro roll angle with the accelerometer roll angle
				}
				else{                                                                //At first start
					 angle_pitch = angle_pitch_acc;                                     //Set the gyro pitch angle equal to the accelerometer pitch angle
					 angle_roll = angle_roll_acc;                                       //Set the gyro roll angle equal to the accelerometer roll angle
     6c6:	67 2e       	mov	r6, r23
     6c8:	58 2e       	mov	r5, r24
     6ca:	49 2e       	mov	r4, r25
     6cc:	12 cf       	rjmp	.-476    	; 0x4f2 <main+0xb2>
				if(set_gyro_angles){                                                 //If the IMU is already started
					 angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;     //Correct the drift of the gyro pitch angle with the accelerometer pitch angle
					 angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;        //Correct the drift of the gyro roll angle with the accelerometer roll angle
				}
				else{                                                                //At first start
					 angle_pitch = angle_pitch_acc;                                     //Set the gyro pitch angle equal to the accelerometer pitch angle
     6ce:	cc 24       	eor	r12, r12
     6d0:	c3 94       	inc	r12
     6d2:	d1 2c       	mov	r13, r1
     6d4:	71 2c       	mov	r7, r1
			#endif //PRINT_RAW_DATA			
		#endif //GYRO
		//while(micros()-timer1<4000);
		//timer1=micros();
		
	}
     6d6:	61 2c       	mov	r6, r1
     6d8:	51 2c       	mov	r5, r1
     6da:	41 2c       	mov	r4, r1
     6dc:	b1 2c       	mov	r11, r1
     6de:	a1 2c       	mov	r10, r1
     6e0:	91 2c       	mov	r9, r1
     6e2:	81 2c       	mov	r8, r1
     6e4:	06 cf       	rjmp	.-500    	; 0x4f2 <main+0xb2>

000006e6 <mpu6050_readByte>:
	printf("  ");
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/
}
     6e6:	cf 93       	push	r28
     6e8:	c8 2f       	mov	r28, r24
     6ea:	80 ed       	ldi	r24, 0xD0	; 208
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	f1 d1       	rcall	.+994    	; 0xad2 <i2c_start>
     6f0:	8c 2f       	mov	r24, r28
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	44 d2       	rcall	.+1160   	; 0xb7e <i2c_write>
     6f6:	33 d2       	rcall	.+1126   	; 0xb5e <i2c_stop>
     6f8:	81 ed       	ldi	r24, 0xD1	; 209
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	ea d1       	rcall	.+980    	; 0xad2 <i2c_start>
     6fe:	7a d2       	rcall	.+1268   	; 0xbf4 <i2c_readNak>
     700:	c8 2f       	mov	r28, r24
     702:	2d d2       	rcall	.+1114   	; 0xb5e <i2c_stop>
     704:	8c 2f       	mov	r24, r28
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <mpu6050_read_gyroX>:
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	83 e4       	ldi	r24, 0x43	; 67
     710:	ea df       	rcall	.-44     	; 0x6e6 <mpu6050_readByte>
     712:	c8 2f       	mov	r28, r24
     714:	d0 e0       	ldi	r29, 0x00	; 0
     716:	dc 2f       	mov	r29, r28
     718:	cc 27       	eor	r28, r28
     71a:	84 e4       	ldi	r24, 0x44	; 68
     71c:	e4 df       	rcall	.-56     	; 0x6e6 <mpu6050_readByte>
     71e:	9e 01       	movw	r18, r28
     720:	28 2b       	or	r18, r24
     722:	c9 01       	movw	r24, r18
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <mpu6050_read_gyroY>:
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	85 e4       	ldi	r24, 0x45	; 69
     730:	da df       	rcall	.-76     	; 0x6e6 <mpu6050_readByte>
     732:	c8 2f       	mov	r28, r24
     734:	d0 e0       	ldi	r29, 0x00	; 0
     736:	dc 2f       	mov	r29, r28
     738:	cc 27       	eor	r28, r28
     73a:	86 e4       	ldi	r24, 0x46	; 70
     73c:	d4 df       	rcall	.-88     	; 0x6e6 <mpu6050_readByte>
     73e:	9e 01       	movw	r18, r28
     740:	28 2b       	or	r18, r24
     742:	c9 01       	movw	r24, r18
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	08 95       	ret

0000074a <mpu6050_read_gyroZ>:
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	87 e4       	ldi	r24, 0x47	; 71
     750:	ca df       	rcall	.-108    	; 0x6e6 <mpu6050_readByte>
     752:	c8 2f       	mov	r28, r24
     754:	d0 e0       	ldi	r29, 0x00	; 0
     756:	dc 2f       	mov	r29, r28
     758:	cc 27       	eor	r28, r28
     75a:	88 e4       	ldi	r24, 0x48	; 72
     75c:	c4 df       	rcall	.-120    	; 0x6e6 <mpu6050_readByte>
     75e:	9e 01       	movw	r18, r28
     760:	28 2b       	or	r18, r24
     762:	c9 01       	movw	r24, r18
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	08 95       	ret

0000076a <mpu6050_calibrate_gyro>:
     76a:	cf 92       	push	r12
     76c:	df 92       	push	r13
     76e:	ef 92       	push	r14
     770:	ff 92       	push	r15
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	6c 01       	movw	r12, r24
     77c:	7b 01       	movw	r14, r22
     77e:	8a 01       	movw	r16, r20
     780:	8c e0       	ldi	r24, 0x0C	; 12
     782:	94 e0       	ldi	r25, 0x04	; 4
     784:	b3 d5       	rcall	.+2918   	; 0x12ec <puts>
     786:	c4 e1       	ldi	r28, 0x14	; 20
     788:	d0 e0       	ldi	r29, 0x00	; 0
     78a:	bf df       	rcall	.-130    	; 0x70a <mpu6050_read_gyroX>
     78c:	f6 01       	movw	r30, r12
     78e:	40 81       	ld	r20, Z
     790:	51 81       	ldd	r21, Z+1	; 0x01
     792:	62 81       	ldd	r22, Z+2	; 0x02
     794:	73 81       	ldd	r23, Z+3	; 0x03
     796:	48 0f       	add	r20, r24
     798:	59 1f       	adc	r21, r25
     79a:	61 1d       	adc	r22, r1
     79c:	71 1d       	adc	r23, r1
     79e:	40 83       	st	Z, r20
     7a0:	51 83       	std	Z+1, r21	; 0x01
     7a2:	62 83       	std	Z+2, r22	; 0x02
     7a4:	73 83       	std	Z+3, r23	; 0x03
     7a6:	c1 df       	rcall	.-126    	; 0x72a <mpu6050_read_gyroY>
     7a8:	f7 01       	movw	r30, r14
     7aa:	40 81       	ld	r20, Z
     7ac:	51 81       	ldd	r21, Z+1	; 0x01
     7ae:	62 81       	ldd	r22, Z+2	; 0x02
     7b0:	73 81       	ldd	r23, Z+3	; 0x03
     7b2:	48 0f       	add	r20, r24
     7b4:	59 1f       	adc	r21, r25
     7b6:	61 1d       	adc	r22, r1
     7b8:	71 1d       	adc	r23, r1
     7ba:	40 83       	st	Z, r20
     7bc:	51 83       	std	Z+1, r21	; 0x01
     7be:	62 83       	std	Z+2, r22	; 0x02
     7c0:	73 83       	std	Z+3, r23	; 0x03
     7c2:	c3 df       	rcall	.-122    	; 0x74a <mpu6050_read_gyroZ>
     7c4:	f8 01       	movw	r30, r16
     7c6:	40 81       	ld	r20, Z
     7c8:	51 81       	ldd	r21, Z+1	; 0x01
     7ca:	62 81       	ldd	r22, Z+2	; 0x02
     7cc:	73 81       	ldd	r23, Z+3	; 0x03
     7ce:	48 0f       	add	r20, r24
     7d0:	59 1f       	adc	r21, r25
     7d2:	61 1d       	adc	r22, r1
     7d4:	71 1d       	adc	r23, r1
     7d6:	40 83       	st	Z, r20
     7d8:	51 83       	std	Z+1, r21	; 0x01
     7da:	62 83       	std	Z+2, r22	; 0x02
     7dc:	73 83       	std	Z+3, r23	; 0x03
     7de:	21 97       	sbiw	r28, 0x01	; 1
     7e0:	a1 f6       	brne	.-88     	; 0x78a <mpu6050_calibrate_gyro+0x20>
     7e2:	f6 01       	movw	r30, r12
     7e4:	60 81       	ld	r22, Z
     7e6:	71 81       	ldd	r23, Z+1	; 0x01
     7e8:	82 81       	ldd	r24, Z+2	; 0x02
     7ea:	93 81       	ldd	r25, Z+3	; 0x03
     7ec:	99 23       	and	r25, r25
     7ee:	ac f4       	brge	.+42     	; 0x81a <mpu6050_calibrate_gyro+0xb0>
     7f0:	9b 01       	movw	r18, r22
     7f2:	77 23       	and	r23, r23
     7f4:	24 f4       	brge	.+8      	; 0x7fe <mpu6050_calibrate_gyro+0x94>
     7f6:	22 27       	eor	r18, r18
     7f8:	33 27       	eor	r19, r19
     7fa:	26 1b       	sub	r18, r22
     7fc:	37 0b       	sbc	r19, r23
     7fe:	c9 01       	movw	r24, r18
     800:	64 e1       	ldi	r22, 0x14	; 20
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	89 d4       	rcall	.+2322   	; 0x1118 <__divmodhi4>
     806:	cb 01       	movw	r24, r22
     808:	77 0f       	add	r23, r23
     80a:	aa 0b       	sbc	r26, r26
     80c:	bb 0b       	sbc	r27, r27
     80e:	f6 01       	movw	r30, r12
     810:	80 83       	st	Z, r24
     812:	91 83       	std	Z+1, r25	; 0x01
     814:	a2 83       	std	Z+2, r26	; 0x02
     816:	b3 83       	std	Z+3, r27	; 0x03
     818:	0a c0       	rjmp	.+20     	; 0x82e <mpu6050_calibrate_gyro+0xc4>
     81a:	24 e1       	ldi	r18, 0x14	; 20
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	40 e0       	ldi	r20, 0x00	; 0
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	8d d4       	rcall	.+2330   	; 0x113e <__divmodsi4>
     824:	f6 01       	movw	r30, r12
     826:	20 83       	st	Z, r18
     828:	31 83       	std	Z+1, r19	; 0x01
     82a:	42 83       	std	Z+2, r20	; 0x02
     82c:	53 83       	std	Z+3, r21	; 0x03
     82e:	f7 01       	movw	r30, r14
     830:	60 81       	ld	r22, Z
     832:	71 81       	ldd	r23, Z+1	; 0x01
     834:	82 81       	ldd	r24, Z+2	; 0x02
     836:	93 81       	ldd	r25, Z+3	; 0x03
     838:	99 23       	and	r25, r25
     83a:	ac f4       	brge	.+42     	; 0x866 <mpu6050_calibrate_gyro+0xfc>
     83c:	9b 01       	movw	r18, r22
     83e:	77 23       	and	r23, r23
     840:	24 f4       	brge	.+8      	; 0x84a <mpu6050_calibrate_gyro+0xe0>
     842:	22 27       	eor	r18, r18
     844:	33 27       	eor	r19, r19
     846:	26 1b       	sub	r18, r22
     848:	37 0b       	sbc	r19, r23
     84a:	c9 01       	movw	r24, r18
     84c:	64 e1       	ldi	r22, 0x14	; 20
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	63 d4       	rcall	.+2246   	; 0x1118 <__divmodhi4>
     852:	cb 01       	movw	r24, r22
     854:	77 0f       	add	r23, r23
     856:	aa 0b       	sbc	r26, r26
     858:	bb 0b       	sbc	r27, r27
     85a:	f7 01       	movw	r30, r14
     85c:	80 83       	st	Z, r24
     85e:	91 83       	std	Z+1, r25	; 0x01
     860:	a2 83       	std	Z+2, r26	; 0x02
     862:	b3 83       	std	Z+3, r27	; 0x03
     864:	0a c0       	rjmp	.+20     	; 0x87a <mpu6050_calibrate_gyro+0x110>
     866:	24 e1       	ldi	r18, 0x14	; 20
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	67 d4       	rcall	.+2254   	; 0x113e <__divmodsi4>
     870:	f7 01       	movw	r30, r14
     872:	20 83       	st	Z, r18
     874:	31 83       	std	Z+1, r19	; 0x01
     876:	42 83       	std	Z+2, r20	; 0x02
     878:	53 83       	std	Z+3, r21	; 0x03
     87a:	f8 01       	movw	r30, r16
     87c:	60 81       	ld	r22, Z
     87e:	71 81       	ldd	r23, Z+1	; 0x01
     880:	82 81       	ldd	r24, Z+2	; 0x02
     882:	93 81       	ldd	r25, Z+3	; 0x03
     884:	99 23       	and	r25, r25
     886:	ac f4       	brge	.+42     	; 0x8b2 <mpu6050_calibrate_gyro+0x148>
     888:	9b 01       	movw	r18, r22
     88a:	77 23       	and	r23, r23
     88c:	24 f4       	brge	.+8      	; 0x896 <mpu6050_calibrate_gyro+0x12c>
     88e:	22 27       	eor	r18, r18
     890:	33 27       	eor	r19, r19
     892:	26 1b       	sub	r18, r22
     894:	37 0b       	sbc	r19, r23
     896:	c9 01       	movw	r24, r18
     898:	64 e1       	ldi	r22, 0x14	; 20
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	3d d4       	rcall	.+2170   	; 0x1118 <__divmodhi4>
     89e:	cb 01       	movw	r24, r22
     8a0:	77 0f       	add	r23, r23
     8a2:	aa 0b       	sbc	r26, r26
     8a4:	bb 0b       	sbc	r27, r27
     8a6:	f8 01       	movw	r30, r16
     8a8:	80 83       	st	Z, r24
     8aa:	91 83       	std	Z+1, r25	; 0x01
     8ac:	a2 83       	std	Z+2, r26	; 0x02
     8ae:	b3 83       	std	Z+3, r27	; 0x03
     8b0:	0a c0       	rjmp	.+20     	; 0x8c6 <mpu6050_calibrate_gyro+0x15c>
     8b2:	24 e1       	ldi	r18, 0x14	; 20
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	40 e0       	ldi	r20, 0x00	; 0
     8b8:	50 e0       	ldi	r21, 0x00	; 0
     8ba:	41 d4       	rcall	.+2178   	; 0x113e <__divmodsi4>
     8bc:	f8 01       	movw	r30, r16
     8be:	20 83       	st	Z, r18
     8c0:	31 83       	std	Z+1, r19	; 0x01
     8c2:	42 83       	std	Z+2, r20	; 0x02
     8c4:	53 83       	std	Z+3, r21	; 0x03
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	1f 91       	pop	r17
     8cc:	0f 91       	pop	r16
     8ce:	ff 90       	pop	r15
     8d0:	ef 90       	pop	r14
     8d2:	df 90       	pop	r13
     8d4:	cf 90       	pop	r12
     8d6:	08 95       	ret

000008d8 <mpu6050_writeByte>:
	uint8_t byteToReturn=i2c_readNak();
	i2c_stop();
	return byteToReturn;
}
void mpu6050_writeByte(uint8_t wereToWrite,uint8_t byteToWrite)//writebyte
{
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	d8 2f       	mov	r29, r24
     8de:	c6 2f       	mov	r28, r22
	i2c_start(MPU6050_WRITE);
     8e0:	80 ed       	ldi	r24, 0xD0	; 208
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	f6 d0       	rcall	.+492    	; 0xad2 <i2c_start>
	i2c_write(wereToWrite);
     8e6:	8d 2f       	mov	r24, r29
     8e8:	90 e0       	ldi	r25, 0x00	; 0
	i2c_write(byteToWrite);
     8ea:	49 d1       	rcall	.+658    	; 0xb7e <i2c_write>
     8ec:	8c 2f       	mov	r24, r28
	i2c_stop();
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	46 d1       	rcall	.+652    	; 0xb7e <i2c_write>
}
     8f2:	35 d1       	rcall	.+618    	; 0xb5e <i2c_stop>
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	08 95       	ret

000008fa <mpu6050_readBytes>:
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
     8fa:	af 92       	push	r10
     8fc:	bf 92       	push	r11
     8fe:	cf 92       	push	r12
     900:	df 92       	push	r13
     902:	ff 92       	push	r15
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
     90c:	66 23       	and	r22, r22
     90e:	a1 f1       	breq	.+104    	; 0x978 <mpu6050_readBytes+0x7e>
     910:	c5 2f       	mov	r28, r21
     912:	d4 2f       	mov	r29, r20
     914:	f6 2e       	mov	r15, r22
     916:	18 2f       	mov	r17, r24
		//request register
		i2c_start(MPU6050_WRITE);
     918:	80 ed       	ldi	r24, 0xD0	; 208
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	da d0       	rcall	.+436    	; 0xad2 <i2c_start>
		i2c_write(regAddr);
     91e:	81 2f       	mov	r24, r17
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	2d d1       	rcall	.+602    	; 0xb7e <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     924:	85 e3       	ldi	r24, 0x35	; 53
     926:	8a 95       	dec	r24
     928:	f1 f7       	brne	.-4      	; 0x926 <mpu6050_readBytes+0x2c>
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
     92a:	00 00       	nop
     92c:	81 ed       	ldi	r24, 0xD1	; 209
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	d0 d0       	rcall	.+416    	; 0xad2 <i2c_start>
     932:	0d 2f       	mov	r16, r29
     934:	1c 2f       	mov	r17, r28
     936:	cc 24       	eor	r12, r12
     938:	ca 94       	dec	r12
     93a:	cf 0c       	add	r12, r15
     93c:	d1 2c       	mov	r13, r1
     93e:	ef ef       	ldi	r30, 0xFF	; 255
     940:	ce 1a       	sub	r12, r30
     942:	de 0a       	sbc	r13, r30
     944:	c0 e0       	ldi	r28, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
     946:	d0 e0       	ldi	r29, 0x00	; 0
     948:	af 2c       	mov	r10, r15
     94a:	b1 2c       	mov	r11, r1
     94c:	f1 e0       	ldi	r31, 0x01	; 1
     94e:	af 1a       	sub	r10, r31
     950:	b1 08       	sbc	r11, r1
     952:	ac 16       	cp	r10, r28
			data[i] = i2c_readNak();
     954:	bd 06       	cpc	r11, r29
     956:	21 f4       	brne	.+8      	; 0x960 <mpu6050_readBytes+0x66>
     958:	4d d1       	rcall	.+666    	; 0xbf4 <i2c_readNak>
     95a:	f8 01       	movw	r30, r16
			else
			data[i] = i2c_readAck();
     95c:	80 83       	st	Z, r24
     95e:	03 c0       	rjmp	.+6      	; 0x966 <mpu6050_readBytes+0x6c>
     960:	2f d1       	rcall	.+606    	; 0xbc0 <i2c_readAck>
     962:	f8 01       	movw	r30, r16
     964:	80 83       	st	Z, r24
     966:	21 96       	adiw	r28, 0x01	; 1
		i2c_start(MPU6050_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
		for(i=0; i<length; i++) {
     968:	0f 5f       	subi	r16, 0xFF	; 255
     96a:	1f 4f       	sbci	r17, 0xFF	; 255
     96c:	cc 15       	cp	r28, r12
     96e:	dd 05       	cpc	r29, r13
			if(i==length-1)
			data[i] = i2c_readNak();
			else
			data[i] = i2c_readAck();
		}
		i2c_stop();
     970:	81 f7       	brne	.-32     	; 0x952 <mpu6050_readBytes+0x58>
     972:	cf 2d       	mov	r28, r15
     974:	f4 d0       	rcall	.+488    	; 0xb5e <i2c_stop>
	i2c_write(byteToWrite);
	i2c_stop();
}
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
	uint8_t i = 0;
	int8_t count = 0;
     976:	01 c0       	rjmp	.+2      	; 0x97a <mpu6050_readBytes+0x80>
			data[i] = i2c_readAck();
		}
		i2c_stop();
	}
	return count;
}
     978:	c0 e0       	ldi	r28, 0x00	; 0
     97a:	8c 2f       	mov	r24, r28
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	df 90       	pop	r13
     988:	cf 90       	pop	r12
     98a:	bf 90       	pop	r11
     98c:	af 90       	pop	r10
     98e:	08 95       	ret

00000990 <mpu6050_getRawData>:
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     990:	6f 92       	push	r6
     992:	7f 92       	push	r7
     994:	8f 92       	push	r8
     996:	9f 92       	push	r9
     998:	af 92       	push	r10
     99a:	bf 92       	push	r11
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	2e 97       	sbiw	r28, 0x0e	; 14
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	4c 01       	movw	r8, r24
     9be:	5b 01       	movw	r10, r22
     9c0:	6a 01       	movw	r12, r20
     9c2:	39 01       	movw	r6, r18
	uint8_t buffer[14];
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14,  buffer);
     9c4:	ae 01       	movw	r20, r28
     9c6:	4f 5f       	subi	r20, 0xFF	; 255
     9c8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ca:	6e e0       	ldi	r22, 0x0E	; 14
     9cc:	8b e3       	ldi	r24, 0x3B	; 59
     9ce:	95 df       	rcall	.-214    	; 0x8fa <mpu6050_readBytes>
	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	98 2f       	mov	r25, r24
     9d6:	88 27       	eor	r24, r24
     9d8:	2a 81       	ldd	r18, Y+2	; 0x02
     9da:	82 2b       	or	r24, r18
     9dc:	f4 01       	movw	r30, r8
     9de:	91 83       	std	Z+1, r25	; 0x01
     9e0:	80 83       	st	Z, r24
	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     9e2:	8b 81       	ldd	r24, Y+3	; 0x03
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	98 2f       	mov	r25, r24
     9e8:	88 27       	eor	r24, r24
     9ea:	2c 81       	ldd	r18, Y+4	; 0x04
     9ec:	82 2b       	or	r24, r18
     9ee:	f5 01       	movw	r30, r10
     9f0:	91 83       	std	Z+1, r25	; 0x01
     9f2:	80 83       	st	Z, r24
	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
     9f4:	8d 81       	ldd	r24, Y+5	; 0x05
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	98 2f       	mov	r25, r24
     9fa:	88 27       	eor	r24, r24
     9fc:	2e 81       	ldd	r18, Y+6	; 0x06
     9fe:	82 2b       	or	r24, r18
     a00:	f6 01       	movw	r30, r12
     a02:	91 83       	std	Z+1, r25	; 0x01
     a04:	80 83       	st	Z, r24
	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     a06:	89 85       	ldd	r24, Y+9	; 0x09
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	98 2f       	mov	r25, r24
     a0c:	88 27       	eor	r24, r24
     a0e:	2a 85       	ldd	r18, Y+10	; 0x0a
     a10:	82 2b       	or	r24, r18
     a12:	f3 01       	movw	r30, r6
     a14:	91 83       	std	Z+1, r25	; 0x01
     a16:	80 83       	st	Z, r24
	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     a18:	8b 85       	ldd	r24, Y+11	; 0x0b
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	98 2f       	mov	r25, r24
     a1e:	88 27       	eor	r24, r24
     a20:	2c 85       	ldd	r18, Y+12	; 0x0c
     a22:	82 2b       	or	r24, r18
     a24:	f8 01       	movw	r30, r16
     a26:	91 83       	std	Z+1, r25	; 0x01
     a28:	80 83       	st	Z, r24
	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	98 2f       	mov	r25, r24
     a30:	88 27       	eor	r24, r24
     a32:	2e 85       	ldd	r18, Y+14	; 0x0e
     a34:	82 2b       	or	r24, r18
     a36:	f7 01       	movw	r30, r14
     a38:	91 83       	std	Z+1, r25	; 0x01
     a3a:	80 83       	st	Z, r24
     a3c:	2e 96       	adiw	r28, 0x0e	; 14
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	f8 94       	cli
     a42:	de bf       	out	0x3e, r29	; 62
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	cd bf       	out	0x3d, r28	; 61
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	ff 90       	pop	r15
     a52:	ef 90       	pop	r14
     a54:	df 90       	pop	r13
     a56:	cf 90       	pop	r12
     a58:	bf 90       	pop	r11
     a5a:	af 90       	pop	r10
     a5c:	9f 90       	pop	r9
     a5e:	8f 90       	pop	r8
     a60:	7f 90       	pop	r7
     a62:	6f 90       	pop	r6
     a64:	08 95       	ret

00000a66 <setup_timer4>:

#define clockCyclesPerMicrosecond () ( F_CPU / 1000000L )

/*-----------Timter 1-----------*/
void setup_timer4(void){
    sbi (TCCR4B, CS40);//prescakaer 256
     a66:	e1 ea       	ldi	r30, 0xA1	; 161
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	80 81       	ld	r24, Z
     a6c:	81 60       	ori	r24, 0x01	; 1
     a6e:	80 83       	st	Z, r24
    sbi (TCCR4A, WGM40);//8 bit phase correct PWM
     a70:	e0 ea       	ldi	r30, 0xA0	; 160
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	80 81       	ld	r24, Z
     a76:	81 60       	ori	r24, 0x01	; 1
     a78:	80 83       	st	Z, r24
	
	//sbi (TCCR4A,COM4A0);
	sbi (TCCR4A,COM4A1);
     a7a:	80 81       	ld	r24, Z
     a7c:	80 68       	ori	r24, 0x80	; 128
     a7e:	80 83       	st	Z, r24
	//sbi (TCCR4A,COM4B0);
	sbi (TCCR4A,COM4B1);
     a80:	80 81       	ld	r24, Z
     a82:	80 62       	ori	r24, 0x20	; 32
     a84:	80 83       	st	Z, r24
	//sbi (TCCR4A,COM4C0);
	sbi (TCCR4A,COM4C1);
     a86:	80 81       	ld	r24, Z
     a88:	88 60       	ori	r24, 0x08	; 8
     a8a:	80 83       	st	Z, r24
     a8c:	08 95       	ret

00000a8e <setup_timer5>:
}


/*-----------Timter 5-----------*/
void setup_timer5(void){
	sbi (TCCR5B, CS50);//only this 8
     a8e:	e1 e2       	ldi	r30, 0x21	; 33
     a90:	f1 e0       	ldi	r31, 0x01	; 1
     a92:	80 81       	ld	r24, Z
     a94:	81 60       	ori	r24, 0x01	; 1
     a96:	80 83       	st	Z, r24
	//sbi (TCCR5B, CS52);//only this 256
	sbi (TCCR5B, WGM52);//OCR4A compare interrupt
     a98:	80 81       	ld	r24, Z
     a9a:	88 60       	ori	r24, 0x08	; 8
     a9c:	80 83       	st	Z, r24
     a9e:	08 95       	ret

00000aa0 <Enable_timer5_compare_interrupt>:
	
}
void Enable_timer5_compare_interrupt(){
	sbi (TIMSK5, OCIE5A);
     aa0:	e3 e7       	ldi	r30, 0x73	; 115
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	80 81       	ld	r24, Z
     aa6:	82 60       	ori	r24, 0x02	; 2
     aa8:	80 83       	st	Z, r24
     aaa:	08 95       	ret

00000aac <setup_timer0>:
}
/*-----------Timter 2-----------*/
void setup_timer0(void){
	sbi(TCCR0B,CS00);
     aac:	85 b5       	in	r24, 0x25	; 37
     aae:	81 60       	ori	r24, 0x01	; 1
     ab0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B,CS01);;//prescaler 64 , 250khz timer
     ab2:	85 b5       	in	r24, 0x25	; 37
     ab4:	82 60       	ori	r24, 0x02	; 2
     ab6:	85 bd       	out	0x25, r24	; 37
     ab8:	08 95       	ret

00000aba <Enable_timer0_overflow_interrupt>:
}
void Enable_timer0_overflow_interrupt(){
	sbi(TIMSK0,TOIE0);
     aba:	ee e6       	ldi	r30, 0x6E	; 110
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	80 81       	ld	r24, Z
     ac0:	81 60       	ori	r24, 0x01	; 1
     ac2:	80 83       	st	Z, r24
     ac4:	08 95       	ret

00000ac6 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     ac6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     aca:	8c e0       	ldi	r24, 0x0C	; 12
     acc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     ad0:	08 95       	ret

00000ad2 <i2c_start>:
     ad2:	94 ea       	ldi	r25, 0xA4	; 164
     ad4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     ad8:	4f ef       	ldi	r20, 0xFF	; 255
     ada:	50 e0       	ldi	r21, 0x00	; 0
     adc:	60 e0       	ldi	r22, 0x00	; 0
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	ec eb       	ldi	r30, 0xBC	; 188
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	90 81       	ld	r25, Z
     ae6:	99 23       	and	r25, r25
     ae8:	34 f0       	brlt	.+12     	; 0xaf6 <i2c_start+0x24>
     aea:	41 50       	subi	r20, 0x01	; 1
     aec:	51 09       	sbc	r21, r1
     aee:	61 09       	sbc	r22, r1
     af0:	71 09       	sbc	r23, r1
     af2:	c0 f7       	brcc	.-16     	; 0xae4 <i2c_start+0x12>
     af4:	04 c0       	rjmp	.+8      	; 0xafe <i2c_start+0x2c>
     af6:	45 2b       	or	r20, r21
     af8:	46 2b       	or	r20, r22
     afa:	47 2b       	or	r20, r23
     afc:	41 f1       	breq	.+80     	; 0xb4e <i2c_start+0x7c>
     afe:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     b02:	98 7f       	andi	r25, 0xF8	; 248
     b04:	98 30       	cpi	r25, 0x08	; 8
     b06:	11 f0       	breq	.+4      	; 0xb0c <i2c_start+0x3a>
     b08:	90 31       	cpi	r25, 0x10	; 16
     b0a:	19 f5       	brne	.+70     	; 0xb52 <i2c_start+0x80>
     b0c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     b10:	84 e8       	ldi	r24, 0x84	; 132
     b12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     b16:	8f ef       	ldi	r24, 0xFF	; 255
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	a0 e0       	ldi	r26, 0x00	; 0
     b1c:	b0 e0       	ldi	r27, 0x00	; 0
     b1e:	ec eb       	ldi	r30, 0xBC	; 188
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	20 81       	ld	r18, Z
     b24:	22 23       	and	r18, r18
     b26:	2c f0       	brlt	.+10     	; 0xb32 <i2c_start+0x60>
     b28:	01 97       	sbiw	r24, 0x01	; 1
     b2a:	a1 09       	sbc	r26, r1
     b2c:	b1 09       	sbc	r27, r1
     b2e:	c8 f7       	brcc	.-14     	; 0xb22 <i2c_start+0x50>
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <i2c_start+0x68>
     b32:	89 2b       	or	r24, r25
     b34:	8a 2b       	or	r24, r26
     b36:	8b 2b       	or	r24, r27
     b38:	71 f0       	breq	.+28     	; 0xb56 <i2c_start+0x84>
     b3a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     b3e:	98 7f       	andi	r25, 0xF8	; 248
     b40:	98 31       	cpi	r25, 0x18	; 24
     b42:	59 f0       	breq	.+22     	; 0xb5a <i2c_start+0x88>
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	90 34       	cpi	r25, 0x40	; 64
     b48:	49 f4       	brne	.+18     	; 0xb5c <i2c_start+0x8a>
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	08 95       	ret
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	08 95       	ret
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	08 95       	ret
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	08 95       	ret
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	08 95       	ret

00000b5e <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     b5e:	84 e9       	ldi	r24, 0x94	; 148
     b60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	ec eb       	ldi	r30, 0xBC	; 188
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	20 81       	ld	r18, Z
     b6e:	24 ff       	sbrs	r18, 4
     b70:	05 c0       	rjmp	.+10     	; 0xb7c <i2c_stop+0x1e>
     b72:	01 96       	adiw	r24, 0x01	; 1
     b74:	81 15       	cp	r24, r1
     b76:	21 e0       	ldi	r18, 0x01	; 1
     b78:	92 07       	cpc	r25, r18
     b7a:	c1 f7       	brne	.-16     	; 0xb6c <i2c_stop+0xe>
     b7c:	08 95       	ret

00000b7e <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     b7e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     b82:	84 e8       	ldi	r24, 0x84	; 132
     b84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     b88:	8f ef       	ldi	r24, 0xFF	; 255
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     b90:	ec eb       	ldi	r30, 0xBC	; 188
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	20 81       	ld	r18, Z
     b96:	22 23       	and	r18, r18
     b98:	2c f0       	brlt	.+10     	; 0xba4 <i2c_write+0x26>
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	a1 09       	sbc	r26, r1
     b9e:	b1 09       	sbc	r27, r1
     ba0:	c8 f7       	brcc	.-14     	; 0xb94 <i2c_write+0x16>
     ba2:	04 c0       	rjmp	.+8      	; 0xbac <i2c_write+0x2e>
	if(i2c_timer == 0)
     ba4:	89 2b       	or	r24, r25
     ba6:	8a 2b       	or	r24, r26
     ba8:	8b 2b       	or	r24, r27
     baa:	41 f0       	breq	.+16     	; 0xbbc <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     bac:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     bb0:	98 7f       	andi	r25, 0xF8	; 248
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	98 32       	cpi	r25, 0x28	; 40
     bb6:	19 f4       	brne	.+6      	; 0xbbe <i2c_write+0x40>
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	08 95       	ret
     bbc:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     bbe:	08 95       	ret

00000bc0 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     bc0:	84 ec       	ldi	r24, 0xC4	; 196
     bc2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
     bc6:	8f ef       	ldi	r24, 0xFF	; 255
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	a0 e0       	ldi	r26, 0x00	; 0
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     bce:	ec eb       	ldi	r30, 0xBC	; 188
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	20 81       	ld	r18, Z
     bd4:	22 23       	and	r18, r18
     bd6:	2c f0       	brlt	.+10     	; 0xbe2 <i2c_readAck+0x22>
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	a1 09       	sbc	r26, r1
     bdc:	b1 09       	sbc	r27, r1
     bde:	c8 f7       	brcc	.-14     	; 0xbd2 <i2c_readAck+0x12>
     be0:	04 c0       	rjmp	.+8      	; 0xbea <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     be2:	89 2b       	or	r24, r25
     be4:	8a 2b       	or	r24, r26
     be6:	8b 2b       	or	r24, r27
     be8:	19 f0       	breq	.+6      	; 0xbf0 <i2c_readAck+0x30>
		return 0;

    return TWDR;
     bea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     bee:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     bf0:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     bf2:	08 95       	ret

00000bf4 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     bf4:	84 e8       	ldi	r24, 0x84	; 132
     bf6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
     bfa:	8f ef       	ldi	r24, 0xFF	; 255
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	a0 e0       	ldi	r26, 0x00	; 0
     c00:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     c02:	ec eb       	ldi	r30, 0xBC	; 188
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	20 81       	ld	r18, Z
     c08:	22 23       	and	r18, r18
     c0a:	2c f0       	brlt	.+10     	; 0xc16 <i2c_readNak+0x22>
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	a1 09       	sbc	r26, r1
     c10:	b1 09       	sbc	r27, r1
     c12:	c8 f7       	brcc	.-14     	; 0xc06 <i2c_readNak+0x12>
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     c16:	89 2b       	or	r24, r25
     c18:	8a 2b       	or	r24, r26
     c1a:	8b 2b       	or	r24, r27
     c1c:	19 f0       	breq	.+6      	; 0xc24 <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     c1e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     c22:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     c24:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     c26:	08 95       	ret

00000c28 <USART_Init>:
#include <avr/io.h>
#include <stdio.h>
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     c28:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;
     c2c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	UCSR0B = (1<<TXEN0);// | (1<<TXCIE0);
     c30:	88 e0       	ldi	r24, 0x08	; 8
     c32:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);//2 stop bit 8 bit
     c36:	8e e0       	ldi	r24, 0x0E	; 14
     c38:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     c3c:	08 95       	ret

00000c3e <__subsf3>:
     c3e:	50 58       	subi	r21, 0x80	; 128

00000c40 <__addsf3>:
     c40:	bb 27       	eor	r27, r27
     c42:	aa 27       	eor	r26, r26
     c44:	0e d0       	rcall	.+28     	; 0xc62 <__addsf3x>
     c46:	48 c1       	rjmp	.+656    	; 0xed8 <__fp_round>
     c48:	39 d1       	rcall	.+626    	; 0xebc <__fp_pscA>
     c4a:	30 f0       	brcs	.+12     	; 0xc58 <__addsf3+0x18>
     c4c:	3e d1       	rcall	.+636    	; 0xeca <__fp_pscB>
     c4e:	20 f0       	brcs	.+8      	; 0xc58 <__addsf3+0x18>
     c50:	31 f4       	brne	.+12     	; 0xc5e <__addsf3+0x1e>
     c52:	9f 3f       	cpi	r25, 0xFF	; 255
     c54:	11 f4       	brne	.+4      	; 0xc5a <__addsf3+0x1a>
     c56:	1e f4       	brtc	.+6      	; 0xc5e <__addsf3+0x1e>
     c58:	2e c1       	rjmp	.+604    	; 0xeb6 <__fp_nan>
     c5a:	0e f4       	brtc	.+2      	; 0xc5e <__addsf3+0x1e>
     c5c:	e0 95       	com	r30
     c5e:	e7 fb       	bst	r30, 7
     c60:	24 c1       	rjmp	.+584    	; 0xeaa <__fp_inf>

00000c62 <__addsf3x>:
     c62:	e9 2f       	mov	r30, r25
     c64:	4a d1       	rcall	.+660    	; 0xefa <__fp_split3>
     c66:	80 f3       	brcs	.-32     	; 0xc48 <__addsf3+0x8>
     c68:	ba 17       	cp	r27, r26
     c6a:	62 07       	cpc	r22, r18
     c6c:	73 07       	cpc	r23, r19
     c6e:	84 07       	cpc	r24, r20
     c70:	95 07       	cpc	r25, r21
     c72:	18 f0       	brcs	.+6      	; 0xc7a <__addsf3x+0x18>
     c74:	71 f4       	brne	.+28     	; 0xc92 <__addsf3x+0x30>
     c76:	9e f5       	brtc	.+102    	; 0xcde <__addsf3x+0x7c>
     c78:	62 c1       	rjmp	.+708    	; 0xf3e <__fp_zero>
     c7a:	0e f4       	brtc	.+2      	; 0xc7e <__addsf3x+0x1c>
     c7c:	e0 95       	com	r30
     c7e:	0b 2e       	mov	r0, r27
     c80:	ba 2f       	mov	r27, r26
     c82:	a0 2d       	mov	r26, r0
     c84:	0b 01       	movw	r0, r22
     c86:	b9 01       	movw	r22, r18
     c88:	90 01       	movw	r18, r0
     c8a:	0c 01       	movw	r0, r24
     c8c:	ca 01       	movw	r24, r20
     c8e:	a0 01       	movw	r20, r0
     c90:	11 24       	eor	r1, r1
     c92:	ff 27       	eor	r31, r31
     c94:	59 1b       	sub	r21, r25
     c96:	99 f0       	breq	.+38     	; 0xcbe <__addsf3x+0x5c>
     c98:	59 3f       	cpi	r21, 0xF9	; 249
     c9a:	50 f4       	brcc	.+20     	; 0xcb0 <__addsf3x+0x4e>
     c9c:	50 3e       	cpi	r21, 0xE0	; 224
     c9e:	68 f1       	brcs	.+90     	; 0xcfa <__addsf3x+0x98>
     ca0:	1a 16       	cp	r1, r26
     ca2:	f0 40       	sbci	r31, 0x00	; 0
     ca4:	a2 2f       	mov	r26, r18
     ca6:	23 2f       	mov	r18, r19
     ca8:	34 2f       	mov	r19, r20
     caa:	44 27       	eor	r20, r20
     cac:	58 5f       	subi	r21, 0xF8	; 248
     cae:	f3 cf       	rjmp	.-26     	; 0xc96 <__addsf3x+0x34>
     cb0:	46 95       	lsr	r20
     cb2:	37 95       	ror	r19
     cb4:	27 95       	ror	r18
     cb6:	a7 95       	ror	r26
     cb8:	f0 40       	sbci	r31, 0x00	; 0
     cba:	53 95       	inc	r21
     cbc:	c9 f7       	brne	.-14     	; 0xcb0 <__addsf3x+0x4e>
     cbe:	7e f4       	brtc	.+30     	; 0xcde <__addsf3x+0x7c>
     cc0:	1f 16       	cp	r1, r31
     cc2:	ba 0b       	sbc	r27, r26
     cc4:	62 0b       	sbc	r22, r18
     cc6:	73 0b       	sbc	r23, r19
     cc8:	84 0b       	sbc	r24, r20
     cca:	ba f0       	brmi	.+46     	; 0xcfa <__addsf3x+0x98>
     ccc:	91 50       	subi	r25, 0x01	; 1
     cce:	a1 f0       	breq	.+40     	; 0xcf8 <__addsf3x+0x96>
     cd0:	ff 0f       	add	r31, r31
     cd2:	bb 1f       	adc	r27, r27
     cd4:	66 1f       	adc	r22, r22
     cd6:	77 1f       	adc	r23, r23
     cd8:	88 1f       	adc	r24, r24
     cda:	c2 f7       	brpl	.-16     	; 0xccc <__addsf3x+0x6a>
     cdc:	0e c0       	rjmp	.+28     	; 0xcfa <__addsf3x+0x98>
     cde:	ba 0f       	add	r27, r26
     ce0:	62 1f       	adc	r22, r18
     ce2:	73 1f       	adc	r23, r19
     ce4:	84 1f       	adc	r24, r20
     ce6:	48 f4       	brcc	.+18     	; 0xcfa <__addsf3x+0x98>
     ce8:	87 95       	ror	r24
     cea:	77 95       	ror	r23
     cec:	67 95       	ror	r22
     cee:	b7 95       	ror	r27
     cf0:	f7 95       	ror	r31
     cf2:	9e 3f       	cpi	r25, 0xFE	; 254
     cf4:	08 f0       	brcs	.+2      	; 0xcf8 <__addsf3x+0x96>
     cf6:	b3 cf       	rjmp	.-154    	; 0xc5e <__addsf3+0x1e>
     cf8:	93 95       	inc	r25
     cfa:	88 0f       	add	r24, r24
     cfc:	08 f0       	brcs	.+2      	; 0xd00 <__addsf3x+0x9e>
     cfe:	99 27       	eor	r25, r25
     d00:	ee 0f       	add	r30, r30
     d02:	97 95       	ror	r25
     d04:	87 95       	ror	r24
     d06:	08 95       	ret

00000d08 <__divsf3>:
     d08:	0c d0       	rcall	.+24     	; 0xd22 <__divsf3x>
     d0a:	e6 c0       	rjmp	.+460    	; 0xed8 <__fp_round>
     d0c:	de d0       	rcall	.+444    	; 0xeca <__fp_pscB>
     d0e:	40 f0       	brcs	.+16     	; 0xd20 <__divsf3+0x18>
     d10:	d5 d0       	rcall	.+426    	; 0xebc <__fp_pscA>
     d12:	30 f0       	brcs	.+12     	; 0xd20 <__divsf3+0x18>
     d14:	21 f4       	brne	.+8      	; 0xd1e <__divsf3+0x16>
     d16:	5f 3f       	cpi	r21, 0xFF	; 255
     d18:	19 f0       	breq	.+6      	; 0xd20 <__divsf3+0x18>
     d1a:	c7 c0       	rjmp	.+398    	; 0xeaa <__fp_inf>
     d1c:	51 11       	cpse	r21, r1
     d1e:	10 c1       	rjmp	.+544    	; 0xf40 <__fp_szero>
     d20:	ca c0       	rjmp	.+404    	; 0xeb6 <__fp_nan>

00000d22 <__divsf3x>:
     d22:	eb d0       	rcall	.+470    	; 0xefa <__fp_split3>
     d24:	98 f3       	brcs	.-26     	; 0xd0c <__divsf3+0x4>

00000d26 <__divsf3_pse>:
     d26:	99 23       	and	r25, r25
     d28:	c9 f3       	breq	.-14     	; 0xd1c <__divsf3+0x14>
     d2a:	55 23       	and	r21, r21
     d2c:	b1 f3       	breq	.-20     	; 0xd1a <__divsf3+0x12>
     d2e:	95 1b       	sub	r25, r21
     d30:	55 0b       	sbc	r21, r21
     d32:	bb 27       	eor	r27, r27
     d34:	aa 27       	eor	r26, r26
     d36:	62 17       	cp	r22, r18
     d38:	73 07       	cpc	r23, r19
     d3a:	84 07       	cpc	r24, r20
     d3c:	38 f0       	brcs	.+14     	; 0xd4c <__divsf3_pse+0x26>
     d3e:	9f 5f       	subi	r25, 0xFF	; 255
     d40:	5f 4f       	sbci	r21, 0xFF	; 255
     d42:	22 0f       	add	r18, r18
     d44:	33 1f       	adc	r19, r19
     d46:	44 1f       	adc	r20, r20
     d48:	aa 1f       	adc	r26, r26
     d4a:	a9 f3       	breq	.-22     	; 0xd36 <__divsf3_pse+0x10>
     d4c:	33 d0       	rcall	.+102    	; 0xdb4 <__divsf3_pse+0x8e>
     d4e:	0e 2e       	mov	r0, r30
     d50:	3a f0       	brmi	.+14     	; 0xd60 <__divsf3_pse+0x3a>
     d52:	e0 e8       	ldi	r30, 0x80	; 128
     d54:	30 d0       	rcall	.+96     	; 0xdb6 <__divsf3_pse+0x90>
     d56:	91 50       	subi	r25, 0x01	; 1
     d58:	50 40       	sbci	r21, 0x00	; 0
     d5a:	e6 95       	lsr	r30
     d5c:	00 1c       	adc	r0, r0
     d5e:	ca f7       	brpl	.-14     	; 0xd52 <__divsf3_pse+0x2c>
     d60:	29 d0       	rcall	.+82     	; 0xdb4 <__divsf3_pse+0x8e>
     d62:	fe 2f       	mov	r31, r30
     d64:	27 d0       	rcall	.+78     	; 0xdb4 <__divsf3_pse+0x8e>
     d66:	66 0f       	add	r22, r22
     d68:	77 1f       	adc	r23, r23
     d6a:	88 1f       	adc	r24, r24
     d6c:	bb 1f       	adc	r27, r27
     d6e:	26 17       	cp	r18, r22
     d70:	37 07       	cpc	r19, r23
     d72:	48 07       	cpc	r20, r24
     d74:	ab 07       	cpc	r26, r27
     d76:	b0 e8       	ldi	r27, 0x80	; 128
     d78:	09 f0       	breq	.+2      	; 0xd7c <__divsf3_pse+0x56>
     d7a:	bb 0b       	sbc	r27, r27
     d7c:	80 2d       	mov	r24, r0
     d7e:	bf 01       	movw	r22, r30
     d80:	ff 27       	eor	r31, r31
     d82:	93 58       	subi	r25, 0x83	; 131
     d84:	5f 4f       	sbci	r21, 0xFF	; 255
     d86:	2a f0       	brmi	.+10     	; 0xd92 <__divsf3_pse+0x6c>
     d88:	9e 3f       	cpi	r25, 0xFE	; 254
     d8a:	51 05       	cpc	r21, r1
     d8c:	68 f0       	brcs	.+26     	; 0xda8 <__divsf3_pse+0x82>
     d8e:	8d c0       	rjmp	.+282    	; 0xeaa <__fp_inf>
     d90:	d7 c0       	rjmp	.+430    	; 0xf40 <__fp_szero>
     d92:	5f 3f       	cpi	r21, 0xFF	; 255
     d94:	ec f3       	brlt	.-6      	; 0xd90 <__divsf3_pse+0x6a>
     d96:	98 3e       	cpi	r25, 0xE8	; 232
     d98:	dc f3       	brlt	.-10     	; 0xd90 <__divsf3_pse+0x6a>
     d9a:	86 95       	lsr	r24
     d9c:	77 95       	ror	r23
     d9e:	67 95       	ror	r22
     da0:	b7 95       	ror	r27
     da2:	f7 95       	ror	r31
     da4:	9f 5f       	subi	r25, 0xFF	; 255
     da6:	c9 f7       	brne	.-14     	; 0xd9a <__divsf3_pse+0x74>
     da8:	88 0f       	add	r24, r24
     daa:	91 1d       	adc	r25, r1
     dac:	96 95       	lsr	r25
     dae:	87 95       	ror	r24
     db0:	97 f9       	bld	r25, 7
     db2:	08 95       	ret
     db4:	e1 e0       	ldi	r30, 0x01	; 1
     db6:	66 0f       	add	r22, r22
     db8:	77 1f       	adc	r23, r23
     dba:	88 1f       	adc	r24, r24
     dbc:	bb 1f       	adc	r27, r27
     dbe:	62 17       	cp	r22, r18
     dc0:	73 07       	cpc	r23, r19
     dc2:	84 07       	cpc	r24, r20
     dc4:	ba 07       	cpc	r27, r26
     dc6:	20 f0       	brcs	.+8      	; 0xdd0 <__divsf3_pse+0xaa>
     dc8:	62 1b       	sub	r22, r18
     dca:	73 0b       	sbc	r23, r19
     dcc:	84 0b       	sbc	r24, r20
     dce:	ba 0b       	sbc	r27, r26
     dd0:	ee 1f       	adc	r30, r30
     dd2:	88 f7       	brcc	.-30     	; 0xdb6 <__divsf3_pse+0x90>
     dd4:	e0 95       	com	r30
     dd6:	08 95       	ret

00000dd8 <__fixunssfsi>:
     dd8:	98 d0       	rcall	.+304    	; 0xf0a <__fp_splitA>
     dda:	88 f0       	brcs	.+34     	; 0xdfe <__fixunssfsi+0x26>
     ddc:	9f 57       	subi	r25, 0x7F	; 127
     dde:	90 f0       	brcs	.+36     	; 0xe04 <__fixunssfsi+0x2c>
     de0:	b9 2f       	mov	r27, r25
     de2:	99 27       	eor	r25, r25
     de4:	b7 51       	subi	r27, 0x17	; 23
     de6:	a0 f0       	brcs	.+40     	; 0xe10 <__fixunssfsi+0x38>
     de8:	d1 f0       	breq	.+52     	; 0xe1e <__fixunssfsi+0x46>
     dea:	66 0f       	add	r22, r22
     dec:	77 1f       	adc	r23, r23
     dee:	88 1f       	adc	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	1a f0       	brmi	.+6      	; 0xdfa <__fixunssfsi+0x22>
     df4:	ba 95       	dec	r27
     df6:	c9 f7       	brne	.-14     	; 0xdea <__fixunssfsi+0x12>
     df8:	12 c0       	rjmp	.+36     	; 0xe1e <__fixunssfsi+0x46>
     dfa:	b1 30       	cpi	r27, 0x01	; 1
     dfc:	81 f0       	breq	.+32     	; 0xe1e <__fixunssfsi+0x46>
     dfe:	9f d0       	rcall	.+318    	; 0xf3e <__fp_zero>
     e00:	b1 e0       	ldi	r27, 0x01	; 1
     e02:	08 95       	ret
     e04:	9c c0       	rjmp	.+312    	; 0xf3e <__fp_zero>
     e06:	67 2f       	mov	r22, r23
     e08:	78 2f       	mov	r23, r24
     e0a:	88 27       	eor	r24, r24
     e0c:	b8 5f       	subi	r27, 0xF8	; 248
     e0e:	39 f0       	breq	.+14     	; 0xe1e <__fixunssfsi+0x46>
     e10:	b9 3f       	cpi	r27, 0xF9	; 249
     e12:	cc f3       	brlt	.-14     	; 0xe06 <__fixunssfsi+0x2e>
     e14:	86 95       	lsr	r24
     e16:	77 95       	ror	r23
     e18:	67 95       	ror	r22
     e1a:	b3 95       	inc	r27
     e1c:	d9 f7       	brne	.-10     	; 0xe14 <__fixunssfsi+0x3c>
     e1e:	3e f4       	brtc	.+14     	; 0xe2e <__fixunssfsi+0x56>
     e20:	90 95       	com	r25
     e22:	80 95       	com	r24
     e24:	70 95       	com	r23
     e26:	61 95       	neg	r22
     e28:	7f 4f       	sbci	r23, 0xFF	; 255
     e2a:	8f 4f       	sbci	r24, 0xFF	; 255
     e2c:	9f 4f       	sbci	r25, 0xFF	; 255
     e2e:	08 95       	ret

00000e30 <__floatunsisf>:
     e30:	e8 94       	clt
     e32:	09 c0       	rjmp	.+18     	; 0xe46 <__floatsisf+0x12>

00000e34 <__floatsisf>:
     e34:	97 fb       	bst	r25, 7
     e36:	3e f4       	brtc	.+14     	; 0xe46 <__floatsisf+0x12>
     e38:	90 95       	com	r25
     e3a:	80 95       	com	r24
     e3c:	70 95       	com	r23
     e3e:	61 95       	neg	r22
     e40:	7f 4f       	sbci	r23, 0xFF	; 255
     e42:	8f 4f       	sbci	r24, 0xFF	; 255
     e44:	9f 4f       	sbci	r25, 0xFF	; 255
     e46:	99 23       	and	r25, r25
     e48:	a9 f0       	breq	.+42     	; 0xe74 <__floatsisf+0x40>
     e4a:	f9 2f       	mov	r31, r25
     e4c:	96 e9       	ldi	r25, 0x96	; 150
     e4e:	bb 27       	eor	r27, r27
     e50:	93 95       	inc	r25
     e52:	f6 95       	lsr	r31
     e54:	87 95       	ror	r24
     e56:	77 95       	ror	r23
     e58:	67 95       	ror	r22
     e5a:	b7 95       	ror	r27
     e5c:	f1 11       	cpse	r31, r1
     e5e:	f8 cf       	rjmp	.-16     	; 0xe50 <__floatsisf+0x1c>
     e60:	fa f4       	brpl	.+62     	; 0xea0 <__floatsisf+0x6c>
     e62:	bb 0f       	add	r27, r27
     e64:	11 f4       	brne	.+4      	; 0xe6a <__floatsisf+0x36>
     e66:	60 ff       	sbrs	r22, 0
     e68:	1b c0       	rjmp	.+54     	; 0xea0 <__floatsisf+0x6c>
     e6a:	6f 5f       	subi	r22, 0xFF	; 255
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	8f 4f       	sbci	r24, 0xFF	; 255
     e70:	9f 4f       	sbci	r25, 0xFF	; 255
     e72:	16 c0       	rjmp	.+44     	; 0xea0 <__floatsisf+0x6c>
     e74:	88 23       	and	r24, r24
     e76:	11 f0       	breq	.+4      	; 0xe7c <__floatsisf+0x48>
     e78:	96 e9       	ldi	r25, 0x96	; 150
     e7a:	11 c0       	rjmp	.+34     	; 0xe9e <__floatsisf+0x6a>
     e7c:	77 23       	and	r23, r23
     e7e:	21 f0       	breq	.+8      	; 0xe88 <__floatsisf+0x54>
     e80:	9e e8       	ldi	r25, 0x8E	; 142
     e82:	87 2f       	mov	r24, r23
     e84:	76 2f       	mov	r23, r22
     e86:	05 c0       	rjmp	.+10     	; 0xe92 <__floatsisf+0x5e>
     e88:	66 23       	and	r22, r22
     e8a:	71 f0       	breq	.+28     	; 0xea8 <__floatsisf+0x74>
     e8c:	96 e8       	ldi	r25, 0x86	; 134
     e8e:	86 2f       	mov	r24, r22
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	2a f0       	brmi	.+10     	; 0xea0 <__floatsisf+0x6c>
     e96:	9a 95       	dec	r25
     e98:	66 0f       	add	r22, r22
     e9a:	77 1f       	adc	r23, r23
     e9c:	88 1f       	adc	r24, r24
     e9e:	da f7       	brpl	.-10     	; 0xe96 <__floatsisf+0x62>
     ea0:	88 0f       	add	r24, r24
     ea2:	96 95       	lsr	r25
     ea4:	87 95       	ror	r24
     ea6:	97 f9       	bld	r25, 7
     ea8:	08 95       	ret

00000eaa <__fp_inf>:
     eaa:	97 f9       	bld	r25, 7
     eac:	9f 67       	ori	r25, 0x7F	; 127
     eae:	80 e8       	ldi	r24, 0x80	; 128
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	08 95       	ret

00000eb6 <__fp_nan>:
     eb6:	9f ef       	ldi	r25, 0xFF	; 255
     eb8:	80 ec       	ldi	r24, 0xC0	; 192
     eba:	08 95       	ret

00000ebc <__fp_pscA>:
     ebc:	00 24       	eor	r0, r0
     ebe:	0a 94       	dec	r0
     ec0:	16 16       	cp	r1, r22
     ec2:	17 06       	cpc	r1, r23
     ec4:	18 06       	cpc	r1, r24
     ec6:	09 06       	cpc	r0, r25
     ec8:	08 95       	ret

00000eca <__fp_pscB>:
     eca:	00 24       	eor	r0, r0
     ecc:	0a 94       	dec	r0
     ece:	12 16       	cp	r1, r18
     ed0:	13 06       	cpc	r1, r19
     ed2:	14 06       	cpc	r1, r20
     ed4:	05 06       	cpc	r0, r21
     ed6:	08 95       	ret

00000ed8 <__fp_round>:
     ed8:	09 2e       	mov	r0, r25
     eda:	03 94       	inc	r0
     edc:	00 0c       	add	r0, r0
     ede:	11 f4       	brne	.+4      	; 0xee4 <__fp_round+0xc>
     ee0:	88 23       	and	r24, r24
     ee2:	52 f0       	brmi	.+20     	; 0xef8 <__fp_round+0x20>
     ee4:	bb 0f       	add	r27, r27
     ee6:	40 f4       	brcc	.+16     	; 0xef8 <__fp_round+0x20>
     ee8:	bf 2b       	or	r27, r31
     eea:	11 f4       	brne	.+4      	; 0xef0 <__fp_round+0x18>
     eec:	60 ff       	sbrs	r22, 0
     eee:	04 c0       	rjmp	.+8      	; 0xef8 <__fp_round+0x20>
     ef0:	6f 5f       	subi	r22, 0xFF	; 255
     ef2:	7f 4f       	sbci	r23, 0xFF	; 255
     ef4:	8f 4f       	sbci	r24, 0xFF	; 255
     ef6:	9f 4f       	sbci	r25, 0xFF	; 255
     ef8:	08 95       	ret

00000efa <__fp_split3>:
     efa:	57 fd       	sbrc	r21, 7
     efc:	90 58       	subi	r25, 0x80	; 128
     efe:	44 0f       	add	r20, r20
     f00:	55 1f       	adc	r21, r21
     f02:	59 f0       	breq	.+22     	; 0xf1a <__fp_splitA+0x10>
     f04:	5f 3f       	cpi	r21, 0xFF	; 255
     f06:	71 f0       	breq	.+28     	; 0xf24 <__fp_splitA+0x1a>
     f08:	47 95       	ror	r20

00000f0a <__fp_splitA>:
     f0a:	88 0f       	add	r24, r24
     f0c:	97 fb       	bst	r25, 7
     f0e:	99 1f       	adc	r25, r25
     f10:	61 f0       	breq	.+24     	; 0xf2a <__fp_splitA+0x20>
     f12:	9f 3f       	cpi	r25, 0xFF	; 255
     f14:	79 f0       	breq	.+30     	; 0xf34 <__fp_splitA+0x2a>
     f16:	87 95       	ror	r24
     f18:	08 95       	ret
     f1a:	12 16       	cp	r1, r18
     f1c:	13 06       	cpc	r1, r19
     f1e:	14 06       	cpc	r1, r20
     f20:	55 1f       	adc	r21, r21
     f22:	f2 cf       	rjmp	.-28     	; 0xf08 <__fp_split3+0xe>
     f24:	46 95       	lsr	r20
     f26:	f1 df       	rcall	.-30     	; 0xf0a <__fp_splitA>
     f28:	08 c0       	rjmp	.+16     	; 0xf3a <__fp_splitA+0x30>
     f2a:	16 16       	cp	r1, r22
     f2c:	17 06       	cpc	r1, r23
     f2e:	18 06       	cpc	r1, r24
     f30:	99 1f       	adc	r25, r25
     f32:	f1 cf       	rjmp	.-30     	; 0xf16 <__fp_splitA+0xc>
     f34:	86 95       	lsr	r24
     f36:	71 05       	cpc	r23, r1
     f38:	61 05       	cpc	r22, r1
     f3a:	08 94       	sec
     f3c:	08 95       	ret

00000f3e <__fp_zero>:
     f3e:	e8 94       	clt

00000f40 <__fp_szero>:
     f40:	bb 27       	eor	r27, r27
     f42:	66 27       	eor	r22, r22
     f44:	77 27       	eor	r23, r23
     f46:	cb 01       	movw	r24, r22
     f48:	97 f9       	bld	r25, 7
     f4a:	08 95       	ret

00000f4c <__mulsf3>:
     f4c:	0b d0       	rcall	.+22     	; 0xf64 <__mulsf3x>
     f4e:	c4 cf       	rjmp	.-120    	; 0xed8 <__fp_round>
     f50:	b5 df       	rcall	.-150    	; 0xebc <__fp_pscA>
     f52:	28 f0       	brcs	.+10     	; 0xf5e <__mulsf3+0x12>
     f54:	ba df       	rcall	.-140    	; 0xeca <__fp_pscB>
     f56:	18 f0       	brcs	.+6      	; 0xf5e <__mulsf3+0x12>
     f58:	95 23       	and	r25, r21
     f5a:	09 f0       	breq	.+2      	; 0xf5e <__mulsf3+0x12>
     f5c:	a6 cf       	rjmp	.-180    	; 0xeaa <__fp_inf>
     f5e:	ab cf       	rjmp	.-170    	; 0xeb6 <__fp_nan>
     f60:	11 24       	eor	r1, r1
     f62:	ee cf       	rjmp	.-36     	; 0xf40 <__fp_szero>

00000f64 <__mulsf3x>:
     f64:	ca df       	rcall	.-108    	; 0xefa <__fp_split3>
     f66:	a0 f3       	brcs	.-24     	; 0xf50 <__mulsf3+0x4>

00000f68 <__mulsf3_pse>:
     f68:	95 9f       	mul	r25, r21
     f6a:	d1 f3       	breq	.-12     	; 0xf60 <__mulsf3+0x14>
     f6c:	95 0f       	add	r25, r21
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	55 1f       	adc	r21, r21
     f72:	62 9f       	mul	r22, r18
     f74:	f0 01       	movw	r30, r0
     f76:	72 9f       	mul	r23, r18
     f78:	bb 27       	eor	r27, r27
     f7a:	f0 0d       	add	r31, r0
     f7c:	b1 1d       	adc	r27, r1
     f7e:	63 9f       	mul	r22, r19
     f80:	aa 27       	eor	r26, r26
     f82:	f0 0d       	add	r31, r0
     f84:	b1 1d       	adc	r27, r1
     f86:	aa 1f       	adc	r26, r26
     f88:	64 9f       	mul	r22, r20
     f8a:	66 27       	eor	r22, r22
     f8c:	b0 0d       	add	r27, r0
     f8e:	a1 1d       	adc	r26, r1
     f90:	66 1f       	adc	r22, r22
     f92:	82 9f       	mul	r24, r18
     f94:	22 27       	eor	r18, r18
     f96:	b0 0d       	add	r27, r0
     f98:	a1 1d       	adc	r26, r1
     f9a:	62 1f       	adc	r22, r18
     f9c:	73 9f       	mul	r23, r19
     f9e:	b0 0d       	add	r27, r0
     fa0:	a1 1d       	adc	r26, r1
     fa2:	62 1f       	adc	r22, r18
     fa4:	83 9f       	mul	r24, r19
     fa6:	a0 0d       	add	r26, r0
     fa8:	61 1d       	adc	r22, r1
     faa:	22 1f       	adc	r18, r18
     fac:	74 9f       	mul	r23, r20
     fae:	33 27       	eor	r19, r19
     fb0:	a0 0d       	add	r26, r0
     fb2:	61 1d       	adc	r22, r1
     fb4:	23 1f       	adc	r18, r19
     fb6:	84 9f       	mul	r24, r20
     fb8:	60 0d       	add	r22, r0
     fba:	21 1d       	adc	r18, r1
     fbc:	82 2f       	mov	r24, r18
     fbe:	76 2f       	mov	r23, r22
     fc0:	6a 2f       	mov	r22, r26
     fc2:	11 24       	eor	r1, r1
     fc4:	9f 57       	subi	r25, 0x7F	; 127
     fc6:	50 40       	sbci	r21, 0x00	; 0
     fc8:	8a f0       	brmi	.+34     	; 0xfec <__mulsf3_pse+0x84>
     fca:	e1 f0       	breq	.+56     	; 0x1004 <__mulsf3_pse+0x9c>
     fcc:	88 23       	and	r24, r24
     fce:	4a f0       	brmi	.+18     	; 0xfe2 <__mulsf3_pse+0x7a>
     fd0:	ee 0f       	add	r30, r30
     fd2:	ff 1f       	adc	r31, r31
     fd4:	bb 1f       	adc	r27, r27
     fd6:	66 1f       	adc	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	88 1f       	adc	r24, r24
     fdc:	91 50       	subi	r25, 0x01	; 1
     fde:	50 40       	sbci	r21, 0x00	; 0
     fe0:	a9 f7       	brne	.-22     	; 0xfcc <__mulsf3_pse+0x64>
     fe2:	9e 3f       	cpi	r25, 0xFE	; 254
     fe4:	51 05       	cpc	r21, r1
     fe6:	70 f0       	brcs	.+28     	; 0x1004 <__mulsf3_pse+0x9c>
     fe8:	60 cf       	rjmp	.-320    	; 0xeaa <__fp_inf>
     fea:	aa cf       	rjmp	.-172    	; 0xf40 <__fp_szero>
     fec:	5f 3f       	cpi	r21, 0xFF	; 255
     fee:	ec f3       	brlt	.-6      	; 0xfea <__mulsf3_pse+0x82>
     ff0:	98 3e       	cpi	r25, 0xE8	; 232
     ff2:	dc f3       	brlt	.-10     	; 0xfea <__mulsf3_pse+0x82>
     ff4:	86 95       	lsr	r24
     ff6:	77 95       	ror	r23
     ff8:	67 95       	ror	r22
     ffa:	b7 95       	ror	r27
     ffc:	f7 95       	ror	r31
     ffe:	e7 95       	ror	r30
    1000:	9f 5f       	subi	r25, 0xFF	; 255
    1002:	c1 f7       	brne	.-16     	; 0xff4 <__mulsf3_pse+0x8c>
    1004:	fe 2b       	or	r31, r30
    1006:	88 0f       	add	r24, r24
    1008:	91 1d       	adc	r25, r1
    100a:	96 95       	lsr	r25
    100c:	87 95       	ror	r24
    100e:	97 f9       	bld	r25, 7
    1010:	08 95       	ret

00001012 <sin>:
    1012:	9f 93       	push	r25
    1014:	05 d0       	rcall	.+10     	; 0x1020 <__fp_rempio2>
    1016:	0f 90       	pop	r0
    1018:	07 fc       	sbrc	r0, 7
    101a:	ee 5f       	subi	r30, 0xFE	; 254
    101c:	28 c0       	rjmp	.+80     	; 0x106e <__fp_sinus>
    101e:	4b cf       	rjmp	.-362    	; 0xeb6 <__fp_nan>

00001020 <__fp_rempio2>:
    1020:	74 df       	rcall	.-280    	; 0xf0a <__fp_splitA>
    1022:	e8 f3       	brcs	.-6      	; 0x101e <sin+0xc>
    1024:	e8 94       	clt
    1026:	e0 e0       	ldi	r30, 0x00	; 0
    1028:	bb 27       	eor	r27, r27
    102a:	9f 57       	subi	r25, 0x7F	; 127
    102c:	f0 f0       	brcs	.+60     	; 0x106a <__fp_rempio2+0x4a>
    102e:	2a ed       	ldi	r18, 0xDA	; 218
    1030:	3f e0       	ldi	r19, 0x0F	; 15
    1032:	49 ec       	ldi	r20, 0xC9	; 201
    1034:	06 c0       	rjmp	.+12     	; 0x1042 <__fp_rempio2+0x22>
    1036:	ee 0f       	add	r30, r30
    1038:	bb 0f       	add	r27, r27
    103a:	66 1f       	adc	r22, r22
    103c:	77 1f       	adc	r23, r23
    103e:	88 1f       	adc	r24, r24
    1040:	28 f0       	brcs	.+10     	; 0x104c <__fp_rempio2+0x2c>
    1042:	b2 3a       	cpi	r27, 0xA2	; 162
    1044:	62 07       	cpc	r22, r18
    1046:	73 07       	cpc	r23, r19
    1048:	84 07       	cpc	r24, r20
    104a:	28 f0       	brcs	.+10     	; 0x1056 <__fp_rempio2+0x36>
    104c:	b2 5a       	subi	r27, 0xA2	; 162
    104e:	62 0b       	sbc	r22, r18
    1050:	73 0b       	sbc	r23, r19
    1052:	84 0b       	sbc	r24, r20
    1054:	e3 95       	inc	r30
    1056:	9a 95       	dec	r25
    1058:	72 f7       	brpl	.-36     	; 0x1036 <__fp_rempio2+0x16>
    105a:	80 38       	cpi	r24, 0x80	; 128
    105c:	30 f4       	brcc	.+12     	; 0x106a <__fp_rempio2+0x4a>
    105e:	9a 95       	dec	r25
    1060:	bb 0f       	add	r27, r27
    1062:	66 1f       	adc	r22, r22
    1064:	77 1f       	adc	r23, r23
    1066:	88 1f       	adc	r24, r24
    1068:	d2 f7       	brpl	.-12     	; 0x105e <__fp_rempio2+0x3e>
    106a:	90 48       	sbci	r25, 0x80	; 128
    106c:	13 c0       	rjmp	.+38     	; 0x1094 <__fp_mpack_finite>

0000106e <__fp_sinus>:
    106e:	ef 93       	push	r30
    1070:	e0 ff       	sbrs	r30, 0
    1072:	06 c0       	rjmp	.+12     	; 0x1080 <__fp_sinus+0x12>
    1074:	a2 ea       	ldi	r26, 0xA2	; 162
    1076:	2a ed       	ldi	r18, 0xDA	; 218
    1078:	3f e0       	ldi	r19, 0x0F	; 15
    107a:	49 ec       	ldi	r20, 0xC9	; 201
    107c:	5f eb       	ldi	r21, 0xBF	; 191
    107e:	f1 dd       	rcall	.-1054   	; 0xc62 <__addsf3x>
    1080:	2b df       	rcall	.-426    	; 0xed8 <__fp_round>
    1082:	0f 90       	pop	r0
    1084:	03 94       	inc	r0
    1086:	01 fc       	sbrc	r0, 1
    1088:	90 58       	subi	r25, 0x80	; 128
    108a:	e4 ee       	ldi	r30, 0xE4	; 228
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	0e c0       	rjmp	.+28     	; 0x10ac <__fp_powsodd>

00001090 <__fp_mpack>:
    1090:	9f 3f       	cpi	r25, 0xFF	; 255
    1092:	31 f0       	breq	.+12     	; 0x10a0 <__fp_mpack_finite+0xc>

00001094 <__fp_mpack_finite>:
    1094:	91 50       	subi	r25, 0x01	; 1
    1096:	20 f4       	brcc	.+8      	; 0x10a0 <__fp_mpack_finite+0xc>
    1098:	87 95       	ror	r24
    109a:	77 95       	ror	r23
    109c:	67 95       	ror	r22
    109e:	b7 95       	ror	r27
    10a0:	88 0f       	add	r24, r24
    10a2:	91 1d       	adc	r25, r1
    10a4:	96 95       	lsr	r25
    10a6:	87 95       	ror	r24
    10a8:	97 f9       	bld	r25, 7
    10aa:	08 95       	ret

000010ac <__fp_powsodd>:
    10ac:	9f 93       	push	r25
    10ae:	8f 93       	push	r24
    10b0:	7f 93       	push	r23
    10b2:	6f 93       	push	r22
    10b4:	ff 93       	push	r31
    10b6:	ef 93       	push	r30
    10b8:	9b 01       	movw	r18, r22
    10ba:	ac 01       	movw	r20, r24
    10bc:	47 df       	rcall	.-370    	; 0xf4c <__mulsf3>
    10be:	ef 91       	pop	r30
    10c0:	ff 91       	pop	r31
    10c2:	05 d0       	rcall	.+10     	; 0x10ce <__fp_powser>
    10c4:	2f 91       	pop	r18
    10c6:	3f 91       	pop	r19
    10c8:	4f 91       	pop	r20
    10ca:	5f 91       	pop	r21
    10cc:	3f cf       	rjmp	.-386    	; 0xf4c <__mulsf3>

000010ce <__fp_powser>:
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	1f 93       	push	r17
    10d4:	0f 93       	push	r16
    10d6:	ff 92       	push	r15
    10d8:	ef 92       	push	r14
    10da:	df 92       	push	r13
    10dc:	7b 01       	movw	r14, r22
    10de:	8c 01       	movw	r16, r24
    10e0:	68 94       	set
    10e2:	05 c0       	rjmp	.+10     	; 0x10ee <__fp_powser+0x20>
    10e4:	da 2e       	mov	r13, r26
    10e6:	ef 01       	movw	r28, r30
    10e8:	3d df       	rcall	.-390    	; 0xf64 <__mulsf3x>
    10ea:	fe 01       	movw	r30, r28
    10ec:	e8 94       	clt
    10ee:	a5 91       	lpm	r26, Z+
    10f0:	25 91       	lpm	r18, Z+
    10f2:	35 91       	lpm	r19, Z+
    10f4:	45 91       	lpm	r20, Z+
    10f6:	55 91       	lpm	r21, Z+
    10f8:	ae f3       	brts	.-22     	; 0x10e4 <__fp_powser+0x16>
    10fa:	ef 01       	movw	r28, r30
    10fc:	b2 dd       	rcall	.-1180   	; 0xc62 <__addsf3x>
    10fe:	fe 01       	movw	r30, r28
    1100:	97 01       	movw	r18, r14
    1102:	a8 01       	movw	r20, r16
    1104:	da 94       	dec	r13
    1106:	79 f7       	brne	.-34     	; 0x10e6 <__fp_powser+0x18>
    1108:	df 90       	pop	r13
    110a:	ef 90       	pop	r14
    110c:	ff 90       	pop	r15
    110e:	0f 91       	pop	r16
    1110:	1f 91       	pop	r17
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <__divmodhi4>:
    1118:	97 fb       	bst	r25, 7
    111a:	07 2e       	mov	r0, r23
    111c:	16 f4       	brtc	.+4      	; 0x1122 <__divmodhi4+0xa>
    111e:	00 94       	com	r0
    1120:	06 d0       	rcall	.+12     	; 0x112e <__divmodhi4_neg1>
    1122:	77 fd       	sbrc	r23, 7
    1124:	08 d0       	rcall	.+16     	; 0x1136 <__divmodhi4_neg2>
    1126:	27 d0       	rcall	.+78     	; 0x1176 <__udivmodhi4>
    1128:	07 fc       	sbrc	r0, 7
    112a:	05 d0       	rcall	.+10     	; 0x1136 <__divmodhi4_neg2>
    112c:	3e f4       	brtc	.+14     	; 0x113c <__divmodhi4_exit>

0000112e <__divmodhi4_neg1>:
    112e:	90 95       	com	r25
    1130:	81 95       	neg	r24
    1132:	9f 4f       	sbci	r25, 0xFF	; 255
    1134:	08 95       	ret

00001136 <__divmodhi4_neg2>:
    1136:	70 95       	com	r23
    1138:	61 95       	neg	r22
    113a:	7f 4f       	sbci	r23, 0xFF	; 255

0000113c <__divmodhi4_exit>:
    113c:	08 95       	ret

0000113e <__divmodsi4>:
    113e:	05 2e       	mov	r0, r21
    1140:	97 fb       	bst	r25, 7
    1142:	16 f4       	brtc	.+4      	; 0x1148 <__divmodsi4+0xa>
    1144:	00 94       	com	r0
    1146:	0f d0       	rcall	.+30     	; 0x1166 <__negsi2>
    1148:	57 fd       	sbrc	r21, 7
    114a:	05 d0       	rcall	.+10     	; 0x1156 <__divmodsi4_neg2>
    114c:	28 d0       	rcall	.+80     	; 0x119e <__udivmodsi4>
    114e:	07 fc       	sbrc	r0, 7
    1150:	02 d0       	rcall	.+4      	; 0x1156 <__divmodsi4_neg2>
    1152:	46 f4       	brtc	.+16     	; 0x1164 <__divmodsi4_exit>
    1154:	08 c0       	rjmp	.+16     	; 0x1166 <__negsi2>

00001156 <__divmodsi4_neg2>:
    1156:	50 95       	com	r21
    1158:	40 95       	com	r20
    115a:	30 95       	com	r19
    115c:	21 95       	neg	r18
    115e:	3f 4f       	sbci	r19, 0xFF	; 255
    1160:	4f 4f       	sbci	r20, 0xFF	; 255
    1162:	5f 4f       	sbci	r21, 0xFF	; 255

00001164 <__divmodsi4_exit>:
    1164:	08 95       	ret

00001166 <__negsi2>:
    1166:	90 95       	com	r25
    1168:	80 95       	com	r24
    116a:	70 95       	com	r23
    116c:	61 95       	neg	r22
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	8f 4f       	sbci	r24, 0xFF	; 255
    1172:	9f 4f       	sbci	r25, 0xFF	; 255
    1174:	08 95       	ret

00001176 <__udivmodhi4>:
    1176:	aa 1b       	sub	r26, r26
    1178:	bb 1b       	sub	r27, r27
    117a:	51 e1       	ldi	r21, 0x11	; 17
    117c:	07 c0       	rjmp	.+14     	; 0x118c <__udivmodhi4_ep>

0000117e <__udivmodhi4_loop>:
    117e:	aa 1f       	adc	r26, r26
    1180:	bb 1f       	adc	r27, r27
    1182:	a6 17       	cp	r26, r22
    1184:	b7 07       	cpc	r27, r23
    1186:	10 f0       	brcs	.+4      	; 0x118c <__udivmodhi4_ep>
    1188:	a6 1b       	sub	r26, r22
    118a:	b7 0b       	sbc	r27, r23

0000118c <__udivmodhi4_ep>:
    118c:	88 1f       	adc	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	5a 95       	dec	r21
    1192:	a9 f7       	brne	.-22     	; 0x117e <__udivmodhi4_loop>
    1194:	80 95       	com	r24
    1196:	90 95       	com	r25
    1198:	bc 01       	movw	r22, r24
    119a:	cd 01       	movw	r24, r26
    119c:	08 95       	ret

0000119e <__udivmodsi4>:
    119e:	a1 e2       	ldi	r26, 0x21	; 33
    11a0:	1a 2e       	mov	r1, r26
    11a2:	aa 1b       	sub	r26, r26
    11a4:	bb 1b       	sub	r27, r27
    11a6:	fd 01       	movw	r30, r26
    11a8:	0d c0       	rjmp	.+26     	; 0x11c4 <__udivmodsi4_ep>

000011aa <__udivmodsi4_loop>:
    11aa:	aa 1f       	adc	r26, r26
    11ac:	bb 1f       	adc	r27, r27
    11ae:	ee 1f       	adc	r30, r30
    11b0:	ff 1f       	adc	r31, r31
    11b2:	a2 17       	cp	r26, r18
    11b4:	b3 07       	cpc	r27, r19
    11b6:	e4 07       	cpc	r30, r20
    11b8:	f5 07       	cpc	r31, r21
    11ba:	20 f0       	brcs	.+8      	; 0x11c4 <__udivmodsi4_ep>
    11bc:	a2 1b       	sub	r26, r18
    11be:	b3 0b       	sbc	r27, r19
    11c0:	e4 0b       	sbc	r30, r20
    11c2:	f5 0b       	sbc	r31, r21

000011c4 <__udivmodsi4_ep>:
    11c4:	66 1f       	adc	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	88 1f       	adc	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	1a 94       	dec	r1
    11ce:	69 f7       	brne	.-38     	; 0x11aa <__udivmodsi4_loop>
    11d0:	60 95       	com	r22
    11d2:	70 95       	com	r23
    11d4:	80 95       	com	r24
    11d6:	90 95       	com	r25
    11d8:	9b 01       	movw	r18, r22
    11da:	ac 01       	movw	r20, r24
    11dc:	bd 01       	movw	r22, r26
    11de:	cf 01       	movw	r24, r30
    11e0:	08 95       	ret

000011e2 <__itoa_ncheck>:
    11e2:	bb 27       	eor	r27, r27
    11e4:	4a 30       	cpi	r20, 0x0A	; 10
    11e6:	31 f4       	brne	.+12     	; 0x11f4 <__itoa_ncheck+0x12>
    11e8:	99 23       	and	r25, r25
    11ea:	22 f4       	brpl	.+8      	; 0x11f4 <__itoa_ncheck+0x12>
    11ec:	bd e2       	ldi	r27, 0x2D	; 45
    11ee:	90 95       	com	r25
    11f0:	81 95       	neg	r24
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	01 c0       	rjmp	.+2      	; 0x11f8 <__utoa_common>

000011f6 <__utoa_ncheck>:
    11f6:	bb 27       	eor	r27, r27

000011f8 <__utoa_common>:
    11f8:	fb 01       	movw	r30, r22
    11fa:	55 27       	eor	r21, r21
    11fc:	aa 27       	eor	r26, r26
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	aa 1f       	adc	r26, r26
    1204:	a4 17       	cp	r26, r20
    1206:	10 f0       	brcs	.+4      	; 0x120c <__utoa_common+0x14>
    1208:	a4 1b       	sub	r26, r20
    120a:	83 95       	inc	r24
    120c:	50 51       	subi	r21, 0x10	; 16
    120e:	b9 f7       	brne	.-18     	; 0x11fe <__utoa_common+0x6>
    1210:	a0 5d       	subi	r26, 0xD0	; 208
    1212:	aa 33       	cpi	r26, 0x3A	; 58
    1214:	08 f0       	brcs	.+2      	; 0x1218 <__utoa_common+0x20>
    1216:	a9 5d       	subi	r26, 0xD9	; 217
    1218:	a1 93       	st	Z+, r26
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	79 f7       	brne	.-34     	; 0x11fc <__utoa_common+0x4>
    121e:	b1 11       	cpse	r27, r1
    1220:	b1 93       	st	Z+, r27
    1222:	11 92       	st	Z+, r1
    1224:	cb 01       	movw	r24, r22
    1226:	e7 c3       	rjmp	.+1998   	; 0x19f6 <strrev>

00001228 <fdevopen>:
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	31 f4       	brne	.+12     	; 0x1240 <fdevopen+0x18>
    1234:	61 15       	cp	r22, r1
    1236:	71 05       	cpc	r23, r1
    1238:	19 f4       	brne	.+6      	; 0x1240 <fdevopen+0x18>
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	39 c0       	rjmp	.+114    	; 0x12b2 <fdevopen+0x8a>
    1240:	8b 01       	movw	r16, r22
    1242:	ec 01       	movw	r28, r24
    1244:	6e e0       	ldi	r22, 0x0E	; 14
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	7c d2       	rcall	.+1272   	; 0x1746 <calloc>
    124e:	fc 01       	movw	r30, r24
    1250:	89 2b       	or	r24, r25
    1252:	99 f3       	breq	.-26     	; 0x123a <fdevopen+0x12>
    1254:	80 e8       	ldi	r24, 0x80	; 128
    1256:	83 83       	std	Z+3, r24	; 0x03
    1258:	01 15       	cp	r16, r1
    125a:	11 05       	cpc	r17, r1
    125c:	71 f0       	breq	.+28     	; 0x127a <fdevopen+0x52>
    125e:	13 87       	std	Z+11, r17	; 0x0b
    1260:	02 87       	std	Z+10, r16	; 0x0a
    1262:	81 e8       	ldi	r24, 0x81	; 129
    1264:	83 83       	std	Z+3, r24	; 0x03
    1266:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <__iob>
    126a:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <__iob+0x1>
    126e:	89 2b       	or	r24, r25
    1270:	21 f4       	brne	.+8      	; 0x127a <fdevopen+0x52>
    1272:	f0 93 5c 04 	sts	0x045C, r31	; 0x80045c <__iob+0x1>
    1276:	e0 93 5b 04 	sts	0x045B, r30	; 0x80045b <__iob>
    127a:	20 97       	sbiw	r28, 0x00	; 0
    127c:	c9 f0       	breq	.+50     	; 0x12b0 <fdevopen+0x88>
    127e:	d1 87       	std	Z+9, r29	; 0x09
    1280:	c0 87       	std	Z+8, r28	; 0x08
    1282:	83 81       	ldd	r24, Z+3	; 0x03
    1284:	82 60       	ori	r24, 0x02	; 2
    1286:	83 83       	std	Z+3, r24	; 0x03
    1288:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <__iob+0x2>
    128c:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <__iob+0x3>
    1290:	89 2b       	or	r24, r25
    1292:	71 f4       	brne	.+28     	; 0x12b0 <fdevopen+0x88>
    1294:	f0 93 5e 04 	sts	0x045E, r31	; 0x80045e <__iob+0x3>
    1298:	e0 93 5d 04 	sts	0x045D, r30	; 0x80045d <__iob+0x2>
    129c:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <__iob+0x4>
    12a0:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <__iob+0x5>
    12a4:	89 2b       	or	r24, r25
    12a6:	21 f4       	brne	.+8      	; 0x12b0 <fdevopen+0x88>
    12a8:	f0 93 60 04 	sts	0x0460, r31	; 0x800460 <__iob+0x5>
    12ac:	e0 93 5f 04 	sts	0x045F, r30	; 0x80045f <__iob+0x4>
    12b0:	cf 01       	movw	r24, r30
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	08 95       	ret

000012bc <printf>:
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	ae 01       	movw	r20, r28
    12c6:	4a 5f       	subi	r20, 0xFA	; 250
    12c8:	5f 4f       	sbci	r21, 0xFF	; 255
    12ca:	fa 01       	movw	r30, r20
    12cc:	61 91       	ld	r22, Z+
    12ce:	71 91       	ld	r23, Z+
    12d0:	af 01       	movw	r20, r30
    12d2:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <__iob+0x2>
    12d6:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <__iob+0x3>
    12da:	38 d0       	rcall	.+112    	; 0x134c <vfprintf>
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	08 95       	ret

000012e2 <putchar>:
    12e2:	60 91 5d 04 	lds	r22, 0x045D	; 0x80045d <__iob+0x2>
    12e6:	70 91 5e 04 	lds	r23, 0x045E	; 0x80045e <__iob+0x3>
    12ea:	95 c3       	rjmp	.+1834   	; 0x1a16 <fputc>

000012ec <puts>:
    12ec:	0f 93       	push	r16
    12ee:	1f 93       	push	r17
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	e0 91 5d 04 	lds	r30, 0x045D	; 0x80045d <__iob+0x2>
    12f8:	f0 91 5e 04 	lds	r31, 0x045E	; 0x80045e <__iob+0x3>
    12fc:	23 81       	ldd	r18, Z+3	; 0x03
    12fe:	21 ff       	sbrs	r18, 1
    1300:	1b c0       	rjmp	.+54     	; 0x1338 <puts+0x4c>
    1302:	8c 01       	movw	r16, r24
    1304:	d0 e0       	ldi	r29, 0x00	; 0
    1306:	c0 e0       	ldi	r28, 0x00	; 0
    1308:	f8 01       	movw	r30, r16
    130a:	81 91       	ld	r24, Z+
    130c:	8f 01       	movw	r16, r30
    130e:	60 91 5d 04 	lds	r22, 0x045D	; 0x80045d <__iob+0x2>
    1312:	70 91 5e 04 	lds	r23, 0x045E	; 0x80045e <__iob+0x3>
    1316:	db 01       	movw	r26, r22
    1318:	18 96       	adiw	r26, 0x08	; 8
    131a:	ed 91       	ld	r30, X+
    131c:	fc 91       	ld	r31, X
    131e:	19 97       	sbiw	r26, 0x09	; 9
    1320:	88 23       	and	r24, r24
    1322:	31 f0       	breq	.+12     	; 0x1330 <puts+0x44>
    1324:	19 95       	eicall
    1326:	89 2b       	or	r24, r25
    1328:	79 f3       	breq	.-34     	; 0x1308 <puts+0x1c>
    132a:	df ef       	ldi	r29, 0xFF	; 255
    132c:	cf ef       	ldi	r28, 0xFF	; 255
    132e:	ec cf       	rjmp	.-40     	; 0x1308 <puts+0x1c>
    1330:	8a e0       	ldi	r24, 0x0A	; 10
    1332:	19 95       	eicall
    1334:	89 2b       	or	r24, r25
    1336:	19 f0       	breq	.+6      	; 0x133e <puts+0x52>
    1338:	8f ef       	ldi	r24, 0xFF	; 255
    133a:	9f ef       	ldi	r25, 0xFF	; 255
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <puts+0x56>
    133e:	8d 2f       	mov	r24, r29
    1340:	9c 2f       	mov	r25, r28
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	08 95       	ret

0000134c <vfprintf>:
    134c:	2f 92       	push	r2
    134e:	3f 92       	push	r3
    1350:	4f 92       	push	r4
    1352:	5f 92       	push	r5
    1354:	6f 92       	push	r6
    1356:	7f 92       	push	r7
    1358:	8f 92       	push	r8
    135a:	9f 92       	push	r9
    135c:	af 92       	push	r10
    135e:	bf 92       	push	r11
    1360:	cf 92       	push	r12
    1362:	df 92       	push	r13
    1364:	ef 92       	push	r14
    1366:	ff 92       	push	r15
    1368:	0f 93       	push	r16
    136a:	1f 93       	push	r17
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	2b 97       	sbiw	r28, 0x0b	; 11
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	6c 01       	movw	r12, r24
    1382:	7b 01       	movw	r14, r22
    1384:	8a 01       	movw	r16, r20
    1386:	fc 01       	movw	r30, r24
    1388:	17 82       	std	Z+7, r1	; 0x07
    138a:	16 82       	std	Z+6, r1	; 0x06
    138c:	83 81       	ldd	r24, Z+3	; 0x03
    138e:	81 ff       	sbrs	r24, 1
    1390:	bf c1       	rjmp	.+894    	; 0x1710 <vfprintf+0x3c4>
    1392:	ce 01       	movw	r24, r28
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	3c 01       	movw	r6, r24
    1398:	f6 01       	movw	r30, r12
    139a:	93 81       	ldd	r25, Z+3	; 0x03
    139c:	f7 01       	movw	r30, r14
    139e:	93 fd       	sbrc	r25, 3
    13a0:	85 91       	lpm	r24, Z+
    13a2:	93 ff       	sbrs	r25, 3
    13a4:	81 91       	ld	r24, Z+
    13a6:	7f 01       	movw	r14, r30
    13a8:	88 23       	and	r24, r24
    13aa:	09 f4       	brne	.+2      	; 0x13ae <vfprintf+0x62>
    13ac:	ad c1       	rjmp	.+858    	; 0x1708 <vfprintf+0x3bc>
    13ae:	85 32       	cpi	r24, 0x25	; 37
    13b0:	39 f4       	brne	.+14     	; 0x13c0 <vfprintf+0x74>
    13b2:	93 fd       	sbrc	r25, 3
    13b4:	85 91       	lpm	r24, Z+
    13b6:	93 ff       	sbrs	r25, 3
    13b8:	81 91       	ld	r24, Z+
    13ba:	7f 01       	movw	r14, r30
    13bc:	85 32       	cpi	r24, 0x25	; 37
    13be:	21 f4       	brne	.+8      	; 0x13c8 <vfprintf+0x7c>
    13c0:	b6 01       	movw	r22, r12
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	28 d3       	rcall	.+1616   	; 0x1a16 <fputc>
    13c6:	e8 cf       	rjmp	.-48     	; 0x1398 <vfprintf+0x4c>
    13c8:	91 2c       	mov	r9, r1
    13ca:	21 2c       	mov	r2, r1
    13cc:	31 2c       	mov	r3, r1
    13ce:	ff e1       	ldi	r31, 0x1F	; 31
    13d0:	f3 15       	cp	r31, r3
    13d2:	d8 f0       	brcs	.+54     	; 0x140a <vfprintf+0xbe>
    13d4:	8b 32       	cpi	r24, 0x2B	; 43
    13d6:	79 f0       	breq	.+30     	; 0x13f6 <vfprintf+0xaa>
    13d8:	38 f4       	brcc	.+14     	; 0x13e8 <vfprintf+0x9c>
    13da:	80 32       	cpi	r24, 0x20	; 32
    13dc:	79 f0       	breq	.+30     	; 0x13fc <vfprintf+0xb0>
    13de:	83 32       	cpi	r24, 0x23	; 35
    13e0:	a1 f4       	brne	.+40     	; 0x140a <vfprintf+0xbe>
    13e2:	23 2d       	mov	r18, r3
    13e4:	20 61       	ori	r18, 0x10	; 16
    13e6:	1d c0       	rjmp	.+58     	; 0x1422 <vfprintf+0xd6>
    13e8:	8d 32       	cpi	r24, 0x2D	; 45
    13ea:	61 f0       	breq	.+24     	; 0x1404 <vfprintf+0xb8>
    13ec:	80 33       	cpi	r24, 0x30	; 48
    13ee:	69 f4       	brne	.+26     	; 0x140a <vfprintf+0xbe>
    13f0:	23 2d       	mov	r18, r3
    13f2:	21 60       	ori	r18, 0x01	; 1
    13f4:	16 c0       	rjmp	.+44     	; 0x1422 <vfprintf+0xd6>
    13f6:	83 2d       	mov	r24, r3
    13f8:	82 60       	ori	r24, 0x02	; 2
    13fa:	38 2e       	mov	r3, r24
    13fc:	e3 2d       	mov	r30, r3
    13fe:	e4 60       	ori	r30, 0x04	; 4
    1400:	3e 2e       	mov	r3, r30
    1402:	2a c0       	rjmp	.+84     	; 0x1458 <vfprintf+0x10c>
    1404:	f3 2d       	mov	r31, r3
    1406:	f8 60       	ori	r31, 0x08	; 8
    1408:	1d c0       	rjmp	.+58     	; 0x1444 <vfprintf+0xf8>
    140a:	37 fc       	sbrc	r3, 7
    140c:	2d c0       	rjmp	.+90     	; 0x1468 <vfprintf+0x11c>
    140e:	20 ed       	ldi	r18, 0xD0	; 208
    1410:	28 0f       	add	r18, r24
    1412:	2a 30       	cpi	r18, 0x0A	; 10
    1414:	40 f0       	brcs	.+16     	; 0x1426 <vfprintf+0xda>
    1416:	8e 32       	cpi	r24, 0x2E	; 46
    1418:	b9 f4       	brne	.+46     	; 0x1448 <vfprintf+0xfc>
    141a:	36 fc       	sbrc	r3, 6
    141c:	75 c1       	rjmp	.+746    	; 0x1708 <vfprintf+0x3bc>
    141e:	23 2d       	mov	r18, r3
    1420:	20 64       	ori	r18, 0x40	; 64
    1422:	32 2e       	mov	r3, r18
    1424:	19 c0       	rjmp	.+50     	; 0x1458 <vfprintf+0x10c>
    1426:	36 fe       	sbrs	r3, 6
    1428:	06 c0       	rjmp	.+12     	; 0x1436 <vfprintf+0xea>
    142a:	8a e0       	ldi	r24, 0x0A	; 10
    142c:	98 9e       	mul	r9, r24
    142e:	20 0d       	add	r18, r0
    1430:	11 24       	eor	r1, r1
    1432:	92 2e       	mov	r9, r18
    1434:	11 c0       	rjmp	.+34     	; 0x1458 <vfprintf+0x10c>
    1436:	ea e0       	ldi	r30, 0x0A	; 10
    1438:	2e 9e       	mul	r2, r30
    143a:	20 0d       	add	r18, r0
    143c:	11 24       	eor	r1, r1
    143e:	22 2e       	mov	r2, r18
    1440:	f3 2d       	mov	r31, r3
    1442:	f0 62       	ori	r31, 0x20	; 32
    1444:	3f 2e       	mov	r3, r31
    1446:	08 c0       	rjmp	.+16     	; 0x1458 <vfprintf+0x10c>
    1448:	8c 36       	cpi	r24, 0x6C	; 108
    144a:	21 f4       	brne	.+8      	; 0x1454 <vfprintf+0x108>
    144c:	83 2d       	mov	r24, r3
    144e:	80 68       	ori	r24, 0x80	; 128
    1450:	38 2e       	mov	r3, r24
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <vfprintf+0x10c>
    1454:	88 36       	cpi	r24, 0x68	; 104
    1456:	41 f4       	brne	.+16     	; 0x1468 <vfprintf+0x11c>
    1458:	f7 01       	movw	r30, r14
    145a:	93 fd       	sbrc	r25, 3
    145c:	85 91       	lpm	r24, Z+
    145e:	93 ff       	sbrs	r25, 3
    1460:	81 91       	ld	r24, Z+
    1462:	7f 01       	movw	r14, r30
    1464:	81 11       	cpse	r24, r1
    1466:	b3 cf       	rjmp	.-154    	; 0x13ce <vfprintf+0x82>
    1468:	98 2f       	mov	r25, r24
    146a:	9f 7d       	andi	r25, 0xDF	; 223
    146c:	95 54       	subi	r25, 0x45	; 69
    146e:	93 30       	cpi	r25, 0x03	; 3
    1470:	28 f4       	brcc	.+10     	; 0x147c <vfprintf+0x130>
    1472:	0c 5f       	subi	r16, 0xFC	; 252
    1474:	1f 4f       	sbci	r17, 0xFF	; 255
    1476:	9f e3       	ldi	r25, 0x3F	; 63
    1478:	99 83       	std	Y+1, r25	; 0x01
    147a:	0d c0       	rjmp	.+26     	; 0x1496 <vfprintf+0x14a>
    147c:	83 36       	cpi	r24, 0x63	; 99
    147e:	31 f0       	breq	.+12     	; 0x148c <vfprintf+0x140>
    1480:	83 37       	cpi	r24, 0x73	; 115
    1482:	71 f0       	breq	.+28     	; 0x14a0 <vfprintf+0x154>
    1484:	83 35       	cpi	r24, 0x53	; 83
    1486:	09 f0       	breq	.+2      	; 0x148a <vfprintf+0x13e>
    1488:	55 c0       	rjmp	.+170    	; 0x1534 <vfprintf+0x1e8>
    148a:	20 c0       	rjmp	.+64     	; 0x14cc <vfprintf+0x180>
    148c:	f8 01       	movw	r30, r16
    148e:	80 81       	ld	r24, Z
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	0e 5f       	subi	r16, 0xFE	; 254
    1494:	1f 4f       	sbci	r17, 0xFF	; 255
    1496:	88 24       	eor	r8, r8
    1498:	83 94       	inc	r8
    149a:	91 2c       	mov	r9, r1
    149c:	53 01       	movw	r10, r6
    149e:	12 c0       	rjmp	.+36     	; 0x14c4 <vfprintf+0x178>
    14a0:	28 01       	movw	r4, r16
    14a2:	f2 e0       	ldi	r31, 0x02	; 2
    14a4:	4f 0e       	add	r4, r31
    14a6:	51 1c       	adc	r5, r1
    14a8:	f8 01       	movw	r30, r16
    14aa:	a0 80       	ld	r10, Z
    14ac:	b1 80       	ldd	r11, Z+1	; 0x01
    14ae:	36 fe       	sbrs	r3, 6
    14b0:	03 c0       	rjmp	.+6      	; 0x14b8 <vfprintf+0x16c>
    14b2:	69 2d       	mov	r22, r9
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <vfprintf+0x170>
    14b8:	6f ef       	ldi	r22, 0xFF	; 255
    14ba:	7f ef       	ldi	r23, 0xFF	; 255
    14bc:	c5 01       	movw	r24, r10
    14be:	90 d2       	rcall	.+1312   	; 0x19e0 <strnlen>
    14c0:	4c 01       	movw	r8, r24
    14c2:	82 01       	movw	r16, r4
    14c4:	f3 2d       	mov	r31, r3
    14c6:	ff 77       	andi	r31, 0x7F	; 127
    14c8:	3f 2e       	mov	r3, r31
    14ca:	15 c0       	rjmp	.+42     	; 0x14f6 <vfprintf+0x1aa>
    14cc:	28 01       	movw	r4, r16
    14ce:	22 e0       	ldi	r18, 0x02	; 2
    14d0:	42 0e       	add	r4, r18
    14d2:	51 1c       	adc	r5, r1
    14d4:	f8 01       	movw	r30, r16
    14d6:	a0 80       	ld	r10, Z
    14d8:	b1 80       	ldd	r11, Z+1	; 0x01
    14da:	36 fe       	sbrs	r3, 6
    14dc:	03 c0       	rjmp	.+6      	; 0x14e4 <vfprintf+0x198>
    14de:	69 2d       	mov	r22, r9
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <vfprintf+0x19c>
    14e4:	6f ef       	ldi	r22, 0xFF	; 255
    14e6:	7f ef       	ldi	r23, 0xFF	; 255
    14e8:	c5 01       	movw	r24, r10
    14ea:	68 d2       	rcall	.+1232   	; 0x19bc <strnlen_P>
    14ec:	4c 01       	movw	r8, r24
    14ee:	f3 2d       	mov	r31, r3
    14f0:	f0 68       	ori	r31, 0x80	; 128
    14f2:	3f 2e       	mov	r3, r31
    14f4:	82 01       	movw	r16, r4
    14f6:	33 fc       	sbrc	r3, 3
    14f8:	19 c0       	rjmp	.+50     	; 0x152c <vfprintf+0x1e0>
    14fa:	82 2d       	mov	r24, r2
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	88 16       	cp	r8, r24
    1500:	99 06       	cpc	r9, r25
    1502:	a0 f4       	brcc	.+40     	; 0x152c <vfprintf+0x1e0>
    1504:	b6 01       	movw	r22, r12
    1506:	80 e2       	ldi	r24, 0x20	; 32
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	85 d2       	rcall	.+1290   	; 0x1a16 <fputc>
    150c:	2a 94       	dec	r2
    150e:	f5 cf       	rjmp	.-22     	; 0x14fa <vfprintf+0x1ae>
    1510:	f5 01       	movw	r30, r10
    1512:	37 fc       	sbrc	r3, 7
    1514:	85 91       	lpm	r24, Z+
    1516:	37 fe       	sbrs	r3, 7
    1518:	81 91       	ld	r24, Z+
    151a:	5f 01       	movw	r10, r30
    151c:	b6 01       	movw	r22, r12
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	7a d2       	rcall	.+1268   	; 0x1a16 <fputc>
    1522:	21 10       	cpse	r2, r1
    1524:	2a 94       	dec	r2
    1526:	21 e0       	ldi	r18, 0x01	; 1
    1528:	82 1a       	sub	r8, r18
    152a:	91 08       	sbc	r9, r1
    152c:	81 14       	cp	r8, r1
    152e:	91 04       	cpc	r9, r1
    1530:	79 f7       	brne	.-34     	; 0x1510 <vfprintf+0x1c4>
    1532:	e1 c0       	rjmp	.+450    	; 0x16f6 <vfprintf+0x3aa>
    1534:	84 36       	cpi	r24, 0x64	; 100
    1536:	11 f0       	breq	.+4      	; 0x153c <vfprintf+0x1f0>
    1538:	89 36       	cpi	r24, 0x69	; 105
    153a:	39 f5       	brne	.+78     	; 0x158a <vfprintf+0x23e>
    153c:	f8 01       	movw	r30, r16
    153e:	37 fe       	sbrs	r3, 7
    1540:	07 c0       	rjmp	.+14     	; 0x1550 <vfprintf+0x204>
    1542:	60 81       	ld	r22, Z
    1544:	71 81       	ldd	r23, Z+1	; 0x01
    1546:	82 81       	ldd	r24, Z+2	; 0x02
    1548:	93 81       	ldd	r25, Z+3	; 0x03
    154a:	0c 5f       	subi	r16, 0xFC	; 252
    154c:	1f 4f       	sbci	r17, 0xFF	; 255
    154e:	08 c0       	rjmp	.+16     	; 0x1560 <vfprintf+0x214>
    1550:	60 81       	ld	r22, Z
    1552:	71 81       	ldd	r23, Z+1	; 0x01
    1554:	07 2e       	mov	r0, r23
    1556:	00 0c       	add	r0, r0
    1558:	88 0b       	sbc	r24, r24
    155a:	99 0b       	sbc	r25, r25
    155c:	0e 5f       	subi	r16, 0xFE	; 254
    155e:	1f 4f       	sbci	r17, 0xFF	; 255
    1560:	f3 2d       	mov	r31, r3
    1562:	ff 76       	andi	r31, 0x6F	; 111
    1564:	3f 2e       	mov	r3, r31
    1566:	97 ff       	sbrs	r25, 7
    1568:	09 c0       	rjmp	.+18     	; 0x157c <vfprintf+0x230>
    156a:	90 95       	com	r25
    156c:	80 95       	com	r24
    156e:	70 95       	com	r23
    1570:	61 95       	neg	r22
    1572:	7f 4f       	sbci	r23, 0xFF	; 255
    1574:	8f 4f       	sbci	r24, 0xFF	; 255
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	f0 68       	ori	r31, 0x80	; 128
    157a:	3f 2e       	mov	r3, r31
    157c:	2a e0       	ldi	r18, 0x0A	; 10
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	a3 01       	movw	r20, r6
    1582:	85 d2       	rcall	.+1290   	; 0x1a8e <__ultoa_invert>
    1584:	88 2e       	mov	r8, r24
    1586:	86 18       	sub	r8, r6
    1588:	44 c0       	rjmp	.+136    	; 0x1612 <vfprintf+0x2c6>
    158a:	85 37       	cpi	r24, 0x75	; 117
    158c:	31 f4       	brne	.+12     	; 0x159a <vfprintf+0x24e>
    158e:	23 2d       	mov	r18, r3
    1590:	2f 7e       	andi	r18, 0xEF	; 239
    1592:	b2 2e       	mov	r11, r18
    1594:	2a e0       	ldi	r18, 0x0A	; 10
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	25 c0       	rjmp	.+74     	; 0x15e4 <vfprintf+0x298>
    159a:	93 2d       	mov	r25, r3
    159c:	99 7f       	andi	r25, 0xF9	; 249
    159e:	b9 2e       	mov	r11, r25
    15a0:	8f 36       	cpi	r24, 0x6F	; 111
    15a2:	c1 f0       	breq	.+48     	; 0x15d4 <vfprintf+0x288>
    15a4:	18 f4       	brcc	.+6      	; 0x15ac <vfprintf+0x260>
    15a6:	88 35       	cpi	r24, 0x58	; 88
    15a8:	79 f0       	breq	.+30     	; 0x15c8 <vfprintf+0x27c>
    15aa:	ae c0       	rjmp	.+348    	; 0x1708 <vfprintf+0x3bc>
    15ac:	80 37       	cpi	r24, 0x70	; 112
    15ae:	19 f0       	breq	.+6      	; 0x15b6 <vfprintf+0x26a>
    15b0:	88 37       	cpi	r24, 0x78	; 120
    15b2:	21 f0       	breq	.+8      	; 0x15bc <vfprintf+0x270>
    15b4:	a9 c0       	rjmp	.+338    	; 0x1708 <vfprintf+0x3bc>
    15b6:	e9 2f       	mov	r30, r25
    15b8:	e0 61       	ori	r30, 0x10	; 16
    15ba:	be 2e       	mov	r11, r30
    15bc:	b4 fe       	sbrs	r11, 4
    15be:	0d c0       	rjmp	.+26     	; 0x15da <vfprintf+0x28e>
    15c0:	fb 2d       	mov	r31, r11
    15c2:	f4 60       	ori	r31, 0x04	; 4
    15c4:	bf 2e       	mov	r11, r31
    15c6:	09 c0       	rjmp	.+18     	; 0x15da <vfprintf+0x28e>
    15c8:	34 fe       	sbrs	r3, 4
    15ca:	0a c0       	rjmp	.+20     	; 0x15e0 <vfprintf+0x294>
    15cc:	29 2f       	mov	r18, r25
    15ce:	26 60       	ori	r18, 0x06	; 6
    15d0:	b2 2e       	mov	r11, r18
    15d2:	06 c0       	rjmp	.+12     	; 0x15e0 <vfprintf+0x294>
    15d4:	28 e0       	ldi	r18, 0x08	; 8
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	05 c0       	rjmp	.+10     	; 0x15e4 <vfprintf+0x298>
    15da:	20 e1       	ldi	r18, 0x10	; 16
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <vfprintf+0x298>
    15e0:	20 e1       	ldi	r18, 0x10	; 16
    15e2:	32 e0       	ldi	r19, 0x02	; 2
    15e4:	f8 01       	movw	r30, r16
    15e6:	b7 fe       	sbrs	r11, 7
    15e8:	07 c0       	rjmp	.+14     	; 0x15f8 <vfprintf+0x2ac>
    15ea:	60 81       	ld	r22, Z
    15ec:	71 81       	ldd	r23, Z+1	; 0x01
    15ee:	82 81       	ldd	r24, Z+2	; 0x02
    15f0:	93 81       	ldd	r25, Z+3	; 0x03
    15f2:	0c 5f       	subi	r16, 0xFC	; 252
    15f4:	1f 4f       	sbci	r17, 0xFF	; 255
    15f6:	06 c0       	rjmp	.+12     	; 0x1604 <vfprintf+0x2b8>
    15f8:	60 81       	ld	r22, Z
    15fa:	71 81       	ldd	r23, Z+1	; 0x01
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	0e 5f       	subi	r16, 0xFE	; 254
    1602:	1f 4f       	sbci	r17, 0xFF	; 255
    1604:	a3 01       	movw	r20, r6
    1606:	43 d2       	rcall	.+1158   	; 0x1a8e <__ultoa_invert>
    1608:	88 2e       	mov	r8, r24
    160a:	86 18       	sub	r8, r6
    160c:	fb 2d       	mov	r31, r11
    160e:	ff 77       	andi	r31, 0x7F	; 127
    1610:	3f 2e       	mov	r3, r31
    1612:	36 fe       	sbrs	r3, 6
    1614:	0d c0       	rjmp	.+26     	; 0x1630 <vfprintf+0x2e4>
    1616:	23 2d       	mov	r18, r3
    1618:	2e 7f       	andi	r18, 0xFE	; 254
    161a:	a2 2e       	mov	r10, r18
    161c:	89 14       	cp	r8, r9
    161e:	58 f4       	brcc	.+22     	; 0x1636 <vfprintf+0x2ea>
    1620:	34 fe       	sbrs	r3, 4
    1622:	0b c0       	rjmp	.+22     	; 0x163a <vfprintf+0x2ee>
    1624:	32 fc       	sbrc	r3, 2
    1626:	09 c0       	rjmp	.+18     	; 0x163a <vfprintf+0x2ee>
    1628:	83 2d       	mov	r24, r3
    162a:	8e 7e       	andi	r24, 0xEE	; 238
    162c:	a8 2e       	mov	r10, r24
    162e:	05 c0       	rjmp	.+10     	; 0x163a <vfprintf+0x2ee>
    1630:	b8 2c       	mov	r11, r8
    1632:	a3 2c       	mov	r10, r3
    1634:	03 c0       	rjmp	.+6      	; 0x163c <vfprintf+0x2f0>
    1636:	b8 2c       	mov	r11, r8
    1638:	01 c0       	rjmp	.+2      	; 0x163c <vfprintf+0x2f0>
    163a:	b9 2c       	mov	r11, r9
    163c:	a4 fe       	sbrs	r10, 4
    163e:	0f c0       	rjmp	.+30     	; 0x165e <vfprintf+0x312>
    1640:	fe 01       	movw	r30, r28
    1642:	e8 0d       	add	r30, r8
    1644:	f1 1d       	adc	r31, r1
    1646:	80 81       	ld	r24, Z
    1648:	80 33       	cpi	r24, 0x30	; 48
    164a:	21 f4       	brne	.+8      	; 0x1654 <vfprintf+0x308>
    164c:	9a 2d       	mov	r25, r10
    164e:	99 7e       	andi	r25, 0xE9	; 233
    1650:	a9 2e       	mov	r10, r25
    1652:	09 c0       	rjmp	.+18     	; 0x1666 <vfprintf+0x31a>
    1654:	a2 fe       	sbrs	r10, 2
    1656:	06 c0       	rjmp	.+12     	; 0x1664 <vfprintf+0x318>
    1658:	b3 94       	inc	r11
    165a:	b3 94       	inc	r11
    165c:	04 c0       	rjmp	.+8      	; 0x1666 <vfprintf+0x31a>
    165e:	8a 2d       	mov	r24, r10
    1660:	86 78       	andi	r24, 0x86	; 134
    1662:	09 f0       	breq	.+2      	; 0x1666 <vfprintf+0x31a>
    1664:	b3 94       	inc	r11
    1666:	a3 fc       	sbrc	r10, 3
    1668:	10 c0       	rjmp	.+32     	; 0x168a <vfprintf+0x33e>
    166a:	a0 fe       	sbrs	r10, 0
    166c:	06 c0       	rjmp	.+12     	; 0x167a <vfprintf+0x32e>
    166e:	b2 14       	cp	r11, r2
    1670:	80 f4       	brcc	.+32     	; 0x1692 <vfprintf+0x346>
    1672:	28 0c       	add	r2, r8
    1674:	92 2c       	mov	r9, r2
    1676:	9b 18       	sub	r9, r11
    1678:	0d c0       	rjmp	.+26     	; 0x1694 <vfprintf+0x348>
    167a:	b2 14       	cp	r11, r2
    167c:	58 f4       	brcc	.+22     	; 0x1694 <vfprintf+0x348>
    167e:	b6 01       	movw	r22, r12
    1680:	80 e2       	ldi	r24, 0x20	; 32
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	c8 d1       	rcall	.+912    	; 0x1a16 <fputc>
    1686:	b3 94       	inc	r11
    1688:	f8 cf       	rjmp	.-16     	; 0x167a <vfprintf+0x32e>
    168a:	b2 14       	cp	r11, r2
    168c:	18 f4       	brcc	.+6      	; 0x1694 <vfprintf+0x348>
    168e:	2b 18       	sub	r2, r11
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <vfprintf+0x34a>
    1692:	98 2c       	mov	r9, r8
    1694:	21 2c       	mov	r2, r1
    1696:	a4 fe       	sbrs	r10, 4
    1698:	0f c0       	rjmp	.+30     	; 0x16b8 <vfprintf+0x36c>
    169a:	b6 01       	movw	r22, r12
    169c:	80 e3       	ldi	r24, 0x30	; 48
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	ba d1       	rcall	.+884    	; 0x1a16 <fputc>
    16a2:	a2 fe       	sbrs	r10, 2
    16a4:	16 c0       	rjmp	.+44     	; 0x16d2 <vfprintf+0x386>
    16a6:	a1 fc       	sbrc	r10, 1
    16a8:	03 c0       	rjmp	.+6      	; 0x16b0 <vfprintf+0x364>
    16aa:	88 e7       	ldi	r24, 0x78	; 120
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <vfprintf+0x368>
    16b0:	88 e5       	ldi	r24, 0x58	; 88
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	b6 01       	movw	r22, r12
    16b6:	0c c0       	rjmp	.+24     	; 0x16d0 <vfprintf+0x384>
    16b8:	8a 2d       	mov	r24, r10
    16ba:	86 78       	andi	r24, 0x86	; 134
    16bc:	51 f0       	breq	.+20     	; 0x16d2 <vfprintf+0x386>
    16be:	a1 fe       	sbrs	r10, 1
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <vfprintf+0x37a>
    16c2:	8b e2       	ldi	r24, 0x2B	; 43
    16c4:	01 c0       	rjmp	.+2      	; 0x16c8 <vfprintf+0x37c>
    16c6:	80 e2       	ldi	r24, 0x20	; 32
    16c8:	a7 fc       	sbrc	r10, 7
    16ca:	8d e2       	ldi	r24, 0x2D	; 45
    16cc:	b6 01       	movw	r22, r12
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	a2 d1       	rcall	.+836    	; 0x1a16 <fputc>
    16d2:	89 14       	cp	r8, r9
    16d4:	30 f4       	brcc	.+12     	; 0x16e2 <vfprintf+0x396>
    16d6:	b6 01       	movw	r22, r12
    16d8:	80 e3       	ldi	r24, 0x30	; 48
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	9c d1       	rcall	.+824    	; 0x1a16 <fputc>
    16de:	9a 94       	dec	r9
    16e0:	f8 cf       	rjmp	.-16     	; 0x16d2 <vfprintf+0x386>
    16e2:	8a 94       	dec	r8
    16e4:	f3 01       	movw	r30, r6
    16e6:	e8 0d       	add	r30, r8
    16e8:	f1 1d       	adc	r31, r1
    16ea:	80 81       	ld	r24, Z
    16ec:	b6 01       	movw	r22, r12
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	92 d1       	rcall	.+804    	; 0x1a16 <fputc>
    16f2:	81 10       	cpse	r8, r1
    16f4:	f6 cf       	rjmp	.-20     	; 0x16e2 <vfprintf+0x396>
    16f6:	22 20       	and	r2, r2
    16f8:	09 f4       	brne	.+2      	; 0x16fc <vfprintf+0x3b0>
    16fa:	4e ce       	rjmp	.-868    	; 0x1398 <vfprintf+0x4c>
    16fc:	b6 01       	movw	r22, r12
    16fe:	80 e2       	ldi	r24, 0x20	; 32
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	89 d1       	rcall	.+786    	; 0x1a16 <fputc>
    1704:	2a 94       	dec	r2
    1706:	f7 cf       	rjmp	.-18     	; 0x16f6 <vfprintf+0x3aa>
    1708:	f6 01       	movw	r30, r12
    170a:	86 81       	ldd	r24, Z+6	; 0x06
    170c:	97 81       	ldd	r25, Z+7	; 0x07
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <vfprintf+0x3c8>
    1710:	8f ef       	ldi	r24, 0xFF	; 255
    1712:	9f ef       	ldi	r25, 0xFF	; 255
    1714:	2b 96       	adiw	r28, 0x0b	; 11
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	1f 91       	pop	r17
    1726:	0f 91       	pop	r16
    1728:	ff 90       	pop	r15
    172a:	ef 90       	pop	r14
    172c:	df 90       	pop	r13
    172e:	cf 90       	pop	r12
    1730:	bf 90       	pop	r11
    1732:	af 90       	pop	r10
    1734:	9f 90       	pop	r9
    1736:	8f 90       	pop	r8
    1738:	7f 90       	pop	r7
    173a:	6f 90       	pop	r6
    173c:	5f 90       	pop	r5
    173e:	4f 90       	pop	r4
    1740:	3f 90       	pop	r3
    1742:	2f 90       	pop	r2
    1744:	08 95       	ret

00001746 <calloc>:
    1746:	0f 93       	push	r16
    1748:	1f 93       	push	r17
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	86 9f       	mul	r24, r22
    1750:	80 01       	movw	r16, r0
    1752:	87 9f       	mul	r24, r23
    1754:	10 0d       	add	r17, r0
    1756:	96 9f       	mul	r25, r22
    1758:	10 0d       	add	r17, r0
    175a:	11 24       	eor	r1, r1
    175c:	c8 01       	movw	r24, r16
    175e:	0d d0       	rcall	.+26     	; 0x177a <malloc>
    1760:	ec 01       	movw	r28, r24
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	21 f0       	breq	.+8      	; 0x176e <calloc+0x28>
    1766:	a8 01       	movw	r20, r16
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	32 d1       	rcall	.+612    	; 0x19d2 <memset>
    176e:	ce 01       	movw	r24, r28
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	1f 91       	pop	r17
    1776:	0f 91       	pop	r16
    1778:	08 95       	ret

0000177a <malloc>:
    177a:	0f 93       	push	r16
    177c:	1f 93       	push	r17
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	82 30       	cpi	r24, 0x02	; 2
    1784:	91 05       	cpc	r25, r1
    1786:	10 f4       	brcc	.+4      	; 0x178c <malloc+0x12>
    1788:	82 e0       	ldi	r24, 0x02	; 2
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	e0 91 63 04 	lds	r30, 0x0463	; 0x800463 <__flp>
    1790:	f0 91 64 04 	lds	r31, 0x0464	; 0x800464 <__flp+0x1>
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	a0 e0       	ldi	r26, 0x00	; 0
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	30 97       	sbiw	r30, 0x00	; 0
    179e:	19 f1       	breq	.+70     	; 0x17e6 <malloc+0x6c>
    17a0:	40 81       	ld	r20, Z
    17a2:	51 81       	ldd	r21, Z+1	; 0x01
    17a4:	02 81       	ldd	r16, Z+2	; 0x02
    17a6:	13 81       	ldd	r17, Z+3	; 0x03
    17a8:	48 17       	cp	r20, r24
    17aa:	59 07       	cpc	r21, r25
    17ac:	c8 f0       	brcs	.+50     	; 0x17e0 <malloc+0x66>
    17ae:	84 17       	cp	r24, r20
    17b0:	95 07       	cpc	r25, r21
    17b2:	69 f4       	brne	.+26     	; 0x17ce <malloc+0x54>
    17b4:	10 97       	sbiw	r26, 0x00	; 0
    17b6:	31 f0       	breq	.+12     	; 0x17c4 <malloc+0x4a>
    17b8:	12 96       	adiw	r26, 0x02	; 2
    17ba:	0c 93       	st	X, r16
    17bc:	12 97       	sbiw	r26, 0x02	; 2
    17be:	13 96       	adiw	r26, 0x03	; 3
    17c0:	1c 93       	st	X, r17
    17c2:	27 c0       	rjmp	.+78     	; 0x1812 <malloc+0x98>
    17c4:	00 93 63 04 	sts	0x0463, r16	; 0x800463 <__flp>
    17c8:	10 93 64 04 	sts	0x0464, r17	; 0x800464 <__flp+0x1>
    17cc:	22 c0       	rjmp	.+68     	; 0x1812 <malloc+0x98>
    17ce:	21 15       	cp	r18, r1
    17d0:	31 05       	cpc	r19, r1
    17d2:	19 f0       	breq	.+6      	; 0x17da <malloc+0x60>
    17d4:	42 17       	cp	r20, r18
    17d6:	53 07       	cpc	r21, r19
    17d8:	18 f4       	brcc	.+6      	; 0x17e0 <malloc+0x66>
    17da:	9a 01       	movw	r18, r20
    17dc:	bd 01       	movw	r22, r26
    17de:	ef 01       	movw	r28, r30
    17e0:	df 01       	movw	r26, r30
    17e2:	f8 01       	movw	r30, r16
    17e4:	db cf       	rjmp	.-74     	; 0x179c <malloc+0x22>
    17e6:	21 15       	cp	r18, r1
    17e8:	31 05       	cpc	r19, r1
    17ea:	f9 f0       	breq	.+62     	; 0x182a <malloc+0xb0>
    17ec:	28 1b       	sub	r18, r24
    17ee:	39 0b       	sbc	r19, r25
    17f0:	24 30       	cpi	r18, 0x04	; 4
    17f2:	31 05       	cpc	r19, r1
    17f4:	80 f4       	brcc	.+32     	; 0x1816 <malloc+0x9c>
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	9b 81       	ldd	r25, Y+3	; 0x03
    17fa:	61 15       	cp	r22, r1
    17fc:	71 05       	cpc	r23, r1
    17fe:	21 f0       	breq	.+8      	; 0x1808 <malloc+0x8e>
    1800:	fb 01       	movw	r30, r22
    1802:	93 83       	std	Z+3, r25	; 0x03
    1804:	82 83       	std	Z+2, r24	; 0x02
    1806:	04 c0       	rjmp	.+8      	; 0x1810 <malloc+0x96>
    1808:	90 93 64 04 	sts	0x0464, r25	; 0x800464 <__flp+0x1>
    180c:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <__flp>
    1810:	fe 01       	movw	r30, r28
    1812:	32 96       	adiw	r30, 0x02	; 2
    1814:	44 c0       	rjmp	.+136    	; 0x189e <malloc+0x124>
    1816:	fe 01       	movw	r30, r28
    1818:	e2 0f       	add	r30, r18
    181a:	f3 1f       	adc	r31, r19
    181c:	81 93       	st	Z+, r24
    181e:	91 93       	st	Z+, r25
    1820:	22 50       	subi	r18, 0x02	; 2
    1822:	31 09       	sbc	r19, r1
    1824:	39 83       	std	Y+1, r19	; 0x01
    1826:	28 83       	st	Y, r18
    1828:	3a c0       	rjmp	.+116    	; 0x189e <malloc+0x124>
    182a:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <__brkval>
    182e:	30 91 62 04 	lds	r19, 0x0462	; 0x800462 <__brkval+0x1>
    1832:	23 2b       	or	r18, r19
    1834:	41 f4       	brne	.+16     	; 0x1846 <malloc+0xcc>
    1836:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    183a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    183e:	30 93 62 04 	sts	0x0462, r19	; 0x800462 <__brkval+0x1>
    1842:	20 93 61 04 	sts	0x0461, r18	; 0x800461 <__brkval>
    1846:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    184a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    184e:	21 15       	cp	r18, r1
    1850:	31 05       	cpc	r19, r1
    1852:	41 f4       	brne	.+16     	; 0x1864 <malloc+0xea>
    1854:	2d b7       	in	r18, 0x3d	; 61
    1856:	3e b7       	in	r19, 0x3e	; 62
    1858:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    185c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1860:	24 1b       	sub	r18, r20
    1862:	35 0b       	sbc	r19, r21
    1864:	e0 91 61 04 	lds	r30, 0x0461	; 0x800461 <__brkval>
    1868:	f0 91 62 04 	lds	r31, 0x0462	; 0x800462 <__brkval+0x1>
    186c:	e2 17       	cp	r30, r18
    186e:	f3 07       	cpc	r31, r19
    1870:	a0 f4       	brcc	.+40     	; 0x189a <malloc+0x120>
    1872:	2e 1b       	sub	r18, r30
    1874:	3f 0b       	sbc	r19, r31
    1876:	28 17       	cp	r18, r24
    1878:	39 07       	cpc	r19, r25
    187a:	78 f0       	brcs	.+30     	; 0x189a <malloc+0x120>
    187c:	ac 01       	movw	r20, r24
    187e:	4e 5f       	subi	r20, 0xFE	; 254
    1880:	5f 4f       	sbci	r21, 0xFF	; 255
    1882:	24 17       	cp	r18, r20
    1884:	35 07       	cpc	r19, r21
    1886:	48 f0       	brcs	.+18     	; 0x189a <malloc+0x120>
    1888:	4e 0f       	add	r20, r30
    188a:	5f 1f       	adc	r21, r31
    188c:	50 93 62 04 	sts	0x0462, r21	; 0x800462 <__brkval+0x1>
    1890:	40 93 61 04 	sts	0x0461, r20	; 0x800461 <__brkval>
    1894:	81 93       	st	Z+, r24
    1896:	91 93       	st	Z+, r25
    1898:	02 c0       	rjmp	.+4      	; 0x189e <malloc+0x124>
    189a:	e0 e0       	ldi	r30, 0x00	; 0
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	cf 01       	movw	r24, r30
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	1f 91       	pop	r17
    18a6:	0f 91       	pop	r16
    18a8:	08 95       	ret

000018aa <free>:
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <free+0xa>
    18b2:	81 c0       	rjmp	.+258    	; 0x19b6 <free+0x10c>
    18b4:	fc 01       	movw	r30, r24
    18b6:	32 97       	sbiw	r30, 0x02	; 2
    18b8:	13 82       	std	Z+3, r1	; 0x03
    18ba:	12 82       	std	Z+2, r1	; 0x02
    18bc:	a0 91 63 04 	lds	r26, 0x0463	; 0x800463 <__flp>
    18c0:	b0 91 64 04 	lds	r27, 0x0464	; 0x800464 <__flp+0x1>
    18c4:	10 97       	sbiw	r26, 0x00	; 0
    18c6:	81 f4       	brne	.+32     	; 0x18e8 <free+0x3e>
    18c8:	20 81       	ld	r18, Z
    18ca:	31 81       	ldd	r19, Z+1	; 0x01
    18cc:	82 0f       	add	r24, r18
    18ce:	93 1f       	adc	r25, r19
    18d0:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <__brkval>
    18d4:	30 91 62 04 	lds	r19, 0x0462	; 0x800462 <__brkval+0x1>
    18d8:	28 17       	cp	r18, r24
    18da:	39 07       	cpc	r19, r25
    18dc:	51 f5       	brne	.+84     	; 0x1932 <free+0x88>
    18de:	f0 93 62 04 	sts	0x0462, r31	; 0x800462 <__brkval+0x1>
    18e2:	e0 93 61 04 	sts	0x0461, r30	; 0x800461 <__brkval>
    18e6:	67 c0       	rjmp	.+206    	; 0x19b6 <free+0x10c>
    18e8:	ed 01       	movw	r28, r26
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	ce 17       	cp	r28, r30
    18f0:	df 07       	cpc	r29, r31
    18f2:	40 f4       	brcc	.+16     	; 0x1904 <free+0x5a>
    18f4:	4a 81       	ldd	r20, Y+2	; 0x02
    18f6:	5b 81       	ldd	r21, Y+3	; 0x03
    18f8:	9e 01       	movw	r18, r28
    18fa:	41 15       	cp	r20, r1
    18fc:	51 05       	cpc	r21, r1
    18fe:	f1 f0       	breq	.+60     	; 0x193c <free+0x92>
    1900:	ea 01       	movw	r28, r20
    1902:	f5 cf       	rjmp	.-22     	; 0x18ee <free+0x44>
    1904:	d3 83       	std	Z+3, r29	; 0x03
    1906:	c2 83       	std	Z+2, r28	; 0x02
    1908:	40 81       	ld	r20, Z
    190a:	51 81       	ldd	r21, Z+1	; 0x01
    190c:	84 0f       	add	r24, r20
    190e:	95 1f       	adc	r25, r21
    1910:	c8 17       	cp	r28, r24
    1912:	d9 07       	cpc	r29, r25
    1914:	59 f4       	brne	.+22     	; 0x192c <free+0x82>
    1916:	88 81       	ld	r24, Y
    1918:	99 81       	ldd	r25, Y+1	; 0x01
    191a:	84 0f       	add	r24, r20
    191c:	95 1f       	adc	r25, r21
    191e:	02 96       	adiw	r24, 0x02	; 2
    1920:	91 83       	std	Z+1, r25	; 0x01
    1922:	80 83       	st	Z, r24
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	9b 81       	ldd	r25, Y+3	; 0x03
    1928:	93 83       	std	Z+3, r25	; 0x03
    192a:	82 83       	std	Z+2, r24	; 0x02
    192c:	21 15       	cp	r18, r1
    192e:	31 05       	cpc	r19, r1
    1930:	29 f4       	brne	.+10     	; 0x193c <free+0x92>
    1932:	f0 93 64 04 	sts	0x0464, r31	; 0x800464 <__flp+0x1>
    1936:	e0 93 63 04 	sts	0x0463, r30	; 0x800463 <__flp>
    193a:	3d c0       	rjmp	.+122    	; 0x19b6 <free+0x10c>
    193c:	e9 01       	movw	r28, r18
    193e:	fb 83       	std	Y+3, r31	; 0x03
    1940:	ea 83       	std	Y+2, r30	; 0x02
    1942:	49 91       	ld	r20, Y+
    1944:	59 91       	ld	r21, Y+
    1946:	c4 0f       	add	r28, r20
    1948:	d5 1f       	adc	r29, r21
    194a:	ec 17       	cp	r30, r28
    194c:	fd 07       	cpc	r31, r29
    194e:	61 f4       	brne	.+24     	; 0x1968 <free+0xbe>
    1950:	80 81       	ld	r24, Z
    1952:	91 81       	ldd	r25, Z+1	; 0x01
    1954:	84 0f       	add	r24, r20
    1956:	95 1f       	adc	r25, r21
    1958:	02 96       	adiw	r24, 0x02	; 2
    195a:	e9 01       	movw	r28, r18
    195c:	99 83       	std	Y+1, r25	; 0x01
    195e:	88 83       	st	Y, r24
    1960:	82 81       	ldd	r24, Z+2	; 0x02
    1962:	93 81       	ldd	r25, Z+3	; 0x03
    1964:	9b 83       	std	Y+3, r25	; 0x03
    1966:	8a 83       	std	Y+2, r24	; 0x02
    1968:	e0 e0       	ldi	r30, 0x00	; 0
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	12 96       	adiw	r26, 0x02	; 2
    196e:	8d 91       	ld	r24, X+
    1970:	9c 91       	ld	r25, X
    1972:	13 97       	sbiw	r26, 0x03	; 3
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	19 f0       	breq	.+6      	; 0x197e <free+0xd4>
    1978:	fd 01       	movw	r30, r26
    197a:	dc 01       	movw	r26, r24
    197c:	f7 cf       	rjmp	.-18     	; 0x196c <free+0xc2>
    197e:	8d 91       	ld	r24, X+
    1980:	9c 91       	ld	r25, X
    1982:	11 97       	sbiw	r26, 0x01	; 1
    1984:	9d 01       	movw	r18, r26
    1986:	2e 5f       	subi	r18, 0xFE	; 254
    1988:	3f 4f       	sbci	r19, 0xFF	; 255
    198a:	82 0f       	add	r24, r18
    198c:	93 1f       	adc	r25, r19
    198e:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <__brkval>
    1992:	30 91 62 04 	lds	r19, 0x0462	; 0x800462 <__brkval+0x1>
    1996:	28 17       	cp	r18, r24
    1998:	39 07       	cpc	r19, r25
    199a:	69 f4       	brne	.+26     	; 0x19b6 <free+0x10c>
    199c:	30 97       	sbiw	r30, 0x00	; 0
    199e:	29 f4       	brne	.+10     	; 0x19aa <free+0x100>
    19a0:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <__flp+0x1>
    19a4:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <__flp>
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <free+0x104>
    19aa:	13 82       	std	Z+3, r1	; 0x03
    19ac:	12 82       	std	Z+2, r1	; 0x02
    19ae:	b0 93 62 04 	sts	0x0462, r27	; 0x800462 <__brkval+0x1>
    19b2:	a0 93 61 04 	sts	0x0461, r26	; 0x800461 <__brkval>
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	08 95       	ret

000019bc <strnlen_P>:
    19bc:	fc 01       	movw	r30, r24
    19be:	05 90       	lpm	r0, Z+
    19c0:	61 50       	subi	r22, 0x01	; 1
    19c2:	70 40       	sbci	r23, 0x00	; 0
    19c4:	01 10       	cpse	r0, r1
    19c6:	d8 f7       	brcc	.-10     	; 0x19be <strnlen_P+0x2>
    19c8:	80 95       	com	r24
    19ca:	90 95       	com	r25
    19cc:	8e 0f       	add	r24, r30
    19ce:	9f 1f       	adc	r25, r31
    19d0:	08 95       	ret

000019d2 <memset>:
    19d2:	dc 01       	movw	r26, r24
    19d4:	01 c0       	rjmp	.+2      	; 0x19d8 <memset+0x6>
    19d6:	6d 93       	st	X+, r22
    19d8:	41 50       	subi	r20, 0x01	; 1
    19da:	50 40       	sbci	r21, 0x00	; 0
    19dc:	e0 f7       	brcc	.-8      	; 0x19d6 <memset+0x4>
    19de:	08 95       	ret

000019e0 <strnlen>:
    19e0:	fc 01       	movw	r30, r24
    19e2:	61 50       	subi	r22, 0x01	; 1
    19e4:	70 40       	sbci	r23, 0x00	; 0
    19e6:	01 90       	ld	r0, Z+
    19e8:	01 10       	cpse	r0, r1
    19ea:	d8 f7       	brcc	.-10     	; 0x19e2 <strnlen+0x2>
    19ec:	80 95       	com	r24
    19ee:	90 95       	com	r25
    19f0:	8e 0f       	add	r24, r30
    19f2:	9f 1f       	adc	r25, r31
    19f4:	08 95       	ret

000019f6 <strrev>:
    19f6:	dc 01       	movw	r26, r24
    19f8:	fc 01       	movw	r30, r24
    19fa:	67 2f       	mov	r22, r23
    19fc:	71 91       	ld	r23, Z+
    19fe:	77 23       	and	r23, r23
    1a00:	e1 f7       	brne	.-8      	; 0x19fa <strrev+0x4>
    1a02:	32 97       	sbiw	r30, 0x02	; 2
    1a04:	04 c0       	rjmp	.+8      	; 0x1a0e <strrev+0x18>
    1a06:	7c 91       	ld	r23, X
    1a08:	6d 93       	st	X+, r22
    1a0a:	70 83       	st	Z, r23
    1a0c:	62 91       	ld	r22, -Z
    1a0e:	ae 17       	cp	r26, r30
    1a10:	bf 07       	cpc	r27, r31
    1a12:	c8 f3       	brcs	.-14     	; 0x1a06 <strrev+0x10>
    1a14:	08 95       	ret

00001a16 <fputc>:
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	fb 01       	movw	r30, r22
    1a20:	23 81       	ldd	r18, Z+3	; 0x03
    1a22:	21 fd       	sbrc	r18, 1
    1a24:	03 c0       	rjmp	.+6      	; 0x1a2c <fputc+0x16>
    1a26:	8f ef       	ldi	r24, 0xFF	; 255
    1a28:	9f ef       	ldi	r25, 0xFF	; 255
    1a2a:	2c c0       	rjmp	.+88     	; 0x1a84 <fputc+0x6e>
    1a2c:	22 ff       	sbrs	r18, 2
    1a2e:	16 c0       	rjmp	.+44     	; 0x1a5c <fputc+0x46>
    1a30:	46 81       	ldd	r20, Z+6	; 0x06
    1a32:	57 81       	ldd	r21, Z+7	; 0x07
    1a34:	24 81       	ldd	r18, Z+4	; 0x04
    1a36:	35 81       	ldd	r19, Z+5	; 0x05
    1a38:	42 17       	cp	r20, r18
    1a3a:	53 07       	cpc	r21, r19
    1a3c:	44 f4       	brge	.+16     	; 0x1a4e <fputc+0x38>
    1a3e:	a0 81       	ld	r26, Z
    1a40:	b1 81       	ldd	r27, Z+1	; 0x01
    1a42:	9d 01       	movw	r18, r26
    1a44:	2f 5f       	subi	r18, 0xFF	; 255
    1a46:	3f 4f       	sbci	r19, 0xFF	; 255
    1a48:	31 83       	std	Z+1, r19	; 0x01
    1a4a:	20 83       	st	Z, r18
    1a4c:	8c 93       	st	X, r24
    1a4e:	26 81       	ldd	r18, Z+6	; 0x06
    1a50:	37 81       	ldd	r19, Z+7	; 0x07
    1a52:	2f 5f       	subi	r18, 0xFF	; 255
    1a54:	3f 4f       	sbci	r19, 0xFF	; 255
    1a56:	37 83       	std	Z+7, r19	; 0x07
    1a58:	26 83       	std	Z+6, r18	; 0x06
    1a5a:	14 c0       	rjmp	.+40     	; 0x1a84 <fputc+0x6e>
    1a5c:	8b 01       	movw	r16, r22
    1a5e:	ec 01       	movw	r28, r24
    1a60:	fb 01       	movw	r30, r22
    1a62:	00 84       	ldd	r0, Z+8	; 0x08
    1a64:	f1 85       	ldd	r31, Z+9	; 0x09
    1a66:	e0 2d       	mov	r30, r0
    1a68:	19 95       	eicall
    1a6a:	89 2b       	or	r24, r25
    1a6c:	e1 f6       	brne	.-72     	; 0x1a26 <fputc+0x10>
    1a6e:	d8 01       	movw	r26, r16
    1a70:	16 96       	adiw	r26, 0x06	; 6
    1a72:	8d 91       	ld	r24, X+
    1a74:	9c 91       	ld	r25, X
    1a76:	17 97       	sbiw	r26, 0x07	; 7
    1a78:	01 96       	adiw	r24, 0x01	; 1
    1a7a:	17 96       	adiw	r26, 0x07	; 7
    1a7c:	9c 93       	st	X, r25
    1a7e:	8e 93       	st	-X, r24
    1a80:	16 97       	sbiw	r26, 0x06	; 6
    1a82:	ce 01       	movw	r24, r28
    1a84:	df 91       	pop	r29
    1a86:	cf 91       	pop	r28
    1a88:	1f 91       	pop	r17
    1a8a:	0f 91       	pop	r16
    1a8c:	08 95       	ret

00001a8e <__ultoa_invert>:
    1a8e:	fa 01       	movw	r30, r20
    1a90:	aa 27       	eor	r26, r26
    1a92:	28 30       	cpi	r18, 0x08	; 8
    1a94:	51 f1       	breq	.+84     	; 0x1aea <__ultoa_invert+0x5c>
    1a96:	20 31       	cpi	r18, 0x10	; 16
    1a98:	81 f1       	breq	.+96     	; 0x1afa <__ultoa_invert+0x6c>
    1a9a:	e8 94       	clt
    1a9c:	6f 93       	push	r22
    1a9e:	6e 7f       	andi	r22, 0xFE	; 254
    1aa0:	6e 5f       	subi	r22, 0xFE	; 254
    1aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa4:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa8:	af 4f       	sbci	r26, 0xFF	; 255
    1aaa:	b1 e0       	ldi	r27, 0x01	; 1
    1aac:	3e d0       	rcall	.+124    	; 0x1b2a <__ultoa_invert+0x9c>
    1aae:	b4 e0       	ldi	r27, 0x04	; 4
    1ab0:	3c d0       	rcall	.+120    	; 0x1b2a <__ultoa_invert+0x9c>
    1ab2:	67 0f       	add	r22, r23
    1ab4:	78 1f       	adc	r23, r24
    1ab6:	89 1f       	adc	r24, r25
    1ab8:	9a 1f       	adc	r25, r26
    1aba:	a1 1d       	adc	r26, r1
    1abc:	68 0f       	add	r22, r24
    1abe:	79 1f       	adc	r23, r25
    1ac0:	8a 1f       	adc	r24, r26
    1ac2:	91 1d       	adc	r25, r1
    1ac4:	a1 1d       	adc	r26, r1
    1ac6:	6a 0f       	add	r22, r26
    1ac8:	71 1d       	adc	r23, r1
    1aca:	81 1d       	adc	r24, r1
    1acc:	91 1d       	adc	r25, r1
    1ace:	a1 1d       	adc	r26, r1
    1ad0:	20 d0       	rcall	.+64     	; 0x1b12 <__ultoa_invert+0x84>
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <__ultoa_invert+0x48>
    1ad4:	68 94       	set
    1ad6:	3f 91       	pop	r19
    1ad8:	2a e0       	ldi	r18, 0x0A	; 10
    1ada:	26 9f       	mul	r18, r22
    1adc:	11 24       	eor	r1, r1
    1ade:	30 19       	sub	r19, r0
    1ae0:	30 5d       	subi	r19, 0xD0	; 208
    1ae2:	31 93       	st	Z+, r19
    1ae4:	de f6       	brtc	.-74     	; 0x1a9c <__ultoa_invert+0xe>
    1ae6:	cf 01       	movw	r24, r30
    1ae8:	08 95       	ret
    1aea:	46 2f       	mov	r20, r22
    1aec:	47 70       	andi	r20, 0x07	; 7
    1aee:	40 5d       	subi	r20, 0xD0	; 208
    1af0:	41 93       	st	Z+, r20
    1af2:	b3 e0       	ldi	r27, 0x03	; 3
    1af4:	0f d0       	rcall	.+30     	; 0x1b14 <__ultoa_invert+0x86>
    1af6:	c9 f7       	brne	.-14     	; 0x1aea <__ultoa_invert+0x5c>
    1af8:	f6 cf       	rjmp	.-20     	; 0x1ae6 <__ultoa_invert+0x58>
    1afa:	46 2f       	mov	r20, r22
    1afc:	4f 70       	andi	r20, 0x0F	; 15
    1afe:	40 5d       	subi	r20, 0xD0	; 208
    1b00:	4a 33       	cpi	r20, 0x3A	; 58
    1b02:	18 f0       	brcs	.+6      	; 0x1b0a <__ultoa_invert+0x7c>
    1b04:	49 5d       	subi	r20, 0xD9	; 217
    1b06:	31 fd       	sbrc	r19, 1
    1b08:	40 52       	subi	r20, 0x20	; 32
    1b0a:	41 93       	st	Z+, r20
    1b0c:	02 d0       	rcall	.+4      	; 0x1b12 <__ultoa_invert+0x84>
    1b0e:	a9 f7       	brne	.-22     	; 0x1afa <__ultoa_invert+0x6c>
    1b10:	ea cf       	rjmp	.-44     	; 0x1ae6 <__ultoa_invert+0x58>
    1b12:	b4 e0       	ldi	r27, 0x04	; 4
    1b14:	a6 95       	lsr	r26
    1b16:	97 95       	ror	r25
    1b18:	87 95       	ror	r24
    1b1a:	77 95       	ror	r23
    1b1c:	67 95       	ror	r22
    1b1e:	ba 95       	dec	r27
    1b20:	c9 f7       	brne	.-14     	; 0x1b14 <__ultoa_invert+0x86>
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	61 05       	cpc	r22, r1
    1b26:	71 05       	cpc	r23, r1
    1b28:	08 95       	ret
    1b2a:	9b 01       	movw	r18, r22
    1b2c:	ac 01       	movw	r20, r24
    1b2e:	0a 2e       	mov	r0, r26
    1b30:	06 94       	lsr	r0
    1b32:	57 95       	ror	r21
    1b34:	47 95       	ror	r20
    1b36:	37 95       	ror	r19
    1b38:	27 95       	ror	r18
    1b3a:	ba 95       	dec	r27
    1b3c:	c9 f7       	brne	.-14     	; 0x1b30 <__ultoa_invert+0xa2>
    1b3e:	62 0f       	add	r22, r18
    1b40:	73 1f       	adc	r23, r19
    1b42:	84 1f       	adc	r24, r20
    1b44:	95 1f       	adc	r25, r21
    1b46:	a0 1d       	adc	r26, r0
    1b48:	08 95       	ret

00001b4a <_exit>:
    1b4a:	f8 94       	cli

00001b4c <__stop_program>:
    1b4c:	ff cf       	rjmp	.-2      	; 0x1b4c <__stop_program>
