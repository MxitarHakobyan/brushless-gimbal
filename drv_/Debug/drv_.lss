
drv_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800200  00001b50  00001be4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800256  00800256  00001c3a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002502  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001346  00000000  00000000  00004392  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f8e  00000000  00000000  000056d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f0  00000000  00000000  00006668  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a81  00000000  00000000  00006b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000163c  00000000  00000000  000075d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00008c15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	80 c0       	rjmp	.+256    	; 0x102 <__ctors_end>
       2:	00 00       	nop
       4:	9e c0       	rjmp	.+316    	; 0x142 <__bad_interrupt>
       6:	00 00       	nop
       8:	9c c0       	rjmp	.+312    	; 0x142 <__bad_interrupt>
       a:	00 00       	nop
       c:	9a c0       	rjmp	.+308    	; 0x142 <__bad_interrupt>
       e:	00 00       	nop
      10:	98 c0       	rjmp	.+304    	; 0x142 <__bad_interrupt>
      12:	00 00       	nop
      14:	96 c0       	rjmp	.+300    	; 0x142 <__bad_interrupt>
      16:	00 00       	nop
      18:	94 c0       	rjmp	.+296    	; 0x142 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	92 c0       	rjmp	.+292    	; 0x142 <__bad_interrupt>
      1e:	00 00       	nop
      20:	90 c0       	rjmp	.+288    	; 0x142 <__bad_interrupt>
      22:	00 00       	nop
      24:	8e c0       	rjmp	.+284    	; 0x142 <__bad_interrupt>
      26:	00 00       	nop
      28:	8c c0       	rjmp	.+280    	; 0x142 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8a c0       	rjmp	.+276    	; 0x142 <__bad_interrupt>
      2e:	00 00       	nop
      30:	88 c0       	rjmp	.+272    	; 0x142 <__bad_interrupt>
      32:	00 00       	nop
      34:	86 c0       	rjmp	.+268    	; 0x142 <__bad_interrupt>
      36:	00 00       	nop
      38:	84 c0       	rjmp	.+264    	; 0x142 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	82 c0       	rjmp	.+260    	; 0x142 <__bad_interrupt>
      3e:	00 00       	nop
      40:	80 c0       	rjmp	.+256    	; 0x142 <__bad_interrupt>
      42:	00 00       	nop
      44:	7e c0       	rjmp	.+252    	; 0x142 <__bad_interrupt>
      46:	00 00       	nop
      48:	7c c0       	rjmp	.+248    	; 0x142 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7a c0       	rjmp	.+244    	; 0x142 <__bad_interrupt>
      4e:	00 00       	nop
      50:	78 c0       	rjmp	.+240    	; 0x142 <__bad_interrupt>
      52:	00 00       	nop
      54:	76 c0       	rjmp	.+236    	; 0x142 <__bad_interrupt>
      56:	00 00       	nop
      58:	74 c0       	rjmp	.+232    	; 0x142 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	72 c0       	rjmp	.+228    	; 0x142 <__bad_interrupt>
      5e:	00 00       	nop
      60:	70 c0       	rjmp	.+224    	; 0x142 <__bad_interrupt>
      62:	00 00       	nop
      64:	6e c0       	rjmp	.+220    	; 0x142 <__bad_interrupt>
      66:	00 00       	nop
      68:	6c c0       	rjmp	.+216    	; 0x142 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6a c0       	rjmp	.+212    	; 0x142 <__bad_interrupt>
      6e:	00 00       	nop
      70:	68 c0       	rjmp	.+208    	; 0x142 <__bad_interrupt>
      72:	00 00       	nop
      74:	66 c0       	rjmp	.+204    	; 0x142 <__bad_interrupt>
      76:	00 00       	nop
      78:	64 c0       	rjmp	.+200    	; 0x142 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	62 c0       	rjmp	.+196    	; 0x142 <__bad_interrupt>
      7e:	00 00       	nop
      80:	81 c0       	rjmp	.+258    	; 0x184 <__vector_32>
      82:	00 00       	nop
      84:	5e c0       	rjmp	.+188    	; 0x142 <__bad_interrupt>
      86:	00 00       	nop
      88:	5c c0       	rjmp	.+184    	; 0x142 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5a c0       	rjmp	.+180    	; 0x142 <__bad_interrupt>
      8e:	00 00       	nop
      90:	58 c0       	rjmp	.+176    	; 0x142 <__bad_interrupt>
      92:	00 00       	nop
      94:	56 c0       	rjmp	.+172    	; 0x142 <__bad_interrupt>
      96:	00 00       	nop
      98:	54 c0       	rjmp	.+168    	; 0x142 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	52 c0       	rjmp	.+164    	; 0x142 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	50 c0       	rjmp	.+160    	; 0x142 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4e c0       	rjmp	.+156    	; 0x142 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4c c0       	rjmp	.+152    	; 0x142 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4a c0       	rjmp	.+148    	; 0x142 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	48 c0       	rjmp	.+144    	; 0x142 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	46 c0       	rjmp	.+140    	; 0x142 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	44 c0       	rjmp	.+136    	; 0x142 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	42 c0       	rjmp	.+132    	; 0x142 <__bad_interrupt>
      be:	00 00       	nop
      c0:	40 c0       	rjmp	.+128    	; 0x142 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3e c0       	rjmp	.+124    	; 0x142 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3c c0       	rjmp	.+120    	; 0x142 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3a c0       	rjmp	.+116    	; 0x142 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	38 c0       	rjmp	.+112    	; 0x142 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	36 c0       	rjmp	.+108    	; 0x142 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	34 c0       	rjmp	.+104    	; 0x142 <__bad_interrupt>
      da:	00 00       	nop
      dc:	32 c0       	rjmp	.+100    	; 0x142 <__bad_interrupt>
      de:	00 00       	nop
      e0:	30 c0       	rjmp	.+96     	; 0x142 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	05 a8       	ldd	r0, Z+53	; 0x35
      e6:	4c cd       	rjmp	.-1384   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
      e8:	b2 d4       	rcall	.+2404   	; 0xa4e <mpu6050_getRawData+0x6c>
      ea:	4e b9       	out	0x0e, r20	; 14
      ec:	38 36       	cpi	r19, 0x68	; 104
      ee:	a9 02       	muls	r26, r25
      f0:	0c 50       	subi	r16, 0x0C	; 12
      f2:	b9 91       	ld	r27, Y+
      f4:	86 88       	ldd	r8, Z+22	; 0x16
      f6:	08 3c       	cpi	r16, 0xC8	; 200
      f8:	a6 aa       	std	Z+54, r10	; 0x36
      fa:	aa 2a       	or	r10, r26
      fc:	be 00       	.word	0x00be	; ????
      fe:	00 00       	nop
     100:	80 3f       	cpi	r24, 0xF0	; 240

00000102 <__ctors_end>:
     102:	11 24       	eor	r1, r1
     104:	1f be       	out	0x3f, r1	; 63
     106:	cf ef       	ldi	r28, 0xFF	; 255
     108:	d1 e2       	ldi	r29, 0x21	; 33
     10a:	de bf       	out	0x3e, r29	; 62
     10c:	cd bf       	out	0x3d, r28	; 61
     10e:	00 e0       	ldi	r16, 0x00	; 0
     110:	0c bf       	out	0x3c, r16	; 60

00000112 <__do_copy_data>:
     112:	12 e0       	ldi	r17, 0x02	; 2
     114:	a0 e0       	ldi	r26, 0x00	; 0
     116:	b2 e0       	ldi	r27, 0x02	; 2
     118:	e0 e5       	ldi	r30, 0x50	; 80
     11a:	fb e1       	ldi	r31, 0x1B	; 27
     11c:	00 e0       	ldi	r16, 0x00	; 0
     11e:	0b bf       	out	0x3b, r16	; 59
     120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x14>
     122:	07 90       	elpm	r0, Z+
     124:	0d 92       	st	X+, r0
     126:	a6 35       	cpi	r26, 0x56	; 86
     128:	b1 07       	cpc	r27, r17
     12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0x10>

0000012c <__do_clear_bss>:
     12c:	22 e0       	ldi	r18, 0x02	; 2
     12e:	a6 e5       	ldi	r26, 0x56	; 86
     130:	b2 e0       	ldi	r27, 0x02	; 2
     132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
     134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
     136:	a4 37       	cpi	r26, 0x74	; 116
     138:	b2 07       	cpc	r27, r18
     13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
     13c:	98 d0       	rcall	.+304    	; 0x26e <main>
     13e:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <_exit>

00000142 <__bad_interrupt>:
     142:	5e cf       	rjmp	.-324    	; 0x0 <__vectors>

00000144 <init_gpio>:
	DDRD|=(1<<PD7);//enable 1 DIGITAL 7
	DDRB|=(1<<PB0);//enable 2 DIGITAL 8
	DDRD|=(1<<PD2);//enable 3 DIGITAL 2
	*/
	//DDRB|=(1<<PB5);//LED13
	sbi(DDRB,4);//digital 10
     144:	24 9a       	sbi	0x04, 4	; 4
	sbi(DDRB,5);//digital 11
     146:	25 9a       	sbi	0x04, 5	; 4
	sbi(DDRB,6);//digital 12
     148:	26 9a       	sbi	0x04, 6	; 4
	sbi(DDRH,4);//digital 7
     14a:	e1 e0       	ldi	r30, 0x01	; 1
     14c:	f1 e0       	ldi	r31, 0x01	; 1
     14e:	80 81       	ld	r24, Z
     150:	80 61       	ori	r24, 0x10	; 16
     152:	80 83       	st	Z, r24
	sbi(DDRH,5);//digital 8
     154:	80 81       	ld	r24, Z
     156:	80 62       	ori	r24, 0x20	; 32
     158:	80 83       	st	Z, r24
	sbi(DDRH,6);//digital 9
     15a:	80 81       	ld	r24, Z
     15c:	80 64       	ori	r24, 0x40	; 64
     15e:	80 83       	st	Z, r24
     160:	08 95       	ret

00000162 <uart_putchar>:
		}
	}
	return true;
}
static int uart_putchar(char c, FILE *stream)
{
     162:	cf 93       	push	r28
     164:	c8 2f       	mov	r28, r24

	if (c == '\n')
     166:	8a 30       	cpi	r24, 0x0A	; 10
     168:	11 f4       	brne	.+4      	; 0x16e <uart_putchar+0xc>
	uart_putchar('\r', stream);
     16a:	8d e0       	ldi	r24, 0x0D	; 13
     16c:	fa df       	rcall	.-12     	; 0x162 <uart_putchar>
	while ( !( UCSR0A & (1<<UDRE0)) )
     16e:	e0 ec       	ldi	r30, 0xC0	; 192
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	90 81       	ld	r25, Z
     174:	95 ff       	sbrs	r25, 5
     176:	fd cf       	rjmp	.-6      	; 0x172 <uart_putchar+0x10>
	;
	/* Put data into buffer, sends the data */
	UDR0 = c;
     178:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	return 0;
}
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	cf 91       	pop	r28
     182:	08 95       	ret

00000184 <__vector_32>:
		#endif  
	}
	return 0;
}
ISR(TIMER3_COMPA_vect)//10 microsecconed timer interrupt
{
     184:	1f 92       	push	r1
     186:	0f 92       	push	r0
     188:	0f b6       	in	r0, 0x3f	; 63
     18a:	0f 92       	push	r0
     18c:	11 24       	eor	r1, r1
     18e:	8f 93       	push	r24
     190:	9f 93       	push	r25
     192:	af 93       	push	r26
     194:	bf 93       	push	r27
		++_10micros;
     196:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__data_end>
     19a:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <__data_end+0x1>
     19e:	a0 91 58 02 	lds	r26, 0x0258	; 0x800258 <__data_end+0x2>
     1a2:	b0 91 59 02 	lds	r27, 0x0259	; 0x800259 <__data_end+0x3>
     1a6:	01 96       	adiw	r24, 0x01	; 1
     1a8:	a1 1d       	adc	r26, r1
     1aa:	b1 1d       	adc	r27, r1
     1ac:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <__data_end>
     1b0:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <__data_end+0x1>
     1b4:	a0 93 58 02 	sts	0x0258, r26	; 0x800258 <__data_end+0x2>
     1b8:	b0 93 59 02 	sts	0x0259, r27	; 0x800259 <__data_end+0x3>
		//HS_U_INVERSE;
}
     1bc:	bf 91       	pop	r27
     1be:	af 91       	pop	r26
     1c0:	9f 91       	pop	r25
     1c2:	8f 91       	pop	r24
     1c4:	0f 90       	pop	r0
     1c6:	0f be       	out	0x3f, r0	; 63
     1c8:	0f 90       	pop	r0
     1ca:	1f 90       	pop	r1
     1cc:	18 95       	reti

000001ce <print16>:
//}

void print16(uint16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     1ce:	0f 93       	push	r16
     1d0:	1f 93       	push	r17
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
     1d6:	cd b7       	in	r28, 0x3d	; 61
     1d8:	de b7       	in	r29, 0x3e	; 62
     1da:	2a 97       	sbiw	r28, 0x0a	; 10
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	f8 94       	cli
     1e0:	de bf       	out	0x3e, r29	; 62
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     1e6:	4a e0       	ldi	r20, 0x0A	; 10
     1e8:	8e 01       	movw	r16, r28
     1ea:	0f 5f       	subi	r16, 0xFF	; 255
     1ec:	1f 4f       	sbci	r17, 0xFF	; 255
     1ee:	b8 01       	movw	r22, r16
     1f0:	fc 01       	movw	r30, r24
     1f2:	80 81       	ld	r24, Z
     1f4:	91 81       	ldd	r25, Z+1	; 0x01
     1f6:	fd d7       	rcall	.+4090   	; 0x11f2 <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     1f8:	1f 93       	push	r17
     1fa:	0f 93       	push	r16
     1fc:	0e 94 66 09 	call	0x12cc	; 0x12cc <printf>
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
	//printf("\n");
}
     204:	2a 96       	adiw	r28, 0x0a	; 10
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	f8 94       	cli
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	0f be       	out	0x3f, r0	; 63
     20e:	cd bf       	out	0x3d, r28	; 61
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	1f 91       	pop	r17
     216:	0f 91       	pop	r16
     218:	08 95       	ret

0000021a <print16ln>:

void print16ln(uint16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     21a:	0f 93       	push	r16
     21c:	1f 93       	push	r17
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	2a 97       	sbiw	r28, 0x0a	; 10
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	f8 94       	cli
     22c:	de bf       	out	0x3e, r29	; 62
     22e:	0f be       	out	0x3f, r0	; 63
     230:	cd bf       	out	0x3d, r28	; 61
     232:	4a e0       	ldi	r20, 0x0A	; 10
     234:	8e 01       	movw	r16, r28
     236:	0f 5f       	subi	r16, 0xFF	; 255
     238:	1f 4f       	sbci	r17, 0xFF	; 255
     23a:	b8 01       	movw	r22, r16
     23c:	fc 01       	movw	r30, r24
     23e:	80 81       	ld	r24, Z
     240:	91 81       	ldd	r25, Z+1	; 0x01
     242:	d7 d7       	rcall	.+4014   	; 0x11f2 <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     244:	1f 93       	push	r17
     246:	0f 93       	push	r16
     248:	0e 94 66 09 	call	0x12cc	; 0x12cc <printf>
	printf("\n");
     24c:	8a e0       	ldi	r24, 0x0A	; 10
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 79 09 	call	0x12f2	; 0x12f2 <putchar>
     254:	0f 90       	pop	r0
     256:	0f 90       	pop	r0
}
     258:	2a 96       	adiw	r28, 0x0a	; 10
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	de bf       	out	0x3e, r29	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	cd bf       	out	0x3d, r28	; 61
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	1f 91       	pop	r17
     26a:	0f 91       	pop	r16
     26c:	08 95       	ret

0000026e <main>:
uint16_t ADC_max=0;
uint8_t buffer[14];
uint8_t flag=0;
int main(void)

{	
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
     276:	ae 97       	sbiw	r28, 0x2e	; 46
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
	init_gpio();
     282:	60 df       	rcall	.-320    	; 0x144 <init_gpio>
	i2c_init();
     284:	28 d4       	rcall	.+2128   	; 0xad6 <i2c_init>
	USART_Init(MY_UBRR);
     286:	80 e1       	ldi	r24, 0x10	; 16
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	d6 d4       	rcall	.+2476   	; 0xc38 <USART_Init>
	uart_str = fdevopen(uart_putchar, NULL);
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	81 eb       	ldi	r24, 0xB1	; 177
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	d1 d7       	rcall	.+4002   	; 0x1238 <fdevopen>
     296:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <uart_str+0x1>
     29a:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <uart_str>
	setup_timer3();
     29e:	0c d4       	rcall	.+2072   	; 0xab8 <setup_timer3>
	Enable_timer3_compare_interrupt();
     2a0:	14 d4       	rcall	.+2088   	; 0xaca <Enable_timer3_compare_interrupt>
	OCR3A=159;//interrupt every 10us
     2a2:	8f e9       	ldi	r24, 0x9F	; 159
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     2aa:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
	float acc_total_vector=0;
	float angle_pitch_acc=0;
	float angle_roll_acc=0;
	bool set_gyro_angles;
	#ifdef CALIBERATED_DATA
		int32_t gyroX_calib=0;
     2ae:	1d 86       	std	Y+13, r1	; 0x0d
     2b0:	1e 86       	std	Y+14, r1	; 0x0e
     2b2:	1f 86       	std	Y+15, r1	; 0x0f
     2b4:	18 8a       	std	Y+16, r1	; 0x10
		int32_t gyroY_calib=0;
     2b6:	19 8a       	std	Y+17, r1	; 0x11
     2b8:	1a 8a       	std	Y+18, r1	; 0x12
     2ba:	1b 8a       	std	Y+19, r1	; 0x13
     2bc:	1c 8a       	std	Y+20, r1	; 0x14
		int32_t gyroZ_calib=0;
     2be:	1d 8a       	std	Y+21, r1	; 0x15
     2c0:	1e 8a       	std	Y+22, r1	; 0x16
     2c2:	1f 8a       	std	Y+23, r1	; 0x17
     2c4:	18 8e       	std	Y+24, r1	; 0x18
		int32_t accelX_calib=0;
     2c6:	19 8e       	std	Y+25, r1	; 0x19
     2c8:	1a 8e       	std	Y+26, r1	; 0x1a
     2ca:	1b 8e       	std	Y+27, r1	; 0x1b
     2cc:	1c 8e       	std	Y+28, r1	; 0x1c
		int32_t accelY_calib=0;
     2ce:	1d 8e       	std	Y+29, r1	; 0x1d
     2d0:	1e 8e       	std	Y+30, r1	; 0x1e
     2d2:	1f 8e       	std	Y+31, r1	; 0x1f
     2d4:	18 a2       	std	Y+32, r1	; 0x20
		int32_t accelZ_calib=0;
     2d6:	19 a2       	std	Y+33, r1	; 0x21
     2d8:	1a a2       	std	Y+34, r1	; 0x22
     2da:	1b a2       	std	Y+35, r1	; 0x23
     2dc:	1c a2       	std	Y+36, r1	; 0x24
		mpu6050_calibrate_gyro(&gyroX_calib,&gyroY_calib,&gyroZ_calib);
     2de:	ae 01       	movw	r20, r28
     2e0:	4b 5e       	subi	r20, 0xEB	; 235
     2e2:	5f 4f       	sbci	r21, 0xFF	; 255
     2e4:	be 01       	movw	r22, r28
     2e6:	6f 5e       	subi	r22, 0xEF	; 239
     2e8:	7f 4f       	sbci	r23, 0xFF	; 255
     2ea:	ce 01       	movw	r24, r28
     2ec:	0d 96       	adiw	r24, 0x0d	; 13
     2ee:	7f d1       	rcall	.+766    	; 0x5ee <mpu6050_calibrate_gyro>
		mpu6050_calibrate_accel(&accelX_calib,&accelY_calib,&accelZ_calib);
     2f0:	ae 01       	movw	r20, r28
     2f2:	4f 5d       	subi	r20, 0xDF	; 223
     2f4:	5f 4f       	sbci	r21, 0xFF	; 255
     2f6:	be 01       	movw	r22, r28
     2f8:	63 5e       	subi	r22, 0xE3	; 227
     2fa:	7f 4f       	sbci	r23, 0xFF	; 255
     2fc:	ce 01       	movw	r24, r28
     2fe:	49 96       	adiw	r24, 0x19	; 25
     300:	5d d2       	rcall	.+1210   	; 0x7bc <mpu6050_calibrate_accel>
	#endif
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV,7);
     302:	67 e0       	ldi	r22, 0x07	; 7
     304:	89 e1       	ldi	r24, 0x19	; 25
     306:	11 d3       	rcall	.+1570   	; 0x92a <mpu6050_writeByte>
	mpu6050_writeByte(MPU6050_RA_CONFIG,0x00);
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	8a e1       	ldi	r24, 0x1A	; 26
     30c:	0e d3       	rcall	.+1564   	; 0x92a <mpu6050_writeByte>
	mpu6050_writeByte(MPU6050_RA_GYRO_CONFIG,0x08);//gyro sensitivity set to 500 o/s
     30e:	68 e0       	ldi	r22, 0x08	; 8
     310:	8b e1       	ldi	r24, 0x1B	; 27
     312:	0b d3       	rcall	.+1558   	; 0x92a <mpu6050_writeByte>
	mpu6050_writeByte(MPU6050_RA_ACCEL_CONFIG,0x10);//accel sensitivity -/+ 8g
     314:	60 e1       	ldi	r22, 0x10	; 16
     316:	8c e1       	ldi	r24, 0x1C	; 28
     318:	08 d3       	rcall	.+1552   	; 0x92a <mpu6050_writeByte>
	mpu6050_writeByte(MPU6050_RA_PWR_MGMT_1,0x01);
     31a:	61 e0       	ldi	r22, 0x01	; 1
     31c:	8b e6       	ldi	r24, 0x6B	; 107
     31e:	05 d3       	rcall	.+1546   	; 0x92a <mpu6050_writeByte>
	
	/*-----------------end---------------*/
	sei();
     320:	78 94       	sei
	uint32_t timer1=_10micros;
     322:	40 90 56 02 	lds	r4, 0x0256	; 0x800256 <__data_end>
     326:	50 90 57 02 	lds	r5, 0x0257	; 0x800257 <__data_end+0x1>
     32a:	60 90 58 02 	lds	r6, 0x0258	; 0x800258 <__data_end+0x2>
     32e:	70 90 59 02 	lds	r7, 0x0259	; 0x800259 <__data_end+0x3>
	int16_t gyro_z;
	int16_t accel_x;
	int16_t accel_y;
	int16_t accel_z;
	float angle_pitch=0;
	float angle_roll=0;
     332:	1f a2       	std	Y+39, r1	; 0x27
     334:	18 a6       	std	Y+40, r1	; 0x28
     336:	19 a6       	std	Y+41, r1	; 0x29
     338:	1a a6       	std	Y+42, r1	; 0x2a
	int16_t gyro_y;
	int16_t gyro_z;
	int16_t accel_x;
	int16_t accel_y;
	int16_t accel_z;
	float angle_pitch=0;
     33a:	1b a6       	std	Y+43, r1	; 0x2b
     33c:	1c a6       	std	Y+44, r1	; 0x2c
     33e:	1d a6       	std	Y+45, r1	; 0x2d
     340:	1e a6       	std	Y+46, r1	; 0x2e
				
				double gyroXrate = gyro_x / 65.5; // Convert to deg/s
				double gyroYrate = gyro_y / 65.5; // Convert to deg/s
				angle_pitch += gyroXrate*dt/100000; //Calculate the traveled pitch angle and add this to the angle_pitch variable
				angle_roll += gyroYrate*dt/100000;  //Calculate the traveled roll angle and add this to the angle_roll variable
				printf("x=");
     342:	0f 2e       	mov	r0, r31
     344:	f6 e0       	ldi	r31, 0x06	; 6
     346:	2f 2e       	mov	r2, r31
     348:	f2 e0       	ldi	r31, 0x02	; 2
     34a:	3f 2e       	mov	r3, r31
     34c:	f0 2d       	mov	r31, r0
				printf(" ");
				printf("angle_y= ");
				print16(&reg);
				reg=dt;
				printf(" ");
				printf("dt= ");
     34e:	0f 2e       	mov	r0, r31
     350:	f0 e2       	ldi	r31, 0x20	; 32
     352:	cf 2e       	mov	r12, r31
     354:	f2 e0       	ldi	r31, 0x02	; 2
     356:	df 2e       	mov	r13, r31
     358:	f0 2d       	mov	r31, r0
     35a:	53 01       	movw	r10, r6
     35c:	42 01       	movw	r8, r4
	/*-----------------end---------------*/
	sei();
	uint32_t timer1=_10micros;
    while (1) 
    {
    	mpu6050_getRawData(&accel_x,&accel_y,&accel_z,&gyro_x,&gyro_y,&gyro_z);//15us to do
     35e:	ce 01       	movw	r24, r28
     360:	05 96       	adiw	r24, 0x05	; 5
     362:	7c 01       	movw	r14, r24
     364:	8e 01       	movw	r16, r28
     366:	0d 5f       	subi	r16, 0xFD	; 253
     368:	1f 4f       	sbci	r17, 0xFF	; 255
     36a:	9e 01       	movw	r18, r28
     36c:	2f 5f       	subi	r18, 0xFF	; 255
     36e:	3f 4f       	sbci	r19, 0xFF	; 255
     370:	ae 01       	movw	r20, r28
     372:	45 5f       	subi	r20, 0xF5	; 245
     374:	5f 4f       	sbci	r21, 0xFF	; 255
     376:	be 01       	movw	r22, r28
     378:	67 5f       	subi	r22, 0xF7	; 247
     37a:	7f 4f       	sbci	r23, 0xFF	; 255
     37c:	02 96       	adiw	r24, 0x02	; 2
     37e:	31 d3       	rcall	.+1634   	; 0x9e2 <mpu6050_getRawData>
    	double dt = (double)((_10micros - timer1));
     380:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__data_end>
     384:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <__data_end+0x1>
     388:	a0 91 58 02 	lds	r26, 0x0258	; 0x800258 <__data_end+0x2>
     38c:	b0 91 59 02 	lds	r27, 0x0259	; 0x800259 <__data_end+0x3>
     390:	bc 01       	movw	r22, r24
     392:	cd 01       	movw	r24, r26
     394:	68 19       	sub	r22, r8
     396:	79 09       	sbc	r23, r9
     398:	8a 09       	sbc	r24, r10
     39a:	9b 09       	sbc	r25, r11
     39c:	51 d5       	rcall	.+2722   	; 0xe40 <__floatunsisf>
     39e:	2b 01       	movw	r4, r22
     3a0:	3c 01       	movw	r6, r24
    	timer1 = _10micros;
     3a2:	80 90 56 02 	lds	r8, 0x0256	; 0x800256 <__data_end>
     3a6:	90 90 57 02 	lds	r9, 0x0257	; 0x800257 <__data_end+0x1>
     3aa:	a0 90 58 02 	lds	r10, 0x0258	; 0x800258 <__data_end+0x2>
     3ae:	b0 90 59 02 	lds	r11, 0x0259	; 0x800259 <__data_end+0x3>
			#ifdef CALIBERATED_DATA
				accX;
     3b2:	8f 81       	ldd	r24, Y+7	; 0x07
     3b4:	98 85       	ldd	r25, Y+8	; 0x08
     3b6:	29 8d       	ldd	r18, Y+25	; 0x19
     3b8:	3a 8d       	ldd	r19, Y+26	; 0x1a
     3ba:	82 1b       	sub	r24, r18
     3bc:	93 0b       	sbc	r25, r19
     3be:	98 87       	std	Y+8, r25	; 0x08
     3c0:	8f 83       	std	Y+7, r24	; 0x07
				accY;
     3c2:	89 85       	ldd	r24, Y+9	; 0x09
     3c4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3c6:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3c8:	3e 8d       	ldd	r19, Y+30	; 0x1e
     3ca:	82 1b       	sub	r24, r18
     3cc:	93 0b       	sbc	r25, r19
     3ce:	9a 87       	std	Y+10, r25	; 0x0a
     3d0:	89 87       	std	Y+9, r24	; 0x09
				accZ;
     3d2:	8b 85       	ldd	r24, Y+11	; 0x0b
     3d4:	9c 85       	ldd	r25, Y+12	; 0x0c
     3d6:	29 a1       	ldd	r18, Y+33	; 0x21
     3d8:	3a a1       	ldd	r19, Y+34	; 0x22
     3da:	82 1b       	sub	r24, r18
     3dc:	93 0b       	sbc	r25, r19
     3de:	9c 87       	std	Y+12, r25	; 0x0c
     3e0:	8b 87       	std	Y+11, r24	; 0x0b
				grX;
     3e2:	69 81       	ldd	r22, Y+1	; 0x01
     3e4:	7a 81       	ldd	r23, Y+2	; 0x02
     3e6:	8d 85       	ldd	r24, Y+13	; 0x0d
     3e8:	9e 85       	ldd	r25, Y+14	; 0x0e
     3ea:	68 1b       	sub	r22, r24
     3ec:	79 0b       	sbc	r23, r25
     3ee:	7a 83       	std	Y+2, r23	; 0x02
     3f0:	69 83       	std	Y+1, r22	; 0x01
				grY;
     3f2:	0b 81       	ldd	r16, Y+3	; 0x03
     3f4:	1c 81       	ldd	r17, Y+4	; 0x04
     3f6:	89 89       	ldd	r24, Y+17	; 0x11
     3f8:	9a 89       	ldd	r25, Y+18	; 0x12
     3fa:	08 1b       	sub	r16, r24
     3fc:	19 0b       	sbc	r17, r25
     3fe:	1c 83       	std	Y+4, r17	; 0x04
     400:	0b 83       	std	Y+3, r16	; 0x03
				grZ;
     402:	8d 81       	ldd	r24, Y+5	; 0x05
     404:	9e 81       	ldd	r25, Y+6	; 0x06
     406:	2d 89       	ldd	r18, Y+21	; 0x15
     408:	3e 89       	ldd	r19, Y+22	; 0x16
     40a:	82 1b       	sub	r24, r18
     40c:	93 0b       	sbc	r25, r19
     40e:	9e 83       	std	Y+6, r25	; 0x06
     410:	8d 83       	std	Y+5, r24	; 0x05
		#else
			#ifdef GYRO
							//Gyro angle calculations
				//0.0000611 = 1 / (250Hz / 65.5)
				
				double gyroXrate = gyro_x / 65.5; // Convert to deg/s
     412:	07 2e       	mov	r0, r23
     414:	00 0c       	add	r0, r0
     416:	88 0b       	sbc	r24, r24
     418:	99 0b       	sbc	r25, r25
     41a:	14 d5       	rcall	.+2600   	; 0xe44 <__floatsisf>
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	43 e8       	ldi	r20, 0x83	; 131
     422:	52 e4       	ldi	r21, 0x42	; 66
     424:	79 d4       	rcall	.+2290   	; 0xd18 <__divsf3>
				double gyroYrate = gyro_y / 65.5; // Convert to deg/s
				angle_pitch += gyroXrate*dt/100000; //Calculate the traveled pitch angle and add this to the angle_pitch variable
     426:	a3 01       	movw	r20, r6
     428:	92 01       	movw	r18, r4
     42a:	98 d5       	rcall	.+2864   	; 0xf5c <__mulsf3>
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	30 e5       	ldi	r19, 0x50	; 80
     430:	43 ec       	ldi	r20, 0xC3	; 195
     432:	57 e4       	ldi	r21, 0x47	; 71
     434:	71 d4       	rcall	.+2274   	; 0xd18 <__divsf3>
     436:	2b a5       	ldd	r18, Y+43	; 0x2b
     438:	3c a5       	ldd	r19, Y+44	; 0x2c
     43a:	4d a5       	ldd	r20, Y+45	; 0x2d
     43c:	5e a5       	ldd	r21, Y+46	; 0x2e
     43e:	08 d4       	rcall	.+2064   	; 0xc50 <__addsf3>
     440:	6b a7       	std	Y+43, r22	; 0x2b
     442:	7c a7       	std	Y+44, r23	; 0x2c
     444:	8d a7       	std	Y+45, r24	; 0x2d
     446:	9e a7       	std	Y+46, r25	; 0x2e
			#ifdef GYRO
							//Gyro angle calculations
				//0.0000611 = 1 / (250Hz / 65.5)
				
				double gyroXrate = gyro_x / 65.5; // Convert to deg/s
				double gyroYrate = gyro_y / 65.5; // Convert to deg/s
     448:	b8 01       	movw	r22, r16
     44a:	11 0f       	add	r17, r17
     44c:	88 0b       	sbc	r24, r24
     44e:	99 0b       	sbc	r25, r25
     450:	f9 d4       	rcall	.+2546   	; 0xe44 <__floatsisf>
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	43 e8       	ldi	r20, 0x83	; 131
     458:	52 e4       	ldi	r21, 0x42	; 66
     45a:	5e d4       	rcall	.+2236   	; 0xd18 <__divsf3>
				angle_pitch += gyroXrate*dt/100000; //Calculate the traveled pitch angle and add this to the angle_pitch variable
				angle_roll += gyroYrate*dt/100000;  //Calculate the traveled roll angle and add this to the angle_roll variable
     45c:	a3 01       	movw	r20, r6
     45e:	92 01       	movw	r18, r4
     460:	7d d5       	rcall	.+2810   	; 0xf5c <__mulsf3>
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	30 e5       	ldi	r19, 0x50	; 80
     466:	43 ec       	ldi	r20, 0xC3	; 195
     468:	57 e4       	ldi	r21, 0x47	; 71
     46a:	56 d4       	rcall	.+2220   	; 0xd18 <__divsf3>
     46c:	2f a1       	ldd	r18, Y+39	; 0x27
     46e:	38 a5       	ldd	r19, Y+40	; 0x28
     470:	49 a5       	ldd	r20, Y+41	; 0x29
     472:	5a a5       	ldd	r21, Y+42	; 0x2a
     474:	ed d3       	rcall	.+2010   	; 0xc50 <__addsf3>
     476:	6f a3       	std	Y+39, r22	; 0x27
     478:	78 a7       	std	Y+40, r23	; 0x28
     47a:	89 a7       	std	Y+41, r24	; 0x29
     47c:	9a a7       	std	Y+42, r25	; 0x2a
				printf("x=");
     47e:	3f 92       	push	r3
     480:	2f 92       	push	r2
     482:	24 d7       	rcall	.+3656   	; 0x12cc <printf>
				print16(&gyro_x);
     484:	ce 01       	movw	r24, r28
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	a2 de       	rcall	.-700    	; 0x1ce <print16>
				uint16_t reg=angle_pitch;
     48a:	6b a5       	ldd	r22, Y+43	; 0x2b
     48c:	7c a5       	ldd	r23, Y+44	; 0x2c
     48e:	8d a5       	ldd	r24, Y+45	; 0x2d
     490:	9e a5       	ldd	r25, Y+46	; 0x2e
     492:	aa d4       	rcall	.+2388   	; 0xde8 <__fixunssfsi>
     494:	7e a3       	std	Y+38, r23	; 0x26
     496:	6d a3       	std	Y+37, r22	; 0x25
				printf(" ");
     498:	80 e2       	ldi	r24, 0x20	; 32
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	2a d7       	rcall	.+3668   	; 0x12f2 <putchar>
				printf("angle_x= ");
     49e:	a9 e0       	ldi	r26, 0x09	; 9
     4a0:	b2 e0       	ldi	r27, 0x02	; 2
     4a2:	bf 93       	push	r27
     4a4:	af 93       	push	r26
     4a6:	12 d7       	rcall	.+3620   	; 0x12cc <printf>
				print16(&reg);
     4a8:	ce 01       	movw	r24, r28
     4aa:	85 96       	adiw	r24, 0x25	; 37
     4ac:	90 de       	rcall	.-736    	; 0x1ce <print16>
				printf(" ");
     4ae:	80 e2       	ldi	r24, 0x20	; 32
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	1f d7       	rcall	.+3646   	; 0x12f2 <putchar>
				printf("y=");
     4b4:	a3 e1       	ldi	r26, 0x13	; 19
     4b6:	b2 e0       	ldi	r27, 0x02	; 2
     4b8:	bf 93       	push	r27
     4ba:	af 93       	push	r26
     4bc:	07 d7       	rcall	.+3598   	; 0x12cc <printf>
				print16(&gyro_y);
     4be:	ce 01       	movw	r24, r28
     4c0:	03 96       	adiw	r24, 0x03	; 3
     4c2:	85 de       	rcall	.-758    	; 0x1ce <print16>
				reg=angle_roll;
     4c4:	6f a1       	ldd	r22, Y+39	; 0x27
     4c6:	78 a5       	ldd	r23, Y+40	; 0x28
     4c8:	89 a5       	ldd	r24, Y+41	; 0x29
     4ca:	9a a5       	ldd	r25, Y+42	; 0x2a
     4cc:	8d d4       	rcall	.+2330   	; 0xde8 <__fixunssfsi>
     4ce:	7e a3       	std	Y+38, r23	; 0x26
     4d0:	6d a3       	std	Y+37, r22	; 0x25
				printf(" ");
     4d2:	80 e2       	ldi	r24, 0x20	; 32
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0d d7       	rcall	.+3610   	; 0x12f2 <putchar>
				printf("angle_y= ");
     4d8:	a6 e1       	ldi	r26, 0x16	; 22
     4da:	b2 e0       	ldi	r27, 0x02	; 2
     4dc:	bf 93       	push	r27
     4de:	af 93       	push	r26
     4e0:	f5 d6       	rcall	.+3562   	; 0x12cc <printf>
				print16(&reg);
     4e2:	ce 01       	movw	r24, r28
     4e4:	85 96       	adiw	r24, 0x25	; 37
     4e6:	73 de       	rcall	.-794    	; 0x1ce <print16>
				reg=dt;
     4e8:	c3 01       	movw	r24, r6
     4ea:	b2 01       	movw	r22, r4
     4ec:	7d d4       	rcall	.+2298   	; 0xde8 <__fixunssfsi>
     4ee:	7e a3       	std	Y+38, r23	; 0x26
     4f0:	6d a3       	std	Y+37, r22	; 0x25
				printf(" ");
     4f2:	80 e2       	ldi	r24, 0x20	; 32
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	fd d6       	rcall	.+3578   	; 0x12f2 <putchar>
				printf("dt= ");
     4f8:	df 92       	push	r13
     4fa:	cf 92       	push	r12
     4fc:	e7 d6       	rcall	.+3534   	; 0x12cc <printf>
				print16ln(&reg);
     4fe:	ce 01       	movw	r24, r28
     500:	85 96       	adiw	r24, 0x25	; 37
     502:	8b de       	rcall	.-746    	; 0x21a <print16ln>
				
				  //0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
				angle_pitch += angle_roll * sin(gyro_z * 0.000001066);               //If the IMU has yawed transfer the roll angle to the pitch angel
     504:	6d 81       	ldd	r22, Y+5	; 0x05
     506:	7e 81       	ldd	r23, Y+6	; 0x06
     508:	07 2e       	mov	r0, r23
     50a:	00 0c       	add	r0, r0
     50c:	88 0b       	sbc	r24, r24
     50e:	99 0b       	sbc	r25, r25
     510:	99 d4       	rcall	.+2354   	; 0xe44 <__floatsisf>
     512:	2b e7       	ldi	r18, 0x7B	; 123
     514:	33 e1       	ldi	r19, 0x13	; 19
     516:	4f e8       	ldi	r20, 0x8F	; 143
     518:	55 e3       	ldi	r21, 0x35	; 53
     51a:	20 d5       	rcall	.+2624   	; 0xf5c <__mulsf3>
     51c:	82 d5       	rcall	.+2820   	; 0x1022 <sin>
     51e:	2b 01       	movw	r4, r22
     520:	3c 01       	movw	r6, r24
     522:	2f a1       	ldd	r18, Y+39	; 0x27
     524:	38 a5       	ldd	r19, Y+40	; 0x28
     526:	49 a5       	ldd	r20, Y+41	; 0x29
     528:	5a a5       	ldd	r21, Y+42	; 0x2a
     52a:	18 d5       	rcall	.+2608   	; 0xf5c <__mulsf3>
     52c:	2b a5       	ldd	r18, Y+43	; 0x2b
     52e:	3c a5       	ldd	r19, Y+44	; 0x2c
     530:	4d a5       	ldd	r20, Y+45	; 0x2d
     532:	5e a5       	ldd	r21, Y+46	; 0x2e
     534:	8d d3       	rcall	.+1818   	; 0xc50 <__addsf3>
     536:	6b a7       	std	Y+43, r22	; 0x2b
     538:	7c a7       	std	Y+44, r23	; 0x2c
     53a:	8d a7       	std	Y+45, r24	; 0x2d
     53c:	9e a7       	std	Y+46, r25	; 0x2e
				angle_roll -= angle_pitch * sin(gyro_z * 0.000001066);               //If the IMU has yawed transfer the pitch angle to the roll angel
     53e:	9b 01       	movw	r18, r22
     540:	ac 01       	movw	r20, r24
     542:	c3 01       	movw	r24, r6
     544:	b2 01       	movw	r22, r4
     546:	0a d5       	rcall	.+2580   	; 0xf5c <__mulsf3>
     548:	9b 01       	movw	r18, r22
     54a:	ac 01       	movw	r20, r24
     54c:	6f a1       	ldd	r22, Y+39	; 0x27
     54e:	78 a5       	ldd	r23, Y+40	; 0x28
     550:	89 a5       	ldd	r24, Y+41	; 0x29
     552:	9a a5       	ldd	r25, Y+42	; 0x2a
     554:	7c d3       	rcall	.+1784   	; 0xc4e <__subsf3>
     556:	6f a3       	std	Y+39, r22	; 0x27
     558:	78 a7       	std	Y+40, r23	; 0x28
     55a:	89 a7       	std	Y+41, r24	; 0x29
     55c:	9a a7       	std	Y+42, r25	; 0x2a
			////	//print16ln(&pop);
			////}
			
			
		#endif  
	}
     55e:	0f b6       	in	r0, 0x3f	; 63
     560:	f8 94       	cli
     562:	de bf       	out	0x3e, r29	; 62
     564:	0f be       	out	0x3f, r0	; 63
     566:	cd bf       	out	0x3d, r28	; 61
     568:	fa ce       	rjmp	.-524    	; 0x35e <main+0xf0>

0000056a <mpu6050_readByte>:
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_H);
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_L);
	return axis_value;
}
uint8_t mpu6050_readByte(uint8_t byteToRead)//readbyte
{
     56a:	cf 93       	push	r28
     56c:	c8 2f       	mov	r28, r24
	i2c_start(MPU6050_WRITE);
     56e:	80 ed       	ldi	r24, 0xD0	; 208
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	b7 d2       	rcall	.+1390   	; 0xae2 <i2c_start>
	i2c_write(byteToRead);
     574:	8c 2f       	mov	r24, r28
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0a d3       	rcall	.+1556   	; 0xb8e <i2c_write>
	i2c_stop();
     57a:	f9 d2       	rcall	.+1522   	; 0xb6e <i2c_stop>
	
	i2c_start(MPU6050_READ);
     57c:	81 ed       	ldi	r24, 0xD1	; 209
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	b0 d2       	rcall	.+1376   	; 0xae2 <i2c_start>
	uint8_t byteToReturn=i2c_readNak();
     582:	40 d3       	rcall	.+1664   	; 0xc04 <i2c_readNak>
     584:	c8 2f       	mov	r28, r24
	i2c_stop();
     586:	f3 d2       	rcall	.+1510   	; 0xb6e <i2c_stop>
	return byteToReturn;
}
     588:	8c 2f       	mov	r24, r28
     58a:	cf 91       	pop	r28
     58c:	08 95       	ret

0000058e <mpu6050_read_gyroX>:
	//-----------------------------------
	*/
}
#endif
uint16_t mpu6050_read_gyroX()//axis x=0,y=1,z=2
{
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_XOUT_H);
     592:	83 e4       	ldi	r24, 0x43	; 67
     594:	ea df       	rcall	.-44     	; 0x56a <mpu6050_readByte>
     596:	c8 2f       	mov	r28, r24
     598:	d0 e0       	ldi	r29, 0x00	; 0
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_XOUT_L);
     59a:	dc 2f       	mov	r29, r28
     59c:	cc 27       	eor	r28, r28
     59e:	84 e4       	ldi	r24, 0x44	; 68
     5a0:	e4 df       	rcall	.-56     	; 0x56a <mpu6050_readByte>
	return axis_value;
}
     5a2:	9e 01       	movw	r18, r28
     5a4:	28 2b       	or	r18, r24
     5a6:	c9 01       	movw	r24, r18
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	08 95       	ret

000005ae <mpu6050_read_gyroY>:
uint16_t mpu6050_read_gyroY()//axis x=0,y=1,z=2
{
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_YOUT_H);
     5b2:	85 e4       	ldi	r24, 0x45	; 69
     5b4:	da df       	rcall	.-76     	; 0x56a <mpu6050_readByte>
     5b6:	c8 2f       	mov	r28, r24
     5b8:	d0 e0       	ldi	r29, 0x00	; 0
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_YOUT_L);
     5ba:	dc 2f       	mov	r29, r28
     5bc:	cc 27       	eor	r28, r28
     5be:	86 e4       	ldi	r24, 0x46	; 70
     5c0:	d4 df       	rcall	.-88     	; 0x56a <mpu6050_readByte>
	return axis_value;
}
     5c2:	9e 01       	movw	r18, r28
     5c4:	28 2b       	or	r18, r24
     5c6:	c9 01       	movw	r24, r18
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	08 95       	ret

000005ce <mpu6050_read_gyroZ>:
uint16_t mpu6050_read_gyroZ()//axis x=0,y=1,z=2
{
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_H);
     5d2:	87 e4       	ldi	r24, 0x47	; 71
     5d4:	ca df       	rcall	.-108    	; 0x56a <mpu6050_readByte>
     5d6:	c8 2f       	mov	r28, r24
     5d8:	d0 e0       	ldi	r29, 0x00	; 0
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_L);
     5da:	dc 2f       	mov	r29, r28
     5dc:	cc 27       	eor	r28, r28
     5de:	88 e4       	ldi	r24, 0x48	; 72
     5e0:	c4 df       	rcall	.-120    	; 0x56a <mpu6050_readByte>
	return axis_value;
}
     5e2:	9e 01       	movw	r18, r28
     5e4:	28 2b       	or	r18, r24
     5e6:	c9 01       	movw	r24, r18
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	08 95       	ret

000005ee <mpu6050_calibrate_gyro>:
 *  Author: HP
 */ 
#include "MPU6050.h"
#ifdef CALIBERATED_DATA
void mpu6050_calibrate_gyro(int32_t *x,int32_t *y, int32_t *z)
{
     5ee:	cf 92       	push	r12
     5f0:	df 92       	push	r13
     5f2:	ef 92       	push	r14
     5f4:	ff 92       	push	r15
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	6c 01       	movw	r12, r24
     600:	7b 01       	movw	r14, r22
     602:	8a 01       	movw	r16, r20
	printf("Calibrating Gyro...\n");
     604:	85 e2       	ldi	r24, 0x25	; 37
     606:	92 e0       	ldi	r25, 0x02	; 2
     608:	79 d6       	rcall	.+3314   	; 0x12fc <puts>
     60a:	c4 e1       	ldi	r28, 0x14	; 20
     60c:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0;i<calibration_counter;i++)
	{
		(*x)+=mpu6050_read_gyroX();
     60e:	bf df       	rcall	.-130    	; 0x58e <mpu6050_read_gyroX>
     610:	f6 01       	movw	r30, r12
     612:	40 81       	ld	r20, Z
     614:	51 81       	ldd	r21, Z+1	; 0x01
     616:	62 81       	ldd	r22, Z+2	; 0x02
     618:	73 81       	ldd	r23, Z+3	; 0x03
     61a:	48 0f       	add	r20, r24
     61c:	59 1f       	adc	r21, r25
     61e:	61 1d       	adc	r22, r1
     620:	71 1d       	adc	r23, r1
     622:	40 83       	st	Z, r20
     624:	51 83       	std	Z+1, r21	; 0x01
     626:	62 83       	std	Z+2, r22	; 0x02
     628:	73 83       	std	Z+3, r23	; 0x03
		(*y)+=mpu6050_read_gyroY();
     62a:	c1 df       	rcall	.-126    	; 0x5ae <mpu6050_read_gyroY>
     62c:	f7 01       	movw	r30, r14
     62e:	40 81       	ld	r20, Z
     630:	51 81       	ldd	r21, Z+1	; 0x01
     632:	62 81       	ldd	r22, Z+2	; 0x02
     634:	73 81       	ldd	r23, Z+3	; 0x03
     636:	48 0f       	add	r20, r24
     638:	59 1f       	adc	r21, r25
     63a:	61 1d       	adc	r22, r1
     63c:	71 1d       	adc	r23, r1
     63e:	40 83       	st	Z, r20
     640:	51 83       	std	Z+1, r21	; 0x01
     642:	62 83       	std	Z+2, r22	; 0x02
     644:	73 83       	std	Z+3, r23	; 0x03
		(*z)+=mpu6050_read_gyroZ();
     646:	c3 df       	rcall	.-122    	; 0x5ce <mpu6050_read_gyroZ>
     648:	f8 01       	movw	r30, r16
     64a:	40 81       	ld	r20, Z
     64c:	51 81       	ldd	r21, Z+1	; 0x01
     64e:	62 81       	ldd	r22, Z+2	; 0x02
     650:	73 81       	ldd	r23, Z+3	; 0x03
     652:	48 0f       	add	r20, r24
     654:	59 1f       	adc	r21, r25
     656:	61 1d       	adc	r22, r1
     658:	71 1d       	adc	r23, r1
     65a:	40 83       	st	Z, r20
     65c:	51 83       	std	Z+1, r21	; 0x01
     65e:	62 83       	std	Z+2, r22	; 0x02
     660:	73 83       	std	Z+3, r23	; 0x03
     662:	21 97       	sbiw	r28, 0x01	; 1
#include "MPU6050.h"
#ifdef CALIBERATED_DATA
void mpu6050_calibrate_gyro(int32_t *x,int32_t *y, int32_t *z)
{
	printf("Calibrating Gyro...\n");
	for (int i=0;i<calibration_counter;i++)
     664:	a1 f6       	brne	.-88     	; 0x60e <mpu6050_calibrate_gyro+0x20>
		(*x)+=mpu6050_read_gyroX();
		(*y)+=mpu6050_read_gyroY();
		(*z)+=mpu6050_read_gyroZ();
		_delay_ms(caliberation_wait_delay);
	}
		if(*x<0)
     666:	f6 01       	movw	r30, r12
     668:	60 81       	ld	r22, Z
     66a:	71 81       	ldd	r23, Z+1	; 0x01
     66c:	82 81       	ldd	r24, Z+2	; 0x02
     66e:	93 81       	ldd	r25, Z+3	; 0x03
     670:	99 23       	and	r25, r25
     672:	ac f4       	brge	.+42     	; 0x69e <mpu6050_calibrate_gyro+0xb0>
		(*x)=abs(*x)/calibration_counter;
     674:	9b 01       	movw	r18, r22
     676:	77 23       	and	r23, r23
     678:	24 f4       	brge	.+8      	; 0x682 <mpu6050_calibrate_gyro+0x94>
     67a:	22 27       	eor	r18, r18
     67c:	33 27       	eor	r19, r19
     67e:	26 1b       	sub	r18, r22
     680:	37 0b       	sbc	r19, r23
     682:	c9 01       	movw	r24, r18
     684:	64 e1       	ldi	r22, 0x14	; 20
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	4f d5       	rcall	.+2718   	; 0x1128 <__divmodhi4>
     68a:	cb 01       	movw	r24, r22
     68c:	77 0f       	add	r23, r23
     68e:	aa 0b       	sbc	r26, r26
     690:	bb 0b       	sbc	r27, r27
     692:	f6 01       	movw	r30, r12
     694:	80 83       	st	Z, r24
     696:	91 83       	std	Z+1, r25	; 0x01
     698:	a2 83       	std	Z+2, r26	; 0x02
     69a:	b3 83       	std	Z+3, r27	; 0x03
     69c:	0a c0       	rjmp	.+20     	; 0x6b2 <mpu6050_calibrate_gyro+0xc4>
		else
		(*x)=(*x)/calibration_counter;
     69e:	24 e1       	ldi	r18, 0x14	; 20
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	40 e0       	ldi	r20, 0x00	; 0
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	53 d5       	rcall	.+2726   	; 0x114e <__divmodsi4>
     6a8:	f6 01       	movw	r30, r12
     6aa:	20 83       	st	Z, r18
     6ac:	31 83       	std	Z+1, r19	; 0x01
     6ae:	42 83       	std	Z+2, r20	; 0x02
     6b0:	53 83       	std	Z+3, r21	; 0x03
		
		if(*y<0)
     6b2:	f7 01       	movw	r30, r14
     6b4:	60 81       	ld	r22, Z
     6b6:	71 81       	ldd	r23, Z+1	; 0x01
     6b8:	82 81       	ldd	r24, Z+2	; 0x02
     6ba:	93 81       	ldd	r25, Z+3	; 0x03
     6bc:	99 23       	and	r25, r25
     6be:	ac f4       	brge	.+42     	; 0x6ea <mpu6050_calibrate_gyro+0xfc>
		(*y)=abs(*y)/calibration_counter;
     6c0:	9b 01       	movw	r18, r22
     6c2:	77 23       	and	r23, r23
     6c4:	24 f4       	brge	.+8      	; 0x6ce <mpu6050_calibrate_gyro+0xe0>
     6c6:	22 27       	eor	r18, r18
     6c8:	33 27       	eor	r19, r19
     6ca:	26 1b       	sub	r18, r22
     6cc:	37 0b       	sbc	r19, r23
     6ce:	c9 01       	movw	r24, r18
     6d0:	64 e1       	ldi	r22, 0x14	; 20
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	29 d5       	rcall	.+2642   	; 0x1128 <__divmodhi4>
     6d6:	cb 01       	movw	r24, r22
     6d8:	77 0f       	add	r23, r23
     6da:	aa 0b       	sbc	r26, r26
     6dc:	bb 0b       	sbc	r27, r27
     6de:	f7 01       	movw	r30, r14
     6e0:	80 83       	st	Z, r24
     6e2:	91 83       	std	Z+1, r25	; 0x01
     6e4:	a2 83       	std	Z+2, r26	; 0x02
     6e6:	b3 83       	std	Z+3, r27	; 0x03
     6e8:	0a c0       	rjmp	.+20     	; 0x6fe <mpu6050_calibrate_gyro+0x110>
		else
		(*y)=(*y)/calibration_counter;
     6ea:	24 e1       	ldi	r18, 0x14	; 20
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	40 e0       	ldi	r20, 0x00	; 0
     6f0:	50 e0       	ldi	r21, 0x00	; 0
     6f2:	2d d5       	rcall	.+2650   	; 0x114e <__divmodsi4>
     6f4:	f7 01       	movw	r30, r14
     6f6:	20 83       	st	Z, r18
     6f8:	31 83       	std	Z+1, r19	; 0x01
     6fa:	42 83       	std	Z+2, r20	; 0x02
     6fc:	53 83       	std	Z+3, r21	; 0x03
		
		if(*z<0)
     6fe:	f8 01       	movw	r30, r16
     700:	60 81       	ld	r22, Z
     702:	71 81       	ldd	r23, Z+1	; 0x01
     704:	82 81       	ldd	r24, Z+2	; 0x02
     706:	93 81       	ldd	r25, Z+3	; 0x03
     708:	99 23       	and	r25, r25
     70a:	ac f4       	brge	.+42     	; 0x736 <mpu6050_calibrate_gyro+0x148>
		(*z)=abs(*z)/calibration_counter;
     70c:	9b 01       	movw	r18, r22
     70e:	77 23       	and	r23, r23
     710:	24 f4       	brge	.+8      	; 0x71a <mpu6050_calibrate_gyro+0x12c>
     712:	22 27       	eor	r18, r18
     714:	33 27       	eor	r19, r19
     716:	26 1b       	sub	r18, r22
     718:	37 0b       	sbc	r19, r23
     71a:	c9 01       	movw	r24, r18
     71c:	64 e1       	ldi	r22, 0x14	; 20
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	03 d5       	rcall	.+2566   	; 0x1128 <__divmodhi4>
     722:	cb 01       	movw	r24, r22
     724:	77 0f       	add	r23, r23
     726:	aa 0b       	sbc	r26, r26
     728:	bb 0b       	sbc	r27, r27
     72a:	f8 01       	movw	r30, r16
     72c:	80 83       	st	Z, r24
     72e:	91 83       	std	Z+1, r25	; 0x01
     730:	a2 83       	std	Z+2, r26	; 0x02
     732:	b3 83       	std	Z+3, r27	; 0x03
     734:	0a c0       	rjmp	.+20     	; 0x74a <mpu6050_calibrate_gyro+0x15c>
		else
		(*z)=(*z)/calibration_counter;
     736:	24 e1       	ldi	r18, 0x14	; 20
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	07 d5       	rcall	.+2574   	; 0x114e <__divmodsi4>
     740:	f8 01       	movw	r30, r16
     742:	20 83       	st	Z, r18
     744:	31 83       	std	Z+1, r19	; 0x01
     746:	42 83       	std	Z+2, r20	; 0x02
     748:	53 83       	std	Z+3, r21	; 0x03
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/			
	
}
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	ff 90       	pop	r15
     754:	ef 90       	pop	r14
     756:	df 90       	pop	r13
     758:	cf 90       	pop	r12
     75a:	08 95       	ret

0000075c <mpu6050_read_accelX>:
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_H);
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_L);
	return axis_value;
}
uint16_t mpu6050_read_accelX()
{
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_XOUT_H);
     760:	8b e3       	ldi	r24, 0x3B	; 59
     762:	03 df       	rcall	.-506    	; 0x56a <mpu6050_readByte>
     764:	c8 2f       	mov	r28, r24
     766:	d0 e0       	ldi	r29, 0x00	; 0
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_XOUT_L);
     768:	dc 2f       	mov	r29, r28
     76a:	cc 27       	eor	r28, r28
     76c:	8c e3       	ldi	r24, 0x3C	; 60
     76e:	fd de       	rcall	.-518    	; 0x56a <mpu6050_readByte>
	return axis_value;
}
     770:	9e 01       	movw	r18, r28
     772:	28 2b       	or	r18, r24
     774:	c9 01       	movw	r24, r18
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	08 95       	ret

0000077c <mpu6050_read_accelY>:
uint16_t mpu6050_read_accelY()
{
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_YOUT_H);
     780:	8d e3       	ldi	r24, 0x3D	; 61
     782:	f3 de       	rcall	.-538    	; 0x56a <mpu6050_readByte>
     784:	c8 2f       	mov	r28, r24
     786:	d0 e0       	ldi	r29, 0x00	; 0
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_YOUT_L);
     788:	dc 2f       	mov	r29, r28
     78a:	cc 27       	eor	r28, r28
     78c:	8e e3       	ldi	r24, 0x3E	; 62
     78e:	ed de       	rcall	.-550    	; 0x56a <mpu6050_readByte>
	return axis_value;
}
     790:	9e 01       	movw	r18, r28
     792:	28 2b       	or	r18, r24
     794:	c9 01       	movw	r24, r18
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <mpu6050_read_accelZ>:
uint16_t mpu6050_read_accelZ()
{
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_H);
     7a0:	8f e3       	ldi	r24, 0x3F	; 63
     7a2:	e3 de       	rcall	.-570    	; 0x56a <mpu6050_readByte>
     7a4:	c8 2f       	mov	r28, r24
     7a6:	d0 e0       	ldi	r29, 0x00	; 0
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_L);
     7a8:	dc 2f       	mov	r29, r28
     7aa:	cc 27       	eor	r28, r28
     7ac:	80 e4       	ldi	r24, 0x40	; 64
     7ae:	dd de       	rcall	.-582    	; 0x56a <mpu6050_readByte>
	return axis_value;
}
     7b0:	9e 01       	movw	r18, r28
     7b2:	28 2b       	or	r18, r24
     7b4:	c9 01       	movw	r24, r18
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	08 95       	ret

000007bc <mpu6050_calibrate_accel>:
	*/			
	
}

void mpu6050_calibrate_accel(int32_t *x,int32_t *y, int32_t *z)
{
     7bc:	cf 92       	push	r12
     7be:	df 92       	push	r13
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	6c 01       	movw	r12, r24
     7ce:	7b 01       	movw	r14, r22
     7d0:	8a 01       	movw	r16, r20
	
	printf("Calibrating Accelerometer...\n");
     7d2:	89 e3       	ldi	r24, 0x39	; 57
     7d4:	92 e0       	ldi	r25, 0x02	; 2
     7d6:	92 d5       	rcall	.+2852   	; 0x12fc <puts>
     7d8:	c4 e1       	ldi	r28, 0x14	; 20
     7da:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0;i<calibration_counter;i++){
		(*x)+=mpu6050_read_accelX();
     7dc:	bf df       	rcall	.-130    	; 0x75c <mpu6050_read_accelX>
     7de:	f6 01       	movw	r30, r12
     7e0:	40 81       	ld	r20, Z
     7e2:	51 81       	ldd	r21, Z+1	; 0x01
     7e4:	62 81       	ldd	r22, Z+2	; 0x02
     7e6:	73 81       	ldd	r23, Z+3	; 0x03
     7e8:	48 0f       	add	r20, r24
     7ea:	59 1f       	adc	r21, r25
     7ec:	61 1d       	adc	r22, r1
     7ee:	71 1d       	adc	r23, r1
     7f0:	40 83       	st	Z, r20
     7f2:	51 83       	std	Z+1, r21	; 0x01
     7f4:	62 83       	std	Z+2, r22	; 0x02
     7f6:	73 83       	std	Z+3, r23	; 0x03
		(*y)+=mpu6050_read_accelY();
     7f8:	c1 df       	rcall	.-126    	; 0x77c <mpu6050_read_accelY>
     7fa:	f7 01       	movw	r30, r14
     7fc:	40 81       	ld	r20, Z
     7fe:	51 81       	ldd	r21, Z+1	; 0x01
     800:	62 81       	ldd	r22, Z+2	; 0x02
     802:	73 81       	ldd	r23, Z+3	; 0x03
     804:	48 0f       	add	r20, r24
     806:	59 1f       	adc	r21, r25
     808:	61 1d       	adc	r22, r1
     80a:	71 1d       	adc	r23, r1
     80c:	40 83       	st	Z, r20
     80e:	51 83       	std	Z+1, r21	; 0x01
     810:	62 83       	std	Z+2, r22	; 0x02
     812:	73 83       	std	Z+3, r23	; 0x03
		(*z)+=mpu6050_read_accelZ();
     814:	c3 df       	rcall	.-122    	; 0x79c <mpu6050_read_accelZ>
     816:	f8 01       	movw	r30, r16
     818:	40 81       	ld	r20, Z
     81a:	51 81       	ldd	r21, Z+1	; 0x01
     81c:	62 81       	ldd	r22, Z+2	; 0x02
     81e:	73 81       	ldd	r23, Z+3	; 0x03
     820:	48 0f       	add	r20, r24
     822:	59 1f       	adc	r21, r25
     824:	61 1d       	adc	r22, r1
     826:	71 1d       	adc	r23, r1
     828:	40 83       	st	Z, r20
     82a:	51 83       	std	Z+1, r21	; 0x01
     82c:	62 83       	std	Z+2, r22	; 0x02
     82e:	73 83       	std	Z+3, r23	; 0x03
     830:	21 97       	sbiw	r28, 0x01	; 1

void mpu6050_calibrate_accel(int32_t *x,int32_t *y, int32_t *z)
{
	
	printf("Calibrating Accelerometer...\n");
	for(int i=0;i<calibration_counter;i++){
     832:	a1 f6       	brne	.-88     	; 0x7dc <mpu6050_calibrate_accel+0x20>
		(*x)+=mpu6050_read_accelX();
		(*y)+=mpu6050_read_accelY();
		(*z)+=mpu6050_read_accelZ();
		_delay_ms(caliberation_wait_delay);
	}
	if(*x<0)
     834:	f6 01       	movw	r30, r12
     836:	60 81       	ld	r22, Z
     838:	71 81       	ldd	r23, Z+1	; 0x01
     83a:	82 81       	ldd	r24, Z+2	; 0x02
     83c:	93 81       	ldd	r25, Z+3	; 0x03
     83e:	99 23       	and	r25, r25
     840:	ac f4       	brge	.+42     	; 0x86c <mpu6050_calibrate_accel+0xb0>
	(*x)=abs(*x)/calibration_counter;
     842:	9b 01       	movw	r18, r22
     844:	77 23       	and	r23, r23
     846:	24 f4       	brge	.+8      	; 0x850 <mpu6050_calibrate_accel+0x94>
     848:	22 27       	eor	r18, r18
     84a:	33 27       	eor	r19, r19
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	c9 01       	movw	r24, r18
     852:	64 e1       	ldi	r22, 0x14	; 20
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	68 d4       	rcall	.+2256   	; 0x1128 <__divmodhi4>
     858:	cb 01       	movw	r24, r22
     85a:	77 0f       	add	r23, r23
     85c:	aa 0b       	sbc	r26, r26
     85e:	bb 0b       	sbc	r27, r27
     860:	f6 01       	movw	r30, r12
     862:	80 83       	st	Z, r24
     864:	91 83       	std	Z+1, r25	; 0x01
     866:	a2 83       	std	Z+2, r26	; 0x02
     868:	b3 83       	std	Z+3, r27	; 0x03
     86a:	0a c0       	rjmp	.+20     	; 0x880 <mpu6050_calibrate_accel+0xc4>
	else
	(*x)=(*x)/calibration_counter;
     86c:	24 e1       	ldi	r18, 0x14	; 20
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	40 e0       	ldi	r20, 0x00	; 0
     872:	50 e0       	ldi	r21, 0x00	; 0
     874:	6c d4       	rcall	.+2264   	; 0x114e <__divmodsi4>
     876:	f6 01       	movw	r30, r12
     878:	20 83       	st	Z, r18
     87a:	31 83       	std	Z+1, r19	; 0x01
     87c:	42 83       	std	Z+2, r20	; 0x02
     87e:	53 83       	std	Z+3, r21	; 0x03
	
	if(*y<0)
     880:	f7 01       	movw	r30, r14
     882:	60 81       	ld	r22, Z
     884:	71 81       	ldd	r23, Z+1	; 0x01
     886:	82 81       	ldd	r24, Z+2	; 0x02
     888:	93 81       	ldd	r25, Z+3	; 0x03
     88a:	99 23       	and	r25, r25
     88c:	ac f4       	brge	.+42     	; 0x8b8 <mpu6050_calibrate_accel+0xfc>
	(*y)=abs(*y)/calibration_counter;
     88e:	9b 01       	movw	r18, r22
     890:	77 23       	and	r23, r23
     892:	24 f4       	brge	.+8      	; 0x89c <mpu6050_calibrate_accel+0xe0>
     894:	22 27       	eor	r18, r18
     896:	33 27       	eor	r19, r19
     898:	26 1b       	sub	r18, r22
     89a:	37 0b       	sbc	r19, r23
     89c:	c9 01       	movw	r24, r18
     89e:	64 e1       	ldi	r22, 0x14	; 20
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	42 d4       	rcall	.+2180   	; 0x1128 <__divmodhi4>
     8a4:	cb 01       	movw	r24, r22
     8a6:	77 0f       	add	r23, r23
     8a8:	aa 0b       	sbc	r26, r26
     8aa:	bb 0b       	sbc	r27, r27
     8ac:	f7 01       	movw	r30, r14
     8ae:	80 83       	st	Z, r24
     8b0:	91 83       	std	Z+1, r25	; 0x01
     8b2:	a2 83       	std	Z+2, r26	; 0x02
     8b4:	b3 83       	std	Z+3, r27	; 0x03
     8b6:	0a c0       	rjmp	.+20     	; 0x8cc <mpu6050_calibrate_accel+0x110>
	else
	(*y)=(*y)/calibration_counter;
     8b8:	24 e1       	ldi	r18, 0x14	; 20
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	46 d4       	rcall	.+2188   	; 0x114e <__divmodsi4>
     8c2:	f7 01       	movw	r30, r14
     8c4:	20 83       	st	Z, r18
     8c6:	31 83       	std	Z+1, r19	; 0x01
     8c8:	42 83       	std	Z+2, r20	; 0x02
     8ca:	53 83       	std	Z+3, r21	; 0x03
	
	if(*z<0)
     8cc:	f8 01       	movw	r30, r16
     8ce:	60 81       	ld	r22, Z
     8d0:	71 81       	ldd	r23, Z+1	; 0x01
     8d2:	82 81       	ldd	r24, Z+2	; 0x02
     8d4:	93 81       	ldd	r25, Z+3	; 0x03
     8d6:	99 23       	and	r25, r25
     8d8:	ac f4       	brge	.+42     	; 0x904 <mpu6050_calibrate_accel+0x148>
	(*z)=abs(*z)/calibration_counter;
     8da:	9b 01       	movw	r18, r22
     8dc:	77 23       	and	r23, r23
     8de:	24 f4       	brge	.+8      	; 0x8e8 <mpu6050_calibrate_accel+0x12c>
     8e0:	22 27       	eor	r18, r18
     8e2:	33 27       	eor	r19, r19
     8e4:	26 1b       	sub	r18, r22
     8e6:	37 0b       	sbc	r19, r23
     8e8:	c9 01       	movw	r24, r18
     8ea:	64 e1       	ldi	r22, 0x14	; 20
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	1c d4       	rcall	.+2104   	; 0x1128 <__divmodhi4>
     8f0:	cb 01       	movw	r24, r22
     8f2:	77 0f       	add	r23, r23
     8f4:	aa 0b       	sbc	r26, r26
     8f6:	bb 0b       	sbc	r27, r27
     8f8:	f8 01       	movw	r30, r16
     8fa:	80 83       	st	Z, r24
     8fc:	91 83       	std	Z+1, r25	; 0x01
     8fe:	a2 83       	std	Z+2, r26	; 0x02
     900:	b3 83       	std	Z+3, r27	; 0x03
     902:	0a c0       	rjmp	.+20     	; 0x918 <mpu6050_calibrate_accel+0x15c>
	else
	(*z)=(*z)/calibration_counter;
     904:	24 e1       	ldi	r18, 0x14	; 20
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	20 d4       	rcall	.+2112   	; 0x114e <__divmodsi4>
     90e:	f8 01       	movw	r30, r16
     910:	20 83       	st	Z, r18
     912:	31 83       	std	Z+1, r19	; 0x01
     914:	42 83       	std	Z+2, r20	; 0x02
     916:	53 83       	std	Z+3, r21	; 0x03
	printf("  ");
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/
}
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	ef 90       	pop	r14
     924:	df 90       	pop	r13
     926:	cf 90       	pop	r12
     928:	08 95       	ret

0000092a <mpu6050_writeByte>:
	uint8_t byteToReturn=i2c_readNak();
	i2c_stop();
	return byteToReturn;
}
void mpu6050_writeByte(uint8_t wereToWrite,uint8_t byteToWrite)//writebyte
{
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	d8 2f       	mov	r29, r24
     930:	c6 2f       	mov	r28, r22
	i2c_start(MPU6050_WRITE);
     932:	80 ed       	ldi	r24, 0xD0	; 208
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	d5 d0       	rcall	.+426    	; 0xae2 <i2c_start>
	i2c_write(wereToWrite);
     938:	8d 2f       	mov	r24, r29
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	28 d1       	rcall	.+592    	; 0xb8e <i2c_write>
	i2c_write(byteToWrite);
     93e:	8c 2f       	mov	r24, r28
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	25 d1       	rcall	.+586    	; 0xb8e <i2c_write>
	i2c_stop();
     944:	14 d1       	rcall	.+552    	; 0xb6e <i2c_stop>
}
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	08 95       	ret

0000094c <mpu6050_readBytes>:
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
     94c:	af 92       	push	r10
     94e:	bf 92       	push	r11
     950:	df 92       	push	r13
     952:	ef 92       	push	r14
     954:	ff 92       	push	r15
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
     95e:	66 23       	and	r22, r22
     960:	a1 f1       	breq	.+104    	; 0x9ca <mpu6050_readBytes+0x7e>
     962:	c5 2f       	mov	r28, r21
     964:	d4 2f       	mov	r29, r20
     966:	d6 2e       	mov	r13, r22
     968:	18 2f       	mov	r17, r24
		//request register
		i2c_start(MPU6050_WRITE);
     96a:	80 ed       	ldi	r24, 0xD0	; 208
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	b9 d0       	rcall	.+370    	; 0xae2 <i2c_start>
		i2c_write(regAddr);
     970:	81 2f       	mov	r24, r17
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0c d1       	rcall	.+536    	; 0xb8e <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     976:	85 e3       	ldi	r24, 0x35	; 53
     978:	8a 95       	dec	r24
     97a:	f1 f7       	brne	.-4      	; 0x978 <mpu6050_readBytes+0x2c>
     97c:	00 00       	nop
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
     97e:	81 ed       	ldi	r24, 0xD1	; 209
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	af d0       	rcall	.+350    	; 0xae2 <i2c_start>
     984:	0d 2f       	mov	r16, r29
     986:	1c 2f       	mov	r17, r28
     988:	ee 24       	eor	r14, r14
     98a:	ea 94       	dec	r14
     98c:	ed 0c       	add	r14, r13
     98e:	f1 2c       	mov	r15, r1
     990:	ef ef       	ldi	r30, 0xFF	; 255
     992:	ee 1a       	sub	r14, r30
     994:	fe 0a       	sbc	r15, r30
     996:	c0 e0       	ldi	r28, 0x00	; 0
     998:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
     99a:	ad 2c       	mov	r10, r13
     99c:	b1 2c       	mov	r11, r1
     99e:	f1 e0       	ldi	r31, 0x01	; 1
     9a0:	af 1a       	sub	r10, r31
     9a2:	b1 08       	sbc	r11, r1
     9a4:	ca 15       	cp	r28, r10
     9a6:	db 05       	cpc	r29, r11
     9a8:	21 f4       	brne	.+8      	; 0x9b2 <mpu6050_readBytes+0x66>
			data[i] = i2c_readNak();
     9aa:	2c d1       	rcall	.+600    	; 0xc04 <i2c_readNak>
     9ac:	f8 01       	movw	r30, r16
     9ae:	80 83       	st	Z, r24
     9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <mpu6050_readBytes+0x6c>
			else
			data[i] = i2c_readAck();
     9b2:	0e d1       	rcall	.+540    	; 0xbd0 <i2c_readAck>
     9b4:	f8 01       	movw	r30, r16
     9b6:	80 83       	st	Z, r24
     9b8:	21 96       	adiw	r28, 0x01	; 1
     9ba:	0f 5f       	subi	r16, 0xFF	; 255
     9bc:	1f 4f       	sbci	r17, 0xFF	; 255
		i2c_start(MPU6050_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
		for(i=0; i<length; i++) {
     9be:	ce 15       	cp	r28, r14
     9c0:	df 05       	cpc	r29, r15
     9c2:	81 f7       	brne	.-32     	; 0x9a4 <mpu6050_readBytes+0x58>
     9c4:	cd 2d       	mov	r28, r13
			if(i==length-1)
			data[i] = i2c_readNak();
			else
			data[i] = i2c_readAck();
		}
		i2c_stop();
     9c6:	d3 d0       	rcall	.+422    	; 0xb6e <i2c_stop>
     9c8:	01 c0       	rjmp	.+2      	; 0x9cc <mpu6050_readBytes+0x80>
	i2c_write(byteToWrite);
	i2c_stop();
}
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
	uint8_t i = 0;
	int8_t count = 0;
     9ca:	c0 e0       	ldi	r28, 0x00	; 0
			data[i] = i2c_readAck();
		}
		i2c_stop();
	}
	return count;
}
     9cc:	8c 2f       	mov	r24, r28
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	df 90       	pop	r13
     9dc:	bf 90       	pop	r11
     9de:	af 90       	pop	r10
     9e0:	08 95       	ret

000009e2 <mpu6050_getRawData>:
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     9e2:	6f 92       	push	r6
     9e4:	7f 92       	push	r7
     9e6:	8f 92       	push	r8
     9e8:	9f 92       	push	r9
     9ea:	af 92       	push	r10
     9ec:	bf 92       	push	r11
     9ee:	cf 92       	push	r12
     9f0:	df 92       	push	r13
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	cd b7       	in	r28, 0x3d	; 61
     a00:	de b7       	in	r29, 0x3e	; 62
     a02:	2e 97       	sbiw	r28, 0x0e	; 14
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	f8 94       	cli
     a08:	de bf       	out	0x3e, r29	; 62
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	cd bf       	out	0x3d, r28	; 61
     a0e:	4c 01       	movw	r8, r24
     a10:	5b 01       	movw	r10, r22
     a12:	6a 01       	movw	r12, r20
     a14:	39 01       	movw	r6, r18
	uint8_t buffer[14];
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14,  buffer);
     a16:	ae 01       	movw	r20, r28
     a18:	4f 5f       	subi	r20, 0xFF	; 255
     a1a:	5f 4f       	sbci	r21, 0xFF	; 255
     a1c:	6e e0       	ldi	r22, 0x0E	; 14
     a1e:	8b e3       	ldi	r24, 0x3B	; 59
     a20:	95 df       	rcall	.-214    	; 0x94c <mpu6050_readBytes>
	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     a22:	89 81       	ldd	r24, Y+1	; 0x01
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	98 2f       	mov	r25, r24
     a28:	88 27       	eor	r24, r24
     a2a:	2a 81       	ldd	r18, Y+2	; 0x02
     a2c:	82 2b       	or	r24, r18
     a2e:	f4 01       	movw	r30, r8
     a30:	91 83       	std	Z+1, r25	; 0x01
     a32:	80 83       	st	Z, r24
	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     a34:	8b 81       	ldd	r24, Y+3	; 0x03
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	98 2f       	mov	r25, r24
     a3a:	88 27       	eor	r24, r24
     a3c:	2c 81       	ldd	r18, Y+4	; 0x04
     a3e:	82 2b       	or	r24, r18
     a40:	f5 01       	movw	r30, r10
     a42:	91 83       	std	Z+1, r25	; 0x01
     a44:	80 83       	st	Z, r24
	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
     a46:	8d 81       	ldd	r24, Y+5	; 0x05
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	98 2f       	mov	r25, r24
     a4c:	88 27       	eor	r24, r24
     a4e:	2e 81       	ldd	r18, Y+6	; 0x06
     a50:	82 2b       	or	r24, r18
     a52:	f6 01       	movw	r30, r12
     a54:	91 83       	std	Z+1, r25	; 0x01
     a56:	80 83       	st	Z, r24
	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     a58:	89 85       	ldd	r24, Y+9	; 0x09
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	98 2f       	mov	r25, r24
     a5e:	88 27       	eor	r24, r24
     a60:	2a 85       	ldd	r18, Y+10	; 0x0a
     a62:	82 2b       	or	r24, r18
     a64:	f3 01       	movw	r30, r6
     a66:	91 83       	std	Z+1, r25	; 0x01
     a68:	80 83       	st	Z, r24
	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     a6a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	98 2f       	mov	r25, r24
     a70:	88 27       	eor	r24, r24
     a72:	2c 85       	ldd	r18, Y+12	; 0x0c
     a74:	82 2b       	or	r24, r18
     a76:	f8 01       	movw	r30, r16
     a78:	91 83       	std	Z+1, r25	; 0x01
     a7a:	80 83       	st	Z, r24
	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	98 2f       	mov	r25, r24
     a82:	88 27       	eor	r24, r24
     a84:	2e 85       	ldd	r18, Y+14	; 0x0e
     a86:	82 2b       	or	r24, r18
     a88:	f7 01       	movw	r30, r14
     a8a:	91 83       	std	Z+1, r25	; 0x01
     a8c:	80 83       	st	Z, r24
     a8e:	2e 96       	adiw	r28, 0x0e	; 14
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	de bf       	out	0x3e, r29	; 62
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	cd bf       	out	0x3d, r28	; 61
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	df 90       	pop	r13
     aa8:	cf 90       	pop	r12
     aaa:	bf 90       	pop	r11
     aac:	af 90       	pop	r10
     aae:	9f 90       	pop	r9
     ab0:	8f 90       	pop	r8
     ab2:	7f 90       	pop	r7
     ab4:	6f 90       	pop	r6
     ab6:	08 95       	ret

00000ab8 <setup_timer3>:
void setup_timer3(void)
{
	//64 pres, 250.000 hz 0.000004s
	//sbi (TCCR5B, CS50);//only this no prescaling
	
	sbi (TCCR3B, CS30);//only this 8
     ab8:	e1 e9       	ldi	r30, 0x91	; 145
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	80 81       	ld	r24, Z
     abe:	81 60       	ori	r24, 0x01	; 1
     ac0:	80 83       	st	Z, r24
	//sbi (TCCR5B, CS52);//only this 256
	sbi (TCCR3B, WGM32);//OCR4A compare interrupt
     ac2:	80 81       	ld	r24, Z
     ac4:	88 60       	ori	r24, 0x08	; 8
     ac6:	80 83       	st	Z, r24
     ac8:	08 95       	ret

00000aca <Enable_timer3_compare_interrupt>:
}
void Enable_timer3_compare_interrupt()
{
	sbi (TIMSK3, OCIE3A);
     aca:	e1 e7       	ldi	r30, 0x71	; 113
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	80 81       	ld	r24, Z
     ad0:	82 60       	ori	r24, 0x02	; 2
     ad2:	80 83       	st	Z, r24
     ad4:	08 95       	ret

00000ad6 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     ad6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     ada:	8c e0       	ldi	r24, 0x0C	; 12
     adc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     ae0:	08 95       	ret

00000ae2 <i2c_start>:
     ae2:	94 ea       	ldi	r25, 0xA4	; 164
     ae4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     ae8:	4f ef       	ldi	r20, 0xFF	; 255
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	ec eb       	ldi	r30, 0xBC	; 188
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	90 81       	ld	r25, Z
     af6:	99 23       	and	r25, r25
     af8:	34 f0       	brlt	.+12     	; 0xb06 <i2c_start+0x24>
     afa:	41 50       	subi	r20, 0x01	; 1
     afc:	51 09       	sbc	r21, r1
     afe:	61 09       	sbc	r22, r1
     b00:	71 09       	sbc	r23, r1
     b02:	c0 f7       	brcc	.-16     	; 0xaf4 <i2c_start+0x12>
     b04:	04 c0       	rjmp	.+8      	; 0xb0e <i2c_start+0x2c>
     b06:	45 2b       	or	r20, r21
     b08:	46 2b       	or	r20, r22
     b0a:	47 2b       	or	r20, r23
     b0c:	41 f1       	breq	.+80     	; 0xb5e <i2c_start+0x7c>
     b0e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     b12:	98 7f       	andi	r25, 0xF8	; 248
     b14:	98 30       	cpi	r25, 0x08	; 8
     b16:	11 f0       	breq	.+4      	; 0xb1c <i2c_start+0x3a>
     b18:	90 31       	cpi	r25, 0x10	; 16
     b1a:	19 f5       	brne	.+70     	; 0xb62 <i2c_start+0x80>
     b1c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     b20:	84 e8       	ldi	r24, 0x84	; 132
     b22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     b26:	8f ef       	ldi	r24, 0xFF	; 255
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	ec eb       	ldi	r30, 0xBC	; 188
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	20 81       	ld	r18, Z
     b34:	22 23       	and	r18, r18
     b36:	2c f0       	brlt	.+10     	; 0xb42 <i2c_start+0x60>
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	a1 09       	sbc	r26, r1
     b3c:	b1 09       	sbc	r27, r1
     b3e:	c8 f7       	brcc	.-14     	; 0xb32 <i2c_start+0x50>
     b40:	04 c0       	rjmp	.+8      	; 0xb4a <i2c_start+0x68>
     b42:	89 2b       	or	r24, r25
     b44:	8a 2b       	or	r24, r26
     b46:	8b 2b       	or	r24, r27
     b48:	71 f0       	breq	.+28     	; 0xb66 <i2c_start+0x84>
     b4a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     b4e:	98 7f       	andi	r25, 0xF8	; 248
     b50:	98 31       	cpi	r25, 0x18	; 24
     b52:	59 f0       	breq	.+22     	; 0xb6a <i2c_start+0x88>
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	90 34       	cpi	r25, 0x40	; 64
     b58:	49 f4       	brne	.+18     	; 0xb6c <i2c_start+0x8a>
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	08 95       	ret
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	08 95       	ret
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	08 95       	ret
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	08 95       	ret
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	08 95       	ret

00000b6e <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     b6e:	84 e9       	ldi	r24, 0x94	; 148
     b70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	ec eb       	ldi	r30, 0xBC	; 188
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	20 81       	ld	r18, Z
     b7e:	24 ff       	sbrs	r18, 4
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <i2c_stop+0x1e>
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	81 15       	cp	r24, r1
     b86:	21 e0       	ldi	r18, 0x01	; 1
     b88:	92 07       	cpc	r25, r18
     b8a:	c1 f7       	brne	.-16     	; 0xb7c <i2c_stop+0xe>
     b8c:	08 95       	ret

00000b8e <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     b8e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     b92:	84 e8       	ldi	r24, 0x84	; 132
     b94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     b98:	8f ef       	ldi	r24, 0xFF	; 255
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     ba0:	ec eb       	ldi	r30, 0xBC	; 188
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	20 81       	ld	r18, Z
     ba6:	22 23       	and	r18, r18
     ba8:	2c f0       	brlt	.+10     	; 0xbb4 <i2c_write+0x26>
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	a1 09       	sbc	r26, r1
     bae:	b1 09       	sbc	r27, r1
     bb0:	c8 f7       	brcc	.-14     	; 0xba4 <i2c_write+0x16>
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <i2c_write+0x2e>
	if(i2c_timer == 0)
     bb4:	89 2b       	or	r24, r25
     bb6:	8a 2b       	or	r24, r26
     bb8:	8b 2b       	or	r24, r27
     bba:	41 f0       	breq	.+16     	; 0xbcc <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     bbc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     bc0:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	98 32       	cpi	r25, 0x28	; 40
     bc6:	19 f4       	brne	.+6      	; 0xbce <i2c_write+0x40>
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     bce:	08 95       	ret

00000bd0 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     bd0:	84 ec       	ldi	r24, 0xC4	; 196
     bd2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
     bd6:	8f ef       	ldi	r24, 0xFF	; 255
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     bde:	ec eb       	ldi	r30, 0xBC	; 188
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	20 81       	ld	r18, Z
     be4:	22 23       	and	r18, r18
     be6:	2c f0       	brlt	.+10     	; 0xbf2 <i2c_readAck+0x22>
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	a1 09       	sbc	r26, r1
     bec:	b1 09       	sbc	r27, r1
     bee:	c8 f7       	brcc	.-14     	; 0xbe2 <i2c_readAck+0x12>
     bf0:	04 c0       	rjmp	.+8      	; 0xbfa <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     bf2:	89 2b       	or	r24, r25
     bf4:	8a 2b       	or	r24, r26
     bf6:	8b 2b       	or	r24, r27
     bf8:	19 f0       	breq	.+6      	; 0xc00 <i2c_readAck+0x30>
		return 0;

    return TWDR;
     bfa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     bfe:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     c00:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     c02:	08 95       	ret

00000c04 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     c04:	84 e8       	ldi	r24, 0x84	; 132
     c06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
     c0a:	8f ef       	ldi	r24, 0xFF	; 255
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	a0 e0       	ldi	r26, 0x00	; 0
     c10:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     c12:	ec eb       	ldi	r30, 0xBC	; 188
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	20 81       	ld	r18, Z
     c18:	22 23       	and	r18, r18
     c1a:	2c f0       	brlt	.+10     	; 0xc26 <i2c_readNak+0x22>
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	a1 09       	sbc	r26, r1
     c20:	b1 09       	sbc	r27, r1
     c22:	c8 f7       	brcc	.-14     	; 0xc16 <i2c_readNak+0x12>
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     c26:	89 2b       	or	r24, r25
     c28:	8a 2b       	or	r24, r26
     c2a:	8b 2b       	or	r24, r27
     c2c:	19 f0       	breq	.+6      	; 0xc34 <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     c2e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     c32:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     c34:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     c36:	08 95       	ret

00000c38 <USART_Init>:
#include <avr/io.h>
#include <stdio.h>
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     c38:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;
     c3c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	UCSR0B = (1<<TXEN0);// | (1<<TXCIE0);
     c40:	88 e0       	ldi	r24, 0x08	; 8
     c42:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);//2 stop bit 8 bit
     c46:	8e e0       	ldi	r24, 0x0E	; 14
     c48:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     c4c:	08 95       	ret

00000c4e <__subsf3>:
     c4e:	50 58       	subi	r21, 0x80	; 128

00000c50 <__addsf3>:
     c50:	bb 27       	eor	r27, r27
     c52:	aa 27       	eor	r26, r26
     c54:	0e d0       	rcall	.+28     	; 0xc72 <__addsf3x>
     c56:	48 c1       	rjmp	.+656    	; 0xee8 <__fp_round>
     c58:	39 d1       	rcall	.+626    	; 0xecc <__fp_pscA>
     c5a:	30 f0       	brcs	.+12     	; 0xc68 <__addsf3+0x18>
     c5c:	3e d1       	rcall	.+636    	; 0xeda <__fp_pscB>
     c5e:	20 f0       	brcs	.+8      	; 0xc68 <__addsf3+0x18>
     c60:	31 f4       	brne	.+12     	; 0xc6e <__addsf3+0x1e>
     c62:	9f 3f       	cpi	r25, 0xFF	; 255
     c64:	11 f4       	brne	.+4      	; 0xc6a <__addsf3+0x1a>
     c66:	1e f4       	brtc	.+6      	; 0xc6e <__addsf3+0x1e>
     c68:	2e c1       	rjmp	.+604    	; 0xec6 <__fp_nan>
     c6a:	0e f4       	brtc	.+2      	; 0xc6e <__addsf3+0x1e>
     c6c:	e0 95       	com	r30
     c6e:	e7 fb       	bst	r30, 7
     c70:	24 c1       	rjmp	.+584    	; 0xeba <__fp_inf>

00000c72 <__addsf3x>:
     c72:	e9 2f       	mov	r30, r25
     c74:	4a d1       	rcall	.+660    	; 0xf0a <__fp_split3>
     c76:	80 f3       	brcs	.-32     	; 0xc58 <__addsf3+0x8>
     c78:	ba 17       	cp	r27, r26
     c7a:	62 07       	cpc	r22, r18
     c7c:	73 07       	cpc	r23, r19
     c7e:	84 07       	cpc	r24, r20
     c80:	95 07       	cpc	r25, r21
     c82:	18 f0       	brcs	.+6      	; 0xc8a <__addsf3x+0x18>
     c84:	71 f4       	brne	.+28     	; 0xca2 <__addsf3x+0x30>
     c86:	9e f5       	brtc	.+102    	; 0xcee <__addsf3x+0x7c>
     c88:	62 c1       	rjmp	.+708    	; 0xf4e <__fp_zero>
     c8a:	0e f4       	brtc	.+2      	; 0xc8e <__addsf3x+0x1c>
     c8c:	e0 95       	com	r30
     c8e:	0b 2e       	mov	r0, r27
     c90:	ba 2f       	mov	r27, r26
     c92:	a0 2d       	mov	r26, r0
     c94:	0b 01       	movw	r0, r22
     c96:	b9 01       	movw	r22, r18
     c98:	90 01       	movw	r18, r0
     c9a:	0c 01       	movw	r0, r24
     c9c:	ca 01       	movw	r24, r20
     c9e:	a0 01       	movw	r20, r0
     ca0:	11 24       	eor	r1, r1
     ca2:	ff 27       	eor	r31, r31
     ca4:	59 1b       	sub	r21, r25
     ca6:	99 f0       	breq	.+38     	; 0xcce <__addsf3x+0x5c>
     ca8:	59 3f       	cpi	r21, 0xF9	; 249
     caa:	50 f4       	brcc	.+20     	; 0xcc0 <__addsf3x+0x4e>
     cac:	50 3e       	cpi	r21, 0xE0	; 224
     cae:	68 f1       	brcs	.+90     	; 0xd0a <__addsf3x+0x98>
     cb0:	1a 16       	cp	r1, r26
     cb2:	f0 40       	sbci	r31, 0x00	; 0
     cb4:	a2 2f       	mov	r26, r18
     cb6:	23 2f       	mov	r18, r19
     cb8:	34 2f       	mov	r19, r20
     cba:	44 27       	eor	r20, r20
     cbc:	58 5f       	subi	r21, 0xF8	; 248
     cbe:	f3 cf       	rjmp	.-26     	; 0xca6 <__addsf3x+0x34>
     cc0:	46 95       	lsr	r20
     cc2:	37 95       	ror	r19
     cc4:	27 95       	ror	r18
     cc6:	a7 95       	ror	r26
     cc8:	f0 40       	sbci	r31, 0x00	; 0
     cca:	53 95       	inc	r21
     ccc:	c9 f7       	brne	.-14     	; 0xcc0 <__addsf3x+0x4e>
     cce:	7e f4       	brtc	.+30     	; 0xcee <__addsf3x+0x7c>
     cd0:	1f 16       	cp	r1, r31
     cd2:	ba 0b       	sbc	r27, r26
     cd4:	62 0b       	sbc	r22, r18
     cd6:	73 0b       	sbc	r23, r19
     cd8:	84 0b       	sbc	r24, r20
     cda:	ba f0       	brmi	.+46     	; 0xd0a <__addsf3x+0x98>
     cdc:	91 50       	subi	r25, 0x01	; 1
     cde:	a1 f0       	breq	.+40     	; 0xd08 <__addsf3x+0x96>
     ce0:	ff 0f       	add	r31, r31
     ce2:	bb 1f       	adc	r27, r27
     ce4:	66 1f       	adc	r22, r22
     ce6:	77 1f       	adc	r23, r23
     ce8:	88 1f       	adc	r24, r24
     cea:	c2 f7       	brpl	.-16     	; 0xcdc <__addsf3x+0x6a>
     cec:	0e c0       	rjmp	.+28     	; 0xd0a <__addsf3x+0x98>
     cee:	ba 0f       	add	r27, r26
     cf0:	62 1f       	adc	r22, r18
     cf2:	73 1f       	adc	r23, r19
     cf4:	84 1f       	adc	r24, r20
     cf6:	48 f4       	brcc	.+18     	; 0xd0a <__addsf3x+0x98>
     cf8:	87 95       	ror	r24
     cfa:	77 95       	ror	r23
     cfc:	67 95       	ror	r22
     cfe:	b7 95       	ror	r27
     d00:	f7 95       	ror	r31
     d02:	9e 3f       	cpi	r25, 0xFE	; 254
     d04:	08 f0       	brcs	.+2      	; 0xd08 <__addsf3x+0x96>
     d06:	b3 cf       	rjmp	.-154    	; 0xc6e <__addsf3+0x1e>
     d08:	93 95       	inc	r25
     d0a:	88 0f       	add	r24, r24
     d0c:	08 f0       	brcs	.+2      	; 0xd10 <__addsf3x+0x9e>
     d0e:	99 27       	eor	r25, r25
     d10:	ee 0f       	add	r30, r30
     d12:	97 95       	ror	r25
     d14:	87 95       	ror	r24
     d16:	08 95       	ret

00000d18 <__divsf3>:
     d18:	0c d0       	rcall	.+24     	; 0xd32 <__divsf3x>
     d1a:	e6 c0       	rjmp	.+460    	; 0xee8 <__fp_round>
     d1c:	de d0       	rcall	.+444    	; 0xeda <__fp_pscB>
     d1e:	40 f0       	brcs	.+16     	; 0xd30 <__divsf3+0x18>
     d20:	d5 d0       	rcall	.+426    	; 0xecc <__fp_pscA>
     d22:	30 f0       	brcs	.+12     	; 0xd30 <__divsf3+0x18>
     d24:	21 f4       	brne	.+8      	; 0xd2e <__divsf3+0x16>
     d26:	5f 3f       	cpi	r21, 0xFF	; 255
     d28:	19 f0       	breq	.+6      	; 0xd30 <__divsf3+0x18>
     d2a:	c7 c0       	rjmp	.+398    	; 0xeba <__fp_inf>
     d2c:	51 11       	cpse	r21, r1
     d2e:	10 c1       	rjmp	.+544    	; 0xf50 <__fp_szero>
     d30:	ca c0       	rjmp	.+404    	; 0xec6 <__fp_nan>

00000d32 <__divsf3x>:
     d32:	eb d0       	rcall	.+470    	; 0xf0a <__fp_split3>
     d34:	98 f3       	brcs	.-26     	; 0xd1c <__divsf3+0x4>

00000d36 <__divsf3_pse>:
     d36:	99 23       	and	r25, r25
     d38:	c9 f3       	breq	.-14     	; 0xd2c <__divsf3+0x14>
     d3a:	55 23       	and	r21, r21
     d3c:	b1 f3       	breq	.-20     	; 0xd2a <__divsf3+0x12>
     d3e:	95 1b       	sub	r25, r21
     d40:	55 0b       	sbc	r21, r21
     d42:	bb 27       	eor	r27, r27
     d44:	aa 27       	eor	r26, r26
     d46:	62 17       	cp	r22, r18
     d48:	73 07       	cpc	r23, r19
     d4a:	84 07       	cpc	r24, r20
     d4c:	38 f0       	brcs	.+14     	; 0xd5c <__divsf3_pse+0x26>
     d4e:	9f 5f       	subi	r25, 0xFF	; 255
     d50:	5f 4f       	sbci	r21, 0xFF	; 255
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	aa 1f       	adc	r26, r26
     d5a:	a9 f3       	breq	.-22     	; 0xd46 <__divsf3_pse+0x10>
     d5c:	33 d0       	rcall	.+102    	; 0xdc4 <__divsf3_pse+0x8e>
     d5e:	0e 2e       	mov	r0, r30
     d60:	3a f0       	brmi	.+14     	; 0xd70 <__divsf3_pse+0x3a>
     d62:	e0 e8       	ldi	r30, 0x80	; 128
     d64:	30 d0       	rcall	.+96     	; 0xdc6 <__divsf3_pse+0x90>
     d66:	91 50       	subi	r25, 0x01	; 1
     d68:	50 40       	sbci	r21, 0x00	; 0
     d6a:	e6 95       	lsr	r30
     d6c:	00 1c       	adc	r0, r0
     d6e:	ca f7       	brpl	.-14     	; 0xd62 <__divsf3_pse+0x2c>
     d70:	29 d0       	rcall	.+82     	; 0xdc4 <__divsf3_pse+0x8e>
     d72:	fe 2f       	mov	r31, r30
     d74:	27 d0       	rcall	.+78     	; 0xdc4 <__divsf3_pse+0x8e>
     d76:	66 0f       	add	r22, r22
     d78:	77 1f       	adc	r23, r23
     d7a:	88 1f       	adc	r24, r24
     d7c:	bb 1f       	adc	r27, r27
     d7e:	26 17       	cp	r18, r22
     d80:	37 07       	cpc	r19, r23
     d82:	48 07       	cpc	r20, r24
     d84:	ab 07       	cpc	r26, r27
     d86:	b0 e8       	ldi	r27, 0x80	; 128
     d88:	09 f0       	breq	.+2      	; 0xd8c <__divsf3_pse+0x56>
     d8a:	bb 0b       	sbc	r27, r27
     d8c:	80 2d       	mov	r24, r0
     d8e:	bf 01       	movw	r22, r30
     d90:	ff 27       	eor	r31, r31
     d92:	93 58       	subi	r25, 0x83	; 131
     d94:	5f 4f       	sbci	r21, 0xFF	; 255
     d96:	2a f0       	brmi	.+10     	; 0xda2 <__divsf3_pse+0x6c>
     d98:	9e 3f       	cpi	r25, 0xFE	; 254
     d9a:	51 05       	cpc	r21, r1
     d9c:	68 f0       	brcs	.+26     	; 0xdb8 <__divsf3_pse+0x82>
     d9e:	8d c0       	rjmp	.+282    	; 0xeba <__fp_inf>
     da0:	d7 c0       	rjmp	.+430    	; 0xf50 <__fp_szero>
     da2:	5f 3f       	cpi	r21, 0xFF	; 255
     da4:	ec f3       	brlt	.-6      	; 0xda0 <__divsf3_pse+0x6a>
     da6:	98 3e       	cpi	r25, 0xE8	; 232
     da8:	dc f3       	brlt	.-10     	; 0xda0 <__divsf3_pse+0x6a>
     daa:	86 95       	lsr	r24
     dac:	77 95       	ror	r23
     dae:	67 95       	ror	r22
     db0:	b7 95       	ror	r27
     db2:	f7 95       	ror	r31
     db4:	9f 5f       	subi	r25, 0xFF	; 255
     db6:	c9 f7       	brne	.-14     	; 0xdaa <__divsf3_pse+0x74>
     db8:	88 0f       	add	r24, r24
     dba:	91 1d       	adc	r25, r1
     dbc:	96 95       	lsr	r25
     dbe:	87 95       	ror	r24
     dc0:	97 f9       	bld	r25, 7
     dc2:	08 95       	ret
     dc4:	e1 e0       	ldi	r30, 0x01	; 1
     dc6:	66 0f       	add	r22, r22
     dc8:	77 1f       	adc	r23, r23
     dca:	88 1f       	adc	r24, r24
     dcc:	bb 1f       	adc	r27, r27
     dce:	62 17       	cp	r22, r18
     dd0:	73 07       	cpc	r23, r19
     dd2:	84 07       	cpc	r24, r20
     dd4:	ba 07       	cpc	r27, r26
     dd6:	20 f0       	brcs	.+8      	; 0xde0 <__divsf3_pse+0xaa>
     dd8:	62 1b       	sub	r22, r18
     dda:	73 0b       	sbc	r23, r19
     ddc:	84 0b       	sbc	r24, r20
     dde:	ba 0b       	sbc	r27, r26
     de0:	ee 1f       	adc	r30, r30
     de2:	88 f7       	brcc	.-30     	; 0xdc6 <__divsf3_pse+0x90>
     de4:	e0 95       	com	r30
     de6:	08 95       	ret

00000de8 <__fixunssfsi>:
     de8:	98 d0       	rcall	.+304    	; 0xf1a <__fp_splitA>
     dea:	88 f0       	brcs	.+34     	; 0xe0e <__fixunssfsi+0x26>
     dec:	9f 57       	subi	r25, 0x7F	; 127
     dee:	90 f0       	brcs	.+36     	; 0xe14 <__fixunssfsi+0x2c>
     df0:	b9 2f       	mov	r27, r25
     df2:	99 27       	eor	r25, r25
     df4:	b7 51       	subi	r27, 0x17	; 23
     df6:	a0 f0       	brcs	.+40     	; 0xe20 <__fixunssfsi+0x38>
     df8:	d1 f0       	breq	.+52     	; 0xe2e <__fixunssfsi+0x46>
     dfa:	66 0f       	add	r22, r22
     dfc:	77 1f       	adc	r23, r23
     dfe:	88 1f       	adc	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	1a f0       	brmi	.+6      	; 0xe0a <__fixunssfsi+0x22>
     e04:	ba 95       	dec	r27
     e06:	c9 f7       	brne	.-14     	; 0xdfa <__fixunssfsi+0x12>
     e08:	12 c0       	rjmp	.+36     	; 0xe2e <__fixunssfsi+0x46>
     e0a:	b1 30       	cpi	r27, 0x01	; 1
     e0c:	81 f0       	breq	.+32     	; 0xe2e <__fixunssfsi+0x46>
     e0e:	9f d0       	rcall	.+318    	; 0xf4e <__fp_zero>
     e10:	b1 e0       	ldi	r27, 0x01	; 1
     e12:	08 95       	ret
     e14:	9c c0       	rjmp	.+312    	; 0xf4e <__fp_zero>
     e16:	67 2f       	mov	r22, r23
     e18:	78 2f       	mov	r23, r24
     e1a:	88 27       	eor	r24, r24
     e1c:	b8 5f       	subi	r27, 0xF8	; 248
     e1e:	39 f0       	breq	.+14     	; 0xe2e <__fixunssfsi+0x46>
     e20:	b9 3f       	cpi	r27, 0xF9	; 249
     e22:	cc f3       	brlt	.-14     	; 0xe16 <__fixunssfsi+0x2e>
     e24:	86 95       	lsr	r24
     e26:	77 95       	ror	r23
     e28:	67 95       	ror	r22
     e2a:	b3 95       	inc	r27
     e2c:	d9 f7       	brne	.-10     	; 0xe24 <__fixunssfsi+0x3c>
     e2e:	3e f4       	brtc	.+14     	; 0xe3e <__fixunssfsi+0x56>
     e30:	90 95       	com	r25
     e32:	80 95       	com	r24
     e34:	70 95       	com	r23
     e36:	61 95       	neg	r22
     e38:	7f 4f       	sbci	r23, 0xFF	; 255
     e3a:	8f 4f       	sbci	r24, 0xFF	; 255
     e3c:	9f 4f       	sbci	r25, 0xFF	; 255
     e3e:	08 95       	ret

00000e40 <__floatunsisf>:
     e40:	e8 94       	clt
     e42:	09 c0       	rjmp	.+18     	; 0xe56 <__floatsisf+0x12>

00000e44 <__floatsisf>:
     e44:	97 fb       	bst	r25, 7
     e46:	3e f4       	brtc	.+14     	; 0xe56 <__floatsisf+0x12>
     e48:	90 95       	com	r25
     e4a:	80 95       	com	r24
     e4c:	70 95       	com	r23
     e4e:	61 95       	neg	r22
     e50:	7f 4f       	sbci	r23, 0xFF	; 255
     e52:	8f 4f       	sbci	r24, 0xFF	; 255
     e54:	9f 4f       	sbci	r25, 0xFF	; 255
     e56:	99 23       	and	r25, r25
     e58:	a9 f0       	breq	.+42     	; 0xe84 <__floatsisf+0x40>
     e5a:	f9 2f       	mov	r31, r25
     e5c:	96 e9       	ldi	r25, 0x96	; 150
     e5e:	bb 27       	eor	r27, r27
     e60:	93 95       	inc	r25
     e62:	f6 95       	lsr	r31
     e64:	87 95       	ror	r24
     e66:	77 95       	ror	r23
     e68:	67 95       	ror	r22
     e6a:	b7 95       	ror	r27
     e6c:	f1 11       	cpse	r31, r1
     e6e:	f8 cf       	rjmp	.-16     	; 0xe60 <__floatsisf+0x1c>
     e70:	fa f4       	brpl	.+62     	; 0xeb0 <__floatsisf+0x6c>
     e72:	bb 0f       	add	r27, r27
     e74:	11 f4       	brne	.+4      	; 0xe7a <__floatsisf+0x36>
     e76:	60 ff       	sbrs	r22, 0
     e78:	1b c0       	rjmp	.+54     	; 0xeb0 <__floatsisf+0x6c>
     e7a:	6f 5f       	subi	r22, 0xFF	; 255
     e7c:	7f 4f       	sbci	r23, 0xFF	; 255
     e7e:	8f 4f       	sbci	r24, 0xFF	; 255
     e80:	9f 4f       	sbci	r25, 0xFF	; 255
     e82:	16 c0       	rjmp	.+44     	; 0xeb0 <__floatsisf+0x6c>
     e84:	88 23       	and	r24, r24
     e86:	11 f0       	breq	.+4      	; 0xe8c <__floatsisf+0x48>
     e88:	96 e9       	ldi	r25, 0x96	; 150
     e8a:	11 c0       	rjmp	.+34     	; 0xeae <__floatsisf+0x6a>
     e8c:	77 23       	and	r23, r23
     e8e:	21 f0       	breq	.+8      	; 0xe98 <__floatsisf+0x54>
     e90:	9e e8       	ldi	r25, 0x8E	; 142
     e92:	87 2f       	mov	r24, r23
     e94:	76 2f       	mov	r23, r22
     e96:	05 c0       	rjmp	.+10     	; 0xea2 <__floatsisf+0x5e>
     e98:	66 23       	and	r22, r22
     e9a:	71 f0       	breq	.+28     	; 0xeb8 <__floatsisf+0x74>
     e9c:	96 e8       	ldi	r25, 0x86	; 134
     e9e:	86 2f       	mov	r24, r22
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	2a f0       	brmi	.+10     	; 0xeb0 <__floatsisf+0x6c>
     ea6:	9a 95       	dec	r25
     ea8:	66 0f       	add	r22, r22
     eaa:	77 1f       	adc	r23, r23
     eac:	88 1f       	adc	r24, r24
     eae:	da f7       	brpl	.-10     	; 0xea6 <__floatsisf+0x62>
     eb0:	88 0f       	add	r24, r24
     eb2:	96 95       	lsr	r25
     eb4:	87 95       	ror	r24
     eb6:	97 f9       	bld	r25, 7
     eb8:	08 95       	ret

00000eba <__fp_inf>:
     eba:	97 f9       	bld	r25, 7
     ebc:	9f 67       	ori	r25, 0x7F	; 127
     ebe:	80 e8       	ldi	r24, 0x80	; 128
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	08 95       	ret

00000ec6 <__fp_nan>:
     ec6:	9f ef       	ldi	r25, 0xFF	; 255
     ec8:	80 ec       	ldi	r24, 0xC0	; 192
     eca:	08 95       	ret

00000ecc <__fp_pscA>:
     ecc:	00 24       	eor	r0, r0
     ece:	0a 94       	dec	r0
     ed0:	16 16       	cp	r1, r22
     ed2:	17 06       	cpc	r1, r23
     ed4:	18 06       	cpc	r1, r24
     ed6:	09 06       	cpc	r0, r25
     ed8:	08 95       	ret

00000eda <__fp_pscB>:
     eda:	00 24       	eor	r0, r0
     edc:	0a 94       	dec	r0
     ede:	12 16       	cp	r1, r18
     ee0:	13 06       	cpc	r1, r19
     ee2:	14 06       	cpc	r1, r20
     ee4:	05 06       	cpc	r0, r21
     ee6:	08 95       	ret

00000ee8 <__fp_round>:
     ee8:	09 2e       	mov	r0, r25
     eea:	03 94       	inc	r0
     eec:	00 0c       	add	r0, r0
     eee:	11 f4       	brne	.+4      	; 0xef4 <__fp_round+0xc>
     ef0:	88 23       	and	r24, r24
     ef2:	52 f0       	brmi	.+20     	; 0xf08 <__fp_round+0x20>
     ef4:	bb 0f       	add	r27, r27
     ef6:	40 f4       	brcc	.+16     	; 0xf08 <__fp_round+0x20>
     ef8:	bf 2b       	or	r27, r31
     efa:	11 f4       	brne	.+4      	; 0xf00 <__fp_round+0x18>
     efc:	60 ff       	sbrs	r22, 0
     efe:	04 c0       	rjmp	.+8      	; 0xf08 <__fp_round+0x20>
     f00:	6f 5f       	subi	r22, 0xFF	; 255
     f02:	7f 4f       	sbci	r23, 0xFF	; 255
     f04:	8f 4f       	sbci	r24, 0xFF	; 255
     f06:	9f 4f       	sbci	r25, 0xFF	; 255
     f08:	08 95       	ret

00000f0a <__fp_split3>:
     f0a:	57 fd       	sbrc	r21, 7
     f0c:	90 58       	subi	r25, 0x80	; 128
     f0e:	44 0f       	add	r20, r20
     f10:	55 1f       	adc	r21, r21
     f12:	59 f0       	breq	.+22     	; 0xf2a <__fp_splitA+0x10>
     f14:	5f 3f       	cpi	r21, 0xFF	; 255
     f16:	71 f0       	breq	.+28     	; 0xf34 <__fp_splitA+0x1a>
     f18:	47 95       	ror	r20

00000f1a <__fp_splitA>:
     f1a:	88 0f       	add	r24, r24
     f1c:	97 fb       	bst	r25, 7
     f1e:	99 1f       	adc	r25, r25
     f20:	61 f0       	breq	.+24     	; 0xf3a <__fp_splitA+0x20>
     f22:	9f 3f       	cpi	r25, 0xFF	; 255
     f24:	79 f0       	breq	.+30     	; 0xf44 <__fp_splitA+0x2a>
     f26:	87 95       	ror	r24
     f28:	08 95       	ret
     f2a:	12 16       	cp	r1, r18
     f2c:	13 06       	cpc	r1, r19
     f2e:	14 06       	cpc	r1, r20
     f30:	55 1f       	adc	r21, r21
     f32:	f2 cf       	rjmp	.-28     	; 0xf18 <__fp_split3+0xe>
     f34:	46 95       	lsr	r20
     f36:	f1 df       	rcall	.-30     	; 0xf1a <__fp_splitA>
     f38:	08 c0       	rjmp	.+16     	; 0xf4a <__fp_splitA+0x30>
     f3a:	16 16       	cp	r1, r22
     f3c:	17 06       	cpc	r1, r23
     f3e:	18 06       	cpc	r1, r24
     f40:	99 1f       	adc	r25, r25
     f42:	f1 cf       	rjmp	.-30     	; 0xf26 <__fp_splitA+0xc>
     f44:	86 95       	lsr	r24
     f46:	71 05       	cpc	r23, r1
     f48:	61 05       	cpc	r22, r1
     f4a:	08 94       	sec
     f4c:	08 95       	ret

00000f4e <__fp_zero>:
     f4e:	e8 94       	clt

00000f50 <__fp_szero>:
     f50:	bb 27       	eor	r27, r27
     f52:	66 27       	eor	r22, r22
     f54:	77 27       	eor	r23, r23
     f56:	cb 01       	movw	r24, r22
     f58:	97 f9       	bld	r25, 7
     f5a:	08 95       	ret

00000f5c <__mulsf3>:
     f5c:	0b d0       	rcall	.+22     	; 0xf74 <__mulsf3x>
     f5e:	c4 cf       	rjmp	.-120    	; 0xee8 <__fp_round>
     f60:	b5 df       	rcall	.-150    	; 0xecc <__fp_pscA>
     f62:	28 f0       	brcs	.+10     	; 0xf6e <__mulsf3+0x12>
     f64:	ba df       	rcall	.-140    	; 0xeda <__fp_pscB>
     f66:	18 f0       	brcs	.+6      	; 0xf6e <__mulsf3+0x12>
     f68:	95 23       	and	r25, r21
     f6a:	09 f0       	breq	.+2      	; 0xf6e <__mulsf3+0x12>
     f6c:	a6 cf       	rjmp	.-180    	; 0xeba <__fp_inf>
     f6e:	ab cf       	rjmp	.-170    	; 0xec6 <__fp_nan>
     f70:	11 24       	eor	r1, r1
     f72:	ee cf       	rjmp	.-36     	; 0xf50 <__fp_szero>

00000f74 <__mulsf3x>:
     f74:	ca df       	rcall	.-108    	; 0xf0a <__fp_split3>
     f76:	a0 f3       	brcs	.-24     	; 0xf60 <__mulsf3+0x4>

00000f78 <__mulsf3_pse>:
     f78:	95 9f       	mul	r25, r21
     f7a:	d1 f3       	breq	.-12     	; 0xf70 <__mulsf3+0x14>
     f7c:	95 0f       	add	r25, r21
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	55 1f       	adc	r21, r21
     f82:	62 9f       	mul	r22, r18
     f84:	f0 01       	movw	r30, r0
     f86:	72 9f       	mul	r23, r18
     f88:	bb 27       	eor	r27, r27
     f8a:	f0 0d       	add	r31, r0
     f8c:	b1 1d       	adc	r27, r1
     f8e:	63 9f       	mul	r22, r19
     f90:	aa 27       	eor	r26, r26
     f92:	f0 0d       	add	r31, r0
     f94:	b1 1d       	adc	r27, r1
     f96:	aa 1f       	adc	r26, r26
     f98:	64 9f       	mul	r22, r20
     f9a:	66 27       	eor	r22, r22
     f9c:	b0 0d       	add	r27, r0
     f9e:	a1 1d       	adc	r26, r1
     fa0:	66 1f       	adc	r22, r22
     fa2:	82 9f       	mul	r24, r18
     fa4:	22 27       	eor	r18, r18
     fa6:	b0 0d       	add	r27, r0
     fa8:	a1 1d       	adc	r26, r1
     faa:	62 1f       	adc	r22, r18
     fac:	73 9f       	mul	r23, r19
     fae:	b0 0d       	add	r27, r0
     fb0:	a1 1d       	adc	r26, r1
     fb2:	62 1f       	adc	r22, r18
     fb4:	83 9f       	mul	r24, r19
     fb6:	a0 0d       	add	r26, r0
     fb8:	61 1d       	adc	r22, r1
     fba:	22 1f       	adc	r18, r18
     fbc:	74 9f       	mul	r23, r20
     fbe:	33 27       	eor	r19, r19
     fc0:	a0 0d       	add	r26, r0
     fc2:	61 1d       	adc	r22, r1
     fc4:	23 1f       	adc	r18, r19
     fc6:	84 9f       	mul	r24, r20
     fc8:	60 0d       	add	r22, r0
     fca:	21 1d       	adc	r18, r1
     fcc:	82 2f       	mov	r24, r18
     fce:	76 2f       	mov	r23, r22
     fd0:	6a 2f       	mov	r22, r26
     fd2:	11 24       	eor	r1, r1
     fd4:	9f 57       	subi	r25, 0x7F	; 127
     fd6:	50 40       	sbci	r21, 0x00	; 0
     fd8:	8a f0       	brmi	.+34     	; 0xffc <__mulsf3_pse+0x84>
     fda:	e1 f0       	breq	.+56     	; 0x1014 <__mulsf3_pse+0x9c>
     fdc:	88 23       	and	r24, r24
     fde:	4a f0       	brmi	.+18     	; 0xff2 <__mulsf3_pse+0x7a>
     fe0:	ee 0f       	add	r30, r30
     fe2:	ff 1f       	adc	r31, r31
     fe4:	bb 1f       	adc	r27, r27
     fe6:	66 1f       	adc	r22, r22
     fe8:	77 1f       	adc	r23, r23
     fea:	88 1f       	adc	r24, r24
     fec:	91 50       	subi	r25, 0x01	; 1
     fee:	50 40       	sbci	r21, 0x00	; 0
     ff0:	a9 f7       	brne	.-22     	; 0xfdc <__mulsf3_pse+0x64>
     ff2:	9e 3f       	cpi	r25, 0xFE	; 254
     ff4:	51 05       	cpc	r21, r1
     ff6:	70 f0       	brcs	.+28     	; 0x1014 <__mulsf3_pse+0x9c>
     ff8:	60 cf       	rjmp	.-320    	; 0xeba <__fp_inf>
     ffa:	aa cf       	rjmp	.-172    	; 0xf50 <__fp_szero>
     ffc:	5f 3f       	cpi	r21, 0xFF	; 255
     ffe:	ec f3       	brlt	.-6      	; 0xffa <__mulsf3_pse+0x82>
    1000:	98 3e       	cpi	r25, 0xE8	; 232
    1002:	dc f3       	brlt	.-10     	; 0xffa <__mulsf3_pse+0x82>
    1004:	86 95       	lsr	r24
    1006:	77 95       	ror	r23
    1008:	67 95       	ror	r22
    100a:	b7 95       	ror	r27
    100c:	f7 95       	ror	r31
    100e:	e7 95       	ror	r30
    1010:	9f 5f       	subi	r25, 0xFF	; 255
    1012:	c1 f7       	brne	.-16     	; 0x1004 <__mulsf3_pse+0x8c>
    1014:	fe 2b       	or	r31, r30
    1016:	88 0f       	add	r24, r24
    1018:	91 1d       	adc	r25, r1
    101a:	96 95       	lsr	r25
    101c:	87 95       	ror	r24
    101e:	97 f9       	bld	r25, 7
    1020:	08 95       	ret

00001022 <sin>:
    1022:	9f 93       	push	r25
    1024:	2a d0       	rcall	.+84     	; 0x107a <__fp_rempio2>
    1026:	0f 90       	pop	r0
    1028:	07 fc       	sbrc	r0, 7
    102a:	ee 5f       	subi	r30, 0xFE	; 254
    102c:	4d c0       	rjmp	.+154    	; 0x10c8 <__fp_sinus>

0000102e <__fp_powser>:
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	1f 93       	push	r17
    1034:	0f 93       	push	r16
    1036:	ff 92       	push	r15
    1038:	ef 92       	push	r14
    103a:	df 92       	push	r13
    103c:	7b 01       	movw	r14, r22
    103e:	8c 01       	movw	r16, r24
    1040:	68 94       	set
    1042:	05 c0       	rjmp	.+10     	; 0x104e <__fp_powser+0x20>
    1044:	da 2e       	mov	r13, r26
    1046:	ef 01       	movw	r28, r30
    1048:	95 df       	rcall	.-214    	; 0xf74 <__mulsf3x>
    104a:	fe 01       	movw	r30, r28
    104c:	e8 94       	clt
    104e:	a5 91       	lpm	r26, Z+
    1050:	25 91       	lpm	r18, Z+
    1052:	35 91       	lpm	r19, Z+
    1054:	45 91       	lpm	r20, Z+
    1056:	55 91       	lpm	r21, Z+
    1058:	ae f3       	brts	.-22     	; 0x1044 <__fp_powser+0x16>
    105a:	ef 01       	movw	r28, r30
    105c:	0a de       	rcall	.-1004   	; 0xc72 <__addsf3x>
    105e:	fe 01       	movw	r30, r28
    1060:	97 01       	movw	r18, r14
    1062:	a8 01       	movw	r20, r16
    1064:	da 94       	dec	r13
    1066:	79 f7       	brne	.-34     	; 0x1046 <__fp_powser+0x18>
    1068:	df 90       	pop	r13
    106a:	ef 90       	pop	r14
    106c:	ff 90       	pop	r15
    106e:	0f 91       	pop	r16
    1070:	1f 91       	pop	r17
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret
    1078:	26 cf       	rjmp	.-436    	; 0xec6 <__fp_nan>

0000107a <__fp_rempio2>:
    107a:	4f df       	rcall	.-354    	; 0xf1a <__fp_splitA>
    107c:	e8 f3       	brcs	.-6      	; 0x1078 <__fp_powser+0x4a>
    107e:	e8 94       	clt
    1080:	e0 e0       	ldi	r30, 0x00	; 0
    1082:	bb 27       	eor	r27, r27
    1084:	9f 57       	subi	r25, 0x7F	; 127
    1086:	f0 f0       	brcs	.+60     	; 0x10c4 <__fp_rempio2+0x4a>
    1088:	2a ed       	ldi	r18, 0xDA	; 218
    108a:	3f e0       	ldi	r19, 0x0F	; 15
    108c:	49 ec       	ldi	r20, 0xC9	; 201
    108e:	06 c0       	rjmp	.+12     	; 0x109c <__fp_rempio2+0x22>
    1090:	ee 0f       	add	r30, r30
    1092:	bb 0f       	add	r27, r27
    1094:	66 1f       	adc	r22, r22
    1096:	77 1f       	adc	r23, r23
    1098:	88 1f       	adc	r24, r24
    109a:	28 f0       	brcs	.+10     	; 0x10a6 <__fp_rempio2+0x2c>
    109c:	b2 3a       	cpi	r27, 0xA2	; 162
    109e:	62 07       	cpc	r22, r18
    10a0:	73 07       	cpc	r23, r19
    10a2:	84 07       	cpc	r24, r20
    10a4:	28 f0       	brcs	.+10     	; 0x10b0 <__fp_rempio2+0x36>
    10a6:	b2 5a       	subi	r27, 0xA2	; 162
    10a8:	62 0b       	sbc	r22, r18
    10aa:	73 0b       	sbc	r23, r19
    10ac:	84 0b       	sbc	r24, r20
    10ae:	e3 95       	inc	r30
    10b0:	9a 95       	dec	r25
    10b2:	72 f7       	brpl	.-36     	; 0x1090 <__fp_rempio2+0x16>
    10b4:	80 38       	cpi	r24, 0x80	; 128
    10b6:	30 f4       	brcc	.+12     	; 0x10c4 <__fp_rempio2+0x4a>
    10b8:	9a 95       	dec	r25
    10ba:	bb 0f       	add	r27, r27
    10bc:	66 1f       	adc	r22, r22
    10be:	77 1f       	adc	r23, r23
    10c0:	88 1f       	adc	r24, r24
    10c2:	d2 f7       	brpl	.-12     	; 0x10b8 <__fp_rempio2+0x3e>
    10c4:	90 48       	sbci	r25, 0x80	; 128
    10c6:	13 c0       	rjmp	.+38     	; 0x10ee <__fp_mpack_finite>

000010c8 <__fp_sinus>:
    10c8:	ef 93       	push	r30
    10ca:	e0 ff       	sbrs	r30, 0
    10cc:	06 c0       	rjmp	.+12     	; 0x10da <__fp_sinus+0x12>
    10ce:	a2 ea       	ldi	r26, 0xA2	; 162
    10d0:	2a ed       	ldi	r18, 0xDA	; 218
    10d2:	3f e0       	ldi	r19, 0x0F	; 15
    10d4:	49 ec       	ldi	r20, 0xC9	; 201
    10d6:	5f eb       	ldi	r21, 0xBF	; 191
    10d8:	cc dd       	rcall	.-1128   	; 0xc72 <__addsf3x>
    10da:	06 df       	rcall	.-500    	; 0xee8 <__fp_round>
    10dc:	0f 90       	pop	r0
    10de:	03 94       	inc	r0
    10e0:	01 fc       	sbrc	r0, 1
    10e2:	90 58       	subi	r25, 0x80	; 128
    10e4:	e4 ee       	ldi	r30, 0xE4	; 228
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	0e c0       	rjmp	.+28     	; 0x1106 <__fp_powsodd>

000010ea <__fp_mpack>:
    10ea:	9f 3f       	cpi	r25, 0xFF	; 255
    10ec:	31 f0       	breq	.+12     	; 0x10fa <__fp_mpack_finite+0xc>

000010ee <__fp_mpack_finite>:
    10ee:	91 50       	subi	r25, 0x01	; 1
    10f0:	20 f4       	brcc	.+8      	; 0x10fa <__fp_mpack_finite+0xc>
    10f2:	87 95       	ror	r24
    10f4:	77 95       	ror	r23
    10f6:	67 95       	ror	r22
    10f8:	b7 95       	ror	r27
    10fa:	88 0f       	add	r24, r24
    10fc:	91 1d       	adc	r25, r1
    10fe:	96 95       	lsr	r25
    1100:	87 95       	ror	r24
    1102:	97 f9       	bld	r25, 7
    1104:	08 95       	ret

00001106 <__fp_powsodd>:
    1106:	9f 93       	push	r25
    1108:	8f 93       	push	r24
    110a:	7f 93       	push	r23
    110c:	6f 93       	push	r22
    110e:	ff 93       	push	r31
    1110:	ef 93       	push	r30
    1112:	9b 01       	movw	r18, r22
    1114:	ac 01       	movw	r20, r24
    1116:	22 df       	rcall	.-444    	; 0xf5c <__mulsf3>
    1118:	ef 91       	pop	r30
    111a:	ff 91       	pop	r31
    111c:	88 df       	rcall	.-240    	; 0x102e <__fp_powser>
    111e:	2f 91       	pop	r18
    1120:	3f 91       	pop	r19
    1122:	4f 91       	pop	r20
    1124:	5f 91       	pop	r21
    1126:	1a cf       	rjmp	.-460    	; 0xf5c <__mulsf3>

00001128 <__divmodhi4>:
    1128:	97 fb       	bst	r25, 7
    112a:	07 2e       	mov	r0, r23
    112c:	16 f4       	brtc	.+4      	; 0x1132 <__divmodhi4+0xa>
    112e:	00 94       	com	r0
    1130:	06 d0       	rcall	.+12     	; 0x113e <__divmodhi4_neg1>
    1132:	77 fd       	sbrc	r23, 7
    1134:	08 d0       	rcall	.+16     	; 0x1146 <__divmodhi4_neg2>
    1136:	27 d0       	rcall	.+78     	; 0x1186 <__udivmodhi4>
    1138:	07 fc       	sbrc	r0, 7
    113a:	05 d0       	rcall	.+10     	; 0x1146 <__divmodhi4_neg2>
    113c:	3e f4       	brtc	.+14     	; 0x114c <__divmodhi4_exit>

0000113e <__divmodhi4_neg1>:
    113e:	90 95       	com	r25
    1140:	81 95       	neg	r24
    1142:	9f 4f       	sbci	r25, 0xFF	; 255
    1144:	08 95       	ret

00001146 <__divmodhi4_neg2>:
    1146:	70 95       	com	r23
    1148:	61 95       	neg	r22
    114a:	7f 4f       	sbci	r23, 0xFF	; 255

0000114c <__divmodhi4_exit>:
    114c:	08 95       	ret

0000114e <__divmodsi4>:
    114e:	05 2e       	mov	r0, r21
    1150:	97 fb       	bst	r25, 7
    1152:	16 f4       	brtc	.+4      	; 0x1158 <__divmodsi4+0xa>
    1154:	00 94       	com	r0
    1156:	0f d0       	rcall	.+30     	; 0x1176 <__negsi2>
    1158:	57 fd       	sbrc	r21, 7
    115a:	05 d0       	rcall	.+10     	; 0x1166 <__divmodsi4_neg2>
    115c:	28 d0       	rcall	.+80     	; 0x11ae <__udivmodsi4>
    115e:	07 fc       	sbrc	r0, 7
    1160:	02 d0       	rcall	.+4      	; 0x1166 <__divmodsi4_neg2>
    1162:	46 f4       	brtc	.+16     	; 0x1174 <__divmodsi4_exit>
    1164:	08 c0       	rjmp	.+16     	; 0x1176 <__negsi2>

00001166 <__divmodsi4_neg2>:
    1166:	50 95       	com	r21
    1168:	40 95       	com	r20
    116a:	30 95       	com	r19
    116c:	21 95       	neg	r18
    116e:	3f 4f       	sbci	r19, 0xFF	; 255
    1170:	4f 4f       	sbci	r20, 0xFF	; 255
    1172:	5f 4f       	sbci	r21, 0xFF	; 255

00001174 <__divmodsi4_exit>:
    1174:	08 95       	ret

00001176 <__negsi2>:
    1176:	90 95       	com	r25
    1178:	80 95       	com	r24
    117a:	70 95       	com	r23
    117c:	61 95       	neg	r22
    117e:	7f 4f       	sbci	r23, 0xFF	; 255
    1180:	8f 4f       	sbci	r24, 0xFF	; 255
    1182:	9f 4f       	sbci	r25, 0xFF	; 255
    1184:	08 95       	ret

00001186 <__udivmodhi4>:
    1186:	aa 1b       	sub	r26, r26
    1188:	bb 1b       	sub	r27, r27
    118a:	51 e1       	ldi	r21, 0x11	; 17
    118c:	07 c0       	rjmp	.+14     	; 0x119c <__udivmodhi4_ep>

0000118e <__udivmodhi4_loop>:
    118e:	aa 1f       	adc	r26, r26
    1190:	bb 1f       	adc	r27, r27
    1192:	a6 17       	cp	r26, r22
    1194:	b7 07       	cpc	r27, r23
    1196:	10 f0       	brcs	.+4      	; 0x119c <__udivmodhi4_ep>
    1198:	a6 1b       	sub	r26, r22
    119a:	b7 0b       	sbc	r27, r23

0000119c <__udivmodhi4_ep>:
    119c:	88 1f       	adc	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	5a 95       	dec	r21
    11a2:	a9 f7       	brne	.-22     	; 0x118e <__udivmodhi4_loop>
    11a4:	80 95       	com	r24
    11a6:	90 95       	com	r25
    11a8:	bc 01       	movw	r22, r24
    11aa:	cd 01       	movw	r24, r26
    11ac:	08 95       	ret

000011ae <__udivmodsi4>:
    11ae:	a1 e2       	ldi	r26, 0x21	; 33
    11b0:	1a 2e       	mov	r1, r26
    11b2:	aa 1b       	sub	r26, r26
    11b4:	bb 1b       	sub	r27, r27
    11b6:	fd 01       	movw	r30, r26
    11b8:	0d c0       	rjmp	.+26     	; 0x11d4 <__udivmodsi4_ep>

000011ba <__udivmodsi4_loop>:
    11ba:	aa 1f       	adc	r26, r26
    11bc:	bb 1f       	adc	r27, r27
    11be:	ee 1f       	adc	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	a2 17       	cp	r26, r18
    11c4:	b3 07       	cpc	r27, r19
    11c6:	e4 07       	cpc	r30, r20
    11c8:	f5 07       	cpc	r31, r21
    11ca:	20 f0       	brcs	.+8      	; 0x11d4 <__udivmodsi4_ep>
    11cc:	a2 1b       	sub	r26, r18
    11ce:	b3 0b       	sbc	r27, r19
    11d0:	e4 0b       	sbc	r30, r20
    11d2:	f5 0b       	sbc	r31, r21

000011d4 <__udivmodsi4_ep>:
    11d4:	66 1f       	adc	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	88 1f       	adc	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	1a 94       	dec	r1
    11de:	69 f7       	brne	.-38     	; 0x11ba <__udivmodsi4_loop>
    11e0:	60 95       	com	r22
    11e2:	70 95       	com	r23
    11e4:	80 95       	com	r24
    11e6:	90 95       	com	r25
    11e8:	9b 01       	movw	r18, r22
    11ea:	ac 01       	movw	r20, r24
    11ec:	bd 01       	movw	r22, r26
    11ee:	cf 01       	movw	r24, r30
    11f0:	08 95       	ret

000011f2 <__itoa_ncheck>:
    11f2:	bb 27       	eor	r27, r27
    11f4:	4a 30       	cpi	r20, 0x0A	; 10
    11f6:	31 f4       	brne	.+12     	; 0x1204 <__itoa_ncheck+0x12>
    11f8:	99 23       	and	r25, r25
    11fa:	22 f4       	brpl	.+8      	; 0x1204 <__itoa_ncheck+0x12>
    11fc:	bd e2       	ldi	r27, 0x2D	; 45
    11fe:	90 95       	com	r25
    1200:	81 95       	neg	r24
    1202:	9f 4f       	sbci	r25, 0xFF	; 255
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <__utoa_common>

00001206 <__utoa_ncheck>:
    1206:	bb 27       	eor	r27, r27

00001208 <__utoa_common>:
    1208:	fb 01       	movw	r30, r22
    120a:	55 27       	eor	r21, r21
    120c:	aa 27       	eor	r26, r26
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	aa 1f       	adc	r26, r26
    1214:	a4 17       	cp	r26, r20
    1216:	10 f0       	brcs	.+4      	; 0x121c <__utoa_common+0x14>
    1218:	a4 1b       	sub	r26, r20
    121a:	83 95       	inc	r24
    121c:	50 51       	subi	r21, 0x10	; 16
    121e:	b9 f7       	brne	.-18     	; 0x120e <__utoa_common+0x6>
    1220:	a0 5d       	subi	r26, 0xD0	; 208
    1222:	aa 33       	cpi	r26, 0x3A	; 58
    1224:	08 f0       	brcs	.+2      	; 0x1228 <__utoa_common+0x20>
    1226:	a9 5d       	subi	r26, 0xD9	; 217
    1228:	a1 93       	st	Z+, r26
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	79 f7       	brne	.-34     	; 0x120c <__utoa_common+0x4>
    122e:	b1 11       	cpse	r27, r1
    1230:	b1 93       	st	Z+, r27
    1232:	11 92       	st	Z+, r1
    1234:	cb 01       	movw	r24, r22
    1236:	e4 c3       	rjmp	.+1992   	; 0x1a00 <strrev>

00001238 <fdevopen>:
    1238:	0f 93       	push	r16
    123a:	1f 93       	push	r17
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	00 97       	sbiw	r24, 0x00	; 0
    1242:	31 f4       	brne	.+12     	; 0x1250 <fdevopen+0x18>
    1244:	61 15       	cp	r22, r1
    1246:	71 05       	cpc	r23, r1
    1248:	19 f4       	brne	.+6      	; 0x1250 <fdevopen+0x18>
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	39 c0       	rjmp	.+114    	; 0x12c2 <fdevopen+0x8a>
    1250:	8b 01       	movw	r16, r22
    1252:	ec 01       	movw	r28, r24
    1254:	6e e0       	ldi	r22, 0x0E	; 14
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	6d d2       	rcall	.+1242   	; 0x1738 <calloc>
    125e:	fc 01       	movw	r30, r24
    1260:	89 2b       	or	r24, r25
    1262:	99 f3       	breq	.-26     	; 0x124a <fdevopen+0x12>
    1264:	80 e8       	ldi	r24, 0x80	; 128
    1266:	83 83       	std	Z+3, r24	; 0x03
    1268:	01 15       	cp	r16, r1
    126a:	11 05       	cpc	r17, r1
    126c:	71 f0       	breq	.+28     	; 0x128a <fdevopen+0x52>
    126e:	13 87       	std	Z+11, r17	; 0x0b
    1270:	02 87       	std	Z+10, r16	; 0x0a
    1272:	81 e8       	ldi	r24, 0x81	; 129
    1274:	83 83       	std	Z+3, r24	; 0x03
    1276:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <__iob>
    127a:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <__iob+0x1>
    127e:	89 2b       	or	r24, r25
    1280:	21 f4       	brne	.+8      	; 0x128a <fdevopen+0x52>
    1282:	f0 93 6b 02 	sts	0x026B, r31	; 0x80026b <__iob+0x1>
    1286:	e0 93 6a 02 	sts	0x026A, r30	; 0x80026a <__iob>
    128a:	20 97       	sbiw	r28, 0x00	; 0
    128c:	c9 f0       	breq	.+50     	; 0x12c0 <fdevopen+0x88>
    128e:	d1 87       	std	Z+9, r29	; 0x09
    1290:	c0 87       	std	Z+8, r28	; 0x08
    1292:	83 81       	ldd	r24, Z+3	; 0x03
    1294:	82 60       	ori	r24, 0x02	; 2
    1296:	83 83       	std	Z+3, r24	; 0x03
    1298:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__iob+0x2>
    129c:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <__iob+0x3>
    12a0:	89 2b       	or	r24, r25
    12a2:	71 f4       	brne	.+28     	; 0x12c0 <fdevopen+0x88>
    12a4:	f0 93 6d 02 	sts	0x026D, r31	; 0x80026d <__iob+0x3>
    12a8:	e0 93 6c 02 	sts	0x026C, r30	; 0x80026c <__iob+0x2>
    12ac:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__iob+0x4>
    12b0:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <__iob+0x5>
    12b4:	89 2b       	or	r24, r25
    12b6:	21 f4       	brne	.+8      	; 0x12c0 <fdevopen+0x88>
    12b8:	f0 93 6f 02 	sts	0x026F, r31	; 0x80026f <__iob+0x5>
    12bc:	e0 93 6e 02 	sts	0x026E, r30	; 0x80026e <__iob+0x4>
    12c0:	cf 01       	movw	r24, r30
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	08 95       	ret

000012cc <printf>:
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	ae 01       	movw	r20, r28
    12d6:	4a 5f       	subi	r20, 0xFA	; 250
    12d8:	5f 4f       	sbci	r21, 0xFF	; 255
    12da:	fa 01       	movw	r30, r20
    12dc:	61 91       	ld	r22, Z+
    12de:	71 91       	ld	r23, Z+
    12e0:	af 01       	movw	r20, r30
    12e2:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__iob+0x2>
    12e6:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <__iob+0x3>
    12ea:	38 d0       	rcall	.+112    	; 0x135c <vfprintf>
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	08 95       	ret

000012f2 <putchar>:
    12f2:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <__iob+0x2>
    12f6:	70 91 6d 02 	lds	r23, 0x026D	; 0x80026d <__iob+0x3>
    12fa:	92 c3       	rjmp	.+1828   	; 0x1a20 <fputc>

000012fc <puts>:
    12fc:	0f 93       	push	r16
    12fe:	1f 93       	push	r17
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <__iob+0x2>
    1308:	f0 91 6d 02 	lds	r31, 0x026D	; 0x80026d <__iob+0x3>
    130c:	23 81       	ldd	r18, Z+3	; 0x03
    130e:	21 ff       	sbrs	r18, 1
    1310:	1b c0       	rjmp	.+54     	; 0x1348 <puts+0x4c>
    1312:	8c 01       	movw	r16, r24
    1314:	d0 e0       	ldi	r29, 0x00	; 0
    1316:	c0 e0       	ldi	r28, 0x00	; 0
    1318:	f8 01       	movw	r30, r16
    131a:	81 91       	ld	r24, Z+
    131c:	8f 01       	movw	r16, r30
    131e:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <__iob+0x2>
    1322:	70 91 6d 02 	lds	r23, 0x026D	; 0x80026d <__iob+0x3>
    1326:	db 01       	movw	r26, r22
    1328:	18 96       	adiw	r26, 0x08	; 8
    132a:	ed 91       	ld	r30, X+
    132c:	fc 91       	ld	r31, X
    132e:	19 97       	sbiw	r26, 0x09	; 9
    1330:	88 23       	and	r24, r24
    1332:	31 f0       	breq	.+12     	; 0x1340 <puts+0x44>
    1334:	19 95       	eicall
    1336:	89 2b       	or	r24, r25
    1338:	79 f3       	breq	.-34     	; 0x1318 <puts+0x1c>
    133a:	df ef       	ldi	r29, 0xFF	; 255
    133c:	cf ef       	ldi	r28, 0xFF	; 255
    133e:	ec cf       	rjmp	.-40     	; 0x1318 <puts+0x1c>
    1340:	8a e0       	ldi	r24, 0x0A	; 10
    1342:	19 95       	eicall
    1344:	89 2b       	or	r24, r25
    1346:	19 f0       	breq	.+6      	; 0x134e <puts+0x52>
    1348:	8f ef       	ldi	r24, 0xFF	; 255
    134a:	9f ef       	ldi	r25, 0xFF	; 255
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <puts+0x56>
    134e:	8d 2f       	mov	r24, r29
    1350:	9c 2f       	mov	r25, r28
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	1f 91       	pop	r17
    1358:	0f 91       	pop	r16
    135a:	08 95       	ret

0000135c <vfprintf>:
    135c:	2f 92       	push	r2
    135e:	3f 92       	push	r3
    1360:	4f 92       	push	r4
    1362:	5f 92       	push	r5
    1364:	6f 92       	push	r6
    1366:	7f 92       	push	r7
    1368:	8f 92       	push	r8
    136a:	9f 92       	push	r9
    136c:	af 92       	push	r10
    136e:	bf 92       	push	r11
    1370:	cf 92       	push	r12
    1372:	df 92       	push	r13
    1374:	ef 92       	push	r14
    1376:	ff 92       	push	r15
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	2c 97       	sbiw	r28, 0x0c	; 12
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	7c 01       	movw	r14, r24
    1392:	6b 01       	movw	r12, r22
    1394:	8a 01       	movw	r16, r20
    1396:	fc 01       	movw	r30, r24
    1398:	17 82       	std	Z+7, r1	; 0x07
    139a:	16 82       	std	Z+6, r1	; 0x06
    139c:	83 81       	ldd	r24, Z+3	; 0x03
    139e:	81 ff       	sbrs	r24, 1
    13a0:	b0 c1       	rjmp	.+864    	; 0x1702 <vfprintf+0x3a6>
    13a2:	ce 01       	movw	r24, r28
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	4c 01       	movw	r8, r24
    13a8:	f7 01       	movw	r30, r14
    13aa:	93 81       	ldd	r25, Z+3	; 0x03
    13ac:	f6 01       	movw	r30, r12
    13ae:	93 fd       	sbrc	r25, 3
    13b0:	85 91       	lpm	r24, Z+
    13b2:	93 ff       	sbrs	r25, 3
    13b4:	81 91       	ld	r24, Z+
    13b6:	6f 01       	movw	r12, r30
    13b8:	88 23       	and	r24, r24
    13ba:	09 f4       	brne	.+2      	; 0x13be <vfprintf+0x62>
    13bc:	9e c1       	rjmp	.+828    	; 0x16fa <vfprintf+0x39e>
    13be:	85 32       	cpi	r24, 0x25	; 37
    13c0:	39 f4       	brne	.+14     	; 0x13d0 <vfprintf+0x74>
    13c2:	93 fd       	sbrc	r25, 3
    13c4:	85 91       	lpm	r24, Z+
    13c6:	93 ff       	sbrs	r25, 3
    13c8:	81 91       	ld	r24, Z+
    13ca:	6f 01       	movw	r12, r30
    13cc:	85 32       	cpi	r24, 0x25	; 37
    13ce:	21 f4       	brne	.+8      	; 0x13d8 <vfprintf+0x7c>
    13d0:	b7 01       	movw	r22, r14
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	25 d3       	rcall	.+1610   	; 0x1a20 <fputc>
    13d6:	e8 cf       	rjmp	.-48     	; 0x13a8 <vfprintf+0x4c>
    13d8:	51 2c       	mov	r5, r1
    13da:	31 2c       	mov	r3, r1
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	20 32       	cpi	r18, 0x20	; 32
    13e0:	a0 f4       	brcc	.+40     	; 0x140a <vfprintf+0xae>
    13e2:	8b 32       	cpi	r24, 0x2B	; 43
    13e4:	69 f0       	breq	.+26     	; 0x1400 <vfprintf+0xa4>
    13e6:	30 f4       	brcc	.+12     	; 0x13f4 <vfprintf+0x98>
    13e8:	80 32       	cpi	r24, 0x20	; 32
    13ea:	59 f0       	breq	.+22     	; 0x1402 <vfprintf+0xa6>
    13ec:	83 32       	cpi	r24, 0x23	; 35
    13ee:	69 f4       	brne	.+26     	; 0x140a <vfprintf+0xae>
    13f0:	20 61       	ori	r18, 0x10	; 16
    13f2:	2c c0       	rjmp	.+88     	; 0x144c <vfprintf+0xf0>
    13f4:	8d 32       	cpi	r24, 0x2D	; 45
    13f6:	39 f0       	breq	.+14     	; 0x1406 <vfprintf+0xaa>
    13f8:	80 33       	cpi	r24, 0x30	; 48
    13fa:	39 f4       	brne	.+14     	; 0x140a <vfprintf+0xae>
    13fc:	21 60       	ori	r18, 0x01	; 1
    13fe:	26 c0       	rjmp	.+76     	; 0x144c <vfprintf+0xf0>
    1400:	22 60       	ori	r18, 0x02	; 2
    1402:	24 60       	ori	r18, 0x04	; 4
    1404:	23 c0       	rjmp	.+70     	; 0x144c <vfprintf+0xf0>
    1406:	28 60       	ori	r18, 0x08	; 8
    1408:	21 c0       	rjmp	.+66     	; 0x144c <vfprintf+0xf0>
    140a:	27 fd       	sbrc	r18, 7
    140c:	27 c0       	rjmp	.+78     	; 0x145c <vfprintf+0x100>
    140e:	30 ed       	ldi	r19, 0xD0	; 208
    1410:	38 0f       	add	r19, r24
    1412:	3a 30       	cpi	r19, 0x0A	; 10
    1414:	78 f4       	brcc	.+30     	; 0x1434 <vfprintf+0xd8>
    1416:	26 ff       	sbrs	r18, 6
    1418:	06 c0       	rjmp	.+12     	; 0x1426 <vfprintf+0xca>
    141a:	fa e0       	ldi	r31, 0x0A	; 10
    141c:	5f 9e       	mul	r5, r31
    141e:	30 0d       	add	r19, r0
    1420:	11 24       	eor	r1, r1
    1422:	53 2e       	mov	r5, r19
    1424:	13 c0       	rjmp	.+38     	; 0x144c <vfprintf+0xf0>
    1426:	8a e0       	ldi	r24, 0x0A	; 10
    1428:	38 9e       	mul	r3, r24
    142a:	30 0d       	add	r19, r0
    142c:	11 24       	eor	r1, r1
    142e:	33 2e       	mov	r3, r19
    1430:	20 62       	ori	r18, 0x20	; 32
    1432:	0c c0       	rjmp	.+24     	; 0x144c <vfprintf+0xf0>
    1434:	8e 32       	cpi	r24, 0x2E	; 46
    1436:	21 f4       	brne	.+8      	; 0x1440 <vfprintf+0xe4>
    1438:	26 fd       	sbrc	r18, 6
    143a:	5f c1       	rjmp	.+702    	; 0x16fa <vfprintf+0x39e>
    143c:	20 64       	ori	r18, 0x40	; 64
    143e:	06 c0       	rjmp	.+12     	; 0x144c <vfprintf+0xf0>
    1440:	8c 36       	cpi	r24, 0x6C	; 108
    1442:	11 f4       	brne	.+4      	; 0x1448 <vfprintf+0xec>
    1444:	20 68       	ori	r18, 0x80	; 128
    1446:	02 c0       	rjmp	.+4      	; 0x144c <vfprintf+0xf0>
    1448:	88 36       	cpi	r24, 0x68	; 104
    144a:	41 f4       	brne	.+16     	; 0x145c <vfprintf+0x100>
    144c:	f6 01       	movw	r30, r12
    144e:	93 fd       	sbrc	r25, 3
    1450:	85 91       	lpm	r24, Z+
    1452:	93 ff       	sbrs	r25, 3
    1454:	81 91       	ld	r24, Z+
    1456:	6f 01       	movw	r12, r30
    1458:	81 11       	cpse	r24, r1
    145a:	c1 cf       	rjmp	.-126    	; 0x13de <vfprintf+0x82>
    145c:	98 2f       	mov	r25, r24
    145e:	9f 7d       	andi	r25, 0xDF	; 223
    1460:	95 54       	subi	r25, 0x45	; 69
    1462:	93 30       	cpi	r25, 0x03	; 3
    1464:	28 f4       	brcc	.+10     	; 0x1470 <vfprintf+0x114>
    1466:	0c 5f       	subi	r16, 0xFC	; 252
    1468:	1f 4f       	sbci	r17, 0xFF	; 255
    146a:	ff e3       	ldi	r31, 0x3F	; 63
    146c:	f9 83       	std	Y+1, r31	; 0x01
    146e:	0d c0       	rjmp	.+26     	; 0x148a <vfprintf+0x12e>
    1470:	83 36       	cpi	r24, 0x63	; 99
    1472:	31 f0       	breq	.+12     	; 0x1480 <vfprintf+0x124>
    1474:	83 37       	cpi	r24, 0x73	; 115
    1476:	71 f0       	breq	.+28     	; 0x1494 <vfprintf+0x138>
    1478:	83 35       	cpi	r24, 0x53	; 83
    147a:	09 f0       	breq	.+2      	; 0x147e <vfprintf+0x122>
    147c:	57 c0       	rjmp	.+174    	; 0x152c <vfprintf+0x1d0>
    147e:	21 c0       	rjmp	.+66     	; 0x14c2 <vfprintf+0x166>
    1480:	f8 01       	movw	r30, r16
    1482:	80 81       	ld	r24, Z
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	0e 5f       	subi	r16, 0xFE	; 254
    1488:	1f 4f       	sbci	r17, 0xFF	; 255
    148a:	44 24       	eor	r4, r4
    148c:	43 94       	inc	r4
    148e:	51 2c       	mov	r5, r1
    1490:	54 01       	movw	r10, r8
    1492:	14 c0       	rjmp	.+40     	; 0x14bc <vfprintf+0x160>
    1494:	38 01       	movw	r6, r16
    1496:	f2 e0       	ldi	r31, 0x02	; 2
    1498:	6f 0e       	add	r6, r31
    149a:	71 1c       	adc	r7, r1
    149c:	f8 01       	movw	r30, r16
    149e:	a0 80       	ld	r10, Z
    14a0:	b1 80       	ldd	r11, Z+1	; 0x01
    14a2:	26 ff       	sbrs	r18, 6
    14a4:	03 c0       	rjmp	.+6      	; 0x14ac <vfprintf+0x150>
    14a6:	65 2d       	mov	r22, r5
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <vfprintf+0x154>
    14ac:	6f ef       	ldi	r22, 0xFF	; 255
    14ae:	7f ef       	ldi	r23, 0xFF	; 255
    14b0:	c5 01       	movw	r24, r10
    14b2:	2c 87       	std	Y+12, r18	; 0x0c
    14b4:	9a d2       	rcall	.+1332   	; 0x19ea <strnlen>
    14b6:	2c 01       	movw	r4, r24
    14b8:	83 01       	movw	r16, r6
    14ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    14bc:	2f 77       	andi	r18, 0x7F	; 127
    14be:	22 2e       	mov	r2, r18
    14c0:	16 c0       	rjmp	.+44     	; 0x14ee <vfprintf+0x192>
    14c2:	38 01       	movw	r6, r16
    14c4:	f2 e0       	ldi	r31, 0x02	; 2
    14c6:	6f 0e       	add	r6, r31
    14c8:	71 1c       	adc	r7, r1
    14ca:	f8 01       	movw	r30, r16
    14cc:	a0 80       	ld	r10, Z
    14ce:	b1 80       	ldd	r11, Z+1	; 0x01
    14d0:	26 ff       	sbrs	r18, 6
    14d2:	03 c0       	rjmp	.+6      	; 0x14da <vfprintf+0x17e>
    14d4:	65 2d       	mov	r22, r5
    14d6:	70 e0       	ldi	r23, 0x00	; 0
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <vfprintf+0x182>
    14da:	6f ef       	ldi	r22, 0xFF	; 255
    14dc:	7f ef       	ldi	r23, 0xFF	; 255
    14de:	c5 01       	movw	r24, r10
    14e0:	2c 87       	std	Y+12, r18	; 0x0c
    14e2:	71 d2       	rcall	.+1250   	; 0x19c6 <strnlen_P>
    14e4:	2c 01       	movw	r4, r24
    14e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    14e8:	20 68       	ori	r18, 0x80	; 128
    14ea:	22 2e       	mov	r2, r18
    14ec:	83 01       	movw	r16, r6
    14ee:	23 fc       	sbrc	r2, 3
    14f0:	19 c0       	rjmp	.+50     	; 0x1524 <vfprintf+0x1c8>
    14f2:	83 2d       	mov	r24, r3
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	48 16       	cp	r4, r24
    14f8:	59 06       	cpc	r5, r25
    14fa:	a0 f4       	brcc	.+40     	; 0x1524 <vfprintf+0x1c8>
    14fc:	b7 01       	movw	r22, r14
    14fe:	80 e2       	ldi	r24, 0x20	; 32
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	8e d2       	rcall	.+1308   	; 0x1a20 <fputc>
    1504:	3a 94       	dec	r3
    1506:	f5 cf       	rjmp	.-22     	; 0x14f2 <vfprintf+0x196>
    1508:	f5 01       	movw	r30, r10
    150a:	27 fc       	sbrc	r2, 7
    150c:	85 91       	lpm	r24, Z+
    150e:	27 fe       	sbrs	r2, 7
    1510:	81 91       	ld	r24, Z+
    1512:	5f 01       	movw	r10, r30
    1514:	b7 01       	movw	r22, r14
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	83 d2       	rcall	.+1286   	; 0x1a20 <fputc>
    151a:	31 10       	cpse	r3, r1
    151c:	3a 94       	dec	r3
    151e:	f1 e0       	ldi	r31, 0x01	; 1
    1520:	4f 1a       	sub	r4, r31
    1522:	51 08       	sbc	r5, r1
    1524:	41 14       	cp	r4, r1
    1526:	51 04       	cpc	r5, r1
    1528:	79 f7       	brne	.-34     	; 0x1508 <vfprintf+0x1ac>
    152a:	de c0       	rjmp	.+444    	; 0x16e8 <vfprintf+0x38c>
    152c:	84 36       	cpi	r24, 0x64	; 100
    152e:	11 f0       	breq	.+4      	; 0x1534 <vfprintf+0x1d8>
    1530:	89 36       	cpi	r24, 0x69	; 105
    1532:	31 f5       	brne	.+76     	; 0x1580 <vfprintf+0x224>
    1534:	f8 01       	movw	r30, r16
    1536:	27 ff       	sbrs	r18, 7
    1538:	07 c0       	rjmp	.+14     	; 0x1548 <vfprintf+0x1ec>
    153a:	60 81       	ld	r22, Z
    153c:	71 81       	ldd	r23, Z+1	; 0x01
    153e:	82 81       	ldd	r24, Z+2	; 0x02
    1540:	93 81       	ldd	r25, Z+3	; 0x03
    1542:	0c 5f       	subi	r16, 0xFC	; 252
    1544:	1f 4f       	sbci	r17, 0xFF	; 255
    1546:	08 c0       	rjmp	.+16     	; 0x1558 <vfprintf+0x1fc>
    1548:	60 81       	ld	r22, Z
    154a:	71 81       	ldd	r23, Z+1	; 0x01
    154c:	07 2e       	mov	r0, r23
    154e:	00 0c       	add	r0, r0
    1550:	88 0b       	sbc	r24, r24
    1552:	99 0b       	sbc	r25, r25
    1554:	0e 5f       	subi	r16, 0xFE	; 254
    1556:	1f 4f       	sbci	r17, 0xFF	; 255
    1558:	2f 76       	andi	r18, 0x6F	; 111
    155a:	72 2e       	mov	r7, r18
    155c:	97 ff       	sbrs	r25, 7
    155e:	09 c0       	rjmp	.+18     	; 0x1572 <vfprintf+0x216>
    1560:	90 95       	com	r25
    1562:	80 95       	com	r24
    1564:	70 95       	com	r23
    1566:	61 95       	neg	r22
    1568:	7f 4f       	sbci	r23, 0xFF	; 255
    156a:	8f 4f       	sbci	r24, 0xFF	; 255
    156c:	9f 4f       	sbci	r25, 0xFF	; 255
    156e:	20 68       	ori	r18, 0x80	; 128
    1570:	72 2e       	mov	r7, r18
    1572:	2a e0       	ldi	r18, 0x0A	; 10
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	a4 01       	movw	r20, r8
    1578:	8b d2       	rcall	.+1302   	; 0x1a90 <__ultoa_invert>
    157a:	a8 2e       	mov	r10, r24
    157c:	a8 18       	sub	r10, r8
    157e:	43 c0       	rjmp	.+134    	; 0x1606 <vfprintf+0x2aa>
    1580:	85 37       	cpi	r24, 0x75	; 117
    1582:	29 f4       	brne	.+10     	; 0x158e <vfprintf+0x232>
    1584:	2f 7e       	andi	r18, 0xEF	; 239
    1586:	b2 2e       	mov	r11, r18
    1588:	2a e0       	ldi	r18, 0x0A	; 10
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	25 c0       	rjmp	.+74     	; 0x15d8 <vfprintf+0x27c>
    158e:	f2 2f       	mov	r31, r18
    1590:	f9 7f       	andi	r31, 0xF9	; 249
    1592:	bf 2e       	mov	r11, r31
    1594:	8f 36       	cpi	r24, 0x6F	; 111
    1596:	c1 f0       	breq	.+48     	; 0x15c8 <vfprintf+0x26c>
    1598:	18 f4       	brcc	.+6      	; 0x15a0 <vfprintf+0x244>
    159a:	88 35       	cpi	r24, 0x58	; 88
    159c:	79 f0       	breq	.+30     	; 0x15bc <vfprintf+0x260>
    159e:	ad c0       	rjmp	.+346    	; 0x16fa <vfprintf+0x39e>
    15a0:	80 37       	cpi	r24, 0x70	; 112
    15a2:	19 f0       	breq	.+6      	; 0x15aa <vfprintf+0x24e>
    15a4:	88 37       	cpi	r24, 0x78	; 120
    15a6:	21 f0       	breq	.+8      	; 0x15b0 <vfprintf+0x254>
    15a8:	a8 c0       	rjmp	.+336    	; 0x16fa <vfprintf+0x39e>
    15aa:	2f 2f       	mov	r18, r31
    15ac:	20 61       	ori	r18, 0x10	; 16
    15ae:	b2 2e       	mov	r11, r18
    15b0:	b4 fe       	sbrs	r11, 4
    15b2:	0d c0       	rjmp	.+26     	; 0x15ce <vfprintf+0x272>
    15b4:	8b 2d       	mov	r24, r11
    15b6:	84 60       	ori	r24, 0x04	; 4
    15b8:	b8 2e       	mov	r11, r24
    15ba:	09 c0       	rjmp	.+18     	; 0x15ce <vfprintf+0x272>
    15bc:	24 ff       	sbrs	r18, 4
    15be:	0a c0       	rjmp	.+20     	; 0x15d4 <vfprintf+0x278>
    15c0:	9f 2f       	mov	r25, r31
    15c2:	96 60       	ori	r25, 0x06	; 6
    15c4:	b9 2e       	mov	r11, r25
    15c6:	06 c0       	rjmp	.+12     	; 0x15d4 <vfprintf+0x278>
    15c8:	28 e0       	ldi	r18, 0x08	; 8
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	05 c0       	rjmp	.+10     	; 0x15d8 <vfprintf+0x27c>
    15ce:	20 e1       	ldi	r18, 0x10	; 16
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <vfprintf+0x27c>
    15d4:	20 e1       	ldi	r18, 0x10	; 16
    15d6:	32 e0       	ldi	r19, 0x02	; 2
    15d8:	f8 01       	movw	r30, r16
    15da:	b7 fe       	sbrs	r11, 7
    15dc:	07 c0       	rjmp	.+14     	; 0x15ec <vfprintf+0x290>
    15de:	60 81       	ld	r22, Z
    15e0:	71 81       	ldd	r23, Z+1	; 0x01
    15e2:	82 81       	ldd	r24, Z+2	; 0x02
    15e4:	93 81       	ldd	r25, Z+3	; 0x03
    15e6:	0c 5f       	subi	r16, 0xFC	; 252
    15e8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ea:	06 c0       	rjmp	.+12     	; 0x15f8 <vfprintf+0x29c>
    15ec:	60 81       	ld	r22, Z
    15ee:	71 81       	ldd	r23, Z+1	; 0x01
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 5f       	subi	r16, 0xFE	; 254
    15f6:	1f 4f       	sbci	r17, 0xFF	; 255
    15f8:	a4 01       	movw	r20, r8
    15fa:	4a d2       	rcall	.+1172   	; 0x1a90 <__ultoa_invert>
    15fc:	a8 2e       	mov	r10, r24
    15fe:	a8 18       	sub	r10, r8
    1600:	fb 2d       	mov	r31, r11
    1602:	ff 77       	andi	r31, 0x7F	; 127
    1604:	7f 2e       	mov	r7, r31
    1606:	76 fe       	sbrs	r7, 6
    1608:	0b c0       	rjmp	.+22     	; 0x1620 <vfprintf+0x2c4>
    160a:	37 2d       	mov	r19, r7
    160c:	3e 7f       	andi	r19, 0xFE	; 254
    160e:	a5 14       	cp	r10, r5
    1610:	50 f4       	brcc	.+20     	; 0x1626 <vfprintf+0x2ca>
    1612:	74 fe       	sbrs	r7, 4
    1614:	0a c0       	rjmp	.+20     	; 0x162a <vfprintf+0x2ce>
    1616:	72 fc       	sbrc	r7, 2
    1618:	08 c0       	rjmp	.+16     	; 0x162a <vfprintf+0x2ce>
    161a:	37 2d       	mov	r19, r7
    161c:	3e 7e       	andi	r19, 0xEE	; 238
    161e:	05 c0       	rjmp	.+10     	; 0x162a <vfprintf+0x2ce>
    1620:	ba 2c       	mov	r11, r10
    1622:	37 2d       	mov	r19, r7
    1624:	03 c0       	rjmp	.+6      	; 0x162c <vfprintf+0x2d0>
    1626:	ba 2c       	mov	r11, r10
    1628:	01 c0       	rjmp	.+2      	; 0x162c <vfprintf+0x2d0>
    162a:	b5 2c       	mov	r11, r5
    162c:	34 ff       	sbrs	r19, 4
    162e:	0d c0       	rjmp	.+26     	; 0x164a <vfprintf+0x2ee>
    1630:	fe 01       	movw	r30, r28
    1632:	ea 0d       	add	r30, r10
    1634:	f1 1d       	adc	r31, r1
    1636:	80 81       	ld	r24, Z
    1638:	80 33       	cpi	r24, 0x30	; 48
    163a:	11 f4       	brne	.+4      	; 0x1640 <vfprintf+0x2e4>
    163c:	39 7e       	andi	r19, 0xE9	; 233
    163e:	09 c0       	rjmp	.+18     	; 0x1652 <vfprintf+0x2f6>
    1640:	32 ff       	sbrs	r19, 2
    1642:	06 c0       	rjmp	.+12     	; 0x1650 <vfprintf+0x2f4>
    1644:	b3 94       	inc	r11
    1646:	b3 94       	inc	r11
    1648:	04 c0       	rjmp	.+8      	; 0x1652 <vfprintf+0x2f6>
    164a:	83 2f       	mov	r24, r19
    164c:	86 78       	andi	r24, 0x86	; 134
    164e:	09 f0       	breq	.+2      	; 0x1652 <vfprintf+0x2f6>
    1650:	b3 94       	inc	r11
    1652:	33 fd       	sbrc	r19, 3
    1654:	12 c0       	rjmp	.+36     	; 0x167a <vfprintf+0x31e>
    1656:	30 ff       	sbrs	r19, 0
    1658:	06 c0       	rjmp	.+12     	; 0x1666 <vfprintf+0x30a>
    165a:	5a 2c       	mov	r5, r10
    165c:	b3 14       	cp	r11, r3
    165e:	18 f4       	brcc	.+6      	; 0x1666 <vfprintf+0x30a>
    1660:	53 0c       	add	r5, r3
    1662:	5b 18       	sub	r5, r11
    1664:	b3 2c       	mov	r11, r3
    1666:	b3 14       	cp	r11, r3
    1668:	60 f4       	brcc	.+24     	; 0x1682 <vfprintf+0x326>
    166a:	b7 01       	movw	r22, r14
    166c:	80 e2       	ldi	r24, 0x20	; 32
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	3c 87       	std	Y+12, r19	; 0x0c
    1672:	d6 d1       	rcall	.+940    	; 0x1a20 <fputc>
    1674:	b3 94       	inc	r11
    1676:	3c 85       	ldd	r19, Y+12	; 0x0c
    1678:	f6 cf       	rjmp	.-20     	; 0x1666 <vfprintf+0x30a>
    167a:	b3 14       	cp	r11, r3
    167c:	10 f4       	brcc	.+4      	; 0x1682 <vfprintf+0x326>
    167e:	3b 18       	sub	r3, r11
    1680:	01 c0       	rjmp	.+2      	; 0x1684 <vfprintf+0x328>
    1682:	31 2c       	mov	r3, r1
    1684:	34 ff       	sbrs	r19, 4
    1686:	11 c0       	rjmp	.+34     	; 0x16aa <vfprintf+0x34e>
    1688:	b7 01       	movw	r22, r14
    168a:	80 e3       	ldi	r24, 0x30	; 48
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	3c 87       	std	Y+12, r19	; 0x0c
    1690:	c7 d1       	rcall	.+910    	; 0x1a20 <fputc>
    1692:	3c 85       	ldd	r19, Y+12	; 0x0c
    1694:	32 ff       	sbrs	r19, 2
    1696:	16 c0       	rjmp	.+44     	; 0x16c4 <vfprintf+0x368>
    1698:	31 fd       	sbrc	r19, 1
    169a:	03 c0       	rjmp	.+6      	; 0x16a2 <vfprintf+0x346>
    169c:	88 e7       	ldi	r24, 0x78	; 120
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <vfprintf+0x34a>
    16a2:	88 e5       	ldi	r24, 0x58	; 88
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	b7 01       	movw	r22, r14
    16a8:	0c c0       	rjmp	.+24     	; 0x16c2 <vfprintf+0x366>
    16aa:	83 2f       	mov	r24, r19
    16ac:	86 78       	andi	r24, 0x86	; 134
    16ae:	51 f0       	breq	.+20     	; 0x16c4 <vfprintf+0x368>
    16b0:	31 ff       	sbrs	r19, 1
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <vfprintf+0x35c>
    16b4:	8b e2       	ldi	r24, 0x2B	; 43
    16b6:	01 c0       	rjmp	.+2      	; 0x16ba <vfprintf+0x35e>
    16b8:	80 e2       	ldi	r24, 0x20	; 32
    16ba:	37 fd       	sbrc	r19, 7
    16bc:	8d e2       	ldi	r24, 0x2D	; 45
    16be:	b7 01       	movw	r22, r14
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	ae d1       	rcall	.+860    	; 0x1a20 <fputc>
    16c4:	a5 14       	cp	r10, r5
    16c6:	30 f4       	brcc	.+12     	; 0x16d4 <vfprintf+0x378>
    16c8:	b7 01       	movw	r22, r14
    16ca:	80 e3       	ldi	r24, 0x30	; 48
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	a8 d1       	rcall	.+848    	; 0x1a20 <fputc>
    16d0:	5a 94       	dec	r5
    16d2:	f8 cf       	rjmp	.-16     	; 0x16c4 <vfprintf+0x368>
    16d4:	aa 94       	dec	r10
    16d6:	f4 01       	movw	r30, r8
    16d8:	ea 0d       	add	r30, r10
    16da:	f1 1d       	adc	r31, r1
    16dc:	80 81       	ld	r24, Z
    16de:	b7 01       	movw	r22, r14
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	9e d1       	rcall	.+828    	; 0x1a20 <fputc>
    16e4:	a1 10       	cpse	r10, r1
    16e6:	f6 cf       	rjmp	.-20     	; 0x16d4 <vfprintf+0x378>
    16e8:	33 20       	and	r3, r3
    16ea:	09 f4       	brne	.+2      	; 0x16ee <vfprintf+0x392>
    16ec:	5d ce       	rjmp	.-838    	; 0x13a8 <vfprintf+0x4c>
    16ee:	b7 01       	movw	r22, r14
    16f0:	80 e2       	ldi	r24, 0x20	; 32
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	95 d1       	rcall	.+810    	; 0x1a20 <fputc>
    16f6:	3a 94       	dec	r3
    16f8:	f7 cf       	rjmp	.-18     	; 0x16e8 <vfprintf+0x38c>
    16fa:	f7 01       	movw	r30, r14
    16fc:	86 81       	ldd	r24, Z+6	; 0x06
    16fe:	97 81       	ldd	r25, Z+7	; 0x07
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <vfprintf+0x3aa>
    1702:	8f ef       	ldi	r24, 0xFF	; 255
    1704:	9f ef       	ldi	r25, 0xFF	; 255
    1706:	2c 96       	adiw	r28, 0x0c	; 12
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	ff 90       	pop	r15
    171c:	ef 90       	pop	r14
    171e:	df 90       	pop	r13
    1720:	cf 90       	pop	r12
    1722:	bf 90       	pop	r11
    1724:	af 90       	pop	r10
    1726:	9f 90       	pop	r9
    1728:	8f 90       	pop	r8
    172a:	7f 90       	pop	r7
    172c:	6f 90       	pop	r6
    172e:	5f 90       	pop	r5
    1730:	4f 90       	pop	r4
    1732:	3f 90       	pop	r3
    1734:	2f 90       	pop	r2
    1736:	08 95       	ret

00001738 <calloc>:
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	86 9f       	mul	r24, r22
    1742:	80 01       	movw	r16, r0
    1744:	87 9f       	mul	r24, r23
    1746:	10 0d       	add	r17, r0
    1748:	96 9f       	mul	r25, r22
    174a:	10 0d       	add	r17, r0
    174c:	11 24       	eor	r1, r1
    174e:	c8 01       	movw	r24, r16
    1750:	0d d0       	rcall	.+26     	; 0x176c <malloc>
    1752:	ec 01       	movw	r28, r24
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	21 f0       	breq	.+8      	; 0x1760 <calloc+0x28>
    1758:	a8 01       	movw	r20, r16
    175a:	60 e0       	ldi	r22, 0x00	; 0
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	3e d1       	rcall	.+636    	; 0x19dc <memset>
    1760:	ce 01       	movw	r24, r28
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	08 95       	ret

0000176c <malloc>:
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
    1770:	82 30       	cpi	r24, 0x02	; 2
    1772:	91 05       	cpc	r25, r1
    1774:	10 f4       	brcc	.+4      	; 0x177a <malloc+0xe>
    1776:	82 e0       	ldi	r24, 0x02	; 2
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <__flp>
    177e:	f0 91 73 02 	lds	r31, 0x0273	; 0x800273 <__flp+0x1>
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	c0 e0       	ldi	r28, 0x00	; 0
    1788:	d0 e0       	ldi	r29, 0x00	; 0
    178a:	30 97       	sbiw	r30, 0x00	; 0
    178c:	11 f1       	breq	.+68     	; 0x17d2 <malloc+0x66>
    178e:	40 81       	ld	r20, Z
    1790:	51 81       	ldd	r21, Z+1	; 0x01
    1792:	48 17       	cp	r20, r24
    1794:	59 07       	cpc	r21, r25
    1796:	c0 f0       	brcs	.+48     	; 0x17c8 <malloc+0x5c>
    1798:	48 17       	cp	r20, r24
    179a:	59 07       	cpc	r21, r25
    179c:	61 f4       	brne	.+24     	; 0x17b6 <malloc+0x4a>
    179e:	82 81       	ldd	r24, Z+2	; 0x02
    17a0:	93 81       	ldd	r25, Z+3	; 0x03
    17a2:	20 97       	sbiw	r28, 0x00	; 0
    17a4:	19 f0       	breq	.+6      	; 0x17ac <malloc+0x40>
    17a6:	9b 83       	std	Y+3, r25	; 0x03
    17a8:	8a 83       	std	Y+2, r24	; 0x02
    17aa:	2b c0       	rjmp	.+86     	; 0x1802 <malloc+0x96>
    17ac:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <__flp+0x1>
    17b0:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <__flp>
    17b4:	26 c0       	rjmp	.+76     	; 0x1802 <malloc+0x96>
    17b6:	21 15       	cp	r18, r1
    17b8:	31 05       	cpc	r19, r1
    17ba:	19 f0       	breq	.+6      	; 0x17c2 <malloc+0x56>
    17bc:	42 17       	cp	r20, r18
    17be:	53 07       	cpc	r21, r19
    17c0:	18 f4       	brcc	.+6      	; 0x17c8 <malloc+0x5c>
    17c2:	9a 01       	movw	r18, r20
    17c4:	be 01       	movw	r22, r28
    17c6:	df 01       	movw	r26, r30
    17c8:	ef 01       	movw	r28, r30
    17ca:	02 80       	ldd	r0, Z+2	; 0x02
    17cc:	f3 81       	ldd	r31, Z+3	; 0x03
    17ce:	e0 2d       	mov	r30, r0
    17d0:	dc cf       	rjmp	.-72     	; 0x178a <malloc+0x1e>
    17d2:	21 15       	cp	r18, r1
    17d4:	31 05       	cpc	r19, r1
    17d6:	09 f1       	breq	.+66     	; 0x181a <malloc+0xae>
    17d8:	28 1b       	sub	r18, r24
    17da:	39 0b       	sbc	r19, r25
    17dc:	24 30       	cpi	r18, 0x04	; 4
    17de:	31 05       	cpc	r19, r1
    17e0:	90 f4       	brcc	.+36     	; 0x1806 <malloc+0x9a>
    17e2:	12 96       	adiw	r26, 0x02	; 2
    17e4:	8d 91       	ld	r24, X+
    17e6:	9c 91       	ld	r25, X
    17e8:	13 97       	sbiw	r26, 0x03	; 3
    17ea:	61 15       	cp	r22, r1
    17ec:	71 05       	cpc	r23, r1
    17ee:	21 f0       	breq	.+8      	; 0x17f8 <malloc+0x8c>
    17f0:	fb 01       	movw	r30, r22
    17f2:	93 83       	std	Z+3, r25	; 0x03
    17f4:	82 83       	std	Z+2, r24	; 0x02
    17f6:	04 c0       	rjmp	.+8      	; 0x1800 <malloc+0x94>
    17f8:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <__flp+0x1>
    17fc:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <__flp>
    1800:	fd 01       	movw	r30, r26
    1802:	32 96       	adiw	r30, 0x02	; 2
    1804:	44 c0       	rjmp	.+136    	; 0x188e <malloc+0x122>
    1806:	fd 01       	movw	r30, r26
    1808:	e2 0f       	add	r30, r18
    180a:	f3 1f       	adc	r31, r19
    180c:	81 93       	st	Z+, r24
    180e:	91 93       	st	Z+, r25
    1810:	22 50       	subi	r18, 0x02	; 2
    1812:	31 09       	sbc	r19, r1
    1814:	2d 93       	st	X+, r18
    1816:	3c 93       	st	X, r19
    1818:	3a c0       	rjmp	.+116    	; 0x188e <malloc+0x122>
    181a:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <__brkval>
    181e:	30 91 71 02 	lds	r19, 0x0271	; 0x800271 <__brkval+0x1>
    1822:	23 2b       	or	r18, r19
    1824:	41 f4       	brne	.+16     	; 0x1836 <malloc+0xca>
    1826:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    182a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    182e:	30 93 71 02 	sts	0x0271, r19	; 0x800271 <__brkval+0x1>
    1832:	20 93 70 02 	sts	0x0270, r18	; 0x800270 <__brkval>
    1836:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    183a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    183e:	21 15       	cp	r18, r1
    1840:	31 05       	cpc	r19, r1
    1842:	41 f4       	brne	.+16     	; 0x1854 <malloc+0xe8>
    1844:	2d b7       	in	r18, 0x3d	; 61
    1846:	3e b7       	in	r19, 0x3e	; 62
    1848:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    184c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1850:	24 1b       	sub	r18, r20
    1852:	35 0b       	sbc	r19, r21
    1854:	e0 91 70 02 	lds	r30, 0x0270	; 0x800270 <__brkval>
    1858:	f0 91 71 02 	lds	r31, 0x0271	; 0x800271 <__brkval+0x1>
    185c:	e2 17       	cp	r30, r18
    185e:	f3 07       	cpc	r31, r19
    1860:	a0 f4       	brcc	.+40     	; 0x188a <malloc+0x11e>
    1862:	2e 1b       	sub	r18, r30
    1864:	3f 0b       	sbc	r19, r31
    1866:	28 17       	cp	r18, r24
    1868:	39 07       	cpc	r19, r25
    186a:	78 f0       	brcs	.+30     	; 0x188a <malloc+0x11e>
    186c:	ac 01       	movw	r20, r24
    186e:	4e 5f       	subi	r20, 0xFE	; 254
    1870:	5f 4f       	sbci	r21, 0xFF	; 255
    1872:	24 17       	cp	r18, r20
    1874:	35 07       	cpc	r19, r21
    1876:	48 f0       	brcs	.+18     	; 0x188a <malloc+0x11e>
    1878:	4e 0f       	add	r20, r30
    187a:	5f 1f       	adc	r21, r31
    187c:	50 93 71 02 	sts	0x0271, r21	; 0x800271 <__brkval+0x1>
    1880:	40 93 70 02 	sts	0x0270, r20	; 0x800270 <__brkval>
    1884:	81 93       	st	Z+, r24
    1886:	91 93       	st	Z+, r25
    1888:	02 c0       	rjmp	.+4      	; 0x188e <malloc+0x122>
    188a:	e0 e0       	ldi	r30, 0x00	; 0
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	cf 01       	movw	r24, r30
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	08 95       	ret

00001896 <free>:
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <free+0xe>
    18a2:	8c c0       	rjmp	.+280    	; 0x19bc <free+0x126>
    18a4:	fc 01       	movw	r30, r24
    18a6:	32 97       	sbiw	r30, 0x02	; 2
    18a8:	13 82       	std	Z+3, r1	; 0x03
    18aa:	12 82       	std	Z+2, r1	; 0x02
    18ac:	00 91 72 02 	lds	r16, 0x0272	; 0x800272 <__flp>
    18b0:	10 91 73 02 	lds	r17, 0x0273	; 0x800273 <__flp+0x1>
    18b4:	01 15       	cp	r16, r1
    18b6:	11 05       	cpc	r17, r1
    18b8:	81 f4       	brne	.+32     	; 0x18da <free+0x44>
    18ba:	20 81       	ld	r18, Z
    18bc:	31 81       	ldd	r19, Z+1	; 0x01
    18be:	82 0f       	add	r24, r18
    18c0:	93 1f       	adc	r25, r19
    18c2:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <__brkval>
    18c6:	30 91 71 02 	lds	r19, 0x0271	; 0x800271 <__brkval+0x1>
    18ca:	28 17       	cp	r18, r24
    18cc:	39 07       	cpc	r19, r25
    18ce:	79 f5       	brne	.+94     	; 0x192e <free+0x98>
    18d0:	f0 93 71 02 	sts	0x0271, r31	; 0x800271 <__brkval+0x1>
    18d4:	e0 93 70 02 	sts	0x0270, r30	; 0x800270 <__brkval>
    18d8:	71 c0       	rjmp	.+226    	; 0x19bc <free+0x126>
    18da:	d8 01       	movw	r26, r16
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	50 e0       	ldi	r21, 0x00	; 0
    18e0:	ae 17       	cp	r26, r30
    18e2:	bf 07       	cpc	r27, r31
    18e4:	50 f4       	brcc	.+20     	; 0x18fa <free+0x64>
    18e6:	12 96       	adiw	r26, 0x02	; 2
    18e8:	2d 91       	ld	r18, X+
    18ea:	3c 91       	ld	r19, X
    18ec:	13 97       	sbiw	r26, 0x03	; 3
    18ee:	ad 01       	movw	r20, r26
    18f0:	21 15       	cp	r18, r1
    18f2:	31 05       	cpc	r19, r1
    18f4:	09 f1       	breq	.+66     	; 0x1938 <free+0xa2>
    18f6:	d9 01       	movw	r26, r18
    18f8:	f3 cf       	rjmp	.-26     	; 0x18e0 <free+0x4a>
    18fa:	9d 01       	movw	r18, r26
    18fc:	da 01       	movw	r26, r20
    18fe:	33 83       	std	Z+3, r19	; 0x03
    1900:	22 83       	std	Z+2, r18	; 0x02
    1902:	60 81       	ld	r22, Z
    1904:	71 81       	ldd	r23, Z+1	; 0x01
    1906:	86 0f       	add	r24, r22
    1908:	97 1f       	adc	r25, r23
    190a:	82 17       	cp	r24, r18
    190c:	93 07       	cpc	r25, r19
    190e:	69 f4       	brne	.+26     	; 0x192a <free+0x94>
    1910:	ec 01       	movw	r28, r24
    1912:	28 81       	ld	r18, Y
    1914:	39 81       	ldd	r19, Y+1	; 0x01
    1916:	26 0f       	add	r18, r22
    1918:	37 1f       	adc	r19, r23
    191a:	2e 5f       	subi	r18, 0xFE	; 254
    191c:	3f 4f       	sbci	r19, 0xFF	; 255
    191e:	31 83       	std	Z+1, r19	; 0x01
    1920:	20 83       	st	Z, r18
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	9b 81       	ldd	r25, Y+3	; 0x03
    1926:	93 83       	std	Z+3, r25	; 0x03
    1928:	82 83       	std	Z+2, r24	; 0x02
    192a:	45 2b       	or	r20, r21
    192c:	29 f4       	brne	.+10     	; 0x1938 <free+0xa2>
    192e:	f0 93 73 02 	sts	0x0273, r31	; 0x800273 <__flp+0x1>
    1932:	e0 93 72 02 	sts	0x0272, r30	; 0x800272 <__flp>
    1936:	42 c0       	rjmp	.+132    	; 0x19bc <free+0x126>
    1938:	13 96       	adiw	r26, 0x03	; 3
    193a:	fc 93       	st	X, r31
    193c:	ee 93       	st	-X, r30
    193e:	12 97       	sbiw	r26, 0x02	; 2
    1940:	ed 01       	movw	r28, r26
    1942:	49 91       	ld	r20, Y+
    1944:	59 91       	ld	r21, Y+
    1946:	9e 01       	movw	r18, r28
    1948:	24 0f       	add	r18, r20
    194a:	35 1f       	adc	r19, r21
    194c:	e2 17       	cp	r30, r18
    194e:	f3 07       	cpc	r31, r19
    1950:	71 f4       	brne	.+28     	; 0x196e <free+0xd8>
    1952:	80 81       	ld	r24, Z
    1954:	91 81       	ldd	r25, Z+1	; 0x01
    1956:	84 0f       	add	r24, r20
    1958:	95 1f       	adc	r25, r21
    195a:	02 96       	adiw	r24, 0x02	; 2
    195c:	11 96       	adiw	r26, 0x01	; 1
    195e:	9c 93       	st	X, r25
    1960:	8e 93       	st	-X, r24
    1962:	82 81       	ldd	r24, Z+2	; 0x02
    1964:	93 81       	ldd	r25, Z+3	; 0x03
    1966:	13 96       	adiw	r26, 0x03	; 3
    1968:	9c 93       	st	X, r25
    196a:	8e 93       	st	-X, r24
    196c:	12 97       	sbiw	r26, 0x02	; 2
    196e:	e0 e0       	ldi	r30, 0x00	; 0
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	d8 01       	movw	r26, r16
    1974:	12 96       	adiw	r26, 0x02	; 2
    1976:	8d 91       	ld	r24, X+
    1978:	9c 91       	ld	r25, X
    197a:	13 97       	sbiw	r26, 0x03	; 3
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	19 f0       	breq	.+6      	; 0x1986 <free+0xf0>
    1980:	f8 01       	movw	r30, r16
    1982:	8c 01       	movw	r16, r24
    1984:	f6 cf       	rjmp	.-20     	; 0x1972 <free+0xdc>
    1986:	8d 91       	ld	r24, X+
    1988:	9c 91       	ld	r25, X
    198a:	98 01       	movw	r18, r16
    198c:	2e 5f       	subi	r18, 0xFE	; 254
    198e:	3f 4f       	sbci	r19, 0xFF	; 255
    1990:	82 0f       	add	r24, r18
    1992:	93 1f       	adc	r25, r19
    1994:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <__brkval>
    1998:	30 91 71 02 	lds	r19, 0x0271	; 0x800271 <__brkval+0x1>
    199c:	28 17       	cp	r18, r24
    199e:	39 07       	cpc	r19, r25
    19a0:	69 f4       	brne	.+26     	; 0x19bc <free+0x126>
    19a2:	30 97       	sbiw	r30, 0x00	; 0
    19a4:	29 f4       	brne	.+10     	; 0x19b0 <free+0x11a>
    19a6:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <__flp+0x1>
    19aa:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <__flp>
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <free+0x11e>
    19b0:	13 82       	std	Z+3, r1	; 0x03
    19b2:	12 82       	std	Z+2, r1	; 0x02
    19b4:	10 93 71 02 	sts	0x0271, r17	; 0x800271 <__brkval+0x1>
    19b8:	00 93 70 02 	sts	0x0270, r16	; 0x800270 <__brkval>
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	1f 91       	pop	r17
    19c2:	0f 91       	pop	r16
    19c4:	08 95       	ret

000019c6 <strnlen_P>:
    19c6:	fc 01       	movw	r30, r24
    19c8:	05 90       	lpm	r0, Z+
    19ca:	61 50       	subi	r22, 0x01	; 1
    19cc:	70 40       	sbci	r23, 0x00	; 0
    19ce:	01 10       	cpse	r0, r1
    19d0:	d8 f7       	brcc	.-10     	; 0x19c8 <strnlen_P+0x2>
    19d2:	80 95       	com	r24
    19d4:	90 95       	com	r25
    19d6:	8e 0f       	add	r24, r30
    19d8:	9f 1f       	adc	r25, r31
    19da:	08 95       	ret

000019dc <memset>:
    19dc:	dc 01       	movw	r26, r24
    19de:	01 c0       	rjmp	.+2      	; 0x19e2 <memset+0x6>
    19e0:	6d 93       	st	X+, r22
    19e2:	41 50       	subi	r20, 0x01	; 1
    19e4:	50 40       	sbci	r21, 0x00	; 0
    19e6:	e0 f7       	brcc	.-8      	; 0x19e0 <memset+0x4>
    19e8:	08 95       	ret

000019ea <strnlen>:
    19ea:	fc 01       	movw	r30, r24
    19ec:	61 50       	subi	r22, 0x01	; 1
    19ee:	70 40       	sbci	r23, 0x00	; 0
    19f0:	01 90       	ld	r0, Z+
    19f2:	01 10       	cpse	r0, r1
    19f4:	d8 f7       	brcc	.-10     	; 0x19ec <strnlen+0x2>
    19f6:	80 95       	com	r24
    19f8:	90 95       	com	r25
    19fa:	8e 0f       	add	r24, r30
    19fc:	9f 1f       	adc	r25, r31
    19fe:	08 95       	ret

00001a00 <strrev>:
    1a00:	dc 01       	movw	r26, r24
    1a02:	fc 01       	movw	r30, r24
    1a04:	67 2f       	mov	r22, r23
    1a06:	71 91       	ld	r23, Z+
    1a08:	77 23       	and	r23, r23
    1a0a:	e1 f7       	brne	.-8      	; 0x1a04 <strrev+0x4>
    1a0c:	32 97       	sbiw	r30, 0x02	; 2
    1a0e:	04 c0       	rjmp	.+8      	; 0x1a18 <strrev+0x18>
    1a10:	7c 91       	ld	r23, X
    1a12:	6d 93       	st	X+, r22
    1a14:	70 83       	st	Z, r23
    1a16:	62 91       	ld	r22, -Z
    1a18:	ae 17       	cp	r26, r30
    1a1a:	bf 07       	cpc	r27, r31
    1a1c:	c8 f3       	brcs	.-14     	; 0x1a10 <strrev+0x10>
    1a1e:	08 95       	ret

00001a20 <fputc>:
    1a20:	0f 93       	push	r16
    1a22:	1f 93       	push	r17
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	fb 01       	movw	r30, r22
    1a2a:	23 81       	ldd	r18, Z+3	; 0x03
    1a2c:	21 fd       	sbrc	r18, 1
    1a2e:	03 c0       	rjmp	.+6      	; 0x1a36 <fputc+0x16>
    1a30:	8f ef       	ldi	r24, 0xFF	; 255
    1a32:	9f ef       	ldi	r25, 0xFF	; 255
    1a34:	28 c0       	rjmp	.+80     	; 0x1a86 <fputc+0x66>
    1a36:	22 ff       	sbrs	r18, 2
    1a38:	16 c0       	rjmp	.+44     	; 0x1a66 <fputc+0x46>
    1a3a:	46 81       	ldd	r20, Z+6	; 0x06
    1a3c:	57 81       	ldd	r21, Z+7	; 0x07
    1a3e:	24 81       	ldd	r18, Z+4	; 0x04
    1a40:	35 81       	ldd	r19, Z+5	; 0x05
    1a42:	42 17       	cp	r20, r18
    1a44:	53 07       	cpc	r21, r19
    1a46:	44 f4       	brge	.+16     	; 0x1a58 <fputc+0x38>
    1a48:	a0 81       	ld	r26, Z
    1a4a:	b1 81       	ldd	r27, Z+1	; 0x01
    1a4c:	9d 01       	movw	r18, r26
    1a4e:	2f 5f       	subi	r18, 0xFF	; 255
    1a50:	3f 4f       	sbci	r19, 0xFF	; 255
    1a52:	31 83       	std	Z+1, r19	; 0x01
    1a54:	20 83       	st	Z, r18
    1a56:	8c 93       	st	X, r24
    1a58:	26 81       	ldd	r18, Z+6	; 0x06
    1a5a:	37 81       	ldd	r19, Z+7	; 0x07
    1a5c:	2f 5f       	subi	r18, 0xFF	; 255
    1a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a60:	37 83       	std	Z+7, r19	; 0x07
    1a62:	26 83       	std	Z+6, r18	; 0x06
    1a64:	10 c0       	rjmp	.+32     	; 0x1a86 <fputc+0x66>
    1a66:	eb 01       	movw	r28, r22
    1a68:	09 2f       	mov	r16, r25
    1a6a:	18 2f       	mov	r17, r24
    1a6c:	00 84       	ldd	r0, Z+8	; 0x08
    1a6e:	f1 85       	ldd	r31, Z+9	; 0x09
    1a70:	e0 2d       	mov	r30, r0
    1a72:	19 95       	eicall
    1a74:	89 2b       	or	r24, r25
    1a76:	e1 f6       	brne	.-72     	; 0x1a30 <fputc+0x10>
    1a78:	8e 81       	ldd	r24, Y+6	; 0x06
    1a7a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a7c:	01 96       	adiw	r24, 0x01	; 1
    1a7e:	9f 83       	std	Y+7, r25	; 0x07
    1a80:	8e 83       	std	Y+6, r24	; 0x06
    1a82:	81 2f       	mov	r24, r17
    1a84:	90 2f       	mov	r25, r16
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	1f 91       	pop	r17
    1a8c:	0f 91       	pop	r16
    1a8e:	08 95       	ret

00001a90 <__ultoa_invert>:
    1a90:	fa 01       	movw	r30, r20
    1a92:	aa 27       	eor	r26, r26
    1a94:	28 30       	cpi	r18, 0x08	; 8
    1a96:	51 f1       	breq	.+84     	; 0x1aec <__ultoa_invert+0x5c>
    1a98:	20 31       	cpi	r18, 0x10	; 16
    1a9a:	81 f1       	breq	.+96     	; 0x1afc <__ultoa_invert+0x6c>
    1a9c:	e8 94       	clt
    1a9e:	6f 93       	push	r22
    1aa0:	6e 7f       	andi	r22, 0xFE	; 254
    1aa2:	6e 5f       	subi	r22, 0xFE	; 254
    1aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa6:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aaa:	af 4f       	sbci	r26, 0xFF	; 255
    1aac:	b1 e0       	ldi	r27, 0x01	; 1
    1aae:	3e d0       	rcall	.+124    	; 0x1b2c <__ultoa_invert+0x9c>
    1ab0:	b4 e0       	ldi	r27, 0x04	; 4
    1ab2:	3c d0       	rcall	.+120    	; 0x1b2c <__ultoa_invert+0x9c>
    1ab4:	67 0f       	add	r22, r23
    1ab6:	78 1f       	adc	r23, r24
    1ab8:	89 1f       	adc	r24, r25
    1aba:	9a 1f       	adc	r25, r26
    1abc:	a1 1d       	adc	r26, r1
    1abe:	68 0f       	add	r22, r24
    1ac0:	79 1f       	adc	r23, r25
    1ac2:	8a 1f       	adc	r24, r26
    1ac4:	91 1d       	adc	r25, r1
    1ac6:	a1 1d       	adc	r26, r1
    1ac8:	6a 0f       	add	r22, r26
    1aca:	71 1d       	adc	r23, r1
    1acc:	81 1d       	adc	r24, r1
    1ace:	91 1d       	adc	r25, r1
    1ad0:	a1 1d       	adc	r26, r1
    1ad2:	20 d0       	rcall	.+64     	; 0x1b14 <__ultoa_invert+0x84>
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <__ultoa_invert+0x48>
    1ad6:	68 94       	set
    1ad8:	3f 91       	pop	r19
    1ada:	2a e0       	ldi	r18, 0x0A	; 10
    1adc:	26 9f       	mul	r18, r22
    1ade:	11 24       	eor	r1, r1
    1ae0:	30 19       	sub	r19, r0
    1ae2:	30 5d       	subi	r19, 0xD0	; 208
    1ae4:	31 93       	st	Z+, r19
    1ae6:	de f6       	brtc	.-74     	; 0x1a9e <__ultoa_invert+0xe>
    1ae8:	cf 01       	movw	r24, r30
    1aea:	08 95       	ret
    1aec:	46 2f       	mov	r20, r22
    1aee:	47 70       	andi	r20, 0x07	; 7
    1af0:	40 5d       	subi	r20, 0xD0	; 208
    1af2:	41 93       	st	Z+, r20
    1af4:	b3 e0       	ldi	r27, 0x03	; 3
    1af6:	0f d0       	rcall	.+30     	; 0x1b16 <__ultoa_invert+0x86>
    1af8:	c9 f7       	brne	.-14     	; 0x1aec <__ultoa_invert+0x5c>
    1afa:	f6 cf       	rjmp	.-20     	; 0x1ae8 <__ultoa_invert+0x58>
    1afc:	46 2f       	mov	r20, r22
    1afe:	4f 70       	andi	r20, 0x0F	; 15
    1b00:	40 5d       	subi	r20, 0xD0	; 208
    1b02:	4a 33       	cpi	r20, 0x3A	; 58
    1b04:	18 f0       	brcs	.+6      	; 0x1b0c <__ultoa_invert+0x7c>
    1b06:	49 5d       	subi	r20, 0xD9	; 217
    1b08:	31 fd       	sbrc	r19, 1
    1b0a:	40 52       	subi	r20, 0x20	; 32
    1b0c:	41 93       	st	Z+, r20
    1b0e:	02 d0       	rcall	.+4      	; 0x1b14 <__ultoa_invert+0x84>
    1b10:	a9 f7       	brne	.-22     	; 0x1afc <__ultoa_invert+0x6c>
    1b12:	ea cf       	rjmp	.-44     	; 0x1ae8 <__ultoa_invert+0x58>
    1b14:	b4 e0       	ldi	r27, 0x04	; 4
    1b16:	a6 95       	lsr	r26
    1b18:	97 95       	ror	r25
    1b1a:	87 95       	ror	r24
    1b1c:	77 95       	ror	r23
    1b1e:	67 95       	ror	r22
    1b20:	ba 95       	dec	r27
    1b22:	c9 f7       	brne	.-14     	; 0x1b16 <__ultoa_invert+0x86>
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	61 05       	cpc	r22, r1
    1b28:	71 05       	cpc	r23, r1
    1b2a:	08 95       	ret
    1b2c:	9b 01       	movw	r18, r22
    1b2e:	ac 01       	movw	r20, r24
    1b30:	0a 2e       	mov	r0, r26
    1b32:	06 94       	lsr	r0
    1b34:	57 95       	ror	r21
    1b36:	47 95       	ror	r20
    1b38:	37 95       	ror	r19
    1b3a:	27 95       	ror	r18
    1b3c:	ba 95       	dec	r27
    1b3e:	c9 f7       	brne	.-14     	; 0x1b32 <__ultoa_invert+0xa2>
    1b40:	62 0f       	add	r22, r18
    1b42:	73 1f       	adc	r23, r19
    1b44:	84 1f       	adc	r24, r20
    1b46:	95 1f       	adc	r25, r21
    1b48:	a0 1d       	adc	r26, r0
    1b4a:	08 95       	ret

00001b4c <_exit>:
    1b4c:	f8 94       	cli

00001b4e <__stop_program>:
    1b4e:	ff cf       	rjmp	.-2      	; 0x1b4e <__stop_program>
