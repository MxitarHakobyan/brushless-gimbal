
drv_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800200  00001b82  00001c16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  0080024a  0080024a  00001c60  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023d1  00000000  00000000  00001eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000130b  00000000  00000000  00004285  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010ca  00000000  00000000  00005590  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e8  00000000  00000000  0000665c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aa7  00000000  00000000  00006b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000167e  00000000  00000000  000075eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00008c69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	80 c0       	rjmp	.+256    	; 0x102 <__ctors_end>
       2:	00 00       	nop
       4:	9e c0       	rjmp	.+316    	; 0x142 <__bad_interrupt>
       6:	00 00       	nop
       8:	9c c0       	rjmp	.+312    	; 0x142 <__bad_interrupt>
       a:	00 00       	nop
       c:	9a c0       	rjmp	.+308    	; 0x142 <__bad_interrupt>
       e:	00 00       	nop
      10:	98 c0       	rjmp	.+304    	; 0x142 <__bad_interrupt>
      12:	00 00       	nop
      14:	96 c0       	rjmp	.+300    	; 0x142 <__bad_interrupt>
      16:	00 00       	nop
      18:	94 c0       	rjmp	.+296    	; 0x142 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	92 c0       	rjmp	.+292    	; 0x142 <__bad_interrupt>
      1e:	00 00       	nop
      20:	90 c0       	rjmp	.+288    	; 0x142 <__bad_interrupt>
      22:	00 00       	nop
      24:	8e c0       	rjmp	.+284    	; 0x142 <__bad_interrupt>
      26:	00 00       	nop
      28:	8c c0       	rjmp	.+280    	; 0x142 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8a c0       	rjmp	.+276    	; 0x142 <__bad_interrupt>
      2e:	00 00       	nop
      30:	88 c0       	rjmp	.+272    	; 0x142 <__bad_interrupt>
      32:	00 00       	nop
      34:	86 c0       	rjmp	.+268    	; 0x142 <__bad_interrupt>
      36:	00 00       	nop
      38:	84 c0       	rjmp	.+264    	; 0x142 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	82 c0       	rjmp	.+260    	; 0x142 <__bad_interrupt>
      3e:	00 00       	nop
      40:	80 c0       	rjmp	.+256    	; 0x142 <__bad_interrupt>
      42:	00 00       	nop
      44:	7e c0       	rjmp	.+252    	; 0x142 <__bad_interrupt>
      46:	00 00       	nop
      48:	7c c0       	rjmp	.+248    	; 0x142 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7a c0       	rjmp	.+244    	; 0x142 <__bad_interrupt>
      4e:	00 00       	nop
      50:	78 c0       	rjmp	.+240    	; 0x142 <__bad_interrupt>
      52:	00 00       	nop
      54:	76 c0       	rjmp	.+236    	; 0x142 <__bad_interrupt>
      56:	00 00       	nop
      58:	74 c0       	rjmp	.+232    	; 0x142 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	72 c0       	rjmp	.+228    	; 0x142 <__bad_interrupt>
      5e:	00 00       	nop
      60:	70 c0       	rjmp	.+224    	; 0x142 <__bad_interrupt>
      62:	00 00       	nop
      64:	6e c0       	rjmp	.+220    	; 0x142 <__bad_interrupt>
      66:	00 00       	nop
      68:	6c c0       	rjmp	.+216    	; 0x142 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6a c0       	rjmp	.+212    	; 0x142 <__bad_interrupt>
      6e:	00 00       	nop
      70:	68 c0       	rjmp	.+208    	; 0x142 <__bad_interrupt>
      72:	00 00       	nop
      74:	66 c0       	rjmp	.+204    	; 0x142 <__bad_interrupt>
      76:	00 00       	nop
      78:	64 c0       	rjmp	.+200    	; 0x142 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	62 c0       	rjmp	.+196    	; 0x142 <__bad_interrupt>
      7e:	00 00       	nop
      80:	81 c0       	rjmp	.+258    	; 0x184 <__vector_32>
      82:	00 00       	nop
      84:	5e c0       	rjmp	.+188    	; 0x142 <__bad_interrupt>
      86:	00 00       	nop
      88:	5c c0       	rjmp	.+184    	; 0x142 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5a c0       	rjmp	.+180    	; 0x142 <__bad_interrupt>
      8e:	00 00       	nop
      90:	58 c0       	rjmp	.+176    	; 0x142 <__bad_interrupt>
      92:	00 00       	nop
      94:	56 c0       	rjmp	.+172    	; 0x142 <__bad_interrupt>
      96:	00 00       	nop
      98:	54 c0       	rjmp	.+168    	; 0x142 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	52 c0       	rjmp	.+164    	; 0x142 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	50 c0       	rjmp	.+160    	; 0x142 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4e c0       	rjmp	.+156    	; 0x142 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4c c0       	rjmp	.+152    	; 0x142 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4a c0       	rjmp	.+148    	; 0x142 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	48 c0       	rjmp	.+144    	; 0x142 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	46 c0       	rjmp	.+140    	; 0x142 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	44 c0       	rjmp	.+136    	; 0x142 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	42 c0       	rjmp	.+132    	; 0x142 <__bad_interrupt>
      be:	00 00       	nop
      c0:	40 c0       	rjmp	.+128    	; 0x142 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3e c0       	rjmp	.+124    	; 0x142 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3c c0       	rjmp	.+120    	; 0x142 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3a c0       	rjmp	.+116    	; 0x142 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	38 c0       	rjmp	.+112    	; 0x142 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	36 c0       	rjmp	.+108    	; 0x142 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	34 c0       	rjmp	.+104    	; 0x142 <__bad_interrupt>
      da:	00 00       	nop
      dc:	32 c0       	rjmp	.+100    	; 0x142 <__bad_interrupt>
      de:	00 00       	nop
      e0:	30 c0       	rjmp	.+96     	; 0x142 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	05 a8       	ldd	r0, Z+53	; 0x35
      e6:	4c cd       	rjmp	.-1384   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
      e8:	b2 d4       	rcall	.+2404   	; 0xa4e <mpu6050_getRawData+0x48>
      ea:	4e b9       	out	0x0e, r20	; 14
      ec:	38 36       	cpi	r19, 0x68	; 104
      ee:	a9 02       	muls	r26, r25
      f0:	0c 50       	subi	r16, 0x0C	; 12
      f2:	b9 91       	ld	r27, Y+
      f4:	86 88       	ldd	r8, Z+22	; 0x16
      f6:	08 3c       	cpi	r16, 0xC8	; 200
      f8:	a6 aa       	std	Z+54, r10	; 0x36
      fa:	aa 2a       	or	r10, r26
      fc:	be 00       	.word	0x00be	; ????
      fe:	00 00       	nop
     100:	80 3f       	cpi	r24, 0xF0	; 240

00000102 <__ctors_end>:
     102:	11 24       	eor	r1, r1
     104:	1f be       	out	0x3f, r1	; 63
     106:	cf ef       	ldi	r28, 0xFF	; 255
     108:	d1 e2       	ldi	r29, 0x21	; 33
     10a:	de bf       	out	0x3e, r29	; 62
     10c:	cd bf       	out	0x3d, r28	; 61
     10e:	00 e0       	ldi	r16, 0x00	; 0
     110:	0c bf       	out	0x3c, r16	; 60

00000112 <__do_copy_data>:
     112:	12 e0       	ldi	r17, 0x02	; 2
     114:	a0 e0       	ldi	r26, 0x00	; 0
     116:	b2 e0       	ldi	r27, 0x02	; 2
     118:	e2 e8       	ldi	r30, 0x82	; 130
     11a:	fb e1       	ldi	r31, 0x1B	; 27
     11c:	00 e0       	ldi	r16, 0x00	; 0
     11e:	0b bf       	out	0x3b, r16	; 59
     120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x14>
     122:	07 90       	elpm	r0, Z+
     124:	0d 92       	st	X+, r0
     126:	aa 34       	cpi	r26, 0x4A	; 74
     128:	b1 07       	cpc	r27, r17
     12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0x10>

0000012c <__do_clear_bss>:
     12c:	22 e0       	ldi	r18, 0x02	; 2
     12e:	aa e4       	ldi	r26, 0x4A	; 74
     130:	b2 e0       	ldi	r27, 0x02	; 2
     132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
     134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
     136:	a8 36       	cpi	r26, 0x68	; 104
     138:	b2 07       	cpc	r27, r18
     13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
     13c:	9d d0       	rcall	.+314    	; 0x278 <main>
     13e:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <_exit>

00000142 <__bad_interrupt>:
     142:	5e cf       	rjmp	.-324    	; 0x0 <__vectors>

00000144 <init_gpio>:
	DDRD|=(1<<PD7);//enable 1 DIGITAL 7
	DDRB|=(1<<PB0);//enable 2 DIGITAL 8
	DDRD|=(1<<PD2);//enable 3 DIGITAL 2
	*/
	//DDRB|=(1<<PB5);//LED13
	sbi(DDRB,4);//digital 10
     144:	24 9a       	sbi	0x04, 4	; 4
	sbi(DDRB,5);//digital 11
     146:	25 9a       	sbi	0x04, 5	; 4
	sbi(DDRB,6);//digital 12
     148:	26 9a       	sbi	0x04, 6	; 4
	sbi(DDRH,4);//digital 7
     14a:	e1 e0       	ldi	r30, 0x01	; 1
     14c:	f1 e0       	ldi	r31, 0x01	; 1
     14e:	80 81       	ld	r24, Z
     150:	80 61       	ori	r24, 0x10	; 16
     152:	80 83       	st	Z, r24
	sbi(DDRH,5);//digital 8
     154:	80 81       	ld	r24, Z
     156:	80 62       	ori	r24, 0x20	; 32
     158:	80 83       	st	Z, r24
	sbi(DDRH,6);//digital 9
     15a:	80 81       	ld	r24, Z
     15c:	80 64       	ori	r24, 0x40	; 64
     15e:	80 83       	st	Z, r24
     160:	08 95       	ret

00000162 <uart_putchar>:
		}
	}
	return true;
}
static int uart_putchar(char c, FILE *stream)
{
     162:	cf 93       	push	r28
     164:	c8 2f       	mov	r28, r24

	if (c == '\n')
     166:	8a 30       	cpi	r24, 0x0A	; 10
     168:	11 f4       	brne	.+4      	; 0x16e <uart_putchar+0xc>
	uart_putchar('\r', stream);
     16a:	8d e0       	ldi	r24, 0x0D	; 13
     16c:	fa df       	rcall	.-12     	; 0x162 <uart_putchar>
	while ( !( UCSR0A & (1<<UDRE0)) )
     16e:	e0 ec       	ldi	r30, 0xC0	; 192
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	85 ff       	sbrs	r24, 5
     176:	fd cf       	rjmp	.-6      	; 0x172 <uart_putchar+0x10>
	;
	/* Put data into buffer, sends the data */
	UDR0 = c;
     178:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	return 0;
}
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	cf 91       	pop	r28
     182:	08 95       	ret

00000184 <__vector_32>:
		#endif  
	}
	return 0;
}
ISR(TIMER3_COMPA_vect)//10 microsecconed timer interrupt
{
     184:	1f 92       	push	r1
     186:	0f 92       	push	r0
     188:	0f b6       	in	r0, 0x3f	; 63
     18a:	0f 92       	push	r0
     18c:	11 24       	eor	r1, r1
     18e:	8f 93       	push	r24
     190:	9f 93       	push	r25
     192:	af 93       	push	r26
     194:	bf 93       	push	r27
		++_10micros;
     196:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__data_end>
     19a:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <__data_end+0x1>
     19e:	a0 91 4c 02 	lds	r26, 0x024C	; 0x80024c <__data_end+0x2>
     1a2:	b0 91 4d 02 	lds	r27, 0x024D	; 0x80024d <__data_end+0x3>
     1a6:	01 96       	adiw	r24, 0x01	; 1
     1a8:	a1 1d       	adc	r26, r1
     1aa:	b1 1d       	adc	r27, r1
     1ac:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <__data_end>
     1b0:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <__data_end+0x1>
     1b4:	a0 93 4c 02 	sts	0x024C, r26	; 0x80024c <__data_end+0x2>
     1b8:	b0 93 4d 02 	sts	0x024D, r27	; 0x80024d <__data_end+0x3>
		HS_U_INVERSE;
     1bc:	95 b1       	in	r25, 0x05	; 5
     1be:	80 e1       	ldi	r24, 0x10	; 16
     1c0:	89 27       	eor	r24, r25
     1c2:	85 b9       	out	0x05, r24	; 5
}
     1c4:	bf 91       	pop	r27
     1c6:	af 91       	pop	r26
     1c8:	9f 91       	pop	r25
     1ca:	8f 91       	pop	r24
     1cc:	0f 90       	pop	r0
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	0f 90       	pop	r0
     1d2:	1f 90       	pop	r1
     1d4:	18 95       	reti

000001d6 <print16>:
//}

void print16(uint16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62
     1e2:	2a 97       	sbiw	r28, 0x0a	; 10
     1e4:	0f b6       	in	r0, 0x3f	; 63
     1e6:	f8 94       	cli
     1e8:	de bf       	out	0x3e, r29	; 62
     1ea:	0f be       	out	0x3f, r0	; 63
     1ec:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     1ee:	4a e0       	ldi	r20, 0x0A	; 10
     1f0:	8e 01       	movw	r16, r28
     1f2:	0f 5f       	subi	r16, 0xFF	; 255
     1f4:	1f 4f       	sbci	r17, 0xFF	; 255
     1f6:	b8 01       	movw	r22, r16
     1f8:	fc 01       	movw	r30, r24
     1fa:	80 81       	ld	r24, Z
     1fc:	91 81       	ldd	r25, Z+1	; 0x01
     1fe:	0e 94 0b 09 	call	0x1216	; 0x1216 <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     202:	1f 93       	push	r17
     204:	0f 93       	push	r16
     206:	0e 94 78 09 	call	0x12f0	; 0x12f0 <printf>
	//printf("\n");
}
     20a:	0f 90       	pop	r0
     20c:	0f 90       	pop	r0
     20e:	2a 96       	adiw	r28, 0x0a	; 10
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	f8 94       	cli
     214:	de bf       	out	0x3e, r29	; 62
     216:	0f be       	out	0x3f, r0	; 63
     218:	cd bf       	out	0x3d, r28	; 61
     21a:	df 91       	pop	r29
     21c:	cf 91       	pop	r28
     21e:	1f 91       	pop	r17
     220:	0f 91       	pop	r16
     222:	08 95       	ret

00000224 <print16ln>:

void print16ln(uint16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     224:	0f 93       	push	r16
     226:	1f 93       	push	r17
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	2a 97       	sbiw	r28, 0x0a	; 10
     232:	0f b6       	in	r0, 0x3f	; 63
     234:	f8 94       	cli
     236:	de bf       	out	0x3e, r29	; 62
     238:	0f be       	out	0x3f, r0	; 63
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	4a e0       	ldi	r20, 0x0A	; 10
     23e:	8e 01       	movw	r16, r28
     240:	0f 5f       	subi	r16, 0xFF	; 255
     242:	1f 4f       	sbci	r17, 0xFF	; 255
     244:	b8 01       	movw	r22, r16
     246:	fc 01       	movw	r30, r24
     248:	80 81       	ld	r24, Z
     24a:	91 81       	ldd	r25, Z+1	; 0x01
     24c:	e4 d7       	rcall	.+4040   	; 0x1216 <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     24e:	1f 93       	push	r17
     250:	0f 93       	push	r16
     252:	0e 94 78 09 	call	0x12f0	; 0x12f0 <printf>
	printf("\n");
     256:	8a e0       	ldi	r24, 0x0A	; 10
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 8b 09 	call	0x1316	; 0x1316 <putchar>
}
     25e:	0f 90       	pop	r0
     260:	0f 90       	pop	r0
     262:	2a 96       	adiw	r28, 0x0a	; 10
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	f8 94       	cli
     268:	de bf       	out	0x3e, r29	; 62
     26a:	0f be       	out	0x3f, r0	; 63
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	1f 91       	pop	r17
     274:	0f 91       	pop	r16
     276:	08 95       	ret

00000278 <main>:
uint16_t ADC_max=0;
uint8_t buffer[14];
uint8_t flag=0;
int main(void)

{	
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
     280:	aa 97       	sbiw	r28, 0x2a	; 42
     282:	0f b6       	in	r0, 0x3f	; 63
     284:	f8 94       	cli
     286:	de bf       	out	0x3e, r29	; 62
     288:	0f be       	out	0x3f, r0	; 63
	init_gpio();
	i2c_init();
     28a:	cd bf       	out	0x3d, r28	; 61
	USART_Init(MY_UBRR);
     28c:	5b df       	rcall	.-330    	; 0x144 <init_gpio>
     28e:	35 d4       	rcall	.+2154   	; 0xafa <i2c_init>
     290:	80 e1       	ldi	r24, 0x10	; 16
	uart_str = fdevopen(uart_putchar, NULL);
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	e3 d4       	rcall	.+2502   	; 0xc5c <USART_Init>
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	81 eb       	ldi	r24, 0xB1	; 177
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	de d7       	rcall	.+4028   	; 0x125c <fdevopen>
     2a0:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <uart_str+0x1>
	setup_timer3();
     2a4:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <uart_str>
	Enable_timer3_compare_interrupt();
     2a8:	19 d4       	rcall	.+2098   	; 0xadc <setup_timer3>
	OCR3A=159;//interrupt every 10us
     2aa:	21 d4       	rcall	.+2114   	; 0xaee <Enable_timer3_compare_interrupt>
     2ac:	8f e9       	ldi	r24, 0x9F	; 159
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     2b4:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
	float acc_total_vector=0;
	float angle_pitch_acc=0;
	float angle_roll_acc=0;
	bool set_gyro_angles;
	#ifdef CALIBERATED_DATA
		int32_t gyroX_calib=0;
     2b8:	1d 86       	std	Y+13, r1	; 0x0d
     2ba:	1e 86       	std	Y+14, r1	; 0x0e
     2bc:	1f 86       	std	Y+15, r1	; 0x0f
		int32_t gyroY_calib=0;
     2be:	18 8a       	std	Y+16, r1	; 0x10
     2c0:	19 8a       	std	Y+17, r1	; 0x11
     2c2:	1a 8a       	std	Y+18, r1	; 0x12
     2c4:	1b 8a       	std	Y+19, r1	; 0x13
		int32_t gyroZ_calib=0;
     2c6:	1c 8a       	std	Y+20, r1	; 0x14
     2c8:	1d 8a       	std	Y+21, r1	; 0x15
     2ca:	1e 8a       	std	Y+22, r1	; 0x16
     2cc:	1f 8a       	std	Y+23, r1	; 0x17
		int32_t accelX_calib=0;
     2ce:	18 8e       	std	Y+24, r1	; 0x18
     2d0:	19 8e       	std	Y+25, r1	; 0x19
     2d2:	1a 8e       	std	Y+26, r1	; 0x1a
     2d4:	1b 8e       	std	Y+27, r1	; 0x1b
		int32_t accelY_calib=0;
     2d6:	1c 8e       	std	Y+28, r1	; 0x1c
     2d8:	1d 8e       	std	Y+29, r1	; 0x1d
     2da:	1e 8e       	std	Y+30, r1	; 0x1e
     2dc:	1f 8e       	std	Y+31, r1	; 0x1f
		int32_t accelZ_calib=0;
     2de:	18 a2       	std	Y+32, r1	; 0x20
     2e0:	19 a2       	std	Y+33, r1	; 0x21
     2e2:	1a a2       	std	Y+34, r1	; 0x22
     2e4:	1b a2       	std	Y+35, r1	; 0x23
		mpu6050_calibrate_gyro(&gyroX_calib,&gyroY_calib,&gyroZ_calib);
     2e6:	1c a2       	std	Y+36, r1	; 0x24
     2e8:	ae 01       	movw	r20, r28
     2ea:	4b 5e       	subi	r20, 0xEB	; 235
     2ec:	5f 4f       	sbci	r21, 0xFF	; 255
     2ee:	be 01       	movw	r22, r28
     2f0:	6f 5e       	subi	r22, 0xEF	; 239
     2f2:	7f 4f       	sbci	r23, 0xFF	; 255
     2f4:	ce 01       	movw	r24, r28
     2f6:	0d 96       	adiw	r24, 0x0d	; 13
		mpu6050_calibrate_accel(&accelX_calib,&accelY_calib,&accelZ_calib);
     2f8:	8c d1       	rcall	.+792    	; 0x612 <mpu6050_calibrate_gyro>
     2fa:	ae 01       	movw	r20, r28
     2fc:	4f 5d       	subi	r20, 0xDF	; 223
     2fe:	5f 4f       	sbci	r21, 0xFF	; 255
     300:	be 01       	movw	r22, r28
     302:	63 5e       	subi	r22, 0xE3	; 227
     304:	7f 4f       	sbci	r23, 0xFF	; 255
	#endif
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV,7);
     306:	ce 01       	movw	r24, r28
     308:	49 96       	adiw	r24, 0x19	; 25
	mpu6050_writeByte(MPU6050_RA_CONFIG,0x00);
     30a:	6a d2       	rcall	.+1236   	; 0x7e0 <mpu6050_calibrate_accel>
     30c:	67 e0       	ldi	r22, 0x07	; 7
	mpu6050_writeByte(MPU6050_RA_GYRO_CONFIG,0x08);//gyro sensitivity set to 500 o/s
     30e:	89 e1       	ldi	r24, 0x19	; 25
     310:	1e d3       	rcall	.+1596   	; 0x94e <mpu6050_writeByte>
     312:	60 e0       	ldi	r22, 0x00	; 0
     314:	8a e1       	ldi	r24, 0x1A	; 26
	mpu6050_writeByte(MPU6050_RA_ACCEL_CONFIG,0x10);//accel sensitivity -/+ 8g
     316:	1b d3       	rcall	.+1590   	; 0x94e <mpu6050_writeByte>
     318:	68 e0       	ldi	r22, 0x08	; 8
     31a:	8b e1       	ldi	r24, 0x1B	; 27
     31c:	18 d3       	rcall	.+1584   	; 0x94e <mpu6050_writeByte>
	mpu6050_writeByte(MPU6050_RA_PWR_MGMT_1,0x01);
     31e:	60 e1       	ldi	r22, 0x10	; 16
     320:	8c e1       	ldi	r24, 0x1C	; 28
     322:	15 d3       	rcall	.+1578   	; 0x94e <mpu6050_writeByte>
     324:	61 e0       	ldi	r22, 0x01	; 1
	
	/*-----------------end---------------*/
	sei();
     326:	8b e6       	ldi	r24, 0x6B	; 107
	uint32_t timer1=_10micros;
     328:	12 d3       	rcall	.+1572   	; 0x94e <mpu6050_writeByte>
     32a:	78 94       	sei
     32c:	40 90 4a 02 	lds	r4, 0x024A	; 0x80024a <__data_end>
     330:	50 90 4b 02 	lds	r5, 0x024B	; 0x80024b <__data_end+0x1>
     334:	60 90 4c 02 	lds	r6, 0x024C	; 0x80024c <__data_end+0x2>
	int16_t gyro_z;
	int16_t accel_x;
	int16_t accel_y;
	int16_t accel_z;
	float angle_pitch=0;
	float angle_roll=0;
     338:	70 90 4d 02 	lds	r7, 0x024D	; 0x80024d <__data_end+0x3>
     33c:	81 2c       	mov	r8, r1
	int16_t gyro_y;
	int16_t gyro_z;
	int16_t accel_x;
	int16_t accel_y;
	int16_t accel_z;
	float angle_pitch=0;
     33e:	91 2c       	mov	r9, r1
     340:	54 01       	movw	r10, r8
     342:	8f a2       	std	Y+39, r8	; 0x27
     344:	98 a6       	std	Y+40, r9	; 0x28
				angle_roll += gyroYrate*dt;  //Calculate the traveled roll angle and add this to the angle_roll variable
				printf("gyrox=");
				print16(&gyro_x);
				uint16_t reg=angle_pitch;
				printf(" ");
				printf("var=");
     346:	a9 a6       	std	Y+41, r10	; 0x29
     348:	ba a6       	std	Y+42, r11	; 0x2a
     34a:	0f 2e       	mov	r0, r31
     34c:	fd e0       	ldi	r31, 0x0D	; 13
     34e:	2f 2e       	mov	r2, r31
     350:	f2 e0       	ldi	r31, 0x02	; 2
	/*-----------------end---------------*/
	sei();
	uint32_t timer1=_10micros;
    while (1) 
    {
    	mpu6050_getRawData(&accel_x,&accel_y,&accel_z,&gyro_x,&gyro_y,&gyro_z);//15us to do 
     352:	3f 2e       	mov	r3, r31
     354:	f0 2d       	mov	r31, r0
     356:	8e 01       	movw	r16, r28
     358:	0b 5f       	subi	r16, 0xFB	; 251
     35a:	1f 4f       	sbci	r17, 0xFF	; 255
     35c:	78 01       	movw	r14, r16
     35e:	02 50       	subi	r16, 0x02	; 2
     360:	11 09       	sbc	r17, r1
     362:	9e 01       	movw	r18, r28
     364:	2f 5f       	subi	r18, 0xFF	; 255
     366:	3f 4f       	sbci	r19, 0xFF	; 255
     368:	ae 01       	movw	r20, r28
     36a:	45 5f       	subi	r20, 0xF5	; 245
     36c:	5f 4f       	sbci	r21, 0xFF	; 255
     36e:	be 01       	movw	r22, r28
     370:	67 5f       	subi	r22, 0xF7	; 247
     372:	7f 4f       	sbci	r23, 0xFF	; 255
     374:	ce 01       	movw	r24, r28
		double dt = (double)((_10micros - timer1)*10);
     376:	07 96       	adiw	r24, 0x07	; 7
     378:	46 d3       	rcall	.+1676   	; 0xa06 <mpu6050_getRawData>
     37a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__data_end>
     37e:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <__data_end+0x1>
     382:	a0 91 4c 02 	lds	r26, 0x024C	; 0x80024c <__data_end+0x2>
     386:	b0 91 4d 02 	lds	r27, 0x024D	; 0x80024d <__data_end+0x3>
     38a:	84 19       	sub	r24, r4
     38c:	95 09       	sbc	r25, r5
     38e:	a6 09       	sbc	r26, r6
     390:	b7 09       	sbc	r27, r7
     392:	88 0f       	add	r24, r24
     394:	99 1f       	adc	r25, r25
     396:	aa 1f       	adc	r26, r26
     398:	bb 1f       	adc	r27, r27
     39a:	ac 01       	movw	r20, r24
     39c:	bd 01       	movw	r22, r26
     39e:	44 0f       	add	r20, r20
     3a0:	55 1f       	adc	r21, r21
     3a2:	66 1f       	adc	r22, r22
     3a4:	77 1f       	adc	r23, r23
     3a6:	44 0f       	add	r20, r20
     3a8:	55 1f       	adc	r21, r21
     3aa:	66 1f       	adc	r22, r22
     3ac:	77 1f       	adc	r23, r23
     3ae:	8c 01       	movw	r16, r24
     3b0:	9d 01       	movw	r18, r26
     3b2:	04 0f       	add	r16, r20
     3b4:	15 1f       	adc	r17, r21
     3b6:	26 1f       	adc	r18, r22
     3b8:	37 1f       	adc	r19, r23
     3ba:	c9 01       	movw	r24, r18
     3bc:	b8 01       	movw	r22, r16
		dt=1/dt; 
     3be:	52 d5       	rcall	.+2724   	; 0xe64 <__floatunsisf>
     3c0:	9b 01       	movw	r18, r22
     3c2:	ac 01       	movw	r20, r24
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 e8       	ldi	r24, 0x80	; 128
     3ca:	9f e3       	ldi	r25, 0x3F	; 63
     3cc:	b7 d4       	rcall	.+2414   	; 0xd3c <__divsf3>
		timer1 = _10micros;	
     3ce:	6b 01       	movw	r12, r22
     3d0:	7c 01       	movw	r14, r24
     3d2:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__data_end>
     3d6:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <__data_end+0x1>
     3da:	a0 91 4c 02 	lds	r26, 0x024C	; 0x80024c <__data_end+0x2>
			
			#ifdef CALIBERATED_DATA
				accX;
     3de:	b0 91 4d 02 	lds	r27, 0x024D	; 0x80024d <__data_end+0x3>
     3e2:	8f 81       	ldd	r24, Y+7	; 0x07
     3e4:	98 85       	ldd	r25, Y+8	; 0x08
     3e6:	29 8d       	ldd	r18, Y+25	; 0x19
     3e8:	3a 8d       	ldd	r19, Y+26	; 0x1a
     3ea:	82 1b       	sub	r24, r18
     3ec:	93 0b       	sbc	r25, r19
				accY;
     3ee:	98 87       	std	Y+8, r25	; 0x08
     3f0:	8f 83       	std	Y+7, r24	; 0x07
     3f2:	89 85       	ldd	r24, Y+9	; 0x09
     3f4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3f6:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3f8:	3e 8d       	ldd	r19, Y+30	; 0x1e
     3fa:	82 1b       	sub	r24, r18
     3fc:	93 0b       	sbc	r25, r19
				accZ;
     3fe:	9a 87       	std	Y+10, r25	; 0x0a
     400:	89 87       	std	Y+9, r24	; 0x09
     402:	8b 85       	ldd	r24, Y+11	; 0x0b
     404:	9c 85       	ldd	r25, Y+12	; 0x0c
     406:	29 a1       	ldd	r18, Y+33	; 0x21
     408:	3a a1       	ldd	r19, Y+34	; 0x22
     40a:	82 1b       	sub	r24, r18
     40c:	93 0b       	sbc	r25, r19
				grX;
     40e:	9c 87       	std	Y+12, r25	; 0x0c
     410:	8b 87       	std	Y+11, r24	; 0x0b
     412:	69 81       	ldd	r22, Y+1	; 0x01
     414:	7a 81       	ldd	r23, Y+2	; 0x02
     416:	8d 85       	ldd	r24, Y+13	; 0x0d
     418:	9e 85       	ldd	r25, Y+14	; 0x0e
     41a:	68 1b       	sub	r22, r24
     41c:	79 0b       	sbc	r23, r25
				grY;
     41e:	7a 83       	std	Y+2, r23	; 0x02
     420:	69 83       	std	Y+1, r22	; 0x01
     422:	0b 81       	ldd	r16, Y+3	; 0x03
     424:	1c 81       	ldd	r17, Y+4	; 0x04
     426:	89 89       	ldd	r24, Y+17	; 0x11
     428:	9a 89       	ldd	r25, Y+18	; 0x12
     42a:	08 1b       	sub	r16, r24
				grZ;
     42c:	19 0b       	sbc	r17, r25
     42e:	1c 83       	std	Y+4, r17	; 0x04
     430:	0b 83       	std	Y+3, r16	; 0x03
     432:	8d 81       	ldd	r24, Y+5	; 0x05
     434:	9e 81       	ldd	r25, Y+6	; 0x06
     436:	2d 89       	ldd	r18, Y+21	; 0x15
			#ifdef GYRO
							//Gyro angle calculations
				//0.0000611 = 1 / (250Hz / 65.5)
				double gyroXrate = gyro_x / 65.5; // Convert to deg/s
				double gyroYrate = gyro_y / 65.5; // Convert to deg/s
				angle_pitch += gyroXrate*dt; //Calculate the traveled pitch angle and add this to the angle_pitch variable
     438:	3e 89       	ldd	r19, Y+22	; 0x16
     43a:	82 1b       	sub	r24, r18
     43c:	93 0b       	sbc	r25, r19
     43e:	9e 83       	std	Y+6, r25	; 0x06
     440:	8d 83       	std	Y+5, r24	; 0x05
     442:	07 2e       	mov	r0, r23
     444:	00 0c       	add	r0, r0
     446:	88 0b       	sbc	r24, r24
     448:	99 0b       	sbc	r25, r25
     44a:	0e d5       	rcall	.+2588   	; 0xe68 <__floatsisf>
     44c:	20 e0       	ldi	r18, 0x00	; 0
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	43 e8       	ldi	r20, 0x83	; 131
     452:	52 e4       	ldi	r21, 0x42	; 66
     454:	73 d4       	rcall	.+2278   	; 0xd3c <__divsf3>
     456:	a7 01       	movw	r20, r14
     458:	96 01       	movw	r18, r12
     45a:	92 d5       	rcall	.+2852   	; 0xf80 <__mulsf3>
     45c:	2f a1       	ldd	r18, Y+39	; 0x27
				angle_roll += gyroYrate*dt;  //Calculate the traveled roll angle and add this to the angle_roll variable
     45e:	38 a5       	ldd	r19, Y+40	; 0x28
     460:	49 a5       	ldd	r20, Y+41	; 0x29
     462:	5a a5       	ldd	r21, Y+42	; 0x2a
     464:	07 d4       	rcall	.+2062   	; 0xc74 <__addsf3>
     466:	2b 01       	movw	r4, r22
     468:	3c 01       	movw	r6, r24
     46a:	b8 01       	movw	r22, r16
     46c:	11 0f       	add	r17, r17
     46e:	88 0b       	sbc	r24, r24
     470:	99 0b       	sbc	r25, r25
     472:	fa d4       	rcall	.+2548   	; 0xe68 <__floatsisf>
     474:	20 e0       	ldi	r18, 0x00	; 0
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	43 e8       	ldi	r20, 0x83	; 131
     47a:	52 e4       	ldi	r21, 0x42	; 66
     47c:	5f d4       	rcall	.+2238   	; 0xd3c <__divsf3>
				printf("gyrox=");
     47e:	a7 01       	movw	r20, r14
     480:	96 01       	movw	r18, r12
     482:	7e d5       	rcall	.+2812   	; 0xf80 <__mulsf3>
     484:	a5 01       	movw	r20, r10
				print16(&gyro_x);
     486:	94 01       	movw	r18, r8
     488:	f5 d3       	rcall	.+2026   	; 0xc74 <__addsf3>
				uint16_t reg=angle_pitch;
     48a:	6b 01       	movw	r12, r22
     48c:	7c 01       	movw	r14, r24
     48e:	26 e0       	ldi	r18, 0x06	; 6
     490:	32 e0       	ldi	r19, 0x02	; 2
     492:	3f 93       	push	r19
				printf(" ");
     494:	2f 93       	push	r18
     496:	2c d7       	rcall	.+3672   	; 0x12f0 <printf>
				printf("var=");
     498:	ce 01       	movw	r24, r28
     49a:	01 96       	adiw	r24, 0x01	; 1
				print16(&reg);
     49c:	9c de       	rcall	.-712    	; 0x1d6 <print16>
     49e:	c3 01       	movw	r24, r6
     4a0:	b2 01       	movw	r22, r4
     4a2:	b4 d4       	rcall	.+2408   	; 0xe0c <__fixunssfsi>
				printf(" ");
     4a4:	7e a3       	std	Y+38, r23	; 0x26
     4a6:	6d a3       	std	Y+37, r22	; 0x25
     4a8:	80 e2       	ldi	r24, 0x20	; 32
				printf("gyroy=");
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	34 d7       	rcall	.+3688   	; 0x1316 <putchar>
     4ae:	3f 92       	push	r3
     4b0:	2f 92       	push	r2
				print16(&gyro_y);
     4b2:	1e d7       	rcall	.+3644   	; 0x12f0 <printf>
     4b4:	ce 01       	movw	r24, r28
     4b6:	85 96       	adiw	r24, 0x25	; 37
     4b8:	8e de       	rcall	.-740    	; 0x1d6 <print16>
				reg=angle_roll;
     4ba:	80 e2       	ldi	r24, 0x20	; 32
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	2b d7       	rcall	.+3670   	; 0x1316 <putchar>
     4c0:	02 e1       	ldi	r16, 0x12	; 18
				printf(" ");
     4c2:	12 e0       	ldi	r17, 0x02	; 2
     4c4:	1f 93       	push	r17
     4c6:	0f 93       	push	r16
     4c8:	13 d7       	rcall	.+3622   	; 0x12f0 <printf>
				printf("var=");
     4ca:	ce 01       	movw	r24, r28
     4cc:	03 96       	adiw	r24, 0x03	; 3
     4ce:	83 de       	rcall	.-762    	; 0x1d6 <print16>
				print16ln(&reg);
     4d0:	c7 01       	movw	r24, r14
     4d2:	b6 01       	movw	r22, r12
     4d4:	9b d4       	rcall	.+2358   	; 0xe0c <__fixunssfsi>
				  //0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
				angle_pitch += angle_roll * sin(gyro_z * 0.000001066);               //If the IMU has yawed transfer the roll angle to the pitch angel
     4d6:	7e a3       	std	Y+38, r23	; 0x26
     4d8:	6d a3       	std	Y+37, r22	; 0x25
     4da:	80 e2       	ldi	r24, 0x20	; 32
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	1b d7       	rcall	.+3638   	; 0x1316 <putchar>
     4e0:	3f 92       	push	r3
     4e2:	2f 92       	push	r2
     4e4:	05 d7       	rcall	.+3594   	; 0x12f0 <printf>
     4e6:	ce 01       	movw	r24, r28
     4e8:	85 96       	adiw	r24, 0x25	; 37
     4ea:	9c de       	rcall	.-712    	; 0x224 <print16ln>
     4ec:	6d 81       	ldd	r22, Y+5	; 0x05
     4ee:	7e 81       	ldd	r23, Y+6	; 0x06
     4f0:	07 2e       	mov	r0, r23
     4f2:	00 0c       	add	r0, r0
     4f4:	88 0b       	sbc	r24, r24
     4f6:	99 0b       	sbc	r25, r25
     4f8:	b7 d4       	rcall	.+2414   	; 0xe68 <__floatsisf>
     4fa:	2b e7       	ldi	r18, 0x7B	; 123
     4fc:	33 e1       	ldi	r19, 0x13	; 19
     4fe:	4f e8       	ldi	r20, 0x8F	; 143
     500:	55 e3       	ldi	r21, 0x35	; 53
     502:	3e d5       	rcall	.+2684   	; 0xf80 <__mulsf3>
     504:	a0 d5       	rcall	.+2880   	; 0x1046 <sin>
     506:	4b 01       	movw	r8, r22
     508:	5c 01       	movw	r10, r24
				 //57.296 = 1 / (3.142 / 180) The Arduino asin function is in radians
				 angle_pitch_acc = asin((float)accel_y/acc_total_vector)* 57.296;       //Calculate the pitch angle
				 angle_roll_acc = asin((float)accel_x/acc_total_vector)* -57.296;       //Calculate the roll angle*/
				 
				 if(set_gyro_angles){                                                 //If the IMU is already started
					 angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;     //Correct the drift of the gyro pitch angle with the accelerometer pitch angle
     50a:	9b 01       	movw	r18, r22
     50c:	ac 01       	movw	r20, r24
     50e:	c7 01       	movw	r24, r14
     510:	b6 01       	movw	r22, r12
     512:	36 d5       	rcall	.+2668   	; 0xf80 <__mulsf3>
     514:	a3 01       	movw	r20, r6
     516:	92 01       	movw	r18, r4
     518:	ad d3       	rcall	.+1882   	; 0xc74 <__addsf3>
     51a:	2b 01       	movw	r4, r22
     51c:	3c 01       	movw	r6, r24
     51e:	29 ec       	ldi	r18, 0xC9	; 201
     520:	35 ee       	ldi	r19, 0xE5	; 229
     522:	4f e7       	ldi	r20, 0x7F	; 127
     524:	5f e3       	ldi	r21, 0x3F	; 63
     526:	2c d5       	rcall	.+2648   	; 0xf80 <__mulsf3>
					 angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;        //Correct the drift of the gyro roll angle with the accelerometer roll angle
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	a9 01       	movw	r20, r18
     52e:	a2 d3       	rcall	.+1860   	; 0xc74 <__addsf3>
     530:	6f a3       	std	Y+39, r22	; 0x27
     532:	78 a7       	std	Y+40, r23	; 0x28
     534:	89 a7       	std	Y+41, r24	; 0x29
     536:	9a a7       	std	Y+42, r25	; 0x2a
     538:	a3 01       	movw	r20, r6
     53a:	92 01       	movw	r18, r4
     53c:	c5 01       	movw	r24, r10
     53e:	b4 01       	movw	r22, r8
     540:	1f d5       	rcall	.+2622   	; 0xf80 <__mulsf3>
     542:	9b 01       	movw	r18, r22
     544:	ac 01       	movw	r20, r24
     546:	c7 01       	movw	r24, r14
     548:	b6 01       	movw	r22, r12
     54a:	93 d3       	rcall	.+1830   	; 0xc72 <__subsf3>
     54c:	29 ec       	ldi	r18, 0xC9	; 201
     54e:	35 ee       	ldi	r19, 0xE5	; 229
     550:	4f e7       	ldi	r20, 0x7F	; 127
     552:	5f e3       	ldi	r21, 0x3F	; 63
     554:	15 d5       	rcall	.+2602   	; 0xf80 <__mulsf3>
     556:	20 e0       	ldi	r18, 0x00	; 0
     558:	30 e0       	ldi	r19, 0x00	; 0
			////while(_10micros-timer1<_4millis)
			////{
			////	//uint16_t pop = (_10micros-timer1)*10;
			////	//print16ln(&pop);
			////}
			dt=_10micros-timer1;
     55a:	a9 01       	movw	r20, r18
     55c:	8b d3       	rcall	.+1814   	; 0xc74 <__addsf3>
     55e:	4b 01       	movw	r8, r22
     560:	5c 01       	movw	r10, r24
     562:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__data_end>
     566:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <__data_end+0x1>
			timer1=_10micros;
     56a:	a0 91 4c 02 	lds	r26, 0x024C	; 0x80024c <__data_end+0x2>
     56e:	b0 91 4d 02 	lds	r27, 0x024D	; 0x80024d <__data_end+0x3>
     572:	40 90 4a 02 	lds	r4, 0x024A	; 0x80024a <__data_end>
     576:	50 90 4b 02 	lds	r5, 0x024B	; 0x80024b <__data_end+0x1>
     57a:	60 90 4c 02 	lds	r6, 0x024C	; 0x80024c <__data_end+0x2>
     57e:	70 90 4d 02 	lds	r7, 0x024D	; 0x80024d <__data_end+0x3>
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	f8 94       	cli
     586:	de bf       	out	0x3e, r29	; 62
     588:	0f be       	out	0x3f, r0	; 63
     58a:	cd bf       	out	0x3d, r28	; 61
     58c:	e4 ce       	rjmp	.-568    	; 0x356 <main+0xde>

0000058e <mpu6050_readByte>:
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_H);
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_L);
	return axis_value;
}
uint8_t mpu6050_readByte(uint8_t byteToRead)//readbyte
{
     58e:	cf 93       	push	r28
     590:	c8 2f       	mov	r28, r24
	i2c_start(MPU6050_WRITE);
     592:	80 ed       	ldi	r24, 0xD0	; 208
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	b7 d2       	rcall	.+1390   	; 0xb06 <i2c_start>
	i2c_write(byteToRead);
     598:	8c 2f       	mov	r24, r28
     59a:	90 e0       	ldi	r25, 0x00	; 0
	i2c_stop();
	
	i2c_start(MPU6050_READ);
     59c:	0a d3       	rcall	.+1556   	; 0xbb2 <i2c_write>
     59e:	f9 d2       	rcall	.+1522   	; 0xb92 <i2c_stop>
	uint8_t byteToReturn=i2c_readNak();
     5a0:	81 ed       	ldi	r24, 0xD1	; 209
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	b0 d2       	rcall	.+1376   	; 0xb06 <i2c_start>
	i2c_stop();
     5a6:	40 d3       	rcall	.+1664   	; 0xc28 <i2c_readNak>
     5a8:	c8 2f       	mov	r28, r24
	return byteToReturn;
}
     5aa:	f3 d2       	rcall	.+1510   	; 0xb92 <i2c_stop>
     5ac:	8c 2f       	mov	r24, r28
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret

000005b2 <mpu6050_read_gyroX>:
	//-----------------------------------
	*/
}
#endif
uint16_t mpu6050_read_gyroX()//axis x=0,y=1,z=2
{
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_XOUT_H);
     5b6:	83 e4       	ldi	r24, 0x43	; 67
     5b8:	ea df       	rcall	.-44     	; 0x58e <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_XOUT_L);
     5ba:	c8 2f       	mov	r28, r24
     5bc:	d0 e0       	ldi	r29, 0x00	; 0
     5be:	dc 2f       	mov	r29, r28
     5c0:	cc 27       	eor	r28, r28
     5c2:	84 e4       	ldi	r24, 0x44	; 68
     5c4:	e4 df       	rcall	.-56     	; 0x58e <mpu6050_readByte>
	return axis_value;
}
     5c6:	9e 01       	movw	r18, r28
     5c8:	28 2b       	or	r18, r24
     5ca:	c9 01       	movw	r24, r18
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	08 95       	ret

000005d2 <mpu6050_read_gyroY>:
uint16_t mpu6050_read_gyroY()//axis x=0,y=1,z=2
{
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_YOUT_H);
     5d6:	85 e4       	ldi	r24, 0x45	; 69
     5d8:	da df       	rcall	.-76     	; 0x58e <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_YOUT_L);
     5da:	c8 2f       	mov	r28, r24
     5dc:	d0 e0       	ldi	r29, 0x00	; 0
     5de:	dc 2f       	mov	r29, r28
     5e0:	cc 27       	eor	r28, r28
     5e2:	86 e4       	ldi	r24, 0x46	; 70
     5e4:	d4 df       	rcall	.-88     	; 0x58e <mpu6050_readByte>
	return axis_value;
}
     5e6:	9e 01       	movw	r18, r28
     5e8:	28 2b       	or	r18, r24
     5ea:	c9 01       	movw	r24, r18
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	08 95       	ret

000005f2 <mpu6050_read_gyroZ>:
uint16_t mpu6050_read_gyroZ()//axis x=0,y=1,z=2
{
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_H);
     5f6:	87 e4       	ldi	r24, 0x47	; 71
     5f8:	ca df       	rcall	.-108    	; 0x58e <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_L);
     5fa:	c8 2f       	mov	r28, r24
     5fc:	d0 e0       	ldi	r29, 0x00	; 0
     5fe:	dc 2f       	mov	r29, r28
     600:	cc 27       	eor	r28, r28
     602:	88 e4       	ldi	r24, 0x48	; 72
     604:	c4 df       	rcall	.-120    	; 0x58e <mpu6050_readByte>
	return axis_value;
}
     606:	9e 01       	movw	r18, r28
     608:	28 2b       	or	r18, r24
     60a:	c9 01       	movw	r24, r18
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <mpu6050_calibrate_gyro>:
 *  Author: HP
 */ 
#include "MPU6050.h"
#ifdef CALIBERATED_DATA
void mpu6050_calibrate_gyro(int32_t *x,int32_t *y, int32_t *z)
{
     612:	cf 92       	push	r12
     614:	df 92       	push	r13
     616:	ef 92       	push	r14
     618:	ff 92       	push	r15
     61a:	0f 93       	push	r16
     61c:	1f 93       	push	r17
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	6c 01       	movw	r12, r24
     624:	7b 01       	movw	r14, r22
     626:	8a 01       	movw	r16, r20
	printf("Calibrating Gyro...\n");
     628:	89 e1       	ldi	r24, 0x19	; 25
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	79 d6       	rcall	.+3314   	; 0x1320 <puts>
     62e:	c4 e1       	ldi	r28, 0x14	; 20
	for (int i=0;i<calibration_counter;i++)
	{
		(*x)+=mpu6050_read_gyroX();
     630:	d0 e0       	ldi	r29, 0x00	; 0
     632:	bf df       	rcall	.-130    	; 0x5b2 <mpu6050_read_gyroX>
     634:	f6 01       	movw	r30, r12
     636:	40 81       	ld	r20, Z
     638:	51 81       	ldd	r21, Z+1	; 0x01
     63a:	62 81       	ldd	r22, Z+2	; 0x02
     63c:	73 81       	ldd	r23, Z+3	; 0x03
     63e:	48 0f       	add	r20, r24
     640:	59 1f       	adc	r21, r25
     642:	61 1d       	adc	r22, r1
     644:	71 1d       	adc	r23, r1
     646:	40 83       	st	Z, r20
     648:	51 83       	std	Z+1, r21	; 0x01
     64a:	62 83       	std	Z+2, r22	; 0x02
		(*y)+=mpu6050_read_gyroY();
     64c:	73 83       	std	Z+3, r23	; 0x03
     64e:	c1 df       	rcall	.-126    	; 0x5d2 <mpu6050_read_gyroY>
     650:	f7 01       	movw	r30, r14
     652:	40 81       	ld	r20, Z
     654:	51 81       	ldd	r21, Z+1	; 0x01
     656:	62 81       	ldd	r22, Z+2	; 0x02
     658:	73 81       	ldd	r23, Z+3	; 0x03
     65a:	48 0f       	add	r20, r24
     65c:	59 1f       	adc	r21, r25
     65e:	61 1d       	adc	r22, r1
     660:	71 1d       	adc	r23, r1
     662:	40 83       	st	Z, r20
     664:	51 83       	std	Z+1, r21	; 0x01
     666:	62 83       	std	Z+2, r22	; 0x02
		(*z)+=mpu6050_read_gyroZ();
     668:	73 83       	std	Z+3, r23	; 0x03
     66a:	c3 df       	rcall	.-122    	; 0x5f2 <mpu6050_read_gyroZ>
     66c:	f8 01       	movw	r30, r16
     66e:	40 81       	ld	r20, Z
     670:	51 81       	ldd	r21, Z+1	; 0x01
     672:	62 81       	ldd	r22, Z+2	; 0x02
     674:	73 81       	ldd	r23, Z+3	; 0x03
     676:	48 0f       	add	r20, r24
     678:	59 1f       	adc	r21, r25
     67a:	61 1d       	adc	r22, r1
     67c:	71 1d       	adc	r23, r1
     67e:	40 83       	st	Z, r20
     680:	51 83       	std	Z+1, r21	; 0x01
     682:	62 83       	std	Z+2, r22	; 0x02
     684:	73 83       	std	Z+3, r23	; 0x03
     686:	21 97       	sbiw	r28, 0x01	; 1
#include "MPU6050.h"
#ifdef CALIBERATED_DATA
void mpu6050_calibrate_gyro(int32_t *x,int32_t *y, int32_t *z)
{
	printf("Calibrating Gyro...\n");
	for (int i=0;i<calibration_counter;i++)
     688:	a1 f6       	brne	.-88     	; 0x632 <mpu6050_calibrate_gyro+0x20>
		(*x)+=mpu6050_read_gyroX();
		(*y)+=mpu6050_read_gyroY();
		(*z)+=mpu6050_read_gyroZ();
		_delay_ms(caliberation_wait_delay);
	}
		if(*x<0)
     68a:	f6 01       	movw	r30, r12
     68c:	60 81       	ld	r22, Z
     68e:	71 81       	ldd	r23, Z+1	; 0x01
     690:	82 81       	ldd	r24, Z+2	; 0x02
     692:	93 81       	ldd	r25, Z+3	; 0x03
     694:	99 23       	and	r25, r25
     696:	ac f4       	brge	.+42     	; 0x6c2 <mpu6050_calibrate_gyro+0xb0>
		(*x)=abs(*x)/calibration_counter;
     698:	9b 01       	movw	r18, r22
     69a:	77 23       	and	r23, r23
     69c:	24 f4       	brge	.+8      	; 0x6a6 <mpu6050_calibrate_gyro+0x94>
     69e:	22 27       	eor	r18, r18
     6a0:	33 27       	eor	r19, r19
     6a2:	26 1b       	sub	r18, r22
     6a4:	37 0b       	sbc	r19, r23
     6a6:	c9 01       	movw	r24, r18
     6a8:	64 e1       	ldi	r22, 0x14	; 20
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	4f d5       	rcall	.+2718   	; 0x114c <__divmodhi4>
     6ae:	cb 01       	movw	r24, r22
     6b0:	77 0f       	add	r23, r23
     6b2:	aa 0b       	sbc	r26, r26
     6b4:	bb 0b       	sbc	r27, r27
     6b6:	f6 01       	movw	r30, r12
     6b8:	80 83       	st	Z, r24
     6ba:	91 83       	std	Z+1, r25	; 0x01
     6bc:	a2 83       	std	Z+2, r26	; 0x02
     6be:	b3 83       	std	Z+3, r27	; 0x03
		else
		(*x)=(*x)/calibration_counter;
     6c0:	0a c0       	rjmp	.+20     	; 0x6d6 <mpu6050_calibrate_gyro+0xc4>
     6c2:	24 e1       	ldi	r18, 0x14	; 20
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	40 e0       	ldi	r20, 0x00	; 0
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	53 d5       	rcall	.+2726   	; 0x1172 <__divmodsi4>
     6cc:	f6 01       	movw	r30, r12
     6ce:	20 83       	st	Z, r18
     6d0:	31 83       	std	Z+1, r19	; 0x01
     6d2:	42 83       	std	Z+2, r20	; 0x02
     6d4:	53 83       	std	Z+3, r21	; 0x03
		
		if(*y<0)
     6d6:	f7 01       	movw	r30, r14
     6d8:	60 81       	ld	r22, Z
     6da:	71 81       	ldd	r23, Z+1	; 0x01
     6dc:	82 81       	ldd	r24, Z+2	; 0x02
     6de:	93 81       	ldd	r25, Z+3	; 0x03
     6e0:	99 23       	and	r25, r25
     6e2:	ac f4       	brge	.+42     	; 0x70e <mpu6050_calibrate_gyro+0xfc>
		(*y)=abs(*y)/calibration_counter;
     6e4:	9b 01       	movw	r18, r22
     6e6:	77 23       	and	r23, r23
     6e8:	24 f4       	brge	.+8      	; 0x6f2 <mpu6050_calibrate_gyro+0xe0>
     6ea:	22 27       	eor	r18, r18
     6ec:	33 27       	eor	r19, r19
     6ee:	26 1b       	sub	r18, r22
     6f0:	37 0b       	sbc	r19, r23
     6f2:	c9 01       	movw	r24, r18
     6f4:	64 e1       	ldi	r22, 0x14	; 20
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	29 d5       	rcall	.+2642   	; 0x114c <__divmodhi4>
     6fa:	cb 01       	movw	r24, r22
     6fc:	77 0f       	add	r23, r23
     6fe:	aa 0b       	sbc	r26, r26
     700:	bb 0b       	sbc	r27, r27
     702:	f7 01       	movw	r30, r14
     704:	80 83       	st	Z, r24
     706:	91 83       	std	Z+1, r25	; 0x01
     708:	a2 83       	std	Z+2, r26	; 0x02
     70a:	b3 83       	std	Z+3, r27	; 0x03
		else
		(*y)=(*y)/calibration_counter;
     70c:	0a c0       	rjmp	.+20     	; 0x722 <mpu6050_calibrate_gyro+0x110>
     70e:	24 e1       	ldi	r18, 0x14	; 20
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	2d d5       	rcall	.+2650   	; 0x1172 <__divmodsi4>
     718:	f7 01       	movw	r30, r14
     71a:	20 83       	st	Z, r18
     71c:	31 83       	std	Z+1, r19	; 0x01
     71e:	42 83       	std	Z+2, r20	; 0x02
     720:	53 83       	std	Z+3, r21	; 0x03
		
		if(*z<0)
     722:	f8 01       	movw	r30, r16
     724:	60 81       	ld	r22, Z
     726:	71 81       	ldd	r23, Z+1	; 0x01
     728:	82 81       	ldd	r24, Z+2	; 0x02
     72a:	93 81       	ldd	r25, Z+3	; 0x03
     72c:	99 23       	and	r25, r25
     72e:	ac f4       	brge	.+42     	; 0x75a <mpu6050_calibrate_gyro+0x148>
		(*z)=abs(*z)/calibration_counter;
     730:	9b 01       	movw	r18, r22
     732:	77 23       	and	r23, r23
     734:	24 f4       	brge	.+8      	; 0x73e <mpu6050_calibrate_gyro+0x12c>
     736:	22 27       	eor	r18, r18
     738:	33 27       	eor	r19, r19
     73a:	26 1b       	sub	r18, r22
     73c:	37 0b       	sbc	r19, r23
     73e:	c9 01       	movw	r24, r18
     740:	64 e1       	ldi	r22, 0x14	; 20
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	03 d5       	rcall	.+2566   	; 0x114c <__divmodhi4>
     746:	cb 01       	movw	r24, r22
     748:	77 0f       	add	r23, r23
     74a:	aa 0b       	sbc	r26, r26
     74c:	bb 0b       	sbc	r27, r27
     74e:	f8 01       	movw	r30, r16
     750:	80 83       	st	Z, r24
     752:	91 83       	std	Z+1, r25	; 0x01
     754:	a2 83       	std	Z+2, r26	; 0x02
     756:	b3 83       	std	Z+3, r27	; 0x03
		else
		(*z)=(*z)/calibration_counter;
     758:	0a c0       	rjmp	.+20     	; 0x76e <mpu6050_calibrate_gyro+0x15c>
     75a:	24 e1       	ldi	r18, 0x14	; 20
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	40 e0       	ldi	r20, 0x00	; 0
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	07 d5       	rcall	.+2574   	; 0x1172 <__divmodsi4>
     764:	f8 01       	movw	r30, r16
     766:	20 83       	st	Z, r18
     768:	31 83       	std	Z+1, r19	; 0x01
     76a:	42 83       	std	Z+2, r20	; 0x02
     76c:	53 83       	std	Z+3, r21	; 0x03
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/			
	
}
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	df 90       	pop	r13
     77c:	cf 90       	pop	r12
     77e:	08 95       	ret

00000780 <mpu6050_read_accelX>:
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_H);
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_GYRO_ZOUT_L);
	return axis_value;
}
uint16_t mpu6050_read_accelX()
{
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_XOUT_H);
     784:	8b e3       	ldi	r24, 0x3B	; 59
     786:	03 df       	rcall	.-506    	; 0x58e <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_XOUT_L);
     788:	c8 2f       	mov	r28, r24
     78a:	d0 e0       	ldi	r29, 0x00	; 0
     78c:	dc 2f       	mov	r29, r28
     78e:	cc 27       	eor	r28, r28
     790:	8c e3       	ldi	r24, 0x3C	; 60
     792:	fd de       	rcall	.-518    	; 0x58e <mpu6050_readByte>
	return axis_value;
}
     794:	9e 01       	movw	r18, r28
     796:	28 2b       	or	r18, r24
     798:	c9 01       	movw	r24, r18
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	08 95       	ret

000007a0 <mpu6050_read_accelY>:
uint16_t mpu6050_read_accelY()
{
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_YOUT_H);
     7a4:	8d e3       	ldi	r24, 0x3D	; 61
     7a6:	f3 de       	rcall	.-538    	; 0x58e <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_YOUT_L);
     7a8:	c8 2f       	mov	r28, r24
     7aa:	d0 e0       	ldi	r29, 0x00	; 0
     7ac:	dc 2f       	mov	r29, r28
     7ae:	cc 27       	eor	r28, r28
     7b0:	8e e3       	ldi	r24, 0x3E	; 62
     7b2:	ed de       	rcall	.-550    	; 0x58e <mpu6050_readByte>
	return axis_value;
}
     7b4:	9e 01       	movw	r18, r28
     7b6:	28 2b       	or	r18, r24
     7b8:	c9 01       	movw	r24, r18
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret

000007c0 <mpu6050_read_accelZ>:
uint16_t mpu6050_read_accelZ()
{
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
	uint16_t axis_value=mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_H);
     7c4:	8f e3       	ldi	r24, 0x3F	; 63
     7c6:	e3 de       	rcall	.-570    	; 0x58e <mpu6050_readByte>
	axis_value=(axis_value<<8) | mpu6050_readByte(MPU6050_RA_ACCEL_ZOUT_L);
     7c8:	c8 2f       	mov	r28, r24
     7ca:	d0 e0       	ldi	r29, 0x00	; 0
     7cc:	dc 2f       	mov	r29, r28
     7ce:	cc 27       	eor	r28, r28
     7d0:	80 e4       	ldi	r24, 0x40	; 64
     7d2:	dd de       	rcall	.-582    	; 0x58e <mpu6050_readByte>
	return axis_value;
}
     7d4:	9e 01       	movw	r18, r28
     7d6:	28 2b       	or	r18, r24
     7d8:	c9 01       	movw	r24, r18
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <mpu6050_calibrate_accel>:
	*/			
	
}

void mpu6050_calibrate_accel(int32_t *x,int32_t *y, int32_t *z)
{
     7e0:	cf 92       	push	r12
     7e2:	df 92       	push	r13
     7e4:	ef 92       	push	r14
     7e6:	ff 92       	push	r15
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	6c 01       	movw	r12, r24
     7f2:	7b 01       	movw	r14, r22
     7f4:	8a 01       	movw	r16, r20
	
	printf("Calibrating Accelerometer...\n");
     7f6:	8d e2       	ldi	r24, 0x2D	; 45
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	92 d5       	rcall	.+2852   	; 0x1320 <puts>
     7fc:	c4 e1       	ldi	r28, 0x14	; 20
	for(int i=0;i<calibration_counter;i++){
		(*x)+=mpu6050_read_accelX();
     7fe:	d0 e0       	ldi	r29, 0x00	; 0
     800:	bf df       	rcall	.-130    	; 0x780 <mpu6050_read_accelX>
     802:	f6 01       	movw	r30, r12
     804:	40 81       	ld	r20, Z
     806:	51 81       	ldd	r21, Z+1	; 0x01
     808:	62 81       	ldd	r22, Z+2	; 0x02
     80a:	73 81       	ldd	r23, Z+3	; 0x03
     80c:	48 0f       	add	r20, r24
     80e:	59 1f       	adc	r21, r25
     810:	61 1d       	adc	r22, r1
     812:	71 1d       	adc	r23, r1
     814:	40 83       	st	Z, r20
     816:	51 83       	std	Z+1, r21	; 0x01
     818:	62 83       	std	Z+2, r22	; 0x02
		(*y)+=mpu6050_read_accelY();
     81a:	73 83       	std	Z+3, r23	; 0x03
     81c:	c1 df       	rcall	.-126    	; 0x7a0 <mpu6050_read_accelY>
     81e:	f7 01       	movw	r30, r14
     820:	40 81       	ld	r20, Z
     822:	51 81       	ldd	r21, Z+1	; 0x01
     824:	62 81       	ldd	r22, Z+2	; 0x02
     826:	73 81       	ldd	r23, Z+3	; 0x03
     828:	48 0f       	add	r20, r24
     82a:	59 1f       	adc	r21, r25
     82c:	61 1d       	adc	r22, r1
     82e:	71 1d       	adc	r23, r1
     830:	40 83       	st	Z, r20
     832:	51 83       	std	Z+1, r21	; 0x01
     834:	62 83       	std	Z+2, r22	; 0x02
		(*z)+=mpu6050_read_accelZ();
     836:	73 83       	std	Z+3, r23	; 0x03
     838:	c3 df       	rcall	.-122    	; 0x7c0 <mpu6050_read_accelZ>
     83a:	f8 01       	movw	r30, r16
     83c:	40 81       	ld	r20, Z
     83e:	51 81       	ldd	r21, Z+1	; 0x01
     840:	62 81       	ldd	r22, Z+2	; 0x02
     842:	73 81       	ldd	r23, Z+3	; 0x03
     844:	48 0f       	add	r20, r24
     846:	59 1f       	adc	r21, r25
     848:	61 1d       	adc	r22, r1
     84a:	71 1d       	adc	r23, r1
     84c:	40 83       	st	Z, r20
     84e:	51 83       	std	Z+1, r21	; 0x01
     850:	62 83       	std	Z+2, r22	; 0x02
     852:	73 83       	std	Z+3, r23	; 0x03
     854:	21 97       	sbiw	r28, 0x01	; 1

void mpu6050_calibrate_accel(int32_t *x,int32_t *y, int32_t *z)
{
	
	printf("Calibrating Accelerometer...\n");
	for(int i=0;i<calibration_counter;i++){
     856:	a1 f6       	brne	.-88     	; 0x800 <mpu6050_calibrate_accel+0x20>
		(*x)+=mpu6050_read_accelX();
		(*y)+=mpu6050_read_accelY();
		(*z)+=mpu6050_read_accelZ();
		_delay_ms(caliberation_wait_delay);
	}
	if(*x<0)
     858:	f6 01       	movw	r30, r12
     85a:	60 81       	ld	r22, Z
     85c:	71 81       	ldd	r23, Z+1	; 0x01
     85e:	82 81       	ldd	r24, Z+2	; 0x02
     860:	93 81       	ldd	r25, Z+3	; 0x03
     862:	99 23       	and	r25, r25
     864:	ac f4       	brge	.+42     	; 0x890 <mpu6050_calibrate_accel+0xb0>
	(*x)=abs(*x)/calibration_counter;
     866:	9b 01       	movw	r18, r22
     868:	77 23       	and	r23, r23
     86a:	24 f4       	brge	.+8      	; 0x874 <mpu6050_calibrate_accel+0x94>
     86c:	22 27       	eor	r18, r18
     86e:	33 27       	eor	r19, r19
     870:	26 1b       	sub	r18, r22
     872:	37 0b       	sbc	r19, r23
     874:	c9 01       	movw	r24, r18
     876:	64 e1       	ldi	r22, 0x14	; 20
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	68 d4       	rcall	.+2256   	; 0x114c <__divmodhi4>
     87c:	cb 01       	movw	r24, r22
     87e:	77 0f       	add	r23, r23
     880:	aa 0b       	sbc	r26, r26
     882:	bb 0b       	sbc	r27, r27
     884:	f6 01       	movw	r30, r12
     886:	80 83       	st	Z, r24
     888:	91 83       	std	Z+1, r25	; 0x01
     88a:	a2 83       	std	Z+2, r26	; 0x02
     88c:	b3 83       	std	Z+3, r27	; 0x03
	else
	(*x)=(*x)/calibration_counter;
     88e:	0a c0       	rjmp	.+20     	; 0x8a4 <mpu6050_calibrate_accel+0xc4>
     890:	24 e1       	ldi	r18, 0x14	; 20
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	40 e0       	ldi	r20, 0x00	; 0
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	6c d4       	rcall	.+2264   	; 0x1172 <__divmodsi4>
     89a:	f6 01       	movw	r30, r12
     89c:	20 83       	st	Z, r18
     89e:	31 83       	std	Z+1, r19	; 0x01
     8a0:	42 83       	std	Z+2, r20	; 0x02
     8a2:	53 83       	std	Z+3, r21	; 0x03
	
	if(*y<0)
     8a4:	f7 01       	movw	r30, r14
     8a6:	60 81       	ld	r22, Z
     8a8:	71 81       	ldd	r23, Z+1	; 0x01
     8aa:	82 81       	ldd	r24, Z+2	; 0x02
     8ac:	93 81       	ldd	r25, Z+3	; 0x03
     8ae:	99 23       	and	r25, r25
     8b0:	ac f4       	brge	.+42     	; 0x8dc <mpu6050_calibrate_accel+0xfc>
	(*y)=abs(*y)/calibration_counter;
     8b2:	9b 01       	movw	r18, r22
     8b4:	77 23       	and	r23, r23
     8b6:	24 f4       	brge	.+8      	; 0x8c0 <mpu6050_calibrate_accel+0xe0>
     8b8:	22 27       	eor	r18, r18
     8ba:	33 27       	eor	r19, r19
     8bc:	26 1b       	sub	r18, r22
     8be:	37 0b       	sbc	r19, r23
     8c0:	c9 01       	movw	r24, r18
     8c2:	64 e1       	ldi	r22, 0x14	; 20
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	42 d4       	rcall	.+2180   	; 0x114c <__divmodhi4>
     8c8:	cb 01       	movw	r24, r22
     8ca:	77 0f       	add	r23, r23
     8cc:	aa 0b       	sbc	r26, r26
     8ce:	bb 0b       	sbc	r27, r27
     8d0:	f7 01       	movw	r30, r14
     8d2:	80 83       	st	Z, r24
     8d4:	91 83       	std	Z+1, r25	; 0x01
     8d6:	a2 83       	std	Z+2, r26	; 0x02
     8d8:	b3 83       	std	Z+3, r27	; 0x03
	else
	(*y)=(*y)/calibration_counter;
     8da:	0a c0       	rjmp	.+20     	; 0x8f0 <mpu6050_calibrate_accel+0x110>
     8dc:	24 e1       	ldi	r18, 0x14	; 20
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	40 e0       	ldi	r20, 0x00	; 0
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	46 d4       	rcall	.+2188   	; 0x1172 <__divmodsi4>
     8e6:	f7 01       	movw	r30, r14
     8e8:	20 83       	st	Z, r18
     8ea:	31 83       	std	Z+1, r19	; 0x01
     8ec:	42 83       	std	Z+2, r20	; 0x02
     8ee:	53 83       	std	Z+3, r21	; 0x03
	
	if(*z<0)
     8f0:	f8 01       	movw	r30, r16
     8f2:	60 81       	ld	r22, Z
     8f4:	71 81       	ldd	r23, Z+1	; 0x01
     8f6:	82 81       	ldd	r24, Z+2	; 0x02
     8f8:	93 81       	ldd	r25, Z+3	; 0x03
     8fa:	99 23       	and	r25, r25
     8fc:	ac f4       	brge	.+42     	; 0x928 <mpu6050_calibrate_accel+0x148>
	(*z)=abs(*z)/calibration_counter;
     8fe:	9b 01       	movw	r18, r22
     900:	77 23       	and	r23, r23
     902:	24 f4       	brge	.+8      	; 0x90c <mpu6050_calibrate_accel+0x12c>
     904:	22 27       	eor	r18, r18
     906:	33 27       	eor	r19, r19
     908:	26 1b       	sub	r18, r22
     90a:	37 0b       	sbc	r19, r23
     90c:	c9 01       	movw	r24, r18
     90e:	64 e1       	ldi	r22, 0x14	; 20
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	1c d4       	rcall	.+2104   	; 0x114c <__divmodhi4>
     914:	cb 01       	movw	r24, r22
     916:	77 0f       	add	r23, r23
     918:	aa 0b       	sbc	r26, r26
     91a:	bb 0b       	sbc	r27, r27
     91c:	f8 01       	movw	r30, r16
     91e:	80 83       	st	Z, r24
     920:	91 83       	std	Z+1, r25	; 0x01
     922:	a2 83       	std	Z+2, r26	; 0x02
     924:	b3 83       	std	Z+3, r27	; 0x03
	else
	(*z)=(*z)/calibration_counter;
     926:	0a c0       	rjmp	.+20     	; 0x93c <mpu6050_calibrate_accel+0x15c>
     928:	24 e1       	ldi	r18, 0x14	; 20
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	40 e0       	ldi	r20, 0x00	; 0
     92e:	50 e0       	ldi	r21, 0x00	; 0
     930:	20 d4       	rcall	.+2112   	; 0x1172 <__divmodsi4>
     932:	f8 01       	movw	r30, r16
     934:	20 83       	st	Z, r18
     936:	31 83       	std	Z+1, r19	; 0x01
     938:	42 83       	std	Z+2, r20	; 0x02
     93a:	53 83       	std	Z+3, r21	; 0x03
	printf("  ");
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/
}
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	1f 91       	pop	r17
     942:	0f 91       	pop	r16
     944:	ff 90       	pop	r15
     946:	ef 90       	pop	r14
     948:	df 90       	pop	r13
     94a:	cf 90       	pop	r12
     94c:	08 95       	ret

0000094e <mpu6050_writeByte>:
	uint8_t byteToReturn=i2c_readNak();
	i2c_stop();
	return byteToReturn;
}
void mpu6050_writeByte(uint8_t wereToWrite,uint8_t byteToWrite)//writebyte
{
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	d8 2f       	mov	r29, r24
     954:	c6 2f       	mov	r28, r22
	i2c_start(MPU6050_WRITE);
     956:	80 ed       	ldi	r24, 0xD0	; 208
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	d5 d0       	rcall	.+426    	; 0xb06 <i2c_start>
	i2c_write(wereToWrite);
     95c:	8d 2f       	mov	r24, r29
     95e:	90 e0       	ldi	r25, 0x00	; 0
	i2c_write(byteToWrite);
     960:	28 d1       	rcall	.+592    	; 0xbb2 <i2c_write>
     962:	8c 2f       	mov	r24, r28
	i2c_stop();
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	25 d1       	rcall	.+586    	; 0xbb2 <i2c_write>
}
     968:	14 d1       	rcall	.+552    	; 0xb92 <i2c_stop>
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	08 95       	ret

00000970 <mpu6050_readBytes>:
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
     970:	af 92       	push	r10
     972:	bf 92       	push	r11
     974:	cf 92       	push	r12
     976:	df 92       	push	r13
     978:	ff 92       	push	r15
     97a:	0f 93       	push	r16
     97c:	1f 93       	push	r17
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
     982:	66 23       	and	r22, r22
     984:	a1 f1       	breq	.+104    	; 0x9ee <mpu6050_readBytes+0x7e>
     986:	c5 2f       	mov	r28, r21
     988:	d4 2f       	mov	r29, r20
     98a:	f6 2e       	mov	r15, r22
     98c:	18 2f       	mov	r17, r24
		//request register
		i2c_start(MPU6050_WRITE);
     98e:	80 ed       	ldi	r24, 0xD0	; 208
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	b9 d0       	rcall	.+370    	; 0xb06 <i2c_start>
		i2c_write(regAddr);
     994:	81 2f       	mov	r24, r17
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0c d1       	rcall	.+536    	; 0xbb2 <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     99a:	85 e3       	ldi	r24, 0x35	; 53
     99c:	8a 95       	dec	r24
     99e:	f1 f7       	brne	.-4      	; 0x99c <mpu6050_readBytes+0x2c>
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
     9a0:	00 00       	nop
     9a2:	81 ed       	ldi	r24, 0xD1	; 209
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	af d0       	rcall	.+350    	; 0xb06 <i2c_start>
     9a8:	0d 2f       	mov	r16, r29
     9aa:	1c 2f       	mov	r17, r28
     9ac:	cc 24       	eor	r12, r12
     9ae:	ca 94       	dec	r12
     9b0:	cf 0c       	add	r12, r15
     9b2:	d1 2c       	mov	r13, r1
     9b4:	ef ef       	ldi	r30, 0xFF	; 255
     9b6:	ce 1a       	sub	r12, r30
     9b8:	de 0a       	sbc	r13, r30
     9ba:	c0 e0       	ldi	r28, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
     9bc:	d0 e0       	ldi	r29, 0x00	; 0
     9be:	af 2c       	mov	r10, r15
     9c0:	b1 2c       	mov	r11, r1
     9c2:	f1 e0       	ldi	r31, 0x01	; 1
     9c4:	af 1a       	sub	r10, r31
     9c6:	b1 08       	sbc	r11, r1
     9c8:	ac 16       	cp	r10, r28
			data[i] = i2c_readNak();
     9ca:	bd 06       	cpc	r11, r29
     9cc:	21 f4       	brne	.+8      	; 0x9d6 <mpu6050_readBytes+0x66>
     9ce:	2c d1       	rcall	.+600    	; 0xc28 <i2c_readNak>
     9d0:	f8 01       	movw	r30, r16
			else
			data[i] = i2c_readAck();
     9d2:	80 83       	st	Z, r24
     9d4:	03 c0       	rjmp	.+6      	; 0x9dc <mpu6050_readBytes+0x6c>
     9d6:	0e d1       	rcall	.+540    	; 0xbf4 <i2c_readAck>
     9d8:	f8 01       	movw	r30, r16
     9da:	80 83       	st	Z, r24
     9dc:	21 96       	adiw	r28, 0x01	; 1
		i2c_start(MPU6050_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
		for(i=0; i<length; i++) {
     9de:	0f 5f       	subi	r16, 0xFF	; 255
     9e0:	1f 4f       	sbci	r17, 0xFF	; 255
     9e2:	cc 15       	cp	r28, r12
     9e4:	dd 05       	cpc	r29, r13
			if(i==length-1)
			data[i] = i2c_readNak();
			else
			data[i] = i2c_readAck();
		}
		i2c_stop();
     9e6:	81 f7       	brne	.-32     	; 0x9c8 <mpu6050_readBytes+0x58>
     9e8:	cf 2d       	mov	r28, r15
     9ea:	d3 d0       	rcall	.+422    	; 0xb92 <i2c_stop>
	i2c_write(byteToWrite);
	i2c_stop();
}
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
	uint8_t i = 0;
	int8_t count = 0;
     9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <mpu6050_readBytes+0x80>
			data[i] = i2c_readAck();
		}
		i2c_stop();
	}
	return count;
}
     9ee:	c0 e0       	ldi	r28, 0x00	; 0
     9f0:	8c 2f       	mov	r24, r28
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	ff 90       	pop	r15
     9fc:	df 90       	pop	r13
     9fe:	cf 90       	pop	r12
     a00:	bf 90       	pop	r11
     a02:	af 90       	pop	r10
     a04:	08 95       	ret

00000a06 <mpu6050_getRawData>:
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     a06:	6f 92       	push	r6
     a08:	7f 92       	push	r7
     a0a:	8f 92       	push	r8
     a0c:	9f 92       	push	r9
     a0e:	af 92       	push	r10
     a10:	bf 92       	push	r11
     a12:	cf 92       	push	r12
     a14:	df 92       	push	r13
     a16:	ef 92       	push	r14
     a18:	ff 92       	push	r15
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
     a26:	2e 97       	sbiw	r28, 0x0e	; 14
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	de bf       	out	0x3e, r29	; 62
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	cd bf       	out	0x3d, r28	; 61
     a32:	4c 01       	movw	r8, r24
     a34:	5b 01       	movw	r10, r22
     a36:	6a 01       	movw	r12, r20
     a38:	39 01       	movw	r6, r18
	uint8_t buffer[14];
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14,  buffer);
     a3a:	ae 01       	movw	r20, r28
     a3c:	4f 5f       	subi	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	6e e0       	ldi	r22, 0x0E	; 14
     a42:	8b e3       	ldi	r24, 0x3B	; 59
     a44:	95 df       	rcall	.-214    	; 0x970 <mpu6050_readBytes>
	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     a46:	89 81       	ldd	r24, Y+1	; 0x01
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	98 2f       	mov	r25, r24
     a4c:	88 27       	eor	r24, r24
     a4e:	2a 81       	ldd	r18, Y+2	; 0x02
     a50:	82 2b       	or	r24, r18
     a52:	f4 01       	movw	r30, r8
     a54:	91 83       	std	Z+1, r25	; 0x01
     a56:	80 83       	st	Z, r24
	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     a58:	8b 81       	ldd	r24, Y+3	; 0x03
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	98 2f       	mov	r25, r24
     a5e:	88 27       	eor	r24, r24
     a60:	2c 81       	ldd	r18, Y+4	; 0x04
     a62:	82 2b       	or	r24, r18
     a64:	f5 01       	movw	r30, r10
     a66:	91 83       	std	Z+1, r25	; 0x01
     a68:	80 83       	st	Z, r24
	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
     a6a:	8d 81       	ldd	r24, Y+5	; 0x05
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	98 2f       	mov	r25, r24
     a70:	88 27       	eor	r24, r24
     a72:	2e 81       	ldd	r18, Y+6	; 0x06
     a74:	82 2b       	or	r24, r18
     a76:	f6 01       	movw	r30, r12
     a78:	91 83       	std	Z+1, r25	; 0x01
     a7a:	80 83       	st	Z, r24
	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     a7c:	89 85       	ldd	r24, Y+9	; 0x09
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	98 2f       	mov	r25, r24
     a82:	88 27       	eor	r24, r24
     a84:	2a 85       	ldd	r18, Y+10	; 0x0a
     a86:	82 2b       	or	r24, r18
     a88:	f3 01       	movw	r30, r6
     a8a:	91 83       	std	Z+1, r25	; 0x01
     a8c:	80 83       	st	Z, r24
	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     a8e:	8b 85       	ldd	r24, Y+11	; 0x0b
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	98 2f       	mov	r25, r24
     a94:	88 27       	eor	r24, r24
     a96:	2c 85       	ldd	r18, Y+12	; 0x0c
     a98:	82 2b       	or	r24, r18
     a9a:	f8 01       	movw	r30, r16
     a9c:	91 83       	std	Z+1, r25	; 0x01
     a9e:	80 83       	st	Z, r24
	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	98 2f       	mov	r25, r24
     aa6:	88 27       	eor	r24, r24
     aa8:	2e 85       	ldd	r18, Y+14	; 0x0e
     aaa:	82 2b       	or	r24, r18
     aac:	f7 01       	movw	r30, r14
     aae:	91 83       	std	Z+1, r25	; 0x01
     ab0:	80 83       	st	Z, r24
     ab2:	2e 96       	adiw	r28, 0x0e	; 14
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	f8 94       	cli
     ab8:	de bf       	out	0x3e, r29	; 62
     aba:	0f be       	out	0x3f, r0	; 63
     abc:	cd bf       	out	0x3d, r28	; 61
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	df 90       	pop	r13
     acc:	cf 90       	pop	r12
     ace:	bf 90       	pop	r11
     ad0:	af 90       	pop	r10
     ad2:	9f 90       	pop	r9
     ad4:	8f 90       	pop	r8
     ad6:	7f 90       	pop	r7
     ad8:	6f 90       	pop	r6
     ada:	08 95       	ret

00000adc <setup_timer3>:
void setup_timer3(void)
{
	//64 pres, 250.000 hz 0.000004s
	//sbi (TCCR5B, CS50);//only this no prescaling
	
	sbi (TCCR3B, CS30);//only this 8
     adc:	e1 e9       	ldi	r30, 0x91	; 145
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	80 81       	ld	r24, Z
     ae2:	81 60       	ori	r24, 0x01	; 1
     ae4:	80 83       	st	Z, r24
	//sbi (TCCR5B, CS52);//only this 256
	sbi (TCCR3B, WGM32);//OCR4A compare interrupt
     ae6:	80 81       	ld	r24, Z
     ae8:	88 60       	ori	r24, 0x08	; 8
     aea:	80 83       	st	Z, r24
     aec:	08 95       	ret

00000aee <Enable_timer3_compare_interrupt>:
}
void Enable_timer3_compare_interrupt()
{
	sbi (TIMSK3, OCIE3A);
     aee:	e1 e7       	ldi	r30, 0x71	; 113
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	80 81       	ld	r24, Z
     af4:	82 60       	ori	r24, 0x02	; 2
     af6:	80 83       	st	Z, r24
     af8:	08 95       	ret

00000afa <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     afa:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     afe:	8c e0       	ldi	r24, 0x0C	; 12
     b00:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     b04:	08 95       	ret

00000b06 <i2c_start>:
     b06:	94 ea       	ldi	r25, 0xA4	; 164
     b08:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     b0c:	4f ef       	ldi	r20, 0xFF	; 255
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	ec eb       	ldi	r30, 0xBC	; 188
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	90 81       	ld	r25, Z
     b1a:	99 23       	and	r25, r25
     b1c:	34 f0       	brlt	.+12     	; 0xb2a <i2c_start+0x24>
     b1e:	41 50       	subi	r20, 0x01	; 1
     b20:	51 09       	sbc	r21, r1
     b22:	61 09       	sbc	r22, r1
     b24:	71 09       	sbc	r23, r1
     b26:	c0 f7       	brcc	.-16     	; 0xb18 <i2c_start+0x12>
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <i2c_start+0x2c>
     b2a:	45 2b       	or	r20, r21
     b2c:	46 2b       	or	r20, r22
     b2e:	47 2b       	or	r20, r23
     b30:	41 f1       	breq	.+80     	; 0xb82 <i2c_start+0x7c>
     b32:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     b36:	98 7f       	andi	r25, 0xF8	; 248
     b38:	98 30       	cpi	r25, 0x08	; 8
     b3a:	11 f0       	breq	.+4      	; 0xb40 <i2c_start+0x3a>
     b3c:	90 31       	cpi	r25, 0x10	; 16
     b3e:	19 f5       	brne	.+70     	; 0xb86 <i2c_start+0x80>
     b40:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     b44:	84 e8       	ldi	r24, 0x84	; 132
     b46:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     b4a:	8f ef       	ldi	r24, 0xFF	; 255
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	a0 e0       	ldi	r26, 0x00	; 0
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ec eb       	ldi	r30, 0xBC	; 188
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	20 81       	ld	r18, Z
     b58:	22 23       	and	r18, r18
     b5a:	2c f0       	brlt	.+10     	; 0xb66 <i2c_start+0x60>
     b5c:	01 97       	sbiw	r24, 0x01	; 1
     b5e:	a1 09       	sbc	r26, r1
     b60:	b1 09       	sbc	r27, r1
     b62:	c8 f7       	brcc	.-14     	; 0xb56 <i2c_start+0x50>
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <i2c_start+0x68>
     b66:	89 2b       	or	r24, r25
     b68:	8a 2b       	or	r24, r26
     b6a:	8b 2b       	or	r24, r27
     b6c:	71 f0       	breq	.+28     	; 0xb8a <i2c_start+0x84>
     b6e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     b72:	98 7f       	andi	r25, 0xF8	; 248
     b74:	98 31       	cpi	r25, 0x18	; 24
     b76:	59 f0       	breq	.+22     	; 0xb8e <i2c_start+0x88>
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	90 34       	cpi	r25, 0x40	; 64
     b7c:	49 f4       	brne	.+18     	; 0xb90 <i2c_start+0x8a>
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	08 95       	ret
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	08 95       	ret
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	08 95       	ret
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	08 95       	ret
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	08 95       	ret

00000b92 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     b92:	84 e9       	ldi	r24, 0x94	; 148
     b94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	ec eb       	ldi	r30, 0xBC	; 188
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	20 81       	ld	r18, Z
     ba2:	24 ff       	sbrs	r18, 4
     ba4:	05 c0       	rjmp	.+10     	; 0xbb0 <i2c_stop+0x1e>
     ba6:	01 96       	adiw	r24, 0x01	; 1
     ba8:	81 15       	cp	r24, r1
     baa:	21 e0       	ldi	r18, 0x01	; 1
     bac:	92 07       	cpc	r25, r18
     bae:	c1 f7       	brne	.-16     	; 0xba0 <i2c_stop+0xe>
     bb0:	08 95       	ret

00000bb2 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     bb2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     bb6:	84 e8       	ldi	r24, 0x84	; 132
     bb8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     bbc:	8f ef       	ldi	r24, 0xFF	; 255
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     bc4:	ec eb       	ldi	r30, 0xBC	; 188
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	20 81       	ld	r18, Z
     bca:	22 23       	and	r18, r18
     bcc:	2c f0       	brlt	.+10     	; 0xbd8 <i2c_write+0x26>
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	a1 09       	sbc	r26, r1
     bd2:	b1 09       	sbc	r27, r1
     bd4:	c8 f7       	brcc	.-14     	; 0xbc8 <i2c_write+0x16>
     bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <i2c_write+0x2e>
	if(i2c_timer == 0)
     bd8:	89 2b       	or	r24, r25
     bda:	8a 2b       	or	r24, r26
     bdc:	8b 2b       	or	r24, r27
     bde:	41 f0       	breq	.+16     	; 0xbf0 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     be0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     be4:	98 7f       	andi	r25, 0xF8	; 248
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	98 32       	cpi	r25, 0x28	; 40
     bea:	19 f4       	brne	.+6      	; 0xbf2 <i2c_write+0x40>
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	08 95       	ret
     bf0:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     bf2:	08 95       	ret

00000bf4 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     bf4:	84 ec       	ldi	r24, 0xC4	; 196
     bf6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
     bfa:	8f ef       	ldi	r24, 0xFF	; 255
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	a0 e0       	ldi	r26, 0x00	; 0
     c00:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     c02:	ec eb       	ldi	r30, 0xBC	; 188
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	20 81       	ld	r18, Z
     c08:	22 23       	and	r18, r18
     c0a:	2c f0       	brlt	.+10     	; 0xc16 <i2c_readAck+0x22>
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	a1 09       	sbc	r26, r1
     c10:	b1 09       	sbc	r27, r1
     c12:	c8 f7       	brcc	.-14     	; 0xc06 <i2c_readAck+0x12>
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     c16:	89 2b       	or	r24, r25
     c18:	8a 2b       	or	r24, r26
     c1a:	8b 2b       	or	r24, r27
     c1c:	19 f0       	breq	.+6      	; 0xc24 <i2c_readAck+0x30>
		return 0;

    return TWDR;
     c1e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     c22:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     c24:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     c26:	08 95       	ret

00000c28 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     c28:	84 e8       	ldi	r24, 0x84	; 132
     c2a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
     c2e:	8f ef       	ldi	r24, 0xFF	; 255
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	a0 e0       	ldi	r26, 0x00	; 0
     c34:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     c36:	ec eb       	ldi	r30, 0xBC	; 188
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	20 81       	ld	r18, Z
     c3c:	22 23       	and	r18, r18
     c3e:	2c f0       	brlt	.+10     	; 0xc4a <i2c_readNak+0x22>
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	a1 09       	sbc	r26, r1
     c44:	b1 09       	sbc	r27, r1
     c46:	c8 f7       	brcc	.-14     	; 0xc3a <i2c_readNak+0x12>
     c48:	04 c0       	rjmp	.+8      	; 0xc52 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     c4a:	89 2b       	or	r24, r25
     c4c:	8a 2b       	or	r24, r26
     c4e:	8b 2b       	or	r24, r27
     c50:	19 f0       	breq	.+6      	; 0xc58 <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     c52:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     c56:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     c58:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     c5a:	08 95       	ret

00000c5c <USART_Init>:
#include <avr/io.h>
#include <stdio.h>
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     c5c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;
     c60:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	UCSR0B = (1<<TXEN0);// | (1<<TXCIE0);
     c64:	88 e0       	ldi	r24, 0x08	; 8
     c66:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);//2 stop bit 8 bit
     c6a:	8e e0       	ldi	r24, 0x0E	; 14
     c6c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     c70:	08 95       	ret

00000c72 <__subsf3>:
     c72:	50 58       	subi	r21, 0x80	; 128

00000c74 <__addsf3>:
     c74:	bb 27       	eor	r27, r27
     c76:	aa 27       	eor	r26, r26
     c78:	0e d0       	rcall	.+28     	; 0xc96 <__addsf3x>
     c7a:	48 c1       	rjmp	.+656    	; 0xf0c <__fp_round>
     c7c:	39 d1       	rcall	.+626    	; 0xef0 <__fp_pscA>
     c7e:	30 f0       	brcs	.+12     	; 0xc8c <__addsf3+0x18>
     c80:	3e d1       	rcall	.+636    	; 0xefe <__fp_pscB>
     c82:	20 f0       	brcs	.+8      	; 0xc8c <__addsf3+0x18>
     c84:	31 f4       	brne	.+12     	; 0xc92 <__addsf3+0x1e>
     c86:	9f 3f       	cpi	r25, 0xFF	; 255
     c88:	11 f4       	brne	.+4      	; 0xc8e <__addsf3+0x1a>
     c8a:	1e f4       	brtc	.+6      	; 0xc92 <__addsf3+0x1e>
     c8c:	2e c1       	rjmp	.+604    	; 0xeea <__fp_nan>
     c8e:	0e f4       	brtc	.+2      	; 0xc92 <__addsf3+0x1e>
     c90:	e0 95       	com	r30
     c92:	e7 fb       	bst	r30, 7
     c94:	24 c1       	rjmp	.+584    	; 0xede <__fp_inf>

00000c96 <__addsf3x>:
     c96:	e9 2f       	mov	r30, r25
     c98:	4a d1       	rcall	.+660    	; 0xf2e <__fp_split3>
     c9a:	80 f3       	brcs	.-32     	; 0xc7c <__addsf3+0x8>
     c9c:	ba 17       	cp	r27, r26
     c9e:	62 07       	cpc	r22, r18
     ca0:	73 07       	cpc	r23, r19
     ca2:	84 07       	cpc	r24, r20
     ca4:	95 07       	cpc	r25, r21
     ca6:	18 f0       	brcs	.+6      	; 0xcae <__addsf3x+0x18>
     ca8:	71 f4       	brne	.+28     	; 0xcc6 <__addsf3x+0x30>
     caa:	9e f5       	brtc	.+102    	; 0xd12 <__addsf3x+0x7c>
     cac:	62 c1       	rjmp	.+708    	; 0xf72 <__fp_zero>
     cae:	0e f4       	brtc	.+2      	; 0xcb2 <__addsf3x+0x1c>
     cb0:	e0 95       	com	r30
     cb2:	0b 2e       	mov	r0, r27
     cb4:	ba 2f       	mov	r27, r26
     cb6:	a0 2d       	mov	r26, r0
     cb8:	0b 01       	movw	r0, r22
     cba:	b9 01       	movw	r22, r18
     cbc:	90 01       	movw	r18, r0
     cbe:	0c 01       	movw	r0, r24
     cc0:	ca 01       	movw	r24, r20
     cc2:	a0 01       	movw	r20, r0
     cc4:	11 24       	eor	r1, r1
     cc6:	ff 27       	eor	r31, r31
     cc8:	59 1b       	sub	r21, r25
     cca:	99 f0       	breq	.+38     	; 0xcf2 <__addsf3x+0x5c>
     ccc:	59 3f       	cpi	r21, 0xF9	; 249
     cce:	50 f4       	brcc	.+20     	; 0xce4 <__addsf3x+0x4e>
     cd0:	50 3e       	cpi	r21, 0xE0	; 224
     cd2:	68 f1       	brcs	.+90     	; 0xd2e <__addsf3x+0x98>
     cd4:	1a 16       	cp	r1, r26
     cd6:	f0 40       	sbci	r31, 0x00	; 0
     cd8:	a2 2f       	mov	r26, r18
     cda:	23 2f       	mov	r18, r19
     cdc:	34 2f       	mov	r19, r20
     cde:	44 27       	eor	r20, r20
     ce0:	58 5f       	subi	r21, 0xF8	; 248
     ce2:	f3 cf       	rjmp	.-26     	; 0xcca <__addsf3x+0x34>
     ce4:	46 95       	lsr	r20
     ce6:	37 95       	ror	r19
     ce8:	27 95       	ror	r18
     cea:	a7 95       	ror	r26
     cec:	f0 40       	sbci	r31, 0x00	; 0
     cee:	53 95       	inc	r21
     cf0:	c9 f7       	brne	.-14     	; 0xce4 <__addsf3x+0x4e>
     cf2:	7e f4       	brtc	.+30     	; 0xd12 <__addsf3x+0x7c>
     cf4:	1f 16       	cp	r1, r31
     cf6:	ba 0b       	sbc	r27, r26
     cf8:	62 0b       	sbc	r22, r18
     cfa:	73 0b       	sbc	r23, r19
     cfc:	84 0b       	sbc	r24, r20
     cfe:	ba f0       	brmi	.+46     	; 0xd2e <__addsf3x+0x98>
     d00:	91 50       	subi	r25, 0x01	; 1
     d02:	a1 f0       	breq	.+40     	; 0xd2c <__addsf3x+0x96>
     d04:	ff 0f       	add	r31, r31
     d06:	bb 1f       	adc	r27, r27
     d08:	66 1f       	adc	r22, r22
     d0a:	77 1f       	adc	r23, r23
     d0c:	88 1f       	adc	r24, r24
     d0e:	c2 f7       	brpl	.-16     	; 0xd00 <__addsf3x+0x6a>
     d10:	0e c0       	rjmp	.+28     	; 0xd2e <__addsf3x+0x98>
     d12:	ba 0f       	add	r27, r26
     d14:	62 1f       	adc	r22, r18
     d16:	73 1f       	adc	r23, r19
     d18:	84 1f       	adc	r24, r20
     d1a:	48 f4       	brcc	.+18     	; 0xd2e <__addsf3x+0x98>
     d1c:	87 95       	ror	r24
     d1e:	77 95       	ror	r23
     d20:	67 95       	ror	r22
     d22:	b7 95       	ror	r27
     d24:	f7 95       	ror	r31
     d26:	9e 3f       	cpi	r25, 0xFE	; 254
     d28:	08 f0       	brcs	.+2      	; 0xd2c <__addsf3x+0x96>
     d2a:	b3 cf       	rjmp	.-154    	; 0xc92 <__addsf3+0x1e>
     d2c:	93 95       	inc	r25
     d2e:	88 0f       	add	r24, r24
     d30:	08 f0       	brcs	.+2      	; 0xd34 <__addsf3x+0x9e>
     d32:	99 27       	eor	r25, r25
     d34:	ee 0f       	add	r30, r30
     d36:	97 95       	ror	r25
     d38:	87 95       	ror	r24
     d3a:	08 95       	ret

00000d3c <__divsf3>:
     d3c:	0c d0       	rcall	.+24     	; 0xd56 <__divsf3x>
     d3e:	e6 c0       	rjmp	.+460    	; 0xf0c <__fp_round>
     d40:	de d0       	rcall	.+444    	; 0xefe <__fp_pscB>
     d42:	40 f0       	brcs	.+16     	; 0xd54 <__divsf3+0x18>
     d44:	d5 d0       	rcall	.+426    	; 0xef0 <__fp_pscA>
     d46:	30 f0       	brcs	.+12     	; 0xd54 <__divsf3+0x18>
     d48:	21 f4       	brne	.+8      	; 0xd52 <__divsf3+0x16>
     d4a:	5f 3f       	cpi	r21, 0xFF	; 255
     d4c:	19 f0       	breq	.+6      	; 0xd54 <__divsf3+0x18>
     d4e:	c7 c0       	rjmp	.+398    	; 0xede <__fp_inf>
     d50:	51 11       	cpse	r21, r1
     d52:	10 c1       	rjmp	.+544    	; 0xf74 <__fp_szero>
     d54:	ca c0       	rjmp	.+404    	; 0xeea <__fp_nan>

00000d56 <__divsf3x>:
     d56:	eb d0       	rcall	.+470    	; 0xf2e <__fp_split3>
     d58:	98 f3       	brcs	.-26     	; 0xd40 <__divsf3+0x4>

00000d5a <__divsf3_pse>:
     d5a:	99 23       	and	r25, r25
     d5c:	c9 f3       	breq	.-14     	; 0xd50 <__divsf3+0x14>
     d5e:	55 23       	and	r21, r21
     d60:	b1 f3       	breq	.-20     	; 0xd4e <__divsf3+0x12>
     d62:	95 1b       	sub	r25, r21
     d64:	55 0b       	sbc	r21, r21
     d66:	bb 27       	eor	r27, r27
     d68:	aa 27       	eor	r26, r26
     d6a:	62 17       	cp	r22, r18
     d6c:	73 07       	cpc	r23, r19
     d6e:	84 07       	cpc	r24, r20
     d70:	38 f0       	brcs	.+14     	; 0xd80 <__divsf3_pse+0x26>
     d72:	9f 5f       	subi	r25, 0xFF	; 255
     d74:	5f 4f       	sbci	r21, 0xFF	; 255
     d76:	22 0f       	add	r18, r18
     d78:	33 1f       	adc	r19, r19
     d7a:	44 1f       	adc	r20, r20
     d7c:	aa 1f       	adc	r26, r26
     d7e:	a9 f3       	breq	.-22     	; 0xd6a <__divsf3_pse+0x10>
     d80:	33 d0       	rcall	.+102    	; 0xde8 <__divsf3_pse+0x8e>
     d82:	0e 2e       	mov	r0, r30
     d84:	3a f0       	brmi	.+14     	; 0xd94 <__divsf3_pse+0x3a>
     d86:	e0 e8       	ldi	r30, 0x80	; 128
     d88:	30 d0       	rcall	.+96     	; 0xdea <__divsf3_pse+0x90>
     d8a:	91 50       	subi	r25, 0x01	; 1
     d8c:	50 40       	sbci	r21, 0x00	; 0
     d8e:	e6 95       	lsr	r30
     d90:	00 1c       	adc	r0, r0
     d92:	ca f7       	brpl	.-14     	; 0xd86 <__divsf3_pse+0x2c>
     d94:	29 d0       	rcall	.+82     	; 0xde8 <__divsf3_pse+0x8e>
     d96:	fe 2f       	mov	r31, r30
     d98:	27 d0       	rcall	.+78     	; 0xde8 <__divsf3_pse+0x8e>
     d9a:	66 0f       	add	r22, r22
     d9c:	77 1f       	adc	r23, r23
     d9e:	88 1f       	adc	r24, r24
     da0:	bb 1f       	adc	r27, r27
     da2:	26 17       	cp	r18, r22
     da4:	37 07       	cpc	r19, r23
     da6:	48 07       	cpc	r20, r24
     da8:	ab 07       	cpc	r26, r27
     daa:	b0 e8       	ldi	r27, 0x80	; 128
     dac:	09 f0       	breq	.+2      	; 0xdb0 <__divsf3_pse+0x56>
     dae:	bb 0b       	sbc	r27, r27
     db0:	80 2d       	mov	r24, r0
     db2:	bf 01       	movw	r22, r30
     db4:	ff 27       	eor	r31, r31
     db6:	93 58       	subi	r25, 0x83	; 131
     db8:	5f 4f       	sbci	r21, 0xFF	; 255
     dba:	2a f0       	brmi	.+10     	; 0xdc6 <__divsf3_pse+0x6c>
     dbc:	9e 3f       	cpi	r25, 0xFE	; 254
     dbe:	51 05       	cpc	r21, r1
     dc0:	68 f0       	brcs	.+26     	; 0xddc <__divsf3_pse+0x82>
     dc2:	8d c0       	rjmp	.+282    	; 0xede <__fp_inf>
     dc4:	d7 c0       	rjmp	.+430    	; 0xf74 <__fp_szero>
     dc6:	5f 3f       	cpi	r21, 0xFF	; 255
     dc8:	ec f3       	brlt	.-6      	; 0xdc4 <__divsf3_pse+0x6a>
     dca:	98 3e       	cpi	r25, 0xE8	; 232
     dcc:	dc f3       	brlt	.-10     	; 0xdc4 <__divsf3_pse+0x6a>
     dce:	86 95       	lsr	r24
     dd0:	77 95       	ror	r23
     dd2:	67 95       	ror	r22
     dd4:	b7 95       	ror	r27
     dd6:	f7 95       	ror	r31
     dd8:	9f 5f       	subi	r25, 0xFF	; 255
     dda:	c9 f7       	brne	.-14     	; 0xdce <__divsf3_pse+0x74>
     ddc:	88 0f       	add	r24, r24
     dde:	91 1d       	adc	r25, r1
     de0:	96 95       	lsr	r25
     de2:	87 95       	ror	r24
     de4:	97 f9       	bld	r25, 7
     de6:	08 95       	ret
     de8:	e1 e0       	ldi	r30, 0x01	; 1
     dea:	66 0f       	add	r22, r22
     dec:	77 1f       	adc	r23, r23
     dee:	88 1f       	adc	r24, r24
     df0:	bb 1f       	adc	r27, r27
     df2:	62 17       	cp	r22, r18
     df4:	73 07       	cpc	r23, r19
     df6:	84 07       	cpc	r24, r20
     df8:	ba 07       	cpc	r27, r26
     dfa:	20 f0       	brcs	.+8      	; 0xe04 <__divsf3_pse+0xaa>
     dfc:	62 1b       	sub	r22, r18
     dfe:	73 0b       	sbc	r23, r19
     e00:	84 0b       	sbc	r24, r20
     e02:	ba 0b       	sbc	r27, r26
     e04:	ee 1f       	adc	r30, r30
     e06:	88 f7       	brcc	.-30     	; 0xdea <__divsf3_pse+0x90>
     e08:	e0 95       	com	r30
     e0a:	08 95       	ret

00000e0c <__fixunssfsi>:
     e0c:	98 d0       	rcall	.+304    	; 0xf3e <__fp_splitA>
     e0e:	88 f0       	brcs	.+34     	; 0xe32 <__fixunssfsi+0x26>
     e10:	9f 57       	subi	r25, 0x7F	; 127
     e12:	90 f0       	brcs	.+36     	; 0xe38 <__fixunssfsi+0x2c>
     e14:	b9 2f       	mov	r27, r25
     e16:	99 27       	eor	r25, r25
     e18:	b7 51       	subi	r27, 0x17	; 23
     e1a:	a0 f0       	brcs	.+40     	; 0xe44 <__fixunssfsi+0x38>
     e1c:	d1 f0       	breq	.+52     	; 0xe52 <__fixunssfsi+0x46>
     e1e:	66 0f       	add	r22, r22
     e20:	77 1f       	adc	r23, r23
     e22:	88 1f       	adc	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	1a f0       	brmi	.+6      	; 0xe2e <__fixunssfsi+0x22>
     e28:	ba 95       	dec	r27
     e2a:	c9 f7       	brne	.-14     	; 0xe1e <__fixunssfsi+0x12>
     e2c:	12 c0       	rjmp	.+36     	; 0xe52 <__fixunssfsi+0x46>
     e2e:	b1 30       	cpi	r27, 0x01	; 1
     e30:	81 f0       	breq	.+32     	; 0xe52 <__fixunssfsi+0x46>
     e32:	9f d0       	rcall	.+318    	; 0xf72 <__fp_zero>
     e34:	b1 e0       	ldi	r27, 0x01	; 1
     e36:	08 95       	ret
     e38:	9c c0       	rjmp	.+312    	; 0xf72 <__fp_zero>
     e3a:	67 2f       	mov	r22, r23
     e3c:	78 2f       	mov	r23, r24
     e3e:	88 27       	eor	r24, r24
     e40:	b8 5f       	subi	r27, 0xF8	; 248
     e42:	39 f0       	breq	.+14     	; 0xe52 <__fixunssfsi+0x46>
     e44:	b9 3f       	cpi	r27, 0xF9	; 249
     e46:	cc f3       	brlt	.-14     	; 0xe3a <__fixunssfsi+0x2e>
     e48:	86 95       	lsr	r24
     e4a:	77 95       	ror	r23
     e4c:	67 95       	ror	r22
     e4e:	b3 95       	inc	r27
     e50:	d9 f7       	brne	.-10     	; 0xe48 <__fixunssfsi+0x3c>
     e52:	3e f4       	brtc	.+14     	; 0xe62 <__fixunssfsi+0x56>
     e54:	90 95       	com	r25
     e56:	80 95       	com	r24
     e58:	70 95       	com	r23
     e5a:	61 95       	neg	r22
     e5c:	7f 4f       	sbci	r23, 0xFF	; 255
     e5e:	8f 4f       	sbci	r24, 0xFF	; 255
     e60:	9f 4f       	sbci	r25, 0xFF	; 255
     e62:	08 95       	ret

00000e64 <__floatunsisf>:
     e64:	e8 94       	clt
     e66:	09 c0       	rjmp	.+18     	; 0xe7a <__floatsisf+0x12>

00000e68 <__floatsisf>:
     e68:	97 fb       	bst	r25, 7
     e6a:	3e f4       	brtc	.+14     	; 0xe7a <__floatsisf+0x12>
     e6c:	90 95       	com	r25
     e6e:	80 95       	com	r24
     e70:	70 95       	com	r23
     e72:	61 95       	neg	r22
     e74:	7f 4f       	sbci	r23, 0xFF	; 255
     e76:	8f 4f       	sbci	r24, 0xFF	; 255
     e78:	9f 4f       	sbci	r25, 0xFF	; 255
     e7a:	99 23       	and	r25, r25
     e7c:	a9 f0       	breq	.+42     	; 0xea8 <__floatsisf+0x40>
     e7e:	f9 2f       	mov	r31, r25
     e80:	96 e9       	ldi	r25, 0x96	; 150
     e82:	bb 27       	eor	r27, r27
     e84:	93 95       	inc	r25
     e86:	f6 95       	lsr	r31
     e88:	87 95       	ror	r24
     e8a:	77 95       	ror	r23
     e8c:	67 95       	ror	r22
     e8e:	b7 95       	ror	r27
     e90:	f1 11       	cpse	r31, r1
     e92:	f8 cf       	rjmp	.-16     	; 0xe84 <__floatsisf+0x1c>
     e94:	fa f4       	brpl	.+62     	; 0xed4 <__floatsisf+0x6c>
     e96:	bb 0f       	add	r27, r27
     e98:	11 f4       	brne	.+4      	; 0xe9e <__floatsisf+0x36>
     e9a:	60 ff       	sbrs	r22, 0
     e9c:	1b c0       	rjmp	.+54     	; 0xed4 <__floatsisf+0x6c>
     e9e:	6f 5f       	subi	r22, 0xFF	; 255
     ea0:	7f 4f       	sbci	r23, 0xFF	; 255
     ea2:	8f 4f       	sbci	r24, 0xFF	; 255
     ea4:	9f 4f       	sbci	r25, 0xFF	; 255
     ea6:	16 c0       	rjmp	.+44     	; 0xed4 <__floatsisf+0x6c>
     ea8:	88 23       	and	r24, r24
     eaa:	11 f0       	breq	.+4      	; 0xeb0 <__floatsisf+0x48>
     eac:	96 e9       	ldi	r25, 0x96	; 150
     eae:	11 c0       	rjmp	.+34     	; 0xed2 <__floatsisf+0x6a>
     eb0:	77 23       	and	r23, r23
     eb2:	21 f0       	breq	.+8      	; 0xebc <__floatsisf+0x54>
     eb4:	9e e8       	ldi	r25, 0x8E	; 142
     eb6:	87 2f       	mov	r24, r23
     eb8:	76 2f       	mov	r23, r22
     eba:	05 c0       	rjmp	.+10     	; 0xec6 <__floatsisf+0x5e>
     ebc:	66 23       	and	r22, r22
     ebe:	71 f0       	breq	.+28     	; 0xedc <__floatsisf+0x74>
     ec0:	96 e8       	ldi	r25, 0x86	; 134
     ec2:	86 2f       	mov	r24, r22
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	2a f0       	brmi	.+10     	; 0xed4 <__floatsisf+0x6c>
     eca:	9a 95       	dec	r25
     ecc:	66 0f       	add	r22, r22
     ece:	77 1f       	adc	r23, r23
     ed0:	88 1f       	adc	r24, r24
     ed2:	da f7       	brpl	.-10     	; 0xeca <__floatsisf+0x62>
     ed4:	88 0f       	add	r24, r24
     ed6:	96 95       	lsr	r25
     ed8:	87 95       	ror	r24
     eda:	97 f9       	bld	r25, 7
     edc:	08 95       	ret

00000ede <__fp_inf>:
     ede:	97 f9       	bld	r25, 7
     ee0:	9f 67       	ori	r25, 0x7F	; 127
     ee2:	80 e8       	ldi	r24, 0x80	; 128
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	08 95       	ret

00000eea <__fp_nan>:
     eea:	9f ef       	ldi	r25, 0xFF	; 255
     eec:	80 ec       	ldi	r24, 0xC0	; 192
     eee:	08 95       	ret

00000ef0 <__fp_pscA>:
     ef0:	00 24       	eor	r0, r0
     ef2:	0a 94       	dec	r0
     ef4:	16 16       	cp	r1, r22
     ef6:	17 06       	cpc	r1, r23
     ef8:	18 06       	cpc	r1, r24
     efa:	09 06       	cpc	r0, r25
     efc:	08 95       	ret

00000efe <__fp_pscB>:
     efe:	00 24       	eor	r0, r0
     f00:	0a 94       	dec	r0
     f02:	12 16       	cp	r1, r18
     f04:	13 06       	cpc	r1, r19
     f06:	14 06       	cpc	r1, r20
     f08:	05 06       	cpc	r0, r21
     f0a:	08 95       	ret

00000f0c <__fp_round>:
     f0c:	09 2e       	mov	r0, r25
     f0e:	03 94       	inc	r0
     f10:	00 0c       	add	r0, r0
     f12:	11 f4       	brne	.+4      	; 0xf18 <__fp_round+0xc>
     f14:	88 23       	and	r24, r24
     f16:	52 f0       	brmi	.+20     	; 0xf2c <__fp_round+0x20>
     f18:	bb 0f       	add	r27, r27
     f1a:	40 f4       	brcc	.+16     	; 0xf2c <__fp_round+0x20>
     f1c:	bf 2b       	or	r27, r31
     f1e:	11 f4       	brne	.+4      	; 0xf24 <__fp_round+0x18>
     f20:	60 ff       	sbrs	r22, 0
     f22:	04 c0       	rjmp	.+8      	; 0xf2c <__fp_round+0x20>
     f24:	6f 5f       	subi	r22, 0xFF	; 255
     f26:	7f 4f       	sbci	r23, 0xFF	; 255
     f28:	8f 4f       	sbci	r24, 0xFF	; 255
     f2a:	9f 4f       	sbci	r25, 0xFF	; 255
     f2c:	08 95       	ret

00000f2e <__fp_split3>:
     f2e:	57 fd       	sbrc	r21, 7
     f30:	90 58       	subi	r25, 0x80	; 128
     f32:	44 0f       	add	r20, r20
     f34:	55 1f       	adc	r21, r21
     f36:	59 f0       	breq	.+22     	; 0xf4e <__fp_splitA+0x10>
     f38:	5f 3f       	cpi	r21, 0xFF	; 255
     f3a:	71 f0       	breq	.+28     	; 0xf58 <__fp_splitA+0x1a>
     f3c:	47 95       	ror	r20

00000f3e <__fp_splitA>:
     f3e:	88 0f       	add	r24, r24
     f40:	97 fb       	bst	r25, 7
     f42:	99 1f       	adc	r25, r25
     f44:	61 f0       	breq	.+24     	; 0xf5e <__fp_splitA+0x20>
     f46:	9f 3f       	cpi	r25, 0xFF	; 255
     f48:	79 f0       	breq	.+30     	; 0xf68 <__fp_splitA+0x2a>
     f4a:	87 95       	ror	r24
     f4c:	08 95       	ret
     f4e:	12 16       	cp	r1, r18
     f50:	13 06       	cpc	r1, r19
     f52:	14 06       	cpc	r1, r20
     f54:	55 1f       	adc	r21, r21
     f56:	f2 cf       	rjmp	.-28     	; 0xf3c <__fp_split3+0xe>
     f58:	46 95       	lsr	r20
     f5a:	f1 df       	rcall	.-30     	; 0xf3e <__fp_splitA>
     f5c:	08 c0       	rjmp	.+16     	; 0xf6e <__fp_splitA+0x30>
     f5e:	16 16       	cp	r1, r22
     f60:	17 06       	cpc	r1, r23
     f62:	18 06       	cpc	r1, r24
     f64:	99 1f       	adc	r25, r25
     f66:	f1 cf       	rjmp	.-30     	; 0xf4a <__fp_splitA+0xc>
     f68:	86 95       	lsr	r24
     f6a:	71 05       	cpc	r23, r1
     f6c:	61 05       	cpc	r22, r1
     f6e:	08 94       	sec
     f70:	08 95       	ret

00000f72 <__fp_zero>:
     f72:	e8 94       	clt

00000f74 <__fp_szero>:
     f74:	bb 27       	eor	r27, r27
     f76:	66 27       	eor	r22, r22
     f78:	77 27       	eor	r23, r23
     f7a:	cb 01       	movw	r24, r22
     f7c:	97 f9       	bld	r25, 7
     f7e:	08 95       	ret

00000f80 <__mulsf3>:
     f80:	0b d0       	rcall	.+22     	; 0xf98 <__mulsf3x>
     f82:	c4 cf       	rjmp	.-120    	; 0xf0c <__fp_round>
     f84:	b5 df       	rcall	.-150    	; 0xef0 <__fp_pscA>
     f86:	28 f0       	brcs	.+10     	; 0xf92 <__mulsf3+0x12>
     f88:	ba df       	rcall	.-140    	; 0xefe <__fp_pscB>
     f8a:	18 f0       	brcs	.+6      	; 0xf92 <__mulsf3+0x12>
     f8c:	95 23       	and	r25, r21
     f8e:	09 f0       	breq	.+2      	; 0xf92 <__mulsf3+0x12>
     f90:	a6 cf       	rjmp	.-180    	; 0xede <__fp_inf>
     f92:	ab cf       	rjmp	.-170    	; 0xeea <__fp_nan>
     f94:	11 24       	eor	r1, r1
     f96:	ee cf       	rjmp	.-36     	; 0xf74 <__fp_szero>

00000f98 <__mulsf3x>:
     f98:	ca df       	rcall	.-108    	; 0xf2e <__fp_split3>
     f9a:	a0 f3       	brcs	.-24     	; 0xf84 <__mulsf3+0x4>

00000f9c <__mulsf3_pse>:
     f9c:	95 9f       	mul	r25, r21
     f9e:	d1 f3       	breq	.-12     	; 0xf94 <__mulsf3+0x14>
     fa0:	95 0f       	add	r25, r21
     fa2:	50 e0       	ldi	r21, 0x00	; 0
     fa4:	55 1f       	adc	r21, r21
     fa6:	62 9f       	mul	r22, r18
     fa8:	f0 01       	movw	r30, r0
     faa:	72 9f       	mul	r23, r18
     fac:	bb 27       	eor	r27, r27
     fae:	f0 0d       	add	r31, r0
     fb0:	b1 1d       	adc	r27, r1
     fb2:	63 9f       	mul	r22, r19
     fb4:	aa 27       	eor	r26, r26
     fb6:	f0 0d       	add	r31, r0
     fb8:	b1 1d       	adc	r27, r1
     fba:	aa 1f       	adc	r26, r26
     fbc:	64 9f       	mul	r22, r20
     fbe:	66 27       	eor	r22, r22
     fc0:	b0 0d       	add	r27, r0
     fc2:	a1 1d       	adc	r26, r1
     fc4:	66 1f       	adc	r22, r22
     fc6:	82 9f       	mul	r24, r18
     fc8:	22 27       	eor	r18, r18
     fca:	b0 0d       	add	r27, r0
     fcc:	a1 1d       	adc	r26, r1
     fce:	62 1f       	adc	r22, r18
     fd0:	73 9f       	mul	r23, r19
     fd2:	b0 0d       	add	r27, r0
     fd4:	a1 1d       	adc	r26, r1
     fd6:	62 1f       	adc	r22, r18
     fd8:	83 9f       	mul	r24, r19
     fda:	a0 0d       	add	r26, r0
     fdc:	61 1d       	adc	r22, r1
     fde:	22 1f       	adc	r18, r18
     fe0:	74 9f       	mul	r23, r20
     fe2:	33 27       	eor	r19, r19
     fe4:	a0 0d       	add	r26, r0
     fe6:	61 1d       	adc	r22, r1
     fe8:	23 1f       	adc	r18, r19
     fea:	84 9f       	mul	r24, r20
     fec:	60 0d       	add	r22, r0
     fee:	21 1d       	adc	r18, r1
     ff0:	82 2f       	mov	r24, r18
     ff2:	76 2f       	mov	r23, r22
     ff4:	6a 2f       	mov	r22, r26
     ff6:	11 24       	eor	r1, r1
     ff8:	9f 57       	subi	r25, 0x7F	; 127
     ffa:	50 40       	sbci	r21, 0x00	; 0
     ffc:	8a f0       	brmi	.+34     	; 0x1020 <__mulsf3_pse+0x84>
     ffe:	e1 f0       	breq	.+56     	; 0x1038 <__mulsf3_pse+0x9c>
    1000:	88 23       	and	r24, r24
    1002:	4a f0       	brmi	.+18     	; 0x1016 <__mulsf3_pse+0x7a>
    1004:	ee 0f       	add	r30, r30
    1006:	ff 1f       	adc	r31, r31
    1008:	bb 1f       	adc	r27, r27
    100a:	66 1f       	adc	r22, r22
    100c:	77 1f       	adc	r23, r23
    100e:	88 1f       	adc	r24, r24
    1010:	91 50       	subi	r25, 0x01	; 1
    1012:	50 40       	sbci	r21, 0x00	; 0
    1014:	a9 f7       	brne	.-22     	; 0x1000 <__mulsf3_pse+0x64>
    1016:	9e 3f       	cpi	r25, 0xFE	; 254
    1018:	51 05       	cpc	r21, r1
    101a:	70 f0       	brcs	.+28     	; 0x1038 <__mulsf3_pse+0x9c>
    101c:	60 cf       	rjmp	.-320    	; 0xede <__fp_inf>
    101e:	aa cf       	rjmp	.-172    	; 0xf74 <__fp_szero>
    1020:	5f 3f       	cpi	r21, 0xFF	; 255
    1022:	ec f3       	brlt	.-6      	; 0x101e <__mulsf3_pse+0x82>
    1024:	98 3e       	cpi	r25, 0xE8	; 232
    1026:	dc f3       	brlt	.-10     	; 0x101e <__mulsf3_pse+0x82>
    1028:	86 95       	lsr	r24
    102a:	77 95       	ror	r23
    102c:	67 95       	ror	r22
    102e:	b7 95       	ror	r27
    1030:	f7 95       	ror	r31
    1032:	e7 95       	ror	r30
    1034:	9f 5f       	subi	r25, 0xFF	; 255
    1036:	c1 f7       	brne	.-16     	; 0x1028 <__mulsf3_pse+0x8c>
    1038:	fe 2b       	or	r31, r30
    103a:	88 0f       	add	r24, r24
    103c:	91 1d       	adc	r25, r1
    103e:	96 95       	lsr	r25
    1040:	87 95       	ror	r24
    1042:	97 f9       	bld	r25, 7
    1044:	08 95       	ret

00001046 <sin>:
    1046:	9f 93       	push	r25
    1048:	2a d0       	rcall	.+84     	; 0x109e <__fp_rempio2>
    104a:	0f 90       	pop	r0
    104c:	07 fc       	sbrc	r0, 7
    104e:	ee 5f       	subi	r30, 0xFE	; 254
    1050:	4d c0       	rjmp	.+154    	; 0x10ec <__fp_sinus>

00001052 <__fp_powser>:
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	1f 93       	push	r17
    1058:	0f 93       	push	r16
    105a:	ff 92       	push	r15
    105c:	ef 92       	push	r14
    105e:	df 92       	push	r13
    1060:	7b 01       	movw	r14, r22
    1062:	8c 01       	movw	r16, r24
    1064:	68 94       	set
    1066:	05 c0       	rjmp	.+10     	; 0x1072 <__fp_powser+0x20>
    1068:	da 2e       	mov	r13, r26
    106a:	ef 01       	movw	r28, r30
    106c:	95 df       	rcall	.-214    	; 0xf98 <__mulsf3x>
    106e:	fe 01       	movw	r30, r28
    1070:	e8 94       	clt
    1072:	a5 91       	lpm	r26, Z+
    1074:	25 91       	lpm	r18, Z+
    1076:	35 91       	lpm	r19, Z+
    1078:	45 91       	lpm	r20, Z+
    107a:	55 91       	lpm	r21, Z+
    107c:	ae f3       	brts	.-22     	; 0x1068 <__fp_powser+0x16>
    107e:	ef 01       	movw	r28, r30
    1080:	0a de       	rcall	.-1004   	; 0xc96 <__addsf3x>
    1082:	fe 01       	movw	r30, r28
    1084:	97 01       	movw	r18, r14
    1086:	a8 01       	movw	r20, r16
    1088:	da 94       	dec	r13
    108a:	79 f7       	brne	.-34     	; 0x106a <__fp_powser+0x18>
    108c:	df 90       	pop	r13
    108e:	ef 90       	pop	r14
    1090:	ff 90       	pop	r15
    1092:	0f 91       	pop	r16
    1094:	1f 91       	pop	r17
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret
    109c:	26 cf       	rjmp	.-436    	; 0xeea <__fp_nan>

0000109e <__fp_rempio2>:
    109e:	4f df       	rcall	.-354    	; 0xf3e <__fp_splitA>
    10a0:	e8 f3       	brcs	.-6      	; 0x109c <__fp_powser+0x4a>
    10a2:	e8 94       	clt
    10a4:	e0 e0       	ldi	r30, 0x00	; 0
    10a6:	bb 27       	eor	r27, r27
    10a8:	9f 57       	subi	r25, 0x7F	; 127
    10aa:	f0 f0       	brcs	.+60     	; 0x10e8 <__fp_rempio2+0x4a>
    10ac:	2a ed       	ldi	r18, 0xDA	; 218
    10ae:	3f e0       	ldi	r19, 0x0F	; 15
    10b0:	49 ec       	ldi	r20, 0xC9	; 201
    10b2:	06 c0       	rjmp	.+12     	; 0x10c0 <__fp_rempio2+0x22>
    10b4:	ee 0f       	add	r30, r30
    10b6:	bb 0f       	add	r27, r27
    10b8:	66 1f       	adc	r22, r22
    10ba:	77 1f       	adc	r23, r23
    10bc:	88 1f       	adc	r24, r24
    10be:	28 f0       	brcs	.+10     	; 0x10ca <__fp_rempio2+0x2c>
    10c0:	b2 3a       	cpi	r27, 0xA2	; 162
    10c2:	62 07       	cpc	r22, r18
    10c4:	73 07       	cpc	r23, r19
    10c6:	84 07       	cpc	r24, r20
    10c8:	28 f0       	brcs	.+10     	; 0x10d4 <__fp_rempio2+0x36>
    10ca:	b2 5a       	subi	r27, 0xA2	; 162
    10cc:	62 0b       	sbc	r22, r18
    10ce:	73 0b       	sbc	r23, r19
    10d0:	84 0b       	sbc	r24, r20
    10d2:	e3 95       	inc	r30
    10d4:	9a 95       	dec	r25
    10d6:	72 f7       	brpl	.-36     	; 0x10b4 <__fp_rempio2+0x16>
    10d8:	80 38       	cpi	r24, 0x80	; 128
    10da:	30 f4       	brcc	.+12     	; 0x10e8 <__fp_rempio2+0x4a>
    10dc:	9a 95       	dec	r25
    10de:	bb 0f       	add	r27, r27
    10e0:	66 1f       	adc	r22, r22
    10e2:	77 1f       	adc	r23, r23
    10e4:	88 1f       	adc	r24, r24
    10e6:	d2 f7       	brpl	.-12     	; 0x10dc <__fp_rempio2+0x3e>
    10e8:	90 48       	sbci	r25, 0x80	; 128
    10ea:	13 c0       	rjmp	.+38     	; 0x1112 <__fp_mpack_finite>

000010ec <__fp_sinus>:
    10ec:	ef 93       	push	r30
    10ee:	e0 ff       	sbrs	r30, 0
    10f0:	06 c0       	rjmp	.+12     	; 0x10fe <__fp_sinus+0x12>
    10f2:	a2 ea       	ldi	r26, 0xA2	; 162
    10f4:	2a ed       	ldi	r18, 0xDA	; 218
    10f6:	3f e0       	ldi	r19, 0x0F	; 15
    10f8:	49 ec       	ldi	r20, 0xC9	; 201
    10fa:	5f eb       	ldi	r21, 0xBF	; 191
    10fc:	cc dd       	rcall	.-1128   	; 0xc96 <__addsf3x>
    10fe:	06 df       	rcall	.-500    	; 0xf0c <__fp_round>
    1100:	0f 90       	pop	r0
    1102:	03 94       	inc	r0
    1104:	01 fc       	sbrc	r0, 1
    1106:	90 58       	subi	r25, 0x80	; 128
    1108:	e4 ee       	ldi	r30, 0xE4	; 228
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	0e c0       	rjmp	.+28     	; 0x112a <__fp_powsodd>

0000110e <__fp_mpack>:
    110e:	9f 3f       	cpi	r25, 0xFF	; 255
    1110:	31 f0       	breq	.+12     	; 0x111e <__fp_mpack_finite+0xc>

00001112 <__fp_mpack_finite>:
    1112:	91 50       	subi	r25, 0x01	; 1
    1114:	20 f4       	brcc	.+8      	; 0x111e <__fp_mpack_finite+0xc>
    1116:	87 95       	ror	r24
    1118:	77 95       	ror	r23
    111a:	67 95       	ror	r22
    111c:	b7 95       	ror	r27
    111e:	88 0f       	add	r24, r24
    1120:	91 1d       	adc	r25, r1
    1122:	96 95       	lsr	r25
    1124:	87 95       	ror	r24
    1126:	97 f9       	bld	r25, 7
    1128:	08 95       	ret

0000112a <__fp_powsodd>:
    112a:	9f 93       	push	r25
    112c:	8f 93       	push	r24
    112e:	7f 93       	push	r23
    1130:	6f 93       	push	r22
    1132:	ff 93       	push	r31
    1134:	ef 93       	push	r30
    1136:	9b 01       	movw	r18, r22
    1138:	ac 01       	movw	r20, r24
    113a:	22 df       	rcall	.-444    	; 0xf80 <__mulsf3>
    113c:	ef 91       	pop	r30
    113e:	ff 91       	pop	r31
    1140:	88 df       	rcall	.-240    	; 0x1052 <__fp_powser>
    1142:	2f 91       	pop	r18
    1144:	3f 91       	pop	r19
    1146:	4f 91       	pop	r20
    1148:	5f 91       	pop	r21
    114a:	1a cf       	rjmp	.-460    	; 0xf80 <__mulsf3>

0000114c <__divmodhi4>:
    114c:	97 fb       	bst	r25, 7
    114e:	07 2e       	mov	r0, r23
    1150:	16 f4       	brtc	.+4      	; 0x1156 <__divmodhi4+0xa>
    1152:	00 94       	com	r0
    1154:	06 d0       	rcall	.+12     	; 0x1162 <__divmodhi4_neg1>
    1156:	77 fd       	sbrc	r23, 7
    1158:	08 d0       	rcall	.+16     	; 0x116a <__divmodhi4_neg2>
    115a:	27 d0       	rcall	.+78     	; 0x11aa <__udivmodhi4>
    115c:	07 fc       	sbrc	r0, 7
    115e:	05 d0       	rcall	.+10     	; 0x116a <__divmodhi4_neg2>
    1160:	3e f4       	brtc	.+14     	; 0x1170 <__divmodhi4_exit>

00001162 <__divmodhi4_neg1>:
    1162:	90 95       	com	r25
    1164:	81 95       	neg	r24
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	08 95       	ret

0000116a <__divmodhi4_neg2>:
    116a:	70 95       	com	r23
    116c:	61 95       	neg	r22
    116e:	7f 4f       	sbci	r23, 0xFF	; 255

00001170 <__divmodhi4_exit>:
    1170:	08 95       	ret

00001172 <__divmodsi4>:
    1172:	05 2e       	mov	r0, r21
    1174:	97 fb       	bst	r25, 7
    1176:	16 f4       	brtc	.+4      	; 0x117c <__divmodsi4+0xa>
    1178:	00 94       	com	r0
    117a:	0f d0       	rcall	.+30     	; 0x119a <__negsi2>
    117c:	57 fd       	sbrc	r21, 7
    117e:	05 d0       	rcall	.+10     	; 0x118a <__divmodsi4_neg2>
    1180:	28 d0       	rcall	.+80     	; 0x11d2 <__udivmodsi4>
    1182:	07 fc       	sbrc	r0, 7
    1184:	02 d0       	rcall	.+4      	; 0x118a <__divmodsi4_neg2>
    1186:	46 f4       	brtc	.+16     	; 0x1198 <__divmodsi4_exit>
    1188:	08 c0       	rjmp	.+16     	; 0x119a <__negsi2>

0000118a <__divmodsi4_neg2>:
    118a:	50 95       	com	r21
    118c:	40 95       	com	r20
    118e:	30 95       	com	r19
    1190:	21 95       	neg	r18
    1192:	3f 4f       	sbci	r19, 0xFF	; 255
    1194:	4f 4f       	sbci	r20, 0xFF	; 255
    1196:	5f 4f       	sbci	r21, 0xFF	; 255

00001198 <__divmodsi4_exit>:
    1198:	08 95       	ret

0000119a <__negsi2>:
    119a:	90 95       	com	r25
    119c:	80 95       	com	r24
    119e:	70 95       	com	r23
    11a0:	61 95       	neg	r22
    11a2:	7f 4f       	sbci	r23, 0xFF	; 255
    11a4:	8f 4f       	sbci	r24, 0xFF	; 255
    11a6:	9f 4f       	sbci	r25, 0xFF	; 255
    11a8:	08 95       	ret

000011aa <__udivmodhi4>:
    11aa:	aa 1b       	sub	r26, r26
    11ac:	bb 1b       	sub	r27, r27
    11ae:	51 e1       	ldi	r21, 0x11	; 17
    11b0:	07 c0       	rjmp	.+14     	; 0x11c0 <__udivmodhi4_ep>

000011b2 <__udivmodhi4_loop>:
    11b2:	aa 1f       	adc	r26, r26
    11b4:	bb 1f       	adc	r27, r27
    11b6:	a6 17       	cp	r26, r22
    11b8:	b7 07       	cpc	r27, r23
    11ba:	10 f0       	brcs	.+4      	; 0x11c0 <__udivmodhi4_ep>
    11bc:	a6 1b       	sub	r26, r22
    11be:	b7 0b       	sbc	r27, r23

000011c0 <__udivmodhi4_ep>:
    11c0:	88 1f       	adc	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	5a 95       	dec	r21
    11c6:	a9 f7       	brne	.-22     	; 0x11b2 <__udivmodhi4_loop>
    11c8:	80 95       	com	r24
    11ca:	90 95       	com	r25
    11cc:	bc 01       	movw	r22, r24
    11ce:	cd 01       	movw	r24, r26
    11d0:	08 95       	ret

000011d2 <__udivmodsi4>:
    11d2:	a1 e2       	ldi	r26, 0x21	; 33
    11d4:	1a 2e       	mov	r1, r26
    11d6:	aa 1b       	sub	r26, r26
    11d8:	bb 1b       	sub	r27, r27
    11da:	fd 01       	movw	r30, r26
    11dc:	0d c0       	rjmp	.+26     	; 0x11f8 <__udivmodsi4_ep>

000011de <__udivmodsi4_loop>:
    11de:	aa 1f       	adc	r26, r26
    11e0:	bb 1f       	adc	r27, r27
    11e2:	ee 1f       	adc	r30, r30
    11e4:	ff 1f       	adc	r31, r31
    11e6:	a2 17       	cp	r26, r18
    11e8:	b3 07       	cpc	r27, r19
    11ea:	e4 07       	cpc	r30, r20
    11ec:	f5 07       	cpc	r31, r21
    11ee:	20 f0       	brcs	.+8      	; 0x11f8 <__udivmodsi4_ep>
    11f0:	a2 1b       	sub	r26, r18
    11f2:	b3 0b       	sbc	r27, r19
    11f4:	e4 0b       	sbc	r30, r20
    11f6:	f5 0b       	sbc	r31, r21

000011f8 <__udivmodsi4_ep>:
    11f8:	66 1f       	adc	r22, r22
    11fa:	77 1f       	adc	r23, r23
    11fc:	88 1f       	adc	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	1a 94       	dec	r1
    1202:	69 f7       	brne	.-38     	; 0x11de <__udivmodsi4_loop>
    1204:	60 95       	com	r22
    1206:	70 95       	com	r23
    1208:	80 95       	com	r24
    120a:	90 95       	com	r25
    120c:	9b 01       	movw	r18, r22
    120e:	ac 01       	movw	r20, r24
    1210:	bd 01       	movw	r22, r26
    1212:	cf 01       	movw	r24, r30
    1214:	08 95       	ret

00001216 <__itoa_ncheck>:
    1216:	bb 27       	eor	r27, r27
    1218:	4a 30       	cpi	r20, 0x0A	; 10
    121a:	31 f4       	brne	.+12     	; 0x1228 <__itoa_ncheck+0x12>
    121c:	99 23       	and	r25, r25
    121e:	22 f4       	brpl	.+8      	; 0x1228 <__itoa_ncheck+0x12>
    1220:	bd e2       	ldi	r27, 0x2D	; 45
    1222:	90 95       	com	r25
    1224:	81 95       	neg	r24
    1226:	9f 4f       	sbci	r25, 0xFF	; 255
    1228:	01 c0       	rjmp	.+2      	; 0x122c <__utoa_common>

0000122a <__utoa_ncheck>:
    122a:	bb 27       	eor	r27, r27

0000122c <__utoa_common>:
    122c:	fb 01       	movw	r30, r22
    122e:	55 27       	eor	r21, r21
    1230:	aa 27       	eor	r26, r26
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	aa 1f       	adc	r26, r26
    1238:	a4 17       	cp	r26, r20
    123a:	10 f0       	brcs	.+4      	; 0x1240 <__utoa_common+0x14>
    123c:	a4 1b       	sub	r26, r20
    123e:	83 95       	inc	r24
    1240:	50 51       	subi	r21, 0x10	; 16
    1242:	b9 f7       	brne	.-18     	; 0x1232 <__utoa_common+0x6>
    1244:	a0 5d       	subi	r26, 0xD0	; 208
    1246:	aa 33       	cpi	r26, 0x3A	; 58
    1248:	08 f0       	brcs	.+2      	; 0x124c <__utoa_common+0x20>
    124a:	a9 5d       	subi	r26, 0xD9	; 217
    124c:	a1 93       	st	Z+, r26
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	79 f7       	brne	.-34     	; 0x1230 <__utoa_common+0x4>
    1252:	b1 11       	cpse	r27, r1
    1254:	b1 93       	st	Z+, r27
    1256:	11 92       	st	Z+, r1
    1258:	cb 01       	movw	r24, r22
    125a:	e7 c3       	rjmp	.+1998   	; 0x1a2a <strrev>

0000125c <fdevopen>:
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	31 f4       	brne	.+12     	; 0x1274 <fdevopen+0x18>
    1268:	61 15       	cp	r22, r1
    126a:	71 05       	cpc	r23, r1
    126c:	19 f4       	brne	.+6      	; 0x1274 <fdevopen+0x18>
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	39 c0       	rjmp	.+114    	; 0x12e6 <fdevopen+0x8a>
    1274:	8b 01       	movw	r16, r22
    1276:	ec 01       	movw	r28, r24
    1278:	6e e0       	ldi	r22, 0x0E	; 14
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	7c d2       	rcall	.+1272   	; 0x177a <calloc>
    1282:	fc 01       	movw	r30, r24
    1284:	89 2b       	or	r24, r25
    1286:	99 f3       	breq	.-26     	; 0x126e <fdevopen+0x12>
    1288:	80 e8       	ldi	r24, 0x80	; 128
    128a:	83 83       	std	Z+3, r24	; 0x03
    128c:	01 15       	cp	r16, r1
    128e:	11 05       	cpc	r17, r1
    1290:	71 f0       	breq	.+28     	; 0x12ae <fdevopen+0x52>
    1292:	13 87       	std	Z+11, r17	; 0x0b
    1294:	02 87       	std	Z+10, r16	; 0x0a
    1296:	81 e8       	ldi	r24, 0x81	; 129
    1298:	83 83       	std	Z+3, r24	; 0x03
    129a:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <__iob>
    129e:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <__iob+0x1>
    12a2:	89 2b       	or	r24, r25
    12a4:	21 f4       	brne	.+8      	; 0x12ae <fdevopen+0x52>
    12a6:	f0 93 5f 02 	sts	0x025F, r31	; 0x80025f <__iob+0x1>
    12aa:	e0 93 5e 02 	sts	0x025E, r30	; 0x80025e <__iob>
    12ae:	20 97       	sbiw	r28, 0x00	; 0
    12b0:	c9 f0       	breq	.+50     	; 0x12e4 <fdevopen+0x88>
    12b2:	d1 87       	std	Z+9, r29	; 0x09
    12b4:	c0 87       	std	Z+8, r28	; 0x08
    12b6:	83 81       	ldd	r24, Z+3	; 0x03
    12b8:	82 60       	ori	r24, 0x02	; 2
    12ba:	83 83       	std	Z+3, r24	; 0x03
    12bc:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <__iob+0x2>
    12c0:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <__iob+0x3>
    12c4:	89 2b       	or	r24, r25
    12c6:	71 f4       	brne	.+28     	; 0x12e4 <fdevopen+0x88>
    12c8:	f0 93 61 02 	sts	0x0261, r31	; 0x800261 <__iob+0x3>
    12cc:	e0 93 60 02 	sts	0x0260, r30	; 0x800260 <__iob+0x2>
    12d0:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__iob+0x4>
    12d4:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <__iob+0x5>
    12d8:	89 2b       	or	r24, r25
    12da:	21 f4       	brne	.+8      	; 0x12e4 <fdevopen+0x88>
    12dc:	f0 93 63 02 	sts	0x0263, r31	; 0x800263 <__iob+0x5>
    12e0:	e0 93 62 02 	sts	0x0262, r30	; 0x800262 <__iob+0x4>
    12e4:	cf 01       	movw	r24, r30
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	08 95       	ret

000012f0 <printf>:
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	ae 01       	movw	r20, r28
    12fa:	4a 5f       	subi	r20, 0xFA	; 250
    12fc:	5f 4f       	sbci	r21, 0xFF	; 255
    12fe:	fa 01       	movw	r30, r20
    1300:	61 91       	ld	r22, Z+
    1302:	71 91       	ld	r23, Z+
    1304:	af 01       	movw	r20, r30
    1306:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <__iob+0x2>
    130a:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <__iob+0x3>
    130e:	38 d0       	rcall	.+112    	; 0x1380 <vfprintf>
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	08 95       	ret

00001316 <putchar>:
    1316:	60 91 60 02 	lds	r22, 0x0260	; 0x800260 <__iob+0x2>
    131a:	70 91 61 02 	lds	r23, 0x0261	; 0x800261 <__iob+0x3>
    131e:	95 c3       	rjmp	.+1834   	; 0x1a4a <fputc>

00001320 <puts>:
    1320:	0f 93       	push	r16
    1322:	1f 93       	push	r17
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <__iob+0x2>
    132c:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <__iob+0x3>
    1330:	23 81       	ldd	r18, Z+3	; 0x03
    1332:	21 ff       	sbrs	r18, 1
    1334:	1b c0       	rjmp	.+54     	; 0x136c <puts+0x4c>
    1336:	8c 01       	movw	r16, r24
    1338:	d0 e0       	ldi	r29, 0x00	; 0
    133a:	c0 e0       	ldi	r28, 0x00	; 0
    133c:	f8 01       	movw	r30, r16
    133e:	81 91       	ld	r24, Z+
    1340:	8f 01       	movw	r16, r30
    1342:	60 91 60 02 	lds	r22, 0x0260	; 0x800260 <__iob+0x2>
    1346:	70 91 61 02 	lds	r23, 0x0261	; 0x800261 <__iob+0x3>
    134a:	db 01       	movw	r26, r22
    134c:	18 96       	adiw	r26, 0x08	; 8
    134e:	ed 91       	ld	r30, X+
    1350:	fc 91       	ld	r31, X
    1352:	19 97       	sbiw	r26, 0x09	; 9
    1354:	88 23       	and	r24, r24
    1356:	31 f0       	breq	.+12     	; 0x1364 <puts+0x44>
    1358:	19 95       	eicall
    135a:	89 2b       	or	r24, r25
    135c:	79 f3       	breq	.-34     	; 0x133c <puts+0x1c>
    135e:	df ef       	ldi	r29, 0xFF	; 255
    1360:	cf ef       	ldi	r28, 0xFF	; 255
    1362:	ec cf       	rjmp	.-40     	; 0x133c <puts+0x1c>
    1364:	8a e0       	ldi	r24, 0x0A	; 10
    1366:	19 95       	eicall
    1368:	89 2b       	or	r24, r25
    136a:	19 f0       	breq	.+6      	; 0x1372 <puts+0x52>
    136c:	8f ef       	ldi	r24, 0xFF	; 255
    136e:	9f ef       	ldi	r25, 0xFF	; 255
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <puts+0x56>
    1372:	8d 2f       	mov	r24, r29
    1374:	9c 2f       	mov	r25, r28
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	08 95       	ret

00001380 <vfprintf>:
    1380:	2f 92       	push	r2
    1382:	3f 92       	push	r3
    1384:	4f 92       	push	r4
    1386:	5f 92       	push	r5
    1388:	6f 92       	push	r6
    138a:	7f 92       	push	r7
    138c:	8f 92       	push	r8
    138e:	9f 92       	push	r9
    1390:	af 92       	push	r10
    1392:	bf 92       	push	r11
    1394:	cf 92       	push	r12
    1396:	df 92       	push	r13
    1398:	ef 92       	push	r14
    139a:	ff 92       	push	r15
    139c:	0f 93       	push	r16
    139e:	1f 93       	push	r17
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	2b 97       	sbiw	r28, 0x0b	; 11
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	6c 01       	movw	r12, r24
    13b6:	7b 01       	movw	r14, r22
    13b8:	8a 01       	movw	r16, r20
    13ba:	fc 01       	movw	r30, r24
    13bc:	17 82       	std	Z+7, r1	; 0x07
    13be:	16 82       	std	Z+6, r1	; 0x06
    13c0:	83 81       	ldd	r24, Z+3	; 0x03
    13c2:	81 ff       	sbrs	r24, 1
    13c4:	bf c1       	rjmp	.+894    	; 0x1744 <vfprintf+0x3c4>
    13c6:	ce 01       	movw	r24, r28
    13c8:	01 96       	adiw	r24, 0x01	; 1
    13ca:	3c 01       	movw	r6, r24
    13cc:	f6 01       	movw	r30, r12
    13ce:	93 81       	ldd	r25, Z+3	; 0x03
    13d0:	f7 01       	movw	r30, r14
    13d2:	93 fd       	sbrc	r25, 3
    13d4:	85 91       	lpm	r24, Z+
    13d6:	93 ff       	sbrs	r25, 3
    13d8:	81 91       	ld	r24, Z+
    13da:	7f 01       	movw	r14, r30
    13dc:	88 23       	and	r24, r24
    13de:	09 f4       	brne	.+2      	; 0x13e2 <vfprintf+0x62>
    13e0:	ad c1       	rjmp	.+858    	; 0x173c <vfprintf+0x3bc>
    13e2:	85 32       	cpi	r24, 0x25	; 37
    13e4:	39 f4       	brne	.+14     	; 0x13f4 <vfprintf+0x74>
    13e6:	93 fd       	sbrc	r25, 3
    13e8:	85 91       	lpm	r24, Z+
    13ea:	93 ff       	sbrs	r25, 3
    13ec:	81 91       	ld	r24, Z+
    13ee:	7f 01       	movw	r14, r30
    13f0:	85 32       	cpi	r24, 0x25	; 37
    13f2:	21 f4       	brne	.+8      	; 0x13fc <vfprintf+0x7c>
    13f4:	b6 01       	movw	r22, r12
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	28 d3       	rcall	.+1616   	; 0x1a4a <fputc>
    13fa:	e8 cf       	rjmp	.-48     	; 0x13cc <vfprintf+0x4c>
    13fc:	91 2c       	mov	r9, r1
    13fe:	21 2c       	mov	r2, r1
    1400:	31 2c       	mov	r3, r1
    1402:	ff e1       	ldi	r31, 0x1F	; 31
    1404:	f3 15       	cp	r31, r3
    1406:	d8 f0       	brcs	.+54     	; 0x143e <vfprintf+0xbe>
    1408:	8b 32       	cpi	r24, 0x2B	; 43
    140a:	79 f0       	breq	.+30     	; 0x142a <vfprintf+0xaa>
    140c:	38 f4       	brcc	.+14     	; 0x141c <vfprintf+0x9c>
    140e:	80 32       	cpi	r24, 0x20	; 32
    1410:	79 f0       	breq	.+30     	; 0x1430 <vfprintf+0xb0>
    1412:	83 32       	cpi	r24, 0x23	; 35
    1414:	a1 f4       	brne	.+40     	; 0x143e <vfprintf+0xbe>
    1416:	23 2d       	mov	r18, r3
    1418:	20 61       	ori	r18, 0x10	; 16
    141a:	1d c0       	rjmp	.+58     	; 0x1456 <vfprintf+0xd6>
    141c:	8d 32       	cpi	r24, 0x2D	; 45
    141e:	61 f0       	breq	.+24     	; 0x1438 <vfprintf+0xb8>
    1420:	80 33       	cpi	r24, 0x30	; 48
    1422:	69 f4       	brne	.+26     	; 0x143e <vfprintf+0xbe>
    1424:	23 2d       	mov	r18, r3
    1426:	21 60       	ori	r18, 0x01	; 1
    1428:	16 c0       	rjmp	.+44     	; 0x1456 <vfprintf+0xd6>
    142a:	83 2d       	mov	r24, r3
    142c:	82 60       	ori	r24, 0x02	; 2
    142e:	38 2e       	mov	r3, r24
    1430:	e3 2d       	mov	r30, r3
    1432:	e4 60       	ori	r30, 0x04	; 4
    1434:	3e 2e       	mov	r3, r30
    1436:	2a c0       	rjmp	.+84     	; 0x148c <vfprintf+0x10c>
    1438:	f3 2d       	mov	r31, r3
    143a:	f8 60       	ori	r31, 0x08	; 8
    143c:	1d c0       	rjmp	.+58     	; 0x1478 <vfprintf+0xf8>
    143e:	37 fc       	sbrc	r3, 7
    1440:	2d c0       	rjmp	.+90     	; 0x149c <vfprintf+0x11c>
    1442:	20 ed       	ldi	r18, 0xD0	; 208
    1444:	28 0f       	add	r18, r24
    1446:	2a 30       	cpi	r18, 0x0A	; 10
    1448:	40 f0       	brcs	.+16     	; 0x145a <vfprintf+0xda>
    144a:	8e 32       	cpi	r24, 0x2E	; 46
    144c:	b9 f4       	brne	.+46     	; 0x147c <vfprintf+0xfc>
    144e:	36 fc       	sbrc	r3, 6
    1450:	75 c1       	rjmp	.+746    	; 0x173c <vfprintf+0x3bc>
    1452:	23 2d       	mov	r18, r3
    1454:	20 64       	ori	r18, 0x40	; 64
    1456:	32 2e       	mov	r3, r18
    1458:	19 c0       	rjmp	.+50     	; 0x148c <vfprintf+0x10c>
    145a:	36 fe       	sbrs	r3, 6
    145c:	06 c0       	rjmp	.+12     	; 0x146a <vfprintf+0xea>
    145e:	8a e0       	ldi	r24, 0x0A	; 10
    1460:	98 9e       	mul	r9, r24
    1462:	20 0d       	add	r18, r0
    1464:	11 24       	eor	r1, r1
    1466:	92 2e       	mov	r9, r18
    1468:	11 c0       	rjmp	.+34     	; 0x148c <vfprintf+0x10c>
    146a:	ea e0       	ldi	r30, 0x0A	; 10
    146c:	2e 9e       	mul	r2, r30
    146e:	20 0d       	add	r18, r0
    1470:	11 24       	eor	r1, r1
    1472:	22 2e       	mov	r2, r18
    1474:	f3 2d       	mov	r31, r3
    1476:	f0 62       	ori	r31, 0x20	; 32
    1478:	3f 2e       	mov	r3, r31
    147a:	08 c0       	rjmp	.+16     	; 0x148c <vfprintf+0x10c>
    147c:	8c 36       	cpi	r24, 0x6C	; 108
    147e:	21 f4       	brne	.+8      	; 0x1488 <vfprintf+0x108>
    1480:	83 2d       	mov	r24, r3
    1482:	80 68       	ori	r24, 0x80	; 128
    1484:	38 2e       	mov	r3, r24
    1486:	02 c0       	rjmp	.+4      	; 0x148c <vfprintf+0x10c>
    1488:	88 36       	cpi	r24, 0x68	; 104
    148a:	41 f4       	brne	.+16     	; 0x149c <vfprintf+0x11c>
    148c:	f7 01       	movw	r30, r14
    148e:	93 fd       	sbrc	r25, 3
    1490:	85 91       	lpm	r24, Z+
    1492:	93 ff       	sbrs	r25, 3
    1494:	81 91       	ld	r24, Z+
    1496:	7f 01       	movw	r14, r30
    1498:	81 11       	cpse	r24, r1
    149a:	b3 cf       	rjmp	.-154    	; 0x1402 <vfprintf+0x82>
    149c:	98 2f       	mov	r25, r24
    149e:	9f 7d       	andi	r25, 0xDF	; 223
    14a0:	95 54       	subi	r25, 0x45	; 69
    14a2:	93 30       	cpi	r25, 0x03	; 3
    14a4:	28 f4       	brcc	.+10     	; 0x14b0 <vfprintf+0x130>
    14a6:	0c 5f       	subi	r16, 0xFC	; 252
    14a8:	1f 4f       	sbci	r17, 0xFF	; 255
    14aa:	9f e3       	ldi	r25, 0x3F	; 63
    14ac:	99 83       	std	Y+1, r25	; 0x01
    14ae:	0d c0       	rjmp	.+26     	; 0x14ca <vfprintf+0x14a>
    14b0:	83 36       	cpi	r24, 0x63	; 99
    14b2:	31 f0       	breq	.+12     	; 0x14c0 <vfprintf+0x140>
    14b4:	83 37       	cpi	r24, 0x73	; 115
    14b6:	71 f0       	breq	.+28     	; 0x14d4 <vfprintf+0x154>
    14b8:	83 35       	cpi	r24, 0x53	; 83
    14ba:	09 f0       	breq	.+2      	; 0x14be <vfprintf+0x13e>
    14bc:	55 c0       	rjmp	.+170    	; 0x1568 <vfprintf+0x1e8>
    14be:	20 c0       	rjmp	.+64     	; 0x1500 <vfprintf+0x180>
    14c0:	f8 01       	movw	r30, r16
    14c2:	80 81       	ld	r24, Z
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	0e 5f       	subi	r16, 0xFE	; 254
    14c8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ca:	88 24       	eor	r8, r8
    14cc:	83 94       	inc	r8
    14ce:	91 2c       	mov	r9, r1
    14d0:	53 01       	movw	r10, r6
    14d2:	12 c0       	rjmp	.+36     	; 0x14f8 <vfprintf+0x178>
    14d4:	28 01       	movw	r4, r16
    14d6:	f2 e0       	ldi	r31, 0x02	; 2
    14d8:	4f 0e       	add	r4, r31
    14da:	51 1c       	adc	r5, r1
    14dc:	f8 01       	movw	r30, r16
    14de:	a0 80       	ld	r10, Z
    14e0:	b1 80       	ldd	r11, Z+1	; 0x01
    14e2:	36 fe       	sbrs	r3, 6
    14e4:	03 c0       	rjmp	.+6      	; 0x14ec <vfprintf+0x16c>
    14e6:	69 2d       	mov	r22, r9
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <vfprintf+0x170>
    14ec:	6f ef       	ldi	r22, 0xFF	; 255
    14ee:	7f ef       	ldi	r23, 0xFF	; 255
    14f0:	c5 01       	movw	r24, r10
    14f2:	90 d2       	rcall	.+1312   	; 0x1a14 <strnlen>
    14f4:	4c 01       	movw	r8, r24
    14f6:	82 01       	movw	r16, r4
    14f8:	f3 2d       	mov	r31, r3
    14fa:	ff 77       	andi	r31, 0x7F	; 127
    14fc:	3f 2e       	mov	r3, r31
    14fe:	15 c0       	rjmp	.+42     	; 0x152a <vfprintf+0x1aa>
    1500:	28 01       	movw	r4, r16
    1502:	22 e0       	ldi	r18, 0x02	; 2
    1504:	42 0e       	add	r4, r18
    1506:	51 1c       	adc	r5, r1
    1508:	f8 01       	movw	r30, r16
    150a:	a0 80       	ld	r10, Z
    150c:	b1 80       	ldd	r11, Z+1	; 0x01
    150e:	36 fe       	sbrs	r3, 6
    1510:	03 c0       	rjmp	.+6      	; 0x1518 <vfprintf+0x198>
    1512:	69 2d       	mov	r22, r9
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	02 c0       	rjmp	.+4      	; 0x151c <vfprintf+0x19c>
    1518:	6f ef       	ldi	r22, 0xFF	; 255
    151a:	7f ef       	ldi	r23, 0xFF	; 255
    151c:	c5 01       	movw	r24, r10
    151e:	68 d2       	rcall	.+1232   	; 0x19f0 <strnlen_P>
    1520:	4c 01       	movw	r8, r24
    1522:	f3 2d       	mov	r31, r3
    1524:	f0 68       	ori	r31, 0x80	; 128
    1526:	3f 2e       	mov	r3, r31
    1528:	82 01       	movw	r16, r4
    152a:	33 fc       	sbrc	r3, 3
    152c:	19 c0       	rjmp	.+50     	; 0x1560 <vfprintf+0x1e0>
    152e:	82 2d       	mov	r24, r2
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	88 16       	cp	r8, r24
    1534:	99 06       	cpc	r9, r25
    1536:	a0 f4       	brcc	.+40     	; 0x1560 <vfprintf+0x1e0>
    1538:	b6 01       	movw	r22, r12
    153a:	80 e2       	ldi	r24, 0x20	; 32
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	85 d2       	rcall	.+1290   	; 0x1a4a <fputc>
    1540:	2a 94       	dec	r2
    1542:	f5 cf       	rjmp	.-22     	; 0x152e <vfprintf+0x1ae>
    1544:	f5 01       	movw	r30, r10
    1546:	37 fc       	sbrc	r3, 7
    1548:	85 91       	lpm	r24, Z+
    154a:	37 fe       	sbrs	r3, 7
    154c:	81 91       	ld	r24, Z+
    154e:	5f 01       	movw	r10, r30
    1550:	b6 01       	movw	r22, r12
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	7a d2       	rcall	.+1268   	; 0x1a4a <fputc>
    1556:	21 10       	cpse	r2, r1
    1558:	2a 94       	dec	r2
    155a:	21 e0       	ldi	r18, 0x01	; 1
    155c:	82 1a       	sub	r8, r18
    155e:	91 08       	sbc	r9, r1
    1560:	81 14       	cp	r8, r1
    1562:	91 04       	cpc	r9, r1
    1564:	79 f7       	brne	.-34     	; 0x1544 <vfprintf+0x1c4>
    1566:	e1 c0       	rjmp	.+450    	; 0x172a <vfprintf+0x3aa>
    1568:	84 36       	cpi	r24, 0x64	; 100
    156a:	11 f0       	breq	.+4      	; 0x1570 <vfprintf+0x1f0>
    156c:	89 36       	cpi	r24, 0x69	; 105
    156e:	39 f5       	brne	.+78     	; 0x15be <vfprintf+0x23e>
    1570:	f8 01       	movw	r30, r16
    1572:	37 fe       	sbrs	r3, 7
    1574:	07 c0       	rjmp	.+14     	; 0x1584 <vfprintf+0x204>
    1576:	60 81       	ld	r22, Z
    1578:	71 81       	ldd	r23, Z+1	; 0x01
    157a:	82 81       	ldd	r24, Z+2	; 0x02
    157c:	93 81       	ldd	r25, Z+3	; 0x03
    157e:	0c 5f       	subi	r16, 0xFC	; 252
    1580:	1f 4f       	sbci	r17, 0xFF	; 255
    1582:	08 c0       	rjmp	.+16     	; 0x1594 <vfprintf+0x214>
    1584:	60 81       	ld	r22, Z
    1586:	71 81       	ldd	r23, Z+1	; 0x01
    1588:	07 2e       	mov	r0, r23
    158a:	00 0c       	add	r0, r0
    158c:	88 0b       	sbc	r24, r24
    158e:	99 0b       	sbc	r25, r25
    1590:	0e 5f       	subi	r16, 0xFE	; 254
    1592:	1f 4f       	sbci	r17, 0xFF	; 255
    1594:	f3 2d       	mov	r31, r3
    1596:	ff 76       	andi	r31, 0x6F	; 111
    1598:	3f 2e       	mov	r3, r31
    159a:	97 ff       	sbrs	r25, 7
    159c:	09 c0       	rjmp	.+18     	; 0x15b0 <vfprintf+0x230>
    159e:	90 95       	com	r25
    15a0:	80 95       	com	r24
    15a2:	70 95       	com	r23
    15a4:	61 95       	neg	r22
    15a6:	7f 4f       	sbci	r23, 0xFF	; 255
    15a8:	8f 4f       	sbci	r24, 0xFF	; 255
    15aa:	9f 4f       	sbci	r25, 0xFF	; 255
    15ac:	f0 68       	ori	r31, 0x80	; 128
    15ae:	3f 2e       	mov	r3, r31
    15b0:	2a e0       	ldi	r18, 0x0A	; 10
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	a3 01       	movw	r20, r6
    15b6:	85 d2       	rcall	.+1290   	; 0x1ac2 <__ultoa_invert>
    15b8:	88 2e       	mov	r8, r24
    15ba:	86 18       	sub	r8, r6
    15bc:	44 c0       	rjmp	.+136    	; 0x1646 <vfprintf+0x2c6>
    15be:	85 37       	cpi	r24, 0x75	; 117
    15c0:	31 f4       	brne	.+12     	; 0x15ce <vfprintf+0x24e>
    15c2:	23 2d       	mov	r18, r3
    15c4:	2f 7e       	andi	r18, 0xEF	; 239
    15c6:	b2 2e       	mov	r11, r18
    15c8:	2a e0       	ldi	r18, 0x0A	; 10
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	25 c0       	rjmp	.+74     	; 0x1618 <vfprintf+0x298>
    15ce:	93 2d       	mov	r25, r3
    15d0:	99 7f       	andi	r25, 0xF9	; 249
    15d2:	b9 2e       	mov	r11, r25
    15d4:	8f 36       	cpi	r24, 0x6F	; 111
    15d6:	c1 f0       	breq	.+48     	; 0x1608 <vfprintf+0x288>
    15d8:	18 f4       	brcc	.+6      	; 0x15e0 <vfprintf+0x260>
    15da:	88 35       	cpi	r24, 0x58	; 88
    15dc:	79 f0       	breq	.+30     	; 0x15fc <vfprintf+0x27c>
    15de:	ae c0       	rjmp	.+348    	; 0x173c <vfprintf+0x3bc>
    15e0:	80 37       	cpi	r24, 0x70	; 112
    15e2:	19 f0       	breq	.+6      	; 0x15ea <vfprintf+0x26a>
    15e4:	88 37       	cpi	r24, 0x78	; 120
    15e6:	21 f0       	breq	.+8      	; 0x15f0 <vfprintf+0x270>
    15e8:	a9 c0       	rjmp	.+338    	; 0x173c <vfprintf+0x3bc>
    15ea:	e9 2f       	mov	r30, r25
    15ec:	e0 61       	ori	r30, 0x10	; 16
    15ee:	be 2e       	mov	r11, r30
    15f0:	b4 fe       	sbrs	r11, 4
    15f2:	0d c0       	rjmp	.+26     	; 0x160e <vfprintf+0x28e>
    15f4:	fb 2d       	mov	r31, r11
    15f6:	f4 60       	ori	r31, 0x04	; 4
    15f8:	bf 2e       	mov	r11, r31
    15fa:	09 c0       	rjmp	.+18     	; 0x160e <vfprintf+0x28e>
    15fc:	34 fe       	sbrs	r3, 4
    15fe:	0a c0       	rjmp	.+20     	; 0x1614 <vfprintf+0x294>
    1600:	29 2f       	mov	r18, r25
    1602:	26 60       	ori	r18, 0x06	; 6
    1604:	b2 2e       	mov	r11, r18
    1606:	06 c0       	rjmp	.+12     	; 0x1614 <vfprintf+0x294>
    1608:	28 e0       	ldi	r18, 0x08	; 8
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	05 c0       	rjmp	.+10     	; 0x1618 <vfprintf+0x298>
    160e:	20 e1       	ldi	r18, 0x10	; 16
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <vfprintf+0x298>
    1614:	20 e1       	ldi	r18, 0x10	; 16
    1616:	32 e0       	ldi	r19, 0x02	; 2
    1618:	f8 01       	movw	r30, r16
    161a:	b7 fe       	sbrs	r11, 7
    161c:	07 c0       	rjmp	.+14     	; 0x162c <vfprintf+0x2ac>
    161e:	60 81       	ld	r22, Z
    1620:	71 81       	ldd	r23, Z+1	; 0x01
    1622:	82 81       	ldd	r24, Z+2	; 0x02
    1624:	93 81       	ldd	r25, Z+3	; 0x03
    1626:	0c 5f       	subi	r16, 0xFC	; 252
    1628:	1f 4f       	sbci	r17, 0xFF	; 255
    162a:	06 c0       	rjmp	.+12     	; 0x1638 <vfprintf+0x2b8>
    162c:	60 81       	ld	r22, Z
    162e:	71 81       	ldd	r23, Z+1	; 0x01
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	0e 5f       	subi	r16, 0xFE	; 254
    1636:	1f 4f       	sbci	r17, 0xFF	; 255
    1638:	a3 01       	movw	r20, r6
    163a:	43 d2       	rcall	.+1158   	; 0x1ac2 <__ultoa_invert>
    163c:	88 2e       	mov	r8, r24
    163e:	86 18       	sub	r8, r6
    1640:	fb 2d       	mov	r31, r11
    1642:	ff 77       	andi	r31, 0x7F	; 127
    1644:	3f 2e       	mov	r3, r31
    1646:	36 fe       	sbrs	r3, 6
    1648:	0d c0       	rjmp	.+26     	; 0x1664 <vfprintf+0x2e4>
    164a:	23 2d       	mov	r18, r3
    164c:	2e 7f       	andi	r18, 0xFE	; 254
    164e:	a2 2e       	mov	r10, r18
    1650:	89 14       	cp	r8, r9
    1652:	58 f4       	brcc	.+22     	; 0x166a <vfprintf+0x2ea>
    1654:	34 fe       	sbrs	r3, 4
    1656:	0b c0       	rjmp	.+22     	; 0x166e <vfprintf+0x2ee>
    1658:	32 fc       	sbrc	r3, 2
    165a:	09 c0       	rjmp	.+18     	; 0x166e <vfprintf+0x2ee>
    165c:	83 2d       	mov	r24, r3
    165e:	8e 7e       	andi	r24, 0xEE	; 238
    1660:	a8 2e       	mov	r10, r24
    1662:	05 c0       	rjmp	.+10     	; 0x166e <vfprintf+0x2ee>
    1664:	b8 2c       	mov	r11, r8
    1666:	a3 2c       	mov	r10, r3
    1668:	03 c0       	rjmp	.+6      	; 0x1670 <vfprintf+0x2f0>
    166a:	b8 2c       	mov	r11, r8
    166c:	01 c0       	rjmp	.+2      	; 0x1670 <vfprintf+0x2f0>
    166e:	b9 2c       	mov	r11, r9
    1670:	a4 fe       	sbrs	r10, 4
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <vfprintf+0x312>
    1674:	fe 01       	movw	r30, r28
    1676:	e8 0d       	add	r30, r8
    1678:	f1 1d       	adc	r31, r1
    167a:	80 81       	ld	r24, Z
    167c:	80 33       	cpi	r24, 0x30	; 48
    167e:	21 f4       	brne	.+8      	; 0x1688 <vfprintf+0x308>
    1680:	9a 2d       	mov	r25, r10
    1682:	99 7e       	andi	r25, 0xE9	; 233
    1684:	a9 2e       	mov	r10, r25
    1686:	09 c0       	rjmp	.+18     	; 0x169a <vfprintf+0x31a>
    1688:	a2 fe       	sbrs	r10, 2
    168a:	06 c0       	rjmp	.+12     	; 0x1698 <vfprintf+0x318>
    168c:	b3 94       	inc	r11
    168e:	b3 94       	inc	r11
    1690:	04 c0       	rjmp	.+8      	; 0x169a <vfprintf+0x31a>
    1692:	8a 2d       	mov	r24, r10
    1694:	86 78       	andi	r24, 0x86	; 134
    1696:	09 f0       	breq	.+2      	; 0x169a <vfprintf+0x31a>
    1698:	b3 94       	inc	r11
    169a:	a3 fc       	sbrc	r10, 3
    169c:	10 c0       	rjmp	.+32     	; 0x16be <vfprintf+0x33e>
    169e:	a0 fe       	sbrs	r10, 0
    16a0:	06 c0       	rjmp	.+12     	; 0x16ae <vfprintf+0x32e>
    16a2:	b2 14       	cp	r11, r2
    16a4:	80 f4       	brcc	.+32     	; 0x16c6 <vfprintf+0x346>
    16a6:	28 0c       	add	r2, r8
    16a8:	92 2c       	mov	r9, r2
    16aa:	9b 18       	sub	r9, r11
    16ac:	0d c0       	rjmp	.+26     	; 0x16c8 <vfprintf+0x348>
    16ae:	b2 14       	cp	r11, r2
    16b0:	58 f4       	brcc	.+22     	; 0x16c8 <vfprintf+0x348>
    16b2:	b6 01       	movw	r22, r12
    16b4:	80 e2       	ldi	r24, 0x20	; 32
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	c8 d1       	rcall	.+912    	; 0x1a4a <fputc>
    16ba:	b3 94       	inc	r11
    16bc:	f8 cf       	rjmp	.-16     	; 0x16ae <vfprintf+0x32e>
    16be:	b2 14       	cp	r11, r2
    16c0:	18 f4       	brcc	.+6      	; 0x16c8 <vfprintf+0x348>
    16c2:	2b 18       	sub	r2, r11
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <vfprintf+0x34a>
    16c6:	98 2c       	mov	r9, r8
    16c8:	21 2c       	mov	r2, r1
    16ca:	a4 fe       	sbrs	r10, 4
    16cc:	0f c0       	rjmp	.+30     	; 0x16ec <vfprintf+0x36c>
    16ce:	b6 01       	movw	r22, r12
    16d0:	80 e3       	ldi	r24, 0x30	; 48
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	ba d1       	rcall	.+884    	; 0x1a4a <fputc>
    16d6:	a2 fe       	sbrs	r10, 2
    16d8:	16 c0       	rjmp	.+44     	; 0x1706 <vfprintf+0x386>
    16da:	a1 fc       	sbrc	r10, 1
    16dc:	03 c0       	rjmp	.+6      	; 0x16e4 <vfprintf+0x364>
    16de:	88 e7       	ldi	r24, 0x78	; 120
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <vfprintf+0x368>
    16e4:	88 e5       	ldi	r24, 0x58	; 88
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	b6 01       	movw	r22, r12
    16ea:	0c c0       	rjmp	.+24     	; 0x1704 <vfprintf+0x384>
    16ec:	8a 2d       	mov	r24, r10
    16ee:	86 78       	andi	r24, 0x86	; 134
    16f0:	51 f0       	breq	.+20     	; 0x1706 <vfprintf+0x386>
    16f2:	a1 fe       	sbrs	r10, 1
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <vfprintf+0x37a>
    16f6:	8b e2       	ldi	r24, 0x2B	; 43
    16f8:	01 c0       	rjmp	.+2      	; 0x16fc <vfprintf+0x37c>
    16fa:	80 e2       	ldi	r24, 0x20	; 32
    16fc:	a7 fc       	sbrc	r10, 7
    16fe:	8d e2       	ldi	r24, 0x2D	; 45
    1700:	b6 01       	movw	r22, r12
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	a2 d1       	rcall	.+836    	; 0x1a4a <fputc>
    1706:	89 14       	cp	r8, r9
    1708:	30 f4       	brcc	.+12     	; 0x1716 <vfprintf+0x396>
    170a:	b6 01       	movw	r22, r12
    170c:	80 e3       	ldi	r24, 0x30	; 48
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	9c d1       	rcall	.+824    	; 0x1a4a <fputc>
    1712:	9a 94       	dec	r9
    1714:	f8 cf       	rjmp	.-16     	; 0x1706 <vfprintf+0x386>
    1716:	8a 94       	dec	r8
    1718:	f3 01       	movw	r30, r6
    171a:	e8 0d       	add	r30, r8
    171c:	f1 1d       	adc	r31, r1
    171e:	80 81       	ld	r24, Z
    1720:	b6 01       	movw	r22, r12
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	92 d1       	rcall	.+804    	; 0x1a4a <fputc>
    1726:	81 10       	cpse	r8, r1
    1728:	f6 cf       	rjmp	.-20     	; 0x1716 <vfprintf+0x396>
    172a:	22 20       	and	r2, r2
    172c:	09 f4       	brne	.+2      	; 0x1730 <vfprintf+0x3b0>
    172e:	4e ce       	rjmp	.-868    	; 0x13cc <vfprintf+0x4c>
    1730:	b6 01       	movw	r22, r12
    1732:	80 e2       	ldi	r24, 0x20	; 32
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	89 d1       	rcall	.+786    	; 0x1a4a <fputc>
    1738:	2a 94       	dec	r2
    173a:	f7 cf       	rjmp	.-18     	; 0x172a <vfprintf+0x3aa>
    173c:	f6 01       	movw	r30, r12
    173e:	86 81       	ldd	r24, Z+6	; 0x06
    1740:	97 81       	ldd	r25, Z+7	; 0x07
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <vfprintf+0x3c8>
    1744:	8f ef       	ldi	r24, 0xFF	; 255
    1746:	9f ef       	ldi	r25, 0xFF	; 255
    1748:	2b 96       	adiw	r28, 0x0b	; 11
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	1f 91       	pop	r17
    175a:	0f 91       	pop	r16
    175c:	ff 90       	pop	r15
    175e:	ef 90       	pop	r14
    1760:	df 90       	pop	r13
    1762:	cf 90       	pop	r12
    1764:	bf 90       	pop	r11
    1766:	af 90       	pop	r10
    1768:	9f 90       	pop	r9
    176a:	8f 90       	pop	r8
    176c:	7f 90       	pop	r7
    176e:	6f 90       	pop	r6
    1770:	5f 90       	pop	r5
    1772:	4f 90       	pop	r4
    1774:	3f 90       	pop	r3
    1776:	2f 90       	pop	r2
    1778:	08 95       	ret

0000177a <calloc>:
    177a:	0f 93       	push	r16
    177c:	1f 93       	push	r17
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	86 9f       	mul	r24, r22
    1784:	80 01       	movw	r16, r0
    1786:	87 9f       	mul	r24, r23
    1788:	10 0d       	add	r17, r0
    178a:	96 9f       	mul	r25, r22
    178c:	10 0d       	add	r17, r0
    178e:	11 24       	eor	r1, r1
    1790:	c8 01       	movw	r24, r16
    1792:	0d d0       	rcall	.+26     	; 0x17ae <malloc>
    1794:	ec 01       	movw	r28, r24
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	21 f0       	breq	.+8      	; 0x17a2 <calloc+0x28>
    179a:	a8 01       	movw	r20, r16
    179c:	60 e0       	ldi	r22, 0x00	; 0
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	32 d1       	rcall	.+612    	; 0x1a06 <memset>
    17a2:	ce 01       	movw	r24, r28
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	08 95       	ret

000017ae <malloc>:
    17ae:	0f 93       	push	r16
    17b0:	1f 93       	push	r17
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	82 30       	cpi	r24, 0x02	; 2
    17b8:	91 05       	cpc	r25, r1
    17ba:	10 f4       	brcc	.+4      	; 0x17c0 <malloc+0x12>
    17bc:	82 e0       	ldi	r24, 0x02	; 2
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <__flp>
    17c4:	f0 91 67 02 	lds	r31, 0x0267	; 0x800267 <__flp+0x1>
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	a0 e0       	ldi	r26, 0x00	; 0
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	30 97       	sbiw	r30, 0x00	; 0
    17d2:	19 f1       	breq	.+70     	; 0x181a <malloc+0x6c>
    17d4:	40 81       	ld	r20, Z
    17d6:	51 81       	ldd	r21, Z+1	; 0x01
    17d8:	02 81       	ldd	r16, Z+2	; 0x02
    17da:	13 81       	ldd	r17, Z+3	; 0x03
    17dc:	48 17       	cp	r20, r24
    17de:	59 07       	cpc	r21, r25
    17e0:	c8 f0       	brcs	.+50     	; 0x1814 <malloc+0x66>
    17e2:	84 17       	cp	r24, r20
    17e4:	95 07       	cpc	r25, r21
    17e6:	69 f4       	brne	.+26     	; 0x1802 <malloc+0x54>
    17e8:	10 97       	sbiw	r26, 0x00	; 0
    17ea:	31 f0       	breq	.+12     	; 0x17f8 <malloc+0x4a>
    17ec:	12 96       	adiw	r26, 0x02	; 2
    17ee:	0c 93       	st	X, r16
    17f0:	12 97       	sbiw	r26, 0x02	; 2
    17f2:	13 96       	adiw	r26, 0x03	; 3
    17f4:	1c 93       	st	X, r17
    17f6:	27 c0       	rjmp	.+78     	; 0x1846 <malloc+0x98>
    17f8:	00 93 66 02 	sts	0x0266, r16	; 0x800266 <__flp>
    17fc:	10 93 67 02 	sts	0x0267, r17	; 0x800267 <__flp+0x1>
    1800:	22 c0       	rjmp	.+68     	; 0x1846 <malloc+0x98>
    1802:	21 15       	cp	r18, r1
    1804:	31 05       	cpc	r19, r1
    1806:	19 f0       	breq	.+6      	; 0x180e <malloc+0x60>
    1808:	42 17       	cp	r20, r18
    180a:	53 07       	cpc	r21, r19
    180c:	18 f4       	brcc	.+6      	; 0x1814 <malloc+0x66>
    180e:	9a 01       	movw	r18, r20
    1810:	bd 01       	movw	r22, r26
    1812:	ef 01       	movw	r28, r30
    1814:	df 01       	movw	r26, r30
    1816:	f8 01       	movw	r30, r16
    1818:	db cf       	rjmp	.-74     	; 0x17d0 <malloc+0x22>
    181a:	21 15       	cp	r18, r1
    181c:	31 05       	cpc	r19, r1
    181e:	f9 f0       	breq	.+62     	; 0x185e <malloc+0xb0>
    1820:	28 1b       	sub	r18, r24
    1822:	39 0b       	sbc	r19, r25
    1824:	24 30       	cpi	r18, 0x04	; 4
    1826:	31 05       	cpc	r19, r1
    1828:	80 f4       	brcc	.+32     	; 0x184a <malloc+0x9c>
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	9b 81       	ldd	r25, Y+3	; 0x03
    182e:	61 15       	cp	r22, r1
    1830:	71 05       	cpc	r23, r1
    1832:	21 f0       	breq	.+8      	; 0x183c <malloc+0x8e>
    1834:	fb 01       	movw	r30, r22
    1836:	93 83       	std	Z+3, r25	; 0x03
    1838:	82 83       	std	Z+2, r24	; 0x02
    183a:	04 c0       	rjmp	.+8      	; 0x1844 <malloc+0x96>
    183c:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <__flp+0x1>
    1840:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <__flp>
    1844:	fe 01       	movw	r30, r28
    1846:	32 96       	adiw	r30, 0x02	; 2
    1848:	44 c0       	rjmp	.+136    	; 0x18d2 <malloc+0x124>
    184a:	fe 01       	movw	r30, r28
    184c:	e2 0f       	add	r30, r18
    184e:	f3 1f       	adc	r31, r19
    1850:	81 93       	st	Z+, r24
    1852:	91 93       	st	Z+, r25
    1854:	22 50       	subi	r18, 0x02	; 2
    1856:	31 09       	sbc	r19, r1
    1858:	39 83       	std	Y+1, r19	; 0x01
    185a:	28 83       	st	Y, r18
    185c:	3a c0       	rjmp	.+116    	; 0x18d2 <malloc+0x124>
    185e:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <__brkval>
    1862:	30 91 65 02 	lds	r19, 0x0265	; 0x800265 <__brkval+0x1>
    1866:	23 2b       	or	r18, r19
    1868:	41 f4       	brne	.+16     	; 0x187a <malloc+0xcc>
    186a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    186e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1872:	30 93 65 02 	sts	0x0265, r19	; 0x800265 <__brkval+0x1>
    1876:	20 93 64 02 	sts	0x0264, r18	; 0x800264 <__brkval>
    187a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    187e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1882:	21 15       	cp	r18, r1
    1884:	31 05       	cpc	r19, r1
    1886:	41 f4       	brne	.+16     	; 0x1898 <malloc+0xea>
    1888:	2d b7       	in	r18, 0x3d	; 61
    188a:	3e b7       	in	r19, 0x3e	; 62
    188c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1890:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1894:	24 1b       	sub	r18, r20
    1896:	35 0b       	sbc	r19, r21
    1898:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <__brkval>
    189c:	f0 91 65 02 	lds	r31, 0x0265	; 0x800265 <__brkval+0x1>
    18a0:	e2 17       	cp	r30, r18
    18a2:	f3 07       	cpc	r31, r19
    18a4:	a0 f4       	brcc	.+40     	; 0x18ce <malloc+0x120>
    18a6:	2e 1b       	sub	r18, r30
    18a8:	3f 0b       	sbc	r19, r31
    18aa:	28 17       	cp	r18, r24
    18ac:	39 07       	cpc	r19, r25
    18ae:	78 f0       	brcs	.+30     	; 0x18ce <malloc+0x120>
    18b0:	ac 01       	movw	r20, r24
    18b2:	4e 5f       	subi	r20, 0xFE	; 254
    18b4:	5f 4f       	sbci	r21, 0xFF	; 255
    18b6:	24 17       	cp	r18, r20
    18b8:	35 07       	cpc	r19, r21
    18ba:	48 f0       	brcs	.+18     	; 0x18ce <malloc+0x120>
    18bc:	4e 0f       	add	r20, r30
    18be:	5f 1f       	adc	r21, r31
    18c0:	50 93 65 02 	sts	0x0265, r21	; 0x800265 <__brkval+0x1>
    18c4:	40 93 64 02 	sts	0x0264, r20	; 0x800264 <__brkval>
    18c8:	81 93       	st	Z+, r24
    18ca:	91 93       	st	Z+, r25
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <malloc+0x124>
    18ce:	e0 e0       	ldi	r30, 0x00	; 0
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	cf 01       	movw	r24, r30
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	1f 91       	pop	r17
    18da:	0f 91       	pop	r16
    18dc:	08 95       	ret

000018de <free>:
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <free+0xa>
    18e6:	81 c0       	rjmp	.+258    	; 0x19ea <free+0x10c>
    18e8:	fc 01       	movw	r30, r24
    18ea:	32 97       	sbiw	r30, 0x02	; 2
    18ec:	13 82       	std	Z+3, r1	; 0x03
    18ee:	12 82       	std	Z+2, r1	; 0x02
    18f0:	a0 91 66 02 	lds	r26, 0x0266	; 0x800266 <__flp>
    18f4:	b0 91 67 02 	lds	r27, 0x0267	; 0x800267 <__flp+0x1>
    18f8:	10 97       	sbiw	r26, 0x00	; 0
    18fa:	81 f4       	brne	.+32     	; 0x191c <free+0x3e>
    18fc:	20 81       	ld	r18, Z
    18fe:	31 81       	ldd	r19, Z+1	; 0x01
    1900:	82 0f       	add	r24, r18
    1902:	93 1f       	adc	r25, r19
    1904:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <__brkval>
    1908:	30 91 65 02 	lds	r19, 0x0265	; 0x800265 <__brkval+0x1>
    190c:	28 17       	cp	r18, r24
    190e:	39 07       	cpc	r19, r25
    1910:	51 f5       	brne	.+84     	; 0x1966 <free+0x88>
    1912:	f0 93 65 02 	sts	0x0265, r31	; 0x800265 <__brkval+0x1>
    1916:	e0 93 64 02 	sts	0x0264, r30	; 0x800264 <__brkval>
    191a:	67 c0       	rjmp	.+206    	; 0x19ea <free+0x10c>
    191c:	ed 01       	movw	r28, r26
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	ce 17       	cp	r28, r30
    1924:	df 07       	cpc	r29, r31
    1926:	40 f4       	brcc	.+16     	; 0x1938 <free+0x5a>
    1928:	4a 81       	ldd	r20, Y+2	; 0x02
    192a:	5b 81       	ldd	r21, Y+3	; 0x03
    192c:	9e 01       	movw	r18, r28
    192e:	41 15       	cp	r20, r1
    1930:	51 05       	cpc	r21, r1
    1932:	f1 f0       	breq	.+60     	; 0x1970 <free+0x92>
    1934:	ea 01       	movw	r28, r20
    1936:	f5 cf       	rjmp	.-22     	; 0x1922 <free+0x44>
    1938:	d3 83       	std	Z+3, r29	; 0x03
    193a:	c2 83       	std	Z+2, r28	; 0x02
    193c:	40 81       	ld	r20, Z
    193e:	51 81       	ldd	r21, Z+1	; 0x01
    1940:	84 0f       	add	r24, r20
    1942:	95 1f       	adc	r25, r21
    1944:	c8 17       	cp	r28, r24
    1946:	d9 07       	cpc	r29, r25
    1948:	59 f4       	brne	.+22     	; 0x1960 <free+0x82>
    194a:	88 81       	ld	r24, Y
    194c:	99 81       	ldd	r25, Y+1	; 0x01
    194e:	84 0f       	add	r24, r20
    1950:	95 1f       	adc	r25, r21
    1952:	02 96       	adiw	r24, 0x02	; 2
    1954:	91 83       	std	Z+1, r25	; 0x01
    1956:	80 83       	st	Z, r24
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	9b 81       	ldd	r25, Y+3	; 0x03
    195c:	93 83       	std	Z+3, r25	; 0x03
    195e:	82 83       	std	Z+2, r24	; 0x02
    1960:	21 15       	cp	r18, r1
    1962:	31 05       	cpc	r19, r1
    1964:	29 f4       	brne	.+10     	; 0x1970 <free+0x92>
    1966:	f0 93 67 02 	sts	0x0267, r31	; 0x800267 <__flp+0x1>
    196a:	e0 93 66 02 	sts	0x0266, r30	; 0x800266 <__flp>
    196e:	3d c0       	rjmp	.+122    	; 0x19ea <free+0x10c>
    1970:	e9 01       	movw	r28, r18
    1972:	fb 83       	std	Y+3, r31	; 0x03
    1974:	ea 83       	std	Y+2, r30	; 0x02
    1976:	49 91       	ld	r20, Y+
    1978:	59 91       	ld	r21, Y+
    197a:	c4 0f       	add	r28, r20
    197c:	d5 1f       	adc	r29, r21
    197e:	ec 17       	cp	r30, r28
    1980:	fd 07       	cpc	r31, r29
    1982:	61 f4       	brne	.+24     	; 0x199c <free+0xbe>
    1984:	80 81       	ld	r24, Z
    1986:	91 81       	ldd	r25, Z+1	; 0x01
    1988:	84 0f       	add	r24, r20
    198a:	95 1f       	adc	r25, r21
    198c:	02 96       	adiw	r24, 0x02	; 2
    198e:	e9 01       	movw	r28, r18
    1990:	99 83       	std	Y+1, r25	; 0x01
    1992:	88 83       	st	Y, r24
    1994:	82 81       	ldd	r24, Z+2	; 0x02
    1996:	93 81       	ldd	r25, Z+3	; 0x03
    1998:	9b 83       	std	Y+3, r25	; 0x03
    199a:	8a 83       	std	Y+2, r24	; 0x02
    199c:	e0 e0       	ldi	r30, 0x00	; 0
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	12 96       	adiw	r26, 0x02	; 2
    19a2:	8d 91       	ld	r24, X+
    19a4:	9c 91       	ld	r25, X
    19a6:	13 97       	sbiw	r26, 0x03	; 3
    19a8:	00 97       	sbiw	r24, 0x00	; 0
    19aa:	19 f0       	breq	.+6      	; 0x19b2 <free+0xd4>
    19ac:	fd 01       	movw	r30, r26
    19ae:	dc 01       	movw	r26, r24
    19b0:	f7 cf       	rjmp	.-18     	; 0x19a0 <free+0xc2>
    19b2:	8d 91       	ld	r24, X+
    19b4:	9c 91       	ld	r25, X
    19b6:	11 97       	sbiw	r26, 0x01	; 1
    19b8:	9d 01       	movw	r18, r26
    19ba:	2e 5f       	subi	r18, 0xFE	; 254
    19bc:	3f 4f       	sbci	r19, 0xFF	; 255
    19be:	82 0f       	add	r24, r18
    19c0:	93 1f       	adc	r25, r19
    19c2:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <__brkval>
    19c6:	30 91 65 02 	lds	r19, 0x0265	; 0x800265 <__brkval+0x1>
    19ca:	28 17       	cp	r18, r24
    19cc:	39 07       	cpc	r19, r25
    19ce:	69 f4       	brne	.+26     	; 0x19ea <free+0x10c>
    19d0:	30 97       	sbiw	r30, 0x00	; 0
    19d2:	29 f4       	brne	.+10     	; 0x19de <free+0x100>
    19d4:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <__flp+0x1>
    19d8:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <__flp>
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <free+0x104>
    19de:	13 82       	std	Z+3, r1	; 0x03
    19e0:	12 82       	std	Z+2, r1	; 0x02
    19e2:	b0 93 65 02 	sts	0x0265, r27	; 0x800265 <__brkval+0x1>
    19e6:	a0 93 64 02 	sts	0x0264, r26	; 0x800264 <__brkval>
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	08 95       	ret

000019f0 <strnlen_P>:
    19f0:	fc 01       	movw	r30, r24
    19f2:	05 90       	lpm	r0, Z+
    19f4:	61 50       	subi	r22, 0x01	; 1
    19f6:	70 40       	sbci	r23, 0x00	; 0
    19f8:	01 10       	cpse	r0, r1
    19fa:	d8 f7       	brcc	.-10     	; 0x19f2 <strnlen_P+0x2>
    19fc:	80 95       	com	r24
    19fe:	90 95       	com	r25
    1a00:	8e 0f       	add	r24, r30
    1a02:	9f 1f       	adc	r25, r31
    1a04:	08 95       	ret

00001a06 <memset>:
    1a06:	dc 01       	movw	r26, r24
    1a08:	01 c0       	rjmp	.+2      	; 0x1a0c <memset+0x6>
    1a0a:	6d 93       	st	X+, r22
    1a0c:	41 50       	subi	r20, 0x01	; 1
    1a0e:	50 40       	sbci	r21, 0x00	; 0
    1a10:	e0 f7       	brcc	.-8      	; 0x1a0a <memset+0x4>
    1a12:	08 95       	ret

00001a14 <strnlen>:
    1a14:	fc 01       	movw	r30, r24
    1a16:	61 50       	subi	r22, 0x01	; 1
    1a18:	70 40       	sbci	r23, 0x00	; 0
    1a1a:	01 90       	ld	r0, Z+
    1a1c:	01 10       	cpse	r0, r1
    1a1e:	d8 f7       	brcc	.-10     	; 0x1a16 <strnlen+0x2>
    1a20:	80 95       	com	r24
    1a22:	90 95       	com	r25
    1a24:	8e 0f       	add	r24, r30
    1a26:	9f 1f       	adc	r25, r31
    1a28:	08 95       	ret

00001a2a <strrev>:
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	67 2f       	mov	r22, r23
    1a30:	71 91       	ld	r23, Z+
    1a32:	77 23       	and	r23, r23
    1a34:	e1 f7       	brne	.-8      	; 0x1a2e <strrev+0x4>
    1a36:	32 97       	sbiw	r30, 0x02	; 2
    1a38:	04 c0       	rjmp	.+8      	; 0x1a42 <strrev+0x18>
    1a3a:	7c 91       	ld	r23, X
    1a3c:	6d 93       	st	X+, r22
    1a3e:	70 83       	st	Z, r23
    1a40:	62 91       	ld	r22, -Z
    1a42:	ae 17       	cp	r26, r30
    1a44:	bf 07       	cpc	r27, r31
    1a46:	c8 f3       	brcs	.-14     	; 0x1a3a <strrev+0x10>
    1a48:	08 95       	ret

00001a4a <fputc>:
    1a4a:	0f 93       	push	r16
    1a4c:	1f 93       	push	r17
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
    1a52:	fb 01       	movw	r30, r22
    1a54:	23 81       	ldd	r18, Z+3	; 0x03
    1a56:	21 fd       	sbrc	r18, 1
    1a58:	03 c0       	rjmp	.+6      	; 0x1a60 <fputc+0x16>
    1a5a:	8f ef       	ldi	r24, 0xFF	; 255
    1a5c:	9f ef       	ldi	r25, 0xFF	; 255
    1a5e:	2c c0       	rjmp	.+88     	; 0x1ab8 <fputc+0x6e>
    1a60:	22 ff       	sbrs	r18, 2
    1a62:	16 c0       	rjmp	.+44     	; 0x1a90 <fputc+0x46>
    1a64:	46 81       	ldd	r20, Z+6	; 0x06
    1a66:	57 81       	ldd	r21, Z+7	; 0x07
    1a68:	24 81       	ldd	r18, Z+4	; 0x04
    1a6a:	35 81       	ldd	r19, Z+5	; 0x05
    1a6c:	42 17       	cp	r20, r18
    1a6e:	53 07       	cpc	r21, r19
    1a70:	44 f4       	brge	.+16     	; 0x1a82 <fputc+0x38>
    1a72:	a0 81       	ld	r26, Z
    1a74:	b1 81       	ldd	r27, Z+1	; 0x01
    1a76:	9d 01       	movw	r18, r26
    1a78:	2f 5f       	subi	r18, 0xFF	; 255
    1a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7c:	31 83       	std	Z+1, r19	; 0x01
    1a7e:	20 83       	st	Z, r18
    1a80:	8c 93       	st	X, r24
    1a82:	26 81       	ldd	r18, Z+6	; 0x06
    1a84:	37 81       	ldd	r19, Z+7	; 0x07
    1a86:	2f 5f       	subi	r18, 0xFF	; 255
    1a88:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8a:	37 83       	std	Z+7, r19	; 0x07
    1a8c:	26 83       	std	Z+6, r18	; 0x06
    1a8e:	14 c0       	rjmp	.+40     	; 0x1ab8 <fputc+0x6e>
    1a90:	8b 01       	movw	r16, r22
    1a92:	ec 01       	movw	r28, r24
    1a94:	fb 01       	movw	r30, r22
    1a96:	00 84       	ldd	r0, Z+8	; 0x08
    1a98:	f1 85       	ldd	r31, Z+9	; 0x09
    1a9a:	e0 2d       	mov	r30, r0
    1a9c:	19 95       	eicall
    1a9e:	89 2b       	or	r24, r25
    1aa0:	e1 f6       	brne	.-72     	; 0x1a5a <fputc+0x10>
    1aa2:	d8 01       	movw	r26, r16
    1aa4:	16 96       	adiw	r26, 0x06	; 6
    1aa6:	8d 91       	ld	r24, X+
    1aa8:	9c 91       	ld	r25, X
    1aaa:	17 97       	sbiw	r26, 0x07	; 7
    1aac:	01 96       	adiw	r24, 0x01	; 1
    1aae:	17 96       	adiw	r26, 0x07	; 7
    1ab0:	9c 93       	st	X, r25
    1ab2:	8e 93       	st	-X, r24
    1ab4:	16 97       	sbiw	r26, 0x06	; 6
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	1f 91       	pop	r17
    1abe:	0f 91       	pop	r16
    1ac0:	08 95       	ret

00001ac2 <__ultoa_invert>:
    1ac2:	fa 01       	movw	r30, r20
    1ac4:	aa 27       	eor	r26, r26
    1ac6:	28 30       	cpi	r18, 0x08	; 8
    1ac8:	51 f1       	breq	.+84     	; 0x1b1e <__ultoa_invert+0x5c>
    1aca:	20 31       	cpi	r18, 0x10	; 16
    1acc:	81 f1       	breq	.+96     	; 0x1b2e <__ultoa_invert+0x6c>
    1ace:	e8 94       	clt
    1ad0:	6f 93       	push	r22
    1ad2:	6e 7f       	andi	r22, 0xFE	; 254
    1ad4:	6e 5f       	subi	r22, 0xFE	; 254
    1ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad8:	8f 4f       	sbci	r24, 0xFF	; 255
    1ada:	9f 4f       	sbci	r25, 0xFF	; 255
    1adc:	af 4f       	sbci	r26, 0xFF	; 255
    1ade:	b1 e0       	ldi	r27, 0x01	; 1
    1ae0:	3e d0       	rcall	.+124    	; 0x1b5e <__ultoa_invert+0x9c>
    1ae2:	b4 e0       	ldi	r27, 0x04	; 4
    1ae4:	3c d0       	rcall	.+120    	; 0x1b5e <__ultoa_invert+0x9c>
    1ae6:	67 0f       	add	r22, r23
    1ae8:	78 1f       	adc	r23, r24
    1aea:	89 1f       	adc	r24, r25
    1aec:	9a 1f       	adc	r25, r26
    1aee:	a1 1d       	adc	r26, r1
    1af0:	68 0f       	add	r22, r24
    1af2:	79 1f       	adc	r23, r25
    1af4:	8a 1f       	adc	r24, r26
    1af6:	91 1d       	adc	r25, r1
    1af8:	a1 1d       	adc	r26, r1
    1afa:	6a 0f       	add	r22, r26
    1afc:	71 1d       	adc	r23, r1
    1afe:	81 1d       	adc	r24, r1
    1b00:	91 1d       	adc	r25, r1
    1b02:	a1 1d       	adc	r26, r1
    1b04:	20 d0       	rcall	.+64     	; 0x1b46 <__ultoa_invert+0x84>
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <__ultoa_invert+0x48>
    1b08:	68 94       	set
    1b0a:	3f 91       	pop	r19
    1b0c:	2a e0       	ldi	r18, 0x0A	; 10
    1b0e:	26 9f       	mul	r18, r22
    1b10:	11 24       	eor	r1, r1
    1b12:	30 19       	sub	r19, r0
    1b14:	30 5d       	subi	r19, 0xD0	; 208
    1b16:	31 93       	st	Z+, r19
    1b18:	de f6       	brtc	.-74     	; 0x1ad0 <__ultoa_invert+0xe>
    1b1a:	cf 01       	movw	r24, r30
    1b1c:	08 95       	ret
    1b1e:	46 2f       	mov	r20, r22
    1b20:	47 70       	andi	r20, 0x07	; 7
    1b22:	40 5d       	subi	r20, 0xD0	; 208
    1b24:	41 93       	st	Z+, r20
    1b26:	b3 e0       	ldi	r27, 0x03	; 3
    1b28:	0f d0       	rcall	.+30     	; 0x1b48 <__ultoa_invert+0x86>
    1b2a:	c9 f7       	brne	.-14     	; 0x1b1e <__ultoa_invert+0x5c>
    1b2c:	f6 cf       	rjmp	.-20     	; 0x1b1a <__ultoa_invert+0x58>
    1b2e:	46 2f       	mov	r20, r22
    1b30:	4f 70       	andi	r20, 0x0F	; 15
    1b32:	40 5d       	subi	r20, 0xD0	; 208
    1b34:	4a 33       	cpi	r20, 0x3A	; 58
    1b36:	18 f0       	brcs	.+6      	; 0x1b3e <__ultoa_invert+0x7c>
    1b38:	49 5d       	subi	r20, 0xD9	; 217
    1b3a:	31 fd       	sbrc	r19, 1
    1b3c:	40 52       	subi	r20, 0x20	; 32
    1b3e:	41 93       	st	Z+, r20
    1b40:	02 d0       	rcall	.+4      	; 0x1b46 <__ultoa_invert+0x84>
    1b42:	a9 f7       	brne	.-22     	; 0x1b2e <__ultoa_invert+0x6c>
    1b44:	ea cf       	rjmp	.-44     	; 0x1b1a <__ultoa_invert+0x58>
    1b46:	b4 e0       	ldi	r27, 0x04	; 4
    1b48:	a6 95       	lsr	r26
    1b4a:	97 95       	ror	r25
    1b4c:	87 95       	ror	r24
    1b4e:	77 95       	ror	r23
    1b50:	67 95       	ror	r22
    1b52:	ba 95       	dec	r27
    1b54:	c9 f7       	brne	.-14     	; 0x1b48 <__ultoa_invert+0x86>
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	61 05       	cpc	r22, r1
    1b5a:	71 05       	cpc	r23, r1
    1b5c:	08 95       	ret
    1b5e:	9b 01       	movw	r18, r22
    1b60:	ac 01       	movw	r20, r24
    1b62:	0a 2e       	mov	r0, r26
    1b64:	06 94       	lsr	r0
    1b66:	57 95       	ror	r21
    1b68:	47 95       	ror	r20
    1b6a:	37 95       	ror	r19
    1b6c:	27 95       	ror	r18
    1b6e:	ba 95       	dec	r27
    1b70:	c9 f7       	brne	.-14     	; 0x1b64 <__ultoa_invert+0xa2>
    1b72:	62 0f       	add	r22, r18
    1b74:	73 1f       	adc	r23, r19
    1b76:	84 1f       	adc	r24, r20
    1b78:	95 1f       	adc	r25, r21
    1b7a:	a0 1d       	adc	r26, r0
    1b7c:	08 95       	ret

00001b7e <_exit>:
    1b7e:	f8 94       	cli

00001b80 <__stop_program>:
    1b80:	ff cf       	rjmp	.-2      	; 0x1b80 <__stop_program>
