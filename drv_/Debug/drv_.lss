
drv_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000cc  00800200  00002036  000020ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002036  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002f7  008002cc  008002cc  00002196  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002196  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00002234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000288e  00000000  00000000  000023f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013ac  00000000  00000000  00004c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011c7  00000000  00000000  0000602e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000053c  00000000  00000000  000071f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b7e  00000000  00000000  00007734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000181f  00000000  00000000  000082b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00009ad1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9e c0       	rjmp	.+316    	; 0x13e <__ctors_end>
       2:	00 00       	nop
       4:	bc c0       	rjmp	.+376    	; 0x17e <__bad_interrupt>
       6:	00 00       	nop
       8:	ba c0       	rjmp	.+372    	; 0x17e <__bad_interrupt>
       a:	00 00       	nop
       c:	b8 c0       	rjmp	.+368    	; 0x17e <__bad_interrupt>
       e:	00 00       	nop
      10:	b6 c0       	rjmp	.+364    	; 0x17e <__bad_interrupt>
      12:	00 00       	nop
      14:	b4 c0       	rjmp	.+360    	; 0x17e <__bad_interrupt>
      16:	00 00       	nop
      18:	b2 c0       	rjmp	.+356    	; 0x17e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b0 c0       	rjmp	.+352    	; 0x17e <__bad_interrupt>
      1e:	00 00       	nop
      20:	ae c0       	rjmp	.+348    	; 0x17e <__bad_interrupt>
      22:	00 00       	nop
      24:	ac c0       	rjmp	.+344    	; 0x17e <__bad_interrupt>
      26:	00 00       	nop
      28:	aa c0       	rjmp	.+340    	; 0x17e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a8 c0       	rjmp	.+336    	; 0x17e <__bad_interrupt>
      2e:	00 00       	nop
      30:	a6 c0       	rjmp	.+332    	; 0x17e <__bad_interrupt>
      32:	00 00       	nop
      34:	a4 c0       	rjmp	.+328    	; 0x17e <__bad_interrupt>
      36:	00 00       	nop
      38:	a2 c0       	rjmp	.+324    	; 0x17e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a0 c0       	rjmp	.+320    	; 0x17e <__bad_interrupt>
      3e:	00 00       	nop
      40:	9e c0       	rjmp	.+316    	; 0x17e <__bad_interrupt>
      42:	00 00       	nop
      44:	9c c0       	rjmp	.+312    	; 0x17e <__bad_interrupt>
      46:	00 00       	nop
      48:	9a c0       	rjmp	.+308    	; 0x17e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	98 c0       	rjmp	.+304    	; 0x17e <__bad_interrupt>
      4e:	00 00       	nop
      50:	96 c0       	rjmp	.+300    	; 0x17e <__bad_interrupt>
      52:	00 00       	nop
      54:	94 c0       	rjmp	.+296    	; 0x17e <__bad_interrupt>
      56:	00 00       	nop
      58:	92 c0       	rjmp	.+292    	; 0x17e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c1       	rjmp	.+620    	; 0x2ca <__vector_23>
      5e:	00 00       	nop
      60:	8e c0       	rjmp	.+284    	; 0x17e <__bad_interrupt>
      62:	00 00       	nop
      64:	8c c0       	rjmp	.+280    	; 0x17e <__bad_interrupt>
      66:	00 00       	nop
      68:	8a c0       	rjmp	.+276    	; 0x17e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	88 c0       	rjmp	.+272    	; 0x17e <__bad_interrupt>
      6e:	00 00       	nop
      70:	86 c0       	rjmp	.+268    	; 0x17e <__bad_interrupt>
      72:	00 00       	nop
      74:	84 c0       	rjmp	.+264    	; 0x17e <__bad_interrupt>
      76:	00 00       	nop
      78:	82 c0       	rjmp	.+260    	; 0x17e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	80 c0       	rjmp	.+256    	; 0x17e <__bad_interrupt>
      7e:	00 00       	nop
      80:	7e c0       	rjmp	.+252    	; 0x17e <__bad_interrupt>
      82:	00 00       	nop
      84:	7c c0       	rjmp	.+248    	; 0x17e <__bad_interrupt>
      86:	00 00       	nop
      88:	7a c0       	rjmp	.+244    	; 0x17e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	78 c0       	rjmp	.+240    	; 0x17e <__bad_interrupt>
      8e:	00 00       	nop
      90:	76 c0       	rjmp	.+236    	; 0x17e <__bad_interrupt>
      92:	00 00       	nop
      94:	74 c0       	rjmp	.+232    	; 0x17e <__bad_interrupt>
      96:	00 00       	nop
      98:	72 c0       	rjmp	.+228    	; 0x17e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	70 c0       	rjmp	.+224    	; 0x17e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6e c0       	rjmp	.+220    	; 0x17e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6c c0       	rjmp	.+216    	; 0x17e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6a c0       	rjmp	.+212    	; 0x17e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	68 c0       	rjmp	.+208    	; 0x17e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	66 c0       	rjmp	.+204    	; 0x17e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	64 c0       	rjmp	.+200    	; 0x17e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	62 c0       	rjmp	.+196    	; 0x17e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	f8 c1       	rjmp	.+1008   	; 0x4ae <__vector_47>
      be:	00 00       	nop
      c0:	5e c0       	rjmp	.+188    	; 0x17e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	5c c0       	rjmp	.+184    	; 0x17e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	5a c0       	rjmp	.+180    	; 0x17e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	58 c0       	rjmp	.+176    	; 0x17e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	56 c0       	rjmp	.+172    	; 0x17e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	54 c0       	rjmp	.+168    	; 0x17e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	52 c0       	rjmp	.+164    	; 0x17e <__bad_interrupt>
      da:	00 00       	nop
      dc:	50 c0       	rjmp	.+160    	; 0x17e <__bad_interrupt>
      de:	00 00       	nop
      e0:	4e c0       	rjmp	.+156    	; 0x17e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	03 6e       	ori	r16, 0xE3	; 227
      e6:	db 36       	cpi	r29, 0x6B	; 107
      e8:	3d 9a       	sbi	0x07, 5	; 7
      ea:	99 99       	sbic	0x13, 1	; 19
      ec:	99 3d       	cpi	r25, 0xD9	; 217
      ee:	ab aa       	std	Y+51, r10	; 0x33
      f0:	aa 2a       	or	r10, r26
      f2:	3e 00       	.word	0x003e	; ????
      f4:	00 00       	nop
      f6:	80 3f       	cpi	r24, 0xF0	; 240
      f8:	07 2c       	mov	r0, r7
      fa:	7a a5       	ldd	r23, Y+42	; 0x2a
      fc:	ba 6c       	ori	r27, 0xCA	; 202
      fe:	c5 90       	lpm	r12, Z+
     100:	da 3b       	cpi	r29, 0xBA	; 186
     102:	93 65       	ori	r25, 0x53	; 83
     104:	fc 8b       	std	Y+20, r31	; 0x14
     106:	bc 53       	subi	r27, 0x3C	; 60
     108:	f8 10       	cpse	r15, r8
     10a:	fd 3c       	cpi	r31, 0xCD	; 205
     10c:	56 92       	lac	Z, r5
     10e:	83 4d       	sbci	r24, 0xD3	; 211
     110:	bd 87       	std	Y+13, r27	; 0x0d
     112:	9d 3a       	cpi	r25, 0xAD	; 173
     114:	b6 3d       	cpi	r27, 0xD6	; 214
     116:	cb c9       	rjmp	.-3178   	; 0xfffff4ae <__eeprom_end+0xff7ef4ae>
     118:	bf 5b       	subi	r27, 0xBF	; 191
     11a:	be 73       	andi	r27, 0x3E	; 62
     11c:	da 0f       	add	r29, r26
     11e:	c9 3f       	cpi	r28, 0xF9	; 249
     120:	05 a8       	ldd	r0, Z+53	; 0x35
     122:	4c cd       	rjmp	.-1384   	; 0xfffffbbc <__eeprom_end+0xff7efbbc>
     124:	b2 d4       	rcall	.+2404   	; 0xa8a <mpu6050_readByte+0x1c>
     126:	4e b9       	out	0x0e, r20	; 14
     128:	38 36       	cpi	r19, 0x68	; 104
     12a:	a9 02       	muls	r26, r25
     12c:	0c 50       	subi	r16, 0x0C	; 12
     12e:	b9 91       	ld	r27, Y+
     130:	86 88       	ldd	r8, Z+22	; 0x16
     132:	08 3c       	cpi	r16, 0xC8	; 200
     134:	a6 aa       	std	Z+54, r10	; 0x36
     136:	aa 2a       	or	r10, r26
     138:	be 00       	.word	0x00be	; ????
     13a:	00 00       	nop
     13c:	80 3f       	cpi	r24, 0xF0	; 240

0000013e <__ctors_end>:
     13e:	11 24       	eor	r1, r1
     140:	1f be       	out	0x3f, r1	; 63
     142:	cf ef       	ldi	r28, 0xFF	; 255
     144:	d1 e2       	ldi	r29, 0x21	; 33
     146:	de bf       	out	0x3e, r29	; 62
     148:	cd bf       	out	0x3d, r28	; 61
     14a:	00 e0       	ldi	r16, 0x00	; 0
     14c:	0c bf       	out	0x3c, r16	; 60

0000014e <__do_copy_data>:
     14e:	12 e0       	ldi	r17, 0x02	; 2
     150:	a0 e0       	ldi	r26, 0x00	; 0
     152:	b2 e0       	ldi	r27, 0x02	; 2
     154:	e6 e3       	ldi	r30, 0x36	; 54
     156:	f0 e2       	ldi	r31, 0x20	; 32
     158:	00 e0       	ldi	r16, 0x00	; 0
     15a:	0b bf       	out	0x3b, r16	; 59
     15c:	02 c0       	rjmp	.+4      	; 0x162 <__do_copy_data+0x14>
     15e:	07 90       	elpm	r0, Z+
     160:	0d 92       	st	X+, r0
     162:	ac 3c       	cpi	r26, 0xCC	; 204
     164:	b1 07       	cpc	r27, r17
     166:	d9 f7       	brne	.-10     	; 0x15e <__do_copy_data+0x10>

00000168 <__do_clear_bss>:
     168:	25 e0       	ldi	r18, 0x05	; 5
     16a:	ac ec       	ldi	r26, 0xCC	; 204
     16c:	b2 e0       	ldi	r27, 0x02	; 2
     16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
     170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
     172:	a3 3c       	cpi	r26, 0xC3	; 195
     174:	b2 07       	cpc	r27, r18
     176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
     178:	13 d2       	rcall	.+1062   	; 0x5a0 <main>
     17a:	0c 94 19 10 	jmp	0x2032	; 0x2032 <_exit>

0000017e <__bad_interrupt>:
     17e:	40 cf       	rjmp	.-384    	; 0x0 <__vectors>

00000180 <init_gpio>:
	*/
	//DDRB|=(1<<PB5);//LED13
	//sbi(DDRB,4);//digital 10
	//sbi(DDRB,5);//digital 11
	//sbi(DDRB,6);//digital 12
	sbi(DDRH,3);//digital 6 OC4A
     180:	e1 e0       	ldi	r30, 0x01	; 1
     182:	f1 e0       	ldi	r31, 0x01	; 1
     184:	80 81       	ld	r24, Z
     186:	88 60       	ori	r24, 0x08	; 8
     188:	80 83       	st	Z, r24
	sbi(DDRH,4);//digital 7 OC4B
     18a:	80 81       	ld	r24, Z
     18c:	80 61       	ori	r24, 0x10	; 16
     18e:	80 83       	st	Z, r24
	sbi(DDRH,5);//digital 8 OC4C
     190:	80 81       	ld	r24, Z
     192:	80 62       	ori	r24, 0x20	; 32
     194:	80 83       	st	Z, r24
     196:	08 95       	ret

00000198 <getSinTable>:
	//sbi(DDRH,6);//digital 9
}
void getSinTable(uint16_t sinTableSize,uint8_t *pwmSin,uint16_t sineScale)
{
     198:	4f 92       	push	r4
     19a:	5f 92       	push	r5
     19c:	6f 92       	push	r6
     19e:	7f 92       	push	r7
     1a0:	8f 92       	push	r8
     1a2:	9f 92       	push	r9
     1a4:	af 92       	push	r10
     1a6:	bf 92       	push	r11
     1a8:	cf 92       	push	r12
     1aa:	df 92       	push	r13
     1ac:	ef 92       	push	r14
     1ae:	ff 92       	push	r15
     1b0:	0f 93       	push	r16
     1b2:	1f 93       	push	r17
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	2a 97       	sbiw	r28, 0x0a	; 10
     1be:	0f b6       	in	r0, 0x3f	; 63
     1c0:	f8 94       	cli
     1c2:	de bf       	out	0x3e, r29	; 62
     1c4:	0f be       	out	0x3f, r0	; 63
     1c6:	cd bf       	out	0x3d, r28	; 61
	for (int i = 0; i < sinTableSize; i++)
     1c8:	00 97       	sbiw	r24, 0x00	; 0
     1ca:	09 f4       	brne	.+2      	; 0x1ce <getSinTable+0x36>
     1cc:	56 c0       	rjmp	.+172    	; 0x27a <getSinTable+0xe2>
     1ce:	a6 2e       	mov	r10, r22
     1d0:	b7 2e       	mov	r11, r23
     1d2:	4c 01       	movw	r8, r24
     1d4:	00 e0       	ldi	r16, 0x00	; 0
     1d6:	10 e0       	ldi	r17, 0x00	; 0
	{
		double x = i * (2 * pi) / sinTableSize;
		pwmSin[i] = (sin(x) * sineScale) + sineScale;
     1d8:	6c 01       	movw	r12, r24
     1da:	e1 2c       	mov	r14, r1
     1dc:	f1 2c       	mov	r15, r1
     1de:	cb 82       	std	Y+3, r12	; 0x03
     1e0:	dc 82       	std	Y+4, r13	; 0x04
     1e2:	ed 82       	std	Y+5, r14	; 0x05
     1e4:	fe 82       	std	Y+6, r15	; 0x06
     1e6:	6a 01       	movw	r12, r20
     1e8:	e1 2c       	mov	r14, r1
     1ea:	f1 2c       	mov	r15, r1
     1ec:	cf 82       	std	Y+7, r12	; 0x07
     1ee:	d8 86       	std	Y+8, r13	; 0x08
     1f0:	e9 86       	std	Y+9, r14	; 0x09
     1f2:	fa 86       	std	Y+10, r15	; 0x0a
     1f4:	b8 01       	movw	r22, r16
     1f6:	01 2e       	mov	r0, r17
     1f8:	00 0c       	add	r0, r0
     1fa:	88 0b       	sbc	r24, r24
     1fc:	99 0b       	sbc	r25, r25
     1fe:	0e 94 2a 09 	call	0x1254	; 0x1254 <__floatsisf>
     202:	2b ed       	ldi	r18, 0xDB	; 219
     204:	3f e0       	ldi	r19, 0x0F	; 15
     206:	49 ec       	ldi	r20, 0xC9	; 201
     208:	50 e4       	ldi	r21, 0x40	; 64
     20a:	0e 94 07 0a 	call	0x140e	; 0x140e <__mulsf3>
     20e:	6b 01       	movw	r12, r22
     210:	7c 01       	movw	r14, r24
     212:	6b 81       	ldd	r22, Y+3	; 0x03
     214:	7c 81       	ldd	r23, Y+4	; 0x04
     216:	8d 81       	ldd	r24, Y+5	; 0x05
     218:	9e 81       	ldd	r25, Y+6	; 0x06
     21a:	0e 94 28 09 	call	0x1250	; 0x1250 <__floatunsisf>
     21e:	9b 01       	movw	r18, r22
     220:	ac 01       	movw	r20, r24
     222:	c7 01       	movw	r24, r14
     224:	b6 01       	movw	r22, r12
     226:	7b d7       	rcall	.+3830   	; 0x111e <__divsf3>
     228:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <sin>
     22c:	2b 01       	movw	r4, r22
     22e:	3c 01       	movw	r6, r24
     230:	6f 81       	ldd	r22, Y+7	; 0x07
     232:	78 85       	ldd	r23, Y+8	; 0x08
     234:	89 85       	ldd	r24, Y+9	; 0x09
     236:	9a 85       	ldd	r25, Y+10	; 0x0a
     238:	0e 94 28 09 	call	0x1250	; 0x1250 <__floatunsisf>
     23c:	6b 01       	movw	r12, r22
     23e:	7c 01       	movw	r14, r24
     240:	9b 01       	movw	r18, r22
     242:	ac 01       	movw	r20, r24
     244:	c3 01       	movw	r24, r6
     246:	b2 01       	movw	r22, r4
     248:	0e 94 07 0a 	call	0x140e	; 0x140e <__mulsf3>
     24c:	a7 01       	movw	r20, r14
     24e:	96 01       	movw	r18, r12
     250:	eb d6       	rcall	.+3542   	; 0x1028 <__addsf3>
     252:	d2 d7       	rcall	.+4004   	; 0x11f8 <__fixunssfsi>
     254:	d5 01       	movw	r26, r10
     256:	6d 93       	st	X+, r22
     258:	5d 01       	movw	r10, r26
		uint16_t reg=pwmSin[i];
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	7a 83       	std	Y+2, r23	; 0x02
     25e:	69 83       	std	Y+1, r22	; 0x01
		print16(&reg);
     260:	ce 01       	movw	r24, r28
     262:	01 96       	adiw	r24, 0x01	; 1
     264:	4b d1       	rcall	.+662    	; 0x4fc <print16>
		printf("\n");
     266:	8a e0       	ldi	r24, 0x0A	; 10
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <putchar>
	sbi(DDRH,5);//digital 8 OC4C
	//sbi(DDRH,6);//digital 9
}
void getSinTable(uint16_t sinTableSize,uint8_t *pwmSin,uint16_t sineScale)
{
	for (int i = 0; i < sinTableSize; i++)
     26e:	0f 5f       	subi	r16, 0xFF	; 255
     270:	1f 4f       	sbci	r17, 0xFF	; 255
     272:	08 15       	cp	r16, r8
     274:	19 05       	cpc	r17, r9
     276:	09 f0       	breq	.+2      	; 0x27a <getSinTable+0xe2>
     278:	bd cf       	rjmp	.-134    	; 0x1f4 <getSinTable+0x5c>
		pwmSin[i] = (sin(x) * sineScale) + sineScale;
		uint16_t reg=pwmSin[i];
		print16(&reg);
		printf("\n");
	}
}
     27a:	2a 96       	adiw	r28, 0x0a	; 10
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	f8 94       	cli
     280:	de bf       	out	0x3e, r29	; 62
     282:	0f be       	out	0x3f, r0	; 63
     284:	cd bf       	out	0x3d, r28	; 61
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	1f 91       	pop	r17
     28c:	0f 91       	pop	r16
     28e:	ff 90       	pop	r15
     290:	ef 90       	pop	r14
     292:	df 90       	pop	r13
     294:	cf 90       	pop	r12
     296:	bf 90       	pop	r11
     298:	af 90       	pop	r10
     29a:	9f 90       	pop	r9
     29c:	8f 90       	pop	r8
     29e:	7f 90       	pop	r7
     2a0:	6f 90       	pop	r6
     2a2:	5f 90       	pop	r5
     2a4:	4f 90       	pop	r4
     2a6:	08 95       	ret

000002a8 <uart_putchar>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     2a8:	cf 93       	push	r28
     2aa:	c8 2f       	mov	r28, r24
     2ac:	8a 30       	cpi	r24, 0x0A	; 10
     2ae:	11 f4       	brne	.+4      	; 0x2b4 <uart_putchar+0xc>
     2b0:	8d e0       	ldi	r24, 0x0D	; 13
     2b2:	fa df       	rcall	.-12     	; 0x2a8 <uart_putchar>
     2b4:	e0 ec       	ldi	r30, 0xC0	; 192
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	80 81       	ld	r24, Z
     2ba:	85 ff       	sbrs	r24, 5
     2bc:	fd cf       	rjmp	.-6      	; 0x2b8 <uart_putchar+0x10>
     2be:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	cf 91       	pop	r28
     2c8:	08 95       	ret

000002ca <__vector_23>:
     2ca:	1f 92       	push	r1
     2cc:	0f 92       	push	r0
     2ce:	0f b6       	in	r0, 0x3f	; 63
     2d0:	0f 92       	push	r0
     2d2:	11 24       	eor	r1, r1
     2d4:	2f 93       	push	r18
     2d6:	3f 93       	push	r19
     2d8:	8f 93       	push	r24
     2da:	9f 93       	push	r25
     2dc:	af 93       	push	r26
     2de:	bf 93       	push	r27
     2e0:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <timer0_millis>
     2e4:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <timer0_millis+0x1>
     2e8:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <timer0_millis+0x2>
     2ec:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <timer0_millis+0x3>
     2f0:	30 91 ce 02 	lds	r19, 0x02CE	; 0x8002ce <timer0_fract>
     2f4:	23 e0       	ldi	r18, 0x03	; 3
     2f6:	23 0f       	add	r18, r19
     2f8:	2d 37       	cpi	r18, 0x7D	; 125
     2fa:	20 f4       	brcc	.+8      	; 0x304 <__vector_23+0x3a>
     2fc:	01 96       	adiw	r24, 0x01	; 1
     2fe:	a1 1d       	adc	r26, r1
     300:	b1 1d       	adc	r27, r1
     302:	05 c0       	rjmp	.+10     	; 0x30e <__vector_23+0x44>
     304:	26 e8       	ldi	r18, 0x86	; 134
     306:	23 0f       	add	r18, r19
     308:	02 96       	adiw	r24, 0x02	; 2
     30a:	a1 1d       	adc	r26, r1
     30c:	b1 1d       	adc	r27, r1
     30e:	20 93 ce 02 	sts	0x02CE, r18	; 0x8002ce <timer0_fract>
     312:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <timer0_millis>
     316:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <timer0_millis+0x1>
     31a:	a0 93 d1 02 	sts	0x02D1, r26	; 0x8002d1 <timer0_millis+0x2>
     31e:	b0 93 d2 02 	sts	0x02D2, r27	; 0x8002d2 <timer0_millis+0x3>
     322:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <timer0_overflow_count>
     326:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <timer0_overflow_count+0x1>
     32a:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <timer0_overflow_count+0x2>
     32e:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <timer0_overflow_count+0x3>
     332:	01 96       	adiw	r24, 0x01	; 1
     334:	a1 1d       	adc	r26, r1
     336:	b1 1d       	adc	r27, r1
     338:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <timer0_overflow_count>
     33c:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <timer0_overflow_count+0x1>
     340:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <timer0_overflow_count+0x2>
     344:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <timer0_overflow_count+0x3>
     348:	bf 91       	pop	r27
     34a:	af 91       	pop	r26
     34c:	9f 91       	pop	r25
     34e:	8f 91       	pop	r24
     350:	3f 91       	pop	r19
     352:	2f 91       	pop	r18
     354:	0f 90       	pop	r0
     356:	0f be       	out	0x3f, r0	; 63
     358:	0f 90       	pop	r0
     35a:	1f 90       	pop	r1
     35c:	18 95       	reti

0000035e <micros>:
     35e:	3f b7       	in	r19, 0x3f	; 63
     360:	f8 94       	cli
     362:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <timer0_overflow_count>
     366:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <timer0_overflow_count+0x1>
     36a:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <timer0_overflow_count+0x2>
     36e:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <timer0_overflow_count+0x3>
     372:	26 b5       	in	r18, 0x26	; 38
     374:	a8 9b       	sbis	0x15, 0	; 21
     376:	05 c0       	rjmp	.+10     	; 0x382 <micros+0x24>
     378:	2f 3f       	cpi	r18, 0xFF	; 255
     37a:	19 f0       	breq	.+6      	; 0x382 <micros+0x24>
     37c:	01 96       	adiw	r24, 0x01	; 1
     37e:	a1 1d       	adc	r26, r1
     380:	b1 1d       	adc	r27, r1
     382:	3f bf       	out	0x3f, r19	; 63
     384:	ba 2f       	mov	r27, r26
     386:	a9 2f       	mov	r26, r25
     388:	98 2f       	mov	r25, r24
     38a:	88 27       	eor	r24, r24
     38c:	82 0f       	add	r24, r18
     38e:	91 1d       	adc	r25, r1
     390:	a1 1d       	adc	r26, r1
     392:	b1 1d       	adc	r27, r1
     394:	bc 01       	movw	r22, r24
     396:	cd 01       	movw	r24, r26
     398:	66 0f       	add	r22, r22
     39a:	77 1f       	adc	r23, r23
     39c:	88 1f       	adc	r24, r24
     39e:	99 1f       	adc	r25, r25
     3a0:	66 0f       	add	r22, r22
     3a2:	77 1f       	adc	r23, r23
     3a4:	88 1f       	adc	r24, r24
     3a6:	99 1f       	adc	r25, r25
     3a8:	08 95       	ret

000003aa <PWM_update>:
{
	PWM_update();
}
void PWM_update()//motor pwm update 
{
	U_PWM=pwmSin[U_step];
     3aa:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <__data_end>
     3ae:	f0 91 cd 02 	lds	r31, 0x02CD	; 0x8002cd <__data_end+0x1>
     3b2:	e7 51       	subi	r30, 0x17	; 23
     3b4:	fd 4f       	sbci	r31, 0xFD	; 253
     3b6:	80 81       	ld	r24, Z
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     3be:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
	V_PWM=pwmSin[V_step];
     3c2:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <V_step>
     3c6:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <V_step+0x1>
     3ca:	e7 51       	subi	r30, 0x17	; 23
     3cc:	fd 4f       	sbci	r31, 0xFD	; 253
     3ce:	80 81       	ld	r24, Z
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     3d6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
	W_PWM=pwmSin[W_step];
     3da:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <W_step>
     3de:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <W_step+0x1>
     3e2:	e7 51       	subi	r30, 0x17	; 23
     3e4:	fd 4f       	sbci	r31, 0xFD	; 253
     3e6:	80 81       	ld	r24, Z
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
     3ee:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
	U_step=U_step+incr;
     3f2:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <incr>
     3f6:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <incr+0x1>
     3fa:	40 91 cc 02 	lds	r20, 0x02CC	; 0x8002cc <__data_end>
     3fe:	50 91 cd 02 	lds	r21, 0x02CD	; 0x8002cd <__data_end+0x1>
     402:	46 0f       	add	r20, r22
     404:	57 1f       	adc	r21, r23
     406:	50 93 cd 02 	sts	0x02CD, r21	; 0x8002cd <__data_end+0x1>
     40a:	40 93 cc 02 	sts	0x02CC, r20	; 0x8002cc <__data_end>
	V_step=V_step+incr;
     40e:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <V_step>
     412:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <V_step+0x1>
     416:	26 0f       	add	r18, r22
     418:	37 1f       	adc	r19, r23
     41a:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <V_step+0x1>
     41e:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <V_step>
	W_step=W_step+incr;
     422:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <W_step>
     426:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <W_step+0x1>
     42a:	86 0f       	add	r24, r22
     42c:	97 1f       	adc	r25, r23
     42e:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <W_step+0x1>
     432:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <W_step>
	if(U_step > SINE_TABLE_SZ)  
     436:	41 3d       	cpi	r20, 0xD1	; 209
     438:	62 e0       	ldi	r22, 0x02	; 2
     43a:	56 07       	cpc	r21, r22
     43c:	2c f0       	brlt	.+10     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		U_step = 0;
     43e:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <__data_end+0x1>
     442:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <__data_end>
     446:	08 c0       	rjmp	.+16     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
	if(U_step < 0)  
     448:	55 23       	and	r21, r21
     44a:	34 f4       	brge	.+12     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		U_step = SINE_TABLE_SZ;
     44c:	40 ed       	ldi	r20, 0xD0	; 208
     44e:	52 e0       	ldi	r21, 0x02	; 2
     450:	50 93 cd 02 	sts	0x02CD, r21	; 0x8002cd <__data_end+0x1>
     454:	40 93 cc 02 	sts	0x02CC, r20	; 0x8002cc <__data_end>
	
	if(V_step > SINE_TABLE_SZ)  
     458:	21 3d       	cpi	r18, 0xD1	; 209
     45a:	42 e0       	ldi	r20, 0x02	; 2
     45c:	34 07       	cpc	r19, r20
     45e:	2c f0       	brlt	.+10     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		V_step = 0;
     460:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <V_step+0x1>
     464:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <V_step>
     468:	08 c0       	rjmp	.+16     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
	if(V_step < 0)  
     46a:	33 23       	and	r19, r19
     46c:	34 f4       	brge	.+12     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		V_step = SINE_TABLE_SZ;
     46e:	20 ed       	ldi	r18, 0xD0	; 208
     470:	32 e0       	ldi	r19, 0x02	; 2
     472:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <V_step+0x1>
     476:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <V_step>
	
	if(W_step > SINE_TABLE_SZ)  
     47a:	81 3d       	cpi	r24, 0xD1	; 209
     47c:	62 e0       	ldi	r22, 0x02	; 2
     47e:	96 07       	cpc	r25, r22
     480:	2c f0       	brlt	.+10     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		W_step = 0;
     482:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <W_step+0x1>
     486:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <W_step>
     48a:	08 c0       	rjmp	.+16     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
	if(W_step < 0) 
     48c:	99 23       	and	r25, r25
     48e:	34 f4       	brge	.+12     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		W_step = SINE_TABLE_SZ;
     490:	80 ed       	ldi	r24, 0xD0	; 208
     492:	92 e0       	ldi	r25, 0x02	; 2
     494:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <W_step+0x1>
     498:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <W_step>
	//_delay_us(100);
	OCR5A=pwm_delay;
     49c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <pwm_delay>
     4a0:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <pwm_delay+0x1>
     4a4:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     4a8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     4ac:	08 95       	ret

000004ae <__vector_47>:
	SREG = oldSREG;

	return m;
}
ISR(TIMER5_COMPA_vect)//motor update interrupt routine
{
     4ae:	1f 92       	push	r1
     4b0:	0f 92       	push	r0
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	0f 92       	push	r0
     4b6:	11 24       	eor	r1, r1
     4b8:	0b b6       	in	r0, 0x3b	; 59
     4ba:	0f 92       	push	r0
     4bc:	2f 93       	push	r18
     4be:	3f 93       	push	r19
     4c0:	4f 93       	push	r20
     4c2:	5f 93       	push	r21
     4c4:	6f 93       	push	r22
     4c6:	7f 93       	push	r23
     4c8:	8f 93       	push	r24
     4ca:	9f 93       	push	r25
     4cc:	af 93       	push	r26
     4ce:	bf 93       	push	r27
     4d0:	ef 93       	push	r30
	PWM_update();
     4d2:	ff 93       	push	r31
}
     4d4:	6a df       	rcall	.-300    	; 0x3aa <PWM_update>
     4d6:	ff 91       	pop	r31
     4d8:	ef 91       	pop	r30
     4da:	bf 91       	pop	r27
     4dc:	af 91       	pop	r26
     4de:	9f 91       	pop	r25
     4e0:	8f 91       	pop	r24
     4e2:	7f 91       	pop	r23
     4e4:	6f 91       	pop	r22
     4e6:	5f 91       	pop	r21
     4e8:	4f 91       	pop	r20
     4ea:	3f 91       	pop	r19
     4ec:	2f 91       	pop	r18
     4ee:	0f 90       	pop	r0
     4f0:	0b be       	out	0x3b, r0	; 59
     4f2:	0f 90       	pop	r0
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	0f 90       	pop	r0
     4f8:	1f 90       	pop	r1
     4fa:	18 95       	reti

000004fc <print16>:
	OCR5A=pwm_delay;
}
void print16(int16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
     508:	2a 97       	sbiw	r28, 0x0a	; 10
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     514:	4a e0       	ldi	r20, 0x0A	; 10
     516:	8e 01       	movw	r16, r28
     518:	0f 5f       	subi	r16, 0xFF	; 255
     51a:	1f 4f       	sbci	r17, 0xFF	; 255
     51c:	b8 01       	movw	r22, r16
     51e:	fc 01       	movw	r30, r24
     520:	80 81       	ld	r24, Z
     522:	91 81       	ldd	r25, Z+1	; 0x01
     524:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     528:	1f 93       	push	r17
     52a:	0f 93       	push	r16
     52c:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <printf>
	//printf("\n");
}
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	2a 96       	adiw	r28, 0x0a	; 10
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	de bf       	out	0x3e, r29	; 62
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	cd bf       	out	0x3d, r28	; 61
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	08 95       	ret

0000054a <print16ln>:

void print16ln(int16_t *value)
//this is pointer value, transmited value
//must be reference type &
{
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	2a 97       	sbiw	r28, 0x0a	; 10
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	0f be       	out	0x3f, r0	; 63
     560:	cd bf       	out	0x3d, r28	; 61
     562:	4a e0       	ldi	r20, 0x0A	; 10
     564:	8e 01       	movw	r16, r28
     566:	0f 5f       	subi	r16, 0xFF	; 255
     568:	1f 4f       	sbci	r17, 0xFF	; 255
     56a:	b8 01       	movw	r22, r16
     56c:	fc 01       	movw	r30, r24
     56e:	80 81       	ld	r24, Z
     570:	91 81       	ldd	r25, Z+1	; 0x01
     572:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__itoa_ncheck>
	char c[10];
	itoa(*value, c, 10);
	printf(c);
     576:	1f 93       	push	r17
     578:	0f 93       	push	r16
     57a:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <printf>
	printf("\n");
     57e:	8a e0       	ldi	r24, 0x0A	; 10
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <putchar>
}
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	2a 96       	adiw	r28, 0x0a	; 10
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	de bf       	out	0x3e, r29	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	cd bf       	out	0x3d, r28	; 61
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	08 95       	ret

000005a0 <main>:
int V_step=V_step_predefine;
int W_step=W_step_predefine;
uint8_t pwmSin[SINE_TABLE_SZ];
/*-----------------------------------start of main----------------------------------*/
int main(void)
{				
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	e2 97       	sbiw	r28, 0x32	; 50
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	cd bf       	out	0x3d, r28	; 61
		
	cli();
	init_gpio();
		#ifdef GYRO
			i2c_init();
     5b4:	f8 94       	cli
		#endif
	USART_Init(MY_UBRR);
     5b6:	e4 dd       	rcall	.-1080   	; 0x180 <init_gpio>
     5b8:	72 d4       	rcall	.+2276   	; 0xe9e <i2c_init>
     5ba:	80 e1       	ldi	r24, 0x10	; 16
	uart_str = fdevopen(uart_putchar, NULL);	
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	20 d5       	rcall	.+2624   	; 0x1000 <USART_Init>
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	84 e5       	ldi	r24, 0x54	; 84
     5c6:	91 e0       	ldi	r25, 0x01	; 1
	setup_timer0();
	Enable_timer0_overflow_interrupt();//micros
     5c8:	0e 94 88 0b 	call	0x1710	; 0x1710 <fdevopen>
	setup_timer4();//pwm
     5cc:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <uart_str+0x1>
	setup_timer5();
     5d0:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <uart_str>
	Enable_timer5_compare_interrupt();//motor
     5d4:	57 d4       	rcall	.+2222   	; 0xe84 <setup_timer0>
     5d6:	5d d4       	rcall	.+2234   	; 0xe92 <Enable_timer0_overflow_interrupt>
	OCR5A=4000;
     5d8:	32 d4       	rcall	.+2148   	; 0xe3e <setup_timer4>
     5da:	45 d4       	rcall	.+2186   	; 0xe66 <setup_timer5>
     5dc:	4d d4       	rcall	.+2202   	; 0xe78 <Enable_timer5_compare_interrupt>
     5de:	80 ea       	ldi	r24, 0xA0	; 160
     5e0:	9f e0       	ldi	r25, 0x0F	; 15
     5e2:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
		double acc_total_vector=0;
		double angle_pitch_acc=0;
		double angle_roll_acc=0;
		bool set_gyro_angles=false;
			#ifdef CALIBERATED_DATA
				int32_t gyroX_calib_=0;
     5e6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     5ea:	1d 86       	std	Y+13, r1	; 0x0d
				int32_t gyroY_calib_=0;
     5ec:	1e 86       	std	Y+14, r1	; 0x0e
     5ee:	1f 86       	std	Y+15, r1	; 0x0f
     5f0:	18 8a       	std	Y+16, r1	; 0x10
     5f2:	19 8a       	std	Y+17, r1	; 0x11
				int32_t gyroZ_calib_=0;
     5f4:	1a 8a       	std	Y+18, r1	; 0x12
     5f6:	1b 8a       	std	Y+19, r1	; 0x13
     5f8:	1c 8a       	std	Y+20, r1	; 0x14
				int32_t accelY_calib_=0;
				int32_t accelZ_calib_=0;				
				//uint16_t gyroX_angle_calib=0; 
				uint16_t gyroY_angle_calib=0; 
				//uint16_t gyroZ_angle_calib=0; 				
				mpu6050_calibrate_gyro(&gyroX_calib_,&gyroY_calib_,&gyroZ_calib_);
     5fa:	1d 8a       	std	Y+21, r1	; 0x15
     5fc:	1e 8a       	std	Y+22, r1	; 0x16
     5fe:	1f 8a       	std	Y+23, r1	; 0x17
     600:	18 8e       	std	Y+24, r1	; 0x18
     602:	ae 01       	movw	r20, r28
     604:	4b 5e       	subi	r20, 0xEB	; 235
     606:	5f 4f       	sbci	r21, 0xFF	; 255
     608:	be 01       	movw	r22, r28
     60a:	6f 5e       	subi	r22, 0xEF	; 239
				int16_t gyroX_calib=gyroX_calib_;
     60c:	7f 4f       	sbci	r23, 0xFF	; 255
     60e:	ce 01       	movw	r24, r28
     610:	0d 96       	adiw	r24, 0x0d	; 13
     612:	6f d2       	rcall	.+1246   	; 0xaf2 <mpu6050_calibrate_gyro>
				int16_t gyroY_calib=gyroY_calib_;
     614:	2d 85       	ldd	r18, Y+13	; 0x0d
     616:	3e 85       	ldd	r19, Y+14	; 0x0e
				int16_t gyroZ_calib=gyroZ_calib_;
     618:	3e a7       	std	Y+46, r19	; 0x2e
     61a:	2d a7       	std	Y+45, r18	; 0x2d
				int16_t accelX_calib=accelX_calib_;
				int16_t accelY_calib=accelY_calib_;
				int16_t accelZ_calib=accelZ_calib_;				
				//mpu6050_calibrate_accel(&accelX_calib,&accelY_calib,&accelZ_calib);
			#endif
		mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV,7);
     61c:	89 89       	ldd	r24, Y+17	; 0x11
     61e:	9a 89       	ldd	r25, Y+18	; 0x12
     620:	98 ab       	std	Y+48, r25	; 0x30
		mpu6050_writeByte(MPU6050_RA_CONFIG,0x00);
     622:	8f a7       	std	Y+47, r24	; 0x2f
     624:	2d 89       	ldd	r18, Y+21	; 0x15
     626:	3e 89       	ldd	r19, Y+22	; 0x16
		mpu6050_writeByte(MPU6050_RA_GYRO_CONFIG,0x08);//gyro sensitivity set to 500 o/s
     628:	3a ab       	std	Y+50, r19	; 0x32
     62a:	29 ab       	std	Y+49, r18	; 0x31
     62c:	67 e0       	ldi	r22, 0x07	; 7
		mpu6050_writeByte(MPU6050_RA_ACCEL_CONFIG,0x10);//accel sensitivity -/+ 8g
     62e:	89 e1       	ldi	r24, 0x19	; 25
     630:	3f d3       	rcall	.+1662   	; 0xcb0 <mpu6050_writeByte>
     632:	60 e0       	ldi	r22, 0x00	; 0
		mpu6050_writeByte(MPU6050_RA_PWR_MGMT_1,0x01);
     634:	8a e1       	ldi	r24, 0x1A	; 26
     636:	3c d3       	rcall	.+1656   	; 0xcb0 <mpu6050_writeByte>
     638:	68 e0       	ldi	r22, 0x08	; 8
     63a:	8b e1       	ldi	r24, 0x1B	; 27
	#endif
	/*----------------------end mpu definition ----------------------*/
	
	/*----------------------------motor init-------------------------*/
	getSinTable(SINE_TABLE_SZ,pwmSin,sinScale);
     63c:	39 d3       	rcall	.+1650   	; 0xcb0 <mpu6050_writeByte>
     63e:	60 e1       	ldi	r22, 0x10	; 16
     640:	8c e1       	ldi	r24, 0x1C	; 28
     642:	36 d3       	rcall	.+1644   	; 0xcb0 <mpu6050_writeByte>
     644:	61 e0       	ldi	r22, 0x01	; 1
     646:	8b e6       	ldi	r24, 0x6B	; 107
     648:	33 d3       	rcall	.+1638   	; 0xcb0 <mpu6050_writeByte>
	printf("U_step_predefine="); print16ln(&U_step);
     64a:	4f e7       	ldi	r20, 0x7F	; 127
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	69 ee       	ldi	r22, 0xE9	; 233
     650:	72 e0       	ldi	r23, 0x02	; 2
     652:	80 ed       	ldi	r24, 0xD0	; 208
     654:	92 e0       	ldi	r25, 0x02	; 2
     656:	a0 dd       	rcall	.-1216   	; 0x198 <getSinTable>
     658:	80 e1       	ldi	r24, 0x10	; 16
     65a:	92 e0       	ldi	r25, 0x02	; 2
	printf("  V_step_predefine="); print16ln(&V_step);
     65c:	9f 93       	push	r25
     65e:	8f 93       	push	r24
     660:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <printf>
     664:	8c ec       	ldi	r24, 0xCC	; 204
     666:	92 e0       	ldi	r25, 0x02	; 2
     668:	70 df       	rcall	.-288    	; 0x54a <print16ln>
     66a:	82 e2       	ldi	r24, 0x22	; 34
	printf("  W_step_predefine="); print16ln(&W_step);   
     66c:	92 e0       	ldi	r25, 0x02	; 2
     66e:	9f 93       	push	r25
     670:	8f 93       	push	r24
     672:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <printf>
     676:	88 e0       	ldi	r24, 0x08	; 8
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	67 df       	rcall	.-306    	; 0x54a <print16ln>
     67c:	86 e3       	ldi	r24, 0x36	; 54
     67e:	92 e0       	ldi	r25, 0x02	; 2
	USART_Transmit(0xfe); 
     680:	9f 93       	push	r25
     682:	8f 93       	push	r24
     684:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <printf>
	sei();
     688:	86 e0       	ldi	r24, 0x06	; 6
     68a:	92 e0       	ldi	r25, 0x02	; 2
     68c:	5e df       	rcall	.-324    	; 0x54a <print16ln>
     68e:	8e ef       	ldi	r24, 0xFE	; 254
     690:	c2 d4       	rcall	.+2436   	; 0x1016 <USART_Transmit>
     692:	78 94       	sei
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		double angle_pitch=0;
		double angle_roll=0;
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
		int16_t gyro_y;
		int16_t gyro_z;
		int16_t accel_x;
		int16_t accel_y;
		int16_t accel_z;
		double angle_pitch=0;
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	1d 8e       	std	Y+29, r1	; 0x1d
     6a2:	1e 8e       	std	Y+30, r1	; 0x1e
						
			#ifdef DRV8313
				uint16_t reg_print=final_angleY;
				int absoulute_y=abs(final_angleY);
				uint16_t learing_rate=200;				
				uint16_t local_motor_delay=(32735-(absoulute_y*learing_rate));
     6a4:	1f 8e       	std	Y+31, r1	; 0x1f
     6a6:	18 a2       	std	Y+32, r1	; 0x20
     6a8:	19 a2       	std	Y+33, r1	; 0x21
     6aa:	1a a2       	std	Y+34, r1	; 0x22
     6ac:	1b a2       	std	Y+35, r1	; 0x23
	USART_Transmit(0xfe); 
	sei();
    while (1) /*---------------------------while(1)---------------------------------*/
    {
		#ifdef GYRO
    		mpu6050_getRawData(&accel_x,&accel_y,&accel_z,&gyro_x,&gyro_y,&gyro_z);//15us to do
     6ae:	1c a2       	std	Y+36, r1	; 0x24
     6b0:	0f 2e       	mov	r0, r31
     6b2:	ff ed       	ldi	r31, 0xDF	; 223
     6b4:	2f 2e       	mov	r2, r31
     6b6:	ff e7       	ldi	r31, 0x7F	; 127
     6b8:	3f 2e       	mov	r3, r31
     6ba:	f0 2d       	mov	r31, r0
     6bc:	ce 01       	movw	r24, r28
     6be:	05 96       	adiw	r24, 0x05	; 5
     6c0:	7c 01       	movw	r14, r24
     6c2:	8e 01       	movw	r16, r28
     6c4:	0d 5f       	subi	r16, 0xFD	; 253
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	9e 01       	movw	r18, r28
     6ca:	2f 5f       	subi	r18, 0xFF	; 255
     6cc:	3f 4f       	sbci	r19, 0xFF	; 255
     6ce:	ae 01       	movw	r20, r28
     6d0:	45 5f       	subi	r20, 0xF5	; 245
		#ifdef GYRO
			#ifdef CALIBERATED_DATA
				accX;
				accY;
				accZ;
				grX;
     6d2:	5f 4f       	sbci	r21, 0xFF	; 255
     6d4:	be 01       	movw	r22, r28
     6d6:	67 5f       	subi	r22, 0xF7	; 247
     6d8:	7f 4f       	sbci	r23, 0xFF	; 255
     6da:	02 96       	adiw	r24, 0x02	; 2
     6dc:	45 d3       	rcall	.+1674   	; 0xd68 <mpu6050_getRawData>
     6de:	89 81       	ldd	r24, Y+1	; 0x01
				grY;
     6e0:	9a 81       	ldd	r25, Y+2	; 0x02
     6e2:	2d a5       	ldd	r18, Y+45	; 0x2d
     6e4:	3e a5       	ldd	r19, Y+46	; 0x2e
     6e6:	82 1b       	sub	r24, r18
     6e8:	93 0b       	sbc	r25, r19
     6ea:	9a 83       	std	Y+2, r25	; 0x02
				grZ;
     6ec:	89 83       	std	Y+1, r24	; 0x01
     6ee:	8b 81       	ldd	r24, Y+3	; 0x03
     6f0:	9c 81       	ldd	r25, Y+4	; 0x04
     6f2:	2f a5       	ldd	r18, Y+47	; 0x2f
     6f4:	38 a9       	ldd	r19, Y+48	; 0x30
     6f6:	82 1b       	sub	r24, r18
     6f8:	93 0b       	sbc	r25, r19
			printf("  ");
			printf("\n");
			/*--------end------*/			
		#else
			
			double dt = (double)((micros() - timer1));
     6fa:	9c 83       	std	Y+4, r25	; 0x04
     6fc:	8b 83       	std	Y+3, r24	; 0x03
     6fe:	8d 81       	ldd	r24, Y+5	; 0x05
     700:	9e 81       	ldd	r25, Y+6	; 0x06
     702:	29 a9       	ldd	r18, Y+49	; 0x31
     704:	3a a9       	ldd	r19, Y+50	; 0x32
     706:	82 1b       	sub	r24, r18
     708:	93 0b       	sbc	r25, r19
     70a:	9e 83       	std	Y+6, r25	; 0x06
			timer1=micros();
     70c:	8d 83       	std	Y+5, r24	; 0x05
     70e:	27 de       	rcall	.-946    	; 0x35e <micros>
     710:	64 19       	sub	r22, r4
     712:	75 09       	sbc	r23, r5
			//double hz=1000000/dt;
			double pop=1/(65.5*1000000/dt);
     714:	86 09       	sbc	r24, r6
     716:	97 09       	sbc	r25, r7
     718:	9b d5       	rcall	.+2870   	; 0x1250 <__floatunsisf>
     71a:	6b 01       	movw	r12, r22
     71c:	7c 01       	movw	r14, r24
     71e:	1f de       	rcall	.-962    	; 0x35e <micros>
     720:	2b 01       	movw	r4, r22
     722:	3c 01       	movw	r6, r24
     724:	a7 01       	movw	r20, r14
     726:	96 01       	movw	r18, r12
     728:	68 ed       	ldi	r22, 0xD8	; 216
     72a:	7c ed       	ldi	r23, 0xDC	; 220
     72c:	89 e7       	ldi	r24, 0x79	; 121
     72e:	9c e4       	ldi	r25, 0x4C	; 76
     730:	f6 d4       	rcall	.+2540   	; 0x111e <__divsf3>
			//if(loop_bool)
			//{
			//	gyroYrate-=tpel;
			//	loop_bool=false;
			//}
			if (!loop_bool)
     732:	9b 01       	movw	r18, r22
     734:	ac 01       	movw	r20, r24
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	80 e8       	ldi	r24, 0x80	; 128
     73c:	9f e3       	ldi	r25, 0x3F	; 63
			{
				angle_pitch += gyroXrate; //Calculate the traveled pitch angle and add this to the angle_pitch variable
     73e:	ef d4       	rcall	.+2526   	; 0x111e <__divsf3>
     740:	6b 01       	movw	r12, r22
     742:	7c 01       	movw	r14, r24
     744:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <loop_bool>
     748:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <loop_bool+0x1>
     74c:	89 2b       	or	r24, r25
     74e:	59 f5       	brne	.+86     	; 0x7a6 <main+0x206>
     750:	69 81       	ldd	r22, Y+1	; 0x01
     752:	7a 81       	ldd	r23, Y+2	; 0x02
     754:	07 2e       	mov	r0, r23
     756:	00 0c       	add	r0, r0
     758:	88 0b       	sbc	r24, r24
     75a:	99 0b       	sbc	r25, r25
     75c:	7b d5       	rcall	.+2806   	; 0x1254 <__floatsisf>
     75e:	a7 01       	movw	r20, r14
     760:	96 01       	movw	r18, r12
     762:	55 d6       	rcall	.+3242   	; 0x140e <__mulsf3>
     764:	9b 01       	movw	r18, r22
     766:	ac 01       	movw	r20, r24
				angle_roll += gyroYrate;  //Calculate the traveled roll angle and add this to the angle_roll variable			
     768:	69 a1       	ldd	r22, Y+33	; 0x21
     76a:	7a a1       	ldd	r23, Y+34	; 0x22
     76c:	8b a1       	ldd	r24, Y+35	; 0x23
     76e:	9c a1       	ldd	r25, Y+36	; 0x24
     770:	5b d4       	rcall	.+2230   	; 0x1028 <__addsf3>
     772:	69 a3       	std	Y+33, r22	; 0x21
     774:	7a a3       	std	Y+34, r23	; 0x22
     776:	8b a3       	std	Y+35, r24	; 0x23
     778:	9c a3       	std	Y+36, r25	; 0x24
     77a:	6b 81       	ldd	r22, Y+3	; 0x03
     77c:	7c 81       	ldd	r23, Y+4	; 0x04
     77e:	07 2e       	mov	r0, r23
     780:	00 0c       	add	r0, r0
     782:	88 0b       	sbc	r24, r24
     784:	99 0b       	sbc	r25, r25
     786:	66 d5       	rcall	.+2764   	; 0x1254 <__floatsisf>
     788:	a7 01       	movw	r20, r14
     78a:	96 01       	movw	r18, r12
     78c:	40 d6       	rcall	.+3200   	; 0x140e <__mulsf3>
     78e:	9b 01       	movw	r18, r22
     790:	ac 01       	movw	r20, r24
			}
			else
			{
				loop_bool=false;
     792:	6d 8d       	ldd	r22, Y+29	; 0x1d
     794:	7e 8d       	ldd	r23, Y+30	; 0x1e
     796:	8f 8d       	ldd	r24, Y+31	; 0x1f
			}					
					//0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
			pop*=(3.142/180);	
			angle_pitch += angle_roll * sin(gyro_z * pop);               //If the IMU has yawed transfer the roll angle to the pitch angel
     798:	98 a1       	ldd	r25, Y+32	; 0x20
     79a:	46 d4       	rcall	.+2188   	; 0x1028 <__addsf3>
     79c:	6d 8f       	std	Y+29, r22	; 0x1d
     79e:	7e 8f       	std	Y+30, r23	; 0x1e
     7a0:	8f 8f       	std	Y+31, r24	; 0x1f
     7a2:	98 a3       	std	Y+32, r25	; 0x20
     7a4:	04 c0       	rjmp	.+8      	; 0x7ae <main+0x20e>
     7a6:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <loop_bool+0x1>
     7aa:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <loop_bool>
     7ae:	6d 81       	ldd	r22, Y+5	; 0x05
     7b0:	7e 81       	ldd	r23, Y+6	; 0x06
     7b2:	07 2e       	mov	r0, r23
     7b4:	00 0c       	add	r0, r0
     7b6:	88 0b       	sbc	r24, r24
     7b8:	99 0b       	sbc	r25, r25
     7ba:	4c d5       	rcall	.+2712   	; 0x1254 <__floatsisf>
     7bc:	4b 01       	movw	r8, r22
     7be:	5c 01       	movw	r10, r24
     7c0:	24 ef       	ldi	r18, 0xF4	; 244
     7c2:	3e ef       	ldi	r19, 0xFE	; 254
     7c4:	4e e8       	ldi	r20, 0x8E	; 142
     7c6:	5c e3       	ldi	r21, 0x3C	; 60
     7c8:	c7 01       	movw	r24, r14
     7ca:	b6 01       	movw	r22, r12
     7cc:	20 d6       	rcall	.+3136   	; 0x140e <__mulsf3>
     7ce:	9b 01       	movw	r18, r22
     7d0:	ac 01       	movw	r20, r24
     7d2:	c5 01       	movw	r24, r10
     7d4:	b4 01       	movw	r22, r8
     7d6:	1b d6       	rcall	.+3126   	; 0x140e <__mulsf3>
     7d8:	7d d6       	rcall	.+3322   	; 0x14d4 <sin>
     7da:	6b 01       	movw	r12, r22
     7dc:	7c 01       	movw	r14, r24
     7de:	9b 01       	movw	r18, r22
     7e0:	ac 01       	movw	r20, r24
     7e2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     7e4:	7e 8d       	ldd	r23, Y+30	; 0x1e
     7e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7e8:	98 a1       	ldd	r25, Y+32	; 0x20
     7ea:	11 d6       	rcall	.+3106   	; 0x140e <__mulsf3>
			angle_roll -= angle_pitch * sin(gyro_z * pop);               //If the IMU has yawed transfer the pitch angle to the roll angel
     7ec:	9b 01       	movw	r18, r22
     7ee:	ac 01       	movw	r20, r24
     7f0:	69 a1       	ldd	r22, Y+33	; 0x21
     7f2:	7a a1       	ldd	r23, Y+34	; 0x22
     7f4:	8b a1       	ldd	r24, Y+35	; 0x23
     7f6:	9c a1       	ldd	r25, Y+36	; 0x24
     7f8:	17 d4       	rcall	.+2094   	; 0x1028 <__addsf3>
     7fa:	69 a3       	std	Y+33, r22	; 0x21
     7fc:	7a a3       	std	Y+34, r23	; 0x22
     7fe:	8b a3       	std	Y+35, r24	; 0x23
     800:	9c a3       	std	Y+36, r25	; 0x24
     802:	9b 01       	movw	r18, r22
     804:	ac 01       	movw	r20, r24
     806:	c7 01       	movw	r24, r14
     808:	b6 01       	movw	r22, r12
			
			double temporar_accel_x=accel_x/100;
     80a:	01 d6       	rcall	.+3074   	; 0x140e <__mulsf3>
     80c:	9b 01       	movw	r18, r22
     80e:	ac 01       	movw	r20, r24
     810:	6d 8d       	ldd	r22, Y+29	; 0x1d
     812:	7e 8d       	ldd	r23, Y+30	; 0x1e
     814:	8f 8d       	ldd	r24, Y+31	; 0x1f
     816:	98 a1       	ldd	r25, Y+32	; 0x20
     818:	06 d4       	rcall	.+2060   	; 0x1026 <__subsf3>
     81a:	6d 8f       	std	Y+29, r22	; 0x1d
     81c:	7e 8f       	std	Y+30, r23	; 0x1e
     81e:	8f 8f       	std	Y+31, r24	; 0x1f
     820:	98 a3       	std	Y+32, r25	; 0x20
     822:	0f 81       	ldd	r16, Y+7	; 0x07
			double temporar_accel_y=accel_y/100;
     824:	18 85       	ldd	r17, Y+8	; 0x08
     826:	c8 01       	movw	r24, r16
     828:	64 e6       	ldi	r22, 0x64	; 100
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	e9 d6       	rcall	.+3538   	; 0x1600 <__divmodhi4>
     82e:	07 2e       	mov	r0, r23
     830:	00 0c       	add	r0, r0
     832:	88 0b       	sbc	r24, r24
     834:	99 0b       	sbc	r25, r25
     836:	0e d5       	rcall	.+2588   	; 0x1254 <__floatsisf>
     838:	4b 01       	movw	r8, r22
     83a:	5c 01       	movw	r10, r24
     83c:	89 85       	ldd	r24, Y+9	; 0x09
			double temporar_accel_z=accel_z/100;
     83e:	9a 85       	ldd	r25, Y+10	; 0x0a
     840:	64 e6       	ldi	r22, 0x64	; 100
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	dd d6       	rcall	.+3514   	; 0x1600 <__divmodhi4>
     846:	07 2e       	mov	r0, r23
     848:	00 0c       	add	r0, r0
     84a:	88 0b       	sbc	r24, r24
     84c:	99 0b       	sbc	r25, r25
     84e:	02 d5       	rcall	.+2564   	; 0x1254 <__floatsisf>
     850:	6d a3       	std	Y+37, r22	; 0x25
     852:	7e a3       	std	Y+38, r23	; 0x26
			
			acc_total_vector = sqrt((temporar_accel_x*temporar_accel_x)+(temporar_accel_y*temporar_accel_y)+(temporar_accel_z*temporar_accel_z));  //Calculate the total accelerometer vector
     854:	8f a3       	std	Y+39, r24	; 0x27
     856:	98 a7       	std	Y+40, r25	; 0x28
     858:	8b 85       	ldd	r24, Y+11	; 0x0b
     85a:	9c 85       	ldd	r25, Y+12	; 0x0c
     85c:	64 e6       	ldi	r22, 0x64	; 100
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	cf d6       	rcall	.+3486   	; 0x1600 <__divmodhi4>
     862:	07 2e       	mov	r0, r23
     864:	00 0c       	add	r0, r0
     866:	88 0b       	sbc	r24, r24
     868:	99 0b       	sbc	r25, r25
     86a:	f4 d4       	rcall	.+2536   	; 0x1254 <__floatsisf>
     86c:	6b 01       	movw	r12, r22
     86e:	7c 01       	movw	r14, r24
     870:	a5 01       	movw	r20, r10
     872:	94 01       	movw	r18, r8
     874:	c5 01       	movw	r24, r10
     876:	b4 01       	movw	r22, r8
     878:	ca d5       	rcall	.+2964   	; 0x140e <__mulsf3>
     87a:	69 a7       	std	Y+41, r22	; 0x29
     87c:	7a a7       	std	Y+42, r23	; 0x2a
     87e:	8b a7       	std	Y+43, r24	; 0x2b
     880:	9c a7       	std	Y+44, r25	; 0x2c
     882:	2d a1       	ldd	r18, Y+37	; 0x25
     884:	3e a1       	ldd	r19, Y+38	; 0x26
     886:	4f a1       	ldd	r20, Y+39	; 0x27
     888:	58 a5       	ldd	r21, Y+40	; 0x28
     88a:	ca 01       	movw	r24, r20
     88c:	b9 01       	movw	r22, r18
     88e:	bf d5       	rcall	.+2942   	; 0x140e <__mulsf3>
     890:	9b 01       	movw	r18, r22
     892:	ac 01       	movw	r20, r24
     894:	69 a5       	ldd	r22, Y+41	; 0x29
     896:	7a a5       	ldd	r23, Y+42	; 0x2a
     898:	8b a5       	ldd	r24, Y+43	; 0x2b
     89a:	9c a5       	ldd	r25, Y+44	; 0x2c
     89c:	c5 d3       	rcall	.+1930   	; 0x1028 <__addsf3>
     89e:	69 a7       	std	Y+41, r22	; 0x29
     8a0:	7a a7       	std	Y+42, r23	; 0x2a
     8a2:	8b a7       	std	Y+43, r24	; 0x2b
     8a4:	9c a7       	std	Y+44, r25	; 0x2c
     8a6:	a5 01       	movw	r20, r10
     8a8:	94 01       	movw	r18, r8
     8aa:	c5 01       	movw	r24, r10
     8ac:	b4 01       	movw	r22, r8
     8ae:	af d5       	rcall	.+2910   	; 0x140e <__mulsf3>
     8b0:	4b 01       	movw	r8, r22
     8b2:	5c 01       	movw	r10, r24
     8b4:	2d a1       	ldd	r18, Y+37	; 0x25
     8b6:	3e a1       	ldd	r19, Y+38	; 0x26
     8b8:	4f a1       	ldd	r20, Y+39	; 0x27
     8ba:	58 a5       	ldd	r21, Y+40	; 0x28
     8bc:	ca 01       	movw	r24, r20
     8be:	b9 01       	movw	r22, r18
     8c0:	a6 d5       	rcall	.+2892   	; 0x140e <__mulsf3>
     8c2:	9b 01       	movw	r18, r22
					//57.296 = 1 / (3.142 / 180) The Arduino asin function is in radians
			acc_total_vector*=100;
		    angle_pitch_acc = asin((double)accel_y/acc_total_vector)* 57.296;       //Calculate the pitch angle
			angle_roll_acc = asin((double)accel_x/acc_total_vector)* -57.296;       //Calculate the roll angle
     8c4:	ac 01       	movw	r20, r24
     8c6:	c5 01       	movw	r24, r10
     8c8:	b4 01       	movw	r22, r8
     8ca:	ae d3       	rcall	.+1884   	; 0x1028 <__addsf3>
     8cc:	4b 01       	movw	r8, r22
     8ce:	5c 01       	movw	r10, r24
     8d0:	a7 01       	movw	r20, r14
     8d2:	96 01       	movw	r18, r12
     8d4:	c7 01       	movw	r24, r14
     8d6:	b6 01       	movw	r22, r12
     8d8:	9a d5       	rcall	.+2868   	; 0x140e <__mulsf3>
     8da:	9b 01       	movw	r18, r22
     8dc:	ac 01       	movw	r20, r24
     8de:	c5 01       	movw	r24, r10
     8e0:	b4 01       	movw	r22, r8
     8e2:	a2 d3       	rcall	.+1860   	; 0x1028 <__addsf3>
     8e4:	01 d6       	rcall	.+3074   	; 0x14e8 <sqrt>
     8e6:	6b 01       	movw	r12, r22
     8e8:	7c 01       	movw	r14, r24
     8ea:	b8 01       	movw	r22, r16
     8ec:	11 0f       	add	r17, r17
     8ee:	88 0b       	sbc	r24, r24
					
			uint16_t reg=angle_pitch;
     8f0:	99 0b       	sbc	r25, r25
     8f2:	b0 d4       	rcall	.+2400   	; 0x1254 <__floatsisf>
     8f4:	4b 01       	movw	r8, r22
     8f6:	5c 01       	movw	r10, r24
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
			printf(" ");
     8fc:	48 ec       	ldi	r20, 0xC8	; 200
     8fe:	52 e4       	ldi	r21, 0x42	; 66
     900:	c7 01       	movw	r24, r14
			printf("gyroX_angle= ");
     902:	b6 01       	movw	r22, r12
     904:	84 d5       	rcall	.+2824   	; 0x140e <__mulsf3>
     906:	9b 01       	movw	r18, r22
     908:	ac 01       	movw	r20, r24
     90a:	c5 01       	movw	r24, r10
			print16(&reg);
     90c:	b4 01       	movw	r22, r8
     90e:	07 d4       	rcall	.+2062   	; 0x111e <__divsf3>
			reg=angle_roll;
     910:	ef d3       	rcall	.+2014   	; 0x10f0 <asin>
     912:	6b 01       	movw	r12, r22
     914:	7c 01       	movw	r14, r24
     916:	69 a1       	ldd	r22, Y+33	; 0x21
     918:	7a a1       	ldd	r23, Y+34	; 0x22
     91a:	8b a1       	ldd	r24, Y+35	; 0x23
			printf(" ");
     91c:	9c a1       	ldd	r25, Y+36	; 0x24
     91e:	6c d4       	rcall	.+2264   	; 0x11f8 <__fixunssfsi>
     920:	7c 8f       	std	Y+28, r23	; 0x1c
     922:	6b 8f       	std	Y+27, r22	; 0x1b
			printf("gyroY_angle= ");
     924:	80 e2       	ldi	r24, 0x20	; 32
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	50 d7       	rcall	.+3744   	; 0x17ca <putchar>
     92a:	8a e4       	ldi	r24, 0x4A	; 74
     92c:	92 e0       	ldi	r25, 0x02	; 2
     92e:	9f 93       	push	r25
			print16(&reg);
     930:	8f 93       	push	r24
     932:	38 d7       	rcall	.+3696   	; 0x17a4 <printf>
     934:	ce 01       	movw	r24, r28
     936:	4b 96       	adiw	r24, 0x1b	; 27
			
			double xff=angle_roll_acc;
			double final_angleY=(angle_roll*0.996)+(xff*0.004);
     938:	e1 dd       	rcall	.-1086   	; 0x4fc <print16>
     93a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     93c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     93e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     940:	98 a1       	ldd	r25, Y+32	; 0x20
     942:	5a d4       	rcall	.+2228   	; 0x11f8 <__fixunssfsi>
     944:	7c 8f       	std	Y+28, r23	; 0x1c
     946:	6b 8f       	std	Y+27, r22	; 0x1b
     948:	80 e2       	ldi	r24, 0x20	; 32
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	3e d7       	rcall	.+3708   	; 0x17ca <putchar>
     94e:	88 e5       	ldi	r24, 0x58	; 88
     950:	92 e0       	ldi	r25, 0x02	; 2
     952:	9f 93       	push	r25
     954:	8f 93       	push	r24
     956:	26 d7       	rcall	.+3660   	; 0x17a4 <printf>
     958:	ce 01       	movw	r24, r28
     95a:	4b 96       	adiw	r24, 0x1b	; 27
     95c:	cf dd       	rcall	.-1122   	; 0x4fc <print16>
     95e:	2b e1       	ldi	r18, 0x1B	; 27
     960:	3f e2       	ldi	r19, 0x2F	; 47
     962:	45 e6       	ldi	r20, 0x65	; 101
     964:	52 ec       	ldi	r21, 0xC2	; 194
     966:	c7 01       	movw	r24, r14
     968:	b6 01       	movw	r22, r12
     96a:	51 d5       	rcall	.+2722   	; 0x140e <__mulsf3>
     96c:	2f e6       	ldi	r18, 0x6F	; 111
     96e:	32 e1       	ldi	r19, 0x12	; 18
     970:	43 e8       	ldi	r20, 0x83	; 131
     972:	5b e3       	ldi	r21, 0x3B	; 59
     974:	4c d5       	rcall	.+2712   	; 0x140e <__mulsf3>
			reg=final_angleY;
     976:	6b 01       	movw	r12, r22
     978:	7c 01       	movw	r14, r24
     97a:	2b ed       	ldi	r18, 0xDB	; 219
     97c:	39 ef       	ldi	r19, 0xF9	; 249
			printf(" ");	
     97e:	4e e7       	ldi	r20, 0x7E	; 126
     980:	5f e3       	ldi	r21, 0x3F	; 63
     982:	6d 8d       	ldd	r22, Y+29	; 0x1d
			printf("final_angleY= ");
     984:	7e 8d       	ldd	r23, Y+30	; 0x1e
     986:	8f 8d       	ldd	r24, Y+31	; 0x1f
     988:	98 a1       	ldd	r25, Y+32	; 0x20
     98a:	41 d5       	rcall	.+2690   	; 0x140e <__mulsf3>
     98c:	9b 01       	movw	r18, r22
			print16(&reg);
     98e:	ac 01       	movw	r20, r24
     990:	c7 01       	movw	r24, r14
     992:	b6 01       	movw	r22, r12
     994:	49 d3       	rcall	.+1682   	; 0x1028 <__addsf3>
						
			#ifdef DRV8313
				uint16_t reg_print=final_angleY;
				int absoulute_y=abs(final_angleY);
     996:	6b 01       	movw	r12, r22
     998:	7c 01       	movw	r14, r24
     99a:	2e d4       	rcall	.+2140   	; 0x11f8 <__fixunssfsi>
     99c:	7c 8f       	std	Y+28, r23	; 0x1c
				uint16_t learing_rate=200;				
				uint16_t local_motor_delay=(32735-(absoulute_y*learing_rate));
     99e:	6b 8f       	std	Y+27, r22	; 0x1b
     9a0:	80 e2       	ldi	r24, 0x20	; 32
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	12 d7       	rcall	.+3620   	; 0x17ca <putchar>
     9a6:	86 e6       	ldi	r24, 0x66	; 102
     9a8:	92 e0       	ldi	r25, 0x02	; 2
     9aa:	9f 93       	push	r25
     9ac:	8f 93       	push	r24
     9ae:	fa d6       	rcall	.+3572   	; 0x17a4 <printf>
     9b0:	ce 01       	movw	r24, r28
     9b2:	4b 96       	adiw	r24, 0x1b	; 27
     9b4:	a3 dd       	rcall	.-1210   	; 0x4fc <print16>
     9b6:	c7 01       	movw	r24, r14
     9b8:	b6 01       	movw	r22, r12
     9ba:	19 d4       	rcall	.+2098   	; 0x11ee <__fixsfsi>
     9bc:	8b 01       	movw	r16, r22
				if (local_motor_delay>2000)
     9be:	9b 01       	movw	r18, r22
     9c0:	77 23       	and	r23, r23
     9c2:	24 f4       	brge	.+8      	; 0x9cc <main+0x42c>
     9c4:	22 27       	eor	r18, r18
     9c6:	33 27       	eor	r19, r19
     9c8:	26 1b       	sub	r18, r22
     9ca:	37 0b       	sbc	r19, r23
     9cc:	48 ec       	ldi	r20, 0xC8	; 200
     9ce:	42 9f       	mul	r20, r18
     9d0:	c0 01       	movw	r24, r0
				{
					pwm_delay=local_motor_delay;
     9d2:	43 9f       	mul	r20, r19
     9d4:	90 0d       	add	r25, r0
     9d6:	11 24       	eor	r1, r1
     9d8:	91 01       	movw	r18, r2
				}
				uint16_t reg_ = local_motor_delay;
     9da:	28 1b       	sub	r18, r24
     9dc:	39 0b       	sbc	r19, r25
				printf("  ");
     9de:	c9 01       	movw	r24, r18
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
				printf("ocr= ");
     9ea:	0f 90       	pop	r0
     9ec:	81 3d       	cpi	r24, 0xD1	; 209
     9ee:	37 e0       	ldi	r19, 0x07	; 7
     9f0:	93 07       	cpc	r25, r19
     9f2:	20 f0       	brcs	.+8      	; 0x9fc <main+0x45c>
     9f4:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <pwm_delay+0x1>
				print16(&reg_);
     9f8:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <pwm_delay>
     9fc:	9a 8f       	std	Y+26, r25	; 0x1a
				if ((int)final_angleY==0)
     9fe:	89 8f       	std	Y+25, r24	; 0x19
     a00:	85 e7       	ldi	r24, 0x75	; 117
     a02:	92 e0       	ldi	r25, 0x02	; 2
     a04:	9f 93       	push	r25
     a06:	8f 93       	push	r24
     a08:	cd d6       	rcall	.+3482   	; 0x17a4 <printf>
     a0a:	88 e7       	ldi	r24, 0x78	; 120
				{
					incr=0;
     a0c:	92 e0       	ldi	r25, 0x02	; 2
     a0e:	9f 93       	push	r25
     a10:	8f 93       	push	r24
     a12:	c8 d6       	rcall	.+3472   	; 0x17a4 <printf>
					printf("\n");	
     a14:	ce 01       	movw	r24, r28
     a16:	49 96       	adiw	r24, 0x19	; 25
     a18:	71 dd       	rcall	.-1310   	; 0x4fc <print16>
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
				}
				else 
					if ((int)final_angleY>0)
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
     a22:	01 15       	cp	r16, r1
					{
						cli();
     a24:	11 05       	cpc	r17, r1
						incr=1;
     a26:	41 f4       	brne	.+16     	; 0xa38 <main+0x498>
     a28:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <incr+0x1>
     a2c:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <incr>
     a30:	8a e0       	ldi	r24, 0x0A	; 10
						printf(" yes\n");
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	ca d6       	rcall	.+3476   	; 0x17ca <putchar>
     a36:	42 ce       	rjmp	.-892    	; 0x6bc <main+0x11c>
     a38:	10 16       	cp	r1, r16
						
						sei();
     a3a:	11 06       	cpc	r1, r17
     a3c:	64 f4       	brge	.+24     	; 0xa56 <main+0x4b6>
					}
					else
					{	cli();
     a3e:	f8 94       	cli
						incr=-1;
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <incr+0x1>
     a48:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <incr>
						printf(" no\n");
     a4c:	8e e7       	ldi	r24, 0x7E	; 126
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	c1 d6       	rcall	.+3458   	; 0x17d4 <puts>
     a52:	78 94       	sei
						sei();
     a54:	33 ce       	rjmp	.-922    	; 0x6bc <main+0x11c>
			//	 set_gyro_angles = true;                                            //Set the IMU started flag
			//}
			
			#endif //PRINT_RAW_DATA			
		#endif //GYRO
	}
     a56:	f8 94       	cli
     a58:	8f ef       	ldi	r24, 0xFF	; 255
     a5a:	9f ef       	ldi	r25, 0xFF	; 255
     a5c:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <incr+0x1>
     a60:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <incr>
     a64:	83 e8       	ldi	r24, 0x83	; 131
     a66:	92 e0       	ldi	r25, 0x02	; 2
     a68:	b5 d6       	rcall	.+3434   	; 0x17d4 <puts>
     a6a:	78 94       	sei
     a6c:	27 ce       	rjmp	.-946    	; 0x6bc <main+0x11c>

00000a6e <mpu6050_readByte>:
	printf("  ");
	print16ln(z);
	_delay_ms(1000);
	//-----------------------------------
	*/
}
     a6e:	cf 93       	push	r28
     a70:	c8 2f       	mov	r28, r24
     a72:	80 ed       	ldi	r24, 0xD0	; 208
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	19 d2       	rcall	.+1074   	; 0xeaa <i2c_start>
     a78:	8c 2f       	mov	r24, r28
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	6c d2       	rcall	.+1240   	; 0xf56 <i2c_write>
     a7e:	5b d2       	rcall	.+1206   	; 0xf36 <i2c_stop>
     a80:	81 ed       	ldi	r24, 0xD1	; 209
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	12 d2       	rcall	.+1060   	; 0xeaa <i2c_start>
     a86:	a2 d2       	rcall	.+1348   	; 0xfcc <i2c_readNak>
     a88:	c8 2f       	mov	r28, r24
     a8a:	55 d2       	rcall	.+1194   	; 0xf36 <i2c_stop>
     a8c:	8c 2f       	mov	r24, r28
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <mpu6050_read_gyroX>:
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	83 e4       	ldi	r24, 0x43	; 67
     a98:	ea df       	rcall	.-44     	; 0xa6e <mpu6050_readByte>
     a9a:	c8 2f       	mov	r28, r24
     a9c:	d0 e0       	ldi	r29, 0x00	; 0
     a9e:	dc 2f       	mov	r29, r28
     aa0:	cc 27       	eor	r28, r28
     aa2:	84 e4       	ldi	r24, 0x44	; 68
     aa4:	e4 df       	rcall	.-56     	; 0xa6e <mpu6050_readByte>
     aa6:	9e 01       	movw	r18, r28
     aa8:	28 2b       	or	r18, r24
     aaa:	c9 01       	movw	r24, r18
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	08 95       	ret

00000ab2 <mpu6050_read_gyroY>:
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	85 e4       	ldi	r24, 0x45	; 69
     ab8:	da df       	rcall	.-76     	; 0xa6e <mpu6050_readByte>
     aba:	c8 2f       	mov	r28, r24
     abc:	d0 e0       	ldi	r29, 0x00	; 0
     abe:	dc 2f       	mov	r29, r28
     ac0:	cc 27       	eor	r28, r28
     ac2:	86 e4       	ldi	r24, 0x46	; 70
     ac4:	d4 df       	rcall	.-88     	; 0xa6e <mpu6050_readByte>
     ac6:	9e 01       	movw	r18, r28
     ac8:	28 2b       	or	r18, r24
     aca:	c9 01       	movw	r24, r18
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	08 95       	ret

00000ad2 <mpu6050_read_gyroZ>:
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	87 e4       	ldi	r24, 0x47	; 71
     ad8:	ca df       	rcall	.-108    	; 0xa6e <mpu6050_readByte>
     ada:	c8 2f       	mov	r28, r24
     adc:	d0 e0       	ldi	r29, 0x00	; 0
     ade:	dc 2f       	mov	r29, r28
     ae0:	cc 27       	eor	r28, r28
     ae2:	88 e4       	ldi	r24, 0x48	; 72
     ae4:	c4 df       	rcall	.-120    	; 0xa6e <mpu6050_readByte>
     ae6:	9e 01       	movw	r18, r28
     ae8:	28 2b       	or	r18, r24
     aea:	c9 01       	movw	r24, r18
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	08 95       	ret

00000af2 <mpu6050_calibrate_gyro>:
     af2:	cf 92       	push	r12
     af4:	df 92       	push	r13
     af6:	ef 92       	push	r14
     af8:	ff 92       	push	r15
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	6c 01       	movw	r12, r24
     b04:	7b 01       	movw	r14, r22
     b06:	8a 01       	movw	r16, r20
     b08:	87 e8       	ldi	r24, 0x87	; 135
     b0a:	92 e0       	ldi	r25, 0x02	; 2
     b0c:	63 d6       	rcall	.+3270   	; 0x17d4 <puts>
     b0e:	c8 ec       	ldi	r28, 0xC8	; 200
     b10:	d0 e0       	ldi	r29, 0x00	; 0
     b12:	bf df       	rcall	.-130    	; 0xa92 <mpu6050_read_gyroX>
     b14:	f6 01       	movw	r30, r12
     b16:	40 81       	ld	r20, Z
     b18:	51 81       	ldd	r21, Z+1	; 0x01
     b1a:	62 81       	ldd	r22, Z+2	; 0x02
     b1c:	73 81       	ldd	r23, Z+3	; 0x03
     b1e:	48 0f       	add	r20, r24
     b20:	59 1f       	adc	r21, r25
     b22:	61 1d       	adc	r22, r1
     b24:	71 1d       	adc	r23, r1
     b26:	40 83       	st	Z, r20
     b28:	51 83       	std	Z+1, r21	; 0x01
     b2a:	62 83       	std	Z+2, r22	; 0x02
     b2c:	73 83       	std	Z+3, r23	; 0x03
     b2e:	c1 df       	rcall	.-126    	; 0xab2 <mpu6050_read_gyroY>
     b30:	f7 01       	movw	r30, r14
     b32:	40 81       	ld	r20, Z
     b34:	51 81       	ldd	r21, Z+1	; 0x01
     b36:	62 81       	ldd	r22, Z+2	; 0x02
     b38:	73 81       	ldd	r23, Z+3	; 0x03
     b3a:	48 0f       	add	r20, r24
     b3c:	59 1f       	adc	r21, r25
     b3e:	61 1d       	adc	r22, r1
     b40:	71 1d       	adc	r23, r1
     b42:	40 83       	st	Z, r20
     b44:	51 83       	std	Z+1, r21	; 0x01
     b46:	62 83       	std	Z+2, r22	; 0x02
     b48:	73 83       	std	Z+3, r23	; 0x03
     b4a:	c3 df       	rcall	.-122    	; 0xad2 <mpu6050_read_gyroZ>
     b4c:	f8 01       	movw	r30, r16
     b4e:	40 81       	ld	r20, Z
     b50:	51 81       	ldd	r21, Z+1	; 0x01
     b52:	62 81       	ldd	r22, Z+2	; 0x02
     b54:	73 81       	ldd	r23, Z+3	; 0x03
     b56:	48 0f       	add	r20, r24
     b58:	59 1f       	adc	r21, r25
     b5a:	61 1d       	adc	r22, r1
     b5c:	71 1d       	adc	r23, r1
     b5e:	40 83       	st	Z, r20
     b60:	51 83       	std	Z+1, r21	; 0x01
     b62:	62 83       	std	Z+2, r22	; 0x02
     b64:	73 83       	std	Z+3, r23	; 0x03
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	9f e1       	ldi	r25, 0x1F	; 31
     b6a:	01 97       	sbiw	r24, 0x01	; 1
     b6c:	f1 f7       	brne	.-4      	; 0xb6a <mpu6050_calibrate_gyro+0x78>
     b6e:	00 c0       	rjmp	.+0      	; 0xb70 <mpu6050_calibrate_gyro+0x7e>
     b70:	00 00       	nop
     b72:	21 97       	sbiw	r28, 0x01	; 1
     b74:	71 f6       	brne	.-100    	; 0xb12 <mpu6050_calibrate_gyro+0x20>
     b76:	f6 01       	movw	r30, r12
     b78:	60 81       	ld	r22, Z
     b7a:	71 81       	ldd	r23, Z+1	; 0x01
     b7c:	82 81       	ldd	r24, Z+2	; 0x02
     b7e:	93 81       	ldd	r25, Z+3	; 0x03
     b80:	99 23       	and	r25, r25
     b82:	ac f4       	brge	.+42     	; 0xbae <mpu6050_calibrate_gyro+0xbc>
     b84:	9b 01       	movw	r18, r22
     b86:	77 23       	and	r23, r23
     b88:	24 f4       	brge	.+8      	; 0xb92 <mpu6050_calibrate_gyro+0xa0>
     b8a:	22 27       	eor	r18, r18
     b8c:	33 27       	eor	r19, r19
     b8e:	26 1b       	sub	r18, r22
     b90:	37 0b       	sbc	r19, r23
     b92:	c9 01       	movw	r24, r18
     b94:	68 ec       	ldi	r22, 0xC8	; 200
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	33 d5       	rcall	.+2662   	; 0x1600 <__divmodhi4>
     b9a:	cb 01       	movw	r24, r22
     b9c:	77 0f       	add	r23, r23
     b9e:	aa 0b       	sbc	r26, r26
     ba0:	bb 0b       	sbc	r27, r27
     ba2:	f6 01       	movw	r30, r12
     ba4:	80 83       	st	Z, r24
     ba6:	91 83       	std	Z+1, r25	; 0x01
     ba8:	a2 83       	std	Z+2, r26	; 0x02
     baa:	b3 83       	std	Z+3, r27	; 0x03
     bac:	0a c0       	rjmp	.+20     	; 0xbc2 <mpu6050_calibrate_gyro+0xd0>
     bae:	28 ec       	ldi	r18, 0xC8	; 200
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	37 d5       	rcall	.+2670   	; 0x1626 <__divmodsi4>
     bb8:	f6 01       	movw	r30, r12
     bba:	20 83       	st	Z, r18
     bbc:	31 83       	std	Z+1, r19	; 0x01
     bbe:	42 83       	std	Z+2, r20	; 0x02
     bc0:	53 83       	std	Z+3, r21	; 0x03
     bc2:	f7 01       	movw	r30, r14
     bc4:	60 81       	ld	r22, Z
     bc6:	71 81       	ldd	r23, Z+1	; 0x01
     bc8:	82 81       	ldd	r24, Z+2	; 0x02
     bca:	93 81       	ldd	r25, Z+3	; 0x03
     bcc:	99 23       	and	r25, r25
     bce:	ac f4       	brge	.+42     	; 0xbfa <mpu6050_calibrate_gyro+0x108>
     bd0:	9b 01       	movw	r18, r22
     bd2:	77 23       	and	r23, r23
     bd4:	24 f4       	brge	.+8      	; 0xbde <mpu6050_calibrate_gyro+0xec>
     bd6:	22 27       	eor	r18, r18
     bd8:	33 27       	eor	r19, r19
     bda:	26 1b       	sub	r18, r22
     bdc:	37 0b       	sbc	r19, r23
     bde:	c9 01       	movw	r24, r18
     be0:	68 ec       	ldi	r22, 0xC8	; 200
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	0d d5       	rcall	.+2586   	; 0x1600 <__divmodhi4>
     be6:	cb 01       	movw	r24, r22
     be8:	77 0f       	add	r23, r23
     bea:	aa 0b       	sbc	r26, r26
     bec:	bb 0b       	sbc	r27, r27
     bee:	f7 01       	movw	r30, r14
     bf0:	80 83       	st	Z, r24
     bf2:	91 83       	std	Z+1, r25	; 0x01
     bf4:	a2 83       	std	Z+2, r26	; 0x02
     bf6:	b3 83       	std	Z+3, r27	; 0x03
     bf8:	0a c0       	rjmp	.+20     	; 0xc0e <mpu6050_calibrate_gyro+0x11c>
     bfa:	28 ec       	ldi	r18, 0xC8	; 200
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	11 d5       	rcall	.+2594   	; 0x1626 <__divmodsi4>
     c04:	f7 01       	movw	r30, r14
     c06:	20 83       	st	Z, r18
     c08:	31 83       	std	Z+1, r19	; 0x01
     c0a:	42 83       	std	Z+2, r20	; 0x02
     c0c:	53 83       	std	Z+3, r21	; 0x03
     c0e:	f8 01       	movw	r30, r16
     c10:	60 81       	ld	r22, Z
     c12:	71 81       	ldd	r23, Z+1	; 0x01
     c14:	82 81       	ldd	r24, Z+2	; 0x02
     c16:	93 81       	ldd	r25, Z+3	; 0x03
     c18:	99 23       	and	r25, r25
     c1a:	ac f4       	brge	.+42     	; 0xc46 <mpu6050_calibrate_gyro+0x154>
     c1c:	9b 01       	movw	r18, r22
     c1e:	77 23       	and	r23, r23
     c20:	24 f4       	brge	.+8      	; 0xc2a <mpu6050_calibrate_gyro+0x138>
     c22:	22 27       	eor	r18, r18
     c24:	33 27       	eor	r19, r19
     c26:	26 1b       	sub	r18, r22
     c28:	37 0b       	sbc	r19, r23
     c2a:	c9 01       	movw	r24, r18
     c2c:	68 ec       	ldi	r22, 0xC8	; 200
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	e7 d4       	rcall	.+2510   	; 0x1600 <__divmodhi4>
     c32:	cb 01       	movw	r24, r22
     c34:	77 0f       	add	r23, r23
     c36:	aa 0b       	sbc	r26, r26
     c38:	bb 0b       	sbc	r27, r27
     c3a:	f8 01       	movw	r30, r16
     c3c:	80 83       	st	Z, r24
     c3e:	91 83       	std	Z+1, r25	; 0x01
     c40:	a2 83       	std	Z+2, r26	; 0x02
     c42:	b3 83       	std	Z+3, r27	; 0x03
     c44:	0a c0       	rjmp	.+20     	; 0xc5a <mpu6050_calibrate_gyro+0x168>
     c46:	28 ec       	ldi	r18, 0xC8	; 200
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	40 e0       	ldi	r20, 0x00	; 0
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	eb d4       	rcall	.+2518   	; 0x1626 <__divmodsi4>
     c50:	f8 01       	movw	r30, r16
     c52:	20 83       	st	Z, r18
     c54:	31 83       	std	Z+1, r19	; 0x01
     c56:	42 83       	std	Z+2, r20	; 0x02
     c58:	53 83       	std	Z+3, r21	; 0x03
     c5a:	8d e9       	ldi	r24, 0x9D	; 157
     c5c:	92 e0       	ldi	r25, 0x02	; 2
     c5e:	9f 93       	push	r25
     c60:	8f 93       	push	r24
     c62:	a0 d5       	rcall	.+2880   	; 0x17a4 <printf>
     c64:	c6 01       	movw	r24, r12
     c66:	4a dc       	rcall	.-1900   	; 0x4fc <print16>
     c68:	c5 e7       	ldi	r28, 0x75	; 117
     c6a:	d2 e0       	ldi	r29, 0x02	; 2
     c6c:	df 93       	push	r29
     c6e:	cf 93       	push	r28
     c70:	99 d5       	rcall	.+2866   	; 0x17a4 <printf>
     c72:	c7 01       	movw	r24, r14
     c74:	43 dc       	rcall	.-1914   	; 0x4fc <print16>
     c76:	df 93       	push	r29
     c78:	cf 93       	push	r28
     c7a:	94 d5       	rcall	.+2856   	; 0x17a4 <printf>
     c7c:	c8 01       	movw	r24, r16
     c7e:	65 dc       	rcall	.-1846   	; 0x54a <print16ln>
     c80:	ef ef       	ldi	r30, 0xFF	; 255
     c82:	f3 ed       	ldi	r31, 0xD3	; 211
     c84:	20 e3       	ldi	r18, 0x30	; 48
     c86:	e1 50       	subi	r30, 0x01	; 1
     c88:	f0 40       	sbci	r31, 0x00	; 0
     c8a:	20 40       	sbci	r18, 0x00	; 0
     c8c:	e1 f7       	brne	.-8      	; 0xc86 <mpu6050_calibrate_gyro+0x194>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <mpu6050_calibrate_gyro+0x19e>
     c90:	00 00       	nop
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	ff 90       	pop	r15
     ca8:	ef 90       	pop	r14
     caa:	df 90       	pop	r13
     cac:	cf 90       	pop	r12
     cae:	08 95       	ret

00000cb0 <mpu6050_writeByte>:
	uint8_t byteToReturn=i2c_readNak();
	i2c_stop();
	return byteToReturn;
}
void mpu6050_writeByte(uint8_t wereToWrite,uint8_t byteToWrite)//writebyte
{
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	d8 2f       	mov	r29, r24
     cb6:	c6 2f       	mov	r28, r22
	i2c_start(MPU6050_WRITE);
     cb8:	80 ed       	ldi	r24, 0xD0	; 208
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	f6 d0       	rcall	.+492    	; 0xeaa <i2c_start>
	i2c_write(wereToWrite);
     cbe:	8d 2f       	mov	r24, r29
     cc0:	90 e0       	ldi	r25, 0x00	; 0
	i2c_write(byteToWrite);
     cc2:	49 d1       	rcall	.+658    	; 0xf56 <i2c_write>
     cc4:	8c 2f       	mov	r24, r28
	i2c_stop();
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	46 d1       	rcall	.+652    	; 0xf56 <i2c_write>
}
     cca:	35 d1       	rcall	.+618    	; 0xf36 <i2c_stop>
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	08 95       	ret

00000cd2 <mpu6050_readBytes>:
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
     cd2:	af 92       	push	r10
     cd4:	bf 92       	push	r11
     cd6:	cf 92       	push	r12
     cd8:	df 92       	push	r13
     cda:	ff 92       	push	r15
     cdc:	0f 93       	push	r16
     cde:	1f 93       	push	r17
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
     ce4:	66 23       	and	r22, r22
     ce6:	a1 f1       	breq	.+104    	; 0xd50 <mpu6050_readBytes+0x7e>
     ce8:	c5 2f       	mov	r28, r21
     cea:	d4 2f       	mov	r29, r20
     cec:	f6 2e       	mov	r15, r22
     cee:	18 2f       	mov	r17, r24
		//request register
		i2c_start(MPU6050_WRITE);
     cf0:	80 ed       	ldi	r24, 0xD0	; 208
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	da d0       	rcall	.+436    	; 0xeaa <i2c_start>
		i2c_write(regAddr);
     cf6:	81 2f       	mov	r24, r17
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	2d d1       	rcall	.+602    	; 0xf56 <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cfc:	85 e3       	ldi	r24, 0x35	; 53
     cfe:	8a 95       	dec	r24
     d00:	f1 f7       	brne	.-4      	; 0xcfe <mpu6050_readBytes+0x2c>
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
     d02:	00 00       	nop
     d04:	81 ed       	ldi	r24, 0xD1	; 209
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	d0 d0       	rcall	.+416    	; 0xeaa <i2c_start>
     d0a:	0d 2f       	mov	r16, r29
     d0c:	1c 2f       	mov	r17, r28
     d0e:	cc 24       	eor	r12, r12
     d10:	ca 94       	dec	r12
     d12:	cf 0c       	add	r12, r15
     d14:	d1 2c       	mov	r13, r1
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	ce 1a       	sub	r12, r30
     d1a:	de 0a       	sbc	r13, r30
     d1c:	c0 e0       	ldi	r28, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
     d1e:	d0 e0       	ldi	r29, 0x00	; 0
     d20:	af 2c       	mov	r10, r15
     d22:	b1 2c       	mov	r11, r1
     d24:	f1 e0       	ldi	r31, 0x01	; 1
     d26:	af 1a       	sub	r10, r31
     d28:	b1 08       	sbc	r11, r1
     d2a:	ac 16       	cp	r10, r28
			data[i] = i2c_readNak();
     d2c:	bd 06       	cpc	r11, r29
     d2e:	21 f4       	brne	.+8      	; 0xd38 <mpu6050_readBytes+0x66>
     d30:	4d d1       	rcall	.+666    	; 0xfcc <i2c_readNak>
     d32:	f8 01       	movw	r30, r16
			else
			data[i] = i2c_readAck();
     d34:	80 83       	st	Z, r24
     d36:	03 c0       	rjmp	.+6      	; 0xd3e <mpu6050_readBytes+0x6c>
     d38:	2f d1       	rcall	.+606    	; 0xf98 <i2c_readAck>
     d3a:	f8 01       	movw	r30, r16
     d3c:	80 83       	st	Z, r24
     d3e:	21 96       	adiw	r28, 0x01	; 1
		i2c_start(MPU6050_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_READ);
		for(i=0; i<length; i++) {
     d40:	0f 5f       	subi	r16, 0xFF	; 255
     d42:	1f 4f       	sbci	r17, 0xFF	; 255
     d44:	cc 15       	cp	r28, r12
     d46:	dd 05       	cpc	r29, r13
			if(i==length-1)
			data[i] = i2c_readNak();
			else
			data[i] = i2c_readAck();
		}
		i2c_stop();
     d48:	81 f7       	brne	.-32     	; 0xd2a <mpu6050_readBytes+0x58>
     d4a:	cf 2d       	mov	r28, r15
     d4c:	f4 d0       	rcall	.+488    	; 0xf36 <i2c_stop>
	i2c_write(byteToWrite);
	i2c_stop();
}
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
	uint8_t i = 0;
	int8_t count = 0;
     d4e:	01 c0       	rjmp	.+2      	; 0xd52 <mpu6050_readBytes+0x80>
			data[i] = i2c_readAck();
		}
		i2c_stop();
	}
	return count;
}
     d50:	c0 e0       	ldi	r28, 0x00	; 0
     d52:	8c 2f       	mov	r24, r28
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	1f 91       	pop	r17
     d5a:	0f 91       	pop	r16
     d5c:	ff 90       	pop	r15
     d5e:	df 90       	pop	r13
     d60:	cf 90       	pop	r12
     d62:	bf 90       	pop	r11
     d64:	af 90       	pop	r10
     d66:	08 95       	ret

00000d68 <mpu6050_getRawData>:
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     d68:	6f 92       	push	r6
     d6a:	7f 92       	push	r7
     d6c:	8f 92       	push	r8
     d6e:	9f 92       	push	r9
     d70:	af 92       	push	r10
     d72:	bf 92       	push	r11
     d74:	cf 92       	push	r12
     d76:	df 92       	push	r13
     d78:	ef 92       	push	r14
     d7a:	ff 92       	push	r15
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	2e 97       	sbiw	r28, 0x0e	; 14
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	cd bf       	out	0x3d, r28	; 61
     d94:	4c 01       	movw	r8, r24
     d96:	5b 01       	movw	r10, r22
     d98:	6a 01       	movw	r12, r20
     d9a:	39 01       	movw	r6, r18
	uint8_t buffer[14];
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14,  buffer);
     d9c:	ae 01       	movw	r20, r28
     d9e:	4f 5f       	subi	r20, 0xFF	; 255
     da0:	5f 4f       	sbci	r21, 0xFF	; 255
     da2:	6e e0       	ldi	r22, 0x0E	; 14
     da4:	8b e3       	ldi	r24, 0x3B	; 59
     da6:	95 df       	rcall	.-214    	; 0xcd2 <mpu6050_readBytes>
	*ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	98 2f       	mov	r25, r24
     dae:	88 27       	eor	r24, r24
     db0:	2a 81       	ldd	r18, Y+2	; 0x02
     db2:	82 2b       	or	r24, r18
     db4:	f4 01       	movw	r30, r8
     db6:	91 83       	std	Z+1, r25	; 0x01
     db8:	80 83       	st	Z, r24
	*ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	98 2f       	mov	r25, r24
     dc0:	88 27       	eor	r24, r24
     dc2:	2c 81       	ldd	r18, Y+4	; 0x04
     dc4:	82 2b       	or	r24, r18
     dc6:	f5 01       	movw	r30, r10
     dc8:	91 83       	std	Z+1, r25	; 0x01
     dca:	80 83       	st	Z, r24
	*az = (((int16_t)buffer[4]) << 8) | buffer[5];
     dcc:	8d 81       	ldd	r24, Y+5	; 0x05
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	98 2f       	mov	r25, r24
     dd2:	88 27       	eor	r24, r24
     dd4:	2e 81       	ldd	r18, Y+6	; 0x06
     dd6:	82 2b       	or	r24, r18
     dd8:	f6 01       	movw	r30, r12
     dda:	91 83       	std	Z+1, r25	; 0x01
     ddc:	80 83       	st	Z, r24
	*gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     dde:	89 85       	ldd	r24, Y+9	; 0x09
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	98 2f       	mov	r25, r24
     de4:	88 27       	eor	r24, r24
     de6:	2a 85       	ldd	r18, Y+10	; 0x0a
     de8:	82 2b       	or	r24, r18
     dea:	f3 01       	movw	r30, r6
     dec:	91 83       	std	Z+1, r25	; 0x01
     dee:	80 83       	st	Z, r24
	*gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     df0:	8b 85       	ldd	r24, Y+11	; 0x0b
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	98 2f       	mov	r25, r24
     df6:	88 27       	eor	r24, r24
     df8:	2c 85       	ldd	r18, Y+12	; 0x0c
     dfa:	82 2b       	or	r24, r18
     dfc:	f8 01       	movw	r30, r16
     dfe:	91 83       	std	Z+1, r25	; 0x01
     e00:	80 83       	st	Z, r24
	*gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     e02:	8d 85       	ldd	r24, Y+13	; 0x0d
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	98 2f       	mov	r25, r24
     e08:	88 27       	eor	r24, r24
     e0a:	2e 85       	ldd	r18, Y+14	; 0x0e
     e0c:	82 2b       	or	r24, r18
     e0e:	f7 01       	movw	r30, r14
     e10:	91 83       	std	Z+1, r25	; 0x01
     e12:	80 83       	st	Z, r24
     e14:	2e 96       	adiw	r28, 0x0e	; 14
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	ff 90       	pop	r15
     e2a:	ef 90       	pop	r14
     e2c:	df 90       	pop	r13
     e2e:	cf 90       	pop	r12
     e30:	bf 90       	pop	r11
     e32:	af 90       	pop	r10
     e34:	9f 90       	pop	r9
     e36:	8f 90       	pop	r8
     e38:	7f 90       	pop	r7
     e3a:	6f 90       	pop	r6
     e3c:	08 95       	ret

00000e3e <setup_timer4>:

#define clockCyclesPerMicrosecond () ( F_CPU / 1000000L )

/*-----------Timter 1-----------*/
void setup_timer4(void){
    sbi (TCCR4B, CS40);//prescakaer 256
     e3e:	e1 ea       	ldi	r30, 0xA1	; 161
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	81 60       	ori	r24, 0x01	; 1
     e46:	80 83       	st	Z, r24
    sbi (TCCR4A, WGM40);//8 bit phase correct PWM
     e48:	e0 ea       	ldi	r30, 0xA0	; 160
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	81 60       	ori	r24, 0x01	; 1
     e50:	80 83       	st	Z, r24
	
	//sbi (TCCR4A,COM4A0);
	sbi (TCCR4A,COM4A1);
     e52:	80 81       	ld	r24, Z
     e54:	80 68       	ori	r24, 0x80	; 128
     e56:	80 83       	st	Z, r24
	//sbi (TCCR4A,COM4B0);
	sbi (TCCR4A,COM4B1);
     e58:	80 81       	ld	r24, Z
     e5a:	80 62       	ori	r24, 0x20	; 32
     e5c:	80 83       	st	Z, r24
	//sbi (TCCR4A,COM4C0);
	sbi (TCCR4A,COM4C1);
     e5e:	80 81       	ld	r24, Z
     e60:	88 60       	ori	r24, 0x08	; 8
     e62:	80 83       	st	Z, r24
     e64:	08 95       	ret

00000e66 <setup_timer5>:
}


/*-----------Timter 5-----------*/
void setup_timer5(void){
	sbi (TCCR5B, CS50);//only this 8
     e66:	e1 e2       	ldi	r30, 0x21	; 33
     e68:	f1 e0       	ldi	r31, 0x01	; 1
     e6a:	80 81       	ld	r24, Z
     e6c:	81 60       	ori	r24, 0x01	; 1
     e6e:	80 83       	st	Z, r24
	//sbi (TCCR5B, CS52);//only this 256
	sbi (TCCR5B, WGM52);//OCR4A compare interrupt
     e70:	80 81       	ld	r24, Z
     e72:	88 60       	ori	r24, 0x08	; 8
     e74:	80 83       	st	Z, r24
     e76:	08 95       	ret

00000e78 <Enable_timer5_compare_interrupt>:
	
}
void Enable_timer5_compare_interrupt(){
	sbi (TIMSK5, OCIE5A);
     e78:	e3 e7       	ldi	r30, 0x73	; 115
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	82 60       	ori	r24, 0x02	; 2
     e80:	80 83       	st	Z, r24
     e82:	08 95       	ret

00000e84 <setup_timer0>:
}
/*-----------Timter 2-----------*/
void setup_timer0(void){
	sbi(TCCR0B,CS00);
     e84:	85 b5       	in	r24, 0x25	; 37
     e86:	81 60       	ori	r24, 0x01	; 1
     e88:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B,CS01);;//prescaler 64 , 250khz timer
     e8a:	85 b5       	in	r24, 0x25	; 37
     e8c:	82 60       	ori	r24, 0x02	; 2
     e8e:	85 bd       	out	0x25, r24	; 37
     e90:	08 95       	ret

00000e92 <Enable_timer0_overflow_interrupt>:
}
void Enable_timer0_overflow_interrupt(){
	sbi(TIMSK0,TOIE0);
     e92:	ee e6       	ldi	r30, 0x6E	; 110
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	81 60       	ori	r24, 0x01	; 1
     e9a:	80 83       	st	Z, r24
     e9c:	08 95       	ret

00000e9e <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     e9e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     ea2:	8c e0       	ldi	r24, 0x0C	; 12
     ea4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     ea8:	08 95       	ret

00000eaa <i2c_start>:
     eaa:	94 ea       	ldi	r25, 0xA4	; 164
     eac:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     eb0:	4f ef       	ldi	r20, 0xFF	; 255
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	ec eb       	ldi	r30, 0xBC	; 188
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	90 81       	ld	r25, Z
     ebe:	99 23       	and	r25, r25
     ec0:	34 f0       	brlt	.+12     	; 0xece <i2c_start+0x24>
     ec2:	41 50       	subi	r20, 0x01	; 1
     ec4:	51 09       	sbc	r21, r1
     ec6:	61 09       	sbc	r22, r1
     ec8:	71 09       	sbc	r23, r1
     eca:	c0 f7       	brcc	.-16     	; 0xebc <i2c_start+0x12>
     ecc:	04 c0       	rjmp	.+8      	; 0xed6 <i2c_start+0x2c>
     ece:	45 2b       	or	r20, r21
     ed0:	46 2b       	or	r20, r22
     ed2:	47 2b       	or	r20, r23
     ed4:	41 f1       	breq	.+80     	; 0xf26 <i2c_start+0x7c>
     ed6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     eda:	98 7f       	andi	r25, 0xF8	; 248
     edc:	98 30       	cpi	r25, 0x08	; 8
     ede:	11 f0       	breq	.+4      	; 0xee4 <i2c_start+0x3a>
     ee0:	90 31       	cpi	r25, 0x10	; 16
     ee2:	19 f5       	brne	.+70     	; 0xf2a <i2c_start+0x80>
     ee4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     ee8:	84 e8       	ldi	r24, 0x84	; 132
     eea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     eee:	8f ef       	ldi	r24, 0xFF	; 255
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	a0 e0       	ldi	r26, 0x00	; 0
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	ec eb       	ldi	r30, 0xBC	; 188
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	20 81       	ld	r18, Z
     efc:	22 23       	and	r18, r18
     efe:	2c f0       	brlt	.+10     	; 0xf0a <i2c_start+0x60>
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	a1 09       	sbc	r26, r1
     f04:	b1 09       	sbc	r27, r1
     f06:	c8 f7       	brcc	.-14     	; 0xefa <i2c_start+0x50>
     f08:	04 c0       	rjmp	.+8      	; 0xf12 <i2c_start+0x68>
     f0a:	89 2b       	or	r24, r25
     f0c:	8a 2b       	or	r24, r26
     f0e:	8b 2b       	or	r24, r27
     f10:	71 f0       	breq	.+28     	; 0xf2e <i2c_start+0x84>
     f12:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     f16:	98 7f       	andi	r25, 0xF8	; 248
     f18:	98 31       	cpi	r25, 0x18	; 24
     f1a:	59 f0       	breq	.+22     	; 0xf32 <i2c_start+0x88>
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 34       	cpi	r25, 0x40	; 64
     f20:	49 f4       	brne	.+18     	; 0xf34 <i2c_start+0x8a>
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	08 95       	ret
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	08 95       	ret
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	08 95       	ret
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	08 95       	ret
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	08 95       	ret

00000f36 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     f36:	84 e9       	ldi	r24, 0x94	; 148
     f38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	ec eb       	ldi	r30, 0xBC	; 188
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	20 81       	ld	r18, Z
     f46:	24 ff       	sbrs	r18, 4
     f48:	05 c0       	rjmp	.+10     	; 0xf54 <i2c_stop+0x1e>
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	81 15       	cp	r24, r1
     f4e:	21 e0       	ldi	r18, 0x01	; 1
     f50:	92 07       	cpc	r25, r18
     f52:	c1 f7       	brne	.-16     	; 0xf44 <i2c_stop+0xe>
     f54:	08 95       	ret

00000f56 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     f56:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     f5a:	84 e8       	ldi	r24, 0x84	; 132
     f5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     f60:	8f ef       	ldi	r24, 0xFF	; 255
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	a0 e0       	ldi	r26, 0x00	; 0
     f66:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     f68:	ec eb       	ldi	r30, 0xBC	; 188
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	20 81       	ld	r18, Z
     f6e:	22 23       	and	r18, r18
     f70:	2c f0       	brlt	.+10     	; 0xf7c <i2c_write+0x26>
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	a1 09       	sbc	r26, r1
     f76:	b1 09       	sbc	r27, r1
     f78:	c8 f7       	brcc	.-14     	; 0xf6c <i2c_write+0x16>
     f7a:	04 c0       	rjmp	.+8      	; 0xf84 <i2c_write+0x2e>
	if(i2c_timer == 0)
     f7c:	89 2b       	or	r24, r25
     f7e:	8a 2b       	or	r24, r26
     f80:	8b 2b       	or	r24, r27
     f82:	41 f0       	breq	.+16     	; 0xf94 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     f84:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     f88:	98 7f       	andi	r25, 0xF8	; 248
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	98 32       	cpi	r25, 0x28	; 40
     f8e:	19 f4       	brne	.+6      	; 0xf96 <i2c_write+0x40>
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	08 95       	ret
     f94:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     f96:	08 95       	ret

00000f98 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     f98:	84 ec       	ldi	r24, 0xC4	; 196
     f9a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
     f9e:	8f ef       	ldi	r24, 0xFF	; 255
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	a0 e0       	ldi	r26, 0x00	; 0
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     fa6:	ec eb       	ldi	r30, 0xBC	; 188
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	20 81       	ld	r18, Z
     fac:	22 23       	and	r18, r18
     fae:	2c f0       	brlt	.+10     	; 0xfba <i2c_readAck+0x22>
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	a1 09       	sbc	r26, r1
     fb4:	b1 09       	sbc	r27, r1
     fb6:	c8 f7       	brcc	.-14     	; 0xfaa <i2c_readAck+0x12>
     fb8:	04 c0       	rjmp	.+8      	; 0xfc2 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     fba:	89 2b       	or	r24, r25
     fbc:	8a 2b       	or	r24, r26
     fbe:	8b 2b       	or	r24, r27
     fc0:	19 f0       	breq	.+6      	; 0xfc8 <i2c_readAck+0x30>
		return 0;

    return TWDR;
     fc2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     fc6:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     fc8:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     fca:	08 95       	ret

00000fcc <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     fcc:	84 e8       	ldi	r24, 0x84	; 132
     fce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	i2c_timer = I2C_TIMER_DELAY;
     fd2:	8f ef       	ldi	r24, 0xFF	; 255
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	a0 e0       	ldi	r26, 0x00	; 0
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     fda:	ec eb       	ldi	r30, 0xBC	; 188
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	20 81       	ld	r18, Z
     fe0:	22 23       	and	r18, r18
     fe2:	2c f0       	brlt	.+10     	; 0xfee <i2c_readNak+0x22>
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	a1 09       	sbc	r26, r1
     fe8:	b1 09       	sbc	r27, r1
     fea:	c8 f7       	brcc	.-14     	; 0xfde <i2c_readNak+0x12>
     fec:	04 c0       	rjmp	.+8      	; 0xff6 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     fee:	89 2b       	or	r24, r25
     ff0:	8a 2b       	or	r24, r26
     ff2:	8b 2b       	or	r24, r27
     ff4:	19 f0       	breq	.+6      	; 0xffc <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     ff6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     ffa:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     ffc:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     ffe:	08 95       	ret

00001000 <USART_Init>:
#include <avr/io.h>
#include <stdio.h>
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
    1000:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;
    1004:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	UCSR0B = (1<<TXEN0);// | (1<<TXCIE0);
    1008:	88 e0       	ldi	r24, 0x08	; 8
    100a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);//2 stop bit 8 bit
    100e:	8e e0       	ldi	r24, 0x0E	; 14
    1010:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1014:	08 95       	ret

00001016 <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
    1016:	e0 ec       	ldi	r30, 0xC0	; 192
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	90 81       	ld	r25, Z
    101c:	95 ff       	sbrs	r25, 5
    101e:	fd cf       	rjmp	.-6      	; 0x101a <USART_Transmit+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
    1020:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1024:	08 95       	ret

00001026 <__subsf3>:
    1026:	50 58       	subi	r21, 0x80	; 128

00001028 <__addsf3>:
    1028:	bb 27       	eor	r27, r27
    102a:	aa 27       	eor	r26, r26
    102c:	0e d0       	rcall	.+28     	; 0x104a <__addsf3x>
    102e:	b5 c1       	rjmp	.+874    	; 0x139a <__fp_round>
    1030:	a6 d1       	rcall	.+844    	; 0x137e <__fp_pscA>
    1032:	30 f0       	brcs	.+12     	; 0x1040 <__addsf3+0x18>
    1034:	ab d1       	rcall	.+854    	; 0x138c <__fp_pscB>
    1036:	20 f0       	brcs	.+8      	; 0x1040 <__addsf3+0x18>
    1038:	31 f4       	brne	.+12     	; 0x1046 <__addsf3+0x1e>
    103a:	9f 3f       	cpi	r25, 0xFF	; 255
    103c:	11 f4       	brne	.+4      	; 0x1042 <__addsf3+0x1a>
    103e:	1e f4       	brtc	.+6      	; 0x1046 <__addsf3+0x1e>
    1040:	65 c1       	rjmp	.+714    	; 0x130c <__fp_nan>
    1042:	0e f4       	brtc	.+2      	; 0x1046 <__addsf3+0x1e>
    1044:	e0 95       	com	r30
    1046:	e7 fb       	bst	r30, 7
    1048:	5b c1       	rjmp	.+694    	; 0x1300 <__fp_inf>

0000104a <__addsf3x>:
    104a:	e9 2f       	mov	r30, r25
    104c:	b7 d1       	rcall	.+878    	; 0x13bc <__fp_split3>
    104e:	80 f3       	brcs	.-32     	; 0x1030 <__addsf3+0x8>
    1050:	ba 17       	cp	r27, r26
    1052:	62 07       	cpc	r22, r18
    1054:	73 07       	cpc	r23, r19
    1056:	84 07       	cpc	r24, r20
    1058:	95 07       	cpc	r25, r21
    105a:	18 f0       	brcs	.+6      	; 0x1062 <__addsf3x+0x18>
    105c:	71 f4       	brne	.+28     	; 0x107a <__addsf3x+0x30>
    105e:	9e f5       	brtc	.+102    	; 0x10c6 <__addsf3x+0x7c>
    1060:	cf c1       	rjmp	.+926    	; 0x1400 <__fp_zero>
    1062:	0e f4       	brtc	.+2      	; 0x1066 <__addsf3x+0x1c>
    1064:	e0 95       	com	r30
    1066:	0b 2e       	mov	r0, r27
    1068:	ba 2f       	mov	r27, r26
    106a:	a0 2d       	mov	r26, r0
    106c:	0b 01       	movw	r0, r22
    106e:	b9 01       	movw	r22, r18
    1070:	90 01       	movw	r18, r0
    1072:	0c 01       	movw	r0, r24
    1074:	ca 01       	movw	r24, r20
    1076:	a0 01       	movw	r20, r0
    1078:	11 24       	eor	r1, r1
    107a:	ff 27       	eor	r31, r31
    107c:	59 1b       	sub	r21, r25
    107e:	99 f0       	breq	.+38     	; 0x10a6 <__addsf3x+0x5c>
    1080:	59 3f       	cpi	r21, 0xF9	; 249
    1082:	50 f4       	brcc	.+20     	; 0x1098 <__addsf3x+0x4e>
    1084:	50 3e       	cpi	r21, 0xE0	; 224
    1086:	68 f1       	brcs	.+90     	; 0x10e2 <__addsf3x+0x98>
    1088:	1a 16       	cp	r1, r26
    108a:	f0 40       	sbci	r31, 0x00	; 0
    108c:	a2 2f       	mov	r26, r18
    108e:	23 2f       	mov	r18, r19
    1090:	34 2f       	mov	r19, r20
    1092:	44 27       	eor	r20, r20
    1094:	58 5f       	subi	r21, 0xF8	; 248
    1096:	f3 cf       	rjmp	.-26     	; 0x107e <__addsf3x+0x34>
    1098:	46 95       	lsr	r20
    109a:	37 95       	ror	r19
    109c:	27 95       	ror	r18
    109e:	a7 95       	ror	r26
    10a0:	f0 40       	sbci	r31, 0x00	; 0
    10a2:	53 95       	inc	r21
    10a4:	c9 f7       	brne	.-14     	; 0x1098 <__addsf3x+0x4e>
    10a6:	7e f4       	brtc	.+30     	; 0x10c6 <__addsf3x+0x7c>
    10a8:	1f 16       	cp	r1, r31
    10aa:	ba 0b       	sbc	r27, r26
    10ac:	62 0b       	sbc	r22, r18
    10ae:	73 0b       	sbc	r23, r19
    10b0:	84 0b       	sbc	r24, r20
    10b2:	ba f0       	brmi	.+46     	; 0x10e2 <__addsf3x+0x98>
    10b4:	91 50       	subi	r25, 0x01	; 1
    10b6:	a1 f0       	breq	.+40     	; 0x10e0 <__addsf3x+0x96>
    10b8:	ff 0f       	add	r31, r31
    10ba:	bb 1f       	adc	r27, r27
    10bc:	66 1f       	adc	r22, r22
    10be:	77 1f       	adc	r23, r23
    10c0:	88 1f       	adc	r24, r24
    10c2:	c2 f7       	brpl	.-16     	; 0x10b4 <__addsf3x+0x6a>
    10c4:	0e c0       	rjmp	.+28     	; 0x10e2 <__addsf3x+0x98>
    10c6:	ba 0f       	add	r27, r26
    10c8:	62 1f       	adc	r22, r18
    10ca:	73 1f       	adc	r23, r19
    10cc:	84 1f       	adc	r24, r20
    10ce:	48 f4       	brcc	.+18     	; 0x10e2 <__addsf3x+0x98>
    10d0:	87 95       	ror	r24
    10d2:	77 95       	ror	r23
    10d4:	67 95       	ror	r22
    10d6:	b7 95       	ror	r27
    10d8:	f7 95       	ror	r31
    10da:	9e 3f       	cpi	r25, 0xFE	; 254
    10dc:	08 f0       	brcs	.+2      	; 0x10e0 <__addsf3x+0x96>
    10de:	b3 cf       	rjmp	.-154    	; 0x1046 <__addsf3+0x1e>
    10e0:	93 95       	inc	r25
    10e2:	88 0f       	add	r24, r24
    10e4:	08 f0       	brcs	.+2      	; 0x10e8 <__addsf3x+0x9e>
    10e6:	99 27       	eor	r25, r25
    10e8:	ee 0f       	add	r30, r30
    10ea:	97 95       	ror	r25
    10ec:	87 95       	ror	r24
    10ee:	08 95       	ret

000010f0 <asin>:
    10f0:	9f 93       	push	r25
    10f2:	9f 77       	andi	r25, 0x7F	; 127
    10f4:	ee e3       	ldi	r30, 0x3E	; 62
    10f6:	89 37       	cpi	r24, 0x79	; 121
    10f8:	9e 07       	cpc	r25, r30
    10fa:	20 f4       	brcc	.+8      	; 0x1104 <asin+0x14>
    10fc:	e4 ee       	ldi	r30, 0xE4	; 228
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	2d d1       	rcall	.+602    	; 0x135c <__fp_powsodd>
    1102:	09 c0       	rjmp	.+18     	; 0x1116 <asin+0x26>
    1104:	e2 d0       	rcall	.+452    	; 0x12ca <__fp_arccos>
    1106:	90 58       	subi	r25, 0x80	; 128
    1108:	a2 ea       	ldi	r26, 0xA2	; 162
    110a:	2a ed       	ldi	r18, 0xDA	; 218
    110c:	3f e0       	ldi	r19, 0x0F	; 15
    110e:	49 ec       	ldi	r20, 0xC9	; 201
    1110:	5f e3       	ldi	r21, 0x3F	; 63
    1112:	9b df       	rcall	.-202    	; 0x104a <__addsf3x>
    1114:	42 d1       	rcall	.+644    	; 0x139a <__fp_round>
    1116:	0f 90       	pop	r0
    1118:	07 fc       	sbrc	r0, 7
    111a:	90 58       	subi	r25, 0x80	; 128
    111c:	08 95       	ret

0000111e <__divsf3>:
    111e:	0c d0       	rcall	.+24     	; 0x1138 <__divsf3x>
    1120:	3c c1       	rjmp	.+632    	; 0x139a <__fp_round>
    1122:	34 d1       	rcall	.+616    	; 0x138c <__fp_pscB>
    1124:	40 f0       	brcs	.+16     	; 0x1136 <__divsf3+0x18>
    1126:	2b d1       	rcall	.+598    	; 0x137e <__fp_pscA>
    1128:	30 f0       	brcs	.+12     	; 0x1136 <__divsf3+0x18>
    112a:	21 f4       	brne	.+8      	; 0x1134 <__divsf3+0x16>
    112c:	5f 3f       	cpi	r21, 0xFF	; 255
    112e:	19 f0       	breq	.+6      	; 0x1136 <__divsf3+0x18>
    1130:	e7 c0       	rjmp	.+462    	; 0x1300 <__fp_inf>
    1132:	51 11       	cpse	r21, r1
    1134:	66 c1       	rjmp	.+716    	; 0x1402 <__fp_szero>
    1136:	ea c0       	rjmp	.+468    	; 0x130c <__fp_nan>

00001138 <__divsf3x>:
    1138:	41 d1       	rcall	.+642    	; 0x13bc <__fp_split3>
    113a:	98 f3       	brcs	.-26     	; 0x1122 <__divsf3+0x4>

0000113c <__divsf3_pse>:
    113c:	99 23       	and	r25, r25
    113e:	c9 f3       	breq	.-14     	; 0x1132 <__divsf3+0x14>
    1140:	55 23       	and	r21, r21
    1142:	b1 f3       	breq	.-20     	; 0x1130 <__divsf3+0x12>
    1144:	95 1b       	sub	r25, r21
    1146:	55 0b       	sbc	r21, r21
    1148:	bb 27       	eor	r27, r27
    114a:	aa 27       	eor	r26, r26
    114c:	62 17       	cp	r22, r18
    114e:	73 07       	cpc	r23, r19
    1150:	84 07       	cpc	r24, r20
    1152:	38 f0       	brcs	.+14     	; 0x1162 <__divsf3_pse+0x26>
    1154:	9f 5f       	subi	r25, 0xFF	; 255
    1156:	5f 4f       	sbci	r21, 0xFF	; 255
    1158:	22 0f       	add	r18, r18
    115a:	33 1f       	adc	r19, r19
    115c:	44 1f       	adc	r20, r20
    115e:	aa 1f       	adc	r26, r26
    1160:	a9 f3       	breq	.-22     	; 0x114c <__divsf3_pse+0x10>
    1162:	33 d0       	rcall	.+102    	; 0x11ca <__divsf3_pse+0x8e>
    1164:	0e 2e       	mov	r0, r30
    1166:	3a f0       	brmi	.+14     	; 0x1176 <__divsf3_pse+0x3a>
    1168:	e0 e8       	ldi	r30, 0x80	; 128
    116a:	30 d0       	rcall	.+96     	; 0x11cc <__divsf3_pse+0x90>
    116c:	91 50       	subi	r25, 0x01	; 1
    116e:	50 40       	sbci	r21, 0x00	; 0
    1170:	e6 95       	lsr	r30
    1172:	00 1c       	adc	r0, r0
    1174:	ca f7       	brpl	.-14     	; 0x1168 <__divsf3_pse+0x2c>
    1176:	29 d0       	rcall	.+82     	; 0x11ca <__divsf3_pse+0x8e>
    1178:	fe 2f       	mov	r31, r30
    117a:	27 d0       	rcall	.+78     	; 0x11ca <__divsf3_pse+0x8e>
    117c:	66 0f       	add	r22, r22
    117e:	77 1f       	adc	r23, r23
    1180:	88 1f       	adc	r24, r24
    1182:	bb 1f       	adc	r27, r27
    1184:	26 17       	cp	r18, r22
    1186:	37 07       	cpc	r19, r23
    1188:	48 07       	cpc	r20, r24
    118a:	ab 07       	cpc	r26, r27
    118c:	b0 e8       	ldi	r27, 0x80	; 128
    118e:	09 f0       	breq	.+2      	; 0x1192 <__divsf3_pse+0x56>
    1190:	bb 0b       	sbc	r27, r27
    1192:	80 2d       	mov	r24, r0
    1194:	bf 01       	movw	r22, r30
    1196:	ff 27       	eor	r31, r31
    1198:	93 58       	subi	r25, 0x83	; 131
    119a:	5f 4f       	sbci	r21, 0xFF	; 255
    119c:	2a f0       	brmi	.+10     	; 0x11a8 <__divsf3_pse+0x6c>
    119e:	9e 3f       	cpi	r25, 0xFE	; 254
    11a0:	51 05       	cpc	r21, r1
    11a2:	68 f0       	brcs	.+26     	; 0x11be <__divsf3_pse+0x82>
    11a4:	ad c0       	rjmp	.+346    	; 0x1300 <__fp_inf>
    11a6:	2d c1       	rjmp	.+602    	; 0x1402 <__fp_szero>
    11a8:	5f 3f       	cpi	r21, 0xFF	; 255
    11aa:	ec f3       	brlt	.-6      	; 0x11a6 <__divsf3_pse+0x6a>
    11ac:	98 3e       	cpi	r25, 0xE8	; 232
    11ae:	dc f3       	brlt	.-10     	; 0x11a6 <__divsf3_pse+0x6a>
    11b0:	86 95       	lsr	r24
    11b2:	77 95       	ror	r23
    11b4:	67 95       	ror	r22
    11b6:	b7 95       	ror	r27
    11b8:	f7 95       	ror	r31
    11ba:	9f 5f       	subi	r25, 0xFF	; 255
    11bc:	c9 f7       	brne	.-14     	; 0x11b0 <__divsf3_pse+0x74>
    11be:	88 0f       	add	r24, r24
    11c0:	91 1d       	adc	r25, r1
    11c2:	96 95       	lsr	r25
    11c4:	87 95       	ror	r24
    11c6:	97 f9       	bld	r25, 7
    11c8:	08 95       	ret
    11ca:	e1 e0       	ldi	r30, 0x01	; 1
    11cc:	66 0f       	add	r22, r22
    11ce:	77 1f       	adc	r23, r23
    11d0:	88 1f       	adc	r24, r24
    11d2:	bb 1f       	adc	r27, r27
    11d4:	62 17       	cp	r22, r18
    11d6:	73 07       	cpc	r23, r19
    11d8:	84 07       	cpc	r24, r20
    11da:	ba 07       	cpc	r27, r26
    11dc:	20 f0       	brcs	.+8      	; 0x11e6 <__divsf3_pse+0xaa>
    11de:	62 1b       	sub	r22, r18
    11e0:	73 0b       	sbc	r23, r19
    11e2:	84 0b       	sbc	r24, r20
    11e4:	ba 0b       	sbc	r27, r26
    11e6:	ee 1f       	adc	r30, r30
    11e8:	88 f7       	brcc	.-30     	; 0x11cc <__divsf3_pse+0x90>
    11ea:	e0 95       	com	r30
    11ec:	08 95       	ret

000011ee <__fixsfsi>:
    11ee:	04 d0       	rcall	.+8      	; 0x11f8 <__fixunssfsi>
    11f0:	68 94       	set
    11f2:	b1 11       	cpse	r27, r1
    11f4:	06 c1       	rjmp	.+524    	; 0x1402 <__fp_szero>
    11f6:	08 95       	ret

000011f8 <__fixunssfsi>:
    11f8:	e9 d0       	rcall	.+466    	; 0x13cc <__fp_splitA>
    11fa:	88 f0       	brcs	.+34     	; 0x121e <__fixunssfsi+0x26>
    11fc:	9f 57       	subi	r25, 0x7F	; 127
    11fe:	90 f0       	brcs	.+36     	; 0x1224 <__fixunssfsi+0x2c>
    1200:	b9 2f       	mov	r27, r25
    1202:	99 27       	eor	r25, r25
    1204:	b7 51       	subi	r27, 0x17	; 23
    1206:	a0 f0       	brcs	.+40     	; 0x1230 <__fixunssfsi+0x38>
    1208:	d1 f0       	breq	.+52     	; 0x123e <__fixunssfsi+0x46>
    120a:	66 0f       	add	r22, r22
    120c:	77 1f       	adc	r23, r23
    120e:	88 1f       	adc	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	1a f0       	brmi	.+6      	; 0x121a <__fixunssfsi+0x22>
    1214:	ba 95       	dec	r27
    1216:	c9 f7       	brne	.-14     	; 0x120a <__fixunssfsi+0x12>
    1218:	12 c0       	rjmp	.+36     	; 0x123e <__fixunssfsi+0x46>
    121a:	b1 30       	cpi	r27, 0x01	; 1
    121c:	81 f0       	breq	.+32     	; 0x123e <__fixunssfsi+0x46>
    121e:	f0 d0       	rcall	.+480    	; 0x1400 <__fp_zero>
    1220:	b1 e0       	ldi	r27, 0x01	; 1
    1222:	08 95       	ret
    1224:	ed c0       	rjmp	.+474    	; 0x1400 <__fp_zero>
    1226:	67 2f       	mov	r22, r23
    1228:	78 2f       	mov	r23, r24
    122a:	88 27       	eor	r24, r24
    122c:	b8 5f       	subi	r27, 0xF8	; 248
    122e:	39 f0       	breq	.+14     	; 0x123e <__fixunssfsi+0x46>
    1230:	b9 3f       	cpi	r27, 0xF9	; 249
    1232:	cc f3       	brlt	.-14     	; 0x1226 <__fixunssfsi+0x2e>
    1234:	86 95       	lsr	r24
    1236:	77 95       	ror	r23
    1238:	67 95       	ror	r22
    123a:	b3 95       	inc	r27
    123c:	d9 f7       	brne	.-10     	; 0x1234 <__fixunssfsi+0x3c>
    123e:	3e f4       	brtc	.+14     	; 0x124e <__fixunssfsi+0x56>
    1240:	90 95       	com	r25
    1242:	80 95       	com	r24
    1244:	70 95       	com	r23
    1246:	61 95       	neg	r22
    1248:	7f 4f       	sbci	r23, 0xFF	; 255
    124a:	8f 4f       	sbci	r24, 0xFF	; 255
    124c:	9f 4f       	sbci	r25, 0xFF	; 255
    124e:	08 95       	ret

00001250 <__floatunsisf>:
    1250:	e8 94       	clt
    1252:	09 c0       	rjmp	.+18     	; 0x1266 <__floatsisf+0x12>

00001254 <__floatsisf>:
    1254:	97 fb       	bst	r25, 7
    1256:	3e f4       	brtc	.+14     	; 0x1266 <__floatsisf+0x12>
    1258:	90 95       	com	r25
    125a:	80 95       	com	r24
    125c:	70 95       	com	r23
    125e:	61 95       	neg	r22
    1260:	7f 4f       	sbci	r23, 0xFF	; 255
    1262:	8f 4f       	sbci	r24, 0xFF	; 255
    1264:	9f 4f       	sbci	r25, 0xFF	; 255
    1266:	99 23       	and	r25, r25
    1268:	a9 f0       	breq	.+42     	; 0x1294 <__floatsisf+0x40>
    126a:	f9 2f       	mov	r31, r25
    126c:	96 e9       	ldi	r25, 0x96	; 150
    126e:	bb 27       	eor	r27, r27
    1270:	93 95       	inc	r25
    1272:	f6 95       	lsr	r31
    1274:	87 95       	ror	r24
    1276:	77 95       	ror	r23
    1278:	67 95       	ror	r22
    127a:	b7 95       	ror	r27
    127c:	f1 11       	cpse	r31, r1
    127e:	f8 cf       	rjmp	.-16     	; 0x1270 <__floatsisf+0x1c>
    1280:	fa f4       	brpl	.+62     	; 0x12c0 <__floatsisf+0x6c>
    1282:	bb 0f       	add	r27, r27
    1284:	11 f4       	brne	.+4      	; 0x128a <__floatsisf+0x36>
    1286:	60 ff       	sbrs	r22, 0
    1288:	1b c0       	rjmp	.+54     	; 0x12c0 <__floatsisf+0x6c>
    128a:	6f 5f       	subi	r22, 0xFF	; 255
    128c:	7f 4f       	sbci	r23, 0xFF	; 255
    128e:	8f 4f       	sbci	r24, 0xFF	; 255
    1290:	9f 4f       	sbci	r25, 0xFF	; 255
    1292:	16 c0       	rjmp	.+44     	; 0x12c0 <__floatsisf+0x6c>
    1294:	88 23       	and	r24, r24
    1296:	11 f0       	breq	.+4      	; 0x129c <__floatsisf+0x48>
    1298:	96 e9       	ldi	r25, 0x96	; 150
    129a:	11 c0       	rjmp	.+34     	; 0x12be <__floatsisf+0x6a>
    129c:	77 23       	and	r23, r23
    129e:	21 f0       	breq	.+8      	; 0x12a8 <__floatsisf+0x54>
    12a0:	9e e8       	ldi	r25, 0x8E	; 142
    12a2:	87 2f       	mov	r24, r23
    12a4:	76 2f       	mov	r23, r22
    12a6:	05 c0       	rjmp	.+10     	; 0x12b2 <__floatsisf+0x5e>
    12a8:	66 23       	and	r22, r22
    12aa:	71 f0       	breq	.+28     	; 0x12c8 <__floatsisf+0x74>
    12ac:	96 e8       	ldi	r25, 0x86	; 134
    12ae:	86 2f       	mov	r24, r22
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	2a f0       	brmi	.+10     	; 0x12c0 <__floatsisf+0x6c>
    12b6:	9a 95       	dec	r25
    12b8:	66 0f       	add	r22, r22
    12ba:	77 1f       	adc	r23, r23
    12bc:	88 1f       	adc	r24, r24
    12be:	da f7       	brpl	.-10     	; 0x12b6 <__floatsisf+0x62>
    12c0:	88 0f       	add	r24, r24
    12c2:	96 95       	lsr	r25
    12c4:	87 95       	ror	r24
    12c6:	97 f9       	bld	r25, 7
    12c8:	08 95       	ret

000012ca <__fp_arccos>:
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	1f 93       	push	r17
    12d0:	0f 93       	push	r16
    12d2:	8b 01       	movw	r16, r22
    12d4:	ec 01       	movw	r28, r24
    12d6:	e8 ef       	ldi	r30, 0xF8	; 248
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	1b d0       	rcall	.+54     	; 0x1312 <__fp_powser>
    12dc:	5e d0       	rcall	.+188    	; 0x139a <__fp_round>
    12de:	98 01       	movw	r18, r16
    12e0:	ae 01       	movw	r20, r28
    12e2:	8b 01       	movw	r16, r22
    12e4:	ec 01       	movw	r28, r24
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	80 e8       	ldi	r24, 0x80	; 128
    12ec:	9f e3       	ldi	r25, 0x3F	; 63
    12ee:	9b de       	rcall	.-714    	; 0x1026 <__subsf3>
    12f0:	fb d0       	rcall	.+502    	; 0x14e8 <sqrt>
    12f2:	98 01       	movw	r18, r16
    12f4:	ae 01       	movw	r20, r28
    12f6:	0f 91       	pop	r16
    12f8:	1f 91       	pop	r17
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	93 c0       	rjmp	.+294    	; 0x1426 <__mulsf3x>

00001300 <__fp_inf>:
    1300:	97 f9       	bld	r25, 7
    1302:	9f 67       	ori	r25, 0x7F	; 127
    1304:	80 e8       	ldi	r24, 0x80	; 128
    1306:	70 e0       	ldi	r23, 0x00	; 0
    1308:	60 e0       	ldi	r22, 0x00	; 0
    130a:	08 95       	ret

0000130c <__fp_nan>:
    130c:	9f ef       	ldi	r25, 0xFF	; 255
    130e:	80 ec       	ldi	r24, 0xC0	; 192
    1310:	08 95       	ret

00001312 <__fp_powser>:
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	1f 93       	push	r17
    1318:	0f 93       	push	r16
    131a:	ff 92       	push	r15
    131c:	ef 92       	push	r14
    131e:	df 92       	push	r13
    1320:	7b 01       	movw	r14, r22
    1322:	8c 01       	movw	r16, r24
    1324:	68 94       	set
    1326:	05 c0       	rjmp	.+10     	; 0x1332 <__fp_powser+0x20>
    1328:	da 2e       	mov	r13, r26
    132a:	ef 01       	movw	r28, r30
    132c:	7c d0       	rcall	.+248    	; 0x1426 <__mulsf3x>
    132e:	fe 01       	movw	r30, r28
    1330:	e8 94       	clt
    1332:	a5 91       	lpm	r26, Z+
    1334:	25 91       	lpm	r18, Z+
    1336:	35 91       	lpm	r19, Z+
    1338:	45 91       	lpm	r20, Z+
    133a:	55 91       	lpm	r21, Z+
    133c:	ae f3       	brts	.-22     	; 0x1328 <__fp_powser+0x16>
    133e:	ef 01       	movw	r28, r30
    1340:	84 de       	rcall	.-760    	; 0x104a <__addsf3x>
    1342:	fe 01       	movw	r30, r28
    1344:	97 01       	movw	r18, r14
    1346:	a8 01       	movw	r20, r16
    1348:	da 94       	dec	r13
    134a:	79 f7       	brne	.-34     	; 0x132a <__fp_powser+0x18>
    134c:	df 90       	pop	r13
    134e:	ef 90       	pop	r14
    1350:	ff 90       	pop	r15
    1352:	0f 91       	pop	r16
    1354:	1f 91       	pop	r17
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <__fp_powsodd>:
    135c:	9f 93       	push	r25
    135e:	8f 93       	push	r24
    1360:	7f 93       	push	r23
    1362:	6f 93       	push	r22
    1364:	ff 93       	push	r31
    1366:	ef 93       	push	r30
    1368:	9b 01       	movw	r18, r22
    136a:	ac 01       	movw	r20, r24
    136c:	50 d0       	rcall	.+160    	; 0x140e <__mulsf3>
    136e:	ef 91       	pop	r30
    1370:	ff 91       	pop	r31
    1372:	cf df       	rcall	.-98     	; 0x1312 <__fp_powser>
    1374:	2f 91       	pop	r18
    1376:	3f 91       	pop	r19
    1378:	4f 91       	pop	r20
    137a:	5f 91       	pop	r21
    137c:	48 c0       	rjmp	.+144    	; 0x140e <__mulsf3>

0000137e <__fp_pscA>:
    137e:	00 24       	eor	r0, r0
    1380:	0a 94       	dec	r0
    1382:	16 16       	cp	r1, r22
    1384:	17 06       	cpc	r1, r23
    1386:	18 06       	cpc	r1, r24
    1388:	09 06       	cpc	r0, r25
    138a:	08 95       	ret

0000138c <__fp_pscB>:
    138c:	00 24       	eor	r0, r0
    138e:	0a 94       	dec	r0
    1390:	12 16       	cp	r1, r18
    1392:	13 06       	cpc	r1, r19
    1394:	14 06       	cpc	r1, r20
    1396:	05 06       	cpc	r0, r21
    1398:	08 95       	ret

0000139a <__fp_round>:
    139a:	09 2e       	mov	r0, r25
    139c:	03 94       	inc	r0
    139e:	00 0c       	add	r0, r0
    13a0:	11 f4       	brne	.+4      	; 0x13a6 <__fp_round+0xc>
    13a2:	88 23       	and	r24, r24
    13a4:	52 f0       	brmi	.+20     	; 0x13ba <__fp_round+0x20>
    13a6:	bb 0f       	add	r27, r27
    13a8:	40 f4       	brcc	.+16     	; 0x13ba <__fp_round+0x20>
    13aa:	bf 2b       	or	r27, r31
    13ac:	11 f4       	brne	.+4      	; 0x13b2 <__fp_round+0x18>
    13ae:	60 ff       	sbrs	r22, 0
    13b0:	04 c0       	rjmp	.+8      	; 0x13ba <__fp_round+0x20>
    13b2:	6f 5f       	subi	r22, 0xFF	; 255
    13b4:	7f 4f       	sbci	r23, 0xFF	; 255
    13b6:	8f 4f       	sbci	r24, 0xFF	; 255
    13b8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ba:	08 95       	ret

000013bc <__fp_split3>:
    13bc:	57 fd       	sbrc	r21, 7
    13be:	90 58       	subi	r25, 0x80	; 128
    13c0:	44 0f       	add	r20, r20
    13c2:	55 1f       	adc	r21, r21
    13c4:	59 f0       	breq	.+22     	; 0x13dc <__fp_splitA+0x10>
    13c6:	5f 3f       	cpi	r21, 0xFF	; 255
    13c8:	71 f0       	breq	.+28     	; 0x13e6 <__fp_splitA+0x1a>
    13ca:	47 95       	ror	r20

000013cc <__fp_splitA>:
    13cc:	88 0f       	add	r24, r24
    13ce:	97 fb       	bst	r25, 7
    13d0:	99 1f       	adc	r25, r25
    13d2:	61 f0       	breq	.+24     	; 0x13ec <__fp_splitA+0x20>
    13d4:	9f 3f       	cpi	r25, 0xFF	; 255
    13d6:	79 f0       	breq	.+30     	; 0x13f6 <__fp_splitA+0x2a>
    13d8:	87 95       	ror	r24
    13da:	08 95       	ret
    13dc:	12 16       	cp	r1, r18
    13de:	13 06       	cpc	r1, r19
    13e0:	14 06       	cpc	r1, r20
    13e2:	55 1f       	adc	r21, r21
    13e4:	f2 cf       	rjmp	.-28     	; 0x13ca <__fp_split3+0xe>
    13e6:	46 95       	lsr	r20
    13e8:	f1 df       	rcall	.-30     	; 0x13cc <__fp_splitA>
    13ea:	08 c0       	rjmp	.+16     	; 0x13fc <__fp_splitA+0x30>
    13ec:	16 16       	cp	r1, r22
    13ee:	17 06       	cpc	r1, r23
    13f0:	18 06       	cpc	r1, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	f1 cf       	rjmp	.-30     	; 0x13d8 <__fp_splitA+0xc>
    13f6:	86 95       	lsr	r24
    13f8:	71 05       	cpc	r23, r1
    13fa:	61 05       	cpc	r22, r1
    13fc:	08 94       	sec
    13fe:	08 95       	ret

00001400 <__fp_zero>:
    1400:	e8 94       	clt

00001402 <__fp_szero>:
    1402:	bb 27       	eor	r27, r27
    1404:	66 27       	eor	r22, r22
    1406:	77 27       	eor	r23, r23
    1408:	cb 01       	movw	r24, r22
    140a:	97 f9       	bld	r25, 7
    140c:	08 95       	ret

0000140e <__mulsf3>:
    140e:	0b d0       	rcall	.+22     	; 0x1426 <__mulsf3x>
    1410:	c4 cf       	rjmp	.-120    	; 0x139a <__fp_round>
    1412:	b5 df       	rcall	.-150    	; 0x137e <__fp_pscA>
    1414:	28 f0       	brcs	.+10     	; 0x1420 <__mulsf3+0x12>
    1416:	ba df       	rcall	.-140    	; 0x138c <__fp_pscB>
    1418:	18 f0       	brcs	.+6      	; 0x1420 <__mulsf3+0x12>
    141a:	95 23       	and	r25, r21
    141c:	09 f0       	breq	.+2      	; 0x1420 <__mulsf3+0x12>
    141e:	70 cf       	rjmp	.-288    	; 0x1300 <__fp_inf>
    1420:	75 cf       	rjmp	.-278    	; 0x130c <__fp_nan>
    1422:	11 24       	eor	r1, r1
    1424:	ee cf       	rjmp	.-36     	; 0x1402 <__fp_szero>

00001426 <__mulsf3x>:
    1426:	ca df       	rcall	.-108    	; 0x13bc <__fp_split3>
    1428:	a0 f3       	brcs	.-24     	; 0x1412 <__mulsf3+0x4>

0000142a <__mulsf3_pse>:
    142a:	95 9f       	mul	r25, r21
    142c:	d1 f3       	breq	.-12     	; 0x1422 <__mulsf3+0x14>
    142e:	95 0f       	add	r25, r21
    1430:	50 e0       	ldi	r21, 0x00	; 0
    1432:	55 1f       	adc	r21, r21
    1434:	62 9f       	mul	r22, r18
    1436:	f0 01       	movw	r30, r0
    1438:	72 9f       	mul	r23, r18
    143a:	bb 27       	eor	r27, r27
    143c:	f0 0d       	add	r31, r0
    143e:	b1 1d       	adc	r27, r1
    1440:	63 9f       	mul	r22, r19
    1442:	aa 27       	eor	r26, r26
    1444:	f0 0d       	add	r31, r0
    1446:	b1 1d       	adc	r27, r1
    1448:	aa 1f       	adc	r26, r26
    144a:	64 9f       	mul	r22, r20
    144c:	66 27       	eor	r22, r22
    144e:	b0 0d       	add	r27, r0
    1450:	a1 1d       	adc	r26, r1
    1452:	66 1f       	adc	r22, r22
    1454:	82 9f       	mul	r24, r18
    1456:	22 27       	eor	r18, r18
    1458:	b0 0d       	add	r27, r0
    145a:	a1 1d       	adc	r26, r1
    145c:	62 1f       	adc	r22, r18
    145e:	73 9f       	mul	r23, r19
    1460:	b0 0d       	add	r27, r0
    1462:	a1 1d       	adc	r26, r1
    1464:	62 1f       	adc	r22, r18
    1466:	83 9f       	mul	r24, r19
    1468:	a0 0d       	add	r26, r0
    146a:	61 1d       	adc	r22, r1
    146c:	22 1f       	adc	r18, r18
    146e:	74 9f       	mul	r23, r20
    1470:	33 27       	eor	r19, r19
    1472:	a0 0d       	add	r26, r0
    1474:	61 1d       	adc	r22, r1
    1476:	23 1f       	adc	r18, r19
    1478:	84 9f       	mul	r24, r20
    147a:	60 0d       	add	r22, r0
    147c:	21 1d       	adc	r18, r1
    147e:	82 2f       	mov	r24, r18
    1480:	76 2f       	mov	r23, r22
    1482:	6a 2f       	mov	r22, r26
    1484:	11 24       	eor	r1, r1
    1486:	9f 57       	subi	r25, 0x7F	; 127
    1488:	50 40       	sbci	r21, 0x00	; 0
    148a:	8a f0       	brmi	.+34     	; 0x14ae <__mulsf3_pse+0x84>
    148c:	e1 f0       	breq	.+56     	; 0x14c6 <__mulsf3_pse+0x9c>
    148e:	88 23       	and	r24, r24
    1490:	4a f0       	brmi	.+18     	; 0x14a4 <__mulsf3_pse+0x7a>
    1492:	ee 0f       	add	r30, r30
    1494:	ff 1f       	adc	r31, r31
    1496:	bb 1f       	adc	r27, r27
    1498:	66 1f       	adc	r22, r22
    149a:	77 1f       	adc	r23, r23
    149c:	88 1f       	adc	r24, r24
    149e:	91 50       	subi	r25, 0x01	; 1
    14a0:	50 40       	sbci	r21, 0x00	; 0
    14a2:	a9 f7       	brne	.-22     	; 0x148e <__mulsf3_pse+0x64>
    14a4:	9e 3f       	cpi	r25, 0xFE	; 254
    14a6:	51 05       	cpc	r21, r1
    14a8:	70 f0       	brcs	.+28     	; 0x14c6 <__mulsf3_pse+0x9c>
    14aa:	2a cf       	rjmp	.-428    	; 0x1300 <__fp_inf>
    14ac:	aa cf       	rjmp	.-172    	; 0x1402 <__fp_szero>
    14ae:	5f 3f       	cpi	r21, 0xFF	; 255
    14b0:	ec f3       	brlt	.-6      	; 0x14ac <__mulsf3_pse+0x82>
    14b2:	98 3e       	cpi	r25, 0xE8	; 232
    14b4:	dc f3       	brlt	.-10     	; 0x14ac <__mulsf3_pse+0x82>
    14b6:	86 95       	lsr	r24
    14b8:	77 95       	ror	r23
    14ba:	67 95       	ror	r22
    14bc:	b7 95       	ror	r27
    14be:	f7 95       	ror	r31
    14c0:	e7 95       	ror	r30
    14c2:	9f 5f       	subi	r25, 0xFF	; 255
    14c4:	c1 f7       	brne	.-16     	; 0x14b6 <__mulsf3_pse+0x8c>
    14c6:	fe 2b       	or	r31, r30
    14c8:	88 0f       	add	r24, r24
    14ca:	91 1d       	adc	r25, r1
    14cc:	96 95       	lsr	r25
    14ce:	87 95       	ror	r24
    14d0:	97 f9       	bld	r25, 7
    14d2:	08 95       	ret

000014d4 <sin>:
    14d4:	9f 93       	push	r25
    14d6:	5c d0       	rcall	.+184    	; 0x1590 <__fp_rempio2>
    14d8:	0f 90       	pop	r0
    14da:	07 fc       	sbrc	r0, 7
    14dc:	ee 5f       	subi	r30, 0xFE	; 254
    14de:	7f c0       	rjmp	.+254    	; 0x15de <__fp_sinus>
    14e0:	11 f4       	brne	.+4      	; 0x14e6 <sin+0x12>
    14e2:	0e f4       	brtc	.+2      	; 0x14e6 <sin+0x12>
    14e4:	13 cf       	rjmp	.-474    	; 0x130c <__fp_nan>
    14e6:	3e c0       	rjmp	.+124    	; 0x1564 <__fp_mpack>

000014e8 <sqrt>:
    14e8:	71 df       	rcall	.-286    	; 0x13cc <__fp_splitA>
    14ea:	d0 f3       	brcs	.-12     	; 0x14e0 <sin+0xc>
    14ec:	99 23       	and	r25, r25
    14ee:	d9 f3       	breq	.-10     	; 0x14e6 <sin+0x12>
    14f0:	ce f3       	brts	.-14     	; 0x14e4 <sin+0x10>
    14f2:	9f 57       	subi	r25, 0x7F	; 127
    14f4:	55 0b       	sbc	r21, r21
    14f6:	87 ff       	sbrs	r24, 7
    14f8:	43 d0       	rcall	.+134    	; 0x1580 <__fp_norm2>
    14fa:	00 24       	eor	r0, r0
    14fc:	a0 e6       	ldi	r26, 0x60	; 96
    14fe:	40 ea       	ldi	r20, 0xA0	; 160
    1500:	90 01       	movw	r18, r0
    1502:	80 58       	subi	r24, 0x80	; 128
    1504:	56 95       	lsr	r21
    1506:	97 95       	ror	r25
    1508:	28 f4       	brcc	.+10     	; 0x1514 <sqrt+0x2c>
    150a:	80 5c       	subi	r24, 0xC0	; 192
    150c:	66 0f       	add	r22, r22
    150e:	77 1f       	adc	r23, r23
    1510:	88 1f       	adc	r24, r24
    1512:	20 f0       	brcs	.+8      	; 0x151c <sqrt+0x34>
    1514:	26 17       	cp	r18, r22
    1516:	37 07       	cpc	r19, r23
    1518:	48 07       	cpc	r20, r24
    151a:	30 f4       	brcc	.+12     	; 0x1528 <sqrt+0x40>
    151c:	62 1b       	sub	r22, r18
    151e:	73 0b       	sbc	r23, r19
    1520:	84 0b       	sbc	r24, r20
    1522:	20 29       	or	r18, r0
    1524:	31 29       	or	r19, r1
    1526:	4a 2b       	or	r20, r26
    1528:	a6 95       	lsr	r26
    152a:	17 94       	ror	r1
    152c:	07 94       	ror	r0
    152e:	20 25       	eor	r18, r0
    1530:	31 25       	eor	r19, r1
    1532:	4a 27       	eor	r20, r26
    1534:	58 f7       	brcc	.-42     	; 0x150c <sqrt+0x24>
    1536:	66 0f       	add	r22, r22
    1538:	77 1f       	adc	r23, r23
    153a:	88 1f       	adc	r24, r24
    153c:	20 f0       	brcs	.+8      	; 0x1546 <sqrt+0x5e>
    153e:	26 17       	cp	r18, r22
    1540:	37 07       	cpc	r19, r23
    1542:	48 07       	cpc	r20, r24
    1544:	30 f4       	brcc	.+12     	; 0x1552 <sqrt+0x6a>
    1546:	62 0b       	sbc	r22, r18
    1548:	73 0b       	sbc	r23, r19
    154a:	84 0b       	sbc	r24, r20
    154c:	20 0d       	add	r18, r0
    154e:	31 1d       	adc	r19, r1
    1550:	41 1d       	adc	r20, r1
    1552:	a0 95       	com	r26
    1554:	81 f7       	brne	.-32     	; 0x1536 <sqrt+0x4e>
    1556:	b9 01       	movw	r22, r18
    1558:	84 2f       	mov	r24, r20
    155a:	91 58       	subi	r25, 0x81	; 129
    155c:	88 0f       	add	r24, r24
    155e:	96 95       	lsr	r25
    1560:	87 95       	ror	r24
    1562:	08 95       	ret

00001564 <__fp_mpack>:
    1564:	9f 3f       	cpi	r25, 0xFF	; 255
    1566:	31 f0       	breq	.+12     	; 0x1574 <__fp_mpack_finite+0xc>

00001568 <__fp_mpack_finite>:
    1568:	91 50       	subi	r25, 0x01	; 1
    156a:	20 f4       	brcc	.+8      	; 0x1574 <__fp_mpack_finite+0xc>
    156c:	87 95       	ror	r24
    156e:	77 95       	ror	r23
    1570:	67 95       	ror	r22
    1572:	b7 95       	ror	r27
    1574:	88 0f       	add	r24, r24
    1576:	91 1d       	adc	r25, r1
    1578:	96 95       	lsr	r25
    157a:	87 95       	ror	r24
    157c:	97 f9       	bld	r25, 7
    157e:	08 95       	ret

00001580 <__fp_norm2>:
    1580:	91 50       	subi	r25, 0x01	; 1
    1582:	50 40       	sbci	r21, 0x00	; 0
    1584:	66 0f       	add	r22, r22
    1586:	77 1f       	adc	r23, r23
    1588:	88 1f       	adc	r24, r24
    158a:	d2 f7       	brpl	.-12     	; 0x1580 <__fp_norm2>
    158c:	08 95       	ret
    158e:	be ce       	rjmp	.-644    	; 0x130c <__fp_nan>

00001590 <__fp_rempio2>:
    1590:	1d df       	rcall	.-454    	; 0x13cc <__fp_splitA>
    1592:	e8 f3       	brcs	.-6      	; 0x158e <__fp_norm2+0xe>
    1594:	e8 94       	clt
    1596:	e0 e0       	ldi	r30, 0x00	; 0
    1598:	bb 27       	eor	r27, r27
    159a:	9f 57       	subi	r25, 0x7F	; 127
    159c:	f0 f0       	brcs	.+60     	; 0x15da <__fp_rempio2+0x4a>
    159e:	2a ed       	ldi	r18, 0xDA	; 218
    15a0:	3f e0       	ldi	r19, 0x0F	; 15
    15a2:	49 ec       	ldi	r20, 0xC9	; 201
    15a4:	06 c0       	rjmp	.+12     	; 0x15b2 <__fp_rempio2+0x22>
    15a6:	ee 0f       	add	r30, r30
    15a8:	bb 0f       	add	r27, r27
    15aa:	66 1f       	adc	r22, r22
    15ac:	77 1f       	adc	r23, r23
    15ae:	88 1f       	adc	r24, r24
    15b0:	28 f0       	brcs	.+10     	; 0x15bc <__fp_rempio2+0x2c>
    15b2:	b2 3a       	cpi	r27, 0xA2	; 162
    15b4:	62 07       	cpc	r22, r18
    15b6:	73 07       	cpc	r23, r19
    15b8:	84 07       	cpc	r24, r20
    15ba:	28 f0       	brcs	.+10     	; 0x15c6 <__fp_rempio2+0x36>
    15bc:	b2 5a       	subi	r27, 0xA2	; 162
    15be:	62 0b       	sbc	r22, r18
    15c0:	73 0b       	sbc	r23, r19
    15c2:	84 0b       	sbc	r24, r20
    15c4:	e3 95       	inc	r30
    15c6:	9a 95       	dec	r25
    15c8:	72 f7       	brpl	.-36     	; 0x15a6 <__fp_rempio2+0x16>
    15ca:	80 38       	cpi	r24, 0x80	; 128
    15cc:	30 f4       	brcc	.+12     	; 0x15da <__fp_rempio2+0x4a>
    15ce:	9a 95       	dec	r25
    15d0:	bb 0f       	add	r27, r27
    15d2:	66 1f       	adc	r22, r22
    15d4:	77 1f       	adc	r23, r23
    15d6:	88 1f       	adc	r24, r24
    15d8:	d2 f7       	brpl	.-12     	; 0x15ce <__fp_rempio2+0x3e>
    15da:	90 48       	sbci	r25, 0x80	; 128
    15dc:	c5 cf       	rjmp	.-118    	; 0x1568 <__fp_mpack_finite>

000015de <__fp_sinus>:
    15de:	ef 93       	push	r30
    15e0:	e0 ff       	sbrs	r30, 0
    15e2:	06 c0       	rjmp	.+12     	; 0x15f0 <__fp_sinus+0x12>
    15e4:	a2 ea       	ldi	r26, 0xA2	; 162
    15e6:	2a ed       	ldi	r18, 0xDA	; 218
    15e8:	3f e0       	ldi	r19, 0x0F	; 15
    15ea:	49 ec       	ldi	r20, 0xC9	; 201
    15ec:	5f eb       	ldi	r21, 0xBF	; 191
    15ee:	2d dd       	rcall	.-1446   	; 0x104a <__addsf3x>
    15f0:	d4 de       	rcall	.-600    	; 0x139a <__fp_round>
    15f2:	0f 90       	pop	r0
    15f4:	03 94       	inc	r0
    15f6:	01 fc       	sbrc	r0, 1
    15f8:	90 58       	subi	r25, 0x80	; 128
    15fa:	e0 e2       	ldi	r30, 0x20	; 32
    15fc:	f1 e0       	ldi	r31, 0x01	; 1
    15fe:	ae ce       	rjmp	.-676    	; 0x135c <__fp_powsodd>

00001600 <__divmodhi4>:
    1600:	97 fb       	bst	r25, 7
    1602:	07 2e       	mov	r0, r23
    1604:	16 f4       	brtc	.+4      	; 0x160a <__divmodhi4+0xa>
    1606:	00 94       	com	r0
    1608:	06 d0       	rcall	.+12     	; 0x1616 <__divmodhi4_neg1>
    160a:	77 fd       	sbrc	r23, 7
    160c:	08 d0       	rcall	.+16     	; 0x161e <__divmodhi4_neg2>
    160e:	27 d0       	rcall	.+78     	; 0x165e <__udivmodhi4>
    1610:	07 fc       	sbrc	r0, 7
    1612:	05 d0       	rcall	.+10     	; 0x161e <__divmodhi4_neg2>
    1614:	3e f4       	brtc	.+14     	; 0x1624 <__divmodhi4_exit>

00001616 <__divmodhi4_neg1>:
    1616:	90 95       	com	r25
    1618:	81 95       	neg	r24
    161a:	9f 4f       	sbci	r25, 0xFF	; 255
    161c:	08 95       	ret

0000161e <__divmodhi4_neg2>:
    161e:	70 95       	com	r23
    1620:	61 95       	neg	r22
    1622:	7f 4f       	sbci	r23, 0xFF	; 255

00001624 <__divmodhi4_exit>:
    1624:	08 95       	ret

00001626 <__divmodsi4>:
    1626:	05 2e       	mov	r0, r21
    1628:	97 fb       	bst	r25, 7
    162a:	16 f4       	brtc	.+4      	; 0x1630 <__divmodsi4+0xa>
    162c:	00 94       	com	r0
    162e:	0f d0       	rcall	.+30     	; 0x164e <__negsi2>
    1630:	57 fd       	sbrc	r21, 7
    1632:	05 d0       	rcall	.+10     	; 0x163e <__divmodsi4_neg2>
    1634:	28 d0       	rcall	.+80     	; 0x1686 <__udivmodsi4>
    1636:	07 fc       	sbrc	r0, 7
    1638:	02 d0       	rcall	.+4      	; 0x163e <__divmodsi4_neg2>
    163a:	46 f4       	brtc	.+16     	; 0x164c <__divmodsi4_exit>
    163c:	08 c0       	rjmp	.+16     	; 0x164e <__negsi2>

0000163e <__divmodsi4_neg2>:
    163e:	50 95       	com	r21
    1640:	40 95       	com	r20
    1642:	30 95       	com	r19
    1644:	21 95       	neg	r18
    1646:	3f 4f       	sbci	r19, 0xFF	; 255
    1648:	4f 4f       	sbci	r20, 0xFF	; 255
    164a:	5f 4f       	sbci	r21, 0xFF	; 255

0000164c <__divmodsi4_exit>:
    164c:	08 95       	ret

0000164e <__negsi2>:
    164e:	90 95       	com	r25
    1650:	80 95       	com	r24
    1652:	70 95       	com	r23
    1654:	61 95       	neg	r22
    1656:	7f 4f       	sbci	r23, 0xFF	; 255
    1658:	8f 4f       	sbci	r24, 0xFF	; 255
    165a:	9f 4f       	sbci	r25, 0xFF	; 255
    165c:	08 95       	ret

0000165e <__udivmodhi4>:
    165e:	aa 1b       	sub	r26, r26
    1660:	bb 1b       	sub	r27, r27
    1662:	51 e1       	ldi	r21, 0x11	; 17
    1664:	07 c0       	rjmp	.+14     	; 0x1674 <__udivmodhi4_ep>

00001666 <__udivmodhi4_loop>:
    1666:	aa 1f       	adc	r26, r26
    1668:	bb 1f       	adc	r27, r27
    166a:	a6 17       	cp	r26, r22
    166c:	b7 07       	cpc	r27, r23
    166e:	10 f0       	brcs	.+4      	; 0x1674 <__udivmodhi4_ep>
    1670:	a6 1b       	sub	r26, r22
    1672:	b7 0b       	sbc	r27, r23

00001674 <__udivmodhi4_ep>:
    1674:	88 1f       	adc	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	5a 95       	dec	r21
    167a:	a9 f7       	brne	.-22     	; 0x1666 <__udivmodhi4_loop>
    167c:	80 95       	com	r24
    167e:	90 95       	com	r25
    1680:	bc 01       	movw	r22, r24
    1682:	cd 01       	movw	r24, r26
    1684:	08 95       	ret

00001686 <__udivmodsi4>:
    1686:	a1 e2       	ldi	r26, 0x21	; 33
    1688:	1a 2e       	mov	r1, r26
    168a:	aa 1b       	sub	r26, r26
    168c:	bb 1b       	sub	r27, r27
    168e:	fd 01       	movw	r30, r26
    1690:	0d c0       	rjmp	.+26     	; 0x16ac <__udivmodsi4_ep>

00001692 <__udivmodsi4_loop>:
    1692:	aa 1f       	adc	r26, r26
    1694:	bb 1f       	adc	r27, r27
    1696:	ee 1f       	adc	r30, r30
    1698:	ff 1f       	adc	r31, r31
    169a:	a2 17       	cp	r26, r18
    169c:	b3 07       	cpc	r27, r19
    169e:	e4 07       	cpc	r30, r20
    16a0:	f5 07       	cpc	r31, r21
    16a2:	20 f0       	brcs	.+8      	; 0x16ac <__udivmodsi4_ep>
    16a4:	a2 1b       	sub	r26, r18
    16a6:	b3 0b       	sbc	r27, r19
    16a8:	e4 0b       	sbc	r30, r20
    16aa:	f5 0b       	sbc	r31, r21

000016ac <__udivmodsi4_ep>:
    16ac:	66 1f       	adc	r22, r22
    16ae:	77 1f       	adc	r23, r23
    16b0:	88 1f       	adc	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	1a 94       	dec	r1
    16b6:	69 f7       	brne	.-38     	; 0x1692 <__udivmodsi4_loop>
    16b8:	60 95       	com	r22
    16ba:	70 95       	com	r23
    16bc:	80 95       	com	r24
    16be:	90 95       	com	r25
    16c0:	9b 01       	movw	r18, r22
    16c2:	ac 01       	movw	r20, r24
    16c4:	bd 01       	movw	r22, r26
    16c6:	cf 01       	movw	r24, r30
    16c8:	08 95       	ret

000016ca <__itoa_ncheck>:
    16ca:	bb 27       	eor	r27, r27
    16cc:	4a 30       	cpi	r20, 0x0A	; 10
    16ce:	31 f4       	brne	.+12     	; 0x16dc <__itoa_ncheck+0x12>
    16d0:	99 23       	and	r25, r25
    16d2:	22 f4       	brpl	.+8      	; 0x16dc <__itoa_ncheck+0x12>
    16d4:	bd e2       	ldi	r27, 0x2D	; 45
    16d6:	90 95       	com	r25
    16d8:	81 95       	neg	r24
    16da:	9f 4f       	sbci	r25, 0xFF	; 255
    16dc:	01 c0       	rjmp	.+2      	; 0x16e0 <__utoa_common>

000016de <__utoa_ncheck>:
    16de:	bb 27       	eor	r27, r27

000016e0 <__utoa_common>:
    16e0:	fb 01       	movw	r30, r22
    16e2:	55 27       	eor	r21, r21
    16e4:	aa 27       	eor	r26, r26
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	aa 1f       	adc	r26, r26
    16ec:	a4 17       	cp	r26, r20
    16ee:	10 f0       	brcs	.+4      	; 0x16f4 <__utoa_common+0x14>
    16f0:	a4 1b       	sub	r26, r20
    16f2:	83 95       	inc	r24
    16f4:	50 51       	subi	r21, 0x10	; 16
    16f6:	b9 f7       	brne	.-18     	; 0x16e6 <__utoa_common+0x6>
    16f8:	a0 5d       	subi	r26, 0xD0	; 208
    16fa:	aa 33       	cpi	r26, 0x3A	; 58
    16fc:	08 f0       	brcs	.+2      	; 0x1700 <__utoa_common+0x20>
    16fe:	a9 5d       	subi	r26, 0xD9	; 217
    1700:	a1 93       	st	Z+, r26
    1702:	00 97       	sbiw	r24, 0x00	; 0
    1704:	79 f7       	brne	.-34     	; 0x16e4 <__utoa_common+0x4>
    1706:	b1 11       	cpse	r27, r1
    1708:	b1 93       	st	Z+, r27
    170a:	11 92       	st	Z+, r1
    170c:	cb 01       	movw	r24, r22
    170e:	e7 c3       	rjmp	.+1998   	; 0x1ede <strrev>

00001710 <fdevopen>:
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	31 f4       	brne	.+12     	; 0x1728 <fdevopen+0x18>
    171c:	61 15       	cp	r22, r1
    171e:	71 05       	cpc	r23, r1
    1720:	19 f4       	brne	.+6      	; 0x1728 <fdevopen+0x18>
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	39 c0       	rjmp	.+114    	; 0x179a <fdevopen+0x8a>
    1728:	8b 01       	movw	r16, r22
    172a:	ec 01       	movw	r28, r24
    172c:	6e e0       	ldi	r22, 0x0E	; 14
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	7c d2       	rcall	.+1272   	; 0x1c2e <calloc>
    1736:	fc 01       	movw	r30, r24
    1738:	89 2b       	or	r24, r25
    173a:	99 f3       	breq	.-26     	; 0x1722 <fdevopen+0x12>
    173c:	80 e8       	ldi	r24, 0x80	; 128
    173e:	83 83       	std	Z+3, r24	; 0x03
    1740:	01 15       	cp	r16, r1
    1742:	11 05       	cpc	r17, r1
    1744:	71 f0       	breq	.+28     	; 0x1762 <fdevopen+0x52>
    1746:	13 87       	std	Z+11, r17	; 0x0b
    1748:	02 87       	std	Z+10, r16	; 0x0a
    174a:	81 e8       	ldi	r24, 0x81	; 129
    174c:	83 83       	std	Z+3, r24	; 0x03
    174e:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <__iob>
    1752:	90 91 ba 05 	lds	r25, 0x05BA	; 0x8005ba <__iob+0x1>
    1756:	89 2b       	or	r24, r25
    1758:	21 f4       	brne	.+8      	; 0x1762 <fdevopen+0x52>
    175a:	f0 93 ba 05 	sts	0x05BA, r31	; 0x8005ba <__iob+0x1>
    175e:	e0 93 b9 05 	sts	0x05B9, r30	; 0x8005b9 <__iob>
    1762:	20 97       	sbiw	r28, 0x00	; 0
    1764:	c9 f0       	breq	.+50     	; 0x1798 <fdevopen+0x88>
    1766:	d1 87       	std	Z+9, r29	; 0x09
    1768:	c0 87       	std	Z+8, r28	; 0x08
    176a:	83 81       	ldd	r24, Z+3	; 0x03
    176c:	82 60       	ori	r24, 0x02	; 2
    176e:	83 83       	std	Z+3, r24	; 0x03
    1770:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <__iob+0x2>
    1774:	90 91 bc 05 	lds	r25, 0x05BC	; 0x8005bc <__iob+0x3>
    1778:	89 2b       	or	r24, r25
    177a:	71 f4       	brne	.+28     	; 0x1798 <fdevopen+0x88>
    177c:	f0 93 bc 05 	sts	0x05BC, r31	; 0x8005bc <__iob+0x3>
    1780:	e0 93 bb 05 	sts	0x05BB, r30	; 0x8005bb <__iob+0x2>
    1784:	80 91 bd 05 	lds	r24, 0x05BD	; 0x8005bd <__iob+0x4>
    1788:	90 91 be 05 	lds	r25, 0x05BE	; 0x8005be <__iob+0x5>
    178c:	89 2b       	or	r24, r25
    178e:	21 f4       	brne	.+8      	; 0x1798 <fdevopen+0x88>
    1790:	f0 93 be 05 	sts	0x05BE, r31	; 0x8005be <__iob+0x5>
    1794:	e0 93 bd 05 	sts	0x05BD, r30	; 0x8005bd <__iob+0x4>
    1798:	cf 01       	movw	r24, r30
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	08 95       	ret

000017a4 <printf>:
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	ae 01       	movw	r20, r28
    17ae:	4a 5f       	subi	r20, 0xFA	; 250
    17b0:	5f 4f       	sbci	r21, 0xFF	; 255
    17b2:	fa 01       	movw	r30, r20
    17b4:	61 91       	ld	r22, Z+
    17b6:	71 91       	ld	r23, Z+
    17b8:	af 01       	movw	r20, r30
    17ba:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <__iob+0x2>
    17be:	90 91 bc 05 	lds	r25, 0x05BC	; 0x8005bc <__iob+0x3>
    17c2:	38 d0       	rcall	.+112    	; 0x1834 <vfprintf>
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	08 95       	ret

000017ca <putchar>:
    17ca:	60 91 bb 05 	lds	r22, 0x05BB	; 0x8005bb <__iob+0x2>
    17ce:	70 91 bc 05 	lds	r23, 0x05BC	; 0x8005bc <__iob+0x3>
    17d2:	95 c3       	rjmp	.+1834   	; 0x1efe <fputc>

000017d4 <puts>:
    17d4:	0f 93       	push	r16
    17d6:	1f 93       	push	r17
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	e0 91 bb 05 	lds	r30, 0x05BB	; 0x8005bb <__iob+0x2>
    17e0:	f0 91 bc 05 	lds	r31, 0x05BC	; 0x8005bc <__iob+0x3>
    17e4:	23 81       	ldd	r18, Z+3	; 0x03
    17e6:	21 ff       	sbrs	r18, 1
    17e8:	1b c0       	rjmp	.+54     	; 0x1820 <puts+0x4c>
    17ea:	8c 01       	movw	r16, r24
    17ec:	d0 e0       	ldi	r29, 0x00	; 0
    17ee:	c0 e0       	ldi	r28, 0x00	; 0
    17f0:	f8 01       	movw	r30, r16
    17f2:	81 91       	ld	r24, Z+
    17f4:	8f 01       	movw	r16, r30
    17f6:	60 91 bb 05 	lds	r22, 0x05BB	; 0x8005bb <__iob+0x2>
    17fa:	70 91 bc 05 	lds	r23, 0x05BC	; 0x8005bc <__iob+0x3>
    17fe:	db 01       	movw	r26, r22
    1800:	18 96       	adiw	r26, 0x08	; 8
    1802:	ed 91       	ld	r30, X+
    1804:	fc 91       	ld	r31, X
    1806:	19 97       	sbiw	r26, 0x09	; 9
    1808:	88 23       	and	r24, r24
    180a:	31 f0       	breq	.+12     	; 0x1818 <puts+0x44>
    180c:	19 95       	eicall
    180e:	89 2b       	or	r24, r25
    1810:	79 f3       	breq	.-34     	; 0x17f0 <puts+0x1c>
    1812:	df ef       	ldi	r29, 0xFF	; 255
    1814:	cf ef       	ldi	r28, 0xFF	; 255
    1816:	ec cf       	rjmp	.-40     	; 0x17f0 <puts+0x1c>
    1818:	8a e0       	ldi	r24, 0x0A	; 10
    181a:	19 95       	eicall
    181c:	89 2b       	or	r24, r25
    181e:	19 f0       	breq	.+6      	; 0x1826 <puts+0x52>
    1820:	8f ef       	ldi	r24, 0xFF	; 255
    1822:	9f ef       	ldi	r25, 0xFF	; 255
    1824:	02 c0       	rjmp	.+4      	; 0x182a <puts+0x56>
    1826:	8d 2f       	mov	r24, r29
    1828:	9c 2f       	mov	r25, r28
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	1f 91       	pop	r17
    1830:	0f 91       	pop	r16
    1832:	08 95       	ret

00001834 <vfprintf>:
    1834:	2f 92       	push	r2
    1836:	3f 92       	push	r3
    1838:	4f 92       	push	r4
    183a:	5f 92       	push	r5
    183c:	6f 92       	push	r6
    183e:	7f 92       	push	r7
    1840:	8f 92       	push	r8
    1842:	9f 92       	push	r9
    1844:	af 92       	push	r10
    1846:	bf 92       	push	r11
    1848:	cf 92       	push	r12
    184a:	df 92       	push	r13
    184c:	ef 92       	push	r14
    184e:	ff 92       	push	r15
    1850:	0f 93       	push	r16
    1852:	1f 93       	push	r17
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	2b 97       	sbiw	r28, 0x0b	; 11
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	cd bf       	out	0x3d, r28	; 61
    1868:	6c 01       	movw	r12, r24
    186a:	7b 01       	movw	r14, r22
    186c:	8a 01       	movw	r16, r20
    186e:	fc 01       	movw	r30, r24
    1870:	17 82       	std	Z+7, r1	; 0x07
    1872:	16 82       	std	Z+6, r1	; 0x06
    1874:	83 81       	ldd	r24, Z+3	; 0x03
    1876:	81 ff       	sbrs	r24, 1
    1878:	bf c1       	rjmp	.+894    	; 0x1bf8 <vfprintf+0x3c4>
    187a:	ce 01       	movw	r24, r28
    187c:	01 96       	adiw	r24, 0x01	; 1
    187e:	3c 01       	movw	r6, r24
    1880:	f6 01       	movw	r30, r12
    1882:	93 81       	ldd	r25, Z+3	; 0x03
    1884:	f7 01       	movw	r30, r14
    1886:	93 fd       	sbrc	r25, 3
    1888:	85 91       	lpm	r24, Z+
    188a:	93 ff       	sbrs	r25, 3
    188c:	81 91       	ld	r24, Z+
    188e:	7f 01       	movw	r14, r30
    1890:	88 23       	and	r24, r24
    1892:	09 f4       	brne	.+2      	; 0x1896 <vfprintf+0x62>
    1894:	ad c1       	rjmp	.+858    	; 0x1bf0 <vfprintf+0x3bc>
    1896:	85 32       	cpi	r24, 0x25	; 37
    1898:	39 f4       	brne	.+14     	; 0x18a8 <vfprintf+0x74>
    189a:	93 fd       	sbrc	r25, 3
    189c:	85 91       	lpm	r24, Z+
    189e:	93 ff       	sbrs	r25, 3
    18a0:	81 91       	ld	r24, Z+
    18a2:	7f 01       	movw	r14, r30
    18a4:	85 32       	cpi	r24, 0x25	; 37
    18a6:	21 f4       	brne	.+8      	; 0x18b0 <vfprintf+0x7c>
    18a8:	b6 01       	movw	r22, r12
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	28 d3       	rcall	.+1616   	; 0x1efe <fputc>
    18ae:	e8 cf       	rjmp	.-48     	; 0x1880 <vfprintf+0x4c>
    18b0:	91 2c       	mov	r9, r1
    18b2:	21 2c       	mov	r2, r1
    18b4:	31 2c       	mov	r3, r1
    18b6:	ff e1       	ldi	r31, 0x1F	; 31
    18b8:	f3 15       	cp	r31, r3
    18ba:	d8 f0       	brcs	.+54     	; 0x18f2 <vfprintf+0xbe>
    18bc:	8b 32       	cpi	r24, 0x2B	; 43
    18be:	79 f0       	breq	.+30     	; 0x18de <vfprintf+0xaa>
    18c0:	38 f4       	brcc	.+14     	; 0x18d0 <vfprintf+0x9c>
    18c2:	80 32       	cpi	r24, 0x20	; 32
    18c4:	79 f0       	breq	.+30     	; 0x18e4 <vfprintf+0xb0>
    18c6:	83 32       	cpi	r24, 0x23	; 35
    18c8:	a1 f4       	brne	.+40     	; 0x18f2 <vfprintf+0xbe>
    18ca:	23 2d       	mov	r18, r3
    18cc:	20 61       	ori	r18, 0x10	; 16
    18ce:	1d c0       	rjmp	.+58     	; 0x190a <vfprintf+0xd6>
    18d0:	8d 32       	cpi	r24, 0x2D	; 45
    18d2:	61 f0       	breq	.+24     	; 0x18ec <vfprintf+0xb8>
    18d4:	80 33       	cpi	r24, 0x30	; 48
    18d6:	69 f4       	brne	.+26     	; 0x18f2 <vfprintf+0xbe>
    18d8:	23 2d       	mov	r18, r3
    18da:	21 60       	ori	r18, 0x01	; 1
    18dc:	16 c0       	rjmp	.+44     	; 0x190a <vfprintf+0xd6>
    18de:	83 2d       	mov	r24, r3
    18e0:	82 60       	ori	r24, 0x02	; 2
    18e2:	38 2e       	mov	r3, r24
    18e4:	e3 2d       	mov	r30, r3
    18e6:	e4 60       	ori	r30, 0x04	; 4
    18e8:	3e 2e       	mov	r3, r30
    18ea:	2a c0       	rjmp	.+84     	; 0x1940 <vfprintf+0x10c>
    18ec:	f3 2d       	mov	r31, r3
    18ee:	f8 60       	ori	r31, 0x08	; 8
    18f0:	1d c0       	rjmp	.+58     	; 0x192c <vfprintf+0xf8>
    18f2:	37 fc       	sbrc	r3, 7
    18f4:	2d c0       	rjmp	.+90     	; 0x1950 <vfprintf+0x11c>
    18f6:	20 ed       	ldi	r18, 0xD0	; 208
    18f8:	28 0f       	add	r18, r24
    18fa:	2a 30       	cpi	r18, 0x0A	; 10
    18fc:	40 f0       	brcs	.+16     	; 0x190e <vfprintf+0xda>
    18fe:	8e 32       	cpi	r24, 0x2E	; 46
    1900:	b9 f4       	brne	.+46     	; 0x1930 <vfprintf+0xfc>
    1902:	36 fc       	sbrc	r3, 6
    1904:	75 c1       	rjmp	.+746    	; 0x1bf0 <vfprintf+0x3bc>
    1906:	23 2d       	mov	r18, r3
    1908:	20 64       	ori	r18, 0x40	; 64
    190a:	32 2e       	mov	r3, r18
    190c:	19 c0       	rjmp	.+50     	; 0x1940 <vfprintf+0x10c>
    190e:	36 fe       	sbrs	r3, 6
    1910:	06 c0       	rjmp	.+12     	; 0x191e <vfprintf+0xea>
    1912:	8a e0       	ldi	r24, 0x0A	; 10
    1914:	98 9e       	mul	r9, r24
    1916:	20 0d       	add	r18, r0
    1918:	11 24       	eor	r1, r1
    191a:	92 2e       	mov	r9, r18
    191c:	11 c0       	rjmp	.+34     	; 0x1940 <vfprintf+0x10c>
    191e:	ea e0       	ldi	r30, 0x0A	; 10
    1920:	2e 9e       	mul	r2, r30
    1922:	20 0d       	add	r18, r0
    1924:	11 24       	eor	r1, r1
    1926:	22 2e       	mov	r2, r18
    1928:	f3 2d       	mov	r31, r3
    192a:	f0 62       	ori	r31, 0x20	; 32
    192c:	3f 2e       	mov	r3, r31
    192e:	08 c0       	rjmp	.+16     	; 0x1940 <vfprintf+0x10c>
    1930:	8c 36       	cpi	r24, 0x6C	; 108
    1932:	21 f4       	brne	.+8      	; 0x193c <vfprintf+0x108>
    1934:	83 2d       	mov	r24, r3
    1936:	80 68       	ori	r24, 0x80	; 128
    1938:	38 2e       	mov	r3, r24
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <vfprintf+0x10c>
    193c:	88 36       	cpi	r24, 0x68	; 104
    193e:	41 f4       	brne	.+16     	; 0x1950 <vfprintf+0x11c>
    1940:	f7 01       	movw	r30, r14
    1942:	93 fd       	sbrc	r25, 3
    1944:	85 91       	lpm	r24, Z+
    1946:	93 ff       	sbrs	r25, 3
    1948:	81 91       	ld	r24, Z+
    194a:	7f 01       	movw	r14, r30
    194c:	81 11       	cpse	r24, r1
    194e:	b3 cf       	rjmp	.-154    	; 0x18b6 <vfprintf+0x82>
    1950:	98 2f       	mov	r25, r24
    1952:	9f 7d       	andi	r25, 0xDF	; 223
    1954:	95 54       	subi	r25, 0x45	; 69
    1956:	93 30       	cpi	r25, 0x03	; 3
    1958:	28 f4       	brcc	.+10     	; 0x1964 <vfprintf+0x130>
    195a:	0c 5f       	subi	r16, 0xFC	; 252
    195c:	1f 4f       	sbci	r17, 0xFF	; 255
    195e:	9f e3       	ldi	r25, 0x3F	; 63
    1960:	99 83       	std	Y+1, r25	; 0x01
    1962:	0d c0       	rjmp	.+26     	; 0x197e <vfprintf+0x14a>
    1964:	83 36       	cpi	r24, 0x63	; 99
    1966:	31 f0       	breq	.+12     	; 0x1974 <vfprintf+0x140>
    1968:	83 37       	cpi	r24, 0x73	; 115
    196a:	71 f0       	breq	.+28     	; 0x1988 <vfprintf+0x154>
    196c:	83 35       	cpi	r24, 0x53	; 83
    196e:	09 f0       	breq	.+2      	; 0x1972 <vfprintf+0x13e>
    1970:	55 c0       	rjmp	.+170    	; 0x1a1c <vfprintf+0x1e8>
    1972:	20 c0       	rjmp	.+64     	; 0x19b4 <vfprintf+0x180>
    1974:	f8 01       	movw	r30, r16
    1976:	80 81       	ld	r24, Z
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	0e 5f       	subi	r16, 0xFE	; 254
    197c:	1f 4f       	sbci	r17, 0xFF	; 255
    197e:	88 24       	eor	r8, r8
    1980:	83 94       	inc	r8
    1982:	91 2c       	mov	r9, r1
    1984:	53 01       	movw	r10, r6
    1986:	12 c0       	rjmp	.+36     	; 0x19ac <vfprintf+0x178>
    1988:	28 01       	movw	r4, r16
    198a:	f2 e0       	ldi	r31, 0x02	; 2
    198c:	4f 0e       	add	r4, r31
    198e:	51 1c       	adc	r5, r1
    1990:	f8 01       	movw	r30, r16
    1992:	a0 80       	ld	r10, Z
    1994:	b1 80       	ldd	r11, Z+1	; 0x01
    1996:	36 fe       	sbrs	r3, 6
    1998:	03 c0       	rjmp	.+6      	; 0x19a0 <vfprintf+0x16c>
    199a:	69 2d       	mov	r22, r9
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <vfprintf+0x170>
    19a0:	6f ef       	ldi	r22, 0xFF	; 255
    19a2:	7f ef       	ldi	r23, 0xFF	; 255
    19a4:	c5 01       	movw	r24, r10
    19a6:	90 d2       	rcall	.+1312   	; 0x1ec8 <strnlen>
    19a8:	4c 01       	movw	r8, r24
    19aa:	82 01       	movw	r16, r4
    19ac:	f3 2d       	mov	r31, r3
    19ae:	ff 77       	andi	r31, 0x7F	; 127
    19b0:	3f 2e       	mov	r3, r31
    19b2:	15 c0       	rjmp	.+42     	; 0x19de <vfprintf+0x1aa>
    19b4:	28 01       	movw	r4, r16
    19b6:	22 e0       	ldi	r18, 0x02	; 2
    19b8:	42 0e       	add	r4, r18
    19ba:	51 1c       	adc	r5, r1
    19bc:	f8 01       	movw	r30, r16
    19be:	a0 80       	ld	r10, Z
    19c0:	b1 80       	ldd	r11, Z+1	; 0x01
    19c2:	36 fe       	sbrs	r3, 6
    19c4:	03 c0       	rjmp	.+6      	; 0x19cc <vfprintf+0x198>
    19c6:	69 2d       	mov	r22, r9
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <vfprintf+0x19c>
    19cc:	6f ef       	ldi	r22, 0xFF	; 255
    19ce:	7f ef       	ldi	r23, 0xFF	; 255
    19d0:	c5 01       	movw	r24, r10
    19d2:	68 d2       	rcall	.+1232   	; 0x1ea4 <strnlen_P>
    19d4:	4c 01       	movw	r8, r24
    19d6:	f3 2d       	mov	r31, r3
    19d8:	f0 68       	ori	r31, 0x80	; 128
    19da:	3f 2e       	mov	r3, r31
    19dc:	82 01       	movw	r16, r4
    19de:	33 fc       	sbrc	r3, 3
    19e0:	19 c0       	rjmp	.+50     	; 0x1a14 <vfprintf+0x1e0>
    19e2:	82 2d       	mov	r24, r2
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	88 16       	cp	r8, r24
    19e8:	99 06       	cpc	r9, r25
    19ea:	a0 f4       	brcc	.+40     	; 0x1a14 <vfprintf+0x1e0>
    19ec:	b6 01       	movw	r22, r12
    19ee:	80 e2       	ldi	r24, 0x20	; 32
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	85 d2       	rcall	.+1290   	; 0x1efe <fputc>
    19f4:	2a 94       	dec	r2
    19f6:	f5 cf       	rjmp	.-22     	; 0x19e2 <vfprintf+0x1ae>
    19f8:	f5 01       	movw	r30, r10
    19fa:	37 fc       	sbrc	r3, 7
    19fc:	85 91       	lpm	r24, Z+
    19fe:	37 fe       	sbrs	r3, 7
    1a00:	81 91       	ld	r24, Z+
    1a02:	5f 01       	movw	r10, r30
    1a04:	b6 01       	movw	r22, r12
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	7a d2       	rcall	.+1268   	; 0x1efe <fputc>
    1a0a:	21 10       	cpse	r2, r1
    1a0c:	2a 94       	dec	r2
    1a0e:	21 e0       	ldi	r18, 0x01	; 1
    1a10:	82 1a       	sub	r8, r18
    1a12:	91 08       	sbc	r9, r1
    1a14:	81 14       	cp	r8, r1
    1a16:	91 04       	cpc	r9, r1
    1a18:	79 f7       	brne	.-34     	; 0x19f8 <vfprintf+0x1c4>
    1a1a:	e1 c0       	rjmp	.+450    	; 0x1bde <vfprintf+0x3aa>
    1a1c:	84 36       	cpi	r24, 0x64	; 100
    1a1e:	11 f0       	breq	.+4      	; 0x1a24 <vfprintf+0x1f0>
    1a20:	89 36       	cpi	r24, 0x69	; 105
    1a22:	39 f5       	brne	.+78     	; 0x1a72 <vfprintf+0x23e>
    1a24:	f8 01       	movw	r30, r16
    1a26:	37 fe       	sbrs	r3, 7
    1a28:	07 c0       	rjmp	.+14     	; 0x1a38 <vfprintf+0x204>
    1a2a:	60 81       	ld	r22, Z
    1a2c:	71 81       	ldd	r23, Z+1	; 0x01
    1a2e:	82 81       	ldd	r24, Z+2	; 0x02
    1a30:	93 81       	ldd	r25, Z+3	; 0x03
    1a32:	0c 5f       	subi	r16, 0xFC	; 252
    1a34:	1f 4f       	sbci	r17, 0xFF	; 255
    1a36:	08 c0       	rjmp	.+16     	; 0x1a48 <vfprintf+0x214>
    1a38:	60 81       	ld	r22, Z
    1a3a:	71 81       	ldd	r23, Z+1	; 0x01
    1a3c:	07 2e       	mov	r0, r23
    1a3e:	00 0c       	add	r0, r0
    1a40:	88 0b       	sbc	r24, r24
    1a42:	99 0b       	sbc	r25, r25
    1a44:	0e 5f       	subi	r16, 0xFE	; 254
    1a46:	1f 4f       	sbci	r17, 0xFF	; 255
    1a48:	f3 2d       	mov	r31, r3
    1a4a:	ff 76       	andi	r31, 0x6F	; 111
    1a4c:	3f 2e       	mov	r3, r31
    1a4e:	97 ff       	sbrs	r25, 7
    1a50:	09 c0       	rjmp	.+18     	; 0x1a64 <vfprintf+0x230>
    1a52:	90 95       	com	r25
    1a54:	80 95       	com	r24
    1a56:	70 95       	com	r23
    1a58:	61 95       	neg	r22
    1a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a60:	f0 68       	ori	r31, 0x80	; 128
    1a62:	3f 2e       	mov	r3, r31
    1a64:	2a e0       	ldi	r18, 0x0A	; 10
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	a3 01       	movw	r20, r6
    1a6a:	85 d2       	rcall	.+1290   	; 0x1f76 <__ultoa_invert>
    1a6c:	88 2e       	mov	r8, r24
    1a6e:	86 18       	sub	r8, r6
    1a70:	44 c0       	rjmp	.+136    	; 0x1afa <vfprintf+0x2c6>
    1a72:	85 37       	cpi	r24, 0x75	; 117
    1a74:	31 f4       	brne	.+12     	; 0x1a82 <vfprintf+0x24e>
    1a76:	23 2d       	mov	r18, r3
    1a78:	2f 7e       	andi	r18, 0xEF	; 239
    1a7a:	b2 2e       	mov	r11, r18
    1a7c:	2a e0       	ldi	r18, 0x0A	; 10
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	25 c0       	rjmp	.+74     	; 0x1acc <vfprintf+0x298>
    1a82:	93 2d       	mov	r25, r3
    1a84:	99 7f       	andi	r25, 0xF9	; 249
    1a86:	b9 2e       	mov	r11, r25
    1a88:	8f 36       	cpi	r24, 0x6F	; 111
    1a8a:	c1 f0       	breq	.+48     	; 0x1abc <vfprintf+0x288>
    1a8c:	18 f4       	brcc	.+6      	; 0x1a94 <vfprintf+0x260>
    1a8e:	88 35       	cpi	r24, 0x58	; 88
    1a90:	79 f0       	breq	.+30     	; 0x1ab0 <vfprintf+0x27c>
    1a92:	ae c0       	rjmp	.+348    	; 0x1bf0 <vfprintf+0x3bc>
    1a94:	80 37       	cpi	r24, 0x70	; 112
    1a96:	19 f0       	breq	.+6      	; 0x1a9e <vfprintf+0x26a>
    1a98:	88 37       	cpi	r24, 0x78	; 120
    1a9a:	21 f0       	breq	.+8      	; 0x1aa4 <vfprintf+0x270>
    1a9c:	a9 c0       	rjmp	.+338    	; 0x1bf0 <vfprintf+0x3bc>
    1a9e:	e9 2f       	mov	r30, r25
    1aa0:	e0 61       	ori	r30, 0x10	; 16
    1aa2:	be 2e       	mov	r11, r30
    1aa4:	b4 fe       	sbrs	r11, 4
    1aa6:	0d c0       	rjmp	.+26     	; 0x1ac2 <vfprintf+0x28e>
    1aa8:	fb 2d       	mov	r31, r11
    1aaa:	f4 60       	ori	r31, 0x04	; 4
    1aac:	bf 2e       	mov	r11, r31
    1aae:	09 c0       	rjmp	.+18     	; 0x1ac2 <vfprintf+0x28e>
    1ab0:	34 fe       	sbrs	r3, 4
    1ab2:	0a c0       	rjmp	.+20     	; 0x1ac8 <vfprintf+0x294>
    1ab4:	29 2f       	mov	r18, r25
    1ab6:	26 60       	ori	r18, 0x06	; 6
    1ab8:	b2 2e       	mov	r11, r18
    1aba:	06 c0       	rjmp	.+12     	; 0x1ac8 <vfprintf+0x294>
    1abc:	28 e0       	ldi	r18, 0x08	; 8
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	05 c0       	rjmp	.+10     	; 0x1acc <vfprintf+0x298>
    1ac2:	20 e1       	ldi	r18, 0x10	; 16
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <vfprintf+0x298>
    1ac8:	20 e1       	ldi	r18, 0x10	; 16
    1aca:	32 e0       	ldi	r19, 0x02	; 2
    1acc:	f8 01       	movw	r30, r16
    1ace:	b7 fe       	sbrs	r11, 7
    1ad0:	07 c0       	rjmp	.+14     	; 0x1ae0 <vfprintf+0x2ac>
    1ad2:	60 81       	ld	r22, Z
    1ad4:	71 81       	ldd	r23, Z+1	; 0x01
    1ad6:	82 81       	ldd	r24, Z+2	; 0x02
    1ad8:	93 81       	ldd	r25, Z+3	; 0x03
    1ada:	0c 5f       	subi	r16, 0xFC	; 252
    1adc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ade:	06 c0       	rjmp	.+12     	; 0x1aec <vfprintf+0x2b8>
    1ae0:	60 81       	ld	r22, Z
    1ae2:	71 81       	ldd	r23, Z+1	; 0x01
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	0e 5f       	subi	r16, 0xFE	; 254
    1aea:	1f 4f       	sbci	r17, 0xFF	; 255
    1aec:	a3 01       	movw	r20, r6
    1aee:	43 d2       	rcall	.+1158   	; 0x1f76 <__ultoa_invert>
    1af0:	88 2e       	mov	r8, r24
    1af2:	86 18       	sub	r8, r6
    1af4:	fb 2d       	mov	r31, r11
    1af6:	ff 77       	andi	r31, 0x7F	; 127
    1af8:	3f 2e       	mov	r3, r31
    1afa:	36 fe       	sbrs	r3, 6
    1afc:	0d c0       	rjmp	.+26     	; 0x1b18 <vfprintf+0x2e4>
    1afe:	23 2d       	mov	r18, r3
    1b00:	2e 7f       	andi	r18, 0xFE	; 254
    1b02:	a2 2e       	mov	r10, r18
    1b04:	89 14       	cp	r8, r9
    1b06:	58 f4       	brcc	.+22     	; 0x1b1e <vfprintf+0x2ea>
    1b08:	34 fe       	sbrs	r3, 4
    1b0a:	0b c0       	rjmp	.+22     	; 0x1b22 <vfprintf+0x2ee>
    1b0c:	32 fc       	sbrc	r3, 2
    1b0e:	09 c0       	rjmp	.+18     	; 0x1b22 <vfprintf+0x2ee>
    1b10:	83 2d       	mov	r24, r3
    1b12:	8e 7e       	andi	r24, 0xEE	; 238
    1b14:	a8 2e       	mov	r10, r24
    1b16:	05 c0       	rjmp	.+10     	; 0x1b22 <vfprintf+0x2ee>
    1b18:	b8 2c       	mov	r11, r8
    1b1a:	a3 2c       	mov	r10, r3
    1b1c:	03 c0       	rjmp	.+6      	; 0x1b24 <vfprintf+0x2f0>
    1b1e:	b8 2c       	mov	r11, r8
    1b20:	01 c0       	rjmp	.+2      	; 0x1b24 <vfprintf+0x2f0>
    1b22:	b9 2c       	mov	r11, r9
    1b24:	a4 fe       	sbrs	r10, 4
    1b26:	0f c0       	rjmp	.+30     	; 0x1b46 <vfprintf+0x312>
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e8 0d       	add	r30, r8
    1b2c:	f1 1d       	adc	r31, r1
    1b2e:	80 81       	ld	r24, Z
    1b30:	80 33       	cpi	r24, 0x30	; 48
    1b32:	21 f4       	brne	.+8      	; 0x1b3c <vfprintf+0x308>
    1b34:	9a 2d       	mov	r25, r10
    1b36:	99 7e       	andi	r25, 0xE9	; 233
    1b38:	a9 2e       	mov	r10, r25
    1b3a:	09 c0       	rjmp	.+18     	; 0x1b4e <vfprintf+0x31a>
    1b3c:	a2 fe       	sbrs	r10, 2
    1b3e:	06 c0       	rjmp	.+12     	; 0x1b4c <vfprintf+0x318>
    1b40:	b3 94       	inc	r11
    1b42:	b3 94       	inc	r11
    1b44:	04 c0       	rjmp	.+8      	; 0x1b4e <vfprintf+0x31a>
    1b46:	8a 2d       	mov	r24, r10
    1b48:	86 78       	andi	r24, 0x86	; 134
    1b4a:	09 f0       	breq	.+2      	; 0x1b4e <vfprintf+0x31a>
    1b4c:	b3 94       	inc	r11
    1b4e:	a3 fc       	sbrc	r10, 3
    1b50:	10 c0       	rjmp	.+32     	; 0x1b72 <vfprintf+0x33e>
    1b52:	a0 fe       	sbrs	r10, 0
    1b54:	06 c0       	rjmp	.+12     	; 0x1b62 <vfprintf+0x32e>
    1b56:	b2 14       	cp	r11, r2
    1b58:	80 f4       	brcc	.+32     	; 0x1b7a <vfprintf+0x346>
    1b5a:	28 0c       	add	r2, r8
    1b5c:	92 2c       	mov	r9, r2
    1b5e:	9b 18       	sub	r9, r11
    1b60:	0d c0       	rjmp	.+26     	; 0x1b7c <vfprintf+0x348>
    1b62:	b2 14       	cp	r11, r2
    1b64:	58 f4       	brcc	.+22     	; 0x1b7c <vfprintf+0x348>
    1b66:	b6 01       	movw	r22, r12
    1b68:	80 e2       	ldi	r24, 0x20	; 32
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	c8 d1       	rcall	.+912    	; 0x1efe <fputc>
    1b6e:	b3 94       	inc	r11
    1b70:	f8 cf       	rjmp	.-16     	; 0x1b62 <vfprintf+0x32e>
    1b72:	b2 14       	cp	r11, r2
    1b74:	18 f4       	brcc	.+6      	; 0x1b7c <vfprintf+0x348>
    1b76:	2b 18       	sub	r2, r11
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <vfprintf+0x34a>
    1b7a:	98 2c       	mov	r9, r8
    1b7c:	21 2c       	mov	r2, r1
    1b7e:	a4 fe       	sbrs	r10, 4
    1b80:	0f c0       	rjmp	.+30     	; 0x1ba0 <vfprintf+0x36c>
    1b82:	b6 01       	movw	r22, r12
    1b84:	80 e3       	ldi	r24, 0x30	; 48
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	ba d1       	rcall	.+884    	; 0x1efe <fputc>
    1b8a:	a2 fe       	sbrs	r10, 2
    1b8c:	16 c0       	rjmp	.+44     	; 0x1bba <vfprintf+0x386>
    1b8e:	a1 fc       	sbrc	r10, 1
    1b90:	03 c0       	rjmp	.+6      	; 0x1b98 <vfprintf+0x364>
    1b92:	88 e7       	ldi	r24, 0x78	; 120
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <vfprintf+0x368>
    1b98:	88 e5       	ldi	r24, 0x58	; 88
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	b6 01       	movw	r22, r12
    1b9e:	0c c0       	rjmp	.+24     	; 0x1bb8 <vfprintf+0x384>
    1ba0:	8a 2d       	mov	r24, r10
    1ba2:	86 78       	andi	r24, 0x86	; 134
    1ba4:	51 f0       	breq	.+20     	; 0x1bba <vfprintf+0x386>
    1ba6:	a1 fe       	sbrs	r10, 1
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <vfprintf+0x37a>
    1baa:	8b e2       	ldi	r24, 0x2B	; 43
    1bac:	01 c0       	rjmp	.+2      	; 0x1bb0 <vfprintf+0x37c>
    1bae:	80 e2       	ldi	r24, 0x20	; 32
    1bb0:	a7 fc       	sbrc	r10, 7
    1bb2:	8d e2       	ldi	r24, 0x2D	; 45
    1bb4:	b6 01       	movw	r22, r12
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	a2 d1       	rcall	.+836    	; 0x1efe <fputc>
    1bba:	89 14       	cp	r8, r9
    1bbc:	30 f4       	brcc	.+12     	; 0x1bca <vfprintf+0x396>
    1bbe:	b6 01       	movw	r22, r12
    1bc0:	80 e3       	ldi	r24, 0x30	; 48
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	9c d1       	rcall	.+824    	; 0x1efe <fputc>
    1bc6:	9a 94       	dec	r9
    1bc8:	f8 cf       	rjmp	.-16     	; 0x1bba <vfprintf+0x386>
    1bca:	8a 94       	dec	r8
    1bcc:	f3 01       	movw	r30, r6
    1bce:	e8 0d       	add	r30, r8
    1bd0:	f1 1d       	adc	r31, r1
    1bd2:	80 81       	ld	r24, Z
    1bd4:	b6 01       	movw	r22, r12
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	92 d1       	rcall	.+804    	; 0x1efe <fputc>
    1bda:	81 10       	cpse	r8, r1
    1bdc:	f6 cf       	rjmp	.-20     	; 0x1bca <vfprintf+0x396>
    1bde:	22 20       	and	r2, r2
    1be0:	09 f4       	brne	.+2      	; 0x1be4 <vfprintf+0x3b0>
    1be2:	4e ce       	rjmp	.-868    	; 0x1880 <vfprintf+0x4c>
    1be4:	b6 01       	movw	r22, r12
    1be6:	80 e2       	ldi	r24, 0x20	; 32
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	89 d1       	rcall	.+786    	; 0x1efe <fputc>
    1bec:	2a 94       	dec	r2
    1bee:	f7 cf       	rjmp	.-18     	; 0x1bde <vfprintf+0x3aa>
    1bf0:	f6 01       	movw	r30, r12
    1bf2:	86 81       	ldd	r24, Z+6	; 0x06
    1bf4:	97 81       	ldd	r25, Z+7	; 0x07
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <vfprintf+0x3c8>
    1bf8:	8f ef       	ldi	r24, 0xFF	; 255
    1bfa:	9f ef       	ldi	r25, 0xFF	; 255
    1bfc:	2b 96       	adiw	r28, 0x0b	; 11
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	1f 91       	pop	r17
    1c0e:	0f 91       	pop	r16
    1c10:	ff 90       	pop	r15
    1c12:	ef 90       	pop	r14
    1c14:	df 90       	pop	r13
    1c16:	cf 90       	pop	r12
    1c18:	bf 90       	pop	r11
    1c1a:	af 90       	pop	r10
    1c1c:	9f 90       	pop	r9
    1c1e:	8f 90       	pop	r8
    1c20:	7f 90       	pop	r7
    1c22:	6f 90       	pop	r6
    1c24:	5f 90       	pop	r5
    1c26:	4f 90       	pop	r4
    1c28:	3f 90       	pop	r3
    1c2a:	2f 90       	pop	r2
    1c2c:	08 95       	ret

00001c2e <calloc>:
    1c2e:	0f 93       	push	r16
    1c30:	1f 93       	push	r17
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	86 9f       	mul	r24, r22
    1c38:	80 01       	movw	r16, r0
    1c3a:	87 9f       	mul	r24, r23
    1c3c:	10 0d       	add	r17, r0
    1c3e:	96 9f       	mul	r25, r22
    1c40:	10 0d       	add	r17, r0
    1c42:	11 24       	eor	r1, r1
    1c44:	c8 01       	movw	r24, r16
    1c46:	0d d0       	rcall	.+26     	; 0x1c62 <malloc>
    1c48:	ec 01       	movw	r28, r24
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	21 f0       	breq	.+8      	; 0x1c56 <calloc+0x28>
    1c4e:	a8 01       	movw	r20, r16
    1c50:	60 e0       	ldi	r22, 0x00	; 0
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	32 d1       	rcall	.+612    	; 0x1eba <memset>
    1c56:	ce 01       	movw	r24, r28
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	1f 91       	pop	r17
    1c5e:	0f 91       	pop	r16
    1c60:	08 95       	ret

00001c62 <malloc>:
    1c62:	0f 93       	push	r16
    1c64:	1f 93       	push	r17
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	82 30       	cpi	r24, 0x02	; 2
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	10 f4       	brcc	.+4      	; 0x1c74 <malloc+0x12>
    1c70:	82 e0       	ldi	r24, 0x02	; 2
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	e0 91 c1 05 	lds	r30, 0x05C1	; 0x8005c1 <__flp>
    1c78:	f0 91 c2 05 	lds	r31, 0x05C2	; 0x8005c2 <__flp+0x1>
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	a0 e0       	ldi	r26, 0x00	; 0
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	30 97       	sbiw	r30, 0x00	; 0
    1c86:	19 f1       	breq	.+70     	; 0x1cce <malloc+0x6c>
    1c88:	40 81       	ld	r20, Z
    1c8a:	51 81       	ldd	r21, Z+1	; 0x01
    1c8c:	02 81       	ldd	r16, Z+2	; 0x02
    1c8e:	13 81       	ldd	r17, Z+3	; 0x03
    1c90:	48 17       	cp	r20, r24
    1c92:	59 07       	cpc	r21, r25
    1c94:	c8 f0       	brcs	.+50     	; 0x1cc8 <malloc+0x66>
    1c96:	84 17       	cp	r24, r20
    1c98:	95 07       	cpc	r25, r21
    1c9a:	69 f4       	brne	.+26     	; 0x1cb6 <malloc+0x54>
    1c9c:	10 97       	sbiw	r26, 0x00	; 0
    1c9e:	31 f0       	breq	.+12     	; 0x1cac <malloc+0x4a>
    1ca0:	12 96       	adiw	r26, 0x02	; 2
    1ca2:	0c 93       	st	X, r16
    1ca4:	12 97       	sbiw	r26, 0x02	; 2
    1ca6:	13 96       	adiw	r26, 0x03	; 3
    1ca8:	1c 93       	st	X, r17
    1caa:	27 c0       	rjmp	.+78     	; 0x1cfa <malloc+0x98>
    1cac:	00 93 c1 05 	sts	0x05C1, r16	; 0x8005c1 <__flp>
    1cb0:	10 93 c2 05 	sts	0x05C2, r17	; 0x8005c2 <__flp+0x1>
    1cb4:	22 c0       	rjmp	.+68     	; 0x1cfa <malloc+0x98>
    1cb6:	21 15       	cp	r18, r1
    1cb8:	31 05       	cpc	r19, r1
    1cba:	19 f0       	breq	.+6      	; 0x1cc2 <malloc+0x60>
    1cbc:	42 17       	cp	r20, r18
    1cbe:	53 07       	cpc	r21, r19
    1cc0:	18 f4       	brcc	.+6      	; 0x1cc8 <malloc+0x66>
    1cc2:	9a 01       	movw	r18, r20
    1cc4:	bd 01       	movw	r22, r26
    1cc6:	ef 01       	movw	r28, r30
    1cc8:	df 01       	movw	r26, r30
    1cca:	f8 01       	movw	r30, r16
    1ccc:	db cf       	rjmp	.-74     	; 0x1c84 <malloc+0x22>
    1cce:	21 15       	cp	r18, r1
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	f9 f0       	breq	.+62     	; 0x1d12 <malloc+0xb0>
    1cd4:	28 1b       	sub	r18, r24
    1cd6:	39 0b       	sbc	r19, r25
    1cd8:	24 30       	cpi	r18, 0x04	; 4
    1cda:	31 05       	cpc	r19, r1
    1cdc:	80 f4       	brcc	.+32     	; 0x1cfe <malloc+0x9c>
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce2:	61 15       	cp	r22, r1
    1ce4:	71 05       	cpc	r23, r1
    1ce6:	21 f0       	breq	.+8      	; 0x1cf0 <malloc+0x8e>
    1ce8:	fb 01       	movw	r30, r22
    1cea:	93 83       	std	Z+3, r25	; 0x03
    1cec:	82 83       	std	Z+2, r24	; 0x02
    1cee:	04 c0       	rjmp	.+8      	; 0x1cf8 <malloc+0x96>
    1cf0:	90 93 c2 05 	sts	0x05C2, r25	; 0x8005c2 <__flp+0x1>
    1cf4:	80 93 c1 05 	sts	0x05C1, r24	; 0x8005c1 <__flp>
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	32 96       	adiw	r30, 0x02	; 2
    1cfc:	44 c0       	rjmp	.+136    	; 0x1d86 <malloc+0x124>
    1cfe:	fe 01       	movw	r30, r28
    1d00:	e2 0f       	add	r30, r18
    1d02:	f3 1f       	adc	r31, r19
    1d04:	81 93       	st	Z+, r24
    1d06:	91 93       	st	Z+, r25
    1d08:	22 50       	subi	r18, 0x02	; 2
    1d0a:	31 09       	sbc	r19, r1
    1d0c:	39 83       	std	Y+1, r19	; 0x01
    1d0e:	28 83       	st	Y, r18
    1d10:	3a c0       	rjmp	.+116    	; 0x1d86 <malloc+0x124>
    1d12:	20 91 bf 05 	lds	r18, 0x05BF	; 0x8005bf <__brkval>
    1d16:	30 91 c0 05 	lds	r19, 0x05C0	; 0x8005c0 <__brkval+0x1>
    1d1a:	23 2b       	or	r18, r19
    1d1c:	41 f4       	brne	.+16     	; 0x1d2e <malloc+0xcc>
    1d1e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1d22:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1d26:	30 93 c0 05 	sts	0x05C0, r19	; 0x8005c0 <__brkval+0x1>
    1d2a:	20 93 bf 05 	sts	0x05BF, r18	; 0x8005bf <__brkval>
    1d2e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1d32:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1d36:	21 15       	cp	r18, r1
    1d38:	31 05       	cpc	r19, r1
    1d3a:	41 f4       	brne	.+16     	; 0x1d4c <malloc+0xea>
    1d3c:	2d b7       	in	r18, 0x3d	; 61
    1d3e:	3e b7       	in	r19, 0x3e	; 62
    1d40:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1d44:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1d48:	24 1b       	sub	r18, r20
    1d4a:	35 0b       	sbc	r19, r21
    1d4c:	e0 91 bf 05 	lds	r30, 0x05BF	; 0x8005bf <__brkval>
    1d50:	f0 91 c0 05 	lds	r31, 0x05C0	; 0x8005c0 <__brkval+0x1>
    1d54:	e2 17       	cp	r30, r18
    1d56:	f3 07       	cpc	r31, r19
    1d58:	a0 f4       	brcc	.+40     	; 0x1d82 <malloc+0x120>
    1d5a:	2e 1b       	sub	r18, r30
    1d5c:	3f 0b       	sbc	r19, r31
    1d5e:	28 17       	cp	r18, r24
    1d60:	39 07       	cpc	r19, r25
    1d62:	78 f0       	brcs	.+30     	; 0x1d82 <malloc+0x120>
    1d64:	ac 01       	movw	r20, r24
    1d66:	4e 5f       	subi	r20, 0xFE	; 254
    1d68:	5f 4f       	sbci	r21, 0xFF	; 255
    1d6a:	24 17       	cp	r18, r20
    1d6c:	35 07       	cpc	r19, r21
    1d6e:	48 f0       	brcs	.+18     	; 0x1d82 <malloc+0x120>
    1d70:	4e 0f       	add	r20, r30
    1d72:	5f 1f       	adc	r21, r31
    1d74:	50 93 c0 05 	sts	0x05C0, r21	; 0x8005c0 <__brkval+0x1>
    1d78:	40 93 bf 05 	sts	0x05BF, r20	; 0x8005bf <__brkval>
    1d7c:	81 93       	st	Z+, r24
    1d7e:	91 93       	st	Z+, r25
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <malloc+0x124>
    1d82:	e0 e0       	ldi	r30, 0x00	; 0
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	cf 01       	movw	r24, r30
    1d88:	df 91       	pop	r29
    1d8a:	cf 91       	pop	r28
    1d8c:	1f 91       	pop	r17
    1d8e:	0f 91       	pop	r16
    1d90:	08 95       	ret

00001d92 <free>:
    1d92:	cf 93       	push	r28
    1d94:	df 93       	push	r29
    1d96:	00 97       	sbiw	r24, 0x00	; 0
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <free+0xa>
    1d9a:	81 c0       	rjmp	.+258    	; 0x1e9e <free+0x10c>
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	32 97       	sbiw	r30, 0x02	; 2
    1da0:	13 82       	std	Z+3, r1	; 0x03
    1da2:	12 82       	std	Z+2, r1	; 0x02
    1da4:	a0 91 c1 05 	lds	r26, 0x05C1	; 0x8005c1 <__flp>
    1da8:	b0 91 c2 05 	lds	r27, 0x05C2	; 0x8005c2 <__flp+0x1>
    1dac:	10 97       	sbiw	r26, 0x00	; 0
    1dae:	81 f4       	brne	.+32     	; 0x1dd0 <free+0x3e>
    1db0:	20 81       	ld	r18, Z
    1db2:	31 81       	ldd	r19, Z+1	; 0x01
    1db4:	82 0f       	add	r24, r18
    1db6:	93 1f       	adc	r25, r19
    1db8:	20 91 bf 05 	lds	r18, 0x05BF	; 0x8005bf <__brkval>
    1dbc:	30 91 c0 05 	lds	r19, 0x05C0	; 0x8005c0 <__brkval+0x1>
    1dc0:	28 17       	cp	r18, r24
    1dc2:	39 07       	cpc	r19, r25
    1dc4:	51 f5       	brne	.+84     	; 0x1e1a <free+0x88>
    1dc6:	f0 93 c0 05 	sts	0x05C0, r31	; 0x8005c0 <__brkval+0x1>
    1dca:	e0 93 bf 05 	sts	0x05BF, r30	; 0x8005bf <__brkval>
    1dce:	67 c0       	rjmp	.+206    	; 0x1e9e <free+0x10c>
    1dd0:	ed 01       	movw	r28, r26
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	ce 17       	cp	r28, r30
    1dd8:	df 07       	cpc	r29, r31
    1dda:	40 f4       	brcc	.+16     	; 0x1dec <free+0x5a>
    1ddc:	4a 81       	ldd	r20, Y+2	; 0x02
    1dde:	5b 81       	ldd	r21, Y+3	; 0x03
    1de0:	9e 01       	movw	r18, r28
    1de2:	41 15       	cp	r20, r1
    1de4:	51 05       	cpc	r21, r1
    1de6:	f1 f0       	breq	.+60     	; 0x1e24 <free+0x92>
    1de8:	ea 01       	movw	r28, r20
    1dea:	f5 cf       	rjmp	.-22     	; 0x1dd6 <free+0x44>
    1dec:	d3 83       	std	Z+3, r29	; 0x03
    1dee:	c2 83       	std	Z+2, r28	; 0x02
    1df0:	40 81       	ld	r20, Z
    1df2:	51 81       	ldd	r21, Z+1	; 0x01
    1df4:	84 0f       	add	r24, r20
    1df6:	95 1f       	adc	r25, r21
    1df8:	c8 17       	cp	r28, r24
    1dfa:	d9 07       	cpc	r29, r25
    1dfc:	59 f4       	brne	.+22     	; 0x1e14 <free+0x82>
    1dfe:	88 81       	ld	r24, Y
    1e00:	99 81       	ldd	r25, Y+1	; 0x01
    1e02:	84 0f       	add	r24, r20
    1e04:	95 1f       	adc	r25, r21
    1e06:	02 96       	adiw	r24, 0x02	; 2
    1e08:	91 83       	std	Z+1, r25	; 0x01
    1e0a:	80 83       	st	Z, r24
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e10:	93 83       	std	Z+3, r25	; 0x03
    1e12:	82 83       	std	Z+2, r24	; 0x02
    1e14:	21 15       	cp	r18, r1
    1e16:	31 05       	cpc	r19, r1
    1e18:	29 f4       	brne	.+10     	; 0x1e24 <free+0x92>
    1e1a:	f0 93 c2 05 	sts	0x05C2, r31	; 0x8005c2 <__flp+0x1>
    1e1e:	e0 93 c1 05 	sts	0x05C1, r30	; 0x8005c1 <__flp>
    1e22:	3d c0       	rjmp	.+122    	; 0x1e9e <free+0x10c>
    1e24:	e9 01       	movw	r28, r18
    1e26:	fb 83       	std	Y+3, r31	; 0x03
    1e28:	ea 83       	std	Y+2, r30	; 0x02
    1e2a:	49 91       	ld	r20, Y+
    1e2c:	59 91       	ld	r21, Y+
    1e2e:	c4 0f       	add	r28, r20
    1e30:	d5 1f       	adc	r29, r21
    1e32:	ec 17       	cp	r30, r28
    1e34:	fd 07       	cpc	r31, r29
    1e36:	61 f4       	brne	.+24     	; 0x1e50 <free+0xbe>
    1e38:	80 81       	ld	r24, Z
    1e3a:	91 81       	ldd	r25, Z+1	; 0x01
    1e3c:	84 0f       	add	r24, r20
    1e3e:	95 1f       	adc	r25, r21
    1e40:	02 96       	adiw	r24, 0x02	; 2
    1e42:	e9 01       	movw	r28, r18
    1e44:	99 83       	std	Y+1, r25	; 0x01
    1e46:	88 83       	st	Y, r24
    1e48:	82 81       	ldd	r24, Z+2	; 0x02
    1e4a:	93 81       	ldd	r25, Z+3	; 0x03
    1e4c:	9b 83       	std	Y+3, r25	; 0x03
    1e4e:	8a 83       	std	Y+2, r24	; 0x02
    1e50:	e0 e0       	ldi	r30, 0x00	; 0
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	12 96       	adiw	r26, 0x02	; 2
    1e56:	8d 91       	ld	r24, X+
    1e58:	9c 91       	ld	r25, X
    1e5a:	13 97       	sbiw	r26, 0x03	; 3
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	19 f0       	breq	.+6      	; 0x1e66 <free+0xd4>
    1e60:	fd 01       	movw	r30, r26
    1e62:	dc 01       	movw	r26, r24
    1e64:	f7 cf       	rjmp	.-18     	; 0x1e54 <free+0xc2>
    1e66:	8d 91       	ld	r24, X+
    1e68:	9c 91       	ld	r25, X
    1e6a:	11 97       	sbiw	r26, 0x01	; 1
    1e6c:	9d 01       	movw	r18, r26
    1e6e:	2e 5f       	subi	r18, 0xFE	; 254
    1e70:	3f 4f       	sbci	r19, 0xFF	; 255
    1e72:	82 0f       	add	r24, r18
    1e74:	93 1f       	adc	r25, r19
    1e76:	20 91 bf 05 	lds	r18, 0x05BF	; 0x8005bf <__brkval>
    1e7a:	30 91 c0 05 	lds	r19, 0x05C0	; 0x8005c0 <__brkval+0x1>
    1e7e:	28 17       	cp	r18, r24
    1e80:	39 07       	cpc	r19, r25
    1e82:	69 f4       	brne	.+26     	; 0x1e9e <free+0x10c>
    1e84:	30 97       	sbiw	r30, 0x00	; 0
    1e86:	29 f4       	brne	.+10     	; 0x1e92 <free+0x100>
    1e88:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <__flp+0x1>
    1e8c:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <__flp>
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <free+0x104>
    1e92:	13 82       	std	Z+3, r1	; 0x03
    1e94:	12 82       	std	Z+2, r1	; 0x02
    1e96:	b0 93 c0 05 	sts	0x05C0, r27	; 0x8005c0 <__brkval+0x1>
    1e9a:	a0 93 bf 05 	sts	0x05BF, r26	; 0x8005bf <__brkval>
    1e9e:	df 91       	pop	r29
    1ea0:	cf 91       	pop	r28
    1ea2:	08 95       	ret

00001ea4 <strnlen_P>:
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	05 90       	lpm	r0, Z+
    1ea8:	61 50       	subi	r22, 0x01	; 1
    1eaa:	70 40       	sbci	r23, 0x00	; 0
    1eac:	01 10       	cpse	r0, r1
    1eae:	d8 f7       	brcc	.-10     	; 0x1ea6 <strnlen_P+0x2>
    1eb0:	80 95       	com	r24
    1eb2:	90 95       	com	r25
    1eb4:	8e 0f       	add	r24, r30
    1eb6:	9f 1f       	adc	r25, r31
    1eb8:	08 95       	ret

00001eba <memset>:
    1eba:	dc 01       	movw	r26, r24
    1ebc:	01 c0       	rjmp	.+2      	; 0x1ec0 <memset+0x6>
    1ebe:	6d 93       	st	X+, r22
    1ec0:	41 50       	subi	r20, 0x01	; 1
    1ec2:	50 40       	sbci	r21, 0x00	; 0
    1ec4:	e0 f7       	brcc	.-8      	; 0x1ebe <memset+0x4>
    1ec6:	08 95       	ret

00001ec8 <strnlen>:
    1ec8:	fc 01       	movw	r30, r24
    1eca:	61 50       	subi	r22, 0x01	; 1
    1ecc:	70 40       	sbci	r23, 0x00	; 0
    1ece:	01 90       	ld	r0, Z+
    1ed0:	01 10       	cpse	r0, r1
    1ed2:	d8 f7       	brcc	.-10     	; 0x1eca <strnlen+0x2>
    1ed4:	80 95       	com	r24
    1ed6:	90 95       	com	r25
    1ed8:	8e 0f       	add	r24, r30
    1eda:	9f 1f       	adc	r25, r31
    1edc:	08 95       	ret

00001ede <strrev>:
    1ede:	dc 01       	movw	r26, r24
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	67 2f       	mov	r22, r23
    1ee4:	71 91       	ld	r23, Z+
    1ee6:	77 23       	and	r23, r23
    1ee8:	e1 f7       	brne	.-8      	; 0x1ee2 <strrev+0x4>
    1eea:	32 97       	sbiw	r30, 0x02	; 2
    1eec:	04 c0       	rjmp	.+8      	; 0x1ef6 <strrev+0x18>
    1eee:	7c 91       	ld	r23, X
    1ef0:	6d 93       	st	X+, r22
    1ef2:	70 83       	st	Z, r23
    1ef4:	62 91       	ld	r22, -Z
    1ef6:	ae 17       	cp	r26, r30
    1ef8:	bf 07       	cpc	r27, r31
    1efa:	c8 f3       	brcs	.-14     	; 0x1eee <strrev+0x10>
    1efc:	08 95       	ret

00001efe <fputc>:
    1efe:	0f 93       	push	r16
    1f00:	1f 93       	push	r17
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
    1f06:	fb 01       	movw	r30, r22
    1f08:	23 81       	ldd	r18, Z+3	; 0x03
    1f0a:	21 fd       	sbrc	r18, 1
    1f0c:	03 c0       	rjmp	.+6      	; 0x1f14 <fputc+0x16>
    1f0e:	8f ef       	ldi	r24, 0xFF	; 255
    1f10:	9f ef       	ldi	r25, 0xFF	; 255
    1f12:	2c c0       	rjmp	.+88     	; 0x1f6c <fputc+0x6e>
    1f14:	22 ff       	sbrs	r18, 2
    1f16:	16 c0       	rjmp	.+44     	; 0x1f44 <fputc+0x46>
    1f18:	46 81       	ldd	r20, Z+6	; 0x06
    1f1a:	57 81       	ldd	r21, Z+7	; 0x07
    1f1c:	24 81       	ldd	r18, Z+4	; 0x04
    1f1e:	35 81       	ldd	r19, Z+5	; 0x05
    1f20:	42 17       	cp	r20, r18
    1f22:	53 07       	cpc	r21, r19
    1f24:	44 f4       	brge	.+16     	; 0x1f36 <fputc+0x38>
    1f26:	a0 81       	ld	r26, Z
    1f28:	b1 81       	ldd	r27, Z+1	; 0x01
    1f2a:	9d 01       	movw	r18, r26
    1f2c:	2f 5f       	subi	r18, 0xFF	; 255
    1f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f30:	31 83       	std	Z+1, r19	; 0x01
    1f32:	20 83       	st	Z, r18
    1f34:	8c 93       	st	X, r24
    1f36:	26 81       	ldd	r18, Z+6	; 0x06
    1f38:	37 81       	ldd	r19, Z+7	; 0x07
    1f3a:	2f 5f       	subi	r18, 0xFF	; 255
    1f3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3e:	37 83       	std	Z+7, r19	; 0x07
    1f40:	26 83       	std	Z+6, r18	; 0x06
    1f42:	14 c0       	rjmp	.+40     	; 0x1f6c <fputc+0x6e>
    1f44:	8b 01       	movw	r16, r22
    1f46:	ec 01       	movw	r28, r24
    1f48:	fb 01       	movw	r30, r22
    1f4a:	00 84       	ldd	r0, Z+8	; 0x08
    1f4c:	f1 85       	ldd	r31, Z+9	; 0x09
    1f4e:	e0 2d       	mov	r30, r0
    1f50:	19 95       	eicall
    1f52:	89 2b       	or	r24, r25
    1f54:	e1 f6       	brne	.-72     	; 0x1f0e <fputc+0x10>
    1f56:	d8 01       	movw	r26, r16
    1f58:	16 96       	adiw	r26, 0x06	; 6
    1f5a:	8d 91       	ld	r24, X+
    1f5c:	9c 91       	ld	r25, X
    1f5e:	17 97       	sbiw	r26, 0x07	; 7
    1f60:	01 96       	adiw	r24, 0x01	; 1
    1f62:	17 96       	adiw	r26, 0x07	; 7
    1f64:	9c 93       	st	X, r25
    1f66:	8e 93       	st	-X, r24
    1f68:	16 97       	sbiw	r26, 0x06	; 6
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	1f 91       	pop	r17
    1f72:	0f 91       	pop	r16
    1f74:	08 95       	ret

00001f76 <__ultoa_invert>:
    1f76:	fa 01       	movw	r30, r20
    1f78:	aa 27       	eor	r26, r26
    1f7a:	28 30       	cpi	r18, 0x08	; 8
    1f7c:	51 f1       	breq	.+84     	; 0x1fd2 <__ultoa_invert+0x5c>
    1f7e:	20 31       	cpi	r18, 0x10	; 16
    1f80:	81 f1       	breq	.+96     	; 0x1fe2 <__ultoa_invert+0x6c>
    1f82:	e8 94       	clt
    1f84:	6f 93       	push	r22
    1f86:	6e 7f       	andi	r22, 0xFE	; 254
    1f88:	6e 5f       	subi	r22, 0xFE	; 254
    1f8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f90:	af 4f       	sbci	r26, 0xFF	; 255
    1f92:	b1 e0       	ldi	r27, 0x01	; 1
    1f94:	3e d0       	rcall	.+124    	; 0x2012 <__ultoa_invert+0x9c>
    1f96:	b4 e0       	ldi	r27, 0x04	; 4
    1f98:	3c d0       	rcall	.+120    	; 0x2012 <__ultoa_invert+0x9c>
    1f9a:	67 0f       	add	r22, r23
    1f9c:	78 1f       	adc	r23, r24
    1f9e:	89 1f       	adc	r24, r25
    1fa0:	9a 1f       	adc	r25, r26
    1fa2:	a1 1d       	adc	r26, r1
    1fa4:	68 0f       	add	r22, r24
    1fa6:	79 1f       	adc	r23, r25
    1fa8:	8a 1f       	adc	r24, r26
    1faa:	91 1d       	adc	r25, r1
    1fac:	a1 1d       	adc	r26, r1
    1fae:	6a 0f       	add	r22, r26
    1fb0:	71 1d       	adc	r23, r1
    1fb2:	81 1d       	adc	r24, r1
    1fb4:	91 1d       	adc	r25, r1
    1fb6:	a1 1d       	adc	r26, r1
    1fb8:	20 d0       	rcall	.+64     	; 0x1ffa <__ultoa_invert+0x84>
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <__ultoa_invert+0x48>
    1fbc:	68 94       	set
    1fbe:	3f 91       	pop	r19
    1fc0:	2a e0       	ldi	r18, 0x0A	; 10
    1fc2:	26 9f       	mul	r18, r22
    1fc4:	11 24       	eor	r1, r1
    1fc6:	30 19       	sub	r19, r0
    1fc8:	30 5d       	subi	r19, 0xD0	; 208
    1fca:	31 93       	st	Z+, r19
    1fcc:	de f6       	brtc	.-74     	; 0x1f84 <__ultoa_invert+0xe>
    1fce:	cf 01       	movw	r24, r30
    1fd0:	08 95       	ret
    1fd2:	46 2f       	mov	r20, r22
    1fd4:	47 70       	andi	r20, 0x07	; 7
    1fd6:	40 5d       	subi	r20, 0xD0	; 208
    1fd8:	41 93       	st	Z+, r20
    1fda:	b3 e0       	ldi	r27, 0x03	; 3
    1fdc:	0f d0       	rcall	.+30     	; 0x1ffc <__ultoa_invert+0x86>
    1fde:	c9 f7       	brne	.-14     	; 0x1fd2 <__ultoa_invert+0x5c>
    1fe0:	f6 cf       	rjmp	.-20     	; 0x1fce <__ultoa_invert+0x58>
    1fe2:	46 2f       	mov	r20, r22
    1fe4:	4f 70       	andi	r20, 0x0F	; 15
    1fe6:	40 5d       	subi	r20, 0xD0	; 208
    1fe8:	4a 33       	cpi	r20, 0x3A	; 58
    1fea:	18 f0       	brcs	.+6      	; 0x1ff2 <__ultoa_invert+0x7c>
    1fec:	49 5d       	subi	r20, 0xD9	; 217
    1fee:	31 fd       	sbrc	r19, 1
    1ff0:	40 52       	subi	r20, 0x20	; 32
    1ff2:	41 93       	st	Z+, r20
    1ff4:	02 d0       	rcall	.+4      	; 0x1ffa <__ultoa_invert+0x84>
    1ff6:	a9 f7       	brne	.-22     	; 0x1fe2 <__ultoa_invert+0x6c>
    1ff8:	ea cf       	rjmp	.-44     	; 0x1fce <__ultoa_invert+0x58>
    1ffa:	b4 e0       	ldi	r27, 0x04	; 4
    1ffc:	a6 95       	lsr	r26
    1ffe:	97 95       	ror	r25
    2000:	87 95       	ror	r24
    2002:	77 95       	ror	r23
    2004:	67 95       	ror	r22
    2006:	ba 95       	dec	r27
    2008:	c9 f7       	brne	.-14     	; 0x1ffc <__ultoa_invert+0x86>
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	61 05       	cpc	r22, r1
    200e:	71 05       	cpc	r23, r1
    2010:	08 95       	ret
    2012:	9b 01       	movw	r18, r22
    2014:	ac 01       	movw	r20, r24
    2016:	0a 2e       	mov	r0, r26
    2018:	06 94       	lsr	r0
    201a:	57 95       	ror	r21
    201c:	47 95       	ror	r20
    201e:	37 95       	ror	r19
    2020:	27 95       	ror	r18
    2022:	ba 95       	dec	r27
    2024:	c9 f7       	brne	.-14     	; 0x2018 <__ultoa_invert+0xa2>
    2026:	62 0f       	add	r22, r18
    2028:	73 1f       	adc	r23, r19
    202a:	84 1f       	adc	r24, r20
    202c:	95 1f       	adc	r25, r21
    202e:	a0 1d       	adc	r26, r0
    2030:	08 95       	ret

00002032 <_exit>:
    2032:	f8 94       	cli

00002034 <__stop_program>:
    2034:	ff cf       	rjmp	.-2      	; 0x2034 <__stop_program>
